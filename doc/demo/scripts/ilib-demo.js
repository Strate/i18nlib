/*
 * ilibglobal.js - define the ilib name space
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @namespace The global namespace that contains all ilib functions and classes.
 */
var ilib = ilib || {};

/**
 * Return the current version of ilib.
 * 
 * @static
 * @return {string} a version string for this instance of ilib
 */
ilib.getVersion = function () {
    // increment this for each release
    return "8.0"
    ;
};

/**
 * Place where resources and such are eventually assigned.
 */
ilib.data = {
    norm: {
        nfc: {},
        nfd: {},
        nfkd: {},
        ccc: {}
    },
    zoneinfo: {
        "Etc/UTC":{"o":"0:0","f":"UTC"},
        "local":{"f":"local"}
    },
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_c: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_l: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_m: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_p: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ ctype_z: null,
    /** @type {null|Object.<string,Array.<Array.<number>>>} */ scriptToRange: null,
    /** @type {null|Object.<string,string|Object.<string|Object.<string,string>>>} */ dateformats: null
};

if (typeof(window) !== 'undefined') {
    window["ilib"] = ilib;
}

// export ilib for use as a module in nodejs
if (typeof(exports) !== 'undefined') {
    exports.ilib = ilib;
}

/**
 * Return the name of the platform
 * @private
 * @static
 * @return {string} string naming the platform
 */
ilib._getPlatform = function () {
    if (!ilib._platform) {
        if (typeof(environment) !== 'undefined') {
            ilib._platform = "rhino";
        } else if (typeof(process) !== 'undefined' || typeof(require) !== 'undefined') {
            ilib._platform = "nodejs";
        } else if (typeof(window) !== 'undefined') {
            ilib._platform = (typeof(PalmSystem) !== 'undefined') ? "webos" : "browser";
        } else {
            ilib._platform = "unknown";
        }
    }    
    return ilib._platform;
};

/**
 * Return true if the global variable is defined on this platform.
 * @private
 * @static
 * @return {boolean} true if the global variable is defined on this platform, false otherwise
 */
ilib._isGlobal = function(name) {
    switch (ilib._getPlatform()) {
        case "rhino":
            var top = (function() {
              return (typeof global === 'object') ? global : this;
            })();
            return typeof(top[name]) !== undefined;
        case "nodejs":
            var root = typeof(global) !== 'undefined' ? global : this;
            return root && typeof(root[name]) !== undefined;
            
        default:
            return typeof(window[name]) !== undefined;
    }
};

/**
 * Sets the default locale for all of ilib. This locale will be used
 * when no explicit locale is passed to any ilib class. If the default
 * locale is not set, ilib will attempt to use the locale of the
 * environment it is running in, if it can find that. If not, it will
 * default to the locale "en-US".<p>
 * 
 * Depends directive: !depends ilibglobal.js
 * 
 * @static
 * @param {string} spec the locale specifier for the default locale
 */
ilib.setLocale = function (spec) {
    if (typeof(spec) === 'string') {
        ilib.locale = spec;
    }
    // else ignore other data types, as we don't have the dependencies
    // to look into them to find a locale
};

/**
 * Return the default locale for all of ilib if one has been set. This 
 * locale will be used when no explicit locale is passed to any ilib 
 * class. If the default
 * locale is not set, ilib will attempt to use the locale of the
 * environment it is running in, if it can find that. If not, it will
 * default to the locale "en-US".<p>
 * 
 * Depends directive: !depends ilibglobal.js 
 * 
 * @static
 * @return {string} the locale specifier for the default locale
 */
ilib.getLocale = function () {
    if (typeof(ilib.locale) !== 'string') {
        if (typeof(navigator) !== 'undefined' && typeof(navigator.language) !== 'undefined') {
            // running in a browser
            ilib.locale = navigator.language;  // FF/Opera/Chrome/Webkit
            if (!ilib.locale) {
                // IE on Windows
                var lang = typeof(navigator.browserLanguage) !== 'undefined' ? 
                    navigator.browserLanguage : 
                    (typeof(navigator.userLanguage) !== 'undefined' ? 
                        navigator.userLanguage : 
                        (typeof(navigator.systemLanguage) !== 'undefined' ?
                            navigator.systemLanguage :
                            undefined));
                if (typeof(lang) !== 'undefined' && lang) {
                    // for some reason, MS uses lower case region tags
                    ilib.locale = lang.substring(0,3) + lang.substring(3,5).toUpperCase();
                }
            }
        } else if (typeof(PalmSystem) !== 'undefined' && typeof(PalmSystem.locales) !== 'undefined') {
            // webOS
            if (typeof(PalmSystem.locales.UI) != 'undefined' && PalmSystem.locales.UI.length > 0) {
                ilib.locale = PalmSystem.locales.UI;
            }
        } else if (typeof(environment) !== 'undefined' && typeof(environment.user) !== 'undefined') {
            // running under rhino
            if (typeof(environment.user.language) === 'string' && environment.user.language.length > 0) {
                ilib.locale = environment.user.language;
                if (typeof(environment.user.country) === 'string' && environment.user.country.length > 0) {
                    ilib.locale += '-' + environment.user.country;
                }
            }
        } else if (typeof(process) !== 'undefined' && typeof(process.env) !== 'undefined') {
            // running under nodejs
            var lang = process.env.LANG || process.env.LC_ALL;
            // the LANG variable on unix is in the form "lang_REGION.CHARSET"
            // where language and region are the correct ISO codes separated by
            // an underscore. This translate it back to the BCP-47 form.
            if (lang && lang !== 'undefined') {
                ilib.locale = lang.substring(0,2).toLowerCase() + '-' + lang.substring(3,5).toUpperCase();
            }
        }
             
        ilib.locale = typeof(ilib.locale) === 'string' ? ilib.locale : 'en-US';
    }
    return ilib.locale;
};

/**
 * Sets the default time zone for all of ilib. This time zone will be used when
 * no explicit time zone is passed to any ilib class. If the default time zone
 * is not set, ilib will attempt to use the time zone of the
 * environment it is running in, if it can find that. If not, it will
 * default to the the UTC zone "Etc/UTC".<p>
 * 
 * Depends directive: !depends ilibglobal.js
 * 
 * @static
 * @param {string} tz the name of the time zone to set as the default time zone
 */
ilib.setTimeZone = function (tz) {
    ilib.tz = tz || ilib.tz;
};

/**
 * Return the default time zone for all of ilib if one has been set. This 
 * time zone will be used when no explicit time zone is passed to any ilib 
 * class. If the default time zone
 * is not set, ilib will attempt to use the locale of the
 * environment it is running in, if it can find that. If not, it will
 * default to the the zone "local".<p>
 * 
 * Depends directive: !depends ilibglobal.js
 * 
 * @static
 * @return {string} the default time zone for ilib
 */
ilib.getTimeZone = function() {
    if (typeof(ilib.tz) === 'undefined') {
        if (typeof(navigator) !== 'undefined' && typeof(navigator.timezone) !== 'undefined') {
            // running in a browser
            if (navigator.timezone.length > 0) {
                ilib.tz = navigator.timezone;
            }
        } else if (typeof(PalmSystem) !== 'undefined' && typeof(PalmSystem.timezone) !== 'undefined') {
            // running in webkit on webOS
            if (PalmSystem.timezone.length > 0) {
                ilib.tz = PalmSystem.timezone;
            }
        } else if (typeof(environment) !== 'undefined' && typeof(environment.user) !== 'undefined') {
            // running under rhino
            if (typeof(environment.user.timezone) !== 'undefined' && environment.user.timezone.length > 0) {
                ilib.tz = environment.user.timezone;
            }
        } else if (typeof(process) !== 'undefined' && typeof(process.env) !== 'undefined') {
            // running in nodejs
            if (process.env.TZ && process.env.TZ !== "undefined") {
                ilib.tz = process.env.TZ;
            }
        }
        
        ilib.tz = ilib.tz || "local"; 
    }

    return ilib.tz;
};

/**
 * Defines the interface for the loader class for ilib. The main method of the
 * loader object is loadFiles(), which loads a set of requested locale data files
 * from where-ever it is stored.
 * @interface
 */
ilib.Loader = function() {};

/**
 * Load a set of files from where-ever it is stored.<p>
 * 
 * This is the main function define a callback function for loading missing locale 
 * data or resources.
 * If this copy of ilib is assembled without including the required locale data
 * or resources, then that data can be lazy loaded dynamically when it is 
 * needed by calling this method. Each ilib class will first
 * check for the existence of data under ilib.data, and if it is not there, 
 * it will attempt to load it by calling this method of the laoder, and then place
 * it there.<p>
 * 
 * Suggested implementations of this method might load files 
 * directly from disk under nodejs or rhino, or within web pages, to load 
 * files from the server with XHR calls.<p>
 * 
 * The first parameter to this method, paths, is an array of relative paths within 
 * the ilib dir structure for the 
 * requested data. These paths will already have the locale spec integrated 
 * into them, so no further tweaking needs to happen to load the data. Simply
 * load the named files. The second
 * parameter tells the loader whether to load the files synchronously or asynchronously.
 * If the sync parameters is false, then the onLoad function must also be specified.
 * The third parameter gives extra parameters to the loader passed from the calling
 * code. This may contain any property/value pairs.  The last parameter, callback,
 * is a callback function to call when all of the data is finishing loading. Make
 * sure to call the callback with the context of "this" so that the caller has their 
 * context back again.<p>
 * 
 * The loader function must be able to operate either synchronously or asychronously. 
 * If the loader function is called with an undefined callback function, it is
 * expected to load the data synchronously, convert it to javascript
 * objects, and return the array of json objects as the return value of the 
 * function. If the loader 
 * function is called with a callback function, it may load the data 
 * synchronously or asynchronously (doesn't matter which) as long as it calls
 * the callback function with the data converted to a javascript objects
 * when it becomes available. If a particular file could not be loaded, the 
 * loader function should put undefined into the corresponding entry in the
 * results array. 
 * Note that it is important that all the data is loaded before the callback
 * is called.<p>
 * 
 * An example implementation for nodejs might be:
 * 
 * <pre>
 * var fs = require("fs");
 * 
 * var myLoader = function() {};
 * myLoader.prototype = new ilib.Loader();
 * myLoader.prototype.constructor = myLoader;
 * myLoader.prototype.loadFiles = function(paths, sync, params, callback) {
 *    if (sync) {
 *        var ret = [];
 *        // synchronous load -- just return the result
 *        paths.forEach(function (path) {
 *            var json = fs.readFileSync(path, "utf-8");
 *            ret.push(json ? JSON.parse(json) : undefined);
 *        });
 *        
 *        return ret;
 *    }
 *    this.callback = callback;
 *
 *    // asynchronous
 *    this.results = [];
 *    this._loadFilesAsync(paths);
 * }
 * myLoader.prototype._loadFilesAsync = function (paths) {
 *    if (paths.length > 0) {
 *        var file = paths.shift();
 *        fs.readFile(file, "utf-8", function(err, json) {
 *            this.results.push(err ? undefined : JSON.parse(json));
 *            // call self recursively so that the callback is only called at the end
 *            // when all the files are loaded sequentially
 *            if (paths.length > 0) {
 *                this._loadFilesAsync(paths);
 *            } else {
 *                this.callback(this.results);
 *            }
 *        });
 *     }
 * }
 * 
 * // bind to "this" so that "this" is relative to your own instance
 * ilib.setLoaderCallback(new myLoader());
 * </pre>

 * @param {Array.<string>} paths An array of paths to load from wherever the files are stored 
 * @param {Boolean} sync if true, load the files synchronously, and false means asynchronously
 * @param {Object} params an object with any extra parameters for the loader. These can be 
 * anything. The caller of the ilib class passes these parameters in. Presumably, the code that
 * calls ilib and the code that provides the loader are together and can have a private 
 * agreement between them about what the parameters should contain.
 * @param {function(Object)} callback function to call when the files are all loaded. The 
 * parameter of the callback function is the contents of the files.
 */
ilib.Loader.prototype.loadFiles = function (paths, sync, params, callback) {};

/**
 * Return all files available for loading using this loader instance.
 * This method returns an object where the properties are the paths to
 * directories where files are loaded from and the values are an array
 * of strings containing the relative paths under the directory of each
 * file that can be loaded.<p>
 * 
 * Example:
 *  <pre>
 *  {
 *      "/usr/share/javascript/ilib/locale": [
 *          "dateformats.json",
 *          "aa/dateformats.json",
 *            "af/dateformats.json",
 *            "agq/dateformats.json",
 *            "ak/dateformats.json",
 *            ...
 *          "zxx/dateformats.json"
 *      ]
 *  }
 *  </pre>
 * @returns {Object} a hash containing directory names and
 * paths to file that can be loaded by this loader 
 */
ilib.Loader.prototype.listAvailableFiles = function() {};

/**
 * Return true if the file in the named path is available for loading using
 * this loader. The path may be given as an absolute path, in which case
 * only that file is checked, or as a relative path, in which case, the
 * relative path may appear underneath any of the directories that the loader
 * knows about.
 * @returns {boolean} true if the file in the named path is available for loading, and
 * false otherwise
 */
ilib.Loader.prototype.isAvailable = function(path) {};

/**
 * Set the custom loader used to load ilib's locale data in your environment. 
 * The instance passed in must implement the ilib.Loader interface. See the
 * ilib.Loader class documentation for more information about loaders. 
 * 
 * @static
 * @param {ilib.Loader} loader class to call to access the requested data.
 * @return {boolean} true if the loader was installed correctly, or false
 * if not
 */
ilib.setLoaderCallback = function(loader) {
    // only a basic check
    if ((typeof(loader) === 'object' && loader instanceof ilib.Loader) || 
            typeof(loader) === 'function' || typeof(loader) === 'undefined') {
        // console.log("setting callback loader to " + (loader ? loader.name : "undefined"));
        ilib._load = loader;
        return true;
    }
    return false;
};

/*
 * locale.js - Locale specifier definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * @class
 * Create a new locale instance. Locales are specified either with a specifier string 
 * that follows the BCP-47 convention (roughly: "language-region-script-variant") or 
 * with 4 parameters that specify the language, region, variant, and script individually.<p>
 * 
 * The language is given as an ISO 639-1 two-letter, lower-case language code. You
 * can find a full list of these codes at 
 * <a href="http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes</a><p>
 * 
 * The region is given as an ISO 3166-1 two-letter, upper-case region code. You can
 * find a full list of these codes at 
 * <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</a>.<p>
 * 
 * The variant is any string that does not contain a dash which further differentiates
 * locales from each other.<p>
 * 
 * The script is given as the ISO 15924 four-letter script code. In some locales,
 * text may be validly written in more than one script. For example, Serbian is often
 * written in both Latin and Cyrillic, though not usually mixed together. You can find a
 * full list of these codes at 
 * <a href="http://en.wikipedia.org/wiki/ISO_15924#List_of_codes">http://en.wikipedia.org/wiki/ISO_15924#List_of_codes</a>.<p>
 * 
 * As an example in ilib, the script can be used in the date formatter. Dates formatted 
 * in Serbian could have day-of-week names or month names written in the Latin
 * or Cyrillic script. Often one script is default such that sr-SR-Latn is the same
 * as sr-SR so the script code "Latn" can be left off of the locale spec.<p> 
 * 
 * Each part is optional, and an empty string in the specifier before or after a 
 * dash or as a parameter to the constructor denotes an unspecified value. In this
 * case, many of the ilib functions will treat the locale as generic. For example
 * the locale "en-" is equivalent to "en" and to "en--" and denotes a locale
 * of "English" with an unspecified region and variant, which typically matches
 * any region or variant.<p>
 * 
 * Without any arguments to the constructor, this function returns the locale of
 * the host Javascript engine.<p>
 * 
 * Depends directive: !depends locale.js
 * 
 * @constructor
 * @param {?string|ilib.Locale=} language the ISO 639 2-letter code for the language, or a full 
 * locale spec in BCP-47 format, or another ilib.Locale instance to copy from
 * @param {string=} region the ISO 3166 2-letter code for the region
 * @param {string=} variant the name of the variant of this locale, if any
 * @param {string=} script the ISO 15924 code of the script for this locale, if any
 */
ilib.Locale = function(language, region, variant, script) {
	if (typeof(region) === 'undefined') {
		var spec = language || ilib.getLocale();
		if (typeof(spec) === 'string') {
			var parts = spec.split('-');
	        for ( var i = 0; i < parts.length; i++ ) {
	        	if (ilib.Locale._isLanguageCode(parts[i])) {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.language = parts[i];
	        	} else if (ilib.Locale._isRegionCode(parts[i])) {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.region = parts[i];
	        	} else if (ilib.Locale._isScriptCode(parts[i])) {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.script = parts[i];
	        	} else {
	    			/** 
	    			 * @private
	    			 * @type {string|undefined}
	    			 */
	        		this.variant = parts[i];
	        	}
	        }
	        this.language = this.language || undefined;
	        this.region = this.region || undefined;
	        this.script = this.script || undefined;
	        this.variant = this.variant || undefined;
		} else if (typeof(spec) === 'object') {
	        this.language = spec.language || undefined;
	        this.region = spec.region || undefined;
	        this.script = spec.script || undefined;
	        this.variant = spec.variant || undefined;
		}
	} else {
		if (language) {
			language = language.trim();
			this.language = language.length > 0 ? language.toLowerCase() : undefined;
		} else {
			this.language = undefined;
		}
		if (region) {
			region = region.trim();
			this.region = region.length > 0 ? region.toUpperCase() : undefined;
		} else {
			this.region = undefined;
		}
		if (variant) {
			variant = variant.trim();
			this.variant = variant.length > 0 ? variant : undefined;
		} else {
			this.variant = undefined;
		}
		if (script) {
			script = script.trim();
			this.script = script.length > 0 ? script : undefined;
		} else {
			this.script = undefined;
		}
	}
	this._genSpec();
};

// from http://en.wikipedia.org/wiki/ISO_3166-1
ilib.Locale.a2toa3regmap = {
	"AF": "AFG",
	"AX": "ALA",
	"AL": "ALB",
	"DZ": "DZA",
	"AS": "ASM",
	"AD": "AND",
	"AO": "AGO",
	"AI": "AIA",
	"AQ": "ATA",
	"AG": "ATG",
	"AR": "ARG",
	"AM": "ARM",
	"AW": "ABW",
	"AU": "AUS",
	"AT": "AUT",
	"AZ": "AZE",
	"BS": "BHS",
	"BH": "BHR",
	"BD": "BGD",
	"BB": "BRB",
	"BY": "BLR",
	"BE": "BEL",
	"BZ": "BLZ",
	"BJ": "BEN",
	"BM": "BMU",
	"BT": "BTN",
	"BO": "BOL",
	"BQ": "BES",
	"BA": "BIH",
	"BW": "BWA",
	"BV": "BVT",
	"BR": "BRA",
	"IO": "IOT",
	"BN": "BRN",
	"BG": "BGR",
	"BF": "BFA",
	"BI": "BDI",
	"KH": "KHM",
	"CM": "CMR",
	"CA": "CAN",
	"CV": "CPV",
	"KY": "CYM",
	"CF": "CAF",
	"TD": "TCD",
	"CL": "CHL",
	"CN": "CHN",
	"CX": "CXR",
	"CC": "CCK",
	"CO": "COL",
	"KM": "COM",
	"CG": "COG",
	"CD": "COD",
	"CK": "COK",
	"CR": "CRI",
	"CI": "CIV",
	"HR": "HRV",
	"CU": "CUB",
	"CW": "CUW",
	"CY": "CYP",
	"CZ": "CZE",
	"DK": "DNK",
	"DJ": "DJI",
	"DM": "DMA",
	"DO": "DOM",
	"EC": "ECU",
	"EG": "EGY",
	"SV": "SLV",
	"GQ": "GNQ",
	"ER": "ERI",
	"EE": "EST",
	"ET": "ETH",
	"FK": "FLK",
	"FO": "FRO",
	"FJ": "FJI",
	"FI": "FIN",
	"FR": "FRA",
	"GF": "GUF",
	"PF": "PYF",
	"TF": "ATF",
	"GA": "GAB",
	"GM": "GMB",
	"GE": "GEO",
	"DE": "DEU",
	"GH": "GHA",
	"GI": "GIB",
	"GR": "GRC",
	"GL": "GRL",
	"GD": "GRD",
	"GP": "GLP",
	"GU": "GUM",
	"GT": "GTM",
	"GG": "GGY",
	"GN": "GIN",
	"GW": "GNB",
	"GY": "GUY",
	"HT": "HTI",
	"HM": "HMD",
	"VA": "VAT",
	"HN": "HND",
	"HK": "HKG",
	"HU": "HUN",
	"IS": "ISL",
	"IN": "IND",
	"ID": "IDN",
	"IR": "IRN",
	"IQ": "IRQ",
	"IE": "IRL",
	"IM": "IMN",
	"IL": "ISR",
	"IT": "ITA",
	"JM": "JAM",
	"JP": "JPN",
	"JE": "JEY",
	"JO": "JOR",
	"KZ": "KAZ",
	"KE": "KEN",
	"KI": "KIR",
	"KP": "PRK",
	"KR": "KOR",
	"KW": "KWT",
	"KG": "KGZ",
	"LA": "LAO",
	"LV": "LVA",
	"LB": "LBN",
	"LS": "LSO",
	"LR": "LBR",
	"LY": "LBY",
	"LI": "LIE",
	"LT": "LTU",
	"LU": "LUX",
	"MO": "MAC",
	"MK": "MKD",
	"MG": "MDG",
	"MW": "MWI",
	"MY": "MYS",
	"MV": "MDV",
	"ML": "MLI",
	"MT": "MLT",
	"MH": "MHL",
	"MQ": "MTQ",
	"MR": "MRT",
	"MU": "MUS",
	"YT": "MYT",
	"MX": "MEX",
	"FM": "FSM",
	"MD": "MDA",
	"MC": "MCO",
	"MN": "MNG",
	"ME": "MNE",
	"MS": "MSR",
	"MA": "MAR",
	"MZ": "MOZ",
	"MM": "MMR",
	"NA": "NAM",
	"NR": "NRU",
	"NP": "NPL",
	"NL": "NLD",
	"NC": "NCL",
	"NZ": "NZL",
	"NI": "NIC",
	"NE": "NER",
	"NG": "NGA",
	"NU": "NIU",
	"NF": "NFK",
	"MP": "MNP",
	"NO": "NOR",
	"OM": "OMN",
	"PK": "PAK",
	"PW": "PLW",
	"PS": "PSE",
	"PA": "PAN",
	"PG": "PNG",
	"PY": "PRY",
	"PE": "PER",
	"PH": "PHL",
	"PN": "PCN",
	"PL": "POL",
	"PT": "PRT",
	"PR": "PRI",
	"QA": "QAT",
	"RE": "REU",
	"RO": "ROU",
	"RU": "RUS",
	"RW": "RWA",
	"BL": "BLM",
	"SH": "SHN",
	"KN": "KNA",
	"LC": "LCA",
	"MF": "MAF",
	"PM": "SPM",
	"VC": "VCT",
	"WS": "WSM",
	"SM": "SMR",
	"ST": "STP",
	"SA": "SAU",
	"SN": "SEN",
	"RS": "SRB",
	"SC": "SYC",
	"SL": "SLE",
	"SG": "SGP",
	"SX": "SXM",
	"SK": "SVK",
	"SI": "SVN",
	"SB": "SLB",
	"SO": "SOM",
	"ZA": "ZAF",
	"GS": "SGS",
	"SS": "SSD",
	"ES": "ESP",
	"LK": "LKA",
	"SD": "SDN",
	"SR": "SUR",
	"SJ": "SJM",
	"SZ": "SWZ",
	"SE": "SWE",
	"CH": "CHE",
	"SY": "SYR",
	"TW": "TWN",
	"TJ": "TJK",
	"TZ": "TZA",
	"TH": "THA",
	"TL": "TLS",
	"TG": "TGO",
	"TK": "TKL",
	"TO": "TON",
	"TT": "TTO",
	"TN": "TUN",
	"TR": "TUR",
	"TM": "TKM",
	"TC": "TCA",
	"TV": "TUV",
	"UG": "UGA",
	"UA": "UKR",
	"AE": "ARE",
	"GB": "GBR",
	"US": "USA",
	"UM": "UMI",
	"UY": "URY",
	"UZ": "UZB",
	"VU": "VUT",
	"VE": "VEN",
	"VN": "VNM",
	"VG": "VGB",
	"VI": "VIR",
	"WF": "WLF",
	"EH": "ESH",
	"YE": "YEM",
	"ZM": "ZMB",
	"ZW": "ZWE"
};


ilib.Locale.a1toa3langmap = {
	"ab": "abk",
	"aa": "aar",
	"af": "afr",
	"ak": "aka",
	"sq": "sqi",
	"am": "amh",
	"ar": "ara",
	"an": "arg",
	"hy": "hye",
	"as": "asm",
	"av": "ava",
	"ae": "ave",
	"ay": "aym",
	"az": "aze",
	"bm": "bam",
	"ba": "bak",
	"eu": "eus",
	"be": "bel",
	"bn": "ben",
	"bh": "bih",
	"bi": "bis",
	"bs": "bos",
	"br": "bre",
	"bg": "bul",
	"my": "mya",
	"ca": "cat",
	"ch": "cha",
	"ce": "che",
	"ny": "nya",
	"zh": "zho",
	"cv": "chv",
	"kw": "cor",
	"co": "cos",
	"cr": "cre",
	"hr": "hrv",
	"cs": "ces",
	"da": "dan",
	"dv": "div",
	"nl": "nld",
	"dz": "dzo",
	"en": "eng",
	"eo": "epo",
	"et": "est",
	"ee": "ewe",
	"fo": "fao",
	"fj": "fij",
	"fi": "fin",
	"fr": "fra",
	"ff": "ful",
	"gl": "glg",
	"ka": "kat",
	"de": "deu",
	"el": "ell",
	"gn": "grn",
	"gu": "guj",
	"ht": "hat",
	"ha": "hau",
	"he": "heb",
	"hz": "her",
	"hi": "hin",
	"ho": "hmo",
	"hu": "hun",
	"ia": "ina",
	"id": "ind",
	"ie": "ile",
	"ga": "gle",
	"ig": "ibo",
	"ik": "ipk",
	"io": "ido",
	"is": "isl",
	"it": "ita",
	"iu": "iku",
	"ja": "jpn",
	"jv": "jav",
	"kl": "kal",
	"kn": "kan",
	"kr": "kau",
	"ks": "kas",
	"kk": "kaz",
	"km": "khm",
	"ki": "kik",
	"rw": "kin",
	"ky": "kir",
	"kv": "kom",
	"kg": "kon",
	"ko": "kor",
	"ku": "kur",
	"kj": "kua",
	"la": "lat",
	"lb": "ltz",
	"lg": "lug",
	"li": "lim",
	"ln": "lin",
	"lo": "lao",
	"lt": "lit",
	"lu": "lub",
	"lv": "lav",
	"gv": "glv",
	"mk": "mkd",
	"mg": "mlg",
	"ms": "msa",
	"ml": "mal",
	"mt": "mlt",
	"mi": "mri",
	"mr": "mar",
	"mh": "mah",
	"mn": "mon",
	"na": "nau",
	"nv": "nav",
	"nb": "nob",
	"nd": "nde",
	"ne": "nep",
	"ng": "ndo",
	"nn": "nno",
	"no": "nor",
	"ii": "iii",
	"nr": "nbl",
	"oc": "oci",
	"oj": "oji",
	"cu": "chu",
	"om": "orm",
	"or": "ori",
	"os": "oss",
	"pa": "pan",
	"pi": "pli",
	"fa": "fas",
	"pl": "pol",
	"ps": "pus",
	"pt": "por",
	"qu": "que",
	"rm": "roh",
	"rn": "run",
	"ro": "ron",
	"ru": "rus",
	"sa": "san",
	"sc": "srd",
	"sd": "snd",
	"se": "sme",
	"sm": "smo",
	"sg": "sag",
	"sr": "srp",
	"gd": "gla",
	"sn": "sna",
	"si": "sin",
	"sk": "slk",
	"sl": "slv",
	"so": "som",
	"st": "sot",
	"az": "azb",
	"es": "spa",
	"su": "sun",
	"sw": "swa",
	"ss": "ssw",
	"sv": "swe",
	"ta": "tam",
	"te": "tel",
	"tg": "tgk",
	"th": "tha",
	"ti": "tir",
	"bo": "bod",
	"tk": "tuk",
	"tl": "tgl",
	"tn": "tsn",
	"to": "ton",
	"tr": "tur",
	"ts": "tso",
	"tt": "tat",
	"tw": "twi",
	"ty": "tah",
	"ug": "uig",
	"uk": "ukr",
	"ur": "urd",
	"uz": "uzb",
	"ve": "ven",
	"vi": "vie",
	"vo": "vol",
	"wa": "wln",
	"cy": "cym",
	"wo": "wol",
	"fy": "fry",
	"xh": "xho",
	"yi": "yid",
	"yo": "yor",
	"za": "zha",
	"zu": "zul"
};

/**
 * Tell whether or not the str does not start with a lower case ASCII char.
 * @private
 * @param {string} str the char to check
 * @return {boolean} true if the char is not a lower case ASCII char
 */
ilib.Locale._notLower = function(str) {
	// do this with ASCII only so we don't have to depend on the CType functions
	var ch = str.charCodeAt(0);
	return ch < 97 || ch > 122;
};

/**
 * Tell whether or not the str does not start with an upper case ASCII char.
 * @private
 * @param {string} str the char to check
 * @return {boolean} true if the char is a not an upper case ASCII char
 */
ilib.Locale._notUpper = function(str) {
	// do this with ASCII only so we don't have to depend on the CType functions
	var ch = str.charCodeAt(0);
	return ch < 65 || ch > 90;
};

/**
 * Tell whether or not the str does not start with a digit char.
 * @private
 * @param {string} str the char to check
 * @return {boolean} true if the char is a not an upper case ASCII char
 */
ilib.Locale._notDigit = function(str) {
	// do this with ASCII only so we don't have to depend on the CType functions
	var ch = str.charCodeAt(0);
	return ch < 48 || ch > 57;
};

/**
 * Tell whether or not the given string has the correct syntax to be 
 * an ISO 639 language code.
 * 
 * @private
 * @param {string} str the string to parse
 * @return {boolean} true if the string could syntactically be a language code.
 */
ilib.Locale._isLanguageCode = function(str) {
	if (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {
		return false;
	}

	for (var i = 0; i < str.length; i++) {
		if (ilib.Locale._notLower(str.charAt(i))) {
			return false;
		}
	}
	
	return true;
};

/**
 * Tell whether or not the given string has the correct syntax to be 
 * an ISO 3166 2-letter region code or M.49 3-digit region code.
 * 
 * @private
 * @param {string} str the string to parse
 * @return {boolean} true if the string could syntactically be a language code.
 */
ilib.Locale._isRegionCode = function (str) {
	if (typeof(str) === 'undefined' || str.length < 2 || str.length > 3) {
		return false;
	}
	
	if (str.length === 2) {
		for (var i = 0; i < str.length; i++) {
			if (ilib.Locale._notUpper(str.charAt(i))) {
				return false;
			}
		}
	} else {
		for (var i = 0; i < str.length; i++) {
			if (ilib.Locale._notDigit(str.charAt(i))) {
				return false;
			}
		}
	}
	
	return true;
};

/**
 * Tell whether or not the given string has the correct syntax to be 
 * an ISO 639 language code.
 * 
 * @private
 * @param {string} str the string to parse
 * @return {boolean} true if the string could syntactically be a language code.
 */
ilib.Locale._isScriptCode = function(str)
{
	if (typeof(str) === 'undefined' || str.length !== 4 || ilib.Locale._notUpper(str.charAt(0))) {
		return false;
	}
	
	for (var i = 1; i < 4; i++) {
		if (ilib.Locale._notLower(str.charAt(i))) {
			return false;
		}
	}
	
	return true;
};

/**
 * Return the ISO-3166 alpha3 equivalent region code for the given ISO 3166 alpha2
 * region code. If the given alpha2 code is not found, this function returns its
 * argument unchanged.
 * @static
 * @param {string|undefined} alpha2 the alpha2 code to map
 * @return {string|undefined} the alpha3 equivalent of the given alpha2 code, or the alpha2
 * parameter if the alpha2 value is not found
 */
ilib.Locale.regionAlpha2ToAlpha3 = function(alpha2) {
	return ilib.Locale.a2toa3regmap[alpha2] || alpha2;
};

/**
 * Return the ISO-639 alpha3 equivalent language code for the given ISO 639 alpha1
 * language code. If the given alpha1 code is not found, this function returns its
 * argument unchanged.
 * @static
 * @param {string|undefined} alpha1 the alpha1 code to map
 * @return {string|undefined} the alpha3 equivalent of the given alpha1 code, or the alpha1
 * parameter if the alpha1 value is not found
 */
ilib.Locale.languageAlpha1ToAlpha3 = function(alpha1) {
	return ilib.Locale.a1toa3langmap[alpha1] || alpha1;
};

ilib.Locale.prototype = {
	/**
	 * @private
	 */
	_genSpec: function () {
		this.spec = this.language || "";
		
		if (this.script) {
			if (this.spec.length > 0) {
				this.spec += "-";
			}
			this.spec += this.script;
		}
		
		if (this.region) {
			if (this.spec.length > 0) {
				this.spec += "-";
			}
			this.spec += this.region;
		}
		
		if (this.variant) {
			if (this.spec.length > 0) {
				this.spec += "-";
			}
			this.spec += this.variant;
		}
	},

	/**
	 * Return the ISO 639 language code for this locale. 
	 * @return {string|undefined} the language code for this locale 
	 */
	getLanguage: function() {
		return this.language;
	},
	
	/**
	 * Return the language of this locale as an ISO-639-alpha3 language code
	 * @return {string|undefined} the alpha3 language code of this locale
	 */
	getLanguageAlpha3: function() {
		return ilib.Locale.languageAlpha1ToAlpha3(this.language);
	},
	
	/**
	 * Return the ISO 3166 region code for this locale.
	 * @return {string|undefined} the region code of this locale
	 */
	getRegion: function() {
		return this.region;
	},
	
	/**
	 * Return the region of this locale as an ISO-3166-alpha3 region code
	 * @return {string|undefined} the alpha3 region code of this locale
	 */
	getRegionAlpha3: function() {
		return ilib.Locale.regionAlpha2ToAlpha3(this.region);
	},
	
	/**
	 * Return the ISO 15924 script code for this locale
	 * @return {string|undefined} the script code of this locale
	 */
	getScript: function () {
		return this.script;
	},
	
	/**
	 * Return the variant code for this locale
	 * @return {string|undefined} the variant code of this locale, if any
	 */
	getVariant: function() {
		return this.variant;
	},
	
	/**
	 * Return the whole locale specifier as a string.
	 * @return {string} the locale specifier
	 */
	getSpec: function() {
		return this.spec;
	},
	
	/**
	 * Express this locale object as a string. Currently, this simply calls the getSpec
	 * function to represent the locale as its specifier.
	 * 
	 * @return {string} the locale specifier
	 */
	toString: function() {
		return this.getSpec();
	},
	
	/**
	 * Return true if the the other locale is exactly equal to the current one.
	 * @return {boolean} whether or not the other locale is equal to the current one 
	 */
	equals: function(other) {
		return this.language === other.language &&
			this.region === other.region &&
			this.script === other.script &&
			this.variant === other.variant;
	},

	/**
	 * Return true if the current locale is the special pseudo locale.
	 * @return {boolean} true if the current locale is the special pseudo locale
	 */
	isPseudo: function () {
		return (this.language === 'zxx' && this.region === 'XX');
	}
};

// static functions
/**
 * @private
 */
ilib.Locale.locales = [
	"aa-DJ","af-NA","af-ZA","agq-CM","ak-GH","am-ET","ar-AE","ar-BH","ar-DJ","ar-DZ","ar-EG","ar-IQ","ar-JO","ar-KW","ar-LB","ar-LY","ar-MA","ar-MR","ar-OM","ar-QA","ar-SA","ar-SD","ar-SY","ar-TN","ar-YE","asa-TZ","as-IN","az-AZ","bas-CM","be-BY","bem-ZM","bg-BG","bh-IN","bm-ML","bn-IN","br-FR","bs-Cyrl-BA","bs-Latn-BA","bs-ME","ca-FR","cs-CZ","da-DK","de-AT","de-CH","de-DE","el-GR","en-AU","en-CA","en-Latn-CA","en-ET","en-GB","en-GH","en-GM","en-HK","en-IE","en-IN","en-KE","en-LK","en-LR","en-MW","en-MY","en-NG","en-NZ","en-PH","en-PK","en-PR","en-RW","en-SG","en-SL","en-TZ","en-UG","en-US","en-ZA","en-ZM","es-AR","es-CO","es-CR","es-DO","es-EC","es-ES","es-GQ","es-GT","es-HN","es-MX","es-SV","es-UY","es-VE","et-EE","fa-AF","fa-IR","ff-SN","fi-FI","fj-FJ","fr-AD","fr-BE","fr-BF","fr-BJ","fr-CA","fr-CD","fr-CF","fr-CG","fr-CH","fr-CI","fr-CM","fr-DJ","fr-DZ","fr-FR","fr-GA","fr-GN","fr-LB","fr-LU","fr-MG","fr-ML","fr-RW","fr-SN","fr-TG","fr-YT","ga-IE","gl-ES","ha-Latn-NG","he-IL","hi-IN","hr-HR","hr-ME","hu-HU","hy-AZ","id-ID","id-MY","it-CH","it-IT","it-SM","ja-JP","ka-IR","kk-Cyrl-KZ","kn-IN","ko-KR","ks-Arab-IN","ku-IR","lg-UG","ln-CF","lt-LT","lv-LV","mi-CK","mk-MK","ml-IN","mn-CN","mr-IN","ms-BN","ms-MY","nb-NO","ne-IN","nl-BE","nl-CW","nl-GF","nl-NL","nl-SR","no-BV","no-NO","no-SJ","om-ET","or-IN","os-RU","pa-Arab-PK","pl-PL","pt-AO","pt-BR","pt-CV","pt-GW","pt-MO","pt-MZ","pt-PT","pt-ST","pt-TL","ro-RO","ro-RS","ru-KG","ru-KZ","ru-RU","ru-TM","si-LK","sk-SK","sl-SI","so-ET","so-SO","sq-AL","sq-ME","sq-MK","sr-Cyrl-BA","sr-Latn-BA","sr-Latn-ME","sr-RS","sr-Latn-RS","ss-ZA","st-LS","sv-FI","sv-SE","sw-UG","ta-LK","ta-MY","ta-SG","te-IN","th-TH","tr-TR","uk-UA","ur-IN","ur-PK","uz-AF","uz-Arab-AF","uz-Cyrl-UZ","uz-Latn-UZ","vai-Latn-LR","vi-VN","zh-Hans-CN","zh-Hans-MY","zh-Hant-HK","zh-Hans-MO","zh-Hans-SG","zh-Hant-TW","zh-Hant-US","zu-ZA","zxx-Cyrl-XX","zxx-Hans-XX","zxx-Hebr-XX","zxx-XX"
];

/**
 * Return the list of available locales that this iLib file was assembled
 * with. The list that this file was assembled with may be much smaller
 * than the list of all available locales in the iLib repository. The
 * assembly tool will automatically fill in the list.
 * 
 * @return {Array.<string>} this is an array of locale specs for which 
 * this iLib file has locale data for
 */
ilib.Locale.getAvailableLocales = function () {
	return ilib.Locale.locales;
};
ilib.data.localeinfo = {"calendar":"gregorian","clock":"24","currency":"USD","delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"firstDayOfWeek":1,"numfmt":{"script":"Latn","decimalChar":",","groupChar":".","prigroupSize":3,"pctFmt":"{n}%","pctChar":"%","roundingMode":"halfdown","exponential":"e","currencyFormats":{"common":"{s}{n}","commonNegative":"{s}-{n}"}},"timezone":"Etc/UTC","units":"metric"};
ilib.data.localeinfo_aa = {"clock":"12","language.name":"Afar","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Latn"],"locale":"aa"};
ilib.data.localeinfo_DJ = {"currency":"DJF","firstDayOfWeek":6,"region.name":"Djibouti","timezone":"Africa/Djibouti","locale":"DJ"};
ilib.data.localeinfo_af = {"clock":"12","language.name":"Afrikaans","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn"],"locale":"af"};
ilib.data.localeinfo_af_NA = {"numfmt":{"currencyFormats":{"common":"{s}Â {n}"}},"locale":"af-NA"};
ilib.data.localeinfo_NA = {"currency":"NAD","region.name":"Namibia","timezone":"Africa/Windhoek","locale":"NA"};
ilib.data.localeinfo_ZA = {"currency":"ZAR","firstDayOfWeek":0,"region.name":"South Africa","timezone":"Africa/Johannesburg","locale":"ZA"};
ilib.data.localeinfo_agq = {"delimiter":{"quotationStart":"â","alternateQuotationStart":"â"},"language.name":"Aghem","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}{s}"}},"scripts":["Latn"],"locale":"agq"};
ilib.data.localeinfo_CM = {"currency":"XAF","firstDayOfWeek":1,"region.name":"Cameroon","timezone":"Africa/Douala","locale":"CM"};
ilib.data.localeinfo_ak = {"language.name":"Akan","numfmt":{"decimalChar":".","groupChar":",","exponential":"E"},"scripts":["Latn"],"locale":"ak"};
ilib.data.localeinfo_GH = {"currency":"GHS","region.name":"Ghana","timezone":"Africa/Accra","locale":"GH"};
ilib.data.localeinfo_am = {"clock":"12","delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â¹","alternateQuotationEnd":"âº"},"language.name":"Amharic","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Ethi"],"locale":"am"};
ilib.data.localeinfo_ET = {"currency":"ETB","firstDayOfWeek":0,"region.name":"Ethiopia","timezone":"Africa/Addis_Ababa","locale":"ET"};
ilib.data.localeinfo_ar = {"clock":"12","delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Arabic","numfmt":{"script":"Arab","decimalChar":"Ù«","groupChar":"Ù¬","pctChar":"Ùª","exponential":"Ø§Ø³","currencyFormats":{"common":"{s}Â {n}","commonNegative":"{s}Â {n}-"},"negativenumFmt":"{n}-","useNative":true,"digits":"Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©"},"scripts":["Arab","Syrc"],"locale":"ar"};
ilib.data.localeinfo_AE = {"currency":"AED","firstDayOfWeek":6,"region.name":"United Arab Emirates","timezone":"Asia/Dubai","locale":"AE"};
ilib.data.localeinfo_BH = {"currency":"BHD","firstDayOfWeek":6,"region.name":"Bahrain","timezone":"Asia/Bahrain","locale":"BH"};
ilib.data.localeinfo_ar_DZ = {"native_numfmt":{"script":"Arab","decimalChar":"Ù«","groupChar":"Ù¬","pctChar":"Ùª","exponential":"Ø§Ø³","prigroupSize":3,"currencyFormats":{"common":"{s}Â {n}","commonNegative":"{s}Â {n}-"},"negativenumFmt":"{n}-","pctFmt":"{n}%","roundingMode":"halfdown","useNative":true,"digits":"Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©"},"numfmt":{"script":"Latn","decimalChar":",","groupChar":".","pctChar":"%","useNative":false,"exponential":"E"},"locale":"ar-DZ"};
ilib.data.localeinfo_DZ = {"currency":"DZD","firstDayOfWeek":6,"region.name":"Algeria","timezone":"Africa/Algiers","locale":"DZ"};
ilib.data.localeinfo_EG = {"currency":"EGP","firstDayOfWeek":6,"region.name":"Egypt","timezone":"Africa/Cairo","locale":"EG"};
ilib.data.localeinfo_IQ = {"currency":"IQD","firstDayOfWeek":6,"region.name":"Iraq","timezone":"Asia/Baghdad","locale":"IQ"};
ilib.data.localeinfo_JO = {"currency":"JOD","firstDayOfWeek":6,"region.name":"Jordan","timezone":"Asia/Amman","locale":"JO"};
ilib.data.localeinfo_KW = {"currency":"KWD","firstDayOfWeek":6,"region.name":"Kuwait","timezone":"Asia/Kuwait","locale":"KW"};
ilib.data.localeinfo_LB = {"currency":"LBP","firstDayOfWeek":1,"region.name":"Lebanon","timezone":"Asia/Beirut","locale":"LB"};
ilib.data.localeinfo_LY = {"currency":"LYD","firstDayOfWeek":6,"region.name":"Libya","timezone":"Africa/Tripoli","locale":"LY"};
ilib.data.localeinfo_ar_MA = {"generated":false,"native_numfmt":{"script":"Arab","decimalChar":"Ù«","groupChar":"Ù¬","pctChar":"Ùª","exponential":"Ø§Ø³","prigroupSize":3,"currencyFormats":{"common":"{s}Â {n}","commonNegative":"{s}Â {n}-"},"negativenumFmt":"{n}-","pctFmt":"{n}%","roundingMode":"halfdown","useNative":true,"digits":"Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©"},"numfmt":{"script":"Latn","decimalChar":",","groupChar":".","pctChar":"%","useNative":false,"exponential":"E"},"locale":"ar-MA"};
ilib.data.localeinfo_MA = {"currency":"MAD","firstDayOfWeek":6,"region.name":"Morocco","timezone":"Africa/Casablanca","locale":"MA"};
ilib.data.localeinfo_MR = {"currency":"MRO","region.name":"Mauritania","timezone":"Africa/Nouakchott","locale":"MR"};
ilib.data.localeinfo_OM = {"currency":"OMR","firstDayOfWeek":6,"region.name":"Oman","timezone":"Asia/Muscat","locale":"OM"};
ilib.data.localeinfo_QA = {"currency":"QAR","firstDayOfWeek":6,"region.name":"Qatar","timezone":"Asia/Qatar","locale":"QA"};
ilib.data.localeinfo_SA = {"currency":"SAR","firstDayOfWeek":6,"region.name":"Saudi Arabia","timezone":"Asia/Riyadh","locale":"SA"};
ilib.data.localeinfo_SD = {"currency":"SDG","firstDayOfWeek":6,"region.name":"Sudan","timezone":"Africa/Khartoum","locale":"SD"};
ilib.data.localeinfo_SY = {"currency":"SYP","firstDayOfWeek":6,"region.name":"Syria","timezone":"Asia/Damascus","locale":"SY"};
ilib.data.localeinfo_ar_TN = {"native_numfmt":{"script":"Arab","decimalChar":"Ù«","groupChar":"Ù¬","pctChar":"Ùª","exponential":"Ø§Ø³","prigroupSize":3,"currencyFormats":{"common":"{s}Â {n}","commonNegative":"{s}Â {n}-"},"negativenumFmt":"{n}-","pctFmt":"{n}%","roundingMode":"halfdown","useNative":true,"digits":"Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©"},"numfmt":{"script":"Latn","decimalChar":",","groupChar":".","pctChar":"%","exponential":"E","useNative":false,"currencyFormats":{"common":"{s}{n}"}},"locale":"ar-TN"};
ilib.data.localeinfo_TN = {"currency":"TND","firstDayOfWeek":0,"region.name":"Tunisia","timezone":"Africa/Tunis","locale":"TN"};
ilib.data.localeinfo_YE = {"currency":"YER","firstDayOfWeek":6,"region.name":"Yemen","timezone":"Asia/Aden","locale":"YE"};
ilib.data.localeinfo_asa = {"clock":"12","language.name":"Asu","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Latn"],"locale":"asa"};
ilib.data.localeinfo_TZ = {"currency":"TZS","region.name":"Tanzania","timezone":"Africa/Dar_es_Salaam","locale":"TZ"};
ilib.data.localeinfo_as = {"clock":"12","language.name":"Assamese","numfmt":{"script":"Beng","decimalChar":".","groupChar":",","secgroupSize":2,"currencyFormats":{"common":"{s}Â {n}","commonNegative":"-{s} {n}"},"useNative":true,"digits":"à§¦à§§à§¨à§©à§ªà§«à§¬à§­à§®à§¯"},"scripts":["Beng"],"locale":"as"};
ilib.data.localeinfo_IN = {"currency":"INR","firstDayOfWeek":0,"region.name":"India","timezone":"Asia/Kolkata","locale":"IN"};
ilib.data.localeinfo_az = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â¹","alternateQuotationEnd":"âº"},"language.name":"Azerbaijani","numfmt":{"exponential":"E","currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Arab","Cyrl","Latn"],"locale":"az"};
ilib.data.localeinfo_AZ = {"currency":"AZN","firstDayOfWeek":1,"region.name":"Azerbaijan","timezone":"Asia/Baku","locale":"AZ"};
ilib.data.localeinfo_bas = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Basaa","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"scripts":["Latn"],"locale":"bas"};
ilib.data.localeinfo_be = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â¹","alternateQuotationEnd":"âº"},"language.name":"Belarusian","numfmt":{"groupChar":"Â ","exponential":"E"},"scripts":["Cyrl"],"locale":"be"};
ilib.data.localeinfo_BY = {"currency":"BYR","firstDayOfWeek":0,"region.name":"Belarus","timezone":"Europe/Minsk","locale":"BY"};
ilib.data.localeinfo_bem = {"clock":"12","language.name":"Bemba","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn"],"locale":"bem"};
ilib.data.localeinfo_ZM = {"currency":"ZMK","region.name":"Zambia","timezone":"Africa/Lusaka","locale":"ZM"};
ilib.data.localeinfo_bg = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Bulgarian","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Cyrl"],"locale":"bg"};
ilib.data.localeinfo_BG = {"currency":"BGN","firstDayOfWeek":1,"region.name":"Bulgaria","timezone":"Europe/Sofia","locale":"BG"};
ilib.data.localeinfo_bh = {"language.name":"Bihari","scripts":["Deva","Kthi"],"locale":"bh"};
ilib.data.localeinfo_bm = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Bambara","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn"],"locale":"bm"};
ilib.data.localeinfo_ML = {"currency":"XOF","region.name":"Mali","timezone":"Africa/Bamako","locale":"ML"};
ilib.data.localeinfo_bn = {"clock":"12","language.name":"Bengali","numfmt":{"script":"Beng","decimalChar":".","groupChar":",","secgroupSize":2,"currencyFormats":{"common":"{s} {n}","commonNegative":"-{s} {n}"},"useNative":true,"digits":"à§¦à§§à§¨à§©à§ªà§«à§¬à§­à§®à§¯"},"scripts":["Beng"],"locale":"bn"};
ilib.data.localeinfo_br = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â¹","alternateQuotationEnd":"âº"},"language.name":"Breton","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Latn"],"locale":"br"};
ilib.data.localeinfo_FR = {"currency":"EUR","firstDayOfWeek":1,"region.name":"France","timezone":"Europe/Paris","locale":"FR"};
ilib.data.localeinfo_bs = {"language.name":"Bosnian","numfmt":{"exponential":"E","currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Latn"],"locale":"bs"};
ilib.data.localeinfo_bs_Cyrl_BA = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"numfmt":{"currencyFormats":{"common":"{n}Â {s}"}},"locale":"bs-Cyrl-BA"};
ilib.data.localeinfo_BA = {"currency":"BAM","firstDayOfWeek":1,"region.name":"Bosnia and Herzegovina","timezone":"Europe/Sarajevo","locale":"BA"};
ilib.data.localeinfo_ME = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Montenegro","timezone":"Europe/Podgorica","locale":"ME"};
ilib.data.localeinfo_ca = {"delimiter":{"alternateQuotationStart":"Â«","alternateQuotationEnd":"Â»"},"language.name":"Catalan","numfmt":{"exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn"],"locale":"ca"};
ilib.data.localeinfo_cs = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Czech","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"scripts":["Latn"],"locale":"cs"};
ilib.data.localeinfo_CZ = {"currency":"CZK","firstDayOfWeek":1,"region.name":"Czech Republic","timezone":"Europe/Prague","locale":"CZ"};
ilib.data.localeinfo_da = {"language.name":"Danish","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"scripts":["Latn"],"locale":"da"};
ilib.data.localeinfo_DK = {"currency":"DKK","firstDayOfWeek":1,"paperSizes":{"regular":"A4","photo":"4x6"},"region.name":"Denmark","timezone":"Europe/Copenhagen","locale":"DK"};
ilib.data.localeinfo_de = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"German","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"paperSizes":{"regular":"A4","photo":"4x6"},"scripts":["Latn","Runr"],"locale":"de"};
ilib.data.localeinfo_de_AT = {"numfmt":{"currencyFormats":{"common":"{s}Â {n}"}},"locale":"de-AT"};
ilib.data.localeinfo_AT = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Austria","timezone":"Europe/Vienna","locale":"AT"};
ilib.data.localeinfo_de_CH = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â¹","alternateQuotationEnd":"âº"},"numfmt":{"decimalChar":".","groupChar":"'","currencyFormats":{"common":"{s}Â {n}"}},"locale":"de-CH"};
ilib.data.localeinfo_CH = {"currency":"CHF","firstDayOfWeek":1,"region.name":"Switzerland","timezone":"Europe/Zurich","locale":"CH"};
ilib.data.localeinfo_DE = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Germany","timezone":"Europe/Berlin","locale":"DE"};
ilib.data.localeinfo_el = {"clock":"12","delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Greek","numfmt":{"currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Grek"],"locale":"el"};
ilib.data.localeinfo_GR = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Greece","timezone":"Europe/Athens","locale":"GR"};
ilib.data.localeinfo_en = {"clock":"12","language.name":"English","numfmt":{"decimalChar":".","groupChar":",","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn","Dsrt","Shaw"],"locale":"en"};
ilib.data.localeinfo_AU = {"currency":"AUD","firstDayOfWeek":0,"region.name":"Australia","timezone":"Australia/Sydney","locale":"AU"};
ilib.data.localeinfo_CA = {"currency":"CAD","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"Canada","timezone":"America/Toronto","locale":"CA"};
ilib.data.localeinfo_en_GB = {"clock":"24","locale":"en-GB"};
ilib.data.localeinfo_GB = {"currency":"GBP","firstDayOfWeek":1,"paperSizes":{"regular":"A4","photo":"24x16"},"region.name":"United Kingdom","timezone":"Europe/London","units":"imperial","locale":"GB"};
ilib.data.localeinfo_GM = {"currency":"GMD","region.name":"Gambia","timezone":"Africa/Banjul","locale":"GM"};
ilib.data.localeinfo_HK = {"currency":"HKD","firstDayOfWeek":0,"region.name":"Hong Kong SAR China","timezone":"Asia/Hong_Kong","locale":"HK"};
ilib.data.localeinfo_en_IE = {"clock":"24","locale":"en-IE"};
ilib.data.localeinfo_IE = {"currency":"EUR","firstDayOfWeek":0,"region.name":"Ireland","timezone":"Europe/Dublin","locale":"IE"};
ilib.data.localeinfo_en_IN = {"numfmt":{"secgroupSize":2,"currencyFormats":{"common":"{s}Â {n}"}},"locale":"en-IN"};
ilib.data.localeinfo_KE = {"currency":"KES","firstDayOfWeek":0,"region.name":"Kenya","timezone":"Africa/Nairobi","locale":"KE"};
ilib.data.localeinfo_LK = {"currency":"LKR","firstDayOfWeek":1,"region.name":"Sri Lanka","timezone":"Asia/Colombo","locale":"LK"};
ilib.data.localeinfo_LR = {"currency":"LRD","region.name":"Liberia","timezone":"Africa/Monrovia","units":"uscustomary","locale":"LR"};
ilib.data.localeinfo_MW = {"currency":"MWK","region.name":"Malawi","timezone":"Africa/Blantyre","locale":"MW"};
ilib.data.localeinfo_MY = {"currency":"MYR","firstDayOfWeek":1,"region.name":"Malaysia","timezone":"Asia/Kuala_Lumpur","locale":"MY"};
ilib.data.localeinfo_NG = {"currency":"NGN","region.name":"Nigeria","timezone":"Africa/Lagos","locale":"NG"};
ilib.data.localeinfo_NZ = {"currency":"NZD","firstDayOfWeek":0,"region.name":"New Zealand","timezone":"Pacific/Auckland","locale":"NZ"};
ilib.data.localeinfo_PH = {"currency":"PHP","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"Philippines","timezone":"Asia/Manila","locale":"PH"};
ilib.data.localeinfo_PK = {"currency":"PKR","firstDayOfWeek":0,"region.name":"Pakistan","timezone":"Asia/Karachi","locale":"PK"};
ilib.data.localeinfo_PR = {"currency":"USD","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"Puerto Rico","timezone":"America/Puerto_Rico","locale":"PR"};
ilib.data.localeinfo_RW = {"currency":"RWF","region.name":"Rwanda","timezone":"Africa/Kigali","locale":"RW"};
ilib.data.localeinfo_SG = {"currency":"SGD","firstDayOfWeek":0,"region.name":"Singapore","timezone":"Asia/Singapore","locale":"SG"};
ilib.data.localeinfo_SL = {"currency":"SLL","region.name":"Sierra Leone","timezone":"Africa/Freetown","locale":"SL"};
ilib.data.localeinfo_UG = {"currency":"UGX","region.name":"Uganda","timezone":"Africa/Kampala","locale":"UG"};
ilib.data.localeinfo_US = {"currency":"USD","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"United States","timezone":"America/New_York","units":"uscustomary","locale":"US"};
ilib.data.localeinfo_en_ZA = {"numfmt":{"decimalChar":",","groupChar":"Â "},"locale":"en-ZA"};
ilib.data.localeinfo_es = {"delimiter":{"alternateQuotationStart":"Â«","alternateQuotationEnd":"Â»"},"language.name":"Spanish","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"paperSizes":{"regular":"A4","photo":"4x6"},"scripts":["Latn"],"locale":"es"};
ilib.data.localeinfo_es_AR = {"numfmt":{"currencyFormats":{"common":"{s}{n}"}},"locale":"es-AR"};
ilib.data.localeinfo_AR = {"currency":"ARS","firstDayOfWeek":0,"region.name":"Argentina","timezone":"America/Argentina/Buenos_Aires","locale":"AR"};
ilib.data.localeinfo_es_CO = {"numfmt":{"currencyFormats":{"common":"{s}{n}"}},"locale":"es-CO"};
ilib.data.localeinfo_CO = {"currency":"COP","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"Colombia","timezone":"America/Bogota","locale":"CO"};
ilib.data.localeinfo_es_CR = {"numfmt":{"currencyFormats":{"common":"{s}{n}"}},"locale":"es-CR"};
ilib.data.localeinfo_CR = {"currency":"CRC","firstDayOfWeek":1,"paperSizes":{"regular":"8x11"},"region.name":"Costa Rica","timezone":"America/Costa_Rica","locale":"CR"};
ilib.data.localeinfo_es_DO = {"numfmt":{"decimalChar":".","groupChar":",","currencyFormats":{"common":"{s}{n}"}},"locale":"es-DO"};
ilib.data.localeinfo_DO = {"currency":"DOP","firstDayOfWeek":0,"region.name":"Dominican Republic","timezone":"America/Santo_Domingo","locale":"DO"};
ilib.data.localeinfo_es_EC = {"numfmt":{"currencyFormats":{"common":"{s}{n}"}},"locale":"es-EC"};
ilib.data.localeinfo_EC = {"currency":"USD","firstDayOfWeek":1,"region.name":"Ecuador","timezone":"America/Guayaquil","locale":"EC"};
ilib.data.localeinfo_ES = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Spain","timezone":"Europe/Madrid","locale":"ES"};
ilib.data.localeinfo_es_GQ = {"numfmt":{"currencyFormats":{"common":"{s}{n}"}},"locale":"es-GQ"};
ilib.data.localeinfo_GQ = {"currency":"XAF","region.name":"Equatorial Guinea","timezone":"Africa/Malabo","locale":"GQ"};
ilib.data.localeinfo_es_GT = {"numfmt":{"decimalChar":".","groupChar":",","currencyFormats":{"common":"{s}{n}"}},"locale":"es-GT"};
ilib.data.localeinfo_GT = {"currency":"GTQ","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"Guatemala","timezone":"America/Guatemala","locale":"GT"};
ilib.data.localeinfo_es_HN = {"numfmt":{"decimalChar":".","groupChar":",","currencyFormats":{"common":"{s}{n}"}},"locale":"es-HN"};
ilib.data.localeinfo_HN = {"currency":"HNL","firstDayOfWeek":0,"region.name":"Honduras","timezone":"America/Tegucigalpa","locale":"HN"};
ilib.data.localeinfo_es_MX = {"numfmt":{"decimalChar":".","groupChar":",","currencyFormats":{"common":"{s}{n}"}},"locale":"es-MX"};
ilib.data.localeinfo_MX = {"currency":"MXN","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"Mexico","timezone":"America/Mexico_City","locale":"MX"};
ilib.data.localeinfo_es_SV = {"numfmt":{"decimalChar":".","groupChar":",","currencyFormats":{"common":"{s}{n}"}},"locale":"es-SV"};
ilib.data.localeinfo_SV = {"currency":"USD","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"El Salvador","timezone":"America/El_Salvador","locale":"SV"};
ilib.data.localeinfo_es_UY = {"numfmt":{"currencyFormats":{"common":"{s}Â {n}","commonNegative":"({s}Â {n})"}},"locale":"es-UY"};
ilib.data.localeinfo_UY = {"currency":"UYU","firstDayOfWeek":1,"region.name":"Uruguay","timezone":"America/Montevideo","locale":"UY"};
ilib.data.localeinfo_es_VE = {"numfmt":{"currencyFormats":{"common":"{s}{n}"}},"locale":"es-VE"};
ilib.data.localeinfo_VE = {"currency":"VEF","firstDayOfWeek":0,"paperSizes":{"regular":"8x11"},"region.name":"Venezuela","timezone":"America/Caracas","locale":"VE"};
ilib.data.localeinfo_et = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Estonian","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}{s}","commonNegative":"({n}{s})"}},"scripts":["Latn"],"locale":"et"};
ilib.data.localeinfo_EE = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Estonia","timezone":"Europe/Tallinn","locale":"EE"};
ilib.data.localeinfo_fa = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â¹","alternateQuotationEnd":"âº"},"language.name":"Persian","numfmt":{"script":"Arab","decimalChar":"Ù«","groupChar":"Ù¬","pctChar":"Ùª","exponential":"ÃÛ±Û°^","currencyFormats":{"common":"â{s}{n}","commonNegative":"â({s}{n})"},"useNative":true,"digits":"Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹"},"scripts":["Arab"],"locale":"fa"};
ilib.data.localeinfo_AF = {"calendar":"persian","currency":"AFN","firstDayOfWeek":6,"region.name":"Afghanistan","timezone":"Asia/Kabul","locale":"AF"};
ilib.data.localeinfo_IR = {"calendar":"persian","currency":"IRR","firstDayOfWeek":6,"region.name":"Iran","timezone":"Asia/Tehran","locale":"IR"};
ilib.data.localeinfo_ff = {"delimiter":{"quotationStart":"â","alternateQuotationStart":"â"},"language.name":"Fulah","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Latn"],"locale":"ff"};
ilib.data.localeinfo_SN = {"currency":"XOF","region.name":"Senegal","timezone":"Africa/Dakar","locale":"SN"};
ilib.data.localeinfo_fi = {"delimiter":{"quotationStart":"â","alternateQuotationStart":"â"},"language.name":"Finnish","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"scripts":["Latn"],"locale":"fi"};
ilib.data.localeinfo_FI = {"currency":"EUR","firstDayOfWeek":1,"paperSizes":{"regular":"A4","photo":"4x6"},"region.name":"Finland","timezone":"Europe/Helsinki","locale":"FI"};
ilib.data.localeinfo_fj = {"language.name":"Fijian","scripts":["Latn"],"locale":"fj"};
ilib.data.localeinfo_FJ = {"currency":"FJD","firstDayOfWeek":1,"region.name":"Fiji","timezone":"Pacific/Fiji","locale":"FJ"};
ilib.data.localeinfo_fr = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"Â«","alternateQuotationEnd":"Â»"},"language.name":"French","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}","commonNegative":"({n}Â {s})"},"pctFmt":"{n}Â %"},"paperSizes":{"regular":"A4","photo":"4x6"},"scripts":["Latn"],"locale":"fr"};
ilib.data.localeinfo_AD = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Andorra","timezone":"Europe/Andorra","locale":"AD"};
ilib.data.localeinfo_fr_BE = {"numfmt":{"groupChar":"."},"locale":"fr-BE"};
ilib.data.localeinfo_BE = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Belgium","timezone":"Europe/Brussels","locale":"BE"};
ilib.data.localeinfo_BF = {"currency":"XOF","region.name":"Burkina Faso","timezone":"Africa/Ouagadougou","locale":"BF"};
ilib.data.localeinfo_BJ = {"currency":"XOF","region.name":"Benin","timezone":"Africa/Porto-Novo","locale":"BJ"};
ilib.data.localeinfo_fr_CA = {"delimiter":{"alternateQuotationStart":"â¹","alternateQuotationEnd":"âº"},"paperSizes":{"regular":"8x11","photo":"3x5"},"locale":"fr-CA"};
ilib.data.localeinfo_CD = {"currency":"CDF","region.name":"Congo - Kinshasa","timezone":"Africa/Kinshasa","locale":"CD"};
ilib.data.localeinfo_CF = {"currency":"XAF","region.name":"Central African Republic","timezone":"Africa/Bangui","locale":"CF"};
ilib.data.localeinfo_CG = {"region.name":"Congo - Brazzaville","timezone":"Africa/Brazzaville","locale":"CG"};
ilib.data.localeinfo_fr_CH = {"delimiter":{"alternateQuotationStart":"â¹","alternateQuotationEnd":"âº"},"numfmt":{"decimalChar":".","groupChar":"'","currencyFormats":{"common":"{s}Â {n}","commonNegative":"{s}-{n}"}},"locale":"fr-CH"};
ilib.data.localeinfo_CI = {"currency":"XOF","region.name":"CÃ´te dâIvoire","timezone":"Africa/Abidjan","locale":"CI"};
ilib.data.localeinfo_GA = {"currency":"XAF","region.name":"Gabon","timezone":"Africa/Libreville","locale":"GA"};
ilib.data.localeinfo_GN = {"currency":"GNF","region.name":"Guinea","timezone":"Africa/Conakry","locale":"GN"};
ilib.data.localeinfo_fr_LU = {"numfmt":{"groupChar":"."},"locale":"fr-LU"};
ilib.data.localeinfo_LU = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Luxembourg","timezone":"Europe/Luxembourg","locale":"LU"};
ilib.data.localeinfo_MG = {"currency":"MGA","region.name":"Madagascar","timezone":"Indian/Antananarivo","locale":"MG"};
ilib.data.localeinfo_TG = {"currency":"XOF","region.name":"Togo","timezone":"Africa/Lome","locale":"TG"};
ilib.data.localeinfo_YT = {"currency":"EUR","region.name":"Mayotte","timezone":"Indian/Mayotte","locale":"YT"};
ilib.data.localeinfo_ga = {"language.name":"Irish","numfmt":{"decimalChar":".","groupChar":",","exponential":"E"},"scripts":["Latn"],"locale":"ga"};
ilib.data.localeinfo_gl = {"language.name":"Galician","numfmt":{"exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn"],"locale":"gl"};
ilib.data.localeinfo_ha = {"language.name":"Hausa","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Arab","Latn"],"locale":"ha"};
ilib.data.localeinfo_he = {"delimiter":{"quotationStart":"\"","quotationEnd":"\"","alternateQuotationStart":"'","alternateQuotationEnd":"'"},"language.name":"Hebrew","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Hebr"],"locale":"he"};
ilib.data.localeinfo_IL = {"currency":"ILS","firstDayOfWeek":0,"region.name":"Israel","timezone":"Asia/Jerusalem","locale":"IL"};
ilib.data.localeinfo_hi = {"clock":"12","language.name":"Hindi","native_numfmt":{"script":"Deva","decimalChar":".","groupChar":",","pctChar":"%","exponential":"E","prigroupSize":3,"secgroupSize":2,"currencyFormats":{"common":"{s}Â {n}"},"pctFmt":"{n}%","roundingMode":"halfdown","useNative":true,"digits":"à¥¦à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯"},"numfmt":{"decimalChar":".","groupChar":",","exponential":"E","secgroupSize":2,"useNative":false,"currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Deva"],"locale":"hi"};
ilib.data.localeinfo_hr = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Croatian","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Latn"],"locale":"hr"};
ilib.data.localeinfo_HR = {"currency":"HRK","firstDayOfWeek":1,"region.name":"Croatia","timezone":"Europe/Zagreb","locale":"HR"};
ilib.data.localeinfo_hu = {"delimiter":{"quotationStart":"â","alternateQuotationStart":"Â»","alternateQuotationEnd":"Â«"},"language.name":"Hungarian","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Latn"],"locale":"hu"};
ilib.data.localeinfo_HU = {"currency":"HUF","firstDayOfWeek":1,"region.name":"Hungary","timezone":"Europe/Budapest","locale":"HU"};
ilib.data.localeinfo_hy = {"language.name":"Armenian","numfmt":{"exponential":"E","prigroupSize":2,"currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Armn"],"locale":"hy"};
ilib.data.localeinfo_id = {"language.name":"Indonesian","numfmt":{"exponential":"E"},"scripts":["Latn","Arab"],"locale":"id"};
ilib.data.localeinfo_ID = {"currency":"IDR","firstDayOfWeek":0,"region.name":"Indonesia","timezone":"Asia/Jakarta","locale":"ID"};
ilib.data.localeinfo_it = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Italian","numfmt":{"exponential":"E","currencyFormats":{"common":"{s}Â {n}"}},"paperSizes":{"regular":"A4","photo":"4x6"},"scripts":["Latn"],"locale":"it"};
ilib.data.localeinfo_it_CH = {"numfmt":{"decimalChar":".","groupChar":"'"},"locale":"it-CH"};
ilib.data.localeinfo_IT = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Italy","timezone":"Europe/Rome","locale":"IT"};
ilib.data.localeinfo_SM = {"currency":"EUR","firstDayOfWeek":1,"region.name":"San Marino","timezone":"Europe/San_Marino","locale":"SM"};
ilib.data.localeinfo_ja = {"delimiter":{"quotationStart":"ã","quotationEnd":"ã","alternateQuotationStart":"ã","alternateQuotationEnd":"ã"},"language.name":"Japanese","numfmt":{"decimalChar":".","groupChar":",","exponential":"E"},"paperSizes":{"regular":"A4","photo":"L"},"scripts":["Jpan"],"locale":"ja"};
ilib.data.localeinfo_JP = {"currency":"JPY","firstDayOfWeek":0,"region.name":"Japan","timezone":"Asia/Tokyo","locale":"JP"};
ilib.data.localeinfo_ka = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Georgian","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"scripts":["Geor"],"locale":"ka"};
ilib.data.localeinfo_kk = {"language.name":"Kazakh","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Cyrl","Arab"],"locale":"kk"};
ilib.data.localeinfo_KZ = {"currency":"KZT","firstDayOfWeek":1,"region.name":"Kazakhstan","timezone":"Asia/Almaty","locale":"KZ"};
ilib.data.localeinfo_kn = {"clock":"12","language.name":"Kannada","native_numfmt":{"script":"Knda","decimalChar":".","groupChar":",","exponential":"à²","secgroupSize":2,"currencyFormats":{"common":"{s} {n}","commonNegative":"-{s} {n}"},"useNative":true,"digits":"à³¦à³§à³¨à³©à³ªà³«à³¬à³­à³®à³¯"},"numfmt":{"decimalChar":".","groupChar":",","exponential":"à²","secgroupSize":2,"useNative":false,"currencyFormats":{"common":"{s} {n}","commonNegative":"-{s} {n}"}},"scripts":["Knda"],"locale":"kn"};
ilib.data.localeinfo_ko = {"clock":"12","language.name":"Korean","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"paperSizes":{"regular":"A4","photo":"3R"},"scripts":["Kore"],"locale":"ko"};
ilib.data.localeinfo_KR = {"currency":"KRW","firstDayOfWeek":0,"region.name":"South Korea","timezone":"Asia/Seoul","locale":"KR"};
ilib.data.localeinfo_ks = {"clock":"12","language.name":"Kashmiri","numfmt":{"script":"Arab","decimalChar":"Ù«","groupChar":"Ù¬","pctChar":"Ùª","exponential":"ÃÛ±Û°^","secgroupSize":2,"currencyFormats":{"common":"{s}Â {n}"},"useNative":true,"digits":"Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹"},"scripts":["Arab","Deva"],"locale":"ks"};
ilib.data.localeinfo_ku = {"language.name":"Kurdish","scripts":["Latn","Arab","Cyrl"],"locale":"ku"};
ilib.data.localeinfo_lg = {"clock":"12","language.name":"Ganda","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"common":"{n}{s}"}},"scripts":["Latn"],"locale":"lg"};
ilib.data.localeinfo_ln = {"language.name":"Lingala","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Latn"],"locale":"ln"};
ilib.data.localeinfo_lt = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Lithuanian","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Latn"],"locale":"lt"};
ilib.data.localeinfo_LT = {"currency":"LTL","firstDayOfWeek":1,"region.name":"Lithuania","timezone":"Europe/Vilnius","locale":"LT"};
ilib.data.localeinfo_lv = {"language.name":"Latvian","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn"],"locale":"lv"};
ilib.data.localeinfo_LV = {"currency":"LVL","firstDayOfWeek":1,"region.name":"Latvia","timezone":"Europe/Riga","locale":"LV"};
ilib.data.localeinfo_mi = {"language.name":"Maori","scripts":["Latn"],"locale":"mi"};
ilib.data.localeinfo_CK = {"currency":"NZD","region.name":"Cook Islands","timezone":"Pacific/Rarotonga","locale":"CK"};
ilib.data.localeinfo_mk = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Macedonian","numfmt":{"exponential":"E","currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Cyrl"],"locale":"mk"};
ilib.data.localeinfo_MK = {"currency":"MKD","firstDayOfWeek":1,"region.name":"Macedonia","timezone":"Europe/Skopje","locale":"MK"};
ilib.data.localeinfo_ml = {"clock":"12","language.name":"Malayalam","native_numfmt":{"script":"Mlym","decimalChar":".","groupChar":",","secgroupSize":2,"currencyFormats":{"common":"{s} {n}","commonNegative":"-{s} {n}"},"useNative":true,"digits":"àµ¦àµ§àµ¨àµ©àµªàµ«àµ¬àµ­àµ®àµ¯"},"numfmt":{"decimalChar":".","groupChar":",","secgroupSize":2,"useNative":false,"currencyFormats":{"common":"{s} {n}","commonNegative":"-{s} {n}"}},"scripts":["Mlym"],"locale":"ml"};
ilib.data.localeinfo_mn = {"language.name":"Mongolian","scripts":["Cyrl","Mong","Phag"],"locale":"mn"};
ilib.data.localeinfo_CN = {"currency":"CNY","firstDayOfWeek":0,"region.name":"China","timezone":"Asia/Shanghai","locale":"CN"};
ilib.data.localeinfo_mr = {"clock":"12","language.name":"Marathi","native_numfmt":{"script":"Deva","decimalChar":".","groupChar":",","secgroupSize":2,"currencyFormats":{"common":"{s} {n}","commonNegative":"-{s} {n}"},"useNative":true,"digits":"à¥¦à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯"},"numfmt":{"decimalChar":".","groupChar":",","secgroupSize":2,"useNative":false,"currencyFormats":{"common":"{s} {n}","commonNegative":"-{s} {n})"}},"scripts":["Deva"],"locale":"mr"};
ilib.data.localeinfo_ms = {"clock":"12","language.name":"Malay","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn","Arab"],"locale":"ms"};
ilib.data.localeinfo_ms_BN = {"numfmt":{"decimalChar":",","groupChar":".","currencyFormats":{"common":"{s}Â {n}"}},"locale":"ms-BN"};
ilib.data.localeinfo_BN = {"currency":"BND","firstDayOfWeek":1,"region.name":"Brunei","timezone":"Asia/Brunei","locale":"BN"};
ilib.data.localeinfo_nb = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»"},"language.name":"Norwegian BokmÃ¥l","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{s}Â {n}"},"pctFmt":"{n}Â %"},"scripts":["Latn"],"locale":"nb"};
ilib.data.localeinfo_NO = {"currency":"NOK","firstDayOfWeek":1,"paperSizes":{"regular":"A4","photo":"4x6"},"region.name":"Norway","timezone":"Europe/Oslo","locale":"NO"};
ilib.data.localeinfo_ne = {"language.name":"Nepali","native_numfmt":{"script":"Deva","decimalChar":".","groupChar":",","pctChar":"%","exponential":"E","prigroupSize":3,"currencyFormats":{"common":"{s}Â {n}"},"pctFmt":"{n}%","roundingMode":"halfdown","useNative":true,"digits":"à¥¦à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯"},"numfmt":{"decimalChar":".","groupChar":",","exponential":"E","useNative":false,"currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Deva"],"locale":"ne"};
ilib.data.localeinfo_nl = {"language.name":"Dutch","numfmt":{"exponential":"E","currencyFormats":{"common":"{s}Â {n}","commonNegative":"{s}Â {n}-"}},"scripts":["Latn"],"locale":"nl"};
ilib.data.localeinfo_nl_BE = {"numfmt":{"currencyFormats":{"common":"{n}Â {s}"}},"locale":"nl-BE"};
ilib.data.localeinfo_CW = {"currency":"ANG","region.name":"CuraÃ§ao","locale":"CW"};
ilib.data.localeinfo_GF = {"currency":"EUR","firstDayOfWeek":1,"region.name":"French Guiana","timezone":"America/Cayenne","locale":"GF"};
ilib.data.localeinfo_NL = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Netherlands","timezone":"Europe/Amsterdam","locale":"NL"};
ilib.data.localeinfo_SR = {"currency":"SRD","region.name":"Suriname","timezone":"America/Paramaribo","locale":"SR"};
ilib.data.localeinfo_no = {"language.name":"Norwegian","numfmt":{"groupChar":"Â ","currencyFormats":{"common":"{s}Â {n}"},"pctFmt":"{n}Â %"},"scripts":["Latn"],"locale":"no"};
ilib.data.localeinfo_BV = {"currency":"NOK","paperSizes":{"regular":"A4","photo":"4x6"},"region.name":"Bouvet Island","locale":"BV"};
ilib.data.localeinfo_SJ = {"currency":"NOK","paperSizes":{"regular":"A4","photo":"4x6"},"region.name":"Svalbard and Jan Mayen","timezone":"Arctic/Longyearbyen","locale":"SJ"};
ilib.data.localeinfo_om = {"clock":"12","language.name":"Oromo","numfmt":{"decimalChar":".","groupChar":",","exponential":"E"},"scripts":["Latn","Ethi"],"locale":"om"};
ilib.data.localeinfo_or = {"clock":"12","language.name":"Oriya","native_numfmt":{"script":"Orya","decimalChar":".","groupChar":",","pctChar":"%","exponential":"E","prigroupSize":3,"secgroupSize":2,"currencyFormats":{"common":"{s}Â {n}"},"pctFmt":"{n}%","roundingMode":"halfdown","useNative":true,"digits":"à­¦à­§à­¨à­©à­ªà­«à­¬à­­à­®à­¯"},"numfmt":{"decimalChar":".","groupChar":",","exponential":"E","secgroupSize":2,"useNative":false,"currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Orya"],"locale":"or"};
ilib.data.localeinfo_os = {"language.name":"Ossetic","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Cyrl","Latn"],"locale":"os"};
ilib.data.localeinfo_RU = {"currency":"RUB","firstDayOfWeek":1,"region.name":"Russia","timezone":"Europe/Moscow","locale":"RU"};
ilib.data.localeinfo_pa = {"clock":"12","language.name":"Punjabi","native_numfmt":{"script":"Guru","decimalChar":".","groupChar":",","secgroupSize":2,"currencyFormats":{"common":"{s}Â {n}","commonNegative":"-{s} {n}"},"useNative":true,"digits":"à©¦à©§à©¨à©©à©ªà©«à©¬à©­à©®à©¯"},"numfmt":{"decimalChar":".","groupChar":",","secgroupSize":2,"useNative":false,"currencyFormats":{"common":"{s}Â {n}","commonNegative":"-{s} {n}"}},"scripts":["Guru","Arab"],"locale":"pa"};
ilib.data.localeinfo_pa_Arab_PK = {"numfmt":{"script":"Arab","decimalChar":"Ù«","groupChar":"Ù¬","pctChar":"Ùª","exponential":"ÃÛ±Û°^","useNative":true,"digits":"Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹"},"locale":"pa-Arab-PK"};
ilib.data.localeinfo_pl = {"delimiter":{"quotationStart":"â","alternateQuotationStart":"Â«","alternateQuotationEnd":"Â»"},"language.name":"Polish","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}","commonNegative":"({n}Â {s})"}},"scripts":["Latn"],"locale":"pl"};
ilib.data.localeinfo_PL = {"currency":"PLN","firstDayOfWeek":1,"region.name":"Poland","timezone":"Europe/Warsaw","locale":"PL"};
ilib.data.localeinfo_pt = {"language.name":"Portuguese","numfmt":{"exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn"],"locale":"pt"};
ilib.data.localeinfo_pt_AO = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"numfmt":{"groupChar":"Â ","currencyFormats":{"common":"{n}Â {s}"}},"locale":"pt-AO"};
ilib.data.localeinfo_AO = {"currency":"AOA","region.name":"Angola","timezone":"Africa/Luanda","locale":"AO"};
ilib.data.localeinfo_BR = {"currency":"BRL","firstDayOfWeek":0,"region.name":"Brazil","timezone":"America/Sao_Paulo","locale":"BR"};
ilib.data.localeinfo_pt_CV = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"numfmt":{"groupChar":"Â ","currencyFormats":{"common":"{n}Â {s}"}},"locale":"pt-CV"};
ilib.data.localeinfo_CV = {"currency":"CVE","region.name":"Cape Verde","timezone":"Atlantic/Cape_Verde","locale":"CV"};
ilib.data.localeinfo_pt_GW = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"numfmt":{"groupChar":"Â ","currencyFormats":{"common":"{n}Â {s}"}},"locale":"pt-GW"};
ilib.data.localeinfo_GW = {"currency":"XOF","region.name":"Guinea-Bissau","timezone":"Africa/Bissau","locale":"GW"};
ilib.data.localeinfo_pt_MO = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"numfmt":{"groupChar":"Â ","currencyFormats":{"common":"{n}Â {s}"}},"locale":"pt-MO"};
ilib.data.localeinfo_MO = {"currency":"MOP","firstDayOfWeek":0,"region.name":"Macau SAR China","timezone":"Asia/Macau","locale":"MO"};
ilib.data.localeinfo_pt_MZ = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"numfmt":{"groupChar":"Â ","currencyFormats":{"common":"{n}Â {s}"}},"locale":"pt-MZ"};
ilib.data.localeinfo_MZ = {"currency":"MZN","firstDayOfWeek":0,"region.name":"Mozambique","timezone":"Africa/Maputo","locale":"MZ"};
ilib.data.localeinfo_pt_PT = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"numfmt":{"groupChar":"Â ","currencyFormats":{"common":"{n}Â {s}"}},"locale":"pt-PT"};
ilib.data.localeinfo_PT = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Portugal","timezone":"Europe/Lisbon","locale":"PT"};
ilib.data.localeinfo_pt_ST = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"numfmt":{"groupChar":"Â ","currencyFormats":{"common":"{n}Â {s}"}},"locale":"pt-ST"};
ilib.data.localeinfo_ST = {"currency":"STD","region.name":"SÃ£o TomÃ© and PrÃ­ncipe","timezone":"Africa/Sao_Tome","locale":"ST"};
ilib.data.localeinfo_pt_TL = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"numfmt":{"groupChar":"Â ","currencyFormats":{"common":"{n}Â {s}"}},"locale":"pt-TL"};
ilib.data.localeinfo_TL = {"currency":"USD","region.name":"Timor-Leste","timezone":"Asia/Dili","locale":"TL"};
ilib.data.localeinfo_ro = {"delimiter":{"quotationStart":"â","alternateQuotationStart":"Â«","alternateQuotationEnd":"Â»"},"language.name":"Romanian","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"scripts":["Latn","Cyrl"],"locale":"ro"};
ilib.data.localeinfo_RO = {"currency":"RON","firstDayOfWeek":1,"region.name":"Romania","timezone":"Europe/Bucharest","locale":"RO"};
ilib.data.localeinfo_RS = {"currency":"RSD","firstDayOfWeek":1,"region.name":"Serbia","timezone":"Europe/Belgrade","locale":"RS"};
ilib.data.localeinfo_ru = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Russian","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"scripts":["Cyrl"],"locale":"ru"};
ilib.data.localeinfo_KG = {"currency":"KGS","firstDayOfWeek":1,"region.name":"Kyrgyzstan","timezone":"Asia/Bishkek","locale":"KG"};
ilib.data.localeinfo_TM = {"currency":"TMT","firstDayOfWeek":1,"region.name":"Turkmenistan","timezone":"Asia/Ashgabat","locale":"TM"};
ilib.data.localeinfo_si = {"clock":"12","language.name":"Sinhala","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","secgroupSize":2,"currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Sinh"],"locale":"si"};
ilib.data.localeinfo_sk = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Slovak","numfmt":{"groupChar":"Â ","exponential":"E","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"scripts":["Latn"],"locale":"sk"};
ilib.data.localeinfo_SK = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Slovakia","timezone":"Europe/Bratislava","locale":"SK"};
ilib.data.localeinfo_sl = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Slovenian","numfmt":{"currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn"],"locale":"sl"};
ilib.data.localeinfo_SI = {"currency":"EUR","firstDayOfWeek":1,"region.name":"Slovenia","timezone":"Europe/Ljubljana","locale":"SI"};
ilib.data.localeinfo_so = {"clock":"12","language.name":"Somali","numfmt":{"decimalChar":".","groupChar":",","exponential":"E"},"scripts":["Latn","Arab","Osma"],"locale":"so"};
ilib.data.localeinfo_SO = {"currency":"SOS","region.name":"Somalia","timezone":"Africa/Mogadishu","locale":"SO"};
ilib.data.localeinfo_sq = {"clock":"12","delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Albanian","numfmt":{"groupChar":"Â ","exponential":"E"},"scripts":["Latn"],"locale":"sq"};
ilib.data.localeinfo_AL = {"currency":"ALL","firstDayOfWeek":1,"region.name":"Albania","timezone":"Europe/Tirane","locale":"AL"};
ilib.data.localeinfo_sr = {"delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Serbian","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Cyrl","Latn"],"locale":"sr"};
ilib.data.localeinfo_sr_Latn_BA = {"numfmt":{"currencyFormats":{"common":"{s}Â {n}"}},"locale":"sr-Latn-BA"};
ilib.data.localeinfo_sr_Latn_ME = {"numfmt":{"currencyFormats":{"common":"{s}Â {n}"}},"locale":"sr-Latn-ME"};
ilib.data.localeinfo_sr_Latn_RS = {"numfmt":{"currencyFormats":{"common":"{s}Â {n}"}},"locale":"sr-Latn-RS"};
ilib.data.localeinfo_ss = {"language.name":"Swati","numfmt":{"groupChar":"Â ","exponential":"E"},"scripts":["Latn"],"locale":"ss"};
ilib.data.localeinfo_st = {"language.name":"Southern Sotho","numfmt":{"groupChar":"Â ","exponential":"E"},"scripts":["Latn"],"locale":"st"};
ilib.data.localeinfo_LS = {"currency":"LSL","region.name":"Lesotho","timezone":"Africa/Maseru","locale":"LS"};
ilib.data.localeinfo_sv = {"delimiter":{"quotationStart":"â","alternateQuotationStart":"â"},"language.name":"Swedish","numfmt":{"groupChar":"Â ","exponential":"Ã10^","currencyFormats":{"common":"{n}Â {s}"},"pctFmt":"{n}Â %"},"scripts":["Latn"],"locale":"sv"};
ilib.data.localeinfo_SE = {"currency":"SEK","firstDayOfWeek":1,"paperSizes":{"regular":"A4","photo":"4x6"},"region.name":"Sweden","timezone":"Europe/Stockholm","locale":"SE"};
ilib.data.localeinfo_sw = {"clock":"12","language.name":"Swahili","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn"],"locale":"sw"};
ilib.data.localeinfo_ta = {"clock":"12","language.name":"Tamil","native_numfmt":{"script":"Taml","decimalChar":".","groupChar":",","secgroupSize":2,"currencyFormats":{"common":"{s}Â {n}","commonNegative":"-{s} {n}"},"useNative":true,"digits":"à¯¦à¯§à¯¨à¯©à¯ªà¯«à¯¬à¯­à¯®à¯¯"},"numfmt":{"decimalChar":".","groupChar":",","secgroupSize":2,"useNative":false,"currencyFormats":{"common":"{s}Â {n}","commonNegative":"-{s} {n}"}},"scripts":["Taml"],"locale":"ta"};
ilib.data.localeinfo_te = {"clock":"12","language.name":"Telugu","native_numfmt":{"script":"Telu","decimalChar":".","groupChar":",","secgroupSize":2,"currencyFormats":{"common":"{s} {n}","commonNegative":"-{s} {n}"},"useNative":true,"digits":"à±¦à±§à±¨à±©à±ªà±«à±¬à±­à±®à±¯"},"numfmt":{"decimalChar":".","groupChar":",","secgroupSize":2,"useNative":false,"currencyFormats":{"common":"{s} {n}","commonNegative":"-{s} {n}"}},"scripts":["Telu"],"locale":"te"};
ilib.data.localeinfo_th = {"language.name":"Thai","native_numfmt":{"script":"Thai","decimalChar":".","groupChar":",","pctChar":"%","exponential":"E","prigroupSize":3,"currencyFormats":{"common":"{s}{n}","commonNegative":"({s}{n})"},"pctFmt":"{n}%","roundingMode":"halfdown","useNative":true,"digits":"à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹"},"numfmt":{"decimalChar":".","groupChar":",","exponential":"E","useNative":false,"currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Thai"],"locale":"th"};
ilib.data.localeinfo_TH = {"calendar":"thaisolar","currency":"THB","firstDayOfWeek":0,"region.name":"Thailand","timezone":"Asia/Bangkok","locale":"TH"};
ilib.data.localeinfo_tr = {"language.name":"Turkish","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}","commonNegative":"({n}Â {s})"},"pctFmt":"%{n}"},"scripts":["Latn","Arab"],"locale":"tr"};
ilib.data.localeinfo_TR = {"currency":"TRY","firstDayOfWeek":1,"region.name":"Turkey","timezone":"Europe/Istanbul","locale":"TR"};
ilib.data.localeinfo_uk = {"delimiter":{"quotationStart":"Â«","quotationEnd":"Â»","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Ukrainian","numfmt":{"groupChar":"Â ","exponential":"Ð","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Cyrl"],"locale":"uk"};
ilib.data.localeinfo_UA = {"currency":"UAH","firstDayOfWeek":1,"region.name":"Ukraine","timezone":"Europe/Kiev","locale":"UA"};
ilib.data.localeinfo_ur = {"clock":"12","delimiter":{"quotationStart":"â","quotationEnd":"â","alternateQuotationStart":"â","alternateQuotationEnd":"â"},"language.name":"Urdu","native_numfmt":{"script":"Arab","decimalChar":"Ù«","groupChar":"Ù¬","pctChar":"Ùª","exponential":"ÃÛ±Û°^","currencyFormats":{"common":"{s}{n}"},"pctFmt":"{n}Ùª","useNative":true,"digits":"Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹"},"numfmt":{"decimalChar":".","useNative":false,"groupChar":","},"scripts":["Arab"],"locale":"ur"};
ilib.data.localeinfo_ur_IN = {"numfmt":{"script":"Arab","decimalChar":"Ù«","groupChar":"Ù¬","pctChar":"Ùª","exponential":"ÃÛ±Û°^","secgroupSize":2,"currencyFormats":{"common":"{s}Â {n}","commonNegative":"-{s} {n}"},"useNative":true,"digits":"Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹"},"locale":"ur-IN"};
ilib.data.localeinfo_uz = {"language.name":"Uzbek","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"common":"{s}Â {n}"}},"scripts":["Arab","Cyrl","Latn"],"locale":"uz"};
ilib.data.localeinfo_uz_Arab_AF = {"numfmt":{"script":"Arab","decimalChar":"Ù«","groupChar":"Ù¬","pctChar":"Ùª","exponential":"ÃÛ±Û°^","useNative":true,"digits":"Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹"},"locale":"uz-Arab-AF"};
ilib.data.localeinfo_UZ = {"currency":"UZS","firstDayOfWeek":1,"region.name":"Uzbekistan","timezone":"Asia/Samarkand","locale":"UZ"};
ilib.data.localeinfo_vai = {"clock":"12","language.name":"Vai","native_numfmt":{"script":"Vaii","decimalChar":".","groupChar":",","pctChar":"%","exponential":"E","prigroupSize":3,"currencyFormats":{"common":"{s}{n}","commonNegative":"({s}{n})"},"pctFmt":"{n}%","roundingMode":"halfdown","useNative":true,"digits":"ê ê¡ê¢ê£ê¤ê¥ê¦ê§ê¨ê©"},"numfmt":{"decimalChar":".","groupChar":",","exponential":"E","useNative":false,"currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Vaii","Latn"],"locale":"vai"};
ilib.data.localeinfo_vi = {"language.name":"Vietnamese","numfmt":{"exponential":"E","currencyFormats":{"common":"{n}Â {s}"}},"scripts":["Latn","Hani"],"locale":"vi"};
ilib.data.localeinfo_VN = {"currency":"VND","firstDayOfWeek":1,"region.name":"Vietnam","timezone":"Asia/Ho_Chi_Minh","locale":"VN"};
ilib.data.localeinfo_zh = {"clock":"12","language.name":"Chinese","native_numfmt":{"script":"Hani","decimalChar":".","groupChar":",","pctChar":"%","exponential":"E","prigroupSize":3,"currencyFormats":{"common":"{s}{n}","commonNegative":"({s}{n})"},"pctFmt":"{n}%","roundingMode":"halfdown","useNative":true,"digits":"ãä¸äºä¸åäºå­ä¸å«ä¹"},"numfmt":{"decimalChar":".","groupChar":",","exponential":"E","useNative":false,"currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Hans","Hant","Bopo","Phag"],"locale":"zh"};
ilib.data.localeinfo_zh_Hant_HK = {"delimiter":{"quotationStart":"ã","quotationEnd":"ã","alternateQuotationStart":"ã","alternateQuotationEnd":"ã"},"locale":"zh-Hant-HK"};
ilib.data.localeinfo_zh_Hant_TW = {"delimiter":{"quotationStart":"ã","quotationEnd":"ã","alternateQuotationStart":"ã","alternateQuotationEnd":"ã"},"locale":"zh-Hant-TW"};
ilib.data.localeinfo_TW = {"currency":"TWD","firstDayOfWeek":0,"region.name":"Taiwan","timezone":"Asia/Taipei","locale":"TW"};
ilib.data.localeinfo_zu = {"clock":"12","language.name":"Zulu","numfmt":{"decimalChar":".","groupChar":",","exponential":"E","currencyFormats":{"commonNegative":"({s}{n})"}},"scripts":["Latn"],"locale":"zu"};
ilib.data.localeinfo_zxx = {"currency":"USD","language.name":"No linguistic content","paperSizes":{"regular":"8x11","photo":"3x5"},"scripts":["Latn"],"locale":"zxx"};
ilib.data.localeinfo_XX = {"region.name":"Unknown","locale":"XX"};
/*
 * localeinfo.js - Encode locale-specific defaults
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js

// !data localeinfo

/**
 * @class
 * Create a new locale info instance. Locale info instances give information about
 * the default settings for a particular locale. These settings may be overridden
 * by various parts of the code, and should be used as a fall-back setting of last
 * resort. <p>
 * 
 * The optional options object holds extra parameters if they are necessary. The
 * current list of supported options are:
 * 
 * <ul>
 * <li><i>onLoad</i> - a callback function to call when the locale info object is fully 
 * loaded. When the onLoad option is given, the localeinfo object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * If this copy of ilib is pre-assembled and all the data is already available, 
 * or if the data was already previously loaded, then this constructor will call
 * the onLoad callback immediately when the initialization is done. 
 * If the onLoad option is not given, this class will only attempt to load any
 * missing locale data synchronously.
 * 
 * Depends directive: !depends localeinfo.js
 * 
 * @constructor
 * @see {ilib.setLoaderCallback} for information about registering a loader callback
 * function
 * @param {ilib.Locale|string=} locale the locale for which the info is sought, or undefined for
 * @param {Object=} options the locale for which the info is sought, or undefined for
 * the current locale
 */
ilib.LocaleInfo = function(locale, options) {
	var sync = true,
	    loadParams = undefined;
	
	/* these are all the defaults. Essentially, en-US */
	/** @type {{
		scripts:Array.<string>,
		timezone:string,
		units:string,
		calendar:string,
		clock:string,
		currency:string,
		firstDayOfWeek:number,
		numfmt:Object.<{
			currencyFormats:Object.<{common:string,commonNegative:string,iso:string,isoNegative:string}>,
			script:string,
			decimalChar:string,
			groupChar:string,
			prigroupSize:number,
			secgroupSize:number,
			negativenumFmt:string,
			pctFmt:string,
			negativepctFmt:string,
			pctChar:string,
			roundingMode:string,
			exponential:string,
			digits:string
		}>
	}}*/
	this.info = ilib.LocaleInfo.defaultInfo;
	
	switch (typeof(locale)) {
		case "string":
			this.locale = new ilib.Locale(locale);
			break;
		default:
		case "undefined":
			this.locale = new ilib.Locale();
			break;
		case "object":
			this.locale = locale;
			break;
	}
	
	if (options) {
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			loadParams = options.loadParams;
		}
	}

	if (!ilib.LocaleInfo.cache) {
		ilib.LocaleInfo.cache = {};
	}

	ilib.loadData({
		object: ilib.LocaleInfo, 
		locale: this.locale, 
		name: "localeinfo.json", 
		sync: sync, 
		loadParams: loadParams, 
		callback: ilib.bind(this, function (info) {
			if (!info) {
				info = ilib.LocaleInfo.defaultInfo;
				var spec = this.locale.getSpec().replace(/-/g, "_");
				ilib.LocaleInfo.cache[spec] = info;
			}
			this.info = info;
			if (options && typeof(options.onLoad) === 'function') {
				options.onLoad(this);
			}
		})
	});
};

ilib.LocaleInfo.defaultInfo = /** @type {{
	scripts:Array.<string>,
	timezone:string,
	units:string,
	calendar:string,
	clock:string,
	currency:string,
	firstDayOfWeek:number,
	numfmt:Object.<{
		currencyFormats:Object.<{
			common:string,
			commonNegative:string,
			iso:string,
			isoNegative:string
		}>,
		script:string,
		decimalChar:string,
		groupChar:string,
		prigroupSize:number,
		secgroupSize:number,
		negativenumFmt:string,
		pctFmt:string,
		negativepctFmt:string,
		pctChar:string,
		roundingMode:string,
		exponential:string,
		digits:string
	}>
}}*/ ilib.data.localeinfo;
ilib.LocaleInfo.defaultInfo = ilib.LocaleInfo.defaultInfo || {
	"scripts": ["Latn"],
    "timezone": "Etc/UTC",
    "units": "metric",
    "calendar": "gregorian",
    "clock": "24",
    "currency": "USD",
    "firstDayOfWeek": 1,
    "numfmt": {
        "currencyFormats": {
            "common": "{s}{n}",
            "commonNegative": "{s}-{n}",
            "iso": "{s}{n}",
            "isoNegative": "{s}-{n}"
        },
        "script": "Latn",
        "decimalChar": ",",
        "groupChar": ".",
        "prigroupSize": 3,
        "secgroupSize": 0,
        "pctFmt": "{n}%",
        "negativepctFmt": "-{n}%",
        "pctChar": "%",
        "roundingMode": "halfdown",
        "exponential": "e",
        "digits": ""
    }
};

ilib.LocaleInfo.prototype = {
    /**
     * Return the name of the locale's language in English.
     * @returns {string} the name of the locale's language in English
     */
    getLanguageName: function () {
    	return this.info["language.name"];	
    },
    
    /**
     * Return the name of the locale's region in English. If the locale
     * has no region, this returns undefined.
     * 
     * @returns {string|undefined} the name of the locale's region in English
     */
    getRegionName: function () {
    	return this.info["region.name"];	
    },

    /**
	 * Return whether this locale commonly uses the 12- or the 24-hour clock.
	 *  
	 * @returns {string} "12" if the locale commonly uses a 12-hour clock, or "24"
	 * if the locale commonly uses a 24-hour clock. 
	 */
	getClock: function() {
		return this.info.clock;
	},

	/**
	 * Return the locale that this info object was created with.
	 * @returns {ilib.Locale} The locale spec of the locale used to construct this info instance
	 */
	getLocale: function () {
		return this.locale;
	},
	
	/**
	 * Return the name of the measuring system that is commonly used in the given locale.
	 * Valid values are "uscustomary", "imperial", and "metric".
	 * 
	 * @returns {string} The name of the measuring system commonly used in the locale
	 */
	getUnits: function () {
		return this.info.units;
	},
	
	/**
	 * Return the name of the calendar that is commonly used in the given locale.
	 * 
	 * @returns {string} The name of the calendar commonly used in the locale
	 */
	getCalendar: function () {
		return this.info.calendar;
	},
	
	/**
	 * Return the day of week that starts weeks in the current locale. Days are still
	 * numbered the standard way with 0 for Sunday through 6 for Saturday, but calendars 
	 * should be displayed and weeks calculated with the day of week returned from this 
	 * function as the first day of the week.
	 * 
	 * @returns {number} the day of the week that starts weeks in the current locale.
	 */
	getFirstDayOfWeek: function () {
		return this.info.firstDayOfWeek;
	},
	
	/**
	 * Return the default time zone for this locale. Many locales span across multiple
	 * time zones. In this case, the time zone with the largest population is chosen
	 * to represent the locale. This is obviously not that accurate, but then again,
	 * this method's return value should only be used as a default anyways.
	 * @returns {string} the default time zone for this locale.
	 */
	getTimeZone: function () {
		return this.info.timezone;
	},
	
	/**
	 * Return the decimal separator for formatted numbers in this locale.
	 * @returns {string} the decimal separator char
	 */
	getDecimalSeparator: function () {
		return this.info.numfmt.decimalChar;
	},
	
	/**
	 * Return the decimal separator for formatted numbers in this locale for native script.
	 * @returns {string} the decimal separator char
	 */
	getNativeDecimalSeparator: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.decimalChar) || this.info.numfmt.decimalChar;
	},
	
	/**
	 * Return the separator character used to separate groups of digits on the 
	 * integer side of the decimal character.
	 * @returns {string} the grouping separator char
	 */
	getGroupingSeparator: function () {
		return this.info.numfmt.groupChar;
	},

	/**
	 * Return the separator character used to separate groups of digits on the 
	 * integer side of the decimal character for the native script if present other than the default script.
	 * @returns {string} the grouping separator char
	 */
	getNativeGroupingSeparator: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.groupChar) || this.info.numfmt.groupChar;
	},
	
	/**
	 * Return the minimum number of digits grouped together on the integer side 
	 * for the first (primary) group. 
	 * In western European cultures, groupings are in 1000s, so the number of digits
	 * is 3. 
	 * @returns {number} the number of digits in a primary grouping, or 0 for no grouping
	 */
	getPrimaryGroupingDigits: function () {
		return (typeof(this.info.numfmt.prigroupSize) !== 'undefined' && this.info.numfmt.prigroupSize) || 0;
	},

	/**
	 * Return the minimum number of digits grouped together on the integer side
	 * for the second or more (secondary) group.<p>
	 *   
	 * In western European cultures, all groupings are by 1000s, so the secondary
	 * size should be 0 because there is no secondary size. In general, if this 
	 * method returns 0, then all groupings are of the primary size.<p> 
	 * 
	 * For some other cultures, the first grouping (primary)
	 * is 3 and any subsequent groupings (secondary) are two. So, 100000 would be
	 * written as: "1,00,000".
	 * 
	 * @returns {number} the number of digits in a secondary grouping, or 0 for no 
	 * secondary grouping. 
	 */
	getSecondaryGroupingDigits: function () {
		return this.info.numfmt.secgroupSize || 0;
	},

	/**
	 * Return the format template used to format percentages in this locale.
	 * @returns {string} the format template for formatting percentages
	 */
	getPercentageFormat: function () {
		return this.info.numfmt.pctFmt;
	},

	/**
	 * Return the format template used to format percentages in this locale
	 * with negative amounts.
	 * @returns {string} the format template for formatting percentages
	 */
	getNegativePercentageFormat: function () {
		return this.info.numfmt.negativepctFmt;
	},

	/**
	 * Return the symbol used for percentages in this locale.
	 * @returns {string} the symbol used for percentages in this locale
	 */
	getPercentageSymbol: function () {
		return this.info.numfmt.pctChar || "%";
	},

	/**
	 * Return the symbol used for exponential in this locale.
	 * @returns {string} the symbol used for exponential in this locale
	 */
	getExponential: function () {
		return this.info.numfmt.exponential;
	},

	/**
	 * Return the symbol used for exponential in this locale for native script.
	 * @returns {string} the symbol used for exponential in this locale for native script
	 */
	getNativeExponential: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.exponential) || this.info.numfmt.exponential;
	},

	/**
	 * Return the symbol used for percentages in this locale for native script.
	 * @returns {string} the symbol used for percentages in this locale for native script
	 */
	getNativePercentageSymbol: function () {
		return (this.info.native_numfmt && this.info.native_numfmt.pctChar) || this.info.numfmt.pctChar || "%";
	
	},
	/**
	 * Return the format template used to format negative numbers in this locale.
	 * @returns {string} the format template for formatting negative numbers
	 */
	getNegativeNumberFormat: function () { 
		return this.info.numfmt.negativenumFmt;
	},
	
	/**
	 * Return an object containing the format templates for formatting currencies
	 * in this locale. The object has a number of properties in it that each are
	 * a particular style of format. Normally, this contains a "common" and an "iso"
	 * style, but may contain others in the future.
	 * @returns {Object} an object containing the format templates for currencies
	 */
	getCurrencyFormats: function () {
		return this.info.numfmt.currencyFormats;
	},
	
	/**
	 * Return the currency that is legal in the locale, or which is most commonly 
	 * used in regular commerce.
	 * @returns {string} the ISO 4217 code for the currency of this locale
	 */
	getCurrency: function () {
		return this.info.currency;
	},
	
	/**
	 * Return a string that describes the style of digits used by this locale.
	 * Possible return values are:
	 * <ul>
	 * <li><i>western</i> - uses the regular western 10-based digits 0 through 9
	 * <li><i>optional</i> - native 10-based digits exist, but in modern usage,
	 * this locale most often uses western digits
	 * <li><i>native</i> - native 10-based native digits exist and are used
	 * regularly by this locale
	 * <li><i>custom</i> - uses native digits by default that are not 10-based
	 * </ul>
	 * @returns {string} string that describes the style of digits used in this locale
	 */
	getDigitsStyle: function () {
		if (this.info.numfmt.useNative) {
			return "native";
		}
		if (typeof(this.info.native_numfmt) !== 'undefined') {
			return "optional";
		}
		return "western";
	},
	
	/**
	 * Return the digits of the default script if they are defined.
	 * If not defined, the default should be the regular "Arabic numerals"
	 * used in the Latin script. (0-9)
	 * @returns {string|undefined} the digits used in the default script 
	 */
	getDigits: function () {
		return this.info.numfmt.digits;
	},
	
	/**
	 * Return the digits of the native script if they are defined. 
	 * @returns {string|undefined} the digits used in the default script 
	 */
	getNativeDigits: function () {
		return (this.info.numfmt.useNative && this.info.numfmt.digits) || (this.info.native_numfmt && this.info.native_numfmt.digits);
	},
	
	/**
	 * If this locale typically uses a different type of rounding for numeric
	 * formatting other than halfdown, especially for currency, then it can be 
	 * specified in the localeinfo. If the locale uses the default, then this 
	 * method returns undefined. The locale's rounding method overrides the 
	 * rounding method for the currency itself, which can sometimes shared 
	 * between various locales so it is less specific.
	 * @returns {string} the name of the rounding mode typically used in this
	 * locale, or "halfdown" if the locale does not override the default
	 */
	getRoundingMode: function () {
		return this.info.numfmt.roundingMode;
	},
	
	/**
	 * Return the default script used to write text in the language of this 
	 * locale. Text for most languages is written in only one script, but there
	 * are some languages where the text can be written in a number of scripts,
	 * depending on a variety of things such as the region, ethnicity, religion, 
	 * etc. of the author. This method returns the default script for the
	 * locale, in which the language is most commonly written.<p> 
	 * 
	 * The script is returned as an ISO 15924 4-letter code.
	 * 
	 * @returns {string} the ISO 15924 code for the default script used to write
	 * text in this locale 
	 */
	getDefaultScript: function() {
		return (this.info.scripts) ? this.info.scripts[0] : "Latn";
	},
	
	/**
	 * Return the script used for the current locale. If the current locale
	 * explicitly defines a script, then this script is returned. If not, then 
	 * the default script for the locale is returned.
	 * 
	 * @see ilib.LocaleInfo.getDefaultScript
	 * @returns {string} the ISO 15924 code for the script used to write
	 * text in this locale
	 */
	getScript: function() {
		return this.locale.getScript() || this.getDefaultScript(); 
	},
	
	/**
	 * Return an array of script codes which are used to write text in the current
	 * language. Text for most languages is written in only one script, but there
	 * are some languages where the text can be written in a number of scripts,
	 * depending on a variety of things such as the region, ethnicity, religion, 
	 * etc. of the author. This method returns an array of script codes in which 
	 * the language is commonly written.
	 * 
	 * @returns {Array.<string>} an array of ISO 15924 codes for the scripts used 
	 * to write text in this language
	 */
	getAllScripts: function() {
		return this.info.scripts || ["Latn"];
	}
};

/*
 * date.js - Represent a date in any calendar. This class is subclassed for each calendar.
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends ilibglobal.js localeinfo.js */

/**
 * @class
 * Construct a new date object. Each parameter is a numeric value, but its 
 * accepted range can vary depending on the subclass of this date. For example,
 * Gregorian months can be from 1 to 12, whereas months in the Hebrew calendar
 * can be from 1 to 13.<p>
 * 
 * Note that this really calls the newInstance factory method underneath in 
 * order to instantiate the correct subclass of ilib.Date.
 * 
 * Depends directive: !depends date.js
 * 
 * @constructor
 * @param {Object=} options The date components to initialize this date with
 */
ilib.Date = function(options) {
	if (!options || typeof(options.noinstance) === 'undefined') {
		return ilib.Date.newInstance(options);
	}
};

/**
 * Factory method to create a new instance of a date subclass.<p>
 * 
 * The options parameter can be an object that contains the following
 * properties:
 * 
 * <ul>
 * <li><i>type</i> - specify the type/calendar of the date desired. The
 * list of valid values changes depending on which calendars are 
 * defined. When assembling your iliball.js, include those date type 
 * you wish to use in your program or web page, and they will register 
 * themselves with this factory method. The "gregorian",
 * and "julian" calendars are all included by default, as they are the
 * standard calendars for much of the world. If not specified, the type
 * of the date returned is the one that is appropriate for the locale.
 * This property may also be given as "calendar" instead of "type".
 * </ul>
 * 
 * The options object is also passed down to the date constructor, and 
 * thus can contain the the properties as the date object being instantiated.
 * See the documentation for {@link ilib.Date.GregDate}, and other
 * subclasses for more details on other parameter that may be passed in.<p>
 * 
 * Please note that if you do not give the type parameter, this factory
 * method will create a date object that is appropriate for the calendar
 * that is most commonly used in the specified or current ilib locale. 
 * For example, in Thailand, the most common calendar is the Thai solar 
 * calendar. If the current locale is "th-TH" (Thai for Thailand) and you 
 * use this factory method to construct a new date without specifying the
 * type, it will automatically give you back an instance of 
 * {@link ilib.Date.ThaiSolarDate}. This is convenient because you do not 
 * need to know which locales use which types of dates. In fact, you 
 * should always use this factory method to make new date instances unless
 * you know that you specifically need a date in a particular calendar.<p>
 * 
 * Also note that when you pass in the date components such as year, month,
 * day, etc., these components should be appropriate for the given date
 * being instantiated. That is, in our Thai example in the previous
 * paragraph, the year and such should be given as a Thai solar year, not
 * the Gregorian year that you get from the Javascript Date class. In
 * order to initialize a date instance when you don't know what subclass
 * will be instantiated for the locale, use a parameter such as "unixtime" 
 * or "julianday" which are unambiguous and based on UTC time, instead of
 * the year/month/date date components. The date components for that UTC 
 * time will be calculated and the time zone offset will be automatically 
 * factored in.
 *  
 * @param {Object=} options options controlling the construction of this instance, or
 * undefined to use the default options
 * @return {ilib.Date} an instance of a calendar object of the appropriate type 
 */
ilib.Date.newInstance = function(options) {
	var locale = options && options.locale,
		type = options && (options.type || options.calendar),
		cons;

	if (!locale) {
		locale = new ilib.Locale();	// default locale
	}
	
	if (!type) {
		var info = new ilib.LocaleInfo(locale);
		type = info.getCalendar();
	}

	cons = ilib.Date._constructors[type];
	
	// pass the same options through to the constructor so the subclass
	// has the ability to do something with if it needs to
	return cons && new cons(options);
};

/**
 * Convert JavaScript Date objects and other types into native ilib Dates. This accepts any
 * string or number that can be translated by the JavaScript Date class,
 * (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse)
 * any JavaScript Date classed object, any ilib.Date subclass, an ilib.JulianDay object, an object
 * containing the normal options to initialize an ilib.Date instance, or null (will 
 * return null or undefined if input is null or undefined). Normal output is 
 * a standard native subclass of the ilib Date object as appropriate for the locale.
 * 
 * @static
 * @private
 * @param  {ilib.Date|Object|ilib.JulianDay|Date|string|number=} inDate The input date object, string or Number.
 * @param  {ilib.String|string=} timezone timezone to use if a new date object is created
 * @return {ilib.Date|null|undefined} an ilib.Date subclass equivalent to the given inDate
 */
ilib.Date._dateToIlib = function(inDate, timezone) {
	if (typeof(inDate) === 'undefined' || inDate === null) {
		return inDate;
	}
	if (inDate instanceof ilib.Date) {
		return inDate;
	}
	if (inDate instanceof Date) {
		return ilib.Date.newInstance({
			unixtime: inDate.getTime(),
			timezone: timezone
		});
	}
	if (inDate instanceof ilib.JulianDay) {
		return ilib.Date.newInstance({
			jd: inDate,
			timezone: timezone
		});
	}
	if (typeof(inDate) === 'number') {
		return ilib.Date.newInstance({
			unixtime: inDate,
			timezone: timezone
		});
	}
	if (typeof(inDate) === 'object') {
		return ilib.Date.newInstance(inDate);
	}
	if (typeof(inDate) === 'string') {
		inDate = new Date(inDate);
	}
	return ilib.Date.newInstance({
		unixtime: inDate.getTime(),
		timezone: timezone
	});
};

/* place for the subclasses to put their constructors so that the factory method
 * can find them. Do this to add your date after it's defined: 
 * ilib.Date._constructors["mytype"] = ilib.Date.MyTypeConstructor;
 */
ilib.Date._constructors = {};

ilib.Date.prototype = {
	getType: function() {
		return "ilib.Date";
	},
	
	/**
	 * Return the unix time equivalent to this date instance. Unix time is
	 * the number of milliseconds since midnight on Jan 1, 1970 UTC (Gregorian). This 
	 * method only returns a valid number for dates between midnight, 
	 * Jan 1, 1970 UTC (Gregorian) and Jan 19, 2038 at 3:14:07am UTC (Gregorian) when 
	 * the unix time runs out. If this instance encodes a date outside of that range, 
	 * this method will return -1. For date types that are not Gregorian, the point 
	 * in time represented by this date object will only give a return value if it
	 * is in the correct range in the Gregorian calendar as given previously.
	 * 
	 * @return {number} a number giving the unix time, or -1 if the date is outside the
	 * valid unix time range
	 */
	getTime: function() {
		return this.rd.getTime(); 
	},
	
	/**
	 * Set the time of this instance according to the given unix time. Unix time is
	 * the number of milliseconds since midnight on Jan 1, 1970.
	 * 
	 * @param {number} millis the unix time to set this date to in milliseconds 
	 */
	setTime: function(millis) {
		this.rd = this.newRd({
			unixtime: millis,
			cal: this.cal
		});
		this._calcDateComponents();
	},
	
	getDays: function() {
		return this.day;
	},
	getMonths: function() {
		return this.month;
	},
	getYears: function() {
		return this.year;
	},
	getHours: function() {
		return this.hour;
	},
	getMinutes: function() {
		return this.minute;
	},
	getSeconds: function() {
		return this.second;
	},
	getMilliseconds: function() {
		return this.millisecond;
	},

	setDays: function(day) {
		this.day = parseInt(day, 10) || 1;
		this.rd._setDateComponents(this);
	},
	setMonths: function(month) {
		this.month = parseInt(month, 10) || 1;
		this.rd._setDateComponents(this);
	},
	setYears: function(year) {
		this.year = parseInt(year, 10) || 0;
		this.rd._setDateComponents(this);
	},
	
	setHours: function(hour) {
		this.hour = parseInt(hour, 10) || 0;
		this.rd._setDateComponents(this);
	},
	setMinutes: function(minute) {
		this.minute = parseInt(minute, 10) || 0;
		this.rd._setDateComponents(this);
	},
	setSeconds: function(second) {
		this.second = parseInt(second, 10) || 0;
		this.rd._setDateComponents(this);
	},
	setMilliseconds: function(milli) {
		this.millisecond = parseInt(milli, 10) || 0;
		this.rd._setDateComponents(this);
	},
	
	/**
	 * Return a new date instance in the current calendar that represents the first instance 
	 * of the given day of the week before the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week before the current date that is being sought
	 * @return {ilib.Date} the date being sought
	 */
	before: function (dow) {
		return this.cal.newDateInstance({
			rd: this.rd.before(dow, this.offset),
			timezone: this.timezone
		});
	},
	
	/**
	 * Return a new date instance in the current calendar that represents the first instance 
	 * of the given day of the week after the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week after the current date that is being sought
	 * @return {ilib.Date} the date being sought
	 */
	after: function (dow) {
		return this.cal.newDateInstance({
			rd: this.rd.after(dow, this.offset),
			timezone: this.timezone
		});
	},

	/**
	 * Return a new Gregorian date instance that represents the first instance of the 
	 * given day of the week on or before the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week on or before the current date that is being sought
	 * @return {ilib.Date} the date being sought
	 */
	onOrBefore: function (dow) {
		return this.cal.newDateInstance({
			rd: this.rd.onOrBefore(dow, this.offset),
			timezone: this.timezone
		});
	},

	/**
	 * Return a new Gregorian date instance that represents the first instance of the 
	 * given day of the week on or after the current date. The day of the week is encoded
	 * as a number where 0 = Sunday, 1 = Monday, etc.
	 * 
	 * @param {number} dow the day of the week on or after the current date that is being sought
	 * @return {ilib.Date} the date being sought
	 */
	onOrAfter: function (dow) {
		return this.cal.newDateInstance({
			rd: this.rd.onOrAfter(dow, this.offset),
			timezone: this.timezone
		});
	},
	
	/**
	 * Return a Javascript Date object that is equivalent to this date
	 * object.
	 * 
	 * @return {Date|undefined} a javascript Date object
	 */
	getJSDate: function() {
		var unix = this.rd.getTime();
		return (unix === -1) ? undefined : new Date(unix); 
	},
	
	/**
	 * Return the Rata Die (fixed day) number of this date.
	 * 
	 * @protected
	 * @return {number} the rd date as a number
	 */
	getRataDie: function() {
		return this.rd.getRataDie();
	},
	
	/**
	 * Set the date components of this instance based on the given rd.
	 * @protected
	 * @param {number} rd the rata die date to set
	 */
	setRd: function (rd) {
		this.rd = this.newRd({
			rd: rd,
			cal: this.cal
		});
		this._calcDateComponents();
	},
	
	/**
	 * Return the Julian Day equivalent to this calendar date as a number.
	 * 
	 * @return {number} the julian date equivalent of this date
	 */
	getJulianDay: function() {
		return this.rd.getJulianDay();
	},
	
	/**
	 * Set the date of this instance using a Julian Day.
	 * @param {number|ilib.JulianDay} date the Julian Day to use to set this date
	 */
	setJulianDay: function (date) {
		this.rd = this.newRd({
			julianday: (typeof(date) === 'object') ? date.getDate() : date,
			cal: this.cal
		});
		this._calcDateComponents();
	},

	/**
	 * Return the time zone associated with this date, or 
	 * undefined if none was specified in the constructor.
	 * 
	 * @return {string|undefined} the name of the time zone for this date instance
	 */
	getTimeZone: function() {
		return this.timezone || "local";
	},
	
	/**
	 * Set the time zone associated with this date.
	 * @param {string=} tzName the name of the time zone to set into this date instance,
	 * or "undefined" to unset the time zone 
	 */
	setTimeZone: function (tzName) {
		if (!tzName || tzName === "") {
			// same as undefining it
			this.timezone = undefined;
			this.tz = undefined;
		} else if (typeof(tzName) === 'string') {
			this.timezone = tzName;
			this.tz = undefined;
			// assuming the same UTC time, but a new time zone, now we have to 
			// recalculate what the date components are
			this._calcDateComponents();
		}
	},
	
	/**
	 * Return the rd number of the first Sunday of the given ISO year.
	 * @protected
	 * @param {number} year the year for which the first Sunday is being sought
	 * @return {number} the rd of the first Sunday of the ISO year
	 */
	firstSunday: function (year) {
		var firstDay = this.newRd({
			year: year,
			month: 1,
			day: 1,
			hour: 0,
			minute: 0,
			second: 0,
			millisecond: 0,
			cal: this.cal
		});
		var firstThu = this.newRd({
			rd: firstDay.onOrAfter(4),
			cal: this.cal
		});
		return firstThu.before(0);
	},
	
	/**
	 * Return the ISO 8601 week number in the current year for the current date. The week
	 * number ranges from 0 to 55, as some years have 55 weeks assigned to them in some
	 * calendars.
	 * 
	 * @return {number} the week number for the current date
	 */
	getWeekOfYear: function() {
		var rd = Math.floor(this.rd.getRataDie());
		var year = this._calcYear(rd + this.offset);
		var yearStart = this.firstSunday(year);
		var nextYear;
		
		// if we have a January date, it may be in this ISO year or the previous year
		if (rd < yearStart) {
			yearStart = this.firstSunday(year-1);
		} else {
			// if we have a late December date, it may be in this ISO year, or the next year
			nextYear = this.firstSunday(year+1);
			if (rd >= nextYear) {
				yearStart = nextYear;
			}
		}
		
		return Math.floor((rd-yearStart)/7) + 1;
	},
	
	/**
	 * Return the ordinal number of the week within the month. The first week of a month is
	 * the first one that contains 4 or more days in that month. If any days precede this
	 * first week, they are marked as being in week 0. This function returns values from 0
	 * through 6.<p>
	 * 
	 * The locale is a required parameter because different locales that use the same 
	 * Gregorian calendar consider different days of the week to be the beginning of
	 * the week. This can affect the week of the month in which some days are located.
	 * 
	 * @param {ilib.Locale|string} locale the locale or locale spec to use when figuring out 
	 * the first day of the week
	 * @return {number} the ordinal number of the week within the current month
	 */
	getWeekOfMonth: function(locale) {
		var li = new ilib.LocaleInfo(locale);
		
		var first = this.newRd({
			year: this._calcYear(this.rd.getRataDie()+this.offset),
			month: this.month,
			day: 1,
			hour: 0,
			minute: 0,
			second: 0,
			millisecond: 0,
			cal: this.cal
		});
		var weekStart = first.onOrAfter(li.getFirstDayOfWeek());
		
		if (weekStart - first.getRataDie() > 3) {
			// if the first week has 4 or more days in it of the current month, then consider
			// that week 1. Otherwise, it is week 0. To make it week 1, move the week start
			// one week earlier.
			weekStart -= 7;
		}
		return Math.floor((this.rd.getRataDie() - weekStart) / 7) + 1;
	}
};

/*
 * util/utils.js - Core utility routines
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * If Function.prototype.bind does not exist in this JS engine, this
 * function reimplements it in terms of older JS functions.
 * bind() doesn't exist in many older browsers.
 * 
 * @param {Object} scope object that the method should operate on
 * @param {function(...)} method method to call
 * @return {function(...)|undefined} function that calls the given method 
 * in the given scope with all of its arguments properly attached, or
 * undefined if there was a problem with the arguments
 */
ilib.bind = function(scope, method/*, bound arguments*/){
	if (!scope || !method) {
		return undefined;
	}
	
	/** @protected 
	 * @param {Arguments} inArrayLike
	 * @param {number=} inOffset
	 */
	function cloneArray(inArrayLike, inOffset) {
		var arr = [];
		for(var i = inOffset || 0, l = inArrayLike.length; i<l; i++){
			arr.push(inArrayLike[i]);
		}
		return arr;
	}

	if (typeof(method) === 'function') {
		var func, args = cloneArray(arguments, 2);
		if (typeof(method.bind) === 'function') {
			func = method.bind.apply(method, [scope].concat(args));
		} else {
			func = function() {
				var nargs = cloneArray(arguments);
				// invoke with collected args
				return method.apply(scope, args.concat(nargs));
			};
		}
		return func;
	}
	return undefined;
};

/**
 * Do a proper modulo function. The Javascript % operator will give the truncated
 * division algorithm, but for calendrical calculations, we need the Euclidean
 * division algorithm where the remainder of any division, whether the dividend
 * is negative or not, is always a positive number between 0 and the modulus.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {number} dividend the number being divided
 * @param {number} modulus the number dividing the dividend. This should always be a positive number.
 * @return the remainder of dividing the dividend by the modulus.  
 */
ilib.mod = function (dividend, modulus) {
	if (modulus == 0) {
		return 0;
	}
	var x = dividend % modulus;
	return (x < 0) ? x + modulus : x;
};

/**
 * Merge the properties of object2 into object1 in a deep manner and return a merged
 * object. If the property exists in both objects, the value in object2 will overwrite 
 * the value in object1. If a property exists in object1, but not in object2, its value
 * will not be touched. If a property exists in object2, but not in object1, it will be 
 * added to the merged result.<p>
 * 
 * Name1 and name2 are for creating debug output only. They are not necessary.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {*} object1 the object to merge into
 * @param {*} object2 the object to merge
 * @param {boolean=} replace if true, replace the array elements in object1 with those in object2.
 * If false, concatenate array elements in object1 with items in object2.
 * @param {string=} name1 name of the object being merged into
 * @param {string=} name2 name of the object being merged in
 * @return {Object} the merged object
 */
ilib.merge = function (object1, object2, replace, name1, name2) {
	var prop = undefined,
		newObj = {};
	for (prop in object1) {
		if (prop && typeof(object1[prop]) !== 'undefined') {
			newObj[prop] = object1[prop];
		}
	}
	for (prop in object2) {
		if (prop && typeof(object2[prop]) !== 'undefined') {
			if (object1[prop] instanceof Array && object2[prop] instanceof Array) {
				if (typeof(replace) !== 'boolean' || !replace) {
					newObj[prop] = new Array();
					newObj[prop] = newObj[prop].concat(object1[prop]);
					newObj[prop] = newObj[prop].concat(object2[prop]);
				} else {
					newObj[prop] = object2[prop];
				}
			} else if (typeof(object1[prop]) === 'object' && typeof(object2[prop]) === 'object') {
				newObj[prop] = ilib.merge(object1[prop], object2[prop], replace);
			} else {
				// for debugging. Used to determine whether or not json files are overriding their parents unnecessarily
				if (name1 && name2 && newObj[prop] == object2[prop]) {
					console.log("Property " + prop + " in " + name1 + " is being overridden by the same value in " + name2);
				}
				newObj[prop] = object2[prop];
			}
		}
	}
	return newObj;
};

/**
 * Find and merge all the locale data for a particular prefix in the given locale
 * and return it as a single javascript object. This merges the data in the 
 * correct order:
 * 
 * <ol>
 * <li>shared data (usually English)
 * <li>data for language
 * <li>data for language + region
 * <li>data for language + region + script
 * <li>data for language + region + script + variant
 * </ol>
 * 
 * It is okay for any of the above to be missing. This function will just skip the 
 * missing data. However, if everything except the shared data is missing, this 
 * function returns undefined, allowing the caller to go and dynamically load the
 * data instead.
 *  
 * @param {string} prefix prefix under ilib.data of the data to merge
 * @param {ilib.Locale} locale locale of the data being sought
 * @param {boolean=} replaceArrays if true, replace the array elements in object1 with those in object2.
 * If false, concatenate array elements in object1 with items in object2.
 * @param {boolean=} returnOne if true, only return the most locale-specific data. If false,
 * merge all the relevant locale data together.
 * @return {Object?} the merged locale data
 */
ilib.mergeLocData = function (prefix, locale, replaceArrays, returnOne) {
	var data = undefined;
	var loc = locale || new ilib.Locale();
	var foundLocaleData = false;
	var property = prefix;
	var mostSpecific;

	data = ilib.data[prefix] || {};

	mostSpecific = data;

	if (loc.getLanguage()) {
		property = prefix + '_' + loc.getLanguage();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}
	
	if (loc.getRegion()) {
		property = prefix + '_' + loc.getRegion();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}
	
	if (loc.getLanguage()) {
		property = prefix + '_' + loc.getLanguage();
		
		if (loc.getScript()) {
			property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = ilib.merge(data, ilib.data[property], replaceArrays);
				mostSpecific = ilib.data[property];
			}
		}
		
		if (loc.getRegion()) {
			property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion();
			if (ilib.data[property]) {
				foundLocaleData = true;
				data = ilib.merge(data, ilib.data[property], replaceArrays);
				mostSpecific = ilib.data[property];
			}
		}		
	}
	
	if (loc.getRegion() && loc.getVariant()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getVariant();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}

	if (loc.getLanguage() && loc.getScript() && loc.getRegion()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}

	if (loc.getLanguage() && loc.getRegion() && loc.getVariant()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getRegion() + '_' + loc.getVariant();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}

	if (loc.getLanguage() && loc.getScript() && loc.getRegion() && loc.getVariant()) {
		property = prefix + '_' + loc.getLanguage() + '_' + loc.getScript() + '_' + loc.getRegion() + '_' + loc.getVariant();
		if (ilib.data[property]) {
			foundLocaleData = true;
			data = ilib.merge(data, ilib.data[property], replaceArrays);
			mostSpecific = ilib.data[property];
		}
	}
	
	return foundLocaleData ? (returnOne ? mostSpecific : data) : undefined;
};

/**
 * Return an array of relative path names for the
 * files that represent the data for the given locale.<p>
 * 
 * Note that to prevent the situation where a directory for
 * a language exists next to the directory for a region where
 * the language code and region code differ only by case, the 
 * plain region directories are located under the special 
 * "undefined" language directory which has the ISO code "und".
 * The reason is that some platforms have case-insensitive 
 * file systems, and you cannot have 2 directories with the 
 * same name which only differ by case. For example, "es" is
 * the ISO 639 code for the language "Spanish" and "ES" is
 * the ISO 3166 code for the region "Spain", so both the
 * directories cannot exist underneath "locale". The region
 * therefore will be loaded from "und/ES" instead.<p>  
 * 
 * <h4>Variations</h4>
 * 
 * With only language and region specified, the following
 * sequence of paths will be generated:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/region
 * </pre>
 * 
 * With only language and script specified:<p>
 * 
 * <pre>
 * language
 * language/script
 * </pre>
 * 
 * With only script and region specified:<p>
 * 
 * <pre>
 * und/region  
 * </pre>
 * 
 * With only region and variant specified:<p>
 * 
 * <pre>
 * und/region
 * region/variant
 * </pre>
 * 
 * With only language, script, and region specified:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/script
 * language/region
 * language/script/region
 * </pre>
 * 
 * With only language, region, and variant specified:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/region
 * region/variant
 * language/region/variant
 * </pre>
 * 
 * With all parts specified:<p>
 * 
 * <pre>
 * language
 * und/region
 * language/script
 * language/region
 * region/variant
 * language/script/region
 * language/region/variant
 * language/script/region/variant
 * </pre>
 * 
 * @param {ilib.Locale} locale load the files for this locale
 * @param {string?} name the file name of each file to load without
 * any path
 * @return {Array.<string>} An array of relative path names
 * for the files that contain the locale data
 */
ilib.getLocFiles = function(locale, name) {
	var dir = "";
	var files = [];
	var filename = name || "resources.json";
	var loc = locale || new ilib.Locale();
	
	var language = loc.getLanguage();
	var region = loc.getRegion();
	var script = loc.getScript();
	var variant = loc.getVariant();
	
	files.push(filename); // generic shared file
	
	if (language) {
		dir = language + "/";
		files.push(dir + filename);
	}
	
	if (region) {
		dir = "und/" + region + "/";
		files.push(dir + filename);
	}
	
	if (language) {
		if (script) {
			dir = language + "/" + script + "/";
			files.push(dir + filename);
		}
		if (region) {
			dir = language + "/" + region + "/";
			files.push(dir + filename);
		}
	}
	
	if (region && variant) {
		dir = "und/" + region + "/" + variant + "/";
		files.push(dir + filename);
	}

	if (language && script && region) {
		dir = language + "/" + script + "/" + region + "/";
		files.push(dir + filename);
	}

	if (language && region && variant) {
		dir = language + "/" + region + "/" + variant + "/";
		files.push(dir + filename);
	}

	if (language && script && region && variant) {
		dir = language + "/" + script + "/" + region + "/" + variant + "/";
		files.push(dir + filename);
	}
	
	return files;
};

/**
 * Return true if the given object has no properties.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @param {Object} obj the object to check
 * @return {boolean} true if the given object has no properties, false otherwise
 */
ilib.isEmpty = function (obj) {
	var prop = undefined;
	
	if (!obj) {
		return true;
	}
	
	for (prop in obj) {
		if (prop && typeof(obj[prop]) !== 'undefined') {
			return false;
		}
	}
	return true;
};


/**
 * @private
 */
ilib.hashCode = function(obj) {
	var hash = 0;
	
	function addHash(hash, newValue) {
		// co-prime numbers creates a nicely distributed hash
		hash *= 65543;
		hash += newValue;
		hash %= 2147483647; 
		return hash;
	}
	
	function stringHash(str) {
		var hash = 0;
		for (var i = 0; i < str.length; i++) {
			hash = addHash(hash, str.charCodeAt(i));
		}
		return hash;
	}
	
	switch (typeof(obj)) {
		case 'undefined':
			hash = 0;
			break;
		case 'string':
			hash = stringHash(obj);
			break;
		case 'function':
		case 'number':
		case 'xml':
			hash = stringHash(String(obj));
			break;
		case 'boolean':
			hash = obj ? 1 : 0;
			break;
		case 'object':
			var props = [];
			for (var p in obj) {
				if (obj.hasOwnProperty(p)) {
					props.push(p);
				}
			}
			// make sure the order of the properties doesn't matter
			props.sort();
			for (var i = 0; i < props.length; i++) {
				hash = addHash(hash, stringHash(props[i]));
				hash = addHash(hash, ilib.hashCode(obj[props[i]]));
			}
			break;
	}
	
	return hash;
};


/**
 * Load data using the new loader object or via the old function callback.
 * @private
 */
ilib._callLoadData = function (files, sync, params, callback) {
	// console.log("ilib._callLoadData called");
	if (typeof(ilib._load) === 'function') {
		// console.log("ilib._callLoadData: calling as a regular function");
		return ilib._load(files, sync, params, callback);
	} else if (typeof(ilib._load) === 'object' && ilib._load instanceof ilib.Loader) {
		// console.log("ilib._callLoadData: calling as an object");
		return ilib._load.loadFiles(files, sync, params, callback);
	}
	
	// console.log("ilib._callLoadData: not calling. Type is " + typeof(ilib._load) + " and instanceof says " + (ilib._load instanceof ilib.Loader));
	return undefined;
};

/**
 * Find locale data or load it in. If the data with the given name is preassembled, it will
 * find the data in ilib.data. If the data is not preassembled but there is a loader function,
 * this function will call it to load the data. Otherwise, the callback will be called with
 * undefined as the data. This function will create a cache under the given class object.
 * If data was successfully loaded, it will be set into the cache so that future access to 
 * the same data for the same locale is much quicker.<p>
 * 
 * The parameters can specify any of the following properties:<p>
 * 
 * <ul>
 * <li><i>name</i> - String. The name of the file being loaded. Default: resources.json
 * <li><i>object</i> - Object. The class attempting to load data. The cache is stored inside of here.
 * <li><i>locale</i> - ilib.Locale. The locale for which data is loaded. Default is the current locale.
 * <li><i>nonlocale</i> - boolean. If true, the data being loaded is not locale-specific.
 * <li><i>type</i> - String. Type of file to load. This can be "json" or "other" type. Default: "json" 
 * <li><i>replace</i> - boolean. When merging json objects, this parameter controls whether to merge arrays
 * or have arrays replace each other. If true, arrays in child objects replace the arrays in parent 
 * objects. When false, the arrays in child objects are concatenated with the arrays in parent objects.  
 * <li><i>loadParams</i> - Object. An object with parameters to pass to the loader function
 * <li><i>sync</i> - boolean. Whether or not to load the data synchronously
 * <li><i>callback</i> - function(?)=. callback Call back function to call when the data is available.
 * Data is not returned from this method, so a callback function is mandatory.
 * </ul>
 * 
 * @param {Object} params Parameters configuring how to load the files (see above)
 */
ilib.loadData = function(params) {
	var name = "resources.json",
		object = undefined, 
		locale = new ilib.Locale(ilib.getLocale()), 
		sync = false, 
		type = undefined,
		loadParams = {},
		callback = undefined,
		nonlocale = false,
		replace = false,
		basename;
	
	if (!params || typeof(params.callback) !== 'function') {
		return;
	}

	if (params.name) {
		name = params.name;
	}
	if (params.object) {
		object = params.object;
	}
	if (params.locale) {
		locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
	}			
	if (params.type) {
		type = params.type;
	}
	if (params.loadParams) {
		loadParams = params.loadParams;
	}
	if (params.sync) {
		sync = params.sync;
	}
	if (params.nonlocale) {
		nonlocale = !!params.nonlocale;
	}
	if (typeof(params.replace) === 'boolean') {
		replace = params.replace;
	}
	
	callback = params.callback;
	
	if (object && !object.cache) {
		object.cache = {};
	}
	
	if (!type) {
		var dot = name.lastIndexOf(".");
		type = (dot !== -1) ? name.substring(dot+1) : "text";
	}

	var spec = ((!nonlocale && locale.getSpec().replace(/-/g, '_')) || "root") + "," + name + "," + String(ilib.hashCode(loadParams));
	if (!object || typeof(object.cache[spec]) === 'undefined') {
		var data, returnOne = (loadParams && loadParams.returnOne);
		
		if (type === "json") {
			// console.log("type is json");
			basename = name.substring(0, name.lastIndexOf("."));
			if (nonlocale) {
				basename = basename.replace(/\//g, '.').replace(/[\\\+\-]/g, "_");
				data = ilib.data[basename];
			} else {
				data = ilib.mergeLocData(basename, locale, replace, returnOne);
			}
			if (data) {
				// console.log("found assembled data");
				if (object) {
					object.cache[spec] = data;
				}
				callback(data);
				return;
			}
		}
		
		// console.log("ilib._load is " + typeof(ilib._load));
		if (typeof(ilib._load) !== 'undefined') {
			// the data is not preassembled, so attempt to load it dynamically
			var files = nonlocale ? [ name || "resources.json" ] : ilib.getLocFiles(locale, name);
			if (type !== "json") {
				loadParams.returnOne = true;
			}
			
			ilib._callLoadData(files, sync, loadParams, ilib.bind(this, function(arr) {
				if (type === "json") {
					data = ilib.data[basename] || {};
					for (var i = 0; i < arr.length; i++) {
						if (typeof(arr[i]) !== 'undefined') {
							data = loadParams.returnOne ? arr[i] : ilib.merge(data, arr[i], replace);
						}
					}
					
					if (object) {
						object.cache[spec] = data;
					}
					callback(data);
				} else {
					var i = arr.length-1; 
					while (i > -1 && !arr[i]) {
						i--;
					}
					if (i > -1) {
						if (object) {
							object.cache[spec] = arr[i];
						}
						callback(arr[i]);
					} else {
						callback(undefined);
					}
				}
			}));
		} else {
			// no data other than the generic shared data
			if (type === "json") {
				data = ilib.data[basename];
			}
			if (object && data) {
				object.cache[spec] = data;
			}
			callback(data);
		}
	} else {
		callback(object.cache[spec]);
	}
};

ilib.data.plurals_af = {"one":{"is":["n",1]}};
ilib.data.plurals_ak = {"one":{"inrange":["n",[[0,1]]]}};
ilib.data.plurals_am = {"one":{"inrange":["n",[[0,1]]]}};
ilib.data.plurals_ar = {"few":{"inrange":[{"mod":["n",100]},[[3,10]]]},"many":{"inrange":[{"mod":["n",100]},[[11,99]]]},"one":{"is":["n",1]},"two":{"is":["n",2]},"zero":{"is":["n",0]}};
ilib.data.plurals_asa = {"one":{"is":["n",1]}};
ilib.data.plurals_be = {"few":{"and":[{"inrange":[{"mod":["n",10]},[[2,4]]]},{"notin":[{"mod":["n",100]},[[12,14]]]}]},"many":{"or":[{"or":[{"is":[{"mod":["n",10]},0]},{"inrange":[{"mod":["n",10]},[[5,9]]]}]},{"inrange":[{"mod":["n",100]},[[11,14]]]}]},"one":{"and":[{"is":[{"mod":["n",10]},1]},{"isnot":[{"mod":["n",100]},11]}]}};
ilib.data.plurals_bem = {"one":{"is":["n",1]}};
ilib.data.plurals_bg = {"one":{"is":["n",1]}};
ilib.data.plurals_bh = {"one":{"inrange":["n",[[0,1]]]}};
ilib.data.plurals_bn = {"one":{"is":["n",1]}};
ilib.data.plurals_br = {"few":{"and":[{"inrange":[{"mod":["n",10]},[[3,4],9]]},{"notin":[{"mod":["n",100]},[[10,19],[70,79],[90,99]]]}]},"many":{"and":[{"isnot":["n",0]},{"is":[{"mod":["n",1000000]},0]}]},"one":{"and":[{"is":[{"mod":["n",10]},1]},{"notin":[{"mod":["n",100]},[11,71,91]]}]},"two":{"and":[{"is":[{"mod":["n",10]},2]},{"notin":[{"mod":["n",100]},[12,72,92]]}]}};
ilib.data.plurals_bs = {"few":{"and":[{"inrange":[{"mod":["n",10]},[[2,4]]]},{"notin":[{"mod":["n",100]},[[12,14]]]}]},"many":{"or":[{"or":[{"is":[{"mod":["n",10]},0]},{"inrange":[{"mod":["n",10]},[[5,9]]]}]},{"inrange":[{"mod":["n",100]},[[11,14]]]}]},"one":{"and":[{"is":[{"mod":["n",10]},1]},{"isnot":[{"mod":["n",100]},11]}]}};
ilib.data.plurals_ca = {"one":{"is":["n",1]}};
ilib.data.plurals_cs = {"few":{"inrange":["n",[[2,4]]]},"one":{"is":["n",1]}};
ilib.data.plurals_da = {"one":{"is":["n",1]}};
ilib.data.plurals_de = {"one":{"is":["n",1]}};
ilib.data.plurals_el = {"one":{"is":["n",1]}};
ilib.data.plurals_en = {"one":{"is":["n",1]}};
ilib.data.plurals_es = {"one":{"is":["n",1]}};
ilib.data.plurals_et = {"one":{"is":["n",1]}};
ilib.data.plurals_ff = {"one":{"and":[{"within":["n",[[0,2]]]},{"isnot":["n",2]}]}};
ilib.data.plurals_fi = {"one":{"is":["n",1]}};
ilib.data.plurals_fr = {"one":{"and":[{"within":["n",[[0,2]]]},{"isnot":["n",2]}]}};
ilib.data.plurals_ga = {"few":{"inrange":["n",[[3,6]]]},"many":{"inrange":["n",[[7,10]]]},"one":{"is":["n",1]},"two":{"is":["n",2]}};
ilib.data.plurals_gl = {"one":{"is":["n",1]}};
ilib.data.plurals_ha = {"one":{"is":["n",1]}};
ilib.data.plurals_he = {"many":{"and":[{"isnot":["n",0]},{"is":[{"mod":["n",10]},0]}]},"one":{"is":["n",1]},"two":{"is":["n",2]}};
ilib.data.plurals_hi = {"one":{"inrange":["n",[0,1]]}};
ilib.data.plurals_hr = {"few":{"and":[{"inrange":[{"mod":["n",10]},[[2,4]]]},{"notin":[{"mod":["n",100]},[[12,14]]]}]},"many":{"or":[{"or":[{"is":[{"mod":["n",10]},0]},{"inrange":[{"mod":["n",10]},[[5,9]]]}]},{"inrange":[{"mod":["n",100]},[[11,14]]]}]},"one":{"and":[{"is":[{"mod":["n",10]},1]},{"isnot":[{"mod":["n",100]},11]}]}};
ilib.data.plurals_it = {"one":{"is":["n",1]}};
ilib.data.plurals_kk = {"one":{"is":["n",1]}};
ilib.data.plurals_ks = {"one":{"is":["n",1]}};
ilib.data.plurals_ku = {"one":{"is":["n",1]}};
ilib.data.plurals_lg = {"one":{"is":["n",1]}};
ilib.data.plurals_ln = {"one":{"inrange":["n",[[0,1]]]}};
ilib.data.plurals_lt = {"few":{"and":[{"inrange":[{"mod":["n",10]},[[2,9]]]},{"notin":[{"mod":["n",100]},[[11,19]]]}]},"one":{"and":[{"is":[{"mod":["n",10]},1]},{"notin":[{"mod":["n",100]},[[11,19]]]}]}};
ilib.data.plurals_lv = {"one":{"and":[{"is":[{"mod":["n",10]},1]},{"isnot":[{"mod":["n",100]},11]}]},"zero":{"is":["n",0]}};
ilib.data.plurals_mk = {"one":{"and":[{"is":[{"mod":["n",10]},1]},{"isnot":["n",11]}]}};
ilib.data.plurals_ml = {"one":{"is":["n",1]}};
ilib.data.plurals_mn = {"one":{"is":["n",1]}};
ilib.data.plurals_mr = {"one":{"is":["n",1]}};
ilib.data.plurals_nb = {"one":{"is":["n",1]}};
ilib.data.plurals_ne = {"one":{"is":["n",1]}};
ilib.data.plurals_nl = {"one":{"is":["n",1]}};
ilib.data.plurals_no = {"one":{"is":["n",1]}};
ilib.data.plurals_om = {"one":{"is":["n",1]}};
ilib.data.plurals_or = {"one":{"is":["n",1]}};
ilib.data.plurals_os = {"one":{"is":["n",1]}};
ilib.data.plurals_pa = {"one":{"is":["n",1]}};
ilib.data.plurals_pl = {"few":{"and":[{"inrange":[{"mod":["n",10]},[[2,4]]]},{"notin":[{"mod":["n",100]},[[12,14]]]}]},"one":{"is":["n",1]},"many":{"or":[{"and":[{"isnot":["n",1]},{"inrange":[{"mod":["n",10]},[[0,1]]]}]},{"or":[{"inrange":[{"mod":["n",10]},[[5,9]]]},{"inrange":[{"mod":["n",100]},[[12,14]]]}]}]}};
ilib.data.plurals_pt = {"one":{"is":["n",1]}};
ilib.data.plurals_ro = {"few":{"or":[{"is":["n",0]},{"and":[{"isnot":["n",1]},{"inrange":[{"mod":["n",100]},[[1,19]]]}]}]},"one":{"is":["n",1]}};
ilib.data.plurals_ru = {"few":{"and":[{"inrange":[{"mod":["n",10]},[[2,4]]]},{"notin":[{"mod":["n",100]},[[12,14]]]}]},"many":{"or":[{"or":[{"is":[{"mod":["n",10]},0]},{"inrange":[{"mod":["n",10]},[[5,9]]]}]},{"inrange":[{"mod":["n",100]},[[11,14]]]}]},"one":{"and":[{"is":[{"mod":["n",10]},1]},{"isnot":[{"mod":["n",100]},11]}]}};
ilib.data.plurals_sk = {"few":{"inrange":["n",[[2,4]]]},"one":{"is":["n",1]}};
ilib.data.plurals_sl = {"few":{"inrange":[{"mod":["n",100]},[[3,4]]]},"one":{"is":[{"mod":["n",100]},1]},"two":{"is":[{"mod":["n",100]},2]}};
ilib.data.plurals_so = {"one":{"is":["n",1]}};
ilib.data.plurals_sq = {"one":{"is":["n",1]}};
ilib.data.plurals_sr = {"few":{"and":[{"inrange":[{"mod":["n",10]},[[2,4]]]},{"notin":[{"mod":["n",100]},[[12,14]]]}]},"many":{"or":[{"or":[{"is":[{"mod":["n",10]},0]},{"inrange":[{"mod":["n",10]},[[5,9]]]}]},{"inrange":[{"mod":["n",100]},[[11,14]]]}]},"one":{"and":[{"is":[{"mod":["n",10]},1]},{"isnot":[{"mod":["n",100]},11]}]}};
ilib.data.plurals_ss = {"one":{"is":["n",1]}};
ilib.data.plurals_st = {"one":{"is":["n",1]}};
ilib.data.plurals_sv = {"one":{"is":["n",1]}};
ilib.data.plurals_sw = {"one":{"is":["n",1]}};
ilib.data.plurals_ta = {"one":{"is":["n",1]}};
ilib.data.plurals_te = {"one":{"is":["n",1]}};
ilib.data.plurals_uk = {"few":{"and":[{"inrange":[{"mod":["n",10]},[[2,4]]]},{"notin":[{"mod":["n",100]},[[12,14]]]}]},"many":{"or":[{"or":[{"is":[{"mod":["n",10]},0]},{"inrange":[{"mod":["n",10]},[[5,9]]]}]},{"inrange":[{"mod":["n",100]},[[11,14]]]}]},"one":{"and":[{"is":[{"mod":["n",10]},1]},{"isnot":[{"mod":["n",100]},11]}]}};
ilib.data.plurals_ur = {"one":{"is":["n",1]}};
ilib.data.plurals_zu = {"one":{"is":["n",1]}};
/*
 * strings.js - ilib string subclass definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js util/utils.js locale.js

// !data plurals

/**
 * @class
 * Create a new string instance. This string inherits from the Javascript
 * String class, and adds two more methods, fmt and fmtChoice. It can be
 * used anywhere that a normal Javascript string is used. The formatting
 * methods are of course most useful when localizing strings in an app
 * or web site in combination with the ilib.ResBundle class.<p>
 * 
 * Depends directive: !depends strings.js
 * 
 * @constructor
 * @param {string|ilib.String=} string initialize this instance with this string 
 */
ilib.String = function (string) {
	if (typeof(string) === 'object') {
		if (string instanceof ilib.String) {
			this.str = string.str;	
		} else {
			this.str = string.toString();
		}
	} else if (typeof(string) === 'string') {
		this.str = new String(string);
	} else {
		this.str = "";
	}
	this.length = this.str.length;
	this.cpLength = -1;
	this.localeSpec = ilib.getLocale();
};

/**
 * Return true if the given character is a Unicode surrogate character,
 * either high or low.
 * 
 * @private
 * @static
 * @param {string} ch character to check
 * @return {boolean} true if the character is a surrogate
 */
ilib.String._isSurrogate = function (ch) {
	var n = ch.charCodeAt(0);
	return ((n >= 0xDC00 && n <= 0xDFFF) || (n >= 0xD800 && n <= 0xDBFF));
};

/**
 * Convert a UCS-4 code point to a Javascript string. The codepoint can be any valid 
 * UCS-4 Unicode character, including supplementary characters. Standard Javascript
 * only supports supplementary characters using the UTF-16 encoding, which has 
 * values in the range 0x0000-0xFFFF. String.fromCharCode() will only
 * give you a string containing 16-bit characters, and will not properly convert 
 * the code point for a supplementary character (which has a value > 0xFFFF) into 
 * two UTF-16 surrogate characters. Instead, it will just just give you whatever
 * single character happens to be the same as your code point modulo 0x10000, which
 * is almost never what you want.<p> 
 * 
 * Similarly, that means if you use String.charCodeAt()
 * you will only retrieve a 16-bit value, which may possibly be a single
 * surrogate character that is part of a surrogate pair representing a character
 * in the supplementary plane. It will not give you a code point. Use 
 * ilib.String.codePointAt() to access code points in a string, or use 
 * an iterator to walk through the code points in a string. 
 * 
 * @static
 * @param {number} codepoint UCS-4 code point to convert to a character
 * @return {string} a string containing the character represented by the codepoint
 */
ilib.String.fromCodePoint = function (codepoint) {
	if (codepoint < 0x10000) {
		return String.fromCharCode(codepoint);
	} else {
		var high = Math.floor(codepoint / 0x10000) - 1;
		var low = codepoint & 0xFFFF;
		
		return String.fromCharCode(0xD800 | ((high & 0x000F) << 6) |  ((low & 0xFC00) >> 10)) +
			String.fromCharCode(0xDC00 | (low & 0x3FF));
	}
};

/**
 * Load the plural the definitions of plurals for the locale.
 * @param {ilib.Locale|string} locale
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.String.loadPlurals = function (sync, locale, loadParams, onLoad) {
	var loc;
	if (locale) {
		loc = (typeof(locale) === 'string') ? new ilib.Locale(locale) : locale;
	} else {
		loc = new ilib.Locale(ilib.getLocale());
	}
	var spec = loc.getLanguage();
	if (!ilib.data["plurals_" + spec]) {
		ilib.loadData({
			name: "plurals.json",
			object: ilib.String,
			locale: loc,
			sync: sync,
			loadParams: loadParams,
			callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(plurals) {
				if (!plurals) {
					ilib.String.cache[spec] = {};
				}
				ilib.data["plurals_" + spec] = plurals || {};
				if (onLoad && typeof(onLoad) === 'function') {
					onLoad(ilib.data["plurals_" + spec]);
				}
			})
		});
	} else {
		if (onLoad && typeof(onLoad) === 'function') {
			onLoad(ilib.data["plurals_" + spec]);
		}
	}
};

/**
 * @private
 * @static
 */
ilib.String._fncs = {
	/**
	 * @private
	 * @param {Object} obj
	 * @return {string|undefined}
	 */
	firstProp: function (obj) {
		for (var p in obj) {
			if (p && obj[p]) {
				return p;
			}
		}
		return undefined; // should never get here
	},
	
	/**
	 * @private
	 * @param {Object} obj
	 * @param {number} n
	 * @return {?}
	 */
	getValue: function (obj, n) {
		if (typeof(obj) === 'object') {
			var subrule = ilib.String._fncs.firstProp(obj);
			return ilib.String._fncs[subrule](obj[subrule], n);
		} else if (typeof(obj) === 'string') {
			return n;
		} else {
			return obj;
		}
	},
	
	/**
	 * @private
	 * @param {number} n
	 * @param {Array.<number|Array.<number>>} range
	 * @return {boolean}
	 */
	matchRangeContinuous: function(n, range) {
		for (var num in range) {
			if (typeof(num) !== 'undefined' && typeof(range[num]) !== 'undefined') {
				var obj = /** @type {Object|null|undefined} */ range[num];
				if (typeof(obj) === 'number') {
					if (n === range[num]) {
						return true;
					}
				} else if (Object.prototype.toString.call(obj) === '[object Array]') {
					if (n >= obj[0] && n <= obj[1]) {
						return true;
					}
				}
			}
		}
		return false;
	},

	/**
	 * @private
	 * @param {number} n
	 * @param {Array.<number|Array.<number>>} range
	 * @return {boolean}
	 */
	matchRange: function(n, range) {
		if (Math.floor(n) !== n) {
			return false;
		}
		return ilib.String._fncs.matchRangeContinuous(n, range);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	is: function(rule, n) {
		var left = ilib.String._fncs.getValue(rule[0], n);
		var right = ilib.String._fncs.getValue(rule[1], n);
		return left == right;
		// return ilib.String._fncs.getValue(rule[0]) == ilib.String._fncs.getValue(rule[1]);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	isnot: function(rule, n) {
		return ilib.String._fncs.getValue(rule[0], n) != ilib.String._fncs.getValue(rule[1], n);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	inrange: function(rule, n) {
		return ilib.String._fncs.matchRange(ilib.String._fncs.getValue(rule[0], n), rule[1]);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	notin: function(rule, n) {
		return !ilib.String._fncs.matchRange(ilib.String._fncs.getValue(rule[0], n), rule[1]);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	within: function(rule, n) {
		return ilib.String._fncs.matchRangeContinuous(ilib.String._fncs.getValue(rule[0], n), rule[1]);		
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {number}
	 */
	mod: function(rule, n) {
		return ilib.mod(ilib.String._fncs.getValue(rule[0], n), ilib.String._fncs.getValue(rule[1], n));
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {number}
	 */
	n: function(rule, n) {
		return n;
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	or: function(rule, n) {
		return ilib.String._fncs.getValue(rule[0], n) || ilib.String._fncs.getValue(rule[1], n);
	},
	
	/**
	 * @private
	 * @param {Object} rule
	 * @param {number} n
	 * @return {boolean}
	 */
	and: function(rule, n) {
		return ilib.String._fncs.getValue(rule[0], n) && ilib.String._fncs.getValue(rule[1], n);
	}
};

ilib.String.prototype = {
	/**
	 * Return the length of this string in characters. This function defers to the regular
	 * Javascript string class in order to perform the length function. Please note that this
	 * method is a real method, whereas the length property of Javascript strings is 
	 * implemented by native code and appears as a property.<p>
	 * 
	 * Example:
	 * 
	 * <pre>
	 * var str = new ilib.String("this is a string");
	 * console.log("String is " + str._length() + " characters long.");
	 * </pre>
	 * @private
	 */
	_length: function () {
		return this.str.length;
	},
	
	/**
	 * Format this string instance as a message, replacing the parameters with 
	 * the given values.<p>
	 * 
	 * The string can contain any text that a regular Javascript string can
	 * contain. Replacement parameters have the syntax:
	 * 
	 * <pre>
	 * {name}
	 * </pre>
	 * 
	 * Where "name" can be any string surrounded by curly brackets. The value of 
	 * "name" is taken from the parameters argument.<p>
	 * 
	 * Example:
	 * 
	 * <pre>
	 * var str = new ilib.String("There are {num} objects.");
	 * console.log(str.format({
	 *   num: 12
	 * });
	 * </pre>
	 * 
	 * Would give the output:
	 * 
	 * <pre>
	 * There are 12 objects.
	 * </pre>
	 * 
	 * If a property is missing from the parameter block, the replacement
	 * parameter substring is left untouched in the string, and a different
	 * set of parameters may be applied a second time. This way, different
	 * parts of the code may format different parts of the message that they
	 * happen to know about.<p>
	 * 
	 * Example:
	 * 
	 * <pre>
	 * var str = new ilib.String("There are {num} objects in the {container}.");
	 * console.log(str.format({
	 *   num: 12
	 * });
	 * </pre>
	 * 
	 * Would give the output:<p>
	 * 
	 * <pre>
	 * There are 12 objects in the {container}.
	 * </pre>
	 * 
	 * The result can then be formatted again with a different parameter block that
	 * specifies a value for the container property.
	 * 
	 * @param params a Javascript object containing values for the replacement 
	 * parameters in the current string
	 * @return a new ilib.String instance with as many replacement parameters filled
	 * out as possible with real values.
	 */
	format: function (params) {
		var formatted = this.str;
		if (params) {
			var regex;
			for (var p in params) {
				if (typeof(params[p]) !== 'undefined') {
					regex = new RegExp("\{"+p+"\}", "g");
					formatted = formatted.replace(regex, params[p]);
				}
			}
		}
		return formatted.toString();
	},
	
	/**
	 * Format a string as one of a choice of strings dependent on the value of
	 * a particular argument index.<p>
	 * 
	 * The syntax of the choice string is as follows. The string contains a
	 * series of choices separated by a vertical bar character "|". Each choice
	 * has a value or range of values to match followed by a hash character "#"
	 * followed by the string to use if the variable matches the criteria.<p>
	 * 
	 * Example string:
	 * 
	 * <pre>
	 * var num = 2;
	 * var str = new ilib.String("0#There are no objects.|1#There is one object.|2#There are {number} objects.");
	 * console.log(str.formatChoice(num, {
	 *   number: num
	 * }));
	 * </pre>
	 * 
	 * Gives the output:
	 * 
	 * <pre>
	 * "There are 2 objects."
	 * </pre>
	 * 
	 * The strings to format may contain replacement variables that will be formatted
	 * using the format() method above and the params argument as a source of values
	 * to use while formatting those variables.<p>
	 * 
	 * If the criterion for a particular choice is empty, that choice will be used
	 * as the default one for use when none of the other choice's criteria match.<p>
	 * 
	 * Example string:
	 * 
	 * <pre>
	 * var num = 22;
	 * var str = new ilib.String("0#There are no objects.|1#There is one object.|#There are {number} objects.");
	 * console.log(str.formatChoice(num, {
	 *   number: num
	 * }));
	 * </pre>
	 * 
	 * Gives the output:
	 * 
	 * <pre>
	 * "There are 22 objects."
	 * </pre>
	 * 
	 * If multiple choice patterns can match a given argument index, the first one 
	 * encountered in the string will be used. If no choice patterns match the 
	 * argument index, then the default choice will be used. If there is no default
	 * choice defined, then this method will return an empty string.<p>
	 * 
	 * <b>Special Syntax</b><p>
	 * 
	 * For any choice format string, all of the patterns in the string should be
	 * of a single type: numeric, boolean, or string/regexp. The type of the 
	 * patterns is determined by the type of the argument index parameter.<p>
	 * 
	 * If the argument index is numeric, then some special syntax can be used 
	 * in the patterns to match numeric ranges.<p>
	 * 
	 * <ul>
	 * <li><i>&gt;x</i> - match any number that is greater than x 
	 * <li><i>&gt;=x</i> - match any number that is greater than or equal to x
	 * <li><i>&lt;x</i> - match any number that is less than x
	 * <li><i>&lt;=x</i> - match any number that is less than or equal to x
	 * <li><i>start-end</i> - match any number in the range [start,end)
	 * <li><i>zero</i> - match any number in the class "zero". (See below for
	 * a description of number classes.)
	 * <li><i>one</i> - match any number in the class "one"
	 * <li><i>two</i> - match any number in the class "two"
	 * <li><i>few</i> - match any number in the class "few"
	 * <li><i>many</i> - match any number in the class "many"
	 * </ul>
	 * 
	 * A number class defines a set of numbers that receive a particular syntax
	 * in the strings. For example, in Slovenian, integers ending in the digit
	 * "1" are in the "one" class, including 1, 21, 31, ... 101, 111, etc.
	 * Similarly, integers ending in the digit "2" are in the "two" class. 
	 * Integers ending in the digits "3" or "4" are in the "few" class, and
	 * every other integer is handled by the default string.<p>
	 * 
	 * The definition of what numbers are included in a class is locale-dependent.
	 * They are defined in the data file plurals.json. If your string is in a
	 * different locale than the default for ilib, you should call the setLocale()
	 * method of the string instance before calling this method.<p> 
	 * 
	 * <b>Other Pattern Types</b><p>
	 * 
	 * If the argument index is a boolean, the string values "true" and "false" 
	 * may appear as the choice patterns.<p>
	 * 
	 * If the argument index is of type string, then the choice patterns may contain
	 * regular expressions, or static strings as degenerate regexps.
	 * 
	 * @param {*} argIndex The index into the choice array of the current parameter
	 * @param {Object} params The hash of parameter values that replace the replacement 
	 * variables in the string
	 * @throws "syntax error in choice format pattern: " if there is a syntax error
	 * @return {string} the formatted string
	 */
	formatChoice: function(argIndex, params) {
		var choices = this.str.split("|");
		var type = typeof(argIndex);
		var limits = [];
		var strings = [];
		var i;
		var parts;
		var limit;
		var arg;
		var result = undefined;
		var defaultCase = "";
	
		if (this.str.length === 0) {
			// nothing to do
			return "";
		}
		
		// first parse all the choices
		for (i = 0; i < choices.length; i++) {		
			parts = choices[i].split("#");		
			if (parts.length > 2) {
				limits[i] = parts[0];
				parts = parts.shift();			
				strings[i] = parts.join("#");
			} else if (parts.length === 2) {
				limits[i] = parts[0];
				strings[i] = parts[1];
			} else {
				// syntax error
				throw "syntax error in choice format pattern: " + choices[i];
			}		
		}
		
		// then apply the argument index
		for (i = 0; i < limits.length; i++) {
			if (limits[i].length === 0) {
				// this is default case
				defaultCase = new ilib.String(strings[i]);			
			} else {
				switch (type) {
					case 'number':
						arg = parseInt(argIndex, 10);
											
						if (limits[i].substring(0,2) === "<=") {						
							limit = parseFloat(limits[i].substring(2));
							if (arg <= limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else if (limits[i].substring(0,2) === ">=") {						
							limit = parseFloat(limits[i].substring(2));
							if (arg >= limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else if (limits[i].charAt(0) === "<") {						
							limit = parseFloat(limits[i].substring(1));
							if (arg < limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else if (limits[i].charAt(0) === ">") {						
							limit = parseFloat(limits[i].substring(1));
							if (arg > limit) {
								result = new ilib.String(strings[i]);
								i = limits.length;
							}
						} else {
							this.locale = this.locale || new ilib.Locale(this.localeSpec);
							switch (limits[i]) {
								case "zero":
								case "one":
								case "two":
								case "few":
								case "many":
									// CLDR locale-dependent number classes
									var ruleset = ilib.data["plurals_" + this.locale.getLanguage()];
									if (ruleset) {
										var rule = ruleset[limits[i]];
										if (ilib.String._fncs.getValue(rule, arg)) {
											result = new ilib.String(strings[i]);
											i = limits.length;
										}
									}
									break;
								default:
									var dash = limits[i].indexOf("-");
									if (dash !== -1) {							
										// range
										var start = limits[i].substring(0, dash);
										var end = limits[i].substring(dash+1);							
										if (arg >= parseInt(start, 10) && arg <= parseInt(end, 10)) {								
											result = new ilib.String(strings[i]);
											i = limits.length;
										}
									} else if (arg === parseInt(limits[i], 10)) {							
										// exact amount
										result = new ilib.String(strings[i]);
										i = limits.length;
									}
									break;
							}
						}
						break;
					case 'boolean':					
						if (limits[i] === "true" && argIndex === true) {						
							result = new ilib.String(strings[i]);
							i = limits.length;
						} else if (limits[i] === "false" && argIndex === false) {						
							result = new ilib.String(strings[i]);
							i = limits.length;
						}
						break;
					case 'string':					
						var regexp = new RegExp(limits[i], "i");
						if (regexp.test(argIndex)) {
							result = new ilib.String(strings[i]);
							i = limits.length;
						}
						break;
					case 'object':
						throw "syntax error: fmtChoice parameter for the argument index cannot be an object";
				}
			}
		}
		
		if (!result) {		
			result = defaultCase || new ilib.String("");
		}
		
		result = result.format(params);
		
		return result.toString();
	},
	
	// delegates
	/**
	 * Same as String.toString()
	 * @return {string} this instance as regular Javascript string
	 */
	toString: function () {
		return this.str.toString();
	},
	
	/**
	 * Same as String.valueOf()
	 * @return {string} this instance as a regular Javascript string
	 */
	valueOf: function () {
		return this.str.valueOf();
	},
	
	/**
	 * Same as String.charAt()
	 * @param {number} index the index of the character being sought
	 * @return {ilib.String} the character at the given index
	 */
	charAt: function(index) {
		return new ilib.String(this.str.charAt(index));
	},
	
	/**
	 * Same as String.charCodeAt(). This only reports on 
	 * 2-byte UCS-2 Unicode values, and does not take into
	 * account supplementary characters encoded in UTF-16.
	 * If you would like to take account of those characters,
	 * use codePointAt() instead.
	 * @param {number} index the index of the character being sought
	 * @return {number} the character code of the character at the 
	 * given index in the string 
	 */
	charCodeAt: function(index) {
		return this.str.charCodeAt(index);
	},
	
	/**
	 * Same as String.concat()
	 * @param {string} strings strings to concatenate to the current one
	 * @return {ilib.String} a concatenation of the given strings
	 */
	concat: function(strings) {
		return new ilib.String(this.str.concat(strings));
	},
	
	/**
	 * Same as String.indexOf()
	 * @param {string} searchValue string to search for
	 * @param {number} start index into the string to start searching, or
	 * undefined to search the entire string
	 * @return {number} index into the string of the string being sought,
	 * or -1 if the string is not found 
	 */
	indexOf: function(searchValue, start) {
		return this.str.indexOf(searchValue, start);
	},
	
	/**
	 * Same as String.lastIndexOf()
	 * @param {string} searchValue string to search for
	 * @param {number} start index into the string to start searching, or
	 * undefined to search the entire string
	 * @return {number} index into the string of the string being sought,
	 * or -1 if the string is not found 
	 */
	lastIndexOf: function(searchValue, start) {
		return this.str.lastIndexOf(searchValue, start);
	},
	
	/**
	 * Same as String.match()
	 * @param {string} regexp the regular expression to match
	 * @return {Array.<string>} an array of matches
	 */
	match: function(regexp) {
		return this.str.match(regexp);
	},
	
	/**
	 * Same as String.replace()
	 * @param {string} searchValue a regular expression to search for
	 * @param {string} newValue the string to replace the matches with
	 * @return {ilib.String} a new string with all the matches replaced
	 * with the new value
	 */
	replace: function(searchValue, newValue) {
		return new ilib.String(this.str.replace(searchValue, newValue));
	},
	
	/**
	 * Same as String.search()
	 * @param {string} regexp the regular expression to search for
	 * @return {number} position of the match, or -1 for no match
	 */
	search: function(regexp) {
		return this.str.search(regexp);
	},
	
	/**
	 * Same as String.slice()
	 * @param {number} start first character to include in the string
	 * @param {number} end include all characters up to, but not including
	 * the end character
	 * @return {ilib.String} a slice of the current string
	 */
	slice: function(start, end) {
		return new ilib.String(this.str.slice(start, end));
	},
	
	/**
	 * Same as String.split()
	 * @param {string} separator regular expression to match to find
	 * separations between the parts of the text
	 * @param {number} limit maximum number of items in the final 
	 * output array. Any items beyond that limit will be ignored.
	 * @return {Array.<string>} the parts of the current string split 
	 * by the separator
	 */
	split: function(separator, limit) {
		return this.str.split(separator, limit);
	},
	
	/**
	 * Same as String.substr()
	 * @param {number} start the index of the character that should 
	 * begin the returned substring
	 * @param {number} length the number of characters to return after
	 * the start character.
	 * @return {ilib.String} the requested substring 
	 */
	substr: function(start, length) {
		return new ilib.String(this.str.substr(start, length));
	},
	
	/**
	 * Same as String.substring()
	 * @param {number} from the index of the character that should 
	 * begin the returned substring
	 * @param {number} to the index where to stop the extraction. If
	 * omitted, extracts the rest of the string
	 * @return {ilib.String} the requested substring 
	 */
	substring: function(from, to) {
		return this.str.substring(from, to);
	},
	
	/**
	 * Same as String.toLowerCase(). Note that this method is
	 * not locale-sensitive. 
	 * @return {ilib.String} a string with the first character
	 * lower-cased
	 */
	toLowerCase: function() {
		return this.str.toLowerCase();
	},
	
	/**
	 * Same as String.toUpperCase(). Note that this method is
	 * not locale-sensitive. Use toLocaleUpperCase() instead
	 * to get locale-sensitive behaviour. 
	 * @return {ilib.String} a string with the first character
	 * upper-cased
	 */
	toUpperCase: function() {
		return this.str.toUpperCase();
	},
	
	/**
	 * Convert the character or the surrogate pair at the given
	 * index into the string to a Unicode UCS-4 code point.
	 * @protected
	 * @param {number} index index into the string
	 * @return {number} code point of the character at the
	 * given index into the string
	 */
	_toCodePoint: function (index) {
		if (this.str.length === 0) {
			return -1;
		}
		var code = -1, high = this.str.charCodeAt(index);
		if (high >= 0xD800 && high <= 0xDBFF) {
			if (this.str.length > index+1) {
				var low = this.str.charCodeAt(index+1);
				if (low >= 0xDC00 && low <= 0xDFFF) {
					code = (((high & 0x3C0) >> 6) + 1) << 16 |
						(((high & 0x3F) << 10) | (low & 0x3FF));
				}
			}
		} else {
			code = high;
		}
		
		return code;
	},
	
	/**
	 * Call the callback with each character in the string one at 
	 * a time, taking care to step through the surrogate pairs in 
	 * the UTF-16 encoding properly.<p>
	 * 
	 * The standard Javascript String's charAt() method only
	 * returns a particular 16-bit character in the 
	 * UTF-16 encoding scheme.
	 * If the index to charAt() is pointing to a low- or 
	 * high-surrogate character,
	 * it will return the surrogate character rather 
	 * than the the character 
	 * in the supplementary planes that the two surrogates together 
	 * encode. This function will call the callback with the full
	 * character, making sure to join two  
	 * surrogates into one character in the supplementary planes
	 * where necessary.<p>
	 * 
	 * @param {function(string)} callback a callback function to call with each
	 * full character in the current string
	 */
	forEach: function(callback) {
		if (typeof(callback) === 'function') {
			var it = this.charIterator();
			while (it.hasNext()) {
				callback(it.next());
			}
		}
	},

	/**
	 * Call the callback with each numeric code point in the string one at 
	 * a time, taking care to step through the surrogate pairs in 
	 * the UTF-16 encoding properly.<p>
	 * 
	 * The standard Javascript String's charCodeAt() method only
	 * returns information about a particular 16-bit character in the 
	 * UTF-16 encoding scheme.
	 * If the index to charCodeAt() is pointing to a low- or 
	 * high-surrogate character,
	 * it will return the code point of the surrogate character rather 
	 * than the code point of the character 
	 * in the supplementary planes that the two surrogates together 
	 * encode. This function will call the callback with the full
	 * code point of each character, making sure to join two  
	 * surrogates into one code point in the supplementary planes.<p>
	 * 
	 * @param {function(string)} callback a callback function to call with each
	 * code point in the current string
	 */
	forEachCodePoint: function(callback) {
		if (typeof(callback) === 'function') {
			var it = this.iterator();
			while (it.hasNext()) {
				callback(it.next());
			}
		}
	},

	/**
	 * Return an iterator that will step through all of the characters
	 * in the string one at a time and return their code points, taking 
	 * care to step through the surrogate pairs in UTF-16 encoding 
	 * properly.<p>
	 * 
	 * The standard Javascript String's charCodeAt() method only
	 * returns information about a particular 16-bit character in the 
	 * UTF-16 encoding scheme.
	 * If the index is pointing to a low- or high-surrogate character,
	 * it will return a code point of the surrogate character rather 
	 * than the code point of the character 
	 * in the supplementary planes that the two surrogates together 
	 * encode.<p>
	 * 
	 * The iterator instance returned has two methods, hasNext() which
	 * returns true if the iterator has more code points to iterate through,
	 * and next() which returns the next code point as a number.<p>
	 * 
	 * @return {Object} an iterator 
	 * that iterates through all the code points in the string
	 */
	iterator: function() {
		/**
		 * @constructor
		 */
		function _iterator (istring) {
			this.index = 0;
			this.hasNext = function () {
				return (this.index < istring.str.length);
			};
			this.next = function () {
				if (this.index < istring.str.length) {
					var num = istring._toCodePoint(this.index);
					this.index += ((num > 0xFFFF) ? 2 : 1);
				} else {
					num = -1;
				}
				return num;
			};
		};
		return new _iterator(this);
	},

	/**
	 * Return an iterator that will step through all of the characters
	 * in the string one at a time, taking 
	 * care to step through the surrogate pairs in UTF-16 encoding 
	 * properly.<p>
	 * 
	 * The standard Javascript String's charAt() method only
	 * returns information about a particular 16-bit character in the 
	 * UTF-16 encoding scheme.
	 * If the index is pointing to a low- or high-surrogate character,
	 * it will return that surrogate character rather 
	 * than the surrogate pair which represents a character 
	 * in the supplementary planes.<p>
	 * 
	 * The iterator instance returned has two methods, hasNext() which
	 * returns true if the iterator has more characters to iterate through,
	 * and next() which returns the next character.<p>
	 * 
	 * @return {Object} an iterator 
	 * that iterates through all the characters in the string
	 */
	charIterator: function() {
		/**
		 * @constructor
		 */
		function _chiterator (istring) {
			this.index = 0;
			this.hasNext = function () {
				return (this.index < istring.str.length);
			};
			this.next = function () {
				var ch;
				if (this.index < istring.str.length) {
					ch = istring.str.charAt(this.index);
					if (ilib.String._isSurrogate(ch) && 
							this.index+1 < istring.str.length && 
							ilib.String._isSurrogate(istring.str.charAt(this.index+1))) {
						this.index++;
						ch += istring.str.charAt(this.index);
					}
					this.index++;
				}
				return ch;
			};
		};
		return new _chiterator(this);
	},
	
	/**
	 * Return the code point at the given index when the string is viewed 
	 * as an array of code points. If the index is beyond the end of the
	 * array of code points or if the index is negative, -1 is returned.
	 * @param {number} index index of the code point 
	 * @return {number} code point of the character at the given index into
	 * the string
	 */
	codePointAt: function (index) {
		if (index < 0) {
			return -1;
		}
		var count,
			it = this.iterator(),
			ch;
		for (count = index; count >= 0 && it.hasNext(); count--) {
			ch = it.next();
		}
		return (count < 0) ? ch : -1;
	},
	
	/**
	 * Set the locale to use when processing choice formats. The locale
	 * affects how number classes are interpretted. In some cultures,
	 * the limit "few" maps to "any integer that ends in the digits 2 to 9" and
	 * in yet others, "few" maps to "any integer that ends in the digits
	 * 3 or 4".
	 * @param {ilib.Locale|string} locale locale to use when processing choice
	 * formats with this string
	 * @param {boolean} sync [optional] whether to load the locale data synchronously 
	 * or not
	 * @param {Object} loadParams [optional] parameters to pass to the loader function
	 * @param {function(*)=} onLoad [optional] function to call when the loading is done
	 */
	setLocale: function (locale, sync, loadParams, onLoad) {
		if (typeof(locale) === 'object') {
			this.locale = locale;
		} else {
			this.localeSpec = locale;
			this.locale = new ilib.Locale(locale);
		}
		
		ilib.String.loadPlurals(typeof(sync) !== 'undefined' ? sync : true, this.locale, loadParams, onLoad);
	},

	/**
	 * Return the locale to use when processing choice formats. The locale
	 * affects how number classes are interpretted. In some cultures,
	 * the limit "few" maps to "any integer that ends in the digits 2 to 9" and
	 * in yet others, "few" maps to "any integer that ends in the digits
	 * 3 or 4".
	 * @return {string} localespec to use when processing choice
	 * formats with this string
	 */
	getLocale: function () {
		return (this.locale ? this.locale.getSpec() : this.localeSpec) || ilib.getLocale();
	},

	/**
	 * Return the number of code points in this string. This may be different
	 * than the number of characters, as the UTF-16 encoding that Javascript
	 * uses for its basis returns surrogate pairs separately. Two 2-byte 
	 * surrogate characters together make up one character/code point in 
	 * the supplementary character planes. If your string contains no
	 * characters in the supplementary planes, this method will return the
	 * same thing as the length() method.
	 * @return {number} the number of code points in this string
	 */
	codePointLength: function () {
		if (this.cpLength === -1) {
			var it = this.iterator();
			this.cpLength = 0;
			while (it.hasNext()) { 
				this.cpLength++;
				it.next();
			};
		}
		return this.cpLength;	
	}
};
/*
 * calendar.js - Represent a calendar object.
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends
ilibglobal.js
locale.js
localeinfo.js
*/

/**
 * Interface that all calendars must implement.
 * 
 * Depends directive: !depends calendar.js
 * 
 * @interface
 * @protected
 */
ilib.Cal = function() {
};

/**
 * Factory method to create a new instance of a calendar subclass.<p>
 * 
 * The options parameter can be an object that contains the following
 * properties:
 * 
 * <ul>
 * <li><i>type</i> - specify the type of the calendar desired. The
 * list of valid values changes depending on which calendars are 
 * defined. When assembling your iliball.js, include those calendars 
 * you wish to use in your program or web page, and they will register 
 * themselves with this factory method. The "official", "gregorian",
 * and "julian" calendars are all included by default, as they are the
 * standard calendars for much of the world.
 * <li><i>locale</i> - some calendars vary depending on the locale.
 * For example, the "official" calendar transitions from a Julian-style
 * calendar to a Gregorian-style calendar on a different date for
 * each country, as the governments of those countries decided to
 * adopt the Gregorian calendar at different times. 
 * </ul>
 * 
 * If a locale is specified, but no type, then the calendar that is default for
 * the locale will be instantiated and returned. If neither the type nor
 * the locale are specified, then the calendar for the default locale will
 * be used. 
 * 
 * @param {Object=} options options controlling the construction of this instance, or
 * undefined to use the default options
 * @return {ilib.Cal} an instance of a calendar object of the appropriate type
 */
ilib.Cal.newInstance = function (options) {
	var locale = options && options.locale,
	type = options && options.type,
	cons;

	if (!locale) {
		locale = new ilib.Locale();	// default locale
	}
	
	if (!type) {
		var info = new ilib.LocaleInfo(locale);
		type = info.getCalendar();
	}
	
	cons = ilib.Cal._constructors[type];
	
	// pass the same options through to the constructor so the subclass
	// has the ability to do something with if it needs to
	return cons && new cons(options);
};

/* place for the subclasses to put their constructors so that the factory method
 * can find them. Do this to add your calendar after it's defined: 
 * ilib.Cal._constructors["mytype"] = ilib.Cal.MyTypeConstructor;
 */
ilib.Cal._constructors = {};

/**
 * Return an array of known calendar types that the factory method can instantiate.
 * 
 * @return {Array.<string>} an array of calendar types
 */
ilib.Cal.getCalendars = function () {
	var arr = [],
		c;
	
	for (c in ilib.Cal._constructors) {
		if (c && ilib.Cal._constructors[c]) {
			arr.push(c); // code like a pirate
		}
	}
	
	return arr;
};

ilib.Cal.prototype = {
	/**
	 * Return the type of this calendar.
	 * 
	 * @return {string} the name of the type of this calendar 
	 */
	getType: function() {
		throw "Cannot call methods of abstract class ilib.Cal";
	},
	
	/**
	 * Return the number of months in the given year. The number of months in a year varies
	 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
	 * days in a year to an entire solar year. The month is represented as a 1-based number
	 * where 1=first month, 2=second month, etc.
	 * 
	 * @param {number} year a year for which the number of months is sought
	 * @return {number} The number of months in the given year
	 */
	getNumMonths: function(year) {
		throw "Cannot call methods of abstract class ilib.Cal";
	},
	
	/**
	 * Return the number of days in a particular month in a particular year. This function
	 * can return a different number for a month depending on the year because of things
	 * like leap years.
	 * 
	 * @param {number} month the month for which the length is sought
	 * @param {number} year the year within which that month can be found
	 * @return {number} the number of days within the given month in the given year
	 */
	getMonLength: function(month, year) {
		throw "Cannot call methods of abstract class ilib.Cal";
	},
	
	/**
	 * Return true if the given year is a leap year in this calendar.
	 * The year parameter may be given as a number.
	 * 
	 * @param {number} year the year for which the leap year information is being sought
	 * @return {boolean} true if the given year is a leap year
	 */
	isLeapYear: function(year) {
		throw "Cannot call methods of abstract class ilib.Cal";
	}
};

/*
 * util/math.js - Misc math utility routines
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * Return the sign of the given number. If the sign is negative, this function
 * returns -1. If the sign is positive or zero, this function returns 1.
 * @static
 * @param {number} num the number to test
 * @return {number} -1 if the number is negative, and 1 otherwise
 */
ilib.signum = function (num) {
	var n = num;
	if (typeof(num) === 'string') {
		n = parseInt(num, 10);
	} else if (typeof(num) !== 'number') {
		return 1;
	}
	return (n < 0) ? -1 : 1;
};


/**
 * @protected
 */
ilib._roundFnc = {
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	floor: function (num) {
		return Math.floor(num);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	ceiling: function (num) {
		return Math.ceil(num);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	down: function (num) {
		return (num < 0) ? Math.ceil(num) : Math.floor(num);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	up: function (num) {
		return (num < 0) ? Math.floor(num) : Math.ceil(num);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfup: function (num) {
		return (num < 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfdown: function (num) {
		return (num < 0) ? Math.floor(num + 0.5) : Math.ceil(num - 0.5);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfeven: function (num) {
		return (Math.floor(num) % 2 === 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	},
	
	/**
	 * @static
	 * @protected
	 * @param {number} num number to round
	 * @return {number} rounded number
	 */
	halfodd: function (num) {
		return (Math.floor(num) % 2 !== 0) ? Math.ceil(num - 0.5) : Math.floor(num + 0.5);
	}
};


/*
 * julianday.js - A Julian date object.
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends locale.js */

/**
 * @class
 * A Julian Day class. A Julian Day is a date based on the Julian Day count
 * of time invented by Joseph Scaliger in 1583 for use with astronomical calculations. 
 * Do not confuse it with a date in the Julian calendar, which it has very
 * little in common with. The naming is unfortunately close, and comes from history.<p>
 * 
 * Depends directive: !depends julianday.js
 * 
 * @constructor
 * @param {number} num the Julian Day expressed as a floating point number 
 */
ilib.JulianDay = function(num) {
	this.jd = num;
	this.days = Math.floor(this.jd);
	this.frac = num - this.days;
};

ilib.JulianDay.prototype = {
	/**
	 * Return the integral portion of this Julian Day instance. This corresponds to
	 * the number of days since the beginning of the epoch.
	 * 
	 * @return {number} the integral portion of this Julian Day
	 */
	getDays: function() {
		return this.days;
	},
	
	/**
	 * Set the date of this Julian Day instance.
	 * 
	 * @param {number} days the julian date expressed as a floating point number
	 */
	setDays: function(days) {
		this.days = Math.floor(days);
		this.jd = this.days + this.frac;
	},
	
	/**
	 * Return the fractional portion of this Julian Day instance. This portion 
	 * corresponds to the time of day for the instance.
	 */
	getDayFraction: function() {
		return this.frac;
	},
	
	/**
	 * Set the fractional part of the Julian Day. The fractional part represents
	 * the portion of a fully day. Julian dates start at noon, and proceed until
	 * noon of the next day. That would mean midnight is represented as a fractional
	 * part of 0.5.
	 * 
	 * @param {number} fraction The fractional part of the Julian date
	 */
	setDayFraction: function(fraction) {
		var t = Math.floor(fraction);
		this.frac = fraction - t;
		this.jd = this.days + this.frac;
	},
	
	/** 
	 * Return the Julian Day expressed as a floating point number.
	 * @return {number} the Julian Day as a number
	 */
	getDate: function () {
		return this.jd;
	},
	
	/**
	 * Set the date of this Julian Day instance.
	 * 
	 * @param {number} num the numeric Julian Day to set into this instance
	 */
	setDate: function (num) {
		this.jd = num;
	},
	
	/**
	 * Add an offset to the current date instance. The offset should be expressed in
	 * terms of Julian days. That is, each integral unit represents one day of time, and
	 * fractional part represents a fraction of a regular 24-hour day.
	 * 
	 * @param {number} offset an amount to add (or subtract) to the current result instance.
	 */
	addDate: function(offset) {
		if (typeof(offset) === 'number') {
			this.jd += offset;
			this.days = Math.floor(this.jd);
			this.frac = this.jd - this.days;
		}
	}
};

/*
 * gregorian.js - Represent a Gregorian calendar object.
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js util/utils.js */

/**
 * @class
 * Construct a new Gregorian calendar object. This class encodes information about
 * a Gregorian calendar.<p>
 * 
 * Depends directive: !depends gregorian.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.Gregorian = function() {
	this.type = "gregorian";
};

/**
 * the lengths of each month 
 * @private
 * @const
 * @type Array.<number> 
 */
ilib.Cal.Gregorian.monthLengths = [
	31,  /* Jan */
	28,  /* Feb */
	31,  /* Mar */
	30,  /* Apr */
	31,  /* May */
	30,  /* Jun */
	31,  /* Jul */
	31,  /* Aug */
	30,  /* Sep */
	31,  /* Oct */
	30,  /* Nov */
	31   /* Dec */
];

/**
 * Return the number of months in the given year. The number of months in a year varies
 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=first month, 2=second month, etc.
 * 
 * @param {number} year a year for which the number of months is sought
 * @return {number} The number of months in the given year
 */
ilib.Cal.Gregorian.prototype.getNumMonths = function(year) {
	return 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of things
 * like leap years.
 * 
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @return {number} the number of days within the given month in the given year
 */
ilib.Cal.Gregorian.prototype.getMonLength = function(month, year) {
	if (month !== 2 || !this.isLeapYear(year)) {
		return ilib.Cal.Gregorian.monthLengths[month-1];
	} else {
		return 29;
	}
};

/**
 * Return true if the given year is a leap year in the Gregorian calendar.
 * The year parameter may be given as a number, or as a GregDate object.
 * @param {number|ilib.Date.GregDate} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.Gregorian.prototype.isLeapYear = function(year) {
	var y = (typeof(year) === 'number' ? year : year.getYears());
	var centuries = ilib.mod(y, 400);
	return (ilib.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);
};

/**
 * Return the type of this calendar.
 * 
 * @return {string} the name of the type of this calendar 
 */
ilib.Cal.Gregorian.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.Gregorian.prototype.newDateInstance = function (options) {
	return new ilib.Date.GregDate(options);
};

/* register this calendar for the factory method */
ilib.Cal._constructors["gregorian"] = ilib.Cal.Gregorian;

/*
 * ratadie.js - Represent the RD date number in the calendar
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
util/utils.js
julianday.js 
*/

/**
 * @class
 * Construct a new RD date number object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify 
 * the parts or specify the minutes, seconds, and milliseconds, but not both. This is only used
 * in the Hebrew calendar. 
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above are present, then the RD is calculate based on 
 * the current date at the time of instantiation. <p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends ratadie.js
 * 
 * @private
 * @constructor
 * @param {Object=} params parameters that govern the settings and behaviour of this RD date
 */
ilib.Date.RataDie = function(params) {
	if (params) {
		if (typeof(params.date) !== 'undefined') {
			// accept JS Date classes or strings
			var date = params.date;
			if (!(date instanceof Date)) {
				date = new Date(date); // maybe a string initializer?
			}
			this._setTime(date.getTime());
		} else if (typeof(params.unixtime) !== 'undefined') {
			this._setTime(parseInt(params.unixtime, 10));
		} else if (typeof(params.julianday) !== 'undefined') {
			// JD time is defined to be UTC
			this._setJulianDay(parseFloat(params.julianday));
		} else if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond || params.parts) {
			this._setDateComponents(params);
		} else if (typeof(params.rd) !== 'undefined') {
			this.rd = (typeof(params.rd) === 'object' && params.rd instanceof ilib.Date.RataDie) ? params.rd.rd : params.rd;
		}
	}
	
	/**
	 * @type {number} the Rata Die number of this date for this calendar type
	 */
	if (typeof(this.rd) === 'undefined') {
		var now = new Date();
		this._setTime(now.getTime());
	}
};

ilib.Date.RataDie.prototype = {
	/**
	 * @protected
	 * @const
	 * @type number
	 * the difference between a zero Julian day and the zero Gregorian date. 
	 */
	epoch: 1721424.5,
	
	/**
	 * Set the RD of this instance according to the given unix time. Unix time is
	 * the number of milliseconds since midnight on Jan 1, 1970.
	 *
	 * @protected
	 * @param {number} millis the unix time to set this date to in milliseconds 
	 */
	_setTime: function(millis) {
		// 2440587.5 is the julian day of midnight Jan 1, 1970, UTC (Gregorian)
		this._setJulianDay(2440587.5 + millis / 86400000);
	},

	/**
	 * Set the date of this instance using a Julian Day.
	 * @protected
	 * @param {number} date the Julian Day to use to set this date
	 */
	_setJulianDay: function (date) {
		var jd = (typeof(date) === 'number') ? new ilib.JulianDay(date) : date;
		// round to the nearest millisecond
		this.rd = ilib._roundFnc.halfup((jd.getDate() - this.epoch) * 86400000) / 86400000;
	},

	/**
	 * Return the rd number of the particular day of the week on or before the 
	 * given rd. eg. The Sunday on or before the given rd.
	 * @protected
	 * @param {number} rd the rata die date of the reference date
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the current date
	 * @return {number} the rd of the day of the week
	 */
	_onOrBefore: function(rd, dayOfWeek) {
		return rd - ilib.mod(Math.floor(rd) - dayOfWeek - 2, 7);
	},
	
	/**
	 * Return the rd number of the particular day of the week on or before the current rd.
	 * eg. The Sunday on or before the current rd. If the offset is given, the calculation
	 * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	 * wall time, so it it would give the wrong day of the week if this calculation was
	 * done in UTC time when the caller really wanted wall time. Even though the calculation
	 * may be done in wall time, the return value is nonetheless always given in UTC.
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the current date
	 * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	 * not given
	 * @return {number} the rd of the day of the week
	 */
	onOrBefore: function(dayOfWeek, offset) {
		offset = offset || 0;
		return this._onOrBefore(this.rd + offset, dayOfWeek) - offset;
	},
	
	/**
	 * Return the rd number of the particular day of the week on or before the current rd.
	 * eg. The Sunday on or before the current rd. If the offset is given, the calculation
	 * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	 * wall time, so it it would give the wrong day of the week if this calculation was
	 * done in UTC time when the caller really wanted wall time. Even though the calculation
	 * may be done in wall time, the return value is nonetheless always given in UTC.
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the reference date
	 * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	 * not given
	 * @return {number} the day of the week
	 */
	onOrAfter: function(dayOfWeek, offset) {
		offset = offset || 0;
		return this._onOrBefore(this.rd+6+offset, dayOfWeek) - offset;
	},
	
	/**
	 * Return the rd number of the particular day of the week before the current rd.
	 * eg. The Sunday before the current rd. If the offset is given, the calculation
	 * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	 * wall time, so it it would give the wrong day of the week if this calculation was
	 * done in UTC time when the caller really wanted wall time. Even though the calculation
	 * may be done in wall time, the return value is nonetheless always given in UTC.
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the reference date
	 * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	 * not given
	 * @return {number} the day of the week
	 */
	before: function(dayOfWeek, offset) {
		offset = offset || 0;
		return this._onOrBefore(this.rd-1+offset, dayOfWeek) - offset;
	},
	
	/**
	 * Return the rd number of the particular day of the week after the current rd.
	 * eg. The Sunday after the current rd. If the offset is given, the calculation
	 * happens in wall time instead of UTC. UTC time may be a day before or day behind 
	 * wall time, so it it would give the wrong day of the week if this calculation was
	 * done in UTC time when the caller really wanted wall time. Even though the calculation
	 * may be done in wall time, the return value is nonetheless always given in UTC.
	 * @param {number} dayOfWeek the day of the week that is being sought relative 
	 * to the reference date
	 * @param {number=} offset RD offset for the time zone. Zero is assumed if this param is
	 * not given
	 * @return {number} the day of the week
	 */
	after: function(dayOfWeek, offset) {
		offset = offset || 0;
		return this._onOrBefore(this.rd+7+offset, dayOfWeek) - offset;
	},

	/**
	 * Return the unix time equivalent to this Gregorian date instance. Unix time is
	 * the number of milliseconds since midnight on Jan 1, 1970 UTC. This method only
	 * returns a valid number for dates between midnight, Jan 1, 1970 and  
	 * Jan 19, 2038 at 3:14:07am when the unix time runs out. If this instance 
	 * encodes a date outside of that range, this method will return -1.
	 * 
	 * @return {number} a number giving the unix time, or -1 if the date is outside the
	 * valid unix time range
	 */
	getTime: function() {
		// earlier than Jan 1, 1970
		// or later than Jan 19, 2038 at 3:14:07am
		var jd = this.getJulianDay();
		if (jd < 2440587.5 || jd > 2465442.634803241) { 
			return -1;
		}
	
		// avoid the rounding errors in the floating point math by only using
		// the whole days from the rd, and then calculating the milliseconds directly
		return Math.round((jd - 2440587.5) * 86400000);
	},

	/**
	 * Return the Julian Day equivalent to this calendar date as a number.
	 * This returns the julian day in UTC.
	 * 
	 * @return {number} the julian date equivalent of this date
	 */
	getJulianDay: function() {
		return this.rd + this.epoch;
	},

	/**
	 * Return the Rata Die (fixed day) number of this RD date.
	 * 
	 * @return {number} the rd date as a number
	 */
	getRataDie: function() {
		return this.rd;
	}
};

/*
 * gregratadie.js - Represent the RD date number in the Gregorian calendar
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js
calendar/gregorian.js
calendar/ratadie.js
util/utils.js
julianday.js 
*/

/**
 * @class
 * Construct a new Gregorian RD date number object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Gregorian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above are present, then the RD is calculate based on 
 * the current date at the time of instantiation. <p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends gregratadie.js
 * 
 * @private
 * @constructor
 * @extends ilib.Date.RataDie
 * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian RD date
 */
ilib.Date.GregRataDie = function(params) {
	this.cal = params && params.cal || new ilib.Cal.Gregorian();
	/** @type {number|undefined} */
	this.rd = undefined;
	ilib.Date.RataDie.call(this, params);
};

ilib.Date.GregRataDie.prototype = new ilib.Date.RataDie();
ilib.Date.GregRataDie.prototype.parent = ilib.Date.RataDie;
ilib.Date.GregRataDie.prototype.constructor = ilib.Date.GregRataDie;

/**
 * the cumulative lengths of each month, for a non-leap year 
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Date.GregRataDie.cumMonthLengths = [
    0,   /* Jan */
	31,  /* Feb */
	59,  /* Mar */
	90,  /* Apr */
	120, /* May */
	151, /* Jun */
	181, /* Jul */
	212, /* Aug */
	243, /* Sep */
	273, /* Oct */
	304, /* Nov */
	334, /* Dec */
	365
];

/**
 * the cumulative lengths of each month, for a leap year 
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Date.GregRataDie.cumMonthLengthsLeap = [
	0,   /* Jan */
	31,  /* Feb */
	60,  /* Mar */
	91,  /* Apr */
	121, /* May */
	152, /* Jun */
	182, /* Jul */
	213, /* Aug */
	244, /* Sep */
	274, /* Oct */
	305, /* Nov */
	335, /* Dec */
	366
];

/**
 * Calculate the Rata Die (fixed day) number of the given date.
 * 
 * @private
 * @param {Object} date the date components to calculate the RD from
 */
ilib.Date.GregRataDie.prototype._setDateComponents = function(date) {
	var year = parseInt(date.year, 10) || 0;
	var month = parseInt(date.month, 10) || 1;
	var day = parseInt(date.day, 10) || 1;
	var hour = parseInt(date.hour, 10) || 0;
	var minute = parseInt(date.minute, 10) || 0;
	var second = parseInt(date.second, 10) || 0;
	var millisecond = parseInt(date.millisecond, 10) || 0;

	var years = 365 * (year - 1) +
		Math.floor((year-1)/4) -
		Math.floor((year-1)/100) +
		Math.floor((year-1)/400);
	
	var dayInYear = (month > 1 ? ilib.Date.GregRataDie.cumMonthLengths[month-1] : 0) +
		day +
		(ilib.Cal.Gregorian.prototype.isLeapYear.call(this.cal, year) && month > 2 ? 1 : 0);
	var rdtime = (hour * 3600000 +
		minute * 60000 +
		second * 1000 +
		millisecond) / 
		86400000; 
	/*
	debug("getRataDie: converting " +  JSON.stringify(this));
	debug("getRataDie: year is " +  years);
	debug("getRataDie: day in year is " +  dayInYear);
	debug("getRataDie: rdtime is " +  rdtime);
	debug("getRataDie: rd is " +  (years + dayInYear + rdtime));
	*/
	
	/**
	 * @type {number|undefined} the RD number of this Gregorian date
	 */
	this.rd = years + dayInYear + rdtime;
};

/**
 * Return the rd number of the particular day of the week on or before the 
 * given rd. eg. The Sunday on or before the given rd.
 * @private
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the current date
 * @return {number} the rd of the day of the week
 */
ilib.Date.GregRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {
	return rd - ilib.mod(Math.floor(rd) - dayOfWeek, 7);
};

ilib.data.zoneinfo["Africa/Djibouti"] = {"f":"EAT","o":"3:0","c":"DJ","n":"E. Africa {c} Time"};
ilib.data.zoneinfo["Africa/Windhoek"] = {"e":{"m":4,"r":"0>1","t":"2:0"},"f":"WA{c}T","o":"1:0","s":{"c":"S","m":9,"r":"0>1","t":"2:0","v":"1:0"},"c":"NA","n":"Namibia {c} Time"};
ilib.data.zoneinfo["Africa/Johannesburg"] = {"f":"SAST","o":"2:0","c":"ZA","n":"South Africa {c} Time"};
ilib.data.zoneinfo["Africa/Douala"] = {"f":"WAT","o":"1:0","c":"CM","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["Africa/Accra"] = {"f":"S","o":"0:0","c":"GH","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Africa/Addis_Ababa"] = {"f":"EAT","o":"3:0","c":"ET","n":"E. Africa {c} Time"};
ilib.data.zoneinfo["Asia/Dubai"] = {"f":"GST","o":"4:0","c":"AE","n":"Arabian {c} Time"};
ilib.data.zoneinfo["Asia/Bahrain"] = {"f":"AST","o":"3:0","c":"BH","n":"Arab {c} Time"};
ilib.data.zoneinfo["Africa/Algiers"] = {"f":"CET","o":"1:0","c":"DZ","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["Africa/Cairo"] = {"e":{"m":9,"r":"l5","t":"0:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":8,"r":"1","t":"0:0","v":"1:0"},"c":"EG","n":"Egypt {c} Time"};
ilib.data.zoneinfo["Asia/Baghdad"] = {"f":"AST","o":"3:0","c":"IQ","n":"Arabic {c} Time"};
ilib.data.zoneinfo["Asia/Amman"] = {"e":{"m":10,"r":"l5","t":"1:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l5","t":"0:0","v":"1:0"},"c":"JO","n":"Jordan {c} Time"};
ilib.data.zoneinfo["Asia/Kuwait"] = {"f":"AST","o":"3:0","c":"KW","n":"Arab {c} Time"};
ilib.data.zoneinfo["Asia/Beirut"] = {"e":{"m":10,"r":"l0","t":"0:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"0:0","v":"1:0"},"c":"LB","n":"Middle East {c} Time"};
ilib.data.zoneinfo["Africa/Tripoli"] = {"f":"EET","o":"2:0","c":"LY","n":"Libya {c} Time"};
ilib.data.zoneinfo["Africa/Casablanca"] = {"e":{"m":6,"r":"28","t":"3:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":8,"r":"2","t":"2:0","v":"1:0"},"c":"MA","n":"Morocco {c} Time"};
ilib.data.zoneinfo["Africa/Nouakchott"] = {"f":"GMT","o":"0:0","c":"MR","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Asia/Muscat"] = {"f":"GST","o":"4:0","c":"OM","n":"Arabian {c} Time"};
ilib.data.zoneinfo["Asia/Qatar"] = {"f":"AST","o":"3:0","c":"QA","n":"Arab {c} Time"};
ilib.data.zoneinfo["Asia/Riyadh"] = {"f":"AST","o":"3:0","c":"SA","n":"Arab {c} Time"};
ilib.data.zoneinfo["Africa/Khartoum"] = {"f":"EAT","o":"3:0","c":"SD","n":"E. Africa {c} Time"};
ilib.data.zoneinfo["Asia/Damascus"] = {"e":{"m":10,"r":"l5","t":"0:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l5","t":"0:0","v":"1:0"},"c":"SY","n":"Syria {c} Time"};
ilib.data.zoneinfo["Africa/Tunis"] = {"f":"CEST","o":"1:0","c":"TN","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["Asia/Aden"] = {"f":"AST","o":"3:0","c":"YE","n":"Arab {c} Time"};
ilib.data.zoneinfo["Africa/Dar_es_Salaam"] = {"f":"EAT","o":"3:0","c":"TZ","n":"E. Africa {c} Time"};
ilib.data.zoneinfo["Asia/Kolkata"] = {"f":"IST","o":"5:30","c":"IN","n":"India {c} Time"};
ilib.data.zoneinfo["Asia/Baku"] = {"e":{"m":10,"r":"l0","t":"5:0"},"f":"AZ{c}T","o":"4:0","s":{"c":"S","m":3,"r":"l0","t":"4:0","v":"1:0"},"c":"AZ","n":"Azerbaijan {c} Time"};
ilib.data.zoneinfo["Europe/Minsk"] = {"f":"FET","o":"3:0","c":"BY","n":"Kaliningrad {c} Time"};
ilib.data.zoneinfo["Africa/Lusaka"] = {"f":"CAT","o":"2:0","c":"ZM","n":"South Africa {c} Time"};
ilib.data.zoneinfo["Europe/Sofia"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"BG","n":"FLE {c} Time"};
ilib.data.zoneinfo["Africa/Bamako"] = {"f":"GMT","o":"0:0","c":"ML","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Europe/Paris"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"FR","n":"Romance {c} Time"};
ilib.data.zoneinfo["Europe/Sarajevo"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"BA","n":"Central European {c} Time"};
ilib.data.zoneinfo["Europe/Podgorica"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"ME","n":"Central Europe {c} Time"};
ilib.data.zoneinfo["Europe/Prague"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"CZ","n":"Central Europe {c} Time"};
ilib.data.zoneinfo["Europe/Copenhagen"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"DK","n":"Romance {c} Time"};
ilib.data.zoneinfo["Europe/Vienna"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"AT","n":"W. Europe {c} Time"};
ilib.data.zoneinfo["Europe/Zurich"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"CH","n":"W. Europe {c} Time"};
ilib.data.zoneinfo["Europe/Berlin"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"DE","n":"W. Europe {c} Time"};
ilib.data.zoneinfo["Europe/Athens"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"GR","n":"GTB {c} Time"};
ilib.data.zoneinfo["Australia/Lord_Howe"] = {"e":{"c":"S","m":4,"r":"0>1","t":"2:0"},"f":"LH{c}T","o":"10:30","s":{"c":"D","m":10,"r":"0>1","t":"2:0","v":"0:30"},"c":"AU"};
ilib.data.zoneinfo["Antarctica/Macquarie"] = {"f":"MIST","o":"11:0","c":"AU","n":"Central Pacific {c} Time"};
ilib.data.zoneinfo["Australia/Hobart"] = {"e":{"c":"S","m":4,"r":"0>1","t":"3:0"},"f":"AE{c}T","o":"10:0","s":{"c":"D","m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"Tasmania {c} Time"};
ilib.data.zoneinfo["Australia/Currie"] = {"e":{"c":"S","m":4,"r":"0>1","t":"3:0"},"f":"AE{c}T","o":"10:0","s":{"c":"D","m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"Tasmania {c} Time"};
ilib.data.zoneinfo["Australia/Melbourne"] = {"e":{"c":"S","m":4,"r":"0>1","t":"3:0"},"f":"AE{c}T","o":"10:0","s":{"c":"D","m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"AUS Eastern {c} Time"};
ilib.data.zoneinfo["Australia/Sydney"] = {"e":{"c":"S","m":4,"r":"0>1","t":"3:0"},"f":"AE{c}T","o":"10:0","s":{"c":"D","m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"AUS Eastern {c} Time"};
ilib.data.zoneinfo["Australia/Broken_Hill"] = {"e":{"c":"S","m":4,"r":"0>1","t":"3:0"},"f":"AC{c}T","o":"9:30","s":{"c":"D","m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"Cen. Australia {c} Time"};
ilib.data.zoneinfo["Australia/Brisbane"] = {"f":"AEST","o":"10:0","c":"AU","n":"E. Australia {c} Time"};
ilib.data.zoneinfo["Australia/Lindeman"] = {"f":"AEST","o":"10:0","c":"AU","n":"E. Australia {c} Time"};
ilib.data.zoneinfo["Australia/Adelaide"] = {"e":{"c":"S","m":4,"r":"0>1","t":"3:0"},"f":"AC{c}T","o":"9:30","s":{"c":"D","m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"AU","n":"Cen. Australia {c} Time"};
ilib.data.zoneinfo["Australia/Darwin"] = {"f":"ACST","o":"9:30","c":"AU","n":"AUS Central {c} Time"};
ilib.data.zoneinfo["Australia/Perth"] = {"f":"AWST","o":"8:0","c":"AU","n":"W. Australia {c} Time"};
ilib.data.zoneinfo["Australia/Eucla"] = {"f":"ACWST","o":"8:45","c":"AU"};
ilib.data.zoneinfo["America/St_Johns"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"N{c}T","o":"-3:30","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Newfoundland {c} Time"};
ilib.data.zoneinfo["America/Halifax"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"A{c}T","o":"-4:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Atlantic {c} Time"};
ilib.data.zoneinfo["America/Glace_Bay"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"A{c}T","o":"-4:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Atlantic {c} Time"};
ilib.data.zoneinfo["America/Moncton"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"A{c}T","o":"-4:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Atlantic {c} Time"};
ilib.data.zoneinfo["America/Goose_Bay"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"A{c}T","o":"-4:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Atlantic {c} Time"};
ilib.data.zoneinfo["America/Blanc-Sablon"] = {"f":"AST","o":"-4:0","c":"CA","n":"SA Western {c} Time"};
ilib.data.zoneinfo["America/Toronto"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Eastern {c} Time"};
ilib.data.zoneinfo["America/Nipigon"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Eastern {c} Time"};
ilib.data.zoneinfo["America/Thunder_Bay"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Eastern {c} Time"};
ilib.data.zoneinfo["America/Iqaluit"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Eastern {c} Time"};
ilib.data.zoneinfo["America/Pangnirtung"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Eastern {c} Time"};
ilib.data.zoneinfo["America/Resolute"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Central {c} Time"};
ilib.data.zoneinfo["America/Atikokan"] = {"f":"EST","o":"-5:0","c":"CA","n":"SA Pacific {c} Time"};
ilib.data.zoneinfo["America/Rankin_Inlet"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Central {c} Time"};
ilib.data.zoneinfo["America/Winnipeg"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Central {c} Time"};
ilib.data.zoneinfo["America/Rainy_River"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Central {c} Time"};
ilib.data.zoneinfo["America/Regina"] = {"f":"CST","o":"-6:0","c":"CA","n":"Canada Central {c} Time"};
ilib.data.zoneinfo["America/Swift_Current"] = {"f":"CST","o":"-6:0","c":"CA","n":"Canada Central {c} Time"};
ilib.data.zoneinfo["America/Edmonton"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Mountain {c} Time"};
ilib.data.zoneinfo["America/Cambridge_Bay"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Mountain {c} Time"};
ilib.data.zoneinfo["America/Yellowknife"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Mountain {c} Time"};
ilib.data.zoneinfo["America/Inuvik"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Mountain {c} Time"};
ilib.data.zoneinfo["America/Creston"] = {"f":"MST","o":"-7:0","c":"CA","n":"US Mountain {c} Time"};
ilib.data.zoneinfo["America/Dawson_Creek"] = {"f":"MST","o":"-7:0","c":"CA","n":"US Mountain {c} Time"};
ilib.data.zoneinfo["America/Vancouver"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Pacific {c} Time"};
ilib.data.zoneinfo["America/Whitehorse"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Pacific {c} Time"};
ilib.data.zoneinfo["America/Dawson"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"CA","n":"Pacific {c} Time"};
ilib.data.zoneinfo["America/Montreal"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"n":"Eastern {c} Time"};
ilib.data.zoneinfo["Europe/London"] = {"e":{"m":10,"r":"l0","t":"2:0"},"f":"GMT/BST","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"GB","n":"GMT {c} Time"};
ilib.data.zoneinfo["Africa/Banjul"] = {"f":"GMT","o":"0:0","c":"GM","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Asia/Hong_Kong"] = {"f":"HKST","o":"8:0","c":"HK","n":"China {c} Time"};
ilib.data.zoneinfo["Europe/Dublin"] = {"e":{"m":10,"r":"l0","t":"2:0"},"f":"GMT/IST","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"IE","n":"GMT {c} Time"};
ilib.data.zoneinfo["Africa/Nairobi"] = {"f":"EAT","o":"3:0","c":"KE","n":"E. Africa {c} Time"};
ilib.data.zoneinfo["Asia/Colombo"] = {"f":"IST","o":"5:30","c":"LK","n":"Sri Lanka {c} Time"};
ilib.data.zoneinfo["Africa/Monrovia"] = {"f":"GMT","o":"0:0","c":"LR","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Africa/Blantyre"] = {"f":"CAT","o":"2:0","c":"MW","n":"South Africa {c} Time"};
ilib.data.zoneinfo["Asia/Kuala_Lumpur"] = {"f":"MYT","o":"8:0","c":"MY","n":"Singapore {c} Time"};
ilib.data.zoneinfo["Asia/Kuching"] = {"f":"MYT","o":"8:0","c":"MY","n":"Singapore {c} Time"};
ilib.data.zoneinfo["Africa/Lagos"] = {"f":"WAT","o":"1:0","c":"NG","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["Pacific/Auckland"] = {"e":{"c":"S","m":4,"r":"0>1","t":"3:0"},"f":"NZ{c}T","o":"12:0","s":{"c":"D","m":9,"r":"l0","t":"2:0","v":"1:0"},"c":"NZ","n":"New Zealand {c} Time"};
ilib.data.zoneinfo["Pacific/Chatham"] = {"e":{"c":"S","m":4,"r":"0>1","t":"3:45"},"f":"CHA{c}T","o":"12:45","s":{"c":"D","m":9,"r":"l0","t":"2:45","v":"1:0"},"c":"NZ"};
ilib.data.zoneinfo["Asia/Manila"] = {"f":"PHST","o":"8:0","c":"PH","n":"Singapore {c} Time"};
ilib.data.zoneinfo["Asia/Karachi"] = {"f":"PKST","o":"5:0","c":"PK","n":"Pakistan {c} Time"};
ilib.data.zoneinfo["America/Puerto_Rico"] = {"f":"AST","o":"-4:0","c":"PR","n":"SA Western {c} Time"};
ilib.data.zoneinfo["Africa/Kigali"] = {"f":"CAT","o":"2:0","c":"RW","n":"South Africa {c} Time"};
ilib.data.zoneinfo["Asia/Singapore"] = {"f":"SGT","o":"8:0","c":"SG","n":"Singapore {c} Time"};
ilib.data.zoneinfo["Africa/Freetown"] = {"f":"GMT","o":"0:0","c":"SL","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Africa/Kampala"] = {"f":"EAT","o":"3:0","c":"UG","n":"E. Africa {c} Time"};
ilib.data.zoneinfo["America/New_York"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Eastern {c} Time"};
ilib.data.zoneinfo["America/Detroit"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Eastern {c} Time"};
ilib.data.zoneinfo["America/Chicago"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Central {c} Time"};
ilib.data.zoneinfo["America/Menominee"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Central {c} Time"};
ilib.data.zoneinfo["America/Denver"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Mountain {c} Time"};
ilib.data.zoneinfo["America/Boise"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Mountain {c} Time"};
ilib.data.zoneinfo["America/Phoenix"] = {"f":"MST","o":"-7:0","c":"US","n":"US Mountain {c} Time"};
ilib.data.zoneinfo["America/Los_Angeles"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Pacific {c} Time"};
ilib.data.zoneinfo["America/Metlakatla"] = {"f":"PST","o":"-8:0","c":"US"};
ilib.data.zoneinfo["America/Anchorage"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"AK{c}T","o":"-9:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Alaskan {c} Time"};
ilib.data.zoneinfo["America/Juneau"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"AK{c}T","o":"-9:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Alaskan {c} Time"};
ilib.data.zoneinfo["America/Sitka"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"AK{c}T","o":"-9:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Alaskan {c} Time"};
ilib.data.zoneinfo["America/Yakutat"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"AK{c}T","o":"-9:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Alaskan {c} Time"};
ilib.data.zoneinfo["America/Nome"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"AK{c}T","o":"-9:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US","n":"Alaskan {c} Time"};
ilib.data.zoneinfo["America/Adak"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"HA{c}T","o":"-10:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"US"};
ilib.data.zoneinfo["Pacific/Honolulu"] = {"f":"HST","o":"-10:0","c":"US","n":"Hawaiian {c} Time"};
ilib.data.zoneinfo["America/Bogota"] = {"f":"COST","o":"-5:0","c":"CO","n":"SA Pacific {c} Time"};
ilib.data.zoneinfo["America/Costa_Rica"] = {"f":"CST","o":"-6:0","c":"CR","n":"Central America {c} Time"};
ilib.data.zoneinfo["America/Santo_Domingo"] = {"f":"AST","o":"-4:0","c":"DO","n":"SA Western {c} Time"};
ilib.data.zoneinfo["America/Guayaquil"] = {"f":"ECT","o":"-5:0","c":"EC","n":"SA Pacific {c} Time"};
ilib.data.zoneinfo["Pacific/Galapagos"] = {"f":"GALT","o":"-6:0","c":"EC","n":"Central America {c} Time"};
ilib.data.zoneinfo["Europe/Madrid"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"ES","n":"Romance {c} Time"};
ilib.data.zoneinfo["Africa/Ceuta"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"ES","n":"Romance {c} Time"};
ilib.data.zoneinfo["Atlantic/Canary"] = {"e":{"m":10,"r":"l0","t":"2:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"ES","n":"GMT {c} Time"};
ilib.data.zoneinfo["Africa/Malabo"] = {"f":"WAT","o":"1:0","c":"GQ","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["America/Guatemala"] = {"f":"CST","o":"-6:0","c":"GT","n":"Central America {c} Time"};
ilib.data.zoneinfo["America/Tegucigalpa"] = {"f":"CST","o":"-6:0","c":"HN","n":"Central America {c} Time"};
ilib.data.zoneinfo["America/Mexico_City"] = {"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time (Mexico)"};
ilib.data.zoneinfo["America/Cancun"] = {"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time (Mexico)"};
ilib.data.zoneinfo["America/Merida"] = {"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time (Mexico)"};
ilib.data.zoneinfo["America/Monterrey"] = {"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time (Mexico)"};
ilib.data.zoneinfo["America/Matamoros"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time"};
ilib.data.zoneinfo["America/Mazatlan"] = {"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Mountain {c} Time (Mexico)"};
ilib.data.zoneinfo["America/Chihuahua"] = {"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Mountain {c} Time (Mexico)"};
ilib.data.zoneinfo["America/Ojinaga"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"MX","n":"Mountain {c} Time"};
ilib.data.zoneinfo["America/Hermosillo"] = {"f":"MST","o":"-7:0","c":"MX","n":"US Mountain {c} Time"};
ilib.data.zoneinfo["America/Tijuana"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"c":"MX","n":"Pacific {c} Time"};
ilib.data.zoneinfo["America/Santa_Isabel"] = {"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Pacific {c} Time (Mexico)"};
ilib.data.zoneinfo["America/Bahia_Banderas"] = {"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":4,"r":"0>1","t":"2:0","v":"1:0"},"c":"MX","n":"Central {c} Time (Mexico)"};
ilib.data.zoneinfo["America/El_Salvador"] = {"f":"CST","o":"-6:0","c":"SV","n":"Central America {c} Time"};
ilib.data.zoneinfo["America/Montevideo"] = {"e":{"m":3,"r":"0>8","t":"2:0"},"f":"UY{c}T","o":"-3:0","s":{"c":"S","m":10,"r":"0>1","t":"2:0","v":"1:0"},"c":"UY","n":"Montevideo {c} Time"};
ilib.data.zoneinfo["America/Caracas"] = {"f":"VET","o":"-4:30","c":"VE","n":"Venezuela {c} Time"};
ilib.data.zoneinfo["Europe/Tallinn"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"EE","n":"FLE {c} Time"};
ilib.data.zoneinfo["Asia/Kabul"] = {"f":"AFT","o":"4:30","c":"AF","n":"Afghanistan {c} Time"};
ilib.data.zoneinfo["Asia/Tehran"] = {"e":{"c":"S","m":9,"r":"22","t":"0:0"},"f":"IR{c}T","o":"3:30","s":{"c":"D","m":3,"r":"22","t":"0:0","v":"1:0"},"c":"IR","n":"Iran {c} Time"};
ilib.data.zoneinfo["Africa/Dakar"] = {"f":"GMT","o":"0:0","c":"SN","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Europe/Helsinki"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"FI","n":"FLE {c} Time"};
ilib.data.zoneinfo["Pacific/Fiji"] = {"e":{"m":1,"r":"0>18","t":"2:0"},"f":"FJ{c}T","o":"12:0","s":{"c":"S","m":10,"r":"0>21","t":"2:0","v":"1:0"},"c":"FJ","n":"Fiji {c} Time"};
ilib.data.zoneinfo["Europe/Andorra"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"AD","n":"W. Europe {c} Time"};
ilib.data.zoneinfo["Europe/Brussels"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"BE","n":"Romance {c} Time"};
ilib.data.zoneinfo["Africa/Ouagadougou"] = {"f":"GMT","o":"0:0","c":"BF","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Africa/Porto-Novo"] = {"f":"WAT","o":"1:0","c":"BJ","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["Africa/Kinshasa"] = {"f":"WAT","o":"1:0","c":"CD","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["Africa/Lubumbashi"] = {"f":"CAT","o":"2:0","c":"CD","n":"South Africa {c} Time"};
ilib.data.zoneinfo["Africa/Bangui"] = {"f":"WAT","o":"1:0","c":"CF","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["Africa/Brazzaville"] = {"f":"WAT","o":"1:0","c":"CG","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["Africa/Abidjan"] = {"f":"GMT","o":"0:0","c":"CI","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Africa/Libreville"] = {"f":"WAT","o":"1:0","c":"GA","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["Africa/Conakry"] = {"f":"GMT","o":"0:0","c":"GN","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Europe/Luxembourg"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"LU","n":"W. Europe {c} Time"};
ilib.data.zoneinfo["Indian/Antananarivo"] = {"f":"EAT","o":"3:0","c":"MG","n":"E. Africa {c} Time"};
ilib.data.zoneinfo["Africa/Lome"] = {"f":"GMT","o":"0:0","c":"TG","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Indian/Mayotte"] = {"f":"EAT","o":"3:0","c":"YT","n":"E. Africa {c} Time"};
ilib.data.zoneinfo["Asia/Jerusalem"] = {"e":{"c":"S","m":10,"r":"l0","t":"2:0"},"f":"I{c}T","o":"2:0","s":{"c":"D","m":3,"r":"5>23","t":"2:0","v":"1:0"},"c":"IL","n":"Israel {c} Time"};
ilib.data.zoneinfo["Europe/Zagreb"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"HR","n":"Central European {c} Time"};
ilib.data.zoneinfo["Europe/Budapest"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"HU","n":"Central Europe {c} Time"};
ilib.data.zoneinfo["Asia/Jakarta"] = {"f":"WIB","o":"7:0","c":"ID","n":"SE Asia {c} Time"};
ilib.data.zoneinfo["Asia/Pontianak"] = {"f":"WIB","o":"7:0","c":"ID","n":"SE Asia {c} Time"};
ilib.data.zoneinfo["Asia/Makassar"] = {"f":"WITA","o":"8:0","c":"ID","n":"Singapore {c} Time"};
ilib.data.zoneinfo["Asia/Jayapura"] = {"f":"WIT","o":"9:0","c":"ID","n":"Tokyo {c} Time"};
ilib.data.zoneinfo["Europe/Rome"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"IT","n":"W. Europe {c} Time"};
ilib.data.zoneinfo["Europe/San_Marino"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"SM","n":"W. Europe {c} Time"};
ilib.data.zoneinfo["Asia/Tokyo"] = {"f":"JST","o":"9:0","c":"JP","n":"Tokyo {c} Time"};
ilib.data.zoneinfo["Asia/Almaty"] = {"f":"ALMT","o":"6:0","c":"KZ","n":"Central Asia {c} Time"};
ilib.data.zoneinfo["Asia/Qyzylorda"] = {"f":"QYZT","o":"6:0","c":"KZ","n":"Central Asia {c} Time"};
ilib.data.zoneinfo["Asia/Aqtobe"] = {"f":"AQTT","o":"5:0","c":"KZ","n":"West Asia {c} Time"};
ilib.data.zoneinfo["Asia/Aqtau"] = {"f":"AQTT","o":"5:0","c":"KZ","n":"West Asia {c} Time"};
ilib.data.zoneinfo["Asia/Oral"] = {"f":"ORAT","o":"5:0","c":"KZ","n":"West Asia {c} Time"};
ilib.data.zoneinfo["Asia/Seoul"] = {"f":"KST","o":"9:0","c":"KR","n":"Korea {c} Time"};
ilib.data.zoneinfo["Europe/Vilnius"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"LT","n":"FLE {c} Time"};
ilib.data.zoneinfo["Europe/Riga"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"LV","n":"FLE {c} Time"};
ilib.data.zoneinfo["Pacific/Rarotonga"] = {"f":"CKST","o":"-10:0","c":"CK","n":"Hawaiian {c} Time"};
ilib.data.zoneinfo["Europe/Skopje"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"MK","n":"Central European {c} Time"};
ilib.data.zoneinfo["Asia/Shanghai"] = {"f":"CST","o":"8:0","c":"CN","n":"China {c} Time"};
ilib.data.zoneinfo["Asia/Harbin"] = {"f":"CST","o":"8:0","c":"CN","n":"China {c} Time"};
ilib.data.zoneinfo["Asia/Chongqing"] = {"f":"CST","o":"8:0","c":"CN","n":"China {c} Time"};
ilib.data.zoneinfo["Asia/Urumqi"] = {"f":"XJT","o":"6:0","c":"CN","n":"China {c} Time"};
ilib.data.zoneinfo["Asia/Kashgar"] = {"f":"CST","o":"8:0","c":"CN","n":"China {c} Time"};
ilib.data.zoneinfo["Asia/Brunei"] = {"f":"BNT","o":"8:0","c":"BN","n":"Singapore {c} Time"};
ilib.data.zoneinfo["Europe/Oslo"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"NO","n":"W. Europe {c} Time"};
ilib.data.zoneinfo["America/Curacao"] = {"f":"AST","o":"-4:0","c":"CW","n":"SA Western {c} Time"};
ilib.data.zoneinfo["America/Cayenne"] = {"f":"GFT","o":"-3:0","c":"GF","n":"SA Eastern {c} Time"};
ilib.data.zoneinfo["Europe/Amsterdam"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"NL","n":"W. Europe {c} Time"};
ilib.data.zoneinfo["America/Paramaribo"] = {"f":"SRT","o":"-3:0","c":"SR","n":"SA Eastern {c} Time"};
ilib.data.zoneinfo["Arctic/Longyearbyen"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"SJ","n":"W. Europe {c} Time"};
ilib.data.zoneinfo["Europe/Kaliningrad"] = {"f":"EET","o":"2:0","c":"RU","n":"Kaliningrad {c} Time"};
ilib.data.zoneinfo["Europe/Moscow"] = {"f":"MSK","o":"3:0","c":"RU","n":"Russian {c} Time"};
ilib.data.zoneinfo["Europe/Simferopol"] = {"f":"MSK","o":"3:0","c":"RU","n":"FLE {c} Time"};
ilib.data.zoneinfo["Europe/Volgograd"] = {"f":"MSK","o":"3:0","c":"RU","n":"Russian {c} Time"};
ilib.data.zoneinfo["Europe/Samara"] = {"f":"SAMT","o":"4:0","c":"RU","n":"Russian {c} Time"};
ilib.data.zoneinfo["Asia/Yekaterinburg"] = {"f":"YEKT","o":"5:0","c":"RU","n":"Ekaterinburg {c} Time"};
ilib.data.zoneinfo["Asia/Omsk"] = {"f":"OMST","o":"6:0","c":"RU","n":"N. Central Asia {c} Time"};
ilib.data.zoneinfo["Asia/Novosibirsk"] = {"f":"NOVT","o":"6:0","c":"RU","n":"N. Central Asia {c} Time"};
ilib.data.zoneinfo["Asia/Novokuznetsk"] = {"f":"KRAT","o":"7:0","c":"RU","n":"N. Central Asia {c} Time"};
ilib.data.zoneinfo["Asia/Krasnoyarsk"] = {"f":"KRAT","o":"7:0","c":"RU","n":"North Asia {c} Time"};
ilib.data.zoneinfo["Asia/Irkutsk"] = {"f":"IRKT","o":"8:0","c":"RU","n":"North Asia East {c} Time"};
ilib.data.zoneinfo["Asia/Chita"] = {"f":"IRKT","o":"8:0","c":"RU"};
ilib.data.zoneinfo["Asia/Yakutsk"] = {"f":"YAKT","o":"9:0","c":"RU","n":"Yakutsk {c} Time"};
ilib.data.zoneinfo["Asia/Khandyga"] = {"f":"YAKT","o":"9:0","c":"RU","n":"Yakutsk {c} Time"};
ilib.data.zoneinfo["Asia/Vladivostok"] = {"f":"VLAT","o":"10:0","c":"RU","n":"Vladivostok {c} Time"};
ilib.data.zoneinfo["Asia/Sakhalin"] = {"f":"SAKT","o":"10:0","c":"RU","n":"Vladivostok {c} Time"};
ilib.data.zoneinfo["Asia/Ust-Nera"] = {"f":"VLAT","o":"10:0","c":"RU","n":"Vladivostok {c} Time"};
ilib.data.zoneinfo["Asia/Magadan"] = {"f":"MAGT","o":"10:0","c":"RU","n":"Magadan {c} Time"};
ilib.data.zoneinfo["Asia/Srednekolymsk"] = {"f":"SRET","o":"11:0","c":"RU"};
ilib.data.zoneinfo["Asia/Kamchatka"] = {"f":"PETT","o":"12:0","c":"RU","n":"Magadan {c} Time"};
ilib.data.zoneinfo["Asia/Anadyr"] = {"f":"ANAT","o":"12:0","c":"RU","n":"Magadan {c} Time"};
ilib.data.zoneinfo["Europe/Warsaw"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"PL","n":"Central European {c} Time"};
ilib.data.zoneinfo["Africa/Luanda"] = {"f":"WAT","o":"1:0","c":"AO","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["America/Noronha"] = {"f":"FNT","o":"-2:0","c":"BR","n":"UTC-02"};
ilib.data.zoneinfo["America/Belem"] = {"f":"BRT","o":"-3:0","c":"BR","n":"SA Eastern {c} Time"};
ilib.data.zoneinfo["America/Fortaleza"] = {"f":"BRT","o":"-3:0","c":"BR","n":"SA Eastern {c} Time"};
ilib.data.zoneinfo["America/Recife"] = {"f":"BRT","o":"-3:0","c":"BR","n":"SA Eastern {c} Time"};
ilib.data.zoneinfo["America/Araguaina"] = {"f":"BRT","o":"-3:0","c":"BR","n":"E. South America {c} Time"};
ilib.data.zoneinfo["America/Maceio"] = {"f":"BRT","o":"-3:0","c":"BR","n":"SA Eastern {c} Time"};
ilib.data.zoneinfo["America/Bahia"] = {"f":"BRT","o":"-3:0","c":"BR","n":"Bahia {c} Time"};
ilib.data.zoneinfo["America/Sao_Paulo"] = {"e":{"m":2,"r":"0>15","t":"0:0"},"f":"BR{c}T","o":"-3:0","s":{"c":"S","m":10,"r":"0>15","t":"0:0","v":"1:0"},"c":"BR","n":"E. South America {c} Time"};
ilib.data.zoneinfo["America/Campo_Grande"] = {"e":{"m":2,"r":"0>15","t":"0:0"},"f":"AM{c}T","o":"-4:0","s":{"c":"S","m":10,"r":"0>15","t":"0:0","v":"1:0"},"c":"BR","n":"Central Brazilian {c} Time"};
ilib.data.zoneinfo["America/Cuiaba"] = {"e":{"m":2,"r":"0>15","t":"0:0"},"f":"AM{c}T","o":"-4:0","s":{"c":"S","m":10,"r":"0>15","t":"0:0","v":"1:0"},"c":"BR","n":"Central Brazilian {c} Time"};
ilib.data.zoneinfo["America/Santarem"] = {"f":"BRT","o":"-3:0","c":"BR","n":"SA Eastern {c} Time"};
ilib.data.zoneinfo["America/Porto_Velho"] = {"f":"AMT","o":"-4:0","c":"BR","n":"SA Western {c} Time"};
ilib.data.zoneinfo["America/Boa_Vista"] = {"f":"AMT","o":"-4:0","c":"BR","n":"SA Western {c} Time"};
ilib.data.zoneinfo["America/Manaus"] = {"f":"AMT","o":"-4:0","c":"BR","n":"SA Western {c} Time"};
ilib.data.zoneinfo["America/Eirunepe"] = {"f":"ACT","o":"-5:0","c":"BR","n":"SA Western {c} Time"};
ilib.data.zoneinfo["America/Rio_Branco"] = {"f":"ACT","o":"-5:0","c":"BR","n":"SA Western {c} Time"};
ilib.data.zoneinfo["Atlantic/Cape_Verde"] = {"f":"CVT","o":"-1:0","c":"CV","n":"Cape Verde {c} Time"};
ilib.data.zoneinfo["Africa/Bissau"] = {"f":"GMT","o":"0:0","c":"GW","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Asia/Macau"] = {"f":"CST","o":"8:0","c":"MO","n":"China {c} Time"};
ilib.data.zoneinfo["Africa/Maputo"] = {"f":"CAT","o":"2:0","c":"MZ","n":"South Africa {c} Time"};
ilib.data.zoneinfo["Europe/Lisbon"] = {"e":{"m":10,"r":"l0","t":"2:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"PT","n":"GMT {c} Time"};
ilib.data.zoneinfo["Atlantic/Madeira"] = {"e":{"m":10,"r":"l0","t":"2:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"},"c":"PT","n":"GMT {c} Time"};
ilib.data.zoneinfo["Atlantic/Azores"] = {"e":{"m":10,"r":"l0","t":"1:0"},"f":"AZO{c}T","o":"-1:0","s":{"c":"S","m":3,"r":"l0","t":"0:0","v":"1:0"},"c":"PT","n":"Azores {c} Time"};
ilib.data.zoneinfo["Africa/Sao_Tome"] = {"f":"GMT","o":"0:0","c":"ST","n":"Greenwich {c} Time"};
ilib.data.zoneinfo["Asia/Dili"] = {"f":"TLT","o":"9:0","c":"TL","n":"Tokyo {c} Time"};
ilib.data.zoneinfo["Europe/Bucharest"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"RO","n":"GTB {c} Time"};
ilib.data.zoneinfo["Europe/Belgrade"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"RS","n":"Central Europe {c} Time"};
ilib.data.zoneinfo["Asia/Bishkek"] = {"f":"KGT","o":"6:0","c":"KG","n":"Central Asia {c} Time"};
ilib.data.zoneinfo["Asia/Ashgabat"] = {"f":"TMT","o":"5:0","c":"TM","n":"West Asia {c} Time"};
ilib.data.zoneinfo["Europe/Bratislava"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"SK","n":"Central Europe {c} Time"};
ilib.data.zoneinfo["Europe/Ljubljana"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"SI","n":"Central Europe {c} Time"};
ilib.data.zoneinfo["Africa/Mogadishu"] = {"f":"EAT","o":"3:0","c":"SO","n":"E. Africa {c} Time"};
ilib.data.zoneinfo["Europe/Tirane"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"AL","n":"Central Europe {c} Time"};
ilib.data.zoneinfo["Africa/Maseru"] = {"f":"SAST","o":"2:0","c":"LS","n":"South Africa {c} Time"};
ilib.data.zoneinfo["Europe/Stockholm"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"},"c":"SE","n":"W. Europe {c} Time"};
ilib.data.zoneinfo["Asia/Bangkok"] = {"f":"ICT","o":"7:0","c":"TH","n":"SE Asia {c} Time"};
ilib.data.zoneinfo["Europe/Istanbul"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"TR","n":"Turkey {c} Time"};
ilib.data.zoneinfo["Europe/Kiev"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"UA","n":"FLE {c} Time"};
ilib.data.zoneinfo["Europe/Uzhgorod"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"UA","n":"FLE {c} Time"};
ilib.data.zoneinfo["Europe/Zaporozhye"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"},"c":"UA","n":"FLE {c} Time"};
ilib.data.zoneinfo["Asia/Samarkand"] = {"f":"UZT","o":"5:0","c":"UZ","n":"West Asia {c} Time"};
ilib.data.zoneinfo["Asia/Tashkent"] = {"f":"UZT","o":"5:0","c":"UZ","n":"West Asia {c} Time"};
ilib.data.zoneinfo["Asia/Ho_Chi_Minh"] = {"f":"ICT","o":"7:0","c":"VN","n":"SE Asia {c} Time"};
ilib.data.zoneinfo["Asia/Taipei"] = {"f":"CST","o":"8:0","c":"TW","n":"Taipei {c} Time"};
ilib.data.zoneinfo["Iceland"] = {"f":"GMT","o":"0:0","c":"IS"};
ilib.data.zoneinfo["MST7MDT"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"M{c}T","o":"-7:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"n":"Mountain {c} Time"};
ilib.data.zoneinfo["EST"] = {"f":"EST","o":"-5:0"};
ilib.data.zoneinfo["PST8PDT"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"P{c}T","o":"-8:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"n":"Pacific {c} Time"};
ilib.data.zoneinfo["MST"] = {"f":"MST","o":"-7:0"};
ilib.data.zoneinfo["zonetab"] = {"AD":["Europe/Andorra"],"AE":["Asia/Dubai"],"AF":["Asia/Kabul"],"AG":["America/Antigua"],"AI":["America/Anguilla"],"AL":["Europe/Tirane"],"AM":["Asia/Yerevan"],"AO":["Africa/Luanda"],"AQ":["Antarctica/McMurdo","Antarctica/Rothera","Antarctica/Palmer","Antarctica/Mawson","Antarctica/Davis","Antarctica/Casey","Antarctica/Vostok","Antarctica/DumontDUrville","Antarctica/Syowa","Antarctica/Troll"],"AR":["America/Argentina/Buenos_Aires","America/Argentina/Cordoba","America/Argentina/Salta","America/Argentina/Jujuy","America/Argentina/Tucuman","America/Argentina/Catamarca","America/Argentina/La_Rioja","America/Argentina/San_Juan","America/Argentina/Mendoza","America/Argentina/San_Luis","America/Argentina/Rio_Gallegos","America/Argentina/Ushuaia"],"AS":["Pacific/Pago_Pago"],"AT":["Europe/Vienna"],"AU":["Australia/Lord_Howe","Antarctica/Macquarie","Australia/Hobart","Australia/Currie","Australia/Melbourne","Australia/Sydney","Australia/Broken_Hill","Australia/Brisbane","Australia/Lindeman","Australia/Adelaide","Australia/Darwin","Australia/Perth","Australia/Eucla"],"AW":["America/Aruba"],"AX":["Europe/Mariehamn"],"AZ":["Asia/Baku"],"BA":["Europe/Sarajevo"],"BB":["America/Barbados"],"BD":["Asia/Dhaka"],"BE":["Europe/Brussels"],"BF":["Africa/Ouagadougou"],"BG":["Europe/Sofia"],"BH":["Asia/Bahrain"],"BI":["Africa/Bujumbura"],"BJ":["Africa/Porto-Novo"],"BL":["America/St_Barthelemy"],"BM":["Atlantic/Bermuda"],"BN":["Asia/Brunei"],"BO":["America/La_Paz"],"BQ":["America/Kralendijk"],"BR":["America/Noronha","America/Belem","America/Fortaleza","America/Recife","America/Araguaina","America/Maceio","America/Bahia","America/Sao_Paulo","America/Campo_Grande","America/Cuiaba","America/Santarem","America/Porto_Velho","America/Boa_Vista","America/Manaus","America/Eirunepe","America/Rio_Branco"],"BS":["America/Nassau"],"BT":["Asia/Thimphu"],"BW":["Africa/Gaborone"],"BY":["Europe/Minsk"],"BZ":["America/Belize"],"CA":["America/St_Johns","America/Halifax","America/Glace_Bay","America/Moncton","America/Goose_Bay","America/Blanc-Sablon","America/Toronto","America/Nipigon","America/Thunder_Bay","America/Iqaluit","America/Pangnirtung","America/Resolute","America/Atikokan","America/Rankin_Inlet","America/Winnipeg","America/Rainy_River","America/Regina","America/Swift_Current","America/Edmonton","America/Cambridge_Bay","America/Yellowknife","America/Inuvik","America/Creston","America/Dawson_Creek","America/Vancouver","America/Whitehorse","America/Dawson","America/Montreal"],"CC":["Indian/Cocos"],"CD":["Africa/Kinshasa","Africa/Lubumbashi"],"CF":["Africa/Bangui"],"CG":["Africa/Brazzaville"],"CH":["Europe/Zurich"],"CI":["Africa/Abidjan"],"CK":["Pacific/Rarotonga"],"CL":["America/Santiago","Pacific/Easter"],"CM":["Africa/Douala"],"CN":["Asia/Shanghai","Asia/Harbin","Asia/Chongqing","Asia/Urumqi","Asia/Kashgar"],"CO":["America/Bogota"],"CR":["America/Costa_Rica"],"CU":["America/Havana"],"CV":["Atlantic/Cape_Verde"],"CW":["America/Curacao"],"CX":["Indian/Christmas"],"CY":["Asia/Nicosia"],"CZ":["Europe/Prague"],"DE":["Europe/Berlin","Europe/Busingen"],"DJ":["Africa/Djibouti"],"DK":["Europe/Copenhagen"],"DM":["America/Dominica"],"DO":["America/Santo_Domingo"],"DZ":["Africa/Algiers"],"EC":["America/Guayaquil","Pacific/Galapagos"],"EE":["Europe/Tallinn"],"EG":["Africa/Cairo"],"EH":["Africa/El_Aaiun"],"ER":["Africa/Asmara"],"ES":["Europe/Madrid","Africa/Ceuta","Atlantic/Canary"],"ET":["Africa/Addis_Ababa"],"FI":["Europe/Helsinki"],"FJ":["Pacific/Fiji"],"FK":["Atlantic/Stanley"],"FM":["Pacific/Chuuk","Pacific/Pohnpei","Pacific/Kosrae"],"FO":["Atlantic/Faroe"],"FR":["Europe/Paris"],"GA":["Africa/Libreville"],"GB":["Europe/London"],"GD":["America/Grenada"],"GE":["Asia/Tbilisi"],"GF":["America/Cayenne"],"GG":["Europe/Guernsey"],"GH":["Africa/Accra"],"GI":["Europe/Gibraltar"],"GL":["America/Godthab","America/Danmarkshavn","America/Scoresbysund","America/Thule"],"GM":["Africa/Banjul"],"GN":["Africa/Conakry"],"GP":["America/Guadeloupe"],"GQ":["Africa/Malabo"],"GR":["Europe/Athens"],"GS":["Atlantic/South_Georgia"],"GT":["America/Guatemala"],"GU":["Pacific/Guam"],"GW":["Africa/Bissau"],"GY":["America/Guyana"],"HK":["Asia/Hong_Kong"],"HN":["America/Tegucigalpa"],"HR":["Europe/Zagreb"],"HT":["America/Port-au-Prince"],"HU":["Europe/Budapest"],"ID":["Asia/Jakarta","Asia/Pontianak","Asia/Makassar","Asia/Jayapura"],"IE":["Europe/Dublin"],"IL":["Asia/Jerusalem"],"IM":["Europe/Isle_of_Man"],"IN":["Asia/Kolkata"],"IO":["Indian/Chagos"],"IQ":["Asia/Baghdad"],"IR":["Asia/Tehran"],"IS":["Atlantic/Reykjavik"],"IT":["Europe/Rome"],"JE":["Europe/Jersey"],"JM":["America/Jamaica"],"JO":["Asia/Amman"],"JP":["Asia/Tokyo"],"KE":["Africa/Nairobi"],"KG":["Asia/Bishkek"],"KH":["Asia/Phnom_Penh"],"KI":["Pacific/Tarawa","Pacific/Enderbury","Pacific/Kiritimati"],"KM":["Indian/Comoro"],"KN":["America/St_Kitts"],"KP":["Asia/Pyongyang"],"KR":["Asia/Seoul"],"KW":["Asia/Kuwait"],"KY":["America/Cayman"],"KZ":["Asia/Almaty","Asia/Qyzylorda","Asia/Aqtobe","Asia/Aqtau","Asia/Oral"],"LA":["Asia/Vientiane"],"LB":["Asia/Beirut"],"LC":["America/St_Lucia"],"LI":["Europe/Vaduz"],"LK":["Asia/Colombo"],"LR":["Africa/Monrovia"],"LS":["Africa/Maseru"],"LT":["Europe/Vilnius"],"LU":["Europe/Luxembourg"],"LV":["Europe/Riga"],"LY":["Africa/Tripoli"],"MA":["Africa/Casablanca"],"MC":["Europe/Monaco"],"MD":["Europe/Chisinau"],"ME":["Europe/Podgorica"],"MF":["America/Marigot"],"MG":["Indian/Antananarivo"],"MH":["Pacific/Majuro","Pacific/Kwajalein"],"MK":["Europe/Skopje"],"ML":["Africa/Bamako"],"MM":["Asia/Rangoon"],"MN":["Asia/Ulaanbaatar","Asia/Hovd","Asia/Choibalsan"],"MO":["Asia/Macau"],"MP":["Pacific/Saipan"],"MQ":["America/Martinique"],"MR":["Africa/Nouakchott"],"MS":["America/Montserrat"],"MT":["Europe/Malta"],"MU":["Indian/Mauritius"],"MV":["Indian/Maldives"],"MW":["Africa/Blantyre"],"MX":["America/Mexico_City","America/Cancun","America/Merida","America/Monterrey","America/Matamoros","America/Mazatlan","America/Chihuahua","America/Ojinaga","America/Hermosillo","America/Tijuana","America/Santa_Isabel","America/Bahia_Banderas"],"MY":["Asia/Kuala_Lumpur","Asia/Kuching"],"MZ":["Africa/Maputo"],"NA":["Africa/Windhoek"],"NC":["Pacific/Noumea"],"NE":["Africa/Niamey"],"NF":["Pacific/Norfolk"],"NG":["Africa/Lagos"],"NI":["America/Managua"],"NL":["Europe/Amsterdam"],"NO":["Europe/Oslo"],"NP":["Asia/Kathmandu"],"NR":["Pacific/Nauru"],"NU":["Pacific/Niue"],"NZ":["Pacific/Auckland","Pacific/Chatham"],"OM":["Asia/Muscat"],"PA":["America/Panama"],"PE":["America/Lima"],"PF":["Pacific/Tahiti","Pacific/Marquesas","Pacific/Gambier"],"PG":["Pacific/Port_Moresby"],"PH":["Asia/Manila"],"PK":["Asia/Karachi"],"PL":["Europe/Warsaw"],"PM":["America/Miquelon"],"PN":["Pacific/Pitcairn"],"PR":["America/Puerto_Rico"],"PS":["Asia/Gaza","Asia/Hebron"],"PT":["Europe/Lisbon","Atlantic/Madeira","Atlantic/Azores"],"PW":["Pacific/Palau"],"PY":["America/Asuncion"],"QA":["Asia/Qatar"],"RE":["Indian/Reunion"],"RO":["Europe/Bucharest"],"RS":["Europe/Belgrade"],"RU":["Europe/Kaliningrad","Europe/Moscow","Europe/Simferopol","Europe/Volgograd","Europe/Samara","Asia/Yekaterinburg","Asia/Omsk","Asia/Novosibirsk","Asia/Novokuznetsk","Asia/Krasnoyarsk","Asia/Irkutsk","Asia/Chita","Asia/Yakutsk","Asia/Khandyga","Asia/Vladivostok","Asia/Sakhalin","Asia/Ust-Nera","Asia/Magadan","Asia/Srednekolymsk","Asia/Kamchatka","Asia/Anadyr"],"RW":["Africa/Kigali"],"SA":["Asia/Riyadh"],"SB":["Pacific/Guadalcanal"],"SC":["Indian/Mahe"],"SD":["Africa/Khartoum"],"SE":["Europe/Stockholm"],"SG":["Asia/Singapore"],"SH":["Atlantic/St_Helena"],"SI":["Europe/Ljubljana"],"SJ":["Arctic/Longyearbyen"],"SK":["Europe/Bratislava"],"SL":["Africa/Freetown"],"SM":["Europe/San_Marino"],"SN":["Africa/Dakar"],"SO":["Africa/Mogadishu"],"SR":["America/Paramaribo"],"SS":["Africa/Juba"],"ST":["Africa/Sao_Tome"],"SV":["America/El_Salvador"],"SX":["America/Lower_Princes"],"SY":["Asia/Damascus"],"SZ":["Africa/Mbabane"],"TC":["America/Grand_Turk"],"TD":["Africa/Ndjamena"],"TF":["Indian/Kerguelen"],"TG":["Africa/Lome"],"TH":["Asia/Bangkok"],"TJ":["Asia/Dushanbe"],"TK":["Pacific/Fakaofo"],"TL":["Asia/Dili"],"TM":["Asia/Ashgabat"],"TN":["Africa/Tunis"],"TO":["Pacific/Tongatapu"],"TR":["Europe/Istanbul"],"TT":["America/Port_of_Spain"],"TV":["Pacific/Funafuti"],"TW":["Asia/Taipei"],"TZ":["Africa/Dar_es_Salaam"],"UA":["Europe/Kiev","Europe/Uzhgorod","Europe/Zaporozhye"],"UG":["Africa/Kampala"],"UM":["Pacific/Johnston","Pacific/Midway","Pacific/Wake"],"US":["America/New_York","America/Detroit","America/Kentucky/Louisville","America/Kentucky/Monticello","America/Indiana/Indianapolis","America/Indiana/Vincennes","America/Indiana/Winamac","America/Indiana/Marengo","America/Indiana/Petersburg","America/Indiana/Vevay","America/Chicago","America/Indiana/Tell_City","America/Indiana/Knox","America/Menominee","America/North_Dakota/Center","America/North_Dakota/New_Salem","America/North_Dakota/Beulah","America/Denver","America/Boise","America/Phoenix","America/Los_Angeles","America/Metlakatla","America/Anchorage","America/Juneau","America/Sitka","America/Yakutat","America/Nome","America/Adak","Pacific/Honolulu"],"UY":["America/Montevideo"],"UZ":["Asia/Samarkand","Asia/Tashkent"],"VA":["Europe/Vatican"],"VC":["America/St_Vincent"],"VE":["America/Caracas"],"VG":["America/Tortola"],"VI":["America/St_Thomas"],"VN":["Asia/Ho_Chi_Minh"],"VU":["Pacific/Efate"],"WF":["Pacific/Wallis"],"WS":["Pacific/Apia"],"YE":["Asia/Aden"],"YT":["Indian/Mayotte"],"ZA":["Africa/Johannesburg"],"ZM":["Africa/Lusaka"],"ZW":["Africa/Harare"]};
ilib.data.zoneinfo["EST5EDT"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"E{c}T","o":"-5:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"n":"Eastern {c} Time"};
ilib.data.zoneinfo["CET"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"CE{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"}};
ilib.data.zoneinfo["CST6CDT"] = {"e":{"c":"S","m":11,"r":"0>1","t":"2:0"},"f":"C{c}T","o":"-6:0","s":{"c":"D","m":3,"r":"0>8","t":"2:0","v":"1:0"},"n":"Central {c} Time"};
ilib.data.zoneinfo["WET"] = {"e":{"m":10,"r":"l0","t":"2:0"},"f":"WE{c}T","o":"0:0","s":{"c":"S","m":3,"r":"l0","t":"1:0","v":"1:0"}};
ilib.data.zoneinfo["Factory"] = {"f":"\"Local","o":"0:0"};
ilib.data.zoneinfo["MET"] = {"e":{"m":10,"r":"l0","t":"3:0"},"f":"ME{c}T","o":"1:0","s":{"c":"S","m":3,"r":"l0","t":"2:0","v":"1:0"}};
ilib.data.zoneinfo["EET"] = {"e":{"m":10,"r":"l0","t":"4:0"},"f":"EE{c}T","o":"2:0","s":{"c":"S","m":3,"r":"l0","t":"3:0","v":"1:0"}};
ilib.data.zoneinfo["HST"] = {"f":"HST","o":"-10:0"};
ilib.data.zoneinfo["Etc/GMT+2"] = {"f":"GMT+2","o":"-2:0","n":"UTC-02"};
ilib.data.zoneinfo["Etc/GMT"] = {"f":"GMT","o":"0:0","n":"UTC"};
ilib.data.zoneinfo["Etc/GMT-7"] = {"f":"GMT-7","o":"7:0","n":"SE Asia {c} Time"};
ilib.data.zoneinfo["Etc/UCT"] = {"f":"UCT","o":"0:0"};
ilib.data.zoneinfo["Etc/GMT-3"] = {"f":"GMT-3","o":"3:0","n":"E. Africa {c} Time"};
ilib.data.zoneinfo["Etc/GMT+5"] = {"f":"GMT+5","o":"-5:0","n":"SA Pacific {c} Time"};
ilib.data.zoneinfo["Etc/GMT-2"] = {"f":"GMT-2","o":"2:0","n":"South Africa {c} Time"};
ilib.data.zoneinfo["Etc/GMT-1"] = {"f":"GMT-1","o":"1:0","n":"W. Central Africa {c} Time"};
ilib.data.zoneinfo["Etc/GMT+11"] = {"f":"GMT+11","o":"-11:0","n":"UTC-11"};
ilib.data.zoneinfo["Etc/GMT-9"] = {"f":"GMT-9","o":"9:0","n":"Tokyo {c} Time"};
ilib.data.zoneinfo["Etc/GMT-11"] = {"f":"GMT-11","o":"11:0","n":"Central Pacific {c} Time"};
ilib.data.zoneinfo["Etc/GMT+6"] = {"f":"GMT+6","o":"-6:0","n":"Central America {c} Time"};
ilib.data.zoneinfo["Etc/GMT+12"] = {"f":"GMT+12","o":"-12:0","n":"Dateline {c} Time"};
ilib.data.zoneinfo["Etc/GMT-6"] = {"f":"GMT-6","o":"6:0","n":"Central Asia {c} Time"};
ilib.data.zoneinfo["Etc/GMT+1"] = {"f":"GMT+1","o":"-1:0","n":"Cape Verde {c} Time"};
ilib.data.zoneinfo["Etc/GMT-5"] = {"f":"GMT-5","o":"5:0","n":"West Asia {c} Time"};
ilib.data.zoneinfo["Etc/UTC"] = {"f":"UTC","o":"0:0"};
ilib.data.zoneinfo["Etc/GMT-14"] = {"f":"GMT-14","o":"14:0"};
ilib.data.zoneinfo["Etc/GMT-4"] = {"f":"GMT-4","o":"4:0","n":"Arabian {c} Time"};
ilib.data.zoneinfo["Etc/GMT+9"] = {"f":"GMT+9","o":"-9:0"};
ilib.data.zoneinfo["Etc/GMT-12"] = {"f":"GMT-12","o":"12:0","n":"UTC+12"};
ilib.data.zoneinfo["Etc/GMT+3"] = {"f":"GMT+3","o":"-3:0","n":"SA Eastern {c} Time"};
ilib.data.zoneinfo["Etc/GMT-10"] = {"f":"GMT-10","o":"10:0","n":"West Pacific {c} Time"};
ilib.data.zoneinfo["Etc/GMT+8"] = {"f":"GMT+8","o":"-8:0"};
ilib.data.zoneinfo["Etc/GMT+7"] = {"f":"GMT+7","o":"-7:0","n":"US Mountain {c} Time"};
ilib.data.zoneinfo["Etc/GMT+10"] = {"f":"GMT+10","o":"-10:0","n":"Hawaiian {c} Time"};
ilib.data.zoneinfo["Etc/GMT+4"] = {"f":"GMT+4","o":"-4:0","n":"SA Western {c} Time"};
ilib.data.zoneinfo["Etc/GMT-13"] = {"f":"GMT-13","o":"13:0","n":"Tonga {c} Time"};
ilib.data.zoneinfo["Etc/GMT-8"] = {"f":"GMT-8","o":"8:0","n":"Singapore {c} Time"};
/*
 * timezone.js - Definition of a time zone class
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js
localeinfo.js
util/utils.js
util/math.js
calendar/gregratadie.js
*/

// !data localeinfo zoneinfo

/**
 * @class
 * Create a time zone instance. 
 * 
 * This class reports and transforms
 * information about particular time zones.<p>
 * 
 * The options parameter may contain any of the following properties:
 * 
 * <ul>
 * <li><i>id</i> - The id of the requested time zone such as "Europe/London" or 
 * "America/Los_Angeles". These are taken from the IANA time zone database. (See
 * http://www.iana.org/time-zones for more information.) <p>
 * 
 * There is one special 
 * time zone that is not taken from the IANA database called simply "local". In
 * this case, this class will attempt to discover the current time zone and
 * daylight savings time settings by calling standard Javascript classes to 
 * determine the offsets from UTC. 
 * 
 * <li><i>locale</i> - The locale for this time zone.
 * 
 * <li><i>offset</i> - Choose the time zone based on the offset from UTC given in
 * number of minutes (negative is west, positive is east).
 * 
 * <li><i>onLoad</i> - a callback function to call when the data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the data is loaded, the onLoad function is called with the current 
 * instance as a parameter. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * There is currently no way in the ECMAscript
 * standard to tell which exact time zone is currently in use. Choosing the
 * id "locale" or specifying an explicit offset will not give a specific time zone, 
 * as it is impossible to tell with certainty which zone the offsets 
 * match.<p>
 * 
 * When the id "local" is given or the offset option is specified, this class will
 * have the following behaviours:
 * <ul>
 * <li>The display name will always be given as the RFC822 style, no matter what
 * style is requested
 * <li>The id will also be returned as the RFC822 style display name
 * <li>When the offset is explicitly given, this class will assume the time zone 
 * does not support daylight savings time, and the offsets will be calculated 
 * the same way year round.
 * <li>When the offset is explicitly given, the inDaylightSavings() method will 
 * always return false.
 * <li>When the id "local" is given, this class will attempt to determine the 
 * daylight savings time settings by examining the offset from UTC on Jan 1
 * and June 1 of the current year. If they are different, this class assumes
 * that the local time zone uses DST. When the offset for a particular date is
 * requested, it will use the built-in Javascript support to determine the 
 * offset for that date.
 * </ul> 
 * 
 * If a more specific time zone is 
 * needed with display names and known start/stop times for DST, use the "id" 
 * property instead to specify the time zone exactly. You can perhaps ask the
 * user which time zone they prefer so that your app does not need to guess.<p>
 * 
 * If the id and the offset are both not given, the default time zone for the 
 * locale is retrieved from
 * the locale info. If the locale is not specified, the default locale for the
 * library is used.<p>
 * 
 * Because this class was designed for use in web sites, and the vast majority
 * of dates and times being formatted are recent date/times, this class is simplified
 * by not implementing historical time zones. That is, when governments change the 
 * time zone rules for a particular zone, only the latest such rule is implemented 
 * in this class. That means that determining the offset for a date that is prior 
 * to the last change may give the wrong result. Historical time zone calculations
 * may be implemented in a later version of iLib if there is enough demand for it,
 * but it would entail a much larger set of time zone data that would have to be
 * loaded.  
 * 
 * Depends directive: !depends timezone.js
 * 
 * @constructor
 * @param {Object} options Options guiding the construction of this time zone instance
 */
ilib.TimeZone = function(options) {
	this.sync = true;
	this.locale = new ilib.Locale();
	this.isLocal = false;
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.id) {
			var id = options.id.toString();
			if (id === 'local') {
				this.isLocal = true;
				
				// use standard Javascript Date to figure out the time zone offsets
				var now = new Date(), 
					jan1 = new Date(now.getFullYear(), 0, 1),  // months in std JS Date object are 0-based
					jun1 = new Date(now.getFullYear(), 5, 1);
				
				// Javascript's method returns the offset backwards, so we have to
				// take the negative to get the correct offset
				this.offsetJan1 = -jan1.getTimezoneOffset();
				this.offsetJun1 = -jun1.getTimezoneOffset();
				// the offset of the standard time for the time zone is always the one that is closest 
				// to negative infinity of the two, no matter whether you are in the northern or southern 
				// hemisphere, east or west
				this.offset = Math.min(this.offsetJan1, this.offsetJun1);
			}
			this.id = id;
		} else if (options.offset) {
			this.offset = (typeof(options.offset) === 'string') ? parseInt(options.offset, 10) : options.offset;
			this.id = this.getDisplayName(undefined, undefined);
		}
		
		if (typeof(options.sync) !== 'undefined') {
			this.sync = !!options.sync;
		}
		
		this.loadParams = options.loadParams;
		this.onLoad = options.onLoad;
	}

	//console.log("timezone: locale is " + this.locale);
	
	if (!this.id) {
		new ilib.LocaleInfo(this.locale, {
			sync: this.sync,
			onLoad: ilib.bind(this, function (li) {
				this.id = li.getTimeZone() || "Etc/UTC";
				this._loadtzdata();
			})
		});
	} else {
		this._loadtzdata();
	}

	//console.log("localeinfo is: " + JSON.stringify(this.locinfo));
	//console.log("id is: " + JSON.stringify(this.id));
};

/*
 * Explanation of the compressed time zone info properties.
 * {
 *     "o": "8:0",      // offset from UTC
 *     "f": "W{c}T",    // standard abbreviation. For time zones that observe DST, the {c} replacement is replaced with the 
 *                      // letter in the e.c or s.c properties below 
 *     "e": {           // info about the end of DST
 *         "j": 78322.5 // Julian day when the transition happens. Either specify the "j" property or all of the "m", "r", and 
 *                      // "t" properties, but not both sets.
 *         "m": 3,      // month that it ends
 *         "r": "l0",   // rule for the day it ends "l" = "last", numbers are Sun=0 through Sat=6. Other syntax is "0>7". 
 *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=
 *         "t": "2:0",  // time of day that the DST turns off, hours:minutes
 *         "c": "S"     // character to replace into the abbreviation for standard time 
 *     },
 *     "s": {           // info about the start of DST
 *         "j": 78189.5 // Julian day when the transition happens. Either specify the "j" property or all of the "m", "r", and 
 *                      // "t" properties, but not both sets.
 *         "m": 10,     // month that it starts
 *         "r": "l0",   // rule for the day it starts "l" = "last", numbers are Sun=0 through Sat=6. Other syntax is "0>7".
 *                      // This means the 0-day (Sun) after the 7th of the month. Other possible operators are <, >, <=, >=
 *         "t": "2:0",  // time of day that the DST turns on, hours:minutes
 *         "v": "1:0",  // amount of time saved in hours:minutes
 *         "c": "D"     // character to replace into the abbreviation for daylight time
 *     },
 *     "c": "AU",       // ISO code for the country that contains this time zone
 *     "n": "W. Australia {c} Time"
 *                      // long English name of the zone. The {c} replacement is for the word "Standard" or "Daylight" as appropriate
 * }
 */
ilib.TimeZone.prototype._loadtzdata = function () {
	// console.log("id is: " + JSON.stringify(this.id));
	// console.log("zoneinfo is: " + JSON.stringify(ilib.data.zoneinfo[this.id]));
	if (!ilib.data.zoneinfo[this.id] && typeof(this.offset) === 'undefined') {
		ilib.loadData({
			object: ilib.TimeZone, 
			nonlocale: true,	// locale independent 
			name: "zoneinfo/" + this.id + ".json", 
			sync: this.sync, 
			loadParams: this.loadParams, 
			callback: ilib.bind(this, function (tzdata) {
				if (tzdata && !ilib.isEmpty(tzdata)) {
					ilib.data.zoneinfo[this.id] = tzdata;
				}
				this._initZone();
			})
		});
	} else {
		this._initZone();
	}
};

ilib.TimeZone.prototype._initZone = function() {
	/** 
	 * @private
	 * @type {{o:string,f:string,e:Object.<{m:number,r:string,t:string,z:string}>,s:Object.<{m:number,r:string,t:string,z:string,v:string,c:string}>,c:string,n:string}} 
	 */
	this.zone = ilib.data.zoneinfo[this.id];
	if (!this.zone && typeof(this.offset) === 'undefined') {
		this.id = "Etc/UTC";
		this.zone = ilib.data.zoneinfo[this.id];
	}
	
	this._calcDSTSavings();
	
	if (typeof(this.offset) === 'undefined' && this.zone.o) {
		var offsetParts = this._offsetStringToObj(this.zone.o);
		/**
		 * @private
		 * @type {number} raw offset from UTC without DST, in minutes
		 */
		this.offset = (Math.abs(offsetParts.h || 0) * 60 + (offsetParts.m || 0)) * ilib.signum(offsetParts.h || 0);
	}
	
	if (this.onLoad && typeof(this.onLoad) === 'function') {
		this.onLoad(this);
	}
};

ilib.data.timezone = {};

/**
 * Return an array of available zone ids that the constructor knows about.
 * The country parameter is optional. If it is not given, all time zones will
 * be returned. If it specifies a country code, then only time zones for that
 * country will be returned.
 * 
 * @param {string} country country code for which time zones are being sought
 * @return {Array.<string>} an array of zone id strings
 */
ilib.TimeZone.getAvailableIds = function (country) {
	var tz, ids = [];
	
	if (!ilib.data.timezone.list) {
		ilib.data.timezone.list = [];
		if (ilib._load instanceof ilib.Loader) {
			var hash = ilib._load.listAvailableFiles();
			for (var dir in hash) {
				var files = hash[dir];
				files.forEach(function (filename) {
					if (filename && filename.match(/^zoneinfo/)) {
						ilib.data.timezone.list.push(filename.replace(/^zoneinfo\//, "").replace(/\.json$/, ""));
					}
				});
			}
		} else {
			for (tz in ilib.data.zoneinfo) {
				if (ilib.data.zoneinfo[tz]) {
					ilib.data.timezone.list.push(tz);
				}
			}
		}
	}
	
	if (!country) {
		// special zone meaning "the local time zone according to the JS engine we are running upon"
		ids.push("local");
		for (tz in ilib.data.timezone.list) {
			if (ilib.data.timezone.list[tz]) {
				ids.push(ilib.data.timezone.list[tz]);
			}
		}
	} else {
		if (!ilib.data.zoneinfo.zonetab) {
			ilib.loadData({
				object: ilib.TimeZone, 
				nonlocale: true,	// locale independent 
				name: "zoneinfo/zonetab.json", 
				sync: true, 
				callback: ilib.bind(this, function (tzdata) {
					if (tzdata) {
						ilib.data.zoneinfo.zonetab = tzdata;
					}
				})
			});
		}
		ids = ilib.data.zoneinfo.zonetab[country];
	}
	
	return ids;
};

/**
 * Return the id used to uniquely identify this time zone.
 * @return {string} a unique id for this time zone
 */
ilib.TimeZone.prototype.getId = function () {
	return this.id.toString();
};

/**
 * Return the abbreviation that is used for the current time zone on the given date.
 * The date may be in DST or during standard time, and many zone names have different
 * abbreviations depending on whether or not the date is falls within DST.<p>
 * 
 * There are two styles that are supported:
 * 
 * <ol>
 * <li>standard - returns the 3 to 5 letter abbreviation of the time zone name such 
 * as "CET" for "Central European Time" or "PDT" for "Pacific Daylight Time"
 * <li>rfc822 - returns an RFC 822 style time zone specifier, which specifies more
 * explicitly what the offset is from UTC
 * <li>long - returns the long name of the zone in English
 * </ol>
 *  
 * @param {ilib.Date=} date a date to determine if it is in daylight time or standard time
 * @param {string=} style one of "standard" or "rfc822". Default if not specified is "standard"
 * @return {string} the name of the time zone, abbreviated according to the style 
 */
ilib.TimeZone.prototype.getDisplayName = function (date, style) {
	style = (this.isLocal || typeof(this.zone) === 'undefined') ? "rfc822" : (style || "standard");
	switch (style) {
		default:
		case 'standard':
			if (this.zone.f && this.zone.f !== "zzz") {
				if (this.zone.f.indexOf("{c}") !== -1) {
					var letter = "";
					letter = this.inDaylightTime(date) ? this.zone.s && this.zone.s.c : this.zone.e && this.zone.e.c; 
					var temp = new ilib.String(this.zone.f);
					return temp.format({c: letter || ""});
				}
				return this.zone.f;
			} 
			var temp = "GMT" + this.zone.o;
			if (this.inDaylightTime(date)) {
				temp += "+" + this.zone.s.v;
			}
			return temp;
			break;
		case 'rfc822':
			var offset = this.getOffset(date), // includes the DST if applicable
				ret = "UTC",
				hour = offset.h || 0,
				minute = offset.m || 0;
			
			if (hour !== 0) {
				ret += (hour > 0) ? "+" : "-";
				if (Math.abs(hour) < 10) {
					ret += "0";
				}
				ret += (hour < 0) ? -hour : hour;
				if (minute < 10) {
					ret += "0";
				}
				ret += minute;
			}
			return ret; 
		case 'long':
			if (this.zone.n) {
				if (this.zone.n.indexOf("{c}") !== -1) {
					var str = this.inDaylightTime(date) ? "Daylight" : "Standard"; 
					var temp = new ilib.String(this.zone.n);
					return temp.format({c: str || ""});
				}
				return this.zone.n;
			}
			var temp = "GMT" + this.zone.o;
			if (this.inDaylightTime(date)) {
				temp += "+" + this.zone.s.v;
			}
			return temp;
			break;
	}
};

/**
 * Convert the offset string to an object with an h, m, and possibly s property
 * to indicate the hours, minutes, and seconds.
 * 
 * @private
 * @param {string} str the offset string to convert to an object
 * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset for the zone at 
 * the given date/time, in hours, minutes, and seconds
 */
ilib.TimeZone.prototype._offsetStringToObj = function (str) {
	var offsetParts = (typeof(str) === 'string') ? str.split(":") : [],
		ret = {h:0},
		temp;
	
	if (offsetParts.length > 0) {
		ret.h = parseInt(offsetParts[0], 10);
		if (offsetParts.length > 1) {
			temp = parseInt(offsetParts[1], 10);
			if (temp) {
				ret.m = temp;
			}
			if (offsetParts.length > 2) {
				temp = parseInt(offsetParts[2], 10);
				if (temp) {
					ret.s = temp;
				}
			}
		}
	}

	return ret;
};

/**
 * Returns the offset of this time zone from UTC at the given date/time. If daylight saving 
 * time is in effect at the given date/time, this method will return the offset value 
 * adjusted by the amount of daylight saving.
 * @param {ilib.Date=} date the date for which the offset is needed
 * @return {Object.<{h:number,m:number}>} an object giving the offset for the zone at 
 * the given date/time, in hours, minutes, and seconds  
 */
ilib.TimeZone.prototype.getOffset = function (date) {
	if (!date) {
		return this.getRawOffset();
	}
	var offset = this.getOffsetMillis(date)/60000;
	
	var hours = ilib._roundFnc.down(offset/60),
		minutes = Math.abs(offset) - Math.abs(hours)*60;

	var ret = {
		h: hours
	};
	if (minutes != 0) {
		ret.m = minutes;
	}
	return ret;
};

/**
 * Returns the offset of this time zone from UTC at the given date/time expressed in 
 * milliseconds. If daylight saving 
 * time is in effect at the given date/time, this method will return the offset value 
 * adjusted by the amount of daylight saving. Negative numbers indicate offsets west
 * of UTC and conversely, positive numbers indicate offset east of UTC.
 *  
 * @param {ilib.Date=} date the date for which the offset is needed, or null for the
 * present date
 * @return {number} the number of milliseconds of offset from UTC that the given date is
 */
ilib.TimeZone.prototype.getOffsetMillis = function (date) {
	var ret;
	
	// check if the dst property is defined -- the intrinsic JS Date object doesn't work so
	// well if we are in the overlap time at the end of DST
	if (this.isLocal && typeof(date.dst) === 'undefined') {
		var d = (!date) ? new Date() : new Date(date.getTime());
		return -d.getTimezoneOffset() * 60000;
	} 
	
	ret = this.offset;
	
	if (date && this.inDaylightTime(date)) {
		ret += this.dstSavings;
	}
	
	return ret * 60000;
};

/**
 * Return the offset in milliseconds when the date has an RD number in wall
 * time rather than in UTC time.
 * @protected
 * @param date the date to check in wall time
 * @returns {number} the number of milliseconds of offset from UTC that the given date is
 */
ilib.TimeZone.prototype._getOffsetMillisWallTime = function (date) {
	var ret;
	
	ret = this.offset;
	
	if (date && this.inDaylightTime(date, true)) {
		ret += this.dstSavings;
	}
	
	return ret * 60000;
};

/**
 * Returns the offset of this time zone from UTC at the given date/time. If daylight saving 
 * time is in effect at the given date/time, this method will return the offset value 
 * adjusted by the amount of daylight saving.
 * @param {ilib.Date=} date the date for which the offset is needed
 * @return {string} the offset for the zone at the given date/time as a string in the 
 * format "h:m:s" 
 */
ilib.TimeZone.prototype.getOffsetStr = function (date) {
	var offset = this.getOffset(date),
		ret;
	
	ret = offset.h;
	if (typeof(offset.m) !== 'undefined') {
		ret += ":" + offset.m;
		if (typeof(offset.s) !== 'undefined') {
			ret += ":" + offset.s;
		}
	} else {
		ret += ":0";
	}
	
	return ret;
};

/**
 * Gets the offset from UTC for this time zone.
 * @return {Object.<{h:number,m:number,s:number}>} an object giving the offset from 
 * UTC for this time zone, in hours, minutes, and seconds 
 */
ilib.TimeZone.prototype.getRawOffset = function () {
	var hours = ilib._roundFnc.down(this.offset/60),
		minutes = Math.abs(this.offset) - Math.abs(hours)*60;
	
	var ret = {
		h: hours
	};
	if (minutes != 0) {
		ret.m = minutes;
	}
	return ret;
};

/**
 * Gets the offset from UTC for this time zone expressed in milliseconds. Negative numbers
 * indicate zones west of UTC, and positive numbers indicate zones east of UTC.
 * 
 * @return {number} an number giving the offset from 
 * UTC for this time zone in milliseconds 
 */
ilib.TimeZone.prototype.getRawOffsetMillis = function () {
	return this.offset * 60000;
};

/**
 * Gets the offset from UTC for this time zone without DST savings.
 * @return {string} the offset from UTC for this time zone, in the format "h:m:s" 
 */
ilib.TimeZone.prototype.getRawOffsetStr = function () {
	var off = this.getRawOffset();
	return off.h + ":" + (off.m || "0");
};

/**
 * Return the amount of time in hours:minutes that the clock is advanced during
 * daylight savings time.
 * @return {Object.<{h:number,m:number,s:number}>} the amount of time that the 
 * clock advances for DST in hours, minutes, and seconds 
 */
ilib.TimeZone.prototype.getDSTSavings = function () {
	if (this.isLocal) {
		// take the absolute because the difference in the offsets may be positive or
		// negative, depending on the hemisphere
		var savings = Math.abs(this.offsetJan1 - this.offsetJun1);
		var hours = ilib._roundFnc.down(savings/60),
			minutes = savings - hours*60;
		return {
			h: hours,
			m: minutes
		};
	} else if (this.zone && this.zone.s) {
		return this._offsetStringToObj(this.zone.s.v);	// this.zone.start.savings
	}
	return {h:0};
};

/**
 * Return the amount of time in hours:minutes that the clock is advanced during
 * daylight savings time.
 * @return {string} the amount of time that the clock advances for DST in the
 * format "h:m:s"
 */
ilib.TimeZone.prototype.getDSTSavingsStr = function () {
	if (this.isLocal) {
		var savings = this.getDSTSavings();
		return savings.h + ":" + savings.m;
	} else if (typeof(this.offset) !== 'undefined' && this.zone && this.zone.s) {
		return this.zone.s.v;	// this.zone.start.savings
	}
	return "0:0";
};

/**
 * return the rd of the start of DST transition for the given year
 * @protected
 * @param {Object} rule set of rules
 * @param {number} year year to check
 * @return {number} the rd of the start of DST for the year
 */
ilib.TimeZone.prototype._calcRuleStart = function (rule, year) {
	var type = "=", 
		weekday = 0, 
		day, 
		refDay, 
		cal, 
		hour = 0, 
		minute = 0, 
		second = 0,
		time,
		i;
	
	if (typeof(rule.j) !== 'undefined') {
		refDay = new ilib.Date.GregRataDie({
			julianday: rule.j
		});
	} else {
		if (rule.r.charAt(0) == 'l' || rule.r.charAt(0) == 'f') {
			cal = ilib.Cal.newInstance({type: "gregorian"});
			type = rule.r.charAt(0);
			weekday = parseInt(rule.r.substring(1), 10);
			day = (type === 'l') ? cal.getMonLength(rule.m, year) : 1;
			//console.log("_calcRuleStart: Calculating the " + 
			//		(rule.r.charAt(0) == 'f' ? "first " : "last ") + weekday + 
			//		" of month " + rule.m);
		} else {
			i = rule.r.indexOf('<');
			if (i == -1) {
				i = rule.r.indexOf('>');
			}
			
			if (i != -1) {
				type = rule.r.charAt(i);
				weekday = parseInt(rule.r.substring(0, i), 10);
				day = parseInt(rule.r.substring(i+1), 10); 
				//console.log("_calcRuleStart: Calculating the " + weekday + 
				//		type + day + " of month " + rule.m);
			} else {
				day = parseInt(rule.r, 10);
				//console.log("_calcRuleStart: Calculating the " + day + " of month " + rule.m);
			}
		}
	
		if (rule.t) {
			time = rule.t.split(":");
			hour = parseInt(time[0], 10);
			if (time.length > 1) {
				minute = parseInt(time[1], 10);
				if (time.length > 2) {
					second = parseInt(time[2], 10);
				}
			}
		}
		//console.log("calculating rd of " + year + "/" + rule.m + "/" + day);
		refDay = new ilib.Date.GregRataDie({
			year: year, 
			month: rule.m, 
			day: day, 
			hour: hour, 
			minute: minute, 
			second: second
		});
	}
	//console.log("refDay is " + JSON.stringify(refDay));
	var d = refDay.getRataDie();
	
	switch (type) {
		case 'l':
		case '<':
			//console.log("returning " + refDay.onOrBefore(rd, weekday));
			d = refDay.onOrBefore(weekday); 
			break;
		case 'f':
		case '>':
			//console.log("returning " + refDay.onOrAfterRd(rd, weekday));
			d = refDay.onOrAfter(weekday); 
			break;
	}
	return d;
};

/**
 * @private
 */
ilib.TimeZone.prototype._calcDSTSavings = function () {
	var saveParts = this.getDSTSavings();
	
	/**
	 * @private
	 * @type {number} savings in minutes when DST is in effect 
	 */
	this.dstSavings = (Math.abs(saveParts.h || 0) * 60 + (saveParts.m || 0)) * ilib.signum(saveParts.h || 0);
};

/**
 * @private
 */
ilib.TimeZone.prototype._getDSTStartRule = function (year) {
	// TODO: update this when historic/future zones are supported
	return this.zone.s;
};

/**
 * @private
 */
ilib.TimeZone.prototype._getDSTEndRule = function (year) {
	// TODO: update this when historic/future zones are supported
	return this.zone.e;
};

/**
 * Returns whether or not the given date is in daylight saving time for the current
 * zone. Note that daylight savings time is observed for the summer. Because
 * the seasons are reversed, daylight savings time in the southern hemisphere usually
 * runs from the end of the year through New Years into the first few months of the
 * next year. This method will correctly calculate the start and end of DST for any
 * location.
 * 
 * @param {ilib.Date=} date a date for which the info about daylight time is being sought,
 * or undefined to tell whether we are currently in daylight savings time
 * @param {boolean=} wallTime if true, then the given date is in wall time. If false or
 * undefined, it is in the usual UTC time.
 * @return {boolean} true if the given date is in DST for the current zone, and false
 * otherwise.
 */
ilib.TimeZone.prototype.inDaylightTime = function (date, wallTime) {
	var rd, startRd, endRd;

	if (this.isLocal) {
		// check if the dst property is defined -- the intrinsic JS Date object doesn't work so
		// well if we are in the overlap time at the end of DST, so we have to work around that
		// problem by adding in the savings ourselves
		var offset = 0;
		if (typeof(date.dst) !== 'undefined' && !date.dst) {
			offset = this.dstSavings * 60000;
		}
		
		var d = new Date(date ? date.getTime() + offset: undefined);
		// the DST offset is always the one that is closest to positive infinity, no matter 
		// if you are in the northern or southern hemisphere, east or west
		var dst = Math.max(this.offsetJan1, this.offsetJun1);
		return (-d.getTimezoneOffset() === dst);
	}
	
	if (!date) {
		date = new ilib.Date.GregDate(); // right now
	} else if (!(date instanceof ilib.Date.GregDate)) {
		// convert to Gregorian so that we can tell if it is in DST or not
		date = new ilib.Date.GregDate({
			julianday: date.getJulianDay(),
			timezone: date.getTimeZone()
		});
	}
	
	// if we aren't using daylight time in this zone for the given year, then we are 
	// not in daylight time
	if (!this.useDaylightTime(date.year)) {
		return false;
	}
	
	// this should be a Gregorian RD number now, in UTC
	rd = date.rd.getRataDie();
	
	// these calculate the start/end in local wall time
	var startrule = this._getDSTStartRule(date.year);
	var endrule = this._getDSTEndRule(date.year);
	startRd = this._calcRuleStart(startrule, date.year);
	endRd = this._calcRuleStart(endrule, date.year);
	
	if (wallTime) {
		// rd is in wall time, so we have to make sure to skip the missing time
		// at the start of DST when standard time ends and daylight time begins
		startRd += this.dstSavings/1440;
	} else {
		// rd is in UTC, so we have to convert the start/end to UTC time so 
		// that they can be compared directly to the UTC rd number of the date
		
		// when DST starts, time is standard time already, so we only have
		// to subtract the offset to get to UTC and not worry about the DST savings
		startRd -= this.offset/1440;  
		
		// when DST ends, time is in daylight time already, so we have to
		// subtract the DST savings to get back to standard time, then the
		// offset to get to UTC
		endRd -= (this.offset + this.dstSavings)/1440;
	}
	
	// In the northern hemisphere, the start comes first some time in spring (Feb-Apr), 
	// then the end some time in the fall (Sept-Nov). In the southern
	// hemisphere, it is the other way around because the seasons are reversed. Standard
	// time is still in the winter, but the winter months are May-Aug, and daylight 
	// savings time usually starts Aug-Oct of one year and runs through Mar-May of the 
	// next year.
	if (rd < endRd && endRd - rd <= this.dstSavings/1440 && typeof(date.dst) === 'boolean') {
		// take care of the magic overlap time at the end of DST
		return date.dst;
	}
	if (startRd < endRd) {
		// northern hemisphere
		return (rd >= startRd && rd < endRd) ? true : false;
	} 
	// southern hemisphere
	return (rd >= startRd || rd < endRd) ? true : false;
};

/**
 * Returns true if this time zone switches to daylight savings time at some point
 * in the year, and false otherwise.
 * @param {number} year Whether or not the time zone uses daylight time in the given year. If
 * this parameter is not given, the current year is assumed.
 * @return {boolean} true if the time zone uses daylight savings time
 */
ilib.TimeZone.prototype.useDaylightTime = function (year) {
	
	// this zone uses daylight savings time iff there is a rule defining when to start
	// and when to stop the DST
	return (this.isLocal && this.offsetJan1 !== this.offsetJun1) ||
		(typeof(this.zone) !== 'undefined' && 
		typeof(this.zone.s) !== 'undefined' && 
		typeof(this.zone.e) !== 'undefined');
};

/**
 * Returns the ISO 3166 code of the country for which this time zone is defined.
 * @return {string} the ISO 3166 code of the country for this zone
 */
ilib.TimeZone.prototype.getCountry = function () {
	return this.zone.c;
};
ilib.data.pseudomap = {"a":"Ã ","c":"Ã§","d":"Ã°","e":"Ã«","g":"Ä","h":"Ä¥","i":"Ã­","j":"Äµ","k":"Ä·","l":"Ä¾","n":"Ã±","o":"Ãµ","p":"Ã¾","r":"Å","s":"Å¡","t":"Å£","u":"Ã¼","w":"Åµ","y":"Ã¿","z":"Å¾","A":"Ã","B":"Ã","C":"Ã","D":"Ã","E":"Ã","G":"Ä","H":"Ä¦","I":"Ã","J":"Ä´","K":"Ä¸","L":"Ä½","N":"Å","O":"Ã","R":"Å","S":"Å ","T":"Å¤","U":"Ã","W":"Å´","Y":"Å¶","Z":"Å»"};
ilib.data.pseudomap_zxx_Cyrl = {"a":"Ð°","b":"Ð±","c":"Ñ","d":"Ð´","e":"Ñ","f":"Ñ","g":"Ð³","h":"Ñ","i":"Ð¸","j":"Ð¶","k":"Ðº","l":"Ð»","m":"Ð¼","n":"Ð½","o":"Ð¾","p":"Ð¿","q":"ÐºÑ","r":"Ñ","s":"Ñ","t":"Ñ","u":"Ñ","v":"Ð²","x":"ÐºÑ","y":"Ñ","z":"Ð·","A":"Ð","B":"Ð","C":"Ð§","D":"Ð","E":"Ð­","F":"Ð¤","G":"Ð","H":"Ð¥","I":"Ð","J":"Ð","K":"Ð","L":"Ð","M":"Ð","N":"Ð","O":"Ð","P":"Ð","Q":"ÐÐ£","R":"Ð ","S":"Ð¡","T":"Ð¢","U":"Ð£","V":"Ð","X":"ÐÐ¡","Y":"Ð¯","Z":"Ð"};
ilib.data.pseudomap_zxx_Hans = {"a":"é¿","b":"ä¸","c":"å¯","d":"ç","e":"ä¿","f":"å¡","g":"ä¸ª","h":"å","i":"æ","j":"ä¸­","k":"å¯","l":"äº","m":"ä»¬","n":"å°¼","o":"å¤¥","p":"ç¶","q":"æ°£","r":"ç±","s":"æ","t":"æ¨","u":"æ","v":"æ¼","x":"ç¸","y":"è¬","z":"å­","A":"é¿","B":"ä¸","C":"å¯","D":"ç","E":"ä¿","F":"å¡","G":"ä¸ª","H":"å","I":"æ","J":"ä¸­","K":"å¯","L":"äº","M":"ä»¬","N":"å°¼","O":"å¤¥","P":"ç¶","Q":"æ°£","R":"ç±","S":"æ","T":"æ¨","U":"æ","V":"æ¼","X":"ç¸","Y":"è¬","Z":"å­"};
ilib.data.pseudomap_zxx_Hebr = {"a":"Ö·","b":"×Ö¼","c":"×§","d":"×","e":"Ö¶","f":"×¤","g":"×","h":"×","i":"Ö´","j":"××³","k":"×","l":"×","m":"×","n":"× ","o":"Ö¹","p":"×¤","q":"×§","r":"×¨","s":"×¡","t":"×","u":"Ö»","v":"×","w":"×","x":"×©××§","y":"×","z":"×","A":"Ö·","B":"×Ö¼","C":"×§","D":"×Ö¼","E":"Ö¶","F":"×¤","G":"×","H":"×","I":"Ö´","J":"××³","K":"×","L":"×","M":"×","N":"× ","O":"Ö¹","P":"×¤","Q":"×§","R":"×¨","S":"×¡","T":"×","U":"Ö»","V":"×","W":"×","X":"×©××§","Y":"×","Z":"×"};
/*
 * resources.js - Resource bundle definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js localeinfo.js strings.js util/utils.js

// !data pseudomap

/**
 * @class
 * Create a new resource bundle instance. The resource bundle loads strings
 * appropriate for a particular locale and provides them via the getString 
 * method.<p>
 * 
 * The options object may contain any (or none) of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - The locale of the strings to load. If not specified, the default
 * locale is the the default for the web page or app in which the bundle is 
 * being loaded.
 * 
 * <li><i>name</i> - Base name of the resource bundle to load. If not specified the default
 * base name is "resources".
 * 
 * <li><i>type</i> - Name the type of strings this bundle contains. Valid values are 
 * "xml", "html", "text", or "raw". The default is "text". If the type is "xml" or "html",
 * then XML/HTML entities and tags are not pseudo-translated. During a real translation, 
 * HTML character entities are translated to their corresponding characters in a source
 * string before looking that string up in the translations. Also, the characters "<", ">",
 * and "&" are converted to entities again in the output, but characters are left as they
 * are. If the type is "xml", "html", or "text" types, then the replacement parameter names
 * are not pseudo-translated as well so that the output can be used for formatting with 
 * the ilib.String class. If the type is raw, all characters are pseudo-translated, 
 * including replacement parameters as well as XML/HTML tags and entities.
 * 
 * <li><i>lengthen</i> - when pseudo-translating the string, tell whether or not to 
 * automatically lengthen the string to simulate "long" languages such as German
 * or French. This is a boolean value. Default is false.
 * 
 * <li><i>missing</i> - what to do when a resource is missing. The choices are:
 * <ul>
 *   <li><i>source</i> - return the source string unchanged
 *   <li><i>pseudo</i> - return the pseudo-translated source string, translated to the
 *   script of the locale if the mapping is available, or just the default Latin 
 *   pseudo-translation if not
 *   <li><i>empty</i> - return the empty string 
 * </ul>
 * The default behaviour is the same as before, which is to return the source string
 * unchanged.
 * 
 * <li><i>onLoad</i> - a callback function to call when the resources are fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * The locale option may be given as a locale spec string or as an 
 * ilib.Locale object. If the locale option is not specified, then strings for
 * the default locale will be loaded.<p> 
 * 
 * The name option can be used to put groups of strings together in a
 * single bundle. The strings will then appear together in a JS object in
 * a JS file that can be included before the ilib.<p>
 * 
 * A resource bundle with a particular name is actually a set of bundles
 * that are each specific to a language, a language plus a region, etc. 
 * All bundles with the same base name should
 * contain the same set of source strings, but with different translations for 
 * the given locale. The user of the bundle does not need to be aware of 
 * the locale of the bundle, as long as it contains values for the strings 
 * it needs.<p>
 * 
 * Strings in bundles for a particular locale are inherited from parent bundles
 * that are more generic. In general, the hierarchy is as follows (from 
 * least locale-specific to most locale-specific):
 * 
 * <ol>
 * <li> language
 * <li> region
 * <li> language_script
 * <li> language_region
 * <li> region_variant
 * <li> language_script_region
 * <li> language_region_variant
 * <li> language_script_region_variant
 * </ol>
 * 
 * That is, if the translation for a string does not exist in the current
 * locale, the more-generic parent locale is searched for the string. In the
 * worst case scenario, the string is not found in the base locale's strings. 
 * In this case, the missing option guides this class on what to do. If
 * the missing option is "source", then the original source is returned as 
 * the translation. If it is "empty", the empty string is returned. If it
 * is "pseudo", then the pseudo-translated string that is appropriate for
 * the default script of the locale is returned.<p> 
 * 
 * This allows developers to create code with new or changed strings in it and check in that
 * code without waiting for the translations to be done first. The translated
 * version of the app or web site will still function properly, but will show 
 * a spurious untranslated string here and there until the translations are 
 * done and also checked in.<p>   
 *  
 * The base is whatever language your developers use to code in. For
 * a German web site, strings in the source code may be written in German 
 * for example. Often this base is English, as many web sites are coded in
 * English, but that is not required.<p>
 * 
 * The strings can be extracted with the ilib localization tool (which will be
 * shipped at some future time.) Once the strings
 * have been translated, the set of translated files can be generated with the
 * same tool. The output from the tool can be used as input to the ResBundle
 * object. It is up to the web page or app to make sure the JS file that defines
 * the bundle is included before creating the ResBundle instance.<p>
 * 
 * A special locale "zxx-XX" is used as the pseudo-translation locale because
 * zxx means "no linguistic information" in the ISO 639 standard, and the region 
 * code XX is defined to be user-defined in the ISO 3166 standard. 
 * Pseudo-translation is a locale where the translations are generated on
 * the fly based on the contents of the source string. Characters in the source 
 * string are replaced with other characters and returned. 
 * 
 * Example. If the source string is:
 * 
 * <pre>
 * "This is a string"
 * </pre>
 * 
 * then the pseudo-translated version might look something like this: 
 * 
 * <pre>
 * "Å¢Ä§Ã¯Å Ã¯Å Ã¡ ÅÅ£ÅÃ¯Ã±Ä"
 * </pre>
 * <p>
 * 
 * Pseudo-translation can be used to test that your app or web site is translatable
 * before an actual translation has happened. These bugs can then be fixed 
 * before the translation starts, avoiding an explosion of bugs later when
 * each language's tester registers the same bug complaining that the same 
 * string is not translated. When pseudo-localizing with
 * the Latin script, this allows the strings to be readable in the UI in the 
 * source language (if somewhat funky-looking), 
 * so that a tester can easily verify that the string is properly externalized 
 * and loaded from a resource bundle without the need to be able to read a
 * foreign language.<p> 
 * 
 * If one of a list of script tags is given in the pseudo-locale specifier, then the
 * pseudo-localization can map characters to very rough transliterations of
 * characters in the given script. For example, zxx-Hebr-XX maps strings to
 * Hebrew characters, which can be used to test your UI in a right-to-left
 * language to catch bidi bugs before a translation is done. Currently, the
 * list of target scripts includes Hebrew (Hebr), Chinese Simplified Han (Hans),
 * and Cyrillic (Cyrl) with more to be added later. If no script is explicitly
 * specified in the locale spec, or if the script is not supported,
 * then the default mapping maps Latin base characters to accented versions of
 * those Latin characters as in the example above.
 *  
 * When the "lengthen" property is set to true in the options, the 
 * pseudotranslation code will add digits to the end of the string to simulate
 * the lengthening that occurs when translating to other languages. The above 
 * example will come out like this:
 * 
 * <pre>
 * "Å¢Ä§Ã¯Å Ã¯Å Ã¡ ÅÅ£ÅÃ¯Ã±Ä76543210"
 * </pre>
 * 
 * The string is lengthened according to the length of the source string. If
 * the source string is less than 20 characters long, the string is lengthened 
 * by 50%. If the source string is 20-40 
 * characters long, the string is lengthened by 33%. If te string is greater
 * than 40 characters long, the string is lengthened by 20%.<p>
 * 
 * The pseudotranslation always ends a string with the digit "0". If you do
 * not see the digit "0" in the UI for your app, you know that truncation
 * has occurred, and the number you see at the end of the string tells you 
 * how many characters were truncated.<p>
 * 
 * Depends directive: !depends resources.js
 * 
 * @constructor
 * @param {?Object} options Options controlling how the bundle is created
 */
ilib.ResBundle = function (options) {
	var lookupLocale, spec;
	
	this.locale = new ilib.Locale();	// use the default locale
	this.baseName = "strings";
	this.type = "text";
	this.loadParams = {};
	this.missing = "source";
	this.sync = true;
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? 
					new ilib.Locale(options.locale) :
					options.locale;
		}
		if (options.name) {
			this.baseName = options.name;
		}
		if (options.type) {
			this.type = options.type;
		}
		this.lengthen = options.lengthen || false;
		
		if (typeof(options.sync) !== 'undefined') {
			this.sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			this.loadParams = options.loadParams;
		}
		if (typeof(options.missing) !== 'undefined') {
			if (options.missing === "pseudo" || options.missing === "empty") {
				this.missing = options.missing;
			}
		}
	}
	
	this.map = {};

	if (!ilib.ResBundle[this.baseName]) {
		ilib.ResBundle[this.baseName] = {};
	}

	lookupLocale = this.locale.isPseudo() ? new ilib.Locale("en-US") : this.locale;

	ilib.loadData({
		object: ilib.ResBundle[this.baseName], 
		locale: lookupLocale, 
		name: this.baseName + ".json", 
		sync: this.sync, 
		loadParams: this.loadParams, 
		callback: ilib.bind(this, function (map) {
			if (!map) {
				map = ilib.data[this.baseName] || {};
				spec = lookupLocale.getSpec().replace(/-/g, '_');
				ilib.ResBundle[this.baseName].cache[spec] = map;
			}
			this.map = map;
			if (this.locale.isPseudo()) {
				if (!ilib.ResBundle.pseudomap) {
					ilib.ResBundle.pseudomap = {};
				}
	
				this._loadPseudo(this.locale, options.onLoad);
			} else if (this.missing === "pseudo") {
				if (!ilib.ResBundle.pseudomap) {
					ilib.ResBundle.pseudomap = {};
				}
	
				new ilib.LocaleInfo(this.locale, {
					sync: this.sync,
					loadParams: this.loadParams,
					onLoad: ilib.bind(this, function (li) {
						var pseudoLocale = new ilib.Locale("zxx", "XX", undefined, li.getDefaultScript());
						this._loadPseudo(pseudoLocale, options.onLoad);
					})
				});
			} else {
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			}
		})
	});

	// console.log("Merged resources " + this.locale.toString() + " are: " + JSON.stringify(this.map));
	//if (!this.locale.isPseudo() && ilib.isEmpty(this.map)) {
	//	console.log("Resources for bundle " + this.baseName + " locale " + this.locale.toString() + " are not available.");
	//}
};

ilib.ResBundle.defaultPseudo = ilib.data.pseudomap || {
	"a": "Ã ",
	"e": "Ã«",
	"i": "Ã­",
	"o": "Ãµ",
	"u": "Ã¼",
	"y": "Ã¿",
	"A": "Ã",
	"E": "Ã",
	"I": "Ã",
	"O": "Ã",
	"U": "Ã",
	"Y": "Å¶"
};

ilib.ResBundle.prototype = {
    /**
     * @protected
     */
    _loadPseudo: function (pseudoLocale, onLoad) {
		ilib.loadData({
			object: ilib.ResBundle.pseudomap, 
			locale: pseudoLocale, 
			name: "pseudomap.json", 
			sync: this.sync, 
			loadParams: this.loadParams, 
			callback: ilib.bind(this, function (map) {
				if (!map || ilib.isEmpty(map)) {
					map = ilib.ResBundle.defaultPseudo;
					var spec = pseudoLocale.getSpec().replace(/-/g, '_');
					ilib.ResBundle.pseudomap.cache[spec] = map;
				}
				this.pseudomap = map;
				if (typeof(onLoad) === 'function') {
					onLoad(this);
				}	
			})
		});
    },
    
	/**
	 * Return the locale of this resource bundle.
	 * @return {ilib.Locale} the locale of this resource bundle object 
	 */
	getLocale: function () {
		return this.locale;
	},
	
	/**
	 * Return the name of this resource bundle. This corresponds to the name option
	 * given to the constructor.
	 * @return {string} name of the the current instance
	 */
	getName: function () {
		return this.baseName;
	},
	
	/**
	 * Return the type of this resource bundle. This corresponds to the type option
	 * given to the constructor.
	 * @return {string} type of the the current instance
	 */
	getType: function () {
		return this.type;
	},

	/*
	 * @private
	 * Pseudo-translate a string
	 */
	pseudo: function (str) {
		if (!str) {
			return undefined;
		}
		var ret = "", i;
		for (i = 0; i < str.length; i++) {
			if (this.type !== "raw") {
				if (this.type === "html" || this.type === "xml") {
					if (str.charAt(i) === '<') {
						ret += str.charAt(i++);
						while (i < str.length && str.charAt(i) !== '>') {
							ret += str.charAt(i++);
						}
						if (i < str.length) {
							ret += str.charAt(i++);
						}
					} else if (str.charAt(i) === '&') {
						ret += str.charAt(i++);
						while (i < str.length && str.charAt(i) !== ';' && str.charAt(i) !== ' ') {
							ret += str.charAt(i++);
						}
						if (i < str.length) {
							ret += str.charAt(i++);
						}
					}
				}
				if (i < str.length) { 
					if (str.charAt(i) === '{') {
						ret += str.charAt(i++);
						while (i < str.length && str.charAt(i) !== '}') {
							ret += str.charAt(i++);
						}
						if (i < str.length) {
							ret += str.charAt(i);
						}
					} else {
						ret += this.pseudomap[str.charAt(i)] || str.charAt(i);
					}
				}
			} else {
				ret += this.pseudomap[str.charAt(i)] || str.charAt(i);
			}
		}
		if (this.lengthen) {
			var add;
			if (ret.length <= 20) {
				add = Math.round(ret.length / 2);
			} else if (ret.length > 20 && ret.length <= 40) {
				add = Math.round(ret.length / 3);
			} else {
				add = Math.round(ret.length / 5);
			}
			for (i = add-1; i >= 0; i--) {
				ret += (i % 10);
			}
		}
		if (this.locale.getScript() === "Hans" || this.locale.getScript() === "Hant" ||
				this.locale.getScript() === "Hani" ||
				this.locale.getScript() === "Hrkt" || this.locale.getScript() === "Jpan" ||
				this.locale.getScript() === "Hira" || this.locale.getScript() === "Kana" ) {
			// simulate Asian languages by getting rid of all the spaces
			ret = ret.replace(/ /g, "");
		}
		return ret;
	},
	
	/*
	 * @private
	 * Escape html characters in the output.
	 */
	escapeXml: function (str) {
		str = str.replace(/&/g, '&amp;');
		str = str.replace(/</g, '&lt;');
		str = str.replace(/>/g, '&gt;');
		return str;
	},

	/*
	 * @private
	 * @param {string} str the string to unescape
	 */
	unescapeXml: function (str) {
		str = str.replace(/&amp;/g, '&');
		str = str.replace(/&lt;/g, '<');
		str = str.replace(/&gt;/g, '>');
		return str;
	},
	
	/*
	 * @private
	 * Create a key name out of a source string. All this does so far is 
	 * compress sequences of white space into a single space on the assumption
	 * that this doesn't really change the meaning of the string, and therefore
	 * all such strings that compress to the same thing should share the same
	 * translation.
	 * @param {string} source the source string to make a key out of
	 */
	makeKey: function (source) {
		var key = source.replace(/\s+/gm, ' ');
		return (this.type === "xml" || this.type === "html") ? this.unescapeXml(key) : key;
	},
	
	/**
	 * Return a localized string. If the string is not found in the loaded set of
	 * resources, the original source string is returned. If the key is not given,
	 * then the source string itself is used as the key. In the case where the 
	 * source string is used as the key, the whitespace is compressed down to 1 space
	 * each, and the whitespace at the beginning and end of the string is trimmed.<p>
	 * 
	 * The escape mode specifies what type of output you are escaping the returned
	 * string for. Modes are similar to the types: 
	 * 
	 * <ul>
	 * <li>"html" -- prevents HTML injection by escaping the characters &lt &gt; and &amp;
	 * <li>"xml" -- currently same as "html" mode
	 * <li>"js" -- prevents breaking Javascript syntax by backslash escaping all quote and 
	 * double-quote characters
	 * <li>"attribute" -- meant for HTML attribute values. Currently this is the same as
	 * "js" escape mode.
	 * <li>"default" -- use the type parameter from the constructor as the escape mode as well
	 * <li>"none" or undefined -- no escaping at all.
	 * </ul>
	 * 
	 * The type parameter of the constructor specifies what type of strings this bundle
	 * is operating upon. This allows pseudo-translation and automatic key generation
	 * to happen properly by telling this class how to parse the string. The escape mode 
	 * for this method is different in that it specifies how this string will be used in 
	 * the calling code and therefore how to escape it properly.<p> 
	 * 
	 * For example, a section of Javascript code may be constructing an HTML snippet in a 
	 * string to add to the web page. In this case, the type parameter in the constructor should
	 * be "html" so that the source string can be parsed properly, but the escape mode should
	 * be "js" so that the output string can be used in Javascript without causing syntax
	 * errors.
	 * 
	 * @param {?string=} source the source string to translate
	 * @param {?string=} key optional name of the key, if any
	 * @param {?string=} escapeMode escape mode, if any
	 * @return {ilib.String|undefined} the translation of the given source/key or undefined 
	 * if the translation is not found and the source is undefined 
	 */
	getString: function (source, key, escapeMode) {
		if (!source && !key) return new ilib.String("");

		var trans;
		if (this.locale.isPseudo()) {
			var str = source ? source : this.map[key];
			trans = this.pseudo(str || key);
		} else {
			var keyName = key || this.makeKey(source);
			if (typeof(this.map[keyName]) !== 'undefined') {
				trans = this.map[keyName];
			} else if (this.missing === "pseudo") {
				trans = this.pseudo(source || key);
			} else if (this.missing === "empty") {
				trans = "";
			} else {
				trans = source;
			}
		}

		if (escapeMode && escapeMode !== "none") {
			if (escapeMode == "default") {
				escapeMode = this.type;
			}
			if (escapeMode === "xml" || escapeMode === "html") {
				trans = this.escapeXml(trans);
			} else if (escapeMode == "js" || escapeMode === "attribute") {
				trans = trans.replace(/'/g, "\\\'").replace(/"/g, "\\\"");
			}
		}
		if (trans === undefined) {
			return undefined;
		} else {
			var ret = new ilib.String(trans);
			ret.setLocale(this.locale.getSpec(), true, this.loadParams); // no callback
			return ret;
		}
	},
	
	/**
	 * Return true if the current bundle contains a translation for the given key and
	 * source. The
	 * getString method will always return a string for any given key and source 
	 * combination, so it cannot be used to tell if a translation exists. Either one
	 * or both of the source and key must be specified. If both are not specified,
	 * this method will return false.
	 * 
	 * @param {?string=} source source string to look up
	 * @param {?string=} key key to look up
	 * @return {boolean} true if this bundle contains a translation for the key, and 
	 * false otherwise
	 */
	containsKey: function(source, key) {
		if (typeof(source) === 'undefined' && typeof(key) === 'undefined') {
			return false;
		}
		
		var keyName = key || this.makeKey(source);
		return typeof(this.map[keyName]) !== 'undefined';
	},
	
	/**
	 * Return the merged resources as an entire object. When loading resources for a
	 * locale that are not just a set of translated strings, but instead an entire 
	 * structured javascript object, you can gain access to that object via this call. This method
	 * will ensure that all the of the parts of the object are correct for the locale.<p>
	 * 
	 * For pre-assembled data, it starts by loading <i>ilib.data[name]</i>, where 
	 * <i>name</i> is the base name for this set of resources. Then, it successively 
	 * merges objects in the base data using progressively more locale-specific data. 
	 * It loads it in this order from <i>ilib.data</i>:
	 * 
	 * <ol>
	 * <li> language
	 * <li> region
	 * <li> language_script
	 * <li> language_region
	 * <li> region_variant
	 * <li> language_script_region
	 * <li> language_region_variant
	 * <li> language_script_region_variant
	 * </ol>
	 * 
	 * For dynamically loaded data, the code attempts to load the same sequence as
	 * above, but with slash path separators instead of underscores.<p>
	 *  
	 * Loading the resources this way allows the program to share resources between all
	 * locales that share a common language, region, or script. As a 
	 * general rule-of-thumb, resources should be as generic as possible in order to
	 * cover as many locales as possible.
	 * 
	 * @return {Object} returns the object that is the basis for this resources instance
	 */
	getResObj: function () {
		return this.map;
	}
};

/*
 * util/jsutils.js - Misc utilities to work around Javascript engine differences
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * Perform a shallow copy of the source object to the target object. This only 
 * copies the assignments of the source properties to the target properties, 
 * but not recursively from there.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @static
 * @param {Object} source the source object to copy properties from
 * @param {Object} target the target object to copy properties into
 */
ilib.shallowCopy = function (source, target) {
	var prop = undefined;
	if (source && target) {
		for (prop in source) {
			if (prop !== undefined && typeof(source[prop]) !== 'undefined') {
				target[prop] = source[prop];
			}
		}
	}
};

/** [Need Comment]
 * 
 */
ilib.deepCopy = function(from, to) {
	var prop;

	for (prop in from) {
		if (prop) {
			if (typeof(from[prop]) === 'object') {
				to[prop] ={};
				ilib.deepCopy(from[prop], to[prop]);
			} else {
				to[prop] = from[prop];
			}
		}
	}
	return to;
};

/**
 * Map a string to the given set of alternate characters. If the target set
 * does not contain a particular character in the input string, then that
 * character will be copied to the output unmapped.
 * 
 * @static
 * @param {string} str a string to map to an alternate set of characters
 * @param {Array.<string>|Object} map a mapping to alternate characters
 * @return {string} the source string where each character is mapped to alternate characters
 */
ilib.mapString = function (str, map) {
	var mapped = "";
	if (map && str) {
		for (var i = 0; i < str.length; i++) {
			var c = str.charAt(i); // TODO use a char iterator?
			mapped += map[c] || c; 
		}
	} else {
		mapped = str;
	}
	return mapped;
};

/**
 * Check if an object is a member of the given array. If this javascript engine
 * support indexOf, it is used directly. Otherwise, this function implements it
 * itself. The idea is to make sure that you can use the quick indexOf if it is
 * available, but use a slower implementation in older engines as well.
 * 
 * @static
 * @param {Array.<Object>} array array to search
 * @param {Object} obj object being sought. This should be of the same type as the
 * members of the array being searched. If not, this function will not return
 * any results.
 * @return {number} index of the object in the array, or -1 if it is not in the array.
 */
ilib.indexOf = function(array, obj) {
	if (!array || !obj) {
		return -1;
	}
	if (typeof(array.indexOf) === 'function') {
		return array.indexOf(obj);
	} else {
		for (var i = 0; i < array.length; i++) {
	        if (array[i] === obj) {
	            return i;
	        }
	    }
	    return -1;
	}
};

/**
 * @static
 * Convert a string into the hexadecimal representation
 * of the Unicode characters in that string.
 * 
 * @param {string} string The string to convert
 * @param {number=} limit the number of digits to use to represent the character (1 to 8)
 * @return {string} a hexadecimal representation of the
 * Unicode characters in the input string
 */
ilib.toHexString = function(string, limit) {
	var i, 
		result = "", 
		lim = (limit && limit < 9) ? limit : 4;
	
	if (!string) {
		return "";
	}
	for (i = 0; i < string.length; i++) {
		var ch = string.charCodeAt(i).toString(16);
		result += "00000000".substring(0, lim-ch.length) + ch;
	}
	return result.toUpperCase();
};

ilib.data.dateformats = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"EE d/M/yy","m":"EEE d/MM/yyyy","l":"EEE d MMM yyyy","f":"EEEE d MMMM yyyy"},"dmy":{"s":"d/M/yy","m":"d/MM/yyyy","l":"d MMM yyyy","f":"d MMMM yyyy"},"dmw":{"s":"EE d/M","m":"EE d/MM","l":"EEE d MMM","f":"EEEE d MMMM"},"dm":{"s":"d/M","m":"d/MM","l":"d MMM","f":"d MMMM"},"my":{"s":"M/yy","m":"MM/yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"dw":{"s":"EE d","m":"EE d","l":"EEE d","f":"EEEE d"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"},"w":{"s":"E","m":"EE","l":"EEE","f":"EEEE"}},"time":{"12":{"ahmsz":"h:mm:ssa z","ahms":"h:mm:ssa","hmsz":"h:mm:ss z","hms":"h:mm:ss","ahmz":"h:mma z","ahm":"h:mma","hmz":"h:mm z","ah":"ha","hm":"h:mm","ms":"mm:ss","h":"h","m":"mm","s":"ss"},"24":{"ahmsz":"H:mm:ss z","ahms":"H:mm:ss","hmsz":"H:mm:ss z","hms":"H:mm:ss","ahmz":"H:mm z","ahm":"H:mm","hmz":"H:mm z","ah":"H","hm":"H:mm","ms":"mm:ss","h":"H","m":"mm","s":"ss"}},"range":{"c00":{"s":"{st} - {et} {sd}/{sm}/{sy}","m":"{st} - {et}, {sd}/{sm}/{sy}","l":"{st} - {et}, {sd} {sm} {sy}","f":"{st} - {et}, {sd} {sm} {sy}"},"c01":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}","l":"{sd} {st} - {ed} {et}, {sm} {sy}","f":"{sd} {st} - {ed} {et}, {sm} {sy}"},"c02":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}","l":"{sd} {sm} {st} - {ed} {em} {et}, {sy}","f":"{sd} {sm} {st} - {ed} {em} {et}, {sy}"},"c03":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c10":{"s":"{sd}-{ed}/{sm}/{sy}","m":"{sd}-{ed}/{sm}/{sy}","l":"{sd}-{ed} {sm} {sy}","f":"{sd}-{ed} {sm} {sy}"},"c11":{"s":"{sd}/{sm}-{ed}/{em} {sy}","m":"{sd}/{sm} - {ed}/{em} {sy}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}/{sm}/{sy}-{ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy}-{em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}},"islamic":"gregorian","hebrew":"gregorian","julian":"gregorian","thaisolar":"gregorian","persian":"gregorian","persian-algo":"gregorian"};
ilib.data.dateformats_aa = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"MMM d","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"yy MMM d","l":"yyyy MMM d","f":"yyyy MMMM dd"},"my":{"s":"yy-M","m":"yy MMM","l":"yyyy MMM","f":"yyyy MMMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy} {sm} {sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} {sm} {sd}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_af = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M/d","m":"dd MMM","l":"MMM d","f":"MMMM d"},"dmy":{"s":"M/d/yy","m":"dd MMM yy","f":"dd MMMM yyyy"},"my":{"m":"MMM yy"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"dmwy":{"s":"E, d/M/yy","m":"EE, d/M/yy","l":"EEE, d MMM yyyy","f":"EEEE, d MMM yyyy"},"dmw":{"s":"E, M/d","m":"EE, M/d","l":"EEEE, MMM d","f":"EEEE, MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sm}/{sd}/{sy}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sm}/{sd}/{sy} â {et} {em}/{ed}/{ey}","l":"{st} {sd} â {et} {ed} {em} {ey}","m":"{st} {sm}/{sd}/{sy} â {et} {em}/{ed}/{ey}","f":"{st} {sd} â {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sm}/{sd}/{sy} â {et} {em}/{ed}/{ey}","l":"{st} {sm} {sd} â {et} {em} {ed} {ey}","f":"{st} {sm} {sd} â {et} {em} {ed} {ey}","m":"{st} {sm}/{sd}/{sy} â {et} {em}/{ed}/{ey}"},"c10":{"s":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}","l":"{sd} â {ed} {em} {ey}","f":"{sd} â {ed} {em} {ey}","m":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}"},"c11":{"s":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}","m":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}","l":"{sm} {sd} â {em} {ed} {ey}","f":"{sm} {sd} â {em} {ed} {ey}"},"c12":{"s":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}","m":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_agq = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"d MMM"},"dmy":{"m":"d MMM, yy"},"my":{"m":"MMM, yy"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E d/M/yy","m":"EE d/M/yy","f":"EEEE d MMM yyyy"},"dmw":{"s":"E d/M","m":"EE d/M","l":"EEEE d MMM","f":"EEEE d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm}, {sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_ak = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M/d","m":"MMM d","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy/M/d","m":"yy MMM d","l":"yyyy MMM d","f":"yyyy MMMM dd"},"my":{"m":"yy MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, M/d/yy","m":"EE, M/d/yyyy","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"E, M/d","m":"EE, M/d","l":"EEEE, MMM d","f":"EEEE, MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}/{sm}/{sd}","m":"{st} â {et} {sy} {sm} {sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} {sm} {sd}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_am = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M/d","m":"d MMM","l":"MMM d","f":"MMMM d"},"dmy":{"m":"d MMM yy"},"my":{"m":"MMM yy"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"Eá£ d/M/yy","m":"EEá£ d/M/yy","l":"EEEá£ MMM d yyyy","f":"EEEEá£ MMM d yyyy"},"dmw":{"s":"E, M/d","m":"EE, M/d","l":"EEEE, MMM d","f":"EEEE, MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sm} {sd} â {et} {ed} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","f":"{st} {sm} {sd} â {et} {ed} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sm} {sd} â {et} {em} {ed} {ey}","f":"{st} {sm} {sd} â {et} {em} {ed} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}"},"c10":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sm} {sd} â {ed} {ey}","f":"{sm} {sd} â {ed} {ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}"},"c11":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sm} {sd} â {em} {ed} {ey}","f":"{sm} {sd} â {em} {ed} {ey}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sm} {sd} {sy} â {em} {ed} {ey}","f":"{sm} {sd} {sy} â {em} {ed} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_ar = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"âd/M","m":"âdd/MM","l":"âd MMM","f":"âd MMMM"},"dmy":{"s":"âd/M/yy","m":"âdd/MM/yyyy","l":"âd MMMØ yyyy","f":"âd MMMMØ yyyy"},"my":{"s":"âM/yy","m":"âMM/yyyy","l":"MMMØ yyyy","f":"MMMMØ yyyy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"dmwy":{"s":"EØ d/M/yy","m":"EEØ d/M/yyyy","l":"EEEØ d MMMØ yyyy","f":"EEEEØ d MMMMØ yyyy"},"dmw":{"s":"EØ d/M","m":"EEØ d/M","l":"EEEEØ d MMM","f":"EEEEØ d MMMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"âh:mm:ss a z","hmsz":"âh:mm:ss z","ahms":"âh:mm:ss a","hms":"âh:mm:ss","ahmz":"âh:mm a z","ahm":"âh:mm a","hm":"âh:mm","hmz":"âh:mm z","ms":"âmm:ss","ah":"âh a"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd}/{sm}/{sy}","l":"{st} â {et} {sd} {sm}Ø {sy}","f":"{st} â {et} {sd} {sm}Ø {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} â {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","f":"{st} {sd} â {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} â {et} {ed} {em} {ey}","f":"{st} {sd} {sm} â {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}"},"c10":{"s":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} â {ed} {em} {ey}","f":"{sd} â {ed} {em} {ey}"},"c11":{"s":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em} {ey}","f":"{sd} {sm} â {ed} {em} {ey}"},"c12":{"s":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"â{sm}/{sy} â {em}/{ey}","m":"â{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"â{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_ar_DZ = {"gregorian":{"date":{"dm":{"s":"M/d","m":"MM/dd"},"dmy":{"m":"yyyy/MM/dd"},"my":{"s":"yy/M","m":"yyyy/MM"}},"range":{"c00":{"m":"{st} â {et} {sy}/{sm}/{sd}"}}},"generated":true};
ilib.data.dateformats_ar_MA = {"gregorian":{"date":{"dm":{"s":"M/d","m":"MM/dd"},"dmy":{"m":"yyyy/MM/dd"},"my":{"s":"yy/M","m":"yyyy/MM"}},"range":{"c00":{"m":"{st} â {et} {sy}/{sm}/{sd}"}}},"generated":true};
ilib.data.dateformats_ar_TN = {"gregorian":{"date":{"dm":{"s":"M/d","m":"MM/dd"},"dmy":{"m":"yyyy/MM/dd"},"my":{"s":"yy/M","m":"yyyy/MM"}},"range":{"c00":{"m":"{st} â {et} {sy}/{sm}/{sd}"}}},"generated":true};
ilib.data.dateformats_asa = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M/d","m":"d MMM","l":"MMM d","f":"MMMM d"},"dmy":{"m":"d MMM yy"},"my":{"m":"MMM yy"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, M/d/yy","m":"EE, M/d/yy","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"E, M/d","m":"EE, M/d","l":"EEEE, MMM d","f":"EEEE, MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_as = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"MMM d","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"yy MMM d","l":"yyyy MMM d","f":"yyyy MMMM dd"},"my":{"s":"yy-M","m":"yy MMM","l":"yyyy MMM","f":"yyyy MMMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy} {sm} {sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} {sm} {sd}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_az = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"d MMM"},"dmy":{"s":"yy-M-d","m":"d MMM, yy","l":"d MMM, yyyy","f":"d, MMMM, yyyy"},"my":{"s":"yy-M","m":"MMM, yy","l":"MMM, yyyy","f":"MMMM, yyyy"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, d, MMM, yyyy","f":"EEEE, d, MMM, yyyy"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE, d, MMM","f":"EEEE, d, MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sd} {sm}, {sy}","l":"{st} â {et} {sd} {sm}, {sy}","f":"{st} â {et} {sd}, {sm}, {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_bas = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"d MMM"},"dmy":{"m":"d MMM, yy"},"my":{"m":"MMM, yy"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E d/M/yy","m":"EE d/M/yy","f":"EEEE d MMM yyyy"},"dmw":{"s":"E d/M","m":"EE d/M","l":"EEEE d MMM","f":"EEEE d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm}, {sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_be = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"dd/M","f":"MMMM d"},"dmy":{"s":"d.M.yy","m":"dd/MM/yyyy"},"my":{"s":"MM/yy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, dd/MM/yy","m":"EE, dd/MM/yyyy","l":"EEE, d MMM yyyy","f":"EEEE, d MMM yyyy"},"dmw":{"s":"E, d MMM","m":"EE, d MMM","l":"EEEE, d MMM","f":"EEEE, d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"hh.mm.ss a z","hmsz":"hh.mm.ss z","ahms":"hh.mm.ss a","hms":"hh.mm.ss","ms":"mm.ss","ahmz":"hh.mm a z","ahm":"hh.mm a","hm":"hh.mm","hmz":"hh.mm z","ah":"h a"},"24":{"ahmsz":"HH.mm.ss z","ahms":"HH.mm.ss","hmsz":"HH.mm.ss z","hms":"HH.mm.ss","ms":"mm.ss","ahmz":"HH.mm z","ahm":"HH.mm","hmz":"HH.mm z","hm":"HH.mm"}},"range":{"c00":{"s":"{st} â {et} {sd}.{sm}.{sy}","m":"{st} â {et} {sd}/{sm}/{sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_bem = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M/d","m":"d MMM","l":"MMM d","f":"MMMM d"},"dmy":{"m":"d MMM yy"},"my":{"m":"MMM yy"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, M/d/yy","m":"EE, M/d/yy","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"E, M/d","m":"EE, M/d","l":"EEEE, MMM d","f":"EEEE, MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_bg = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d.M","m":"dd.MM"},"dmy":{"s":"dd.MM.yy","m":"dd.MM.yy","l":"dd MMM yyyy","f":"dd MMMM yyyy"},"my":{"s":"M.yy 'Ð³'.","m":"MM.yyyy","l":"MMM yyyy 'Ð³'."},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, d.MM.yy 'Ð³'.","m":"EE, d.MM.yy 'Ð³'.","l":"EEE, d MMM yyyy 'Ð³'.","f":"EEEE, d MMM yyyy 'Ð³'."},"dmw":{"s":"E, d.MM","m":"EE, d.MM","l":"d MMM, EEEE","f":"d MMM, EEEE"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} - {et} {sd}.{sm}.{sy}","m":"{st} - {et} {sd}.{sm}.{sy}","l":"{st} - {et} {sd} {sm} {sy}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","l":"{st} {sd} - {et} {ed} {em} {ey}","m":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","f":"{st} {sd} - {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","l":"{st} {sd} {sm} - {et} {ed} {em} {ey}","f":"{st} {sd} {sm} - {et} {ed} {em} {ey}","m":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}"},"c10":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} - {ed} {em} {ey}","f":"{sd} - {ed} {em} {ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}"},"c11":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} - {ed} {em} {ey}","f":"{sd} {sm} - {ed} {em} {ey}"},"c12":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}"},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}","f":"{sm} {sy} Ð³. - {em} {ey} Ð³."}}},"generated":true};
ilib.data.dateformats_bm = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"dd/MM"},"dmy":{"m":"d MMM, yy","l":"d MMM yy"},"my":{"m":"MM/yy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E d/M/yy","m":"EE d/M/yy","f":"EEEE d MMM yyyy"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE d MMM","f":"EEEE d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm}, {sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_bn = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"dd-MM"},"dmy":{"m":"d MMM, yy","l":"d MMM, yyyy","f":"d MMMM, yyyy"},"my":{"m":"MM-yyyy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, d/M/yy","m":"EE, d/M/yy","l":"EEE, d MMM, yyyy","f":"EEEE, d MMM, yyyy"},"dmw":{"s":"E, d-M","m":"EE, d-M","l":"EEEE d MMM","f":"EEEE d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm}, {sy}","l":"{st} â {et} {sd} {sm}, {sy}","f":"{st} â {et} {sd} {sm}, {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} â {et} {ed} {em}, {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","f":"{st} {sd} â {et} {ed} {em}, {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} â {et} {ed} {em}, {ey}","f":"{st} {sd} {sm} â {et} {ed} {em}, {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}"},"c10":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} â {ed} {em}, {ey}","f":"{sd} â {ed} {em}, {ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}"},"c11":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em}, {ey}","f":"{sd} {sm} â {ed} {em}, {ey}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm}, {sy} â {ed} {em}, {ey}","f":"{sd} {sm}, {sy} â {ed} {em}, {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm}â{sy} â {em}â{ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_br = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"MMM d","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"yy MMM d","l":"yyyy MMM d","f":"yyyy MMMM dd"},"my":{"s":"yy-M","m":"yy MMM","l":"yyyy MMM","f":"yyyy MMMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy} {sm} {sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} {sm} {sd}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_bs = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"dd.MM.","m":"dd.M","l":"dd. MMM","f":"dd. MMMM"},"dmy":{"s":"dd.MM.yy.","m":"dd.MM.yy","l":"dd. MMM yyyy.","f":"dd. MMMM yyyy"},"my":{"s":"MM.yy.","m":"MM.yy","l":"MMM yyyy."},"m":{"s":"MM","f":"MMM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"dmwy":{"s":"E, dd.MM.yy.","m":"EE, dd.MM.yy.","l":"EEE, dd. MMM yyyy.","f":"EEEE, dd. MMM yyyy."},"dmw":{"s":"E, dd.MM.","m":"EE, dd.MM.","l":"EEEE, dd. MMM","f":"EEEE, dd. MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","hmsz":"hh:mm:ss z","ahms":"hh:mm:ss a","hms":"hh:mm:ss","ms":"mm:s","ahmz":"hh:mm a z","ahm":"hh:mm a","hm":"hh:mm","hmz":"hh:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sd}.{sm}.{sy}.","m":"{st} â {et} {sd}.{sm}.{sy}","l":"{st} â {et} {sd}. {sm} {sy}.","f":"{st} â {et} {sd}. {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_bs_Cyrl_BA = {"gregorian":{"time":{"12":{"ah":"hh a"}},"range":{"c00":{"s":"{st} - {et} {sd}.{sm}.{sy}.","m":"{st} - {et} {sd}.{sm}.{sy}","l":"{st} - {et} {sd}. {sm} {sy}.","f":"{st} - {et} {sd}. {sm} {sy}"},"c01":{"s":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","l":"{st} {sd}. - {et} {ed}. {em} {ey}.","m":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","f":"{st} {sd}. - {et} {ed}. {em} {ey}."},"c02":{"s":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","l":"{st} {sd}. {sm} - {et} {ed}. {em} {ey}.","f":"{st} {sd}. {sm} - {et} {ed}. {em} {ey}.","m":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}."},"c10":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sd}. - {ed}. {em} {ey}.","f":"{sd}. - {ed}. {em} {ey}.","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}."},"c11":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sd}. {sm} - {ed}. {em} {ey}.","f":"{sd}. {sm} - {ed}. {em} {ey}."},"c12":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sd}. {sm} {sy}. - {ed}. {em} {ey}.","f":"{sd}. {sm} {sy}. - {ed}. {em} {ey}."},"c20":{"s":"{sm}.{sy}. - {em}.{ey}.","m":"{sm}.{sy}. - {em}.{ey}.","l":"{sm} {sy}. - {em} {ey}.","f":"{sm} {sy}. - {em} {ey}."},"c30":"{sy} - {ey}"}},"generated":true};
ilib.data.dateformats_ca = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"dd/MM"},"dmy":{"m":"dd/MM/yyyy","f":"MMMM 'de' yyyy"},"my":{"f":"MMMM 'de' yyyy"},"m":{"s":"MM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, d.M.yy","m":"EE, d.M.yy","l":"EEE, d MMM, yyyy","f":"EEEE, d MMM, yyyy"},"dmw":{"s":"E d/M","m":"EE d/M","l":"EEEE d MMM","f":"EEEE d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h.mm.ss a z","hmsz":"h.mm.ss z","ahms":"h.mm.ss a","hms":"h.mm.ss","ms":"mm.ss","ahmz":"h.mm a z","ahm":"h.mm a","hm":"h.mm","hmz":"h.mm z","ah":"h a"},"24":{"ahmsz":"H.mm.ss z","ahms":"H.mm.ss","hmsz":"H.mm.ss z","hms":"H.mm.ss","ms":"mm.ss","ahmz":"H.mm z","ahm":"H.mm","hmz":"H.mm z","hm":"H.mm"}},"range":{"c00":{"m":"{st} - {et} {sd}/{sm}/{sy}","l":"{st} - {et} {sd} {sm} {sy}","f":"{st} - {et} {sm} de {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","l":"{st} {sd} - {et} {ed} {em} de {ey}","m":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","f":"{st} {sd} - {et} {ed} {em} de {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} - {et} {ed} {em} de {ey}","f":"{st} {sd} {sm} - {et} {ed} {em} de {ey}","m":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}"},"c10":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} - {ed} {em} de {ey}","f":"{sd} - {ed} {em} de {ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}"},"c11":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} - {ed} {em} de {ey}","f":"{sd} {sm} - {ed} {em} de {ey}"},"c12":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} de {sy} - {ed} {em} de {ey}","f":"{sd} {sm} de {sy} - {ed} {em} de {ey}"},"c20":{"s":"{sm}/{sy} - {em}/{ey}","l":"{sm} de {sy} - {em} de {ey}","f":"{sm} de {sy} - {em} de {ey}"}}},"generated":true};
ilib.data.dateformats_cs = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d. M.","m":"d. M","l":"d. M.","f":"d. MMMM"},"dmy":{"s":"d. M. yy","m":"d. M. yyyy","l":"d. M. yyyy","f":"d. MMMM yyyy"},"my":{"m":"M. yyyy","l":"MMMM yyyy"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, d. M. yy","m":"EE, d. M. yy","l":"EEE, d. M. yyyy","f":"EEEE, d. M. yyyy"},"dmw":{"s":"E, d. M.","m":"EE, d. M.","l":"EEEE, d. M.","f":"EEEE, d. M."},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sd}. {sm}. {sy}","m":"{st} â {et} {sd}. {sm}. {sy}","l":"{st} â {et} {sd}. {sm}. {sy}","f":"{st} â {et} {sd}. {sm} {sy}"},"c01":{"s":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","l":"{st} {sd}. â {et} {ed}. {em}. {ey}","m":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","f":"{st} {sd}. â {et} {ed}. {em}. {ey}"},"c02":{"s":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","l":"{st} {sd}. {sm}. â {et} {ed}. {em}. {ey}","f":"{st} {sd}. {sm}. â {et} {ed}. {em}. {ey}","m":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}"},"c10":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd}. â {ed}. {em}. {ey}","f":"{sd}. â {ed}. {em}. {ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}"},"c11":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd}. {sm}. â {ed}. {em}. {ey}","f":"{sd}. {sm}. â {ed}. {em}. {ey}"},"c12":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd}. {sm}. {sy} â {ed}. {em}. {ey}","f":"{sd}. {sm}. {sy} â {ed}. {em}. {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_da = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"E dd/MM/yy","m":"EE dd/MM/yyyy","l":"EEE d. MMM yyyy","f":"EEEE 'den' d. MMMM yyyy"},"dmy":{"s":"dd/MM/yy","m":"dd/MM/yyyy","l":"d. MMM yyyy","f":"d. MMMM yyyy"},"dmw":{"s":"E dd/MM","m":"EE dd/MM","l":"EEE d. MMM","f":"EEEE 'den' d. MMMM"},"dm":{"s":"dd/MM","m":"dd/MM","l":"d. MMM","f":"d. MMMM"},"my":{"s":"MM/yy","m":"MM/yyyy","l":"MMM yy","f":"MMMM yyyy"},"dw":{"s":"E dd","m":"EE dd","l":"EEE d.","f":"EEEE 'den' d."},"d":{"s":"d","m":"d","l":"d","f":"d"},"m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"h.mm.ss a z","ahms":"h.mm.ss a","hmsz":"h.mm.ss z","ahmz":"h.mm a z","hms":"h.mm.ss","ahm":"h.mm a","hmz":"h.mm z","ah":"h a","hm":"h.mm","ms":"mm.ss"},"24":{"ahmsz":"H.mm.ss z","ahms":"H.mm.ss","hmsz":"H.mm.ss z","ahmz":"H.mm z","hms":"H.mm.ss","ahm":"H.mm","hmz":"H.mm z","hm":"H.mm","ms":"mm.ss"}},"range":{"c00":{"s":"{sd}/{sm}/{sy} {st} - {et}","m":"{sd}/{sm}/{sy} {st} - {et}","l":"{sd}/{sm}/{sy} {st} - {et}","f":"{sd} den {sm} {sy} {st} - {et}"},"c01":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} den {sm} {sy} {st} - {ed} den {em} {ey} {et}"},"c02":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} den {ed} {sm} {sy} {st} - {ed} den {em} {ey} {et}"},"c03":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} den {ed} {sm} {sy} {st} - {ed} den {em} {ey} {et}"},"c10":{"s":"{sd} - {ed}/{sm}/{sy}","m":"{sd} - {ed}/{sm}/{sy}","l":"{sd} - {ed} {sm} {sy}","f":"{sd} - {ed} {sm} {sy}"},"c11":{"s":"{sd}/{sm} - {ed}/{em} {ey}","m":"{sd}/{sm} - {ed}/{em} {ey}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} - {em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_de = {"gregorian":{"order":"{time} {date}","date":{"dmwy":{"s":"EE dd.MM.yy","m":"EE dd.MM.yyyy","l":"EEE dd. MMM yyyy","f":"EEEE dd. MMMM yyyy"},"dmy":{"s":"dd.MM.yy","m":"dd.MM.yyyy","l":"dd. MMM yyyy","f":"dd. MMMM yyyy"},"dmw":{"s":"EE dd.MM","m":"EE dd.MM","l":"EEE dd. MMM","f":"EEEE dd. MMMM"},"dm":{"s":"dd.MM","m":"dd.MM","l":"dd. MMM","f":"dd. MMMM"},"my":{"s":"MM.yy","m":"MM.yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"dw":{"s":"EE dd","m":"EEE dd","l":"EEE dd","f":"EEEE dd"},"d":"dd.","m":{"s":"MM","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","ahms":"hh:mm:ss a","hmsz":"hh:mm:ss z","hms":"hh:mm:ss","ahmz":"hh:mm a z","ahm":"hh:mm a","hmz":"hh:mm z","ah":"hh a","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","hms":"HH:mm:ss","ahmz":"HH:mm z","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{st} - {et} {sd}{sm}.{sy}","m":"{st} - {et} {sd}{sm}.{sy}","l":"{st} - {et} {sd} {sm} {sy}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}{sm}.{sy} - {et} {ed}{em}.{ey}","m":"{st} {sd}{sm} - {et} {ed}{em} {sy}","l":"{st} {sd} {sm} - {et} {ed} {em} {sy}","f":"{st} {sd} {sm} - {et} {ed} {em} {sy}"},"c02":{"s":"{st} {sd}{sm}.{sy} - {et} {ed}{em}.{ey}","m":"{st} {sd}{sm} - {et} {ed}{em} {sy}","l":"{st} {sd} {sm} - {et} {ed} {em} {sy}","f":"{st} {sd} {sm} - {et} {ed} {em} {sy}"},"c03":{"s":"{st} {sd}{sm}.{sy} - {et} {ed}{em}.{ey}","m":"{st} {sd}{sm}.{sy} - {et} {ed}{em}.{ey}","l":"{st} {sd} {sm} {sy} - {et} {ed} {em} {ey}","f":"{st} {sd} {sm} {sy} - {et} {ed} {em} {ey}"},"c10":{"s":"{sd}{sm}.{sy} - {ed}{em}.{ey}","m":"{sd}{sm}.{sy} - {ed}{em}.{ey}","l":"{sd}-{ed} {sm} {sy}","f":"{sd}-{ed} {sm} {sy}"},"c11":{"s":"{sd}{sm}.{sy} - {ed}{em}.{ey}","m":"{sd}{sm} - {ed}{em} {sy}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}{sm}.{sy} - {ed}{em}.{ey}","m":"{sd}{sm}.{sy} - {ed}{em}.{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_el = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"dd/MM"},"dmy":{"m":"d MMM yy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, d/M/yy","m":"EE, d/M/yyyy","l":"EEE, d MMM yyyy","f":"EEEE, d MMM yyyy"},"dmw":{"s":"E, d/M","m":"EE, d/M","l":"EEEE, d MMM","f":"EEEE, d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"m":"{st} - {et} {sd} {sm} {sy}","l":"{st} - {et} {sd} {sm} {sy}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","l":"{st} {sd} - {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","f":"{st} {sd} - {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} - {et} {ed} {em} {ey}","f":"{st} {sd} {sm} - {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}"},"c10":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} - {ed} {em} {ey}","f":"{sd} - {ed} {em} {ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}"},"c11":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} - {ed} {em} {ey}","f":"{sd} {sm} - {ed} {em} {ey}"},"c12":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}"},"c20":{"s":"{sm}/{sy} - {em}/{ey}"}}},"generated":true};
ilib.data.dateformats_en_CA = {"gregorian":{"date":{"dmwy":{"l":"EEE d MMM, yyyy","f":"EEEE d MMMM, yyyy"},"dmy":{"l":"d MMM, yyyy","f":"d MMMM, yyyy"}},"range":{"c00":{"l":"{st} - {et}, {sd} {sm}, {sy}","f":"{st} - {et}, {sd} {sm}, {sy}"},"c01":{"l":"{sd} {st} - {ed} {et} {sm}, {sy}","f":"{sd} {st} - {ed} {et} {sm}, {sy}"},"c10":{"l":"{sd}-{ed} {sm}, {sy}","f":"{sd}-{ed} {sm}, {sy}"},"c11":{"l":"{sd} {sm} - {ed} {em}, {sy}","f":"{sd} {sm} - {ed} {em}, {sy}"},"c12":{"l":"{sd} {sm}, {sy} - {ed} {em}, {ey}","f":"{sd} {sm}, {sy} - {ed} {em}, {ey}"},"c20":{"l":"{sm}, {sy} - {em}, {ey}","f":"{sm}, {sy} - {em}, {ey}"}}}};
ilib.data.dateformats_en_US = {"gregorian":{"date":{"dmwy":{"s":"EE M/d/yy","m":"EEE M/dd/yyyy","l":"EEE MMM d, yyyy","f":"EEEE MMMM d, yyyy"},"dmy":{"s":"M/d/yy","m":"M/d/yyyy","l":"MMM d, yyyy","f":"MMMM d, yyyy"},"dmw":{"s":"EE M/d","m":"EE M/d","l":"EEE MMM d","f":"EEEE MMMM d"},"dm":{"s":"M/d","m":"M/d","l":"MMM d","f":"MMMM d"}},"range":{"c00":{"s":"{st} - {et} {sm}/{sd}/{sy}","m":"{st} - {et}, {sm}/{sd}/{sy}","l":"{st} - {et}, {sm} {sd}, {sy}","f":"{st} - {et}, {sm} {sd}, {sy}"},"c01":{"s":"{sm}/{sd}/{sy} {st} - {em}/{ed}/{ey} {et}","m":"{sm}/{sd}/{sy} {st} - {em}/{ed}/{ey} {et}","l":"{sm} {sd} {st} - {ed} {et}, {sy}","f":"{sm} {sd} {st} - {ed} {et}, {sy}"},"c02":{"s":"{sm}/{sd}/{sy} {st} - {em}/{ed}/{ey} {et}","m":"{sm}/{sd} {st} - {em}/{ed} {et}, {sy}","l":"{sm} {sd} {st} - {em} {ed} {et}, {sy}","f":"{sm} {sd} {st} - {em} {ed} {et}, {sy}"},"c03":{"s":"{sm}/{sd}/{sy} {st} - {em}/{ed}/{ey} {et}","m":"{sm}/{sd}/{sy} {st} - {em}/{ed}/{ey} {et}","l":"{sm} {sd}, {sy} {st} - {em} {ed}, {ey} {et}","f":"{sm} {sd}, {sy} {st} - {em} {ed}, {ey} {et}"},"c10":{"s":"{sm}/{sd}/{sy} - {em}/{ed}/{ey}","m":"{sm}/{sd}/{sy} - {em}/{ed}/{ey}","l":"{sm} {sd}-{ed}, {sy}","f":"{sm} {sd}-{ed}, {sy}"},"c11":{"s":"{sm}/{sd}/{sy} - {em}/{ed}/{ey}","m":"{sm}/{sd} - {em}/{ed}, {sy}","l":"{sm} {sd} - {em} {ed}, {sy}","f":"{sm} {sd} - {em} {ed}, {sy}"},"c12":{"s":"{sm}/{sd}/{sy} - {em}/{ed}/{ey}","m":"{sm}/{sd}/{sy} - {em}/{ed}/{ey}","l":"{sm} {sd}, {sy} - {em} {ed}, {ey}","f":"{sm} {sd}, {sy} - {em} {ed}, {ey}"},"c20":{"s":"{sm}/{sy} - {em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_en_ZA = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"E yy/MM/dd","m":"EE yyyy/MM/dd","l":"EEE dd MMM yy","f":"EEEE dd MMMM yyyy"},"dmy":{"s":"yy/MM/dd","m":"yyyy/MM/dd","l":"dd MMM yy","f":"dd MMMM yyyy"},"dmw":{"s":"E MM/dd","m":"EE MM/dd","l":"EEE dd MMM","f":"EEEE dd MMMM"},"dm":{"s":"MM/dd","m":"MM/dd","l":"dd MMM","f":"dd MMMM"},"my":{"s":"yy/MM","m":"yyyy/MM","l":"MMM yy","f":"MMMM yyyy"},"d":{"s":"dd","m":"dd","l":"dd","f":"dd"},"m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"h:mm:ss a Z","ahms":"h:mm:ss a ","hmsz":"h:mm:ss Z","ahmz":"h:mm a Z","ahm":"h:mm a","hmz":"h:mm Z","ah":"h a"},"24":{"ahmsz":"H:mm:ss Z","hmsz":"H:mm:ss Z","ahmz":"H:mm Z","hmz":"H:mm Z","h":"H"}},"range":{"c00":{"s":"{sy}/{sm}/{sd}, {st} - {et}","m":"{sy}/{sm}/{sd}, {st} - {et}","l":"{sd} {sm} {sy}, {st} - {et}","f":"{sd} {sm} {sy}, {st} - {et}"},"c01":{"s":"{sy}/{sm}/{sd} {st} â {ed} {et}","m":"{sy}/{sm}/{sd} {st} â {ed} {et}","l":"{sd} {sm} {sy} {st} â {ed} {em} {et}","f":"{sd} {sm} {sy} {st} â {ed} {em} {et}"},"c02":{"s":"{sm}/{sd} {st} - {em}/{ed} {et}, {sy}","m":"{sm}/{sd} {st} - {em}/{ed} {et}, {sy}","l":"{sd} {sm} {st} - {ed} {em} {et}, {sy}","f":"{sd} {sm} {st} - {ed} {em} {et}, {sy}"},"c03":{"s":"{sy}/{sm}/{sd} {st} - {ey}/{em}/{ed} {et}","m":"{sy}/{sm}/{sd} {st} - {ey}/{em}/{ed} {et}","l":"{sd} {sm} {sy}, {st} - {ed} {em} {ey}, {et}","f":"{sd} {sm} {sy}, {st} - {ed} {em} {ey}, {et}"},"c10":{"s":"{sy}/{sm}/{sd} â {ed}","m":"{sy}/{sm}/{sd} â {ed}","l":"{sd} â {ed} {sm} {sy}","f":"{sd} â {ed} {sm} {sy}"},"c11":{"s":"{sy}/{sm}/{sd} â {em}/{ed}","m":"{sy}/{sm}/{sd} â {em}/{ed}","l":"{sd} {sm} â {ed} {em} {sy}","f":"{sd} {sm} â {ed} {em} {sy}"},"c12":{"s":"{sy}/{sm}/{sd} â {ey}/{em}/{ed}","m":"{sy}/{sm}/{sd} â {ey}/{em}/{ed}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sy}/{sm} â {ey}/{em}","m":"{sy}/{sm} â {ey}/{em}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}}};
ilib.data.dateformats_es = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"EE dd/MM/yy","m":"EEE dd/MM/yyyy","l":"EEE dd 'de' MMM yyyy","f":"EEEE dd 'de' MMMM yyyy"},"dmy":{"s":"dd/MM/yy","m":"dd/MM/yyyy","l":"dd 'de' MMM yyyy","f":"dd 'de' MMMM yyyy"},"dmw":{"s":"EE dd/MM","m":"EE dd/MM","l":"EEE dd 'de' MMM","f":"EEEE dd 'de' MMMM"},"dm":{"s":"dd/MM","m":"dd/MM","l":"dd 'de' MMM","f":"dd 'de' MMMM"},"my":{"s":"MM/yy","m":"MM/yyyy","l":"MMM yy","f":"MMMM yyyy"},"dw":{"s":"EE dd","m":"EEE dd","l":"EEE dd","f":"EEEE dd"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yy","l":"yyyy","f":"yyyy G"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh:mm:ssa z","ahms":"hh:mm:ssa","hmsz":"hh:mm:ss z","hms":"hh:mm:ss","ahmz":"hh:mma z","ahm":"hh:mma","hmz":"hh:mm z","ah":"hha","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","hms":"HH:mm:ss","ahmz":"HH:mm z","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}}}};
ilib.data.dateformats_es_AR = {"gregorian":{"time":{"12":{"ahmsz":"hh'h'mm:ss a Z","ahms":"hh'h'mm:ss a","hmsz":"hh'h'mm:ss Z","ahmz":"hh'h'mm a Z","hms":"hh'h'mm:ss","ahm":"hh'h'mm a","hmz":"hh'h'mm Z","ah":"hh a","hm":"hh'h'mm"},"24":{"ahmsz":"HH'h'mm:ss Z","ahms":"HH'h'mm:ss","hmsz":"HH'h'mm:ss Z","ahmz":"HH'h'mm Z","hms":"HH'h'mm:ss","ahm":"HH'h'mm","hmz":"HH'h'mm Z","hm":"HH'h'mm"}}}};
ilib.data.dateformats_et = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d.M","m":"dd.MM","l":"d. MMM","f":"d. MMMM"},"dmy":{"s":"d.M.yy","m":"dd.MM.yyyy","l":"d. MMM yyyy","f":"d. MMMM yyyy"},"my":{"s":"M.yy","m":"MM.yyyy"},"m":{"s":"MM","l":"MMMM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"dmwy":{"s":"E, d.M yy","m":"EE, d.M yy","l":"EEE, d. MMMM yyyy","f":"EEEE, d. MMMM yyyy"},"dmw":{"s":"E, d.M","m":"EE, d.M","l":"EEEE, d. MMM","f":"EEEE, d. MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm.ss a z","hmsz":"h:mm.ss z","ahms":"h:mm.ss a","hms":"h:mm.ss","ms":"mm.ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"H:mm.ss z","ahms":"H:mm.ss","hmsz":"H:mm.ss z","hms":"H:mm.ss","ms":"mm.ss"}},"range":{"c00":{"s":"{st} â {et} {sd}.{sm}.{sy}","m":"{st} â {et} {sd}.{sm}.{sy}","l":"{st} â {et} {sd}. {sm} {sy}","f":"{st} â {et} {sd}. {sm} {sy}"},"c01":{"s":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","l":"{st} {sd}. â {et} {ed}. {em} {ey}","m":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","f":"{st} {sd}. â {et} {ed}. {em} {ey}"},"c02":{"s":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","l":"{st} {sd}. {sm} â {et} {ed}. {em} {ey}","f":"{st} {sd}. {sm} â {et} {ed}. {em} {ey}","m":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}"},"c10":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd}. â {ed}. {em} {ey}","f":"{sd}. â {ed}. {em} {ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}"},"c11":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd}. {sm} â {ed}. {em} {ey}","f":"{sd}. {sm} â {ed}. {em} {ey}"},"c12":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd}. {sm} {sy} â {ed}. {em} {ey}","f":"{sd}. {sm} {sy} â {ed}. {em} {ey}"},"c20":{"s":"{sm}.{sy} â {em}.{ey}","m":"{sm}.{sy} â {em}.{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_fa = {"gregorian":{"order":"{time} {date}","date":{"dmwy":{"s":"E yy/M/d","m":"EE yy/M/d","f":"EEEE d MMM yyyy"},"dmy":{"s":"âyy/M/d","m":"âyy/M/d","l":"âd MMM yyyy","f":"âd MMMM yyyy"},"dmw":{"s":"E M/d","m":"EE M/d","l":"EEEE d MMM","f":"EEEE d MMM"},"dm":{"s":"âM/d","m":"âM/d","l":"âd MMM","f":"âd MMMM"},"my":{"s":"âyy/M","m":"âyy/M"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"âh:mm:ss a (z)","ahms":"âh:mm:ss a","hmsz":"âh:mm:ss (z)","hms":"âh:mm:ss","ahmz":"âh:mm a (z)","ahm":"âh:mm a","hmz":"âh:mm (z)","ah":"âh a","hm":"âh:mm","ms":"âmm:ss"},"24":{"ahmsz":"âH:mm:ss (z)","ahms":"âH:mm:ss","hmsz":"âH:mm:ss (z)","hms":"âH:mm:ss","ahmz":"âH:mm (z)","ahm":"âH:mm","hmz":"âH:mm (z)","ah":"âH","hm":"âH:mm","ms":"âmm:ss"}},"range":{"c00":{"s":"{et} - {st} {sy}/{sm}/{sd}","m":"{et} - {st} {sy}/{sm}/{sd}","l":"{et} - {st} {sd} {sm} {sy}","f":"{et} - {st} {sd} {sm} {sy}"},"c01":{"s":"{et} {ey}/{em}/{ed} - {st} {sy}/{sm}/{sd}","m":"{et} {ey}/{em}/{ed} - {st} {sy}/{sm}/{sd}","l":"{st} {sd} ØªØ§ {et} {ed} {em} {ey}","f":"{st} {sd} ØªØ§ {et} {ed} {em} {ey}"},"c02":{"s":"{et} {ey}/{em}/{ed} - {st} {sy}/{sm}/{sd}","m":"{et} {ey}/{em}/{ed} - {st} {sy}/{sm}/{sd}","l":"{st} {sd} {sm} ØªØ§ {et} {ed} {em} {ey}","f":"{st} {sd} {sm} ØªØ§ {et} {ed} {em} {ey}"},"c03":{"s":"{et} {ey}/{em}/{ed} - {st} {sy}/{sm}/{sd}","m":"{et} {ey}/{em}/{ed} - {st} {sy}/{sm}/{sd}","l":"â{sd} {sm} {sy} {st} ØªØ§ {ed} {em} {ey} {et}","f":"â{sd} {sm} {sy} {st} ØªØ§ {ed} {em} {ey} {et}"},"c10":{"s":"â{ey}/{em}/{ed} - {sy}/{sm}/{sd}","m":"â{ey}/{em}/{ed} - {sy}/{sm}/{sd}","l":"â{sd} ØªØ§ {ed} {em} {ey}","f":"â{sd} ØªØ§ {ed} {em} {ey}"},"c11":{"s":"â{ey}/{em}/{ed} - {sy}/{sm}/{sd}","m":"â{ey}/{em}/{ed} - {sy}/{sm}/{sd}","l":"â{sd} {sm} ØªØ§ {ed} {em} {ey}","f":"â{sd} {sm} ØªØ§ {ed} {em} {ey}"},"c12":{"s":"â{ey}/{em}/{ed} - {sy}/{sm}/{sd}","m":"â{ey}/{em}/{ed} - {sy}/{sm}/{sd}","l":"â{sd} {sm} {sy} ØªØ§ {ed} {em} {ey}","f":"â{sd} {sm} {sy} ØªØ§ {ed} {em} {ey}"},"c20":{"s":"â{ey}/{em} - {sy}/{sm}","m":"â{ey}/{em} - {sy}/{sm}","l":"{sm} {sy} ØªØ§ {em} {ey}","f":"{sm} {sy} ØªØ§ {em} {ey}"},"c30":"â{ey} - {sy}"}}};
ilib.data.dateformats_ff = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"dd/MM"},"dmy":{"s":"yy-M-d","m":"d MMM, yy","l":"d MMM yy"},"my":{"m":"MM/yy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E d/M/yy","m":"EE d/M/yy","f":"EEEE d MMM yyyy"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE d MMM","f":"EEEE d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sd} {sm}, {sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_fi = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"E d.M.yy","m":"EE d.M.yyyy","l":"EEE d. MMM yyyy","f":"EEEE d. MMMM yyyy"},"dmy":{"s":"d.M.yy","m":"d.M.yyyy","l":"d. MMM yyyy","f":"d. MMMM yyyy"},"dmw":{"s":"E d.M.","m":"EE d.M.","l":"EEE d. MMM","f":"EEEE d. MMMM"},"dm":{"s":"d.M","m":"d.M","l":"d. MMM","f":"d. MMMM"},"my":{"s":"M.yy","m":"M.yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"d":{"s":"d","m":"d","l":"d","f":"d"},"m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"N","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"h.mm.ss a z","ahms":"h.mm.ss a","hmsz":"h.mm.ss z","ahmz":"h.mm a z","hms":"h.mm.ss","ahm":"h.mm a","hmz":"h.mm z","ah":"h a","hm":"h.mm","ms":"mm.ss"},"24":{"ahmsz":"H.mm.ss z","ahms":"H.mm.ss","hmsz":"H.mm.ss z","ahmz":"H.mm z","hms":"H.mm.ss","ahm":"H.mm","hmz":"H.mm z","hm":"H.mm","ms":"mm.ss"}},"range":{"c00":{"s":"{sd}.{sm}.{sy} {st} â {et}","m":"{sd}.{sm}.{sy} {st} â {et}","l":"{sd}. {sm} {sy} {st} â {et}","f":"{sd}. {sm} {sy} {st} â {et} "},"c01":{"s":"{sd}.{sm} {st} â {ed}.{em}.{ey} {et}","m":"{sd}.{sm} {st} â {ed}.{em}.{ey} {et}","l":"{sd}. {st} â {ed}. {et} {sm} {sy}","f":"{sd}. {st} â {ed}. {et} {sm} {sy}"},"c02":{"s":"{sd}.{sm} {st} â {ed}.{em}.{ey} {et}","m":"{sd}.{sm} {st} â {ed}.{em}.{ey} {et}","l":"{sd}. {sm} {st} â {ed}. {em} {sy} {et}","f":"{sd}. {sm} {st} â {ed}. {em} {sy} {et}"},"c03":{"s":"{sd}.{sm}.{sy} {st} â {ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st} â {ed}.{em}.{ey} {et}","l":"{sd}. {sm} {sy} {st} â {ed}. {em} {ey} {et}","f":"{sd}. {sm} {sy} {st} â {ed}. {em} {ey} {et}"},"c10":{"s":"{sd}â{ed}.{sm}.{sy}","m":"{sd}â{ed}.{sm}.{sy}","l":"{sd}. â {ed}. {sm} {sy}","f":"{sd}. â {ed}. {sm} {sy}"},"c11":{"s":"{sd}.{sm} â {ed}.{em}.{sy}","m":"{sd}.{sm} â {ed}.{em}.{sy}","l":"{sd}. {sm} â {ed}. {em} {sy}","f":"{sd}. {sm} â {ed}. {em} {sy}"},"c12":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd}. {sm} {sy} â {ed}. {em} {ey}","f":"{sd}. {sm} {sy} â {ed}. {em} {ey}"},"c20":{"s":"{sm}.{sy} â {em}.{ey}","m":"{sm}.{sy} â {em}.{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}}};
ilib.data.dateformats_fr = {"gregorian":{"order":"{time} {date}","date":{"dmwy":{"s":"EE d/MM/yy","m":"EE d/MM/yyyy","l":"EEE d MMM yyyy","f":"EEEE d MMMM yyyy"},"dmy":{"s":"d/MM/yy","m":"d/MM/yyyy","l":"d MMM yyyy","f":"d MMMM yyyy"},"dmw":{"s":"EE d/MM","m":"EE d/MM","l":"EEE d MMM","f":"EEEE d MMMM"},"dm":{"s":"d/MM","m":"d/MM","l":"d MMM","f":"d MMMM"},"my":{"s":"MM/yy","m":"MM/yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"d":"dd","m":{"s":"MM","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","ahms":"hh:mm:ss a","hmsz":"hh:mm:ss z","hms":"hh:mm:ss","ahmz":"hh:mm a z","ahm":"hh:mm a","hmz":"hh:mm z","ah":"hh a","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","hms":"HH:mm:ss","ahmz":"HH:mm z","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{st} - {et} {sd}/{sm}/{sy}","m":"{st} - {et} {sd}/{sm}/{sy}","l":"{st} - {et} {sd} {sm} {sy}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}/{sm} - {et} {ed}/{em}/{ey}","m":"{st} {sd}/{sm} - {et} {ed}/{em}/{sy}","l":"{st} {sd} {sm} - {et} {ed} {em} {sy}","f":"{st} {sd} {sm} - {et} {ed} {em} {sy}"},"c02":{"s":"{st} {sd}/{sm} - {et} {ed}/{em}/{ey}","m":"{st} {sd}/{sm} - {et} {ed}/{em}/{sy}","l":"{st} {sd} {sm} - {et} {ed} {em} {sy}","f":"{st} {sd} {sm} - {et} {ed} {em} {sy}"},"c03":{"s":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","m":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} {sy} - {et} {ed} {em} {ey}","f":"{st} {sd} {sm} {sy} - {et} {ed} {em} {ey}"},"c10":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd}-{ed} {sm} {sy}","f":"{sd}-{ed} {sm} {sy}"},"c11":{"s":"{sd}/{sm} - {ed}/{em}/{ey}","m":"{sd}/{sm} - {ed}/{em}/{sy}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} - {em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_ga = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"d MMM","l":"MMM d"},"dmy":{"s":"yy-M-d","m":"d MMM yy","l":"yyyy MMM d"},"my":{"s":"yy-M","m":"MMM yy","l":"yyyy MMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_gl = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d-M","m":"dd/MM"},"dmy":{"m":"d MMM, yy","l":"d MMM, yyyy","f":"dd MMMM yyyy"},"my":{"s":"M-yy","m":"MM/yy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, d/M/yy","m":"EE, d/M/yy","l":"EEE, d MMM, yyyy","f":"EEEE, d MMM, yyyy"},"dmw":{"s":"E, d-M","m":"EE, d-M","l":"EEEE d MMM","f":"EEEE d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm}, {sy}","l":"{st} â {et} {sd} {sm}, {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} â {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","f":"{st} {sd} â {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} â {et} {ed} {em} {ey}","f":"{st} {sd} {sm} â {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}"},"c10":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} â {ed} {em} {ey}","f":"{sd} â {ed} {em} {ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}"},"c11":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em} {ey}","f":"{sd} {sm} â {ed} {em} {ey}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_ha = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M/d","m":"d MMM","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"d MMM, yy","l":"yyyy MMM d","f":"d MMMM, yyyy"},"my":{"m":"MMM, yy"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, M/d/yy","m":"EE, M/d/yy","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"E, M/d","m":"EE, M/d","l":"EEEE, MMM d","f":"EEEE, MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sd} {sm}, {sy}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sd} {sm}, {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_he = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"E, dd.MM.yy","m":"EE, dd.MM.yyyy","l":"EEE, d MMM yyyy","f":"EEEE, d ×MMMM yyyy"},"dmw":{"s":"E, dd.MM","m":"EE, dd.MM","l":"EEE, d MMM","f":"EEEE, d ×MMMM"},"dmy":{"s":"âdd.MM.yy","m":"âdd.MM.yyyy","l":"âd MMM yyyy","f":"âd ×MMMM yyyy"},"dm":{"s":"âdd.MM","m":"âdd.MM","l":"âd MMM","f":"âd ×MMMM"},"my":{"s":"âMM.yy","m":"âMM.yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"dw":{"s":"E, d","m":"EE, d","l":"EEE, d","f":"EEEE, d"},"m":{"s":"MM"},"d":"d"},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","hms":"HH:mm:ss","ahmz":"HH:mm z","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"â{sd}.{sm}.{sy} {st} â {et}","m":"â{sd}.{sm}.{sy} {st} â {et}","l":"â{sd} {sm} {sy} {st} â {et}","f":"â{sd} ×{sm} {sy} {st} â {et}"},"c01":{"s":"â{sd}.{sm}.{sy} {st} â {ed}.{em}.{ey} {et}","m":"â{sd}.{sm}.{sy} {st} â {ed}.{em}.{ey} {et}","l":"â{sd} {st} â {ed} {et} {em} {ey}","f":"â{sd} {st} â {ed} {et} ×{em} {ey}"},"c02":{"s":"â{sd}.{sm}.{sy} {st} â {ed}.{em}.{ey} {et}","m":"â{sd}.{sm}.{sy} {st} â {ed}.{em}.{ey} {et}","l":"â{sd} {sm} {st} â {ed} {em} {ey} {et}","f":"â{sd} ×{sm} {st} â {ed} ×{em} {ey} {et}"},"c10":{"s":"â{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"â{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"â{sd} â {ed} {em} {ey}","f":"â{sd} â {ed} ×{em} {ey}"},"c11":{"s":"â{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"â{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"â{sd} {sm} â {ed} {em} {ey}","f":"â{sd} ×{sm} â {ed} ×{em} {ey}"},"c12":{"s":"â{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"â{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"â{sd} {sm} {sy} â {ed} {em} {ey}","f":"â{sd} ×{sm} {sy} â {ed} ×{em} {ey}"},"c20":{"s":"â{sm}.{sy} â {em}.{ey}","m":"â{sm}.{sy} â {em}.{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"â{sy} â {ey}"}}};
ilib.data.dateformats_hi = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"dd-MM"},"dmy":{"m":"dd-MM-yy","l":"d MMM, yy","f":"dd MMMM yyyy"},"my":{"s":"M-yy","m":"MM-yyyy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, d/M/yy","m":"EE, d/M/yy","l":"EEE, d MMM yyyy","f":"EEEE, d MMM yyyy"},"dmw":{"s":"E, d/M","m":"EE, d/M","l":"EEEE, d MMM","f":"EEEE, d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm: a z","ahm":"h:mm a","hm":"h:mm"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd}-{sm}-{sy}","l":"{st} â {et} {sd} {sm}, {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} â {et} {ed} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","f":"{st} {sd} {sm} â {et} {ed} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} â {et} {ed} {em} {ey}","f":"{st} {sd} {sm} â {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}"},"c10":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} â {ed} {sm} {ey}","f":"{sd} â {ed} {sm} {ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}"},"c11":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em} {ey}","f":"{sd} {sm} â {ed} {em} {ey}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":false};
ilib.data.dateformats_hr = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d. M.","m":"dd. MM.","l":"d. MMM","f":"d. MMMM"},"dmy":{"s":"d. M. yy.","m":"d. M. yy","l":"d. MMM yyyy.","f":"d. MMMM yyyy"},"my":{"s":"M. yy.","m":"MM. yyyy.","l":"MMM yyyy.","f":"MMMM yyyy."},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, d. M. yy.","m":"EE, d. M. yy.","l":"EEE, d. MMM yyyy.","f":"EEEE, d. MMM yyyy."},"dmw":{"s":"E, d. M.","m":"EE, d. M.","l":"EEEE, d. MMM","f":"EEEE, d. MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","hmsz":"hh:mm:ss z","ahms":"hh:mm:ss a","hms":"hh:mm:ss","ms":"mm:s","ahmz":"hh:mm a z","ahm":"hh:mm a","hm":"hh:mm","hmz":"hh:mm z","ah":"hh a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} - {et} {sd}. {sm}. {sy}.","m":"{st} - {et} {sd}. {sm}. {sy}","l":"{st} - {et} {sd}. {sm} {sy}.","f":"{st} - {et} {sd}. {sm} {sy}"},"c01":{"s":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","l":"{st} {sd}. - {et} {ed}. {em} {ey}.","m":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","f":"{st} {sd}. - {et} {ed}. {em} {ey}."},"c02":{"s":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","l":"{st} {sd}. {sm} - {et} {ed}. {em} {ey}.","f":"{st} {sd}. {sm} - {et} {ed}. {em} {ey}.","m":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}."},"c10":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sd}. - {ed}. {em} {ey}.","f":"{sd}. - {ed}. {em} {ey}.","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}."},"c11":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sd}. {sm} - {ed}. {em} {ey}.","f":"{sd}. {sm} - {ed}. {em} {ey}."},"c12":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sd}. {sm} {sy}. - {ed}. {em} {ey}.","f":"{sd}. {sm} {sy}. - {ed}. {em} {ey}."},"c20":{"s":"{sm}.{sy}. - {em}.{ey}.","m":"{sm}.{sy}. - {em}.{ey}.","l":"{sm} {sy}. - {em} {ey}.","f":"{sm} {sy}. - {em} {ey}."}}},"generated":true};
ilib.data.dateformats_hu = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M. d.","m":"MM.dd.","l":"MMM d.","f":"MMMM d."},"dmy":{"s":"yy.MM.dd.","m":"yyyy.MM.dd","l":"yyyy. MMM d.","f":"yyyy. MMMM d"},"my":{"s":"yy.M.","m":"yyyy.MM","l":"yyyy. MMM","f":"yyyy. MMMM"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"yy.MM.dd., E","m":"yyyy.MM.dd., EE","l":"yyyy. MMM d., EEE","f":"yyyy. MMM d., EEEE"},"dmw":{"s":"M. d., E","m":"M. d., EE","l":"MMM d., EEEE","f":"MMM d., EEEE"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"a h:mm:ss z","hmsz":"h:mm:ss z","ahms":"a h:mm:ss","hms":"h:mm:ss","ms":"mm:","ahmz":"a h:mm z","ahm":"a h:mm","hm":"h:mm","hmz":"h:mm z","ah":"a h"}},"range":{"c00":{"s":"{st} - {et} {sy}.{sm}.{sd}.","m":"{st} - {et} {sy}.{sm}.{sd}","l":"{st} - {et} {sy}. {sm} {sd}.","f":"{st} - {et} {sy}. {sm} {sd}"},"c01":{"s":"{st} {sy}.{sm}.{sd} - {et} {ed}.","l":"{st} {sy}. {sm} {sd} - {et} {ed}.","m":"{st} {sy}.{sm}.{sd} - {et} {ed}.","f":"{st} {sy}. {sm} {sd} - {et} {ed}."},"c02":{"s":"{st} {sy}.{sm}.{sd}. - {et} {em}.{ed}.","l":"{st} {sy}. {sm} {sd} - {et} {em} {ed}.","f":"{st} {sy}. {sm} {sd} - {et} {em} {ed}.","m":"{st} {sy}.{sm}.{sd}. - {et} {em}.{ed}."},"c10":{"s":"{sy}.{sm}.{sd} - {ed}.","l":"{sy}. {sm} {sd} - {ed}.","f":"{sy}. {sm} {sd} - {ed}.","m":"{sy}.{sm}.{sd} - {ed}."},"c11":{"s":"{sy}.{sm}.{sd}. - {em}.{ed}.","m":"{sy}.{sm}.{sd}. - {em}.{ed}.","l":"{sy}. {sm} {sd} - {em} {ed}.","f":"{sy}. {sm} {sd} - {em} {ed}."},"c12":{"s":"{sy}.{sm}.{sd}. - {ey}.{em}.{ed}.","m":"{sy}.{sm}.{sd}. - {ey}.{em}.{ed}.","l":"{sy}. {sm} {sd}. - {ey}. {em} {ed}.","f":"{sy}. {sm} {sd}. - {ey}. {em} {ed}."},"c20":{"s":"{sy}.{sm}. - {ey}.{em}.","m":"{sy}.{sm}. - {ey}.{em}.","l":"{sy}. {sm} - {ey}. {em}","f":"{sy}. {sm} - {ey}. {em}"}}},"generated":true};
ilib.data.dateformats_hy = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"MMM d","l":"MMM d","f":"MMMM dd"},"dmy":{"s":"yy-M-d","m":"MMM d, yy","l":"yyyy MMM d","f":"MMMM d, yyyy"},"my":{"s":"yy-M","m":"MMM d, yy","l":"yyyy MMM","f":"MMMM d, yyyy"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sm} {sd}, {sy}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sm} {sd}, {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_id = {"gregorian":{"date":{"dmwy":{"s":"E d/M/yy","m":"EE, d/M/yyyy","l":"EEE, d MMM yyyy","f":"EEEE, d MMMM yyyy"},"dmy":{"s":"d/M/yy","m":"d/M/yyyy","l":"d MMM yyyy","f":"d MMMM yyyy"},"dmw":{"s":"E d/M","m":"EE, d/M","l":"EEE, d MMM","f":"EEEE, d MMMM"},"dm":{"s":"d/M","m":"d/M","l":"d MMM","f":"d MMMM"},"my":{"s":"M/yy","m":"M/yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"dw":{"s":"E d","m":"EE, d","l":"EEE, d","f":"EEEE, d"},"d":{"s":"d","m":"d","l":"d","f":"d"},"m":{"s":"M","m":"M","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"N","l":"MMM","f":"MMMM"}},"range":{"c00":{"s":"{sd}/{sm}/{sy} {st} â {et}","m":"{sd}/{sm}/{sy} {st} â {et}","l":"{sd} {sm} {sy} {st} â {et}","f":"{sd} {sm} {sy} {st} â {et} "},"c01":{"s":"{sd}/{sm}/{sy} {st} â {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} â {ed}/{em} {et}, {sy}","l":"{sd} {st} â {ed} {et}, {sm} {sy}","f":"{sd} {st} â {ed} {et}, {sm} {sy}"},"c02":{"s":"{sd}/{sm}/{sy} {st} â {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} â {ed}/{em} {et}, {sy}","l":"{sd} {sm} {st} â {ed} {em} {et}, {sy}","f":"{sd} {sm} {st} â {ed} {em} {et}, {sy}"},"c03":{"s":"{sd}/{sm}/{sy} {st} â {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} â {ed}/{em}/{ey} {et}","l":"{sd} {sm} {sy} {st} â {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} â {ed} {em} {ey} {et}"},"c10":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd}â{ed} {sm} {sy}","f":"{sd}â{ed} {sm} {sy}"},"c11":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em} {sy}","f":"{sd} {sm} â {ed} {em} {sy}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy}â{ey}"}}};
ilib.data.dateformats_it = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"EE dd/MM/yy","m":"EEE dd/MM/yyyy","l":"EEE dd MMM yyyy","f":"EEEE dd MMMM yyyy"},"dmy":{"s":"dd/MM/yy","m":"dd/MM/yyyy","l":"dd MMM yyyy","f":"dd MMMM yyyy"},"dmw":{"s":"EE dd/MM","m":"EE dd/MM","l":"EEE dd MMM","f":"EEEE dd MMMM"},"dm":{"s":"dd/MM","m":"dd/MM","l":"dd MMM","f":"dd MMMM"},"my":{"s":"MM/yy","m":"MM/yyyy","l":"MMM yy","f":"MMMM yyyy"},"dw":{"s":"EE dd","m":"EEE dd","l":"EEE dd","f":"EEEE dd"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yy","l":"yyyy","f":"yyyy G"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh.mm.ss a z","ahms":"hh.mm.ss a","hmsz":"hh.mm.ss z","hms":"hh.mm.ss","ahmz":"hh.mm a z","ahm":"hh.mm a","hmz":"hh.mm z","ah":"hh a","hm":"hh.mm","ms":"mm.ss","h":"hh"},"24":{"ahmsz":"HH.mm.ss z","ahms":"HH.mm.ss","hmsz":"HH.mm.ss z","hms":"HH.mm.ss","ahmz":"HH.mm z","ahm":"HH.mm","hmz":"HH.mm z","ah":"HH","hm":"HH.mm","ms":"mm.ss","h":"HH"}},"range":{"c00":{"s":"{st} - {et} {sd}/{sm}/{sy}","m":"{st} - {et} {sd}/{sm}/{sy}","l":"{st} - {et} {sd} {sm} {sy}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et} {sy}","l":"{sd} {st} - {ed} {et} {sm} {sy}","f":"{sd} {st} - {ed} {et} {sm} {sy}"},"c02":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et} {sy}","l":"{sd} {sm} {st} - {ed} {em} {et} {sy}","f":"{sd} {sm} {st} - {ed} {em} {et} {sy}"},"c03":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c10":{"s":"{sd}-{ed}/{sm}/{sy}","m":"{sd}-{ed}/{sm}/{sy}","l":"{sd}-{ed} {sm} {sy}","f":"{sd}-{ed} {sm} {sy}"},"c11":{"s":"{sd}/{sm}-{ed}/{em} {sy}","m":"{sd}/{sm} - {ed}/{em} {sy}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}/{sm}/{sy}-{ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy}-{em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_ja = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"Eyy/MM/d","m":"EEyyyy/MM/d","l":"EEEyyyyå¹´MMMædæ¥","f":"yyyyå¹´MMMMædæ¥ï¼EEEEï¼"},"dmy":{"s":"yy/MM/d","m":"yyyy/MM/d","l":"yyyyå¹´MMMædæ¥","f":"yyyyå¹´MMMMædæ¥"},"dmw":{"s":"EMM/d","m":"EEMM/d","l":"EEEMMMædæ¥","f":"MMMMædæ¥ï¼EEEEï¼"},"dm":{"s":"MM/d","m":"MM/d","l":"MMMædæ¥","f":"MMMMædæ¥"},"my":{"s":"yy/MM","m":"yyyy/MM","l":"yyyyå¹´MMMæ","f":"yyyyå¹´MMMMæ"},"dw":{"s":"EEd","m":"EEd","l":"EEEd","f":"EEEEd"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"ahh:mm:ss z","ahms":"ahh:mm:ss","hmsz":"hh:mm:ss z","hms":"hh:mm:ss","ahmz":"ahh:mm z","ahm":"ahh:mm","hmz":"hh:mm z","ah":"ahh","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","hms":"HH:mm:ss","ahmz":"HH:mm z","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{sy}/{sm}/{sd} {st}-{et}","m":"{sy}/{sm}/{sd} {st}-{et}","l":"{sy}å¹´{sm}æ{sd}æ¥{st}-{et}","f":"{sy}å¹´{sm}æ{sd}æ¥{st}-{et}"},"c01":{"s":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","m":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","l":"{sy}å¹´{sm}æ{sd}æ¥{st}-{ed}æ¥{et}","f":"{sy}å¹´{sm}æ{sd}æ¥{st}-{ed}æ¥{et}"},"c02":{"s":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","m":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","l":"{sy}å¹´{sm}æ{sd}æ¥{st}-{em}æ{ed}æ¥{et}","f":"{sy}å¹´{sm}æ{sd}æ¥{st}-{em}æ{ed}æ¥{et}"},"c03":{"s":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","m":"{sy}/{sm}/{sd} {st}-{ey}/{em}/{ed} {et}","l":"{sy}å¹´{sm}æ{sd}æ¥{st}-{ey}å¹´{em}æ{ed}æ¥{et}","f":"{sy}å¹´{sm}æ{sd}æ¥{st}-{ey}å¹´{em}æ{ed}æ¥{et}"},"c10":{"s":"{sy}/{sm}/{sd}-{ed}","m":"{sy}/{sm}/{sd}-{ed}","l":"{sy}å¹´{sm}æ{sd}-{ed}æ¥","f":"{sy}å¹´{sm}æ{sd}-{ed}æ¥"},"c11":{"s":"{sy}/{sm}/{sd}-{ey}/{em}/{ed}","m":"{sy}/{sm}/{sd}-{ey}/{em}/{ed}","l":"{sy}å¹´{sm}æ{sd}æ¥-{em}æ{ed}æ¥","f":"{sy}å¹´{sm}æ{sd}æ¥-{em}æ{ed}æ¥"},"c12":{"s":"{sy}/{sm}/{sd}-{ey}/{em}/{ed}","m":"{sy}/{sm}/{sd}-{ey}/{em}/{ed}","l":"{sy}å¹´{sm}æ{sd}æ¥-{ey}å¹´{em}æ{ed}æ¥","f":"{sy}å¹´{sm}æ{sd}æ¥-{ey}å¹´{em}æ{ed}æ¥"},"c20":{"s":"{sy}/{sm}-{ey}/{em}","m":"{sy}/{sm}-{ey}/{em}","l":"{sy}å¹´{sm}æ-{ey}å¹´{em}æ","f":"{sy}å¹´{sm}æ-{ey}å¹´{em}æ"},"c30":"{sy}-{ey}"}}};
ilib.data.dateformats_ka = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d.M.","m":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"yy MMM d","l":"yyyy MMM d","f":"yyyy MMMM dd"},"my":{"s":"M.yy","m":"yy MMM","l":"yyyy MMM","f":"yyyy MMMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, d.M.yy","m":"EE, d.M.yy","l":"EEE, d MMM yyyy","f":"EEEE, d MMM yyyy"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy} {sm} {sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} {sm} {sd}"},"c01":{"s":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}"},"c10":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}"},"c11":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sm}.{sy} â {em}.{ey}","m":"{sm}.{sy} â {em}.{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm}.{sy} â {em}.{ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_kk = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"dd.MM","l":"MMM d"},"dmy":{"s":"yy-M-d","m":"dd.MM.yyyy","l":"yyyy MMM d"},"my":{"s":"yy-M","m":"MM.yyyy","l":"yyyy MMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} - {et} {sy}-{sm}-{sd}","m":"{st} - {et} {sd}.{sm}.{sy}","l":"{st} - {et} {sy} {sm} {sd}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","l":"{st} {sd} - {et} {ed} {em} {ey} Ð¶.","m":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","f":"{st} {sd} - {et} {ed} {em} {ey} Ð¶."},"c02":{"s":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","l":"{st} {sd} {sm} - {et} {ed} {em} {ey} Ð¶.","f":"{st} {sd} {sm} - {et} {ed} {em} {ey} Ð¶.","m":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}"},"c10":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} - {ed} {em} {ey} Ð¶.","f":"{sd} - {ed} {em} {ey} Ð¶.","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}"},"c11":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} - {ed} {em} {ey} Ð¶.","f":"{sd} {sm} - {ed} {em} {ey} Ð¶."},"c12":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} {sy} Ð¶. - {ed} {em} {ey} Ð¶.","f":"{sd} {sm} {sy} Ð¶. - {ed} {em} {ey} Ð¶."},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}","l":"{sm} {sy} Ð¶. - {em} {ey} Ð¶.","f":"{sy}â{sm} - {ey}â{em}"}}},"generated":true};
ilib.data.dateformats_kn = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"dd-MM"},"dmy":{"m":"d MMM yy","l":"d, MMM, yyyy"},"my":{"m":"MM-yyyy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"dmwy":{"s":"E, M/d/yy","m":"EE, M/d/yy","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"E, d/M","m":"EE, d/M","l":"EEEE, d MMM","f":"EEEE, d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","hmsz":"hh:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"hh:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"hh:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sd}, {sm}, {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} â {et} {ed} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","f":"{st} {sd} {sm} â {et} {ed} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} â {et} {ed} {em} {ey}","f":"{st} {sd} {sm} â {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}"},"c10":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {ey}","f":"{sd} {sm} â {ed} {ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}"},"c11":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em} {ey}","f":"{sd} {sm} â {ed} {em} {ey}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}}};
ilib.data.dateformats_ko = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"E, yy. MM. dd","m":"EE, yyyy. MM. dd","l":"EEE, yyyyë MMMì dì¼","f":"yyyyë MMMì dì¼ (EEEE)"},"dmy":{"s":"yy. MM. dd","m":"yyyy. MM. dd","l":"yyyyë MMMì dì¼","f":"yyyyë MMMì dì¼"},"dmw":{"s":"E, MM. dd","m":"EE, MM. dd","l":"EEE, MMMì dì¼","f":"MMMì dì¼ (EEEE)"},"dm":{"s":"MM. dd","m":"MM. dd","l":"MMMì dì¼","f":"MMMì dì¼"},"my":{"s":"yy. MM.","m":"yyyy. MM.","l":"yyyyë MMMì","f":"yyyyë MMMì"},"dw":{"s":"EE, dd","m":"EE, dd","l":"EEE, dì¼","f":"dì¼(EEEE)"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"a h:mm:ss z","ahms":"a h:mm:ss","ahmz":"a h:mm z","ahm":"a h:mm","ah":"a h"}},"range":{"c00":{"s":"{sy}. {sm}. {sd} {st}ìì {et}ê¹ì§","m":"{sy}. {sm}. {sd} {st}ìì {et}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {et}ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {et}ê¹ì§"},"c01":{"s":"{sy}. {sm}. {sd} {st}ìì {ed} {et}ê¹ì§","m":"{sy}. {sm}. {sd} {st}ìì {ed} {et}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {ed}ì¼ {et}ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {ed}ì¼ {et}ê¹ì§"},"c02":{"s":"{sy}. {sm}. {sd} {st}ìì {em}. {ed} {et}ê¹ì§","m":"{sy}. {sm}. {sd} {st}ìì {em}. {ed} {et}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {em}ì {ed}ì¼ {et}ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {em}ì {ed}ì¼ {et}ê¹ì§"},"c03":{"s":"{sy}. {sm}. {sd} {st}ìì {ey}. {em}. {ed} {et}ê¹ì§","m":"{sy}. {sm}. {sd} {st}ìì {ey}. {em}. {ed} {et}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {ey}ë {em}ì {ed}ì¼ {et}ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ {st}ìì {ey}ë {em}ì {ed}ì¼ {et}ê¹ì§"},"c10":{"s":"{sy}. {sm}. {sd}ìì {ed}ê¹ì§","m":"{sy}. {sm}. {sd}ìì {ed}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ìì {ed}ì¼ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ìì {ed}ì¼ê¹ì§"},"c11":{"s":"{sy}. {sm}. {sd}ìì {em}. {ed}ê¹ì§","m":"{sy}. {sm}. {sd}ìì {em}. {ed}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ìì {em}ì {ed}ì¼ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ìì {em}ì {ed}ì¼ê¹ì§"},"c12":{"s":"{sy}. {sm}. {sd}ìì {ey}. {em}. {ed}ê¹ì§","m":"{sy}. {sm}. {sd}ìì {ey}. {em}. {ed}ê¹ì§","l":"{sy}ë {sm}ì {sd}ì¼ìì {ey}ë {em}ì {ed}ì¼ê¹ì§","f":"{sy}ë {sm}ì {sd}ì¼ìì {ey}ë {em}ì {ed}ì¼ê¹ì§"},"c20":{"s":"{sy}. {sm}.ìì {ey}. {em}.ê¹ì§","m":"{sy}. {sm}.ìì {ey}. {em}.ê¹ì§","l":"{sy}ë {sm}ììì {ey}ë {em}ìê¹ì§","f":"{sy}ë {sm}ììì {ey}ë {em}ìê¹ì§"},"c30":"{sy}ëìì {ey}ëê¹ì§"}}};
ilib.data.dateformats_ks = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M/d","m":"MMM d","l":"d-MMM","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"MMM d, yyyy","l":"yyyy MMM d","f":"dd MMMM yyyy"},"my":{"m":"MMM d, yyyy"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"dmwy":{"s":"EEE, M/d/yy","m":"EE, M/d/yyyy","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"E, M/d","m":"EE, M/d","l":"EEEE, MMM d","f":"EEEE, MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sm} {sd}, {sy}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_ku = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"EE, dd/MM/yyyy","m":"EEE, dd/MM/yyyy","l":"EEE, dd/MMMM/yyyy","f":"EEEE, dd/MMMM/yyyy"},"dmy":{"s":"âdd/MM/yyyy","m":"âdd/MM/yyyy","l":"âdd/MMMM/yyyy","f":"âdd/MMMM/yyyy"},"dmw":{"s":"EE, dd/MM","m":"EEE, dd/MM","l":"EEE, dd/MMMM","f":"EEEE, dd/MMMM"},"dm":{"s":"âdd/MM","m":"âdd/MM","l":"âdd/MMMM","f":"âdd/MMMM"},"my":{"s":"âMM/yyyy","m":"âMM/yyyy","l":"âMM/yyyy","f":"âMM/yyyy"},"dw":{"s":"EE, dd","m":"EEE, dd","l":"EEE, dd","f":"EEEE, dd"},"d":"dd","m":{"s":"MM","m":"MM","l":"MMMM","f":"MMMM"},"y":{"s":"yyyy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"},"w":{"s":"EE","m":"EEE","l":"EEE","f":"EEEE"}},"time":{"12":{"ahmsz":"hh:mm:ss z","ahms":"hh:mm:ss","hmsz":"hh:mm:ss z","hms":"hh:mm:ss","ahmz":"hh:mm z","ahm":"hh:mm","hmz":"hh:mm z","ah":"hh","hm":"hh:mm","ms":"mm:ss","hh":"hh","m":"mm","s":"ss"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","hms":"HH:mm:ss","ahmz":"HH:mm z","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","ms":"mm:ss","hh":"HH","m":"mm","s":"ss"}},"range":{"c00":{"s":"â{sd}/{sm}/{sy} {st} - {et}","m":"â{sd}/{sm}/{sy} {st} - {et}","l":"â{sd} {sm} {sy} {st} - {et}","f":"â{sd} {sm} {sy} {st} - {et}"},"c01":{"s":"â{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"â{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"â{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"â{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c02":{"s":"â{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"â{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"â{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"â{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c03":{"s":"â{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"â{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"â{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","f":"â{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}"},"c10":{"s":"â{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"â{sd}/{sm}/{sy} -  {ed}/{em}/{ey}","l":"â{sd} - {ed} {sm} {sy}","f":"â{sd} - {ed} {sm} {sy}"},"c11":{"s":"â{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"â{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"â{sd} {sm} {sy} - {ed} {em} {ey}","f":"â{sd} {sm} {sy} - {ed} {em} {ey}"},"c12":{"s":"â{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"â{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"â{sd} {sm} {sy} - {ed} {em} {ey}","f":"â{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"â{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"â{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"â{sd} {sm} {sy} - {ed} {em} {ey}","f":"â{sd} {sm} {sy} - {ed} {em} {ey}"},"c30":"â{sy} - {ey}"}}};
ilib.data.dateformats_lg = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M/d","m":"d MMM","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"d MMM yy","l":"yyyy MMM d"},"my":{"m":"MMM yy"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, M/d/yy","m":"EE, M/d/yy","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"E, M/d","m":"EE, M/d","l":"EEEE, MMM d","f":"EEEE, MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_ln = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"d MMM"},"dmy":{"m":"d MMM yy"},"my":{"m":"MMM yy"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E d/M/yy","m":"EE d/M/yy","f":"EEEE d MMM yyyy"},"dmw":{"s":"E d/M","m":"EE d/M","l":"EEEE d MMM","f":"EEEE d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_lt = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"MM-d","m":"MM.dd","l":"MMM d","f":"MMMM d 'd'."},"dmy":{"s":"yy-M-d","m":"yy-MM-d","l":"yyyy MMM d","f":"yyyy 'm'. MMMM d 'd'."},"my":{"s":"yy-MM","m":"yyyy.MM","l":"MMM, yyyy","f":"yyyy 'm'. MMMM"},"m":{"s":"MM","f":"MMM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, yy-MM-d","m":"EE, yy-MM-d","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"M-d, E","m":"M-d, EE","l":"MMM d, EEEE","f":"MMM d, EEEE"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","ahms":"hh:mm:ss a","hms":"hh:mm:ss","ms":"mm:s","ahmz":"hh:mm: a z","ahm":"hh:mm a","hm":"hh:mm"},"24":{"ahmsz":"HH:mm:ss z","ahmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy}-{sm}-{sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} m. {sm} {sd} d."},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ey}â{em}â{ed}","l":"{st} {sy} m. {sm} {sd} â {et} d.â{ed} d.","m":"{st} {sy}â{sm}â{sd} â {et} {ey}â{em}â{ed}","f":"{st} {sy} m. {sm} {sd} â {et} d.â{ed} d."},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {ey}â{em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ey}â{em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy} m. {sm} {sd} â d.â{ed} d.","f":"{sy} m. {sm} {sd} â d.â{ed} d.","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":false};
ilib.data.dateformats_lv = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"dd.MM.","m":"dd.M","l":"d. MMM","f":"d. MMMM"},"dmy":{"s":"d.M.yy.","m":"yy. 'gada' d. MMM","l":"yyyy. 'g'. d. MMM","f":"yyyy. 'gada' d. MMMM"},"my":{"s":"MM.yy.","m":"MM.yyyy","l":"yyyy. 'g'. MMM","f":"yyyy. 'g'. MMMM"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"dmwy":{"s":"E, d.M.yy.","m":"EE, d.M.yy.","l":"EEE, yyyy. 'g'. d. MMM","f":"EEEE, yyyy. 'g'. d. MMM"},"dmw":{"s":"E, dd.MM.","m":"EE, dd.MM.","l":"EEEE, d. MMM","f":"EEEE, d. MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} - {et} {sd}.{sm}.{sy}.","m":"{st} - {et} {sy}. gada {sd}. {sm}","l":"{st} - {et} {sy}. g. {sd}. {sm}","f":"{st} - {et} {sy}. gada {sd}. {sm}"},"c01":{"s":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","l":"{st} {sy}. gada {sd}. - {et} {ed}. {em}","m":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","f":"{st} {sy}. gada {sd}. - {et} {ed}. {em}"},"c02":{"s":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","l":"{st} {sy}. gada {sd}. {sm} - {et} {ed}. {em}","f":"{st} {sy}. gada {sd}. {sm} - {et} {ed}. {em}","m":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}."},"c10":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sy}. gada {sd}. - {ed}. {em}","f":"{sy}. gada {sd}. - {ed}. {em}","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}."},"c11":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sy}. gada {sd}. {sm} - {ed}. {em}","f":"{sy}. gada {sd}. {sm} - {ed}. {em}"},"c12":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sy}. gada {sd}. {sm} - {ey}. gada {ed}. {em}","f":"{sy}. gada {sd}. {sm} - {ey}. gada {ed}. {em}"},"c20":{"s":"{sm}.{sy}. - {em}.{ey}.","m":"{sm}.{sy}. - {em}.{ey}.","l":"{sy}. gada {sm} - {ey}. gada {em}","f":"{sm}.{sy}. - {em}.{ey}."}}},"generated":true};
ilib.data.dateformats_mk = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"dd.M","l":"MMM d","f":"MMMM d"},"dmy":{"s":"d-M-yy","m":"dd.M.yyyy","l":"yyyy MMM d","f":"dd MMMM yyyy"},"my":{"s":"yy-M","m":"M.yyyy","l":"yyyy MMM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} - {et} {sd}-{sm}-{sy}","m":"{st} - {et} {sd}.{sm}.{sy}","l":"{st} - {et} {sy} {sm} {sd}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","l":"{st} {sd} - {et} {ed} {em} {ey}","m":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","f":"{st} {sd} - {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","l":"{st} {sd} {sm} - {et} {ed} {em} {ey}","f":"{st} {sd} {sm} - {et} {ed} {em} {ey}","m":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}"},"c10":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} - {ed} {em} {ey}","f":"{sd} - {ed} {em} {ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}"},"c11":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} - {ed} {em} {ey}","f":"{sd} {sm} - {ed} {em} {ey}"},"c12":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}"},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}","f":"{sy}â{sm} - {ey}â{em}"}}},"generated":true};
ilib.data.dateformats_ml = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"dd-MM","l":"MMM d","f":"MMMM d"},"dmy":{"m":"yy, MMM d","l":"yyyy MMM d","f":"yyyy, MMMM d"},"my":{"s":"M-yy","m":"MM-yyyy","l":"yyyy MMM"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"d-M-yy, E","m":"d-M-yyyy, EE","l":"yyyy MMM d, EEE","f":"yyyy MMM d, EEEE"},"dmw":{"s":"M/d, E","m":"M/d, EE","l":"MMM d, EEEE","f":"MMM d, EEEE"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"m":"{st} - {et} {sy}, {sm} {sd}","l":"{st} - {et} {sy} {sm} {sd}","f":"{st} - {et} {sy}, {sm} {sd}"},"c01":{"s":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","l":"{st} {sy} {sm} {sd} - {et} {ed}","m":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","f":"{st} {sy} {sm} {sd} - {et} {ed}"},"c02":{"s":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","l":"{st} {sy} {sm} {sd} - {et} {em} {ed}","f":"{st} {sy} {sm} {sd} - {et} {em} {ed}","m":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}"},"c10":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sy} {sm} {sd} - {ed}","f":"{sy} {sm} {sd} - {ed}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}"},"c11":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sy} {sm} {sd} - {em} {ed}","f":"{sy} {sm} {sd} - {em} {ed}"},"c12":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sy} {sm} {sd} - {ey} {em} {ed}","f":"{sy} {sm} {sd} - {ey} {em} {ed}"},"c20":{"s":"{sm}/{sy} - {em}/{ey}","l":"{sy} {sm} - {ey} {em}","f":"{sy}â{sm} - {ey}â{em}"}}},"generated":true};
ilib.data.dateformats_mn = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"E M.d.yyyy","m":"EE MM.dd.yyyy","l":"EEE, yyyy 'Ð¾Ð½Ñ' MM'-Ñ ÑÐ°Ñ' dd","f":"EEEE, yyyy 'Ð¾Ð½Ñ' MM 'Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½' dd"},"dmy":{"s":"M.d.yyyy","m":"MM.dd.yyyy","l":"yyyy 'Ð¾Ð½Ñ' MM'-Ñ ÑÐ°Ñ' dd","f":"yyyy 'Ð¾Ð½Ñ' MM 'Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½' dd"},"dmw":{"s":"E M.d","m":"EE MM.dd","l":"EEE, MM'-Ñ ÑÐ°Ñ' dd","f":"EEEE, MM 'Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½' dd"},"dm":{"s":"M.d","m":"MM.dd","l":"MM'-Ñ ÑÐ°Ñ' dd","f":"MM 'Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½' dd"},"my":{"s":"M.yyyy","m":"MM.yyyy","l":"yyyy 'Ð¾Ð½Ñ' MM'-Ñ ÑÐ°Ñ'","f":"yyyy 'Ð¾Ð½Ñ' MM 'Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½'"},"dw":{"s":"E dd","m":"EE dd","l":"EEE, dd","f":"EEEE, dd"},"d":"dd","m":{"s":"M","m":"MM","l":"MM","f":"MM"},"y":{"s":"yyyy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","ahms":"hh:mm:ss a","hmsz":"hh:mm:ss z","hms":"hh:mm:ss","ahmz":"hh:mm a z","ahm":"hh:mm a","hmz":"hh:mm z","ah":"hh a","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","hms":"HH:mm:ss","ahmz":"HH:mm z","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{sm}.{sd}.{sy} {st}-{et}","m":"{sm}.{sd}.{sy} {st} - {et}","l":"{sy} Ð¾Ð½Ñ {sm}-Ñ ÑÐ°Ñ {sd} {st} - {et}","f":"{sy} Ð¾Ð½Ñ {sm} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ {sd} {st} - {et}"},"c01":{"s":"{sm}.{sd}.{sy} {st} - {em}.{ed}.{ey} {et}","m":"{sm}.{sd}.{sy} {st} - {em}.{ed}.{ey} {et}","l":"{sy} Ð¾Ð½Ñ {sm}-Ñ ÑÐ°Ñ {sd} {st} - {ed} {et}","f":"{sy} Ð¾Ð½Ñ {sm} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ {sd} {st} - {ed} {et}"},"c02":{"s":"{sm}.{sd}.{sy} {st} - {em}.{ed}.{ey} {et}","m":"{sm}.{sd}.{sy} {st} - {em}.{ed}.{ey} {et}","l":"{sy} Ð¾Ð½Ñ {sm}-Ñ ÑÐ°Ñ {sd} {st} - {em}-Ñ ÑÐ°Ñ {ed} {et}","f":"{sy} Ð¾Ð½Ñ {sm} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ {sd} {st} - {em} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ {ed} {et}"},"c03":{"s":"{sm}.{sd}.{sy} {st} - {em}.{ed}.{ey} {et}","m":"{sm}.{sd}.{sy} {st} - {em}.{ed}.{ey} {et}","l":"{sy} Ð¾Ð½Ñ {sm}-Ñ ÑÐ°Ñ {sd} {st} - {ey} Ð¾Ð½Ñ {em}-Ñ ÑÐ°Ñ {ed} {et}","f":"{sy} Ð¾Ð½Ñ {sm} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ {sd} {st} - {ey} Ð¾Ð½Ñ {em} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ {ed} {et}"},"c10":{"s":"{sm}.{sd} - {em}.{ed}.{ey}","m":"{sm}.{sd} - {em}.{ed}.{ey}","l":"{sy} Ð¾Ð½Ñ {sm}-Ñ ÑÐ°Ñ {sd} - {ed}","f":"{sy} Ð¾Ð½Ñ {sm} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ {sd} - {ed}"},"c11":{"s":"{sm}.{sd} - {em}.{ed}.{ey}","m":"{sm}.{sd} - {em}.{ed}.{ey}","l":"{sy} Ð¾Ð½Ñ {sm}-Ñ ÑÐ°Ñ {sd} - {em}-Ñ ÑÐ°Ñ {ed}","f":"{sy} Ð¾Ð½Ñ {sm} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ {sd} - {em} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ {ed}"},"c12":{"s":"{sm}.{sd}.{sy} - {em}.{ed}.{ey}","m":"{sm}.{sd}.{sy} - {em}.{ed}.{ey}","l":"{sy} Ð¾Ð½Ñ {sm}-Ñ ÑÐ°Ñ {sd} - {ey} Ð¾Ð½Ñ {em}-Ñ ÑÐ°Ñ {ed}","f":"{sy} Ð¾Ð½Ñ {sm} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ {sd} - {ey} Ð¾Ð½Ñ {em} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ {ed}"},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}","l":"{sy} Ð¾Ð½Ñ {sm}-Ñ ÑÐ°Ñ - {ey} Ð¾Ð½Ñ {em}-Ñ ÑÐ°Ñ","f":"{sy} Ð¾Ð½Ñ {sm} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½ - {ey} Ð¾Ð½Ñ {em} Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°ÑÑÐ½"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_mr = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d-M","m":"d MMM","l":"d MMM","f":"d MMMM"},"dmy":{"s":"d-M-yy","m":"d MMM yy","l":"d MMM yyyy","f":"d MMMM yyyy"},"my":{"s":"M-yy","m":"MMM yy","l":"MMM yyyy","f":"MMMM yyyy"},"m":{"s":"M","m":"MMM","l":"MMM","f":"MMMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"EE d-M-yy","m":"EEE d MMM yy","l":"EEE d MMM yyyy","f":"EEEE d MMMM yyyy"},"dmw":{"s":"EE d-M","m":"EEE d MMM","l":"EEE d MMM","f":"EEEE d MMMM"}},"time":{"12":{"ahmsz":"a h:mm:ss z","hmsz":"h:mm:ss z","ahms":"a h:mm:ss","hms":"h:mm:ss","ahmz":"a h:mm:ss z","ahm":"a h:mm","hm":"h:mm","hmz":"h:mm:ss z","ah":"a h"},"24":{"ahmsz":"H:mm:ss z","ahms":"H:mm:ss","hmsz":"H:mm:ss z","hms":"H:mm:ss","ms":"mm:ss","ahmz":"H:mm:ss z","ahm":"H:mm","hmz":"H:mm:ss z","hm":"H:mm"}},"range":{"c00":{"s":"{st} â {et} {sd}-{sm}-{sy}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd} â {et} {ed}-{em}-{ey}","m":"{st} {sd} â {et} {ed} {em} {ey}","l":"{st} {sd} â {et} {ed} {em} {ey}","f":"{st} {sd} â {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}-{sm}-{sy} â {et} {ed}-{em}-{ey}","m":"{st} {sd} {sm} â {et} {ed} {em} {ey}","l":"{st} {sd} {sm} â {et} {ed} {em} {ey}","f":"{st} {sd} {sm} â {et} {ed} {em} {ey}"},"c10":{"s":"{sd} â {ed}-{em}-{ey}","m":"{sd} â {ed} {em} {ey}","l":"{sd} â {ed} {em} {ey}","f":"{sd} â {ed} {em} {ey}"},"c11":{"s":"{sd}-{sm}-{sy} â {ed}-{em}-{ey}","m":"{sd} {sm} â {ed} {em} {ey}","l":"{sd} {sm} â {ed} {em} {ey}","f":"{sd} {sm} â {ed} {em} {ey}"},"c12":{"s":"{sd}-{sm}-{sy} â {ed}-{em}-{ey}","m":"{sd} {sm} {sy} â {ed} {em} {ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}-{sy} â {em}-{ey}","m":"{sm} {sy} â {em} {ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_ms = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d-M","m":"dd/MM"},"dmy":{"m":"dd/MM/yyyy"},"my":{"s":"M-yy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"dmwy":{"s":"E, d/M/yy","m":"EE, d/M/yy","l":"EEE, d MMM yyyy","f":"EEEE, d MMM yyyy"},"dmw":{"s":"E, d-M","m":"EE, d-M","l":"EEEE, d MMM","f":"EEEE, d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd}/{sm}/{sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} â {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","f":"{st} {sd} â {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} â {et} {ed} {em}, {ey}","f":"{st} {sd} {sm} â {et} {ed} {em}, {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}"},"c10":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} â {ed} {em} {ey}","f":"{sd} â {ed} {em} {ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}"},"c11":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em}, {ey}","f":"{sd} {sm} â {ed} {em}, {ey}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_ms_BN = {"gregorian":{"date":{"dmy":{"f":"dd MMMM yyyy"}}},"generated":true};
ilib.data.dateformats_nb = {"gregorian":{"date":{"dm":{"s":"d.M.","m":"d.M.","l":"d. MMM","f":"d. MMMM"},"dmy":{"s":"d.M.yy","m":"d.MM.yy","l":"d. MMM yyyy","f":"d. MMMM yyyy"},"my":{"s":"M yy","m":"MM.yy"},"m":{"s":"MM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"y":{"m":"yy"},"dmwy":{"s":"E d.MM.yy","m":"EE d.MM.yy","l":"EEE d. MMM yyyy","f":"EEEE d. MMM yyyy"},"dmw":{"s":"E d.M","m":"EE d.M","l":"EEEE d. MMM","f":"EEEE d. MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{sd}.{sm}.{sy} {st}â{et}","m":"{sd}.{sm}.{sy} {st}â{et}","l":"{sd}. {sm} {sy} {st}â{et}","f":"{sd}. {sm} {sy} {st}â{et}"},"c01":{"s":"{sd}.{sm}.{sy} {st}â{ed}.{em}.{ey} {et}","l":"{sd}. {st}â{ed}. {em} {ey} {et}","m":"{sd}.{sm}.{sy} {st}â{ed}.{em}.{ey} {et}","f":"{sd}. {st}â{ed}. {em} {ey} {et}"},"c02":{"s":"{sd}.{sm}.{sy} {st}â{ed}.{em}.{ey} {et}","l":"{sd}. {sm} {st}â{ed}. {em} {ey} {et}","f":"{sd}. {sm} {st}â{ed}. {em} {ey} {et}","m":"{sd}.{sm}.{sy} {st}â{ed}.{em}.{ey} {et}"},"c10":{"s":"{sd}.{sm}.{sy}â{ed}.{em}.{ey}","l":"{sd}.â{ed}. {em} {ey}","f":"{sd}.â{ed}. {em} {ey}","m":"{sd}.{sm}.{sy}â{ed}.{em}.{ey}"},"c11":{"s":"{sd}.{sm}.{sy}â{ed}.{em}.{ey}","m":"{sd}.{sm}.{sy}â{ed}.{em}.{ey}","l":"{sd}. {sm}â{ed}. {em} {ey}","f":"{sd}. {sm}â{ed}. {em} {ey}"},"c12":{"s":"{sd}.{sm}.{sy}â{ed}.{em}.{ey}","m":"{sd}.{sm}.{sy}â{ed}.{em}.{ey}","l":"{sd}. {sm} {sy}â{ed}. {em} {ey}","f":"{sd}. {sm} {sy}â{ed}. {em} {ey}"},"c20":{"s":"{sm}.{sy}â{em}.{ey}","m":"{sm}.{sy}â{em}.{ey}","l":"{sm} {sy}â{em} {ey}","f":"{sm} {sy}â{em} {ey}"},"c30":"{sy}â{ey}"}},"generated":true};
ilib.data.dateformats_ne = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"MMM d","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"yy MMM d","l":"yyyy MMM d","f":"yyyy MMMM dd"},"my":{"s":"yy-M","m":"yy MMM","l":"yyyy MMM","f":"yyyy MMMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy} {sm} {sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} {sm} {sd}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_nl = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"E d-M-yy","m":"EE d-M-yyyy","l":"EEE d MMM yy","f":"EEEE d MMMM yyyy"},"dmy":{"s":"d-M-yy","m":"d-M-yyyy","l":"d MMM yy","f":"d MMMM yyyy"},"dmw":{"s":"E d-M","m":"EE d-M","l":"EEE d MMM","f":"EEEE d MMMM"},"dm":{"s":"d-M","m":"d-M","l":"d MMM","f":"d MMMM"},"my":{"s":"M-yy","m":"M-yyyy","l":"MMM yy","f":"MMMM yyyy"},"d":{"s":"d","m":"d","l":"d","f":"d"},"m":{"s":"M","m":"M","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","ahms":"hh:mm:ss a","hmsz":"hh:mm:ss z","ahmz":"hh:mm a z","hms":"hh:mm:ss","ahm":"hh:mm a","hmz":"hh:mm z","ah":"hh a","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hms":"HH:mm:ss","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{sd}-{sm}-{sy} {st}-{et}","m":"{sd}-{sm}-{sy} {st}-{et}","l":"{sd} {sm} {sy} {st}-{et}","f":"{sd} {sm} {sy} {st}-{et}"},"c01":{"s":"{sd}-{sm}-{sy} {st} - {ed}-{em}-{ey} {et}","m":"{sd}-{sm}-{sy} {st} - {ed}-{em}-{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c02":{"s":"{sd}-{sm}-{sy} {st} - {ed}-{em}-{ey} {et}","m":"{sd}-{sm}-{sy} {st} - {ed}-{em}-{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c03":{"s":"{sd}-{sm}-{sy} {st} - {ed}-{em}-{ey} {et}","m":"{sd}-{sm}-{sy} {st} - {ed}-{em}-{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c10":{"s":"{sd}-{sm}-{sy} - {ed}-{em}-{ey}","m":"{sd}-{sm}-{sy} - {ed}-{em}-{ey}","l":"{sd}-{ed} {sm} {sy}","f":"{sd}-{ed} {sm} {sy}"},"c11":{"s":"{sd}-{sm}-{sy} - {ed}-{em}-{ey}","m":"{sd}-{sm}-{sy} - {ed}-{em}-{ey}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}-{sm}-{sy} - {ed}-{em}-{ey}","m":"{sd}-{sm}-{sy} - {ed}-{em}-{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}-{sy} - {em}-{ey}","m":"{sm}-{sy} - {em}-{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy}-{ey}"}}};
ilib.data.dateformats_no = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"EE dd.MM.yy","m":"EE dd.MM.yyyy","l":"EEE d. MMM. yyyy","f":"EEEE d. MMMM yyyy"},"dmy":{"s":"dd.MM.yy","m":"dd.MM.yyyy","l":"d. MMM. yyyy","f":"d. MMMM yyyy"},"dmw":{"s":"EE dd.MM","m":"EE dd.MM","l":"EEE d. MMM.","f":"EEEE d. MMMM"},"dm":{"s":"dd.MM","m":"dd.MM","l":"d. MMM.","f":"d. MMMM"},"my":{"s":"MM.yy","m":"MM.yyyy","l":"MMM. yyyy","f":"MMMM yyyy"},"dw":{"s":"EE dd","m":"EEE dd","l":"EEE d","f":"EEEE d"},"d":"dd.","m":{"s":"MM.","m":"MM.","l":"MMM.","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh.mm.ss a z","ahms":"hh.mm.ss a","hmsz":"hh.mm.ss z","hms":"hh.mm.ss","ahmz":"hh.mm a z","ahm":"hh.mm a","hmz":"hh.mm z","ah":"hh a","hm":"hh.mm","ms":"mm.ss","h":"hh"},"24":{"ahmsz":"HH.mm.ss z","ahms":"HH.mm.ss","hmsz":"HH.mm.ss z","hms":"HH.mm.ss","ahmz":"HH.mm z","ahm":"HH.mm","hmz":"HH.mm z","ah":"HH","hm":"HH.mm","ms":"mm.ss","h":"HH"}},"range":{"c00":{"s":"{sd}.{sm}.{sy} {st} - {et}","m":"{sd}.{sm}.{sy} {st} - {et}","l":"{sd} {sm} {sy} {st} - {et}","f":"{sd} {sm} {sy} {st} - {et}"},"c01":{"s":"{sd}.{sm} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm} {st} - {ed}.{em}.{ey} {et}","l":"{sd} {sm} {st} - {ed} {em} {sy} {et}","f":"{sd} {sm} {st} - {ed} {em} {sy} {et}"},"c02":{"s":"{sd}.{sm} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm} {st} - {ed}.{em}.{ey} {et}","l":"{sd} {sm} {st} - {ed} {em} {sy} {et}","f":"{sd} {sm} {st} - {ed} {em} {sy} {et}"},"c03":{"s":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c10":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd}-{ed} {sm} {sy}","f":"{sd}-{ed} {sm} {sy}"},"c11":{"s":"{sd}.{sm} - {ed}.{em}.{ey}","m":"{sd}.{sm} - {ed}.{em}.{sy}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_om = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"dd/MM","l":"MMM d","f":"dd MMMM"},"dmy":{"s":"yy-M-d","m":"dd-MMM-yy","l":"yyyy MMM d","f":"MMMM d, yyyy"},"my":{"s":"yy-M","m":"MM/yy","l":"yyyy MMM"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sd}-{sm}-{sy}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sm} {sd}, {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_or = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"dd-MM","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"d MMM yy","l":"yyyy MMM d"},"my":{"s":"yy-M","m":"MM-yyyy","l":"yyyy MMM"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_os = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"MMM d","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"yy MMM d","l":"yyyy MMM d","f":"yyyy MMMM dd"},"my":{"s":"yy-M","m":"yy MMM","l":"yyyy MMM","f":"yyyy MMMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy} {sm} {sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} {sm} {sd}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_pa = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"d MMM","l":"MMM d"},"dmy":{"s":"yy-M-d","m":"d MMM yy","l":"yyyy MMM d","f":"dd MMMM yyyy"},"my":{"s":"yy-M","m":"MMM yy","l":"yyyy MMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"y":{"m":"yy"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_pl = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d.MM","m":"d.MM"},"dmy":{"s":"d.MM.yy","m":"d.MM.yyyy"},"my":{"s":"MM.yy","m":"MM.yyyy"},"m":{"s":"MM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"y":{"m":"yy"},"dmwy":{"s":"E, d.MM.yy","m":"EE, d.MM.yyyy","l":"EEE, d MMM yyyy","f":"EEEE, d MMM yyyy"},"dmw":{"s":"E, d.MM","m":"EE, d.MM","l":"EEEE, d MMM","f":"EEEE, d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","hmsz":"hh:mm:ss z","ahms":"hh:mm:ss a","hms":"hh:mm:ss","ms":"mm:s","ahmz":"hh:mm a z","ahm":"hh:mm a","hm":"hh:mm","hmz":"hh:mm z","ah":"hh a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sd}.{sm}.{sy}","m":"{st} â {et} {sd}.{sm}.{sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd} â {et} {ed}.{em}.{ey}","l":"{st} {sd} â {et} {ed} {em} {ey}","m":"{st} {sd} â {et} {ed}.{em}.{ey}","f":"{st} {sd} â {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}.{sm} â {et} {ed}.{em}.{ey}","l":"{st} {sd} {sm} â {et} {ed} {em} {ey}","f":"{st} {sd} {sm} â {et} {ed} {em} {ey}","m":"{st} {sd}.{sm} â {et} {ed}.{em}.{ey}"},"c10":{"s":"{sd} â {ed}.{em}.{ey}","l":"{sd} â {ed} {em} {ey}","f":"{sd} â {ed} {em} {ey}","m":"{sd} â {ed}.{em}.{ey}"},"c11":{"s":"{sd}.{sm} â {ed}.{em}.{ey}","m":"{sd}.{sm} â {ed}.{em}.{ey}","l":"{sd} {sm} â {ed} {em} {ey}","f":"{sd} {sm} â {ed} {em} {ey}"},"c12":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}.{sy} â {em}.{ey}","m":"{sm}.{sy} â {em}.{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_pt = {"gregorian":{"date":{"dmwy":{"s":"E, dd/MM/yy","m":"EE, dd/MM/yyyy","l":"EEE, dd 'de' MMM 'de' yyyy","f":"EEEE, dd 'de' MMMM 'de' yyyy"},"dmy":{"s":"dd/MM/yy","m":"dd/MM/yyyy","l":"dd 'de' MMM 'de' yyyy","f":"dd 'de' MMMM 'de' yyyy"},"dmw":{"s":"E, dd/MM","m":"EE, dd/MM","l":"EEE, dd 'de' MMM","f":"EEEE, dd 'de' MMMM"},"dm":{"s":"dd/MM","m":"dd/MM","l":"dd 'de' MMM","f":"dd 'de' MMMM"},"my":{"s":"MM/yy","m":"MM/yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"dw":{"s":"EE, dd","m":"EE, dd","l":"EEE, dd","f":"EEEE, dd"},"d":{"s":"dd","m":"dd","l":"dd","f":"dd"},"m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh'h'mm'min'ss's' a z","ahms":"hh'h'mm'min'ss's' a","hmsz":"hh'h'mm'min'ss's' z","ahmz":"hh'h'mm'min' a z","hms":"hh'h'mm'min'ss's'","ahm":"hh'h'mm'min' a","hmz":"hh'h'mm'min' z","ah":"hh'h' a","hm":"hh'h'mm'min'","ms":"mm'min'ss's'","h":"hh"},"24":{"ahmsz":"HH'h'mm'min'ss's' z","ahms":"HH'h'mm'min'ss's'","hmsz":"HH'h'mm'min'ss's' z","ahmz":"HH'h'mm'min' z","hms":"HH'h'mm'min'ss's'","ahm":"HH'h'mm'min'","hmz":"HH'h'mm'min' z","ah":"HH'h'","hm":"HH'h'mm'min'","ms":"mm'min'ss's'","h":"HH"}},"range":{"c00":{"s":"{sd}/{sm}/{sy} {st} - {et}","m":"{sd}/{sm}/{sy} {st} - {et}","l":"{sd}/{sm}/{sy} {st} - {et}","f":"{sd} de {sm} de {sy} {st} - {et}"},"c01":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}","l":"{sd} {st} - {ed} {et}, {sm} {sy}","f":"{sd} {st} - {ed} {et},  de {sm} {sy}"},"c02":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm} {st} - {ed}/{em} {et}, {sy}","l":"{sd} de {sm} {st} - {ed} de {em} {et}, {sy}","f":"{sd} de {sm} {st} - {ed} de {em} {et}, {sy}"},"c03":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"{sd} de {sm} de {sy} {st} - {ed} de {em} de {ey} {et}","f":"{sd} de {sm} de {sy} {st} - {ed} de {em} de {ey} {et}"},"c10":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd}-{ed} de {sm} de {sy}","f":"{sd}-{ed} de {sm} de {sy}"},"c11":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} de {sm} - {ed} de {em} de {sy}","f":"{sd} de {sm} - {ed} de {em} de {sy}"},"c12":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} de {sm} de {sy} - {ed} de {em} de {ey}","f":"{sd} de {sm} de {sy} - {ed} de {em} de {ey}"},"c20":{"s":"{sm}/{sy} - {em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} de {sy} - {em} de {ey}","f":"{sm} de {sy} - {em} de {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_ro = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"dd.MM","m":"dd.MM"},"dmy":{"s":"dd.MM.yy","m":"dd.MM.yyyy"},"my":{"s":"MM.yy","m":"MM.yyyy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, dd.MM.yy","m":"EE, dd.MM.yyyy","l":"EEE, d MMM yyyy","f":"EEEE, d MMM yyyy"},"dmw":{"s":"E, dd.MM","m":"EE, dd.MM","l":"EEEE, d MMM","f":"EEEE, d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} - {et} {sd}.{sm}.{sy}","m":"{st} - {et} {sd}.{sm}.{sy}","l":"{st} - {et} {sd} {sm} {sy}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","l":"{st} {sd} - {et} {ed} {em} {ey}","m":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","f":"{st} {sd} - {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}","l":"{st} {sd} {sm} - {et} {ed} {em} {ey}","f":"{st} {sd} {sm} - {et} {ed} {em} {ey}","m":"{st} {sd}.{sm}.{sy} - {et} {ed}.{em}.{ey}"},"c10":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} - {ed} {em} {ey}","f":"{sd} - {ed} {em} {ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}"},"c11":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} - {ed} {em} {ey}","f":"{sd} {sm} - {ed} {em} {ey}"},"c12":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}"},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}"}}},"generated":true};
ilib.data.dateformats_ru = {"gregorian":{"date":{"dmwy":{"s":"E, dd.MM.yy","m":"EE, dd.MM.yyyy","l":"EEE, d MMM yyyy","f":"EEEE, d MMMM yyyyÂ 'Ð³.'"},"dmy":{"s":"dd.MM.yy","m":"dd.MM.yyyy","l":"d MMM yyyy","f":"d MMMM yyyyÂ 'Ð³.'"},"dmw":{"s":"E, dd.MM","m":"EE, dd.MM","l":"EEE, d MMM","f":"EEEE, d MMMM"},"dm":{"s":"dd.MM","m":"dd.MM","l":"d MMM","f":"d MMMM"},"my":{"s":"MM.yy","m":"MM.yyyy","l":"MMM yyyy","f":"MMMM yyyyÂ 'Ð³.'"},"dw":{"s":"EE, d","m":"EE, d","l":"EEE, d","f":"EEEE, d"},"d":{"s":"d","m":"d","l":"d","f":"d"},"m":{"s":"MM","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"h:mm:ss a z","ahms":"h:mm:ss a","ahmz":"h:mm a z","ahm":"h:mm a","ah":"h a"}},"range":{"c00":{"s":"{sd}.{sm}.{sy} {st}-{et}","m":"{sd}.{sm}.{sy} {st}-{et}","l":"{sd}.{sm}.{sy} {st}-{et}","f":"{sd} {sm} {sy}Â Ð³. {st}-{et}"},"c01":{"s":"{sd}.{sm} {st} - {ed}.{em} {et}, {sy}","m":"{sd}.{sm} {st} - {ed}.{em} {et}, {sy}","l":"{sd} {st} - {ed} {et}, {sm} {sy}","f":"{sd} {st} - {ed} {et}, {sm} {sy} Ð³."},"c02":{"s":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm} {st} - {ed}.{em} {et}, {sy}","l":"{sd} {sm} {st} - {ed} {em} {et}, {sy}","f":"{sd} {sm} {st} - {ed} {em} {et}, {sy} Ð³."},"c03":{"s":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy}Â Ð³. {st} - {ed} {em} {ey}Â Ð³. {et}"},"c10":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd}-{ed} {sm} {sy} Ð³.","f":"{sd}-{ed} {sm} {sy} Ð³."},"c11":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} - {ed} {em} {sy} Ð³.","f":"{sd} {sm} - {ed} {em} {sy} Ð³."},"c12":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey} Ð³.","f":"{sd} {sm} {sy} - {ed} {em} {ey} Ð³."},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}","l":"{sm} {sy} - {em} {ey} Ð³.","f":"{sm} {sy} - {em} {ey} Ð³."},"c30":"{sy}-{ey}"}}};
ilib.data.dateformats_si = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"MMM d","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"yy MMM d","l":"yyyy MMM d","f":"yyyy MMMM d"},"my":{"s":"yy-M","m":"yy MMM","l":"yyyy MMM","f":"yyyy MMMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"yy-M-d, E","m":"yy-M-d, EE","l":"yyyy MMM d, EEE","f":"yyyy MMM d, EEEE"},"dmw":{"s":"M-d, E","m":"M-d, EE","l":"MMM d EEEE","f":"MMM d EEEE"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"a h:mm:ss z","hmsz":"h:mm:ss z","ahms":"a h.mm.ss","hms":"h.mm.ss","ms":"mm.","ahmz":"a h:mm z","ahm":"a h.mm","hm":"h.mm","hmz":"h:mm z","ah":"a h"},"24":{"ahmsz":" H:mm:ss z","hmsz":" H:mm:ss z","ahmz":" H:mm z","hmz":" H:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy} {sm} {sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} {sm} {sd}"},"c01":{"s":"{st} {sm}â{sd}â{sy} â {et} {em}â{ed}â{ey}","l":"{st} {sy} {sm} {sd} â {et} {ed}","m":"{st} {sm}â{sd}â{sy} â {et} {em}â{ed}â{ey}","f":"{st} {sy} {sm} {sd} â {et} {ed}"},"c02":{"s":"{st} {sm}â{sd}â{sy} â {et} {em}â{ed}â{ey}","l":"{st} {sy} {sm} {sd} â {et} {em} {ed}","f":"{st} {sy} {sm} {sd} â {et} {em} {ed}","m":"{st} {sm}â{sd}â{sy} â {et} {em}â{ed}â{ey}"},"c10":{"s":"{sm}â{sd}â{sy} â {em}â{ed}â{ey}","l":"{sy} {sm} {sd} â {ed}","f":"{sy} {sm} {sd} â {ed}","m":"{sm}â{sd}â{sy} â {em}â{ed}â{ey}"},"c11":{"s":"{sm}â{sd}â{sy} â {em}â{ed}â{ey}","m":"{sm}â{sd}â{sy} â {em}â{ed}â{ey}","l":"{sy} {sm} {sd} â {em} {ed}","f":"{sy} {sm} {sd} â {em} {ed}"},"c12":{"s":"{sm}â{sd}â{sy} â {em}â{ed}â{ey}","m":"{sm}â{sd}â{sy} â {em}â{ed}â{ey}","l":"{sy} {sm} {sd} â {ey} {em} {ed}","f":"{sy} {sm} {sd} â {ey} {em} {ed}"},"c20":{"s":"{sm}â{sy} â {em}â{ey}","m":"{sm}â{sy} â {em}â{ey}","l":"{sy} {sm} â {ey} {em}","f":"{sy} {sm} â {ey} {em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_sk = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d.M.","m":"d.M","l":"d. MMM.","f":"d. MMMM"},"dmy":{"s":"d.M.yy","m":"d.M.yyyy","l":"d.M.yyyy","f":"d. MMMM yyyy"},"my":{"s":"M.yy","m":"M.yyyy"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E d. M. yy","m":"EE d. M. yy","l":"EEE, d. MMM yyyy","f":"EEEE, d. MMM yyyy"},"dmw":{"s":"E, d.M.","m":"EE, d.M.","l":"EEEE, d. MMM.","f":"EEEE, d. MMM."},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sd}.{sm}.{sy}","m":"{st} â {et} {sd}.{sm}.{sy}","l":"{st} â {et} {sd}.{sm}.{sy}","f":"{st} â {et} {sd}. {sm} {sy}"},"c01":{"s":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","l":"{st} {sd}. â {et} {ed}. {em} {ey}","m":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","f":"{st} {sd}. â {et} {ed}. {em} {ey}"},"c02":{"s":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","l":"{st} {sd}. {sm} â {et} {ed}. {em} {ey}","f":"{st} {sd}. {sm} â {et} {ed}. {em} {ey}","m":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}"},"c10":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd}. â {ed}. {em} {ey}","f":"{sd}. â {ed}. {em} {ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}"},"c11":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd}. {sm} â {ed}. {em} {ey}","f":"{sd}. {sm} â {ed}. {em} {ey}"},"c12":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd}. {sm} {sy} â {ed}. {em} {ey}","f":"{sd}. {sm} {sy} â {ed}. {em} {ey}"},"c20":{"s":"{sm}.{sy} â {em}.{ey}","m":"{sm}.{sy} â {em}.{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_sl = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d. M.","m":"d. M","l":"d. MMM","f":"dd. MMMM"},"dmy":{"s":"d. M. yy","m":"d. MMM yyyy","l":"d. MMM yyyy","f":"dd. MMMM yyyy"},"my":{"m":"MMM yyyy"},"m":{"s":"MM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, d. M. yy","m":"EE, d. M. yy","l":"EEE, d. MMM yyyy","f":"EEEE, d. MMM yyyy"},"dmw":{"s":"E, d. MM.","m":"EE, d. MM.","l":"EEEE, d. MMM","f":"EEEE, d. MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sd}. {sm}. {sy}","m":"{st} â {et} {sd}. {sm} {sy}","l":"{st} â {et} {sd}. {sm} {sy}","f":"{st} â {et} {sd}. {sm} {sy}"},"c01":{"s":"{st} {sd}. {sm}. {sy} â {et} {ed}. {em}. {ey}","l":"{st} {sd}. â {et} {ed}. {em} {ey}","m":"{st} {sd}. {sm}. {sy} â {et} {ed}. {em}. {ey}","f":"{st} {sd}. â {et} {ed}. {em} {ey}"},"c02":{"s":"{st} {sd}. {sm}. â {et} {ed}. {em}. {ey}","l":"{st} {sd}. {sm} â {et} {ed}. {em} {ey}","f":"{st} {sd}. {sm} â {et} {ed}. {em} {ey}","m":"{st} {sd}. {sm}. â {et} {ed}. {em}. {ey}"},"c10":{"s":"{sd}. {sm}. {sy} â {ed}. {em}. {ey}","l":"{sd}. â {ed}. {em} {ey}","f":"{sd}. â {ed}. {em} {ey}","m":"{sd}. {sm}. {sy} â {ed}. {em}. {ey}"},"c11":{"s":"{sd}. {sm}. â {ed}. {em}. {ey}","m":"{sd}. {sm}. â {ed}. {em}. {ey}","l":"{sd}. {sm} â {ed}. {em} {ey}","f":"{sd}. {sm} â {ed}. {em} {ey}"},"c12":{"s":"{sd}. {sm}. {sy} â {ed}. {em}. {ey}","m":"{sd}. {sm}. {sy} â {ed}. {em}. {ey}","l":"{sd}. {sm} {sy} â {ed}. {em} {ey}","f":"{sd}. {sm} {sy} â {ed}. {em} {ey}"},"c20":{"s":"{sm}. {sy} â {em}. {ey}","m":"{sm}. {sy} â {em}. {ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_so = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M/d","m":"dd-MMM","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"dd-MMM-yy","l":"yyyy MMM d","f":"MMMM dd, yyyy"},"my":{"m":"MMM-yy"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, M/d/yy","m":"EE, M/d/yy","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"E, M/d","m":"EE, M/d","l":"EEEE, MMM d","f":"EEEE, MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sd}-{sm}-{sy}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sm} {sd}, {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_sq = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"MM-dd"},"dmy":{"s":"yy-M-d","m":"yyyy-MM-dd","l":"yyyy MMM d","f":"dd MMMM yyyy"},"my":{"s":"M.yy","m":"yyyy-MM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, d.M.yy","m":"EE, d.M.yyyy","l":"EEE, d MMM yyyy","f":"EEEE, d MMM yyyy"},"dmw":{"s":"E, d.M","m":"EE, d.M","l":"EEEE d MMM","f":"EEEE d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h.mm.ss.a z","hmsz":"h.mm.ss. z","ahms":"h.mm.ss.a","hms":"h.mm.ss.","ms":"mm.ss.","ahmz":"h.mm.a z","ahm":"h.mm.a","hm":"h.mm.","hmz":"h.mm. z","ah":"h.a"},"24":{"ahmsz":"H.mm.ss. z","ahms":"H.mm.ss.","hmsz":"H.mm.ss. z","hms":"H.mm.ss.","ms":"mm.ss.","ahmz":"H.mm. z","ahm":"H.mm.","hmz":"H.mm. z","hm":"H.mm."}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy}-{sm}-{sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sd} â {et} {ed} {em} {ey}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sd} â {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sd} {sm} â {et} {ed} {em} {ey}","f":"{st} {sd} {sm} â {et} {ed} {em} {ey}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sd} â {ed} {em} {ey}","f":"{sd} â {ed} {em} {ey}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sd} {sm} â {ed} {em} {ey}","f":"{sd} {sm} â {ed} {em} {ey}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sm} {sy} â {em} {ey}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_sr = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"MM-dd","l":"d. MMM","f":"d. MMMM"},"dmy":{"s":"d. M. yy.","m":"dd.MM.yy","l":"d. MMM yy.","f":"dd. MMMM yyyy"},"my":{"s":"yy-M","m":"yyyy-MM","l":"MMM yyyy.","f":"MMMM yyyy."},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, d. M. yy.","m":"EE, d. M. yyyy.","l":"EEE, d. MMM yyyy.","f":"EEEE, d. MMM yyyy."},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE d. MMM","f":"EEEE d. MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"hh.mm.ss a z","hmsz":"hh.mm.ss z","ahms":"hh.mm.ss a","hms":"hh.mm.ss","ms":"mm.ss","ahmz":"hh.mm a z","ahm":"hh.mm a","hm":"hh.mm","hmz":"hh.mm z","ah":"hh a"},"24":{"ahmsz":"HH.mm.ss z","ahms":"HH.mm.ss","hmsz":"HH.mm.ss z","hms":"HH.mm.ss","ms":"mm.ss","ahmz":"HH.mm z","ahm":"HH.mm","hmz":"HH.mm z","hm":"HH.mm"}},"range":{"c00":{"s":"{st} - {et} {sd}. {sm}. {sy}.","m":"{st} - {et} {sd}.{sm}.{sy}","l":"{st} - {et} {sd}. {sm} {sy}.","f":"{st} - {et} {sd}. {sm} {sy}"},"c01":{"s":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","l":"{st} {sd}. - {et} {ed}. {em} {ey}.","m":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","f":"{st} {sd}. - {et} {ed}. {em} {ey}."},"c02":{"s":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}.","l":"{st} {sd}. {sm} - {et} {ed}. {em} {ey}.","f":"{st} {sd}. {sm} - {et} {ed}. {em} {ey}.","m":"{st} {sd}.{sm}.{sy}. - {et} {ed}.{em}.{ey}."},"c10":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sd}. - {ed}. {em} {ey}.","f":"{sd}. - {ed}. {em} {ey}.","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}."},"c11":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sd}. {sm} - {ed}. {em} {ey}.","f":"{sd}. {sm} - {ed}. {em} {ey}."},"c12":{"s":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","m":"{sd}.{sm}.{sy}. - {ed}.{em}.{ey}.","l":"{sd}. {sm} {sy}. - {ed}. {em} {ey}.","f":"{sd}. {sm} {sy}. - {ed}. {em} {ey}."},"c20":{"s":"{sy} {sm} - {em}","m":"{sy} {sm} - {em}","l":"{sm} {sy}. - {em} {ey}.","f":"{sy}â{sm} - {ey}â{em}"}}},"generated":true};
ilib.data.dateformats_sr_Latn_BA = {"gregorian":{"range":{"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}"}}},"generated":true};
ilib.data.dateformats_sr_Latn_ME = {"gregorian":{"range":{"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}"}}},"generated":true};
ilib.data.dateformats_sr_Latn_RS = {"gregorian":{"range":{"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}"}}},"generated":true};
ilib.data.dateformats_ss = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"MMM d","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"yy MMM d","l":"yyyy MMM d","f":"yyyy MMMM dd"},"my":{"s":"yy-M","m":"yy MMM","l":"yyyy MMM","f":"yyyy MMMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy} {sm} {sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} {sm} {sd}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_st = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"MMM d","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"yy MMM d","l":"yyyy MMM d","f":"yyyy MMMM dd"},"my":{"s":"yy-M","m":"yy MMM","l":"yyyy MMM","f":"yyyy MMMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy} {sm} {sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} {sm} {sd}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_sv = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"E, yy-MM-dd","m":"EE, yyyy-MM-dd","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMMM d"},"dmy":{"s":"yy-MM-dd","m":"yyyy-MM-dd","l":"yyyy MMM d","f":"yyyy MMMM d"},"dmw":{"s":"E, MM-dd","m":"EE, MM-dd","l":"EEE, MMM d","f":"EEEE, MMMM d"},"dm":{"s":"MM-dd","m":"MM-dd","l":"MMM d","f":"MMMM d"},"my":{"s":"yy-MM","m":"yyyy-MM","l":"yyyy MMM","f":"yyyy MMMM"},"dw":{"s":"E, d","m":"EE, d","l":"EEE, d","f":"EEEE, d"},"d":{"s":"d","m":"d","l":"d","f":"d"},"m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh:mm:ss a z","ahms":"hh:mm:ss a","hmsz":"hh:mm:ss z","ahmz":"hh:mm a z","hms":"hh:mm:ss","ahm":"hh:mm a","hmz":"hh:mm z","ah":"hh a","hm":"hh:mm","ms":"hh:ss","h":"hh"},"24":{"ahmsz":"HH:mm:ss z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hms":"HH:mm:ss","ahm":"HH:mm","hmz":"HH:mm z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{sy}-{sm}-{sd} {st} â {et}","m":"{sy}-{sm}-{sd} {st} â {et}","l":"{sy} {sm} {sd} {st} â {et}","f":"{sy} {sm} {sd} {st} â {et}"},"c01":{"s":"{sy}-{sm}-{sd} {st} â {ed} {et}","m":"{sy}-{sm}-{sd} {st} â {ed} {et}","l":"{sy} {sm} {sd} {st} â {ed} {et}","f":"{sy} {sm} {sd} {st} â {ed} {et}"},"c02":{"s":"{sy}-{sm}-{sd} {st} â {em}-{ed} {et}","m":"{sy}-{sm}-{sd} {st} â {em}-{ed} {et}","l":"{sy} {sm} {sd} {st} â {em} {ed} {et}","f":"{sy} {sm} {sd} {st} â {em} {ed} {et}"},"c03":{"s":"{sy}-{sm}-{sd} {st} â {ey}-{em}-{ed} {et}","m":"{sy}-{sm}-{sd} {st} â {ey}-{em}-{ed} {et}","l":"{sy} {sm} {sd} {st} â {ey} {em} {ed} {et}","f":"{sy} {sm} {sd} {st} â {ey} {em} {ed} {et}"},"c10":{"s":"{sy}-{sm}-{sd} â {ed}","m":"{sy}-{sm}-{sd} â {ed}","l":"{sy} {sm} {sd} â {ed}","f":"{sy} {sm} {sd} â {ed}"},"c11":{"s":"{sy}-{sm}-{sd} â {em}-{ed}","m":"{sy}-{sm}-{sd} â {em}-{ed}","l":"{sy} {sm} {sd} â {em} {ed}","f":"{sy} {sm} {sd} â {em} {ed}"},"c12":{"s":"{sy}-{sm}-{sd} â {ey}-{em}-{ed}","m":"{sy}-{sm}-{sd} â {ey}-{em}-{ed}","l":"{sy} {sm} {sd} â {ey} {em} {ed}","f":"{sy} {sm} {sd} â {ey} {em} {ed}"},"c20":{"s":"{sy}-{sm} â {ey}-{em}","m":"{sy}-{sm} â {ey}-{em}","l":"{sy} {sm} â {ey} {em}","f":"{sy} {sm} â {ey} {em}"},"c30":"{sy} â {ey}"}}};
ilib.data.dateformats_sw = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"d-M","m":"d MMM"},"dmy":{"m":"d MMM yy"},"my":{"m":"MMM yy"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, d/M/yy","m":"EE, d/M/yy","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"E, d/M","m":"EE, d/M","l":"EEEE, d MMM","f":"EEEE, d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} â {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","f":"{st} {sd} â {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} â {et} {ed} {em} {ey}","f":"{st} {sd} {sm} â {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}"},"c10":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} â {ed} {em} {ey}","f":"{sd} â {ed} {em} {ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}"},"c11":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em} {ey}","f":"{sd} {sm} â {ed} {em} {ey}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_ta = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"dd-MM"},"dmy":{"m":"d MMM, yy","l":"d MMM, yyyy","f":"d MMMM, yyyy"},"my":{"m":"MM-yyyy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"dmwy":{"s":"E, d/M/yy","m":"EE, d/M/yy","l":"EEE, d MMM, yyyy","f":"EEEE, d MMM, yyyy"},"dmw":{"s":"E, d/M","m":"EE, d/M","l":"EEEE, d MMM","f":"EEEE, d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm}, {sy}","l":"{st} â {et} {sd} {sm}, {sy}","f":"{st} â {et} {sd} {sm}, {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} â {et} {ed} {em}, {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","f":"{st} {sd} â {et} {ed} {em}, {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} â {et} {ed} {em}, {ey}","f":"{st} {sd} {sm} â {et} {ed} {em}, {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}"},"c10":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} â {ed} {em}, {ey}","f":"{sd} â {ed} {em}, {ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}"},"c11":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em}, {ey}","f":"{sd} {sm} â {ed} {em}, {ey}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm}, {sy} â {ed} {em}, {ey}","f":"{sd} {sm}, {sy} â {ed} {em}, {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_te = {"gregorian":{"order":"{time} {date}","date":{"dm":{"m":"dd-MM"},"dmy":{"m":"d MMM yy","l":"d, MMM yyyy"},"my":{"m":"MM-yyyy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"dmwy":{"s":"E, d/M/yy","m":"EE, d/M/yy","l":"EEE, d, MMM yyyy","f":"EEEE, d, MMM yyyy"},"dmw":{"s":"E, d/M","m":"EE, d/M","l":"EEEE, d MMM","f":"EEEE, d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sd}, {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_th = {"thaisolar":{"order":"{time} {date}","date":{"dm":{"s":"d/M","m":"d/M","l":"d MMM","f":"d MMMM"},"dmy":{"s":"d/M/yy","m":"d/M/yyyy","l":"d MMM yyyy","f":"d MMMM yyyy"},"my":{"s":"M/yy","m":"M/yyyy","l":"MMM yyyy","f":"MMMM yyyy"},"m":{"s":"M","m":"M","l":"MMM","f":"MMMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"y":{"s":"yy","l":"yyyy","m":"yyyy","f":"yyyy"},"dmwy":{"s":"E d/M/yy","m":"EE d/M/yyyy","l":"EEE d MMM yyyy","f":"EEEE d MMMM yyyy"},"dmw":{"s":"E d/M","m":"EE d/M","l":"EEE d MMM","f":"EEEE d MMMM"},"n":{"s":"N","m":"N","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"h:mm:ss a z","ahms":"h:mm:ss a","hmsz":"h:mm:ss z","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hmz":"h:mm z","ah":"h a","hm":"h:mm","ms":"mm:ss","h":"h","m":"mm","s":"ss"},"24":{"ahmsz":"H:mm:ss z","ahms":"H:mm:ss","hmsz":"H:mm:ss z","hms":"H:mm:ss","ahmz":"H:mm z","ahm":"H:mm","hmz":"H:mm z","ah":"H","hm":"H:mm","ms":"mm:ss","h":"H","m":"mm","s":"ss"}},"range":{"c00":{"s":"{st} - {et} {sd}/{sm}/{sy}","m":"{st} - {et} {sd}/{sm}/{sy}","l":"{st} - {et} {sd} {sm} {sy}","f":"{st} - {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd} - {et} {ed}/{em}/{ey}","m":"{st} {sd} - {et} {ed}/{em}/{ey}","l":"{st} {sd} - {et} {ed} {em} {ey}","f":"{st} {sd} - {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","m":"{st} {sd}/{sm}/{sy} - {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} - {et} {ed} {em} {ey}","f":"{st} {sd} {sm} - {et} {ed} {em} {ey}"},"c10":{"s":"{sd} - {ed}/{em}/{ey}","m":"{sd} - {ed}/{em}/{ey}","l":"{sd} - {ed} {em} {ey}","f":"{sd} - {ed} {em} {ey}"},"c11":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} - {ed} {em} {ey}","f":"{sd} {sm} - {ed} {em} {ey}"},"c12":{"s":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} - {ed}/{em}/{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} - {em}/{ey}","m":"{sm}/{sy} - {em}/{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_tr = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"dd.MM.yyyy, E","m":"dd.MM.yyyy, EE","l":"dd MMM yyyy, EEE","f":"dd MMMM yyyy EEEE"},"dmy":{"s":"dd.MM.yyyy","m":"dd.MM.yyyy","l":"dd MMM yyyy","f":"dd MMMM yyyy"},"dmw":{"s":"dd.MM, E","m":"dd.MM, EE","l":"dd MMM, EEE","f":"dd MMMM, EEEE"},"dm":{"s":"dd.MM","m":"dd.MM","l":"dd MMM","f":"dd MMMM"},"my":{"s":"MM.yy","m":"MM.yyyy","l":"MMM yy","f":"MMMM yyyy"},"dw":{"s":"dd EE","m":"dd EE","l":"dd EEE","f":"dd EEEE"},"d":{"s":"dd","m":"dd","l":"dd","f":"dd"},"m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yy","f":"yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh:mm:ss a Z","ahms":"hh:mm:ss a","hmsz":"hh:mm:ss Z","ahmz":"hh:mm a Z","hms":"hh:mm:ss","ahm":"hh:mm a","hmz":"hh:mm Z","ah":"hh a","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ss Z","ahms":"HH:mm:ss","hmsz":"HH:mm:ss Z","ahmz":"HH:mm Z","hms":"HH:mm:ss","ahm":"HH:mm","hmz":"HH:mm Z","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{sd}.{sm}.{sy} {st} - {et}","m":"{sd}.{sm}.{sy} {st} - {et}","l":"{sd} {sm} {sy} {st} - {et}","f":"{sd} {sm} {sy} {st} - {et}"},"c01":{"s":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","l":"{sd} {sm} {st} - {ed} {em} {et} {ey}","f":"{sd} {sm} {st} - {ed} {em} {et} {ey}"},"c02":{"s":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","l":"{sd} {sm} {st} - {ed} {em} {et}, {sy} ","f":"{sd} {sm} {st} - {ed} {em} {et}, {sy}"},"c03":{"s":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st} - {ed}.{em}.{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}"},"c10":{"s":"{sd} - {ed}.{sm}.{sy}","m":"{sd} - {ed}.{sm}.{sy}","l":"{sd} - {ed} {sm} {sy}","f":"{sd} - {ed} {sm} {sy}"},"c11":{"s":"{sd}.{sm} - {ed}.{em} {ey}","m":"{sd}.{sm} - {ed}.{em} {ey}","l":"{sd} {sm} - {ed} {em} {sy}","f":"{sd} {sm} - {ed} {em} {sy}"},"c12":{"s":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} - {ed}.{em}.{ey}","l":"{sd} {sm} {sy} - {ed} {em} {ey}","f":"{sd} {sm} {sy} - {ed} {em} {ey}"},"c20":{"s":"{sm}.{sy} - {em}.{ey}","m":"{sm}.{sy} - {em}.{ey}","l":"{sm} {sy} - {em} {ey}","f":"{sm} {sy} - {em} {ey}"},"c30":"{sy} - {ey}"}}};
ilib.data.dateformats_uk = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"dd.MM","m":"dd.MM"},"dmy":{"s":"dd.MM.yy","m":"dd.MM.yy"},"my":{"s":"MM.yy","m":"MM.yy"},"m":{"s":"MM"},"d":{"s":"d","f":"dd","l":"dd","m":"dd"},"y":{"m":"yy"},"dmwy":{"s":"E, dd.MM.yy","m":"EE, dd.MM.yyyy","l":"EEE, d MMM yyyy","f":"EEEE, d MMM yyyy"},"dmw":{"s":"E, dd.MM","m":"EE, dd.MM","l":"EEEE, d MMM","f":"EEEE, d MMM"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sd}.{sm}.{sy}","m":"{st} â {et} {sd}.{sm}.{sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","l":"{st} {sd} â {et} {ed} {em} {ey}","m":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","f":"{st} {sd} â {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}","l":"{st} {sd} {sm} â {et} {ed} {em} {ey}","f":"{st} {sd} {sm} â {et} {ed} {em} {ey}","m":"{st} {sd}.{sm}.{sy} â {et} {ed}.{em}.{ey}"},"c10":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd} â {ed} {em} {ey}","f":"{sd} â {ed} {em} {ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}"},"c11":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd} {sm} â {ed} {em} {ey}","f":"{sd} {sm} â {ed} {em} {ey}"},"c12":{"s":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","m":"{sd}.{sm}.{sy} â {ed}.{em}.{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}.{sy} â {em}.{ey}","m":"{sm}.{sy} â {em}.{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_ur = {"gregorian":{"order":"{time} {date}","date":{"dmwy":{"s":"EØ d/M/yy","m":"EEØ d/M/yy","l":"EEEØ d MMMØ yyyy","f":"EEEEØ d MMMØ yyyy"},"dmy":{"s":"âd/M/yy","m":"âd MMMØ yy","l":"âd MMMØ yyyy","f":"âd MMMMØ yyyy"},"dmw":{"s":"EØ d/M","m":"EEØ d/M","l":"EEEEØ d MMM","f":"EEEEØ d MMM"},"dm":{"s":"âd/M","m":"âd MMM","l":"âd MMM","f":"âd MMMM"},"my":{"s":"âM/yy","m":"MMMØ yy","f":"MMMMØ yyyy"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"âh:mm:ss a z","ahms":"âh:mm:ss a","hmsz":"âh:mm:ss z","hms":"âh:mm:ss","ahmz":"âh:mm a z","ahm":"âh:mm a","hmz":"âh:mm z","ah":"âh a","hm":"âh:mm","ms":"âmm:ss"},"24":{"ahmsz":"âH:mm:ss z","ahms":"âH:mm:ss","hmsz":"âH:mm:ss z","hms":"âH:mm:ss","ahmz":"âH:mm z","ahm":"âH:mm","hmz":"âH:mm z","hm":"âH:mm","ms":"âmm:ss"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd} {sm}Ø {sy}","l":"{st} â {et} {sd} {sm}Ø {sy}","f":"{st} â {et} {sd} {sm}Ø {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} â {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","f":"{st} {sd} â {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} â {et} {ed} {em} {ey}","f":"{st} {sd} {sm} â {et} {ed} {em} {ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}"},"c10":{"s":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"â{sd} â {ed} {em} {ey}","f":"â{sd} â {ed} {em} {ey}","m":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}"},"c11":{"s":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"â{sd} {sm} â {ed} {em} {ey}","f":"â{sd} {sm} â {ed} {em} {ey}"},"c12":{"s":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"â{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"â{sd} {sm} {sy} â {ed} {em} {ey}","f":"â{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"â{sm}/{sy} â {em}/{ey}","m":"â{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"â{sy} â {ey}"}}};
ilib.data.dateformats_uz = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M-d","m":"MMM d","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"yy MMM d","l":"yyyy MMM d","f":"yyyy MMMM dd"},"my":{"s":"yy-M","m":"yy MMM","l":"yyyy MMM","f":"yyyy MMMM"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, yy-M-d","m":"EE, yy-M-d","l":"EEE, yyyy MMM d","f":"EEEE, yyyy MMM d"},"dmw":{"s":"E, M-d","m":"EE, M-d","l":"EEEE MMM d","f":"EEEE MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"},"24":{"ahmsz":"HH:mm:ss z","hmsz":"HH:mm:ss z","ahmz":"HH:mm z","hmz":"HH:mm z"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sy} {sm} {sd}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sy} {sm} {sd}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_vai = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M/d","m":"d MMM","l":"MMM d","f":"MMMM d"},"dmy":{"s":"yy-M-d","m":"d MMM yy","l":"yyyy MMM d"},"my":{"m":"MMM yy"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, M/d/yy","m":"EE, M/d/yyyy","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"E, M/d","m":"EE, M/d","l":"EEEE, MMM d","f":"EEEE, MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sy}-{sm}-{sd}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sy} {sm} {sd}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sy}â{sm}â{sd} â {et} {ed}","l":"{st} {sy}â{sm}â{sd} â {et} {ed}","m":"{st} {sy}â{sm}â{sd} â {et} {ed}","f":"{st} {sy}â{sm}â{sd} â {et} {ed}"},"c02":{"s":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","l":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","f":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}","m":"{st} {sy}â{sm}â{sd} â {et} {em}â{ed}"},"c10":{"s":"{sy}â{sm}â{sd} â {ed}","l":"{sy}â{sm}â{sd} â {ed}","f":"{sy}â{sm}â{sd} â {ed}","m":"{sy}â{sm}â{sd} â {ed}"},"c11":{"s":"{sy}â{sm}â{sd} â {em}â{ed}","m":"{sy}â{sm}â{sd} â {em}â{ed}","l":"{sy}â{sm}â{sd} â {em}â{ed}","f":"{sy}â{sm}â{sd} â {em}â{ed}"},"c12":{"s":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","m":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","l":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}","f":"{sy}â{sm}â{sd} â {ey}â{em}â{ed}"},"c20":{"s":"{sy}â{sm} â {ey}â{em}","m":"{sy}â{sm} â {ey}â{em}","l":"{sy}â{sm} â {ey}â{em}","f":"{sy}â{sm} â {ey}â{em}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_vai_Latn_LR = {"gregorian":{"date":{"dmy":{"s":"M/d/yy","l":"MMM d yyyy"},"dmwy":{"m":"EE, M/d/yy"}},"range":{"c00":{"s":"{st} â {et} {sm}/{sd}/{sy}","l":"{st} â {et} {sm} {sd} {sy}"}}},"generated":true};
ilib.data.dateformats_vi = {"gregorian":{"order":"{time} {date}","date":{"dmwy":{"s":"E dd/MM/yy","m":"EE dd/MM/yyyy","l":"EEE dd MMM yyyy","f":"EEEE 'ngÃ y' dd MMMM 'nÄm' yyyy"},"dmy":{"s":"d/M/yy","m":"dd/MM/yyyy","l":"dd MMM yyyy","f":"'ngÃ y' dd MMMM 'nÄm' yyyy"},"dmw":{"s":"E d/M","m":"EE dd/MM","l":"EEE dd MMM","f":"EEEE 'ngÃ y' dd MMMM"},"dw":{"s":"E dd","m":"EE dd","l":"EEE dd","f":"EEEE 'ngÃ y' dd"},"dm":{"s":"d/M","m":"dd/MM","l":"dd MMM","f":"'ngÃ y' dd MMMM"},"my":{"s":"M/yy","m":"MM/yyyy","l":"MMM yyyy","f":"MMMM 'nÄm' yyyy"},"d":{"s":"dd","m":"dd","l":"dd","f":"'ngÃ y' dd"},"m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yyyy","l":"yyyy","f":"'nÄm' yyyy"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}},"time":{"12":{"ahmsz":"hh'h'mm:ss a Z","ahms":"hh'h'mm:ss a","hmsz":"hh'h'mm:ss Z","ahmz":"hh'h'mm a Z","hms":"hh'h'mm:ss","ahm":"hh'h'mm a","hmz":"hh'h'mm Z","ah":"hh a","hm":"hh'h'mm","h":"hh"},"24":{"ahmsz":"HH'h'mm:ss Z","ahms":"HH'h'mm:ss","hmsz":"HH'h'mm:ss Z","ahmz":"HH'h'mm Z","hms":"HH'h'mm:ss","ahm":"HH'h'mm","hmz":"HH'h'mm Z","ah":"HH","hm":"HH'h'mm","h":"HH"}},"range":{"c00":{"s":"{st} â {et} {sd}/{sm}/{sy}","m":"{st} â {et} {sd}/{sm}/{sy}","l":"{st} â {et} {sd} {sm} {sy}","f":"vÃ o lÃºc {st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} â {et} {ed} {em} {ey}","f":"vÃ o lÃºc {st} {sd} â vÃ o lÃºc {et} {ed} {em} {ey}"},"c02":{"s":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","m":"{st} {sd}/{sm}/{sy} â {et} {ed}/{em}/{ey}","l":"{st} {sd} {sm} {sy} â {et} {ed} {em} {ey}","f":"vÃ o lÃºc {st} {sd} {sm} â vÃ o lÃºc {et} {ed} {em} {ey}"},"c03":{"s":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","m":"{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}","l":"{sd} {sm} {sy} {st} - {ed} {em} {ey} {et}","f":"vÃ o lÃºc {st} {sd} {sm} {sy} â vÃ o lÃºc {et} {ed} {em} {ey}"},"c10":{"s":"{sd} â {ed}/{em}/{ey}","m":"{sd} â {ed}/{em}/{ey}","l":"{sd} â {ed} {sm} {sy}","f":"{sd} â {ed} {sm} {sy}"},"c11":{"s":"{sd}/{sm} â {ed}/{em}/{ey}","m":"{sd}/{sm} â {ed}/{em}/{ey}","l":"{sd} {sm} â {ed} {em} {sy}","f":"{sd} {sm} â {ed} {em} {sy}"},"c12":{"s":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","m":"{sd}/{sm}/{sy} â {ed}/{em}/{ey}","l":"{sd} {sm} {sy} â {ed} {em} {ey}","f":"{sd} {sm} {sy} â {ed} {em} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":{"s":"{sy} â {ey}","m":"{sy} â {ey}","l":"{sy} â {ey}","f":"{sy} â {ey}"}}}};
ilib.data.dateformats_zh = {"gregorian":{"order":{"s":"{date} {time}","m":"{date} {time}","l":"{date}{time}","f":"{date}{time}"},"date":{"dmwy":{"s":"yy-MM-dd(E)","m":"yyyy-MM-dd(EE)","l":"yyyyå¹´MMMædæ¥(EEE)","f":"yyyyå¹´MMMMædæ¥(EEEE)"},"dmy":{"s":"yy-MM-dd","m":"yyyy-MM-dd","l":"yyyyå¹´MMMædæ¥","f":"yyyyå¹´MMMMædæ¥"},"dmw":{"s":"MM-dd(E)","m":"MM-dd(EE)","l":"MMMædæ¥(EEE)","f":"MMMMædæ¥(EEEE)"},"dm":{"s":"MM-dd","m":"MM-dd","l":"MMMædæ¥","f":"MMMMædæ¥"},"my":{"s":"yy-MM","m":"yyyy-MM","l":"yyyyå¹´MMMæ","f":"yyyyå¹´MMMMæ"},"dw":{"s":"dæ¥(E)","m":"dæ¥(EE)","l":"dæ¥(EEE)","f":"dæ¥(EEEE)"},"d":{"s":"d","m":"dd","l":"dæ¥","f":"dæ¥"},"m":{"s":"M","m":"MM","l":"MMMæ","f":"MMMMæ"},"y":{"s":"yy","m":"yyyy","l":"yyyyå¹´","f":"yyyyå¹´"},"n":{"s":"N","m":"NN","l":"MMMæ","f":"MMMMæ"}},"time":{"12":{"ahmsz":"ahh:mm:ssz","ahms":"ahh:mm:ss","hmsz":"hh:mm:ssz","hms":"hh:mm:ss","ahmz":"ahh:mmz","ahm":"ahh:mm","hmz":"hh:mmz","ah":"ahh","hm":"hh:mm","h":"hh"},"24":{"ahmsz":"HH:mm:ssz","ahms":"HH:mm:ss","hmsz":"HH:mm:ssz","hms":"HH:mm:ss","ahmz":"HH:mmz","ahm":"HH:mm","hmz":"HH:mmz","ah":"HH","hm":"HH:mm","h":"HH"}},"range":{"c00":{"s":"{sy}-{sm}-{sd}ï¼{st}è³{et}","m":"{sy}-{sm}-{sd}ï¼{st}è³{et}","l":"{sy}{sm}{sd}ï¼{st}è³{et}","f":"{sy}{sm}{sd}ï¼{st}è³{et}"},"c01":{"s":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","m":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","l":"{sy}{sm}{sd}{st}è³{ed}{et}","f":"{sy}{sm}{sd}{st}è³{ed}{et}"},"c02":{"s":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","m":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","l":"{sy}{sm}{sd}ï¼{st}è³{em}{ed}æ¥ï¼{et}","f":"{sy}{sm}{sd}ï¼{st}è³{em}{ed}æ¥ï¼{et}"},"c03":{"s":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","m":"{sy}-{sm}-{sd}ï¼{st}è³{ey}-{em}-{ed}ï¼{et}","l":"{sy}{sm}{sd}ï¼{st}è³{ey}{em}{ed}ï¼{et}","f":"{sy}{sm}{sd}ï¼{st}è³{ey}{em}{ed}ï¼{et}"},"c10":{"s":"{sy}-{sm}-{sd}è³{ed}","m":"{sy}-{sm}-{sd}è³{ed}","l":"{sy}{sm}{sd}è³{ed}","f":"{sy}{sm}{sd}è³{ed}"},"c11":{"s":"{sy}-{sm}-{sd}è³{em}-{ed}","m":"{sy}-{sm}-{sd}è³{em}-{ed}","l":"{sy}{sm}{sd}è³{em}{ed}","f":"{sy}{sm}{sd}è³{em}{ed}"},"c12":{"s":"{sy}-{sm}-{sd}è³{ey}-{em}-{ed}","m":"{sy}-{sm}-{sd}è³{ey}-{em}-{ed}","l":"{sy}{sm}{sd}è³{ey}{em}{ed}","f":"{sy}{sm}{sd}è³{ey}{em}{ed}"},"c20":{"s":"{sy}-{sm}è³{ey}-{em}","m":"{sy}-{sm}è³{ey}-{em}","l":"{sy}{sm}è³{ey}{em}","f":"{sy}{sm}è³{ey}{em}"},"c30":"{sy}è³{ey}"}}};
ilib.data.dateformats_zh_Hant_HK = {"gregorian":{"date":{"dmwy":{"s":"dd.MM.yy(E)","m":"dd.MM.yyyy(EE)"},"dmy":{"s":"dd.MM.yy","m":"dd.MM.yyyy"},"dmw":{"s":"dd.MM(E)","m":"dd.MM(EE)"},"dm":{"s":"dd.MM","m":"dd.MM"},"my":{"s":"MM.yy","m":"MM.yyyy"}},"range":{"c00":{"s":"{sd}.{sm}.{sy} {st}è³{et}","m":"{sd}.{sm}.{sy} {st}è³{et}"},"c01":{"s":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}"},"c02":{"s":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}"},"c03":{"s":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}"},"c10":{"s":"{sd}è³{ed}.{sm}.{sy}","m":"{sd}è³{ed}.{sm}.{sy}"},"c11":{"s":"{sd}.{sm}è³{ed}.{em}.{sy}","m":"{sd}.{sm}è³{ed}.{em}.{sy}"},"c12":{"s":"{sd}.{sm}.{sy}è³{ed}.{em}.{ey}","m":"{sd}.{sm}.{sy}è³{ed}.{em}.{ey}"},"c20":{"s":"{sm}.{sy}è³{em}.{ey}","m":"{sm}.{sy}è³{em}.{ey}"}}}};
ilib.data.dateformats_zh_Hans_MO = {"gregorian":{"date":{"dmwy":{"s":"dd.MM.yy(E)","m":"dd.MM.yyyy(EE)"},"dmy":{"s":"dd.MM.yy","m":"dd.MM.yyyy"},"dmw":{"s":"dd.MM(E)","m":"dd.MM(EE)"},"dm":{"s":"dd.MM","m":"dd.MM"},"my":{"s":"MM.yy","m":"MM.yyyy"}},"range":{"c00":{"s":"{sd}.{sm}.{sy} {st}è³{et}","m":"{sd}.{sm}.{sy} {st}è³{et}"},"c01":{"s":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}"},"c02":{"s":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}"},"c03":{"s":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}","m":"{sd}.{sm}.{sy} {st}è³{ed}.{em}.{ey} {et}"},"c10":{"s":"{sd}è³{ed}.{sm}.{sy}","m":"{sd}è³{ed}.{sm}.{sy}"},"c11":{"s":"{sd}.{sm}è³{ed}.{em}.{sy}","m":"{sd}.{sm}è³{ed}.{em}.{sy}"},"c12":{"s":"{sd}.{sm}.{sy}è³{ed}.{em}.{ey}","m":"{sd}.{sm}.{sy}è³{ed}.{em}.{ey}"},"c20":{"s":"{sm}.{sy}è³{em}.{ey}","m":"{sm}.{sy}è³{em}.{ey}"}}}};
ilib.data.dateformats_zh_Hant_TW = {"gregorian":{"date":{"dmwy":{"s":"yyyy-MM-dd(E)","l":"yyyyå¹´MMMædæ¥(EEE)"},"dmy":{"s":"yyyy-MM-dd","l":"yyyyå¹´MMMædæ¥"},"my":{"s":"yyyy-MM","l":"yyyyå¹´MMMæ"},"y":{"s":"yyyy","l":"yyyyå¹´"}}}};
ilib.data.dateformats_zh_Hant_US = {"gregorian":{"time":{"12":{"ahmsz":"h:mm:ssa z","ahms":"h:mm:ssa","hmsz":"h:mm:ss z","hms":"h:mm:ss","ahmz":"h:mma z","ahm":"h:mma","hmz":"h:mm z","ah":"ha","hm":"h:mm","h":"h"},"24":{"ahmsz":"H:mm:ss z","ahms":"H:mm:ss","hmsz":"H:mm:ss z","hms":"H:mm:ss","ahmz":"H:mm z","ahm":"H:mm","hmz":"H:mm z","hm":"H:mm","h":"H"}}}};
ilib.data.dateformats_zu = {"gregorian":{"order":"{time} {date}","date":{"dm":{"s":"M/d","m":"d MMM","l":"MMM d"},"dmy":{"s":"M/d/yy","m":"d MMM yy","l":"MMM d, yyyy","f":"dd MMMM yyyy"},"my":{"m":"MMM yy"},"m":{"f":"MMM"},"d":{"s":"d","f":"d","l":"d","m":"d"},"dmwy":{"s":"E, M/d/yy","m":"EE, M/d/yy","l":"EEE, MMM d, yyyy","f":"EEEE, MMM d, yyyy"},"dmw":{"s":"E, M/d","m":"EE, M/d","l":"EEEE, MMM d","f":"EEEE, MMM d"},"n":{"m":"N"}},"time":{"12":{"ahmsz":"h:mm:ss a z","hmsz":"h:mm:ss z","ahms":"h:mm:ss a","hms":"h:mm:ss","ahmz":"h:mm a z","ahm":"h:mm a","hm":"h:mm","hmz":"h:mm z","ah":"h a"}},"range":{"c00":{"s":"{st} â {et} {sm}/{sd}/{sy}","m":"{st} â {et} {sd} {sm} {sy}","l":"{st} â {et} {sm} {sd}, {sy}","f":"{st} â {et} {sd} {sm} {sy}"},"c01":{"s":"{st} {sm}/{sd}/{sy} â {et} {em}/{ed}/{ey}","l":"{st} {sm} {sd} â {et} {ed} {ey}","m":"{st} {sm}/{sd}/{sy} â {et} {em}/{ed}/{ey}","f":"{st} {sm} {sd} â {et} {ed} {ey}"},"c02":{"s":"{st} {sm}/{sd}/{sy} â {et} {em}/{ed}/{ey}","l":"{st} {sm} {sd} â {et} {em} {ed} {ey}","f":"{st} {sm} {sd} â {et} {em} {ed} {ey}","m":"{st} {sm}/{sd}/{sy} â {et} {em}/{ed}/{ey}"},"c10":{"s":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}","l":"{sm} {sd} â {ed} {ey}","f":"{sm} {sd} â {ed} {ey}","m":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}"},"c11":{"s":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}","m":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}","l":"{sm} {sd} â {em} {ed} {ey}","f":"{sm} {sd} â {em} {ed} {ey}"},"c12":{"s":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}","m":"{sm}/{sd}/{sy} â {em}/{ed}/{ey}","l":"{sm} {sd} {sy} â {em} {ed} {ey}","f":"{sm} {sd} {sy} â {em} {ed} {ey}"},"c20":{"s":"{sm}/{sy} â {em}/{ey}","m":"{sm}/{sy} â {em}/{ey}","l":"{sm} {sy} â {em} {ey}","f":"{sm} {sy} â {em} {ey}"},"c30":"{sy} â {ey}"}},"generated":true};
ilib.data.dateformats_zxx = {"gregorian":{"order":"{date} {time}","date":{"dmwy":{"s":"EE d/MM/yy","m":"EEE d/MM/yyyy","l":"EEE d MMM, yyyy","f":"EEEE d MMMM, yyyy"},"dmy":{"s":"d/MM/yy","m":"d/MM/yyyy","l":"d MMM, yyyy","f":"d MMMM, yyyy"},"dmw":{"s":"EE d/M","m":"EE d/MM","l":"EEE d MMM","f":"EEEE d MMMM"},"dm":{"s":"d/M","m":"d/M","l":"d MMM","f":"d MMMM"},"my":{"s":"M/yy","m":"MM/yyyy","l":"MMM yy","f":"MMMM yyyy"},"d":"dd","m":{"s":"M","m":"MM","l":"MMM","f":"MMMM"},"y":{"s":"yy","m":"yy","l":"yyyy","f":"yyyy G"},"n":{"s":"N","m":"NN","l":"MMM","f":"MMMM"}}},"julian":"gregorian"};
ilib.data.sysres = {"MMMM1":"January","MMM1":"Jan","NN1":"Ja","N1":"J","MMMM2":"February","MMM2":"Feb","NN2":"Fe","N2":"F","MMMM3":"March","MMM3":"Mar","NN3":"Ma","N3":"M","MMMM4":"April","MMM4":"Apr","NN4":"Ap","N4":"A","MMMM5":"May","MMM5":"May","NN5":"Ma","N5":"M","MMMM6":"June","MMM6":"Jun","NN6":"Ju","N6":"J","MMMM7":"July","MMM7":"Jul","NN7":"Ju","N7":"J","MMMM8":"August","MMM8":"Aug","NN8":"Au","N8":"A","MMMM9":"September","MMM9":"Sep","NN9":"Se","N9":"S","MMMM10":"October","MMM10":"Oct","NN10":"Oc","N10":"O","MMMM11":"November","MMM11":"Nov","NN11":"No","N11":"N","MMMM12":"December","MMM12":"Dec","NN12":"De","N12":"D","EEEE0":"Sunday","EEE0":"Sun","EE0":"Su","E0":"S","EEEE1":"Monday","EEE1":"Mon","EE1":"Mo","E1":"M","EEEE2":"Tuesday","EEE2":"Tue","EE2":"Tu","E2":"T","EEEE3":"Wednesday","EEE3":"Wed","EE3":"We","E3":"W","EEEE4":"Thursday","EEE4":"Thu","EE4":"Th","E4":"T","EEEE5":"Friday","EEE5":"Fri","EE5":"Fr","E5":"F","EEEE6":"Saturday","EEE6":"Sat","EE6":"Sa","E6":"S","ordinalChoice":"1#1st|2#2nd|3#3rd|21#21st|22#22nd|23#23rd|31#31st|#{num}th","a0":"AM","a1":"PM","azh0":"AM","azh1":"AM","azh2":"AM","azh3":"PM","azh4":"PM","azh5":"PM","azh6":"PM","G-1":"BCE","G1":"CE","separatorFull":", ","finalSeparatorFull":", and ","separatorShort":" ","separatorMedium":" ","separatorLong":", ","N1-hebrew":"N","N2-hebrew":"I","N3-hebrew":"S","N4-hebrew":"T","N5-hebrew":"A","N6-hebrew":"E","N7-hebrew":"T","N8-hebrew":"á¸¤","N9-hebrew":"K","N10-hebrew":"T","N11-hebrew":"S","N12-hebrew":"A","N13-hebrew":"A","NN1-hebrew":"Ni","NN2-hebrew":"Iy","NN3-hebrew":"Si","NN4-hebrew":"Ta","NN5-hebrew":"Av","NN6-hebrew":"El","NN7-hebrew":"Ti","NN8-hebrew":"á¸¤e","NN9-hebrew":"Ki","NN10-hebrew":"Te","NN11-hebrew":"Sh","NN12-hebrew":"Ad","NN13-hebrew":"A2","MMM1-hebrew":"Nis","MMM2-hebrew":"Iyy","MMM3-hebrew":"Siv","MMM4-hebrew":"Tam","MMM5-hebrew":"Av","MMM6-hebrew":"Elu","MMM7-hebrew":"Tis","MMM8-hebrew":"á¸¤es","MMM9-hebrew":"Kis","MMM10-hebrew":"Tev","MMM11-hebrew":"She","MMM12-hebrew":"Ada","MMM13-hebrew":"Ad2","MMMM1-hebrew":"Nisan","MMMM2-hebrew":"Iyyar","MMMM3-hebrew":"Sivan","MMMM4-hebrew":"Tammuz","MMMM5-hebrew":"Av","MMMM6-hebrew":"Elul","MMMM7-hebrew":"Tishri","MMMM8-hebrew":"á¸¤eshvan","MMMM9-hebrew":"Kislev","MMMM10-hebrew":"Teveth","MMMM11-hebrew":"Shevat","MMMM12-hebrew":"Adar","MMMM13-hebrew":"Adar II","E0-hebrew":"R","E1-hebrew":"S","E2-hebrew":"S","E3-hebrew":"R","E4-hebrew":"á¸¤","E5-hebrew":"S","E6-hebrew":"S","EE0-hebrew":"ri","EE1-hebrew":"se","EE2-hebrew":"sl","EE3-hebrew":"rv","EE4-hebrew":"á¸¥a","EE5-hebrew":"si","EE6-hebrew":"sa","EEE0-hebrew":"ris","EEE1-hebrew":"she","EEE2-hebrew":"shl","EEE3-hebrew":"rvi","EEE4-hebrew":"á¸¥am","EEE5-hebrew":"shi","EEE6-hebrew":"sha","EEEE0-hebrew":"yom rishon","EEEE1-hebrew":"yom sheni","EEEE2-hebrew":"yom shlishi","EEEE3-hebrew":"yom r'viâi","EEEE4-hebrew":"yom á¸¥amishi","EEEE5-hebrew":"yom shishi","EEEE6-hebrew":"yom shabbat","N1-islamic":"M","N2-islamic":"á¹¢","N3-islamic":"R","N4-islamic":"R","N5-islamic":"J","N6-islamic":"J","N7-islamic":"R","N8-islamic":"Å ","N9-islamic":"R","N10-islamic":"Å ","N11-islamic":"Q","N12-islamic":"á¸¤","NN1-islamic":"Mu","NN2-islamic":"á¹¢a","NN3-islamic":"Rb","NN4-islamic":"R2","NN5-islamic":"Ju","NN6-islamic":"J2","NN7-islamic":"Ra","NN8-islamic":"Å h","NN9-islamic":"Ra","NN10-islamic":"Å a","NN11-islamic":"Qa","NN12-islamic":"á¸¤i","MMM1-islamic":"Muá¸¥","MMM2-islamic":"á¹¢af","MMM3-islamic":"Rab","MMM4-islamic":"Ra2","MMM5-islamic":"Jum","MMM6-islamic":"Ju2","MMM7-islamic":"Raj","MMM8-islamic":"Å ha","MMM9-islamic":"Ram","MMM10-islamic":"Å aw","MMM11-islamic":"Qad","MMM12-islamic":"á¸¤ij","MMMM1-islamic":"Muá¸¥arram","MMMM2-islamic":"á¹¢afar","MMMM3-islamic":"RabÄ«â I","MMMM4-islamic":"RabÄ«â II","MMMM5-islamic":"JumÄdÄ I","MMMM6-islamic":"JumÄdÄ II","MMMM7-islamic":"Rajab","MMMM8-islamic":"Å ha'bÄn","MMMM9-islamic":"Ramaá¸Än","MMMM10-islamic":"Å awwÄl","MMMM11-islamic":"á¸u al-Qaâda","MMMM12-islamic":"á¸u al-á¸¤ijja","E0-islamic":"A","E1-islamic":"I","E2-islamic":"T","E3-islamic":"A","E4-islamic":"K","E5-islamic":"J","E6-islamic":"S","EE0-islamic":"ah","EE1-islamic":"it","EE2-islamic":"th","EE3-islamic":"ar","EE4-islamic":"kh","EE5-islamic":"ju","EE6-islamic":"sa","EEE0-islamic":"aha","EEE1-islamic":"ith","EEE2-islamic":"tha","EEE3-islamic":"arb","EEE4-islamic":"kha","EEE5-islamic":"jum","EEE6-islamic":"sab","EEEE0-islamic":"yawn al-ahad","EEEE1-islamic":"yawn al-ithnaya","EEEE2-islamic":"yawn uth-thalathaa","EEEE3-islamic":"yawn al-arbaâa","EEEE4-islamic":"yawn al-khamis","EEEE5-islamic":"yawn al-jumâa","EEEE6-islamic":"yawn as-sabt","N1-persian":"F","N2-persian":"O","N3-persian":"K","N4-persian":"T","N5-persian":"M","N6-persian":"S","N7-persian":"M","N8-persian":"A","N9-persian":"A","N10-persian":"D","N11-persian":"B","N12-persian":"E","NN1-persian":"Fa","NN2-persian":"Or","NN3-persian":"Kh","NN4-persian":"Ti","NN5-persian":"Mo","NN6-persian":"Sh","NN7-persian":"Me","NN8-persian":"Ab","NN9-persian":"Az","NN10-persian":"De","NN11-persian":"Ba","NN12-persian":"Es","MMM1-persian":"Far","MMM2-persian":"Ord","MMM3-persian":"Kho","MMM4-persian":"Tir","MMM5-persian":"Mor","MMM6-persian":"Sha","MMM7-persian":"Meh","MMM8-persian":"Aba","MMM9-persian":"Aza","MMM10-persian":"Dey","MMM11-persian":"Bah","MMM12-persian":"Esf","MMMM1-persian":"Farvardin","MMMM2-persian":"Ordibehesht","MMMM3-persian":"Khordad","MMMM4-persian":"Tir","MMMM5-persian":"Mordad","MMMM6-persian":"Shahrivar","MMMM7-persian":"Mehr","MMMM8-persian":"Aban","MMMM9-persian":"Azar","MMMM10-persian":"Dey","MMMM11-persian":"Bahman","MMMM12-persian":"Esfand","EE0-persian":"Ye","EE1-persian":"Do","EE2-persian":"Se","EE3-persian":"Ch","EE4-persian":"Pa","EE5-persian":"Jo","EE6-persian":"Sh","EEE0-persian":"Yek","EEE1-persian":"Dos","EEE2-persian":"Ses","EEE3-persian":"Cha","EEE4-persian":"Pan","EEE5-persian":"Jom","EEE6-persian":"Sha","EEEE0-persian":"Yekshanbeh","EEEE1-persian":"Doshanbeh","EEEE2-persian":"Seshhanbeh","EEEE3-persian":"Chaharshanbeh","EEEE4-persian":"Panjshanbeh","EEEE5-persian":"Jomeh","EEEE6-persian":"Shanbeh","N1-persian-algo":"F","N2-persian-algo":"O","N3-persian-algo":"K","N4-persian-algo":"T","N5-persian-algo":"M","N6-persian-algo":"S","N7-persian-algo":"M","N8-persian-algo":"A","N9-persian-algo":"A","N10-persian-algo":"D","N11-persian-algo":"B","N12-persian-algo":"E","NN1-persian-algo":"Fa","NN2-persian-algo":"Or","NN3-persian-algo":"Kh","NN4-persian-algo":"Ti","NN5-persian-algo":"Mo","NN6-persian-algo":"Sh","NN7-persian-algo":"Me","NN8-persian-algo":"Ab","NN9-persian-algo":"Az","NN10-persian-algo":"De","NN11-persian-algo":"Ba","NN12-persian-algo":"Es","MMM1-persian-algo":"Far","MMM2-persian-algo":"Ord","MMM3-persian-algo":"Kho","MMM4-persian-algo":"Tir","MMM5-persian-algo":"Mor","MMM6-persian-algo":"Sha","MMM7-persian-algo":"Meh","MMM8-persian-algo":"Aba","MMM9-persian-algo":"Aza","MMM10-persian-algo":"Dey","MMM11-persian-algo":"Bah","MMM12-persian-algo":"Esf","MMMM1-persian-algo":"Farvardin","MMMM2-persian-algo":"Ordibehesht","MMMM3-persian-algo":"Khordad","MMMM4-persian-algo":"Tir","MMMM5-persian-algo":"Mordad","MMMM6-persian-algo":"Shahrivar","MMMM7-persian-algo":"Mehr","MMMM8-persian-algo":"Aban","MMMM9-persian-algo":"Azar","MMMM10-persian-algo":"Dey","MMMM11-persian-algo":"Bahman","MMMM12-persian-algo":"Esfand","EE0-persian-algo":"Ye","EE1-persian-algo":"Do","EE2-persian-algo":"Se","EE3-persian-algo":"Ch","EE4-persian-algo":"Pa","EE5-persian-algo":"Jo","EE6-persian-algo":"Sh","EEE0-persian-algo":"Yek","EEE1-persian-algo":"Dos","EEE2-persian-algo":"Ses","EEE3-persian-algo":"Cha","EEE4-persian-algo":"Pan","EEE5-persian-algo":"Jom","EEE6-persian-algo":"Sha","EEEE0-persian-algo":"Yekshanbeh","EEEE1-persian-algo":"Doshanbeh","EEEE2-persian-algo":"Seshhanbeh","EEEE3-persian-algo":"Chaharshanbeh","EEEE4-persian-algo":"Panjshanbeh","EEEE5-persian-algo":"Jomeh","EEEE6-persian-algo":"Shanbeh","M1-thaisolar":"M","M2-thaisolar":"K","M3-thaisolar":"M","M4-thaisolar":"M","M5-thaisolar":"P","M6-thaisolar":"M","M7-thaisolar":"K","M8-thaisolar":"S","M9-thaisolar":"K","M10-thaisolar":"T","M11-thaisolar":"P","M12-thaisolar":"T","MM1-thaisolar":"MaK","MM2-thaisolar":"KP","MM3-thaisolar":"MiK","MM4-thaisolar":"MY","MM5-thaisolar":"PK","MM6-thaisolar":"MY","MM7-thaisolar":"KK","MM8-thaisolar":"SK","MM9-thaisolar":"KY","MM10-thaisolar":"TuK","MM11-thaisolar":"PY","MM12-thaisolar":"ThK","MMM1-thaisolar":"Ma.K.","MMM2-thaisolar":"Ku.P.","MMM3-thaisolar":"Mi.K.","MMM4-thaisolar":"Me.Y.","MMM5-thaisolar":"Ph.K.","MMM6-thaisolar":"Mi.Y.","MMM7-thaisolar":"Ka.K.","MMM8-thaisolar":"Si.K.","MMM9-thaisolar":"Ka.Y.","MMM10-thaisolar":"Tu.K.","MMM11-thaisolar":"Ph.Y.","MMM12-thaisolar":"Th.K.","MMMM1-thaisolar":"Makarakhom","MMMM2-thaisolar":"Kumphaphan","MMMM3-thaisolar":"Minakhom","MMMM4-thaisolar":"Mesayon","MMMM5-thaisolar":"Phruetsaphakhom","MMMM6-thaisolar":"Mithunayon","MMMM7-thaisolar":"Karakadakhom","MMMM8-thaisolar":"Singhakhom","MMMM9-thaisolar":"Kanyayon","MMMM10-thaisolar":"Tulakhom","MMMM11-thaisolar":"Phruetsachikayon","MMMM12-thaisolar":"Thanwakhom","E0-thaisolar":"A","E1-thaisolar":"C","E2-thaisolar":"A","E3-thaisolar":"P","E4-thaisolar":"P","E5-thaisolar":"S","E6-thaisolar":"S","EE0-thaisolar":"at","EE1-thaisolar":"ch","EE2-thaisolar":"an","EE3-thaisolar":"pu","EE4-thaisolar":"pr","EE5-thaisolar":"su","EE6-thaisolar":"sa","EEE0-thaisolar":"ath","EEE1-thaisolar":"cha","EEE2-thaisolar":"ang","EEE3-thaisolar":"phu","EEE4-thaisolar":"phr","EEE5-thaisolar":"suk","EEE6-thaisolar":"sao","EEEE0-thaisolar":"wan athit","EEEE1-thaisolar":"wan chan","EEEE2-thaisolar":"wan angkhan","EEEE3-thaisolar":"wan phut","EEEE4-thaisolar":"wan phruehatsabodi","EEEE5-thaisolar":"wan suk","EEEE6-thaisolar":"wan sao"};
ilib.data.sysres_aa = {"generated":true,"NN1":"1","NN2":"2","NN3":"3","NN4":"4","NN5":"5","NN6":"6","NN7":"7","NN8":"8","NN9":"9","NN10":"10","NN11":"11","NN12":"12","MMM1":"1","MMM2":"2","MMM3":"3","MMM4":"4","MMM5":"5","MMM6":"6","MMM7":"7","MMM8":"8","MMM9":"9","MMM10":"10","MMM11":"11","MMM12":"12","MMMM1":"1","MMMM2":"2","MMMM3":"3","MMMM4":"4","MMMM5":"5","MMMM6":"6","MMMM7":"7","MMMM8":"8","MMMM9":"9","MMMM10":"10","MMMM11":"11","MMMM12":"12","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"1","EE1":"2","EE2":"3","EE3":"4","EE4":"5","EE5":"6","EE6":"7","EEE0":"1","EEE1":"2","EEE2":"3","EEE3":"4","EEE4":"5","EEE5":"6","EEE6":"7","EEEE0":"1","EEEE1":"2","EEEE2":"3","EEEE3":"4","EEEE4":"5","EEEE5":"6","EEEE6":"7","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_af = {"N1":"J","N2":"F","N3":"M","N4":"A","N5":"M","N6":"J","N7":"J","N8":"A","N9":"S","N10":"O","N11":"N","N12":"D","NN1":"Ja","NN2":"Fe","NN3":"Ma","NN4":"Ap","NN5":"Me","NN6":"Ju","NN7":"Ju","NN8":"Au","NN9":"Se","NN10":"Ok","NN11":"No","NN12":"De","MMM1":"Jan","MMM2":"Feb","MMM3":"Mar","MMM4":"Apr","MMM5":"Mei","MMM6":"Jun","MMM7":"Jul","MMM8":"Aug","MMM9":"Sep","MMM10":"Okt","MMM11":"Nov","MMM12":"Des","MMMM1":"Januarie","MMMM2":"Februarie","MMMM3":"Maart","MMMM4":"April","MMMM5":"Mei","MMMM6":"Junie","MMMM7":"Julie","MMMM8":"Augustus","MMMM9":"September","MMMM10":"Oktober","MMMM11":"November","MMMM12":"Desember","E0":"S","E1":"M","E2":"D","E3":"W","E4":"D","E5":"V","E6":"S","EE0":"So","EE1":"Ma","EE2":"Di","EE3":"Wo","EE4":"Do","EE5":"Vr","EE6":"Sa","EEE0":"So","EEE1":"Ma","EEE2":"Di","EEE3":"Wo","EEE4":"Do","EEE5":"Vr","EEE6":"Sa","EEEE0":"Sondag","EEEE1":"Maandag","EEEE2":"Dinsdag","EEEE3":"Woensdag","EEEE4":"Donderdag","EEEE5":"Vrydag","EEEE6":"Saterdag","a0":"vm.","a1":"nm.","G-1":"v.C.","G1":"n.C.","in {duration}":"in {duration}","{duration} ago":"{duration} gelede","1#1 year|#{num} years":"#{num} jaar","1#1 month|#{num} months":"1#{num} maand|#{num} maande","1#1 week|#{num} weeks":"1#{num} week|#{num} weke","1#1 day|#{num} days":"1#{num} dag|#{num} dae","1#1 hour|#{num} hours":"#{num} uur","1#1 minute|#{num} minutes":"1#{num} minuut|#{num} minute","1#1 second|#{num} seconds":"1#{num} sekonde|#{num} sekondes","1#1 yr|#{num} yrs":"#{num} jr","1#1 mon|#{num} mons":"1#{num} mnd|#{num} mnde","1#1 wk|#{num} wks":"1#{num} week|#{num} weke","durationLongDays":"1#{num} dag|#{num} dae","1#1 hr|#{num} hrs":"#{num} uur","1#1 min|#{num} min":"#{num} min","1#1 sec|#{num} sec":"#{num} sek","durationMediumYears":"#{num} jr","1#1 mo|#{num} mos":"#{num} ma","durationMediumWeeks":"#{num} we","1#1 dy|#{num} dys":"#{num} da","durationMediumHours":"#{num} uu","1#1 mi|#{num} min":"#{num} mi","1#1 se|#{num} sec":"#{num} se","#{num}y":"#{num}j","durationShortMonths":"#{num}m","#{num}w":"#{num}w","#{num}d":"#{num}d","#{num}h":"#{num}u","durationShortMinutes":"#{num}m","#{num}s":"#{num}s","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" en ","durationShortMillis":"#{num}ms","#{num} ms":"#{num} ms"};
ilib.data.sysres_agq = {"generated":true,"NN1":"nÃ¹","NN2":"kÉ¨","NN3":"tÉ¨","NN4":"ta","NN5":"se","NN6":"nz","NN7":"du","NN8":"fÉ","NN9":"dz","NN10":"lÉ","NN11":"ka","NN12":"fw","MMM1":"nÃ¹m","MMM2":"kÉ¨z","MMM3":"tÉ¨d","MMM4":"taa","MMM5":"see","MMM6":"nzu","MMM7":"dum","MMM8":"fÉe","MMM9":"dzu","MMM10":"lÉm","MMM11":"kaa","MMM12":"fwo","MMMM1":"ndzÉÌÅÉÌnÃ¹m","MMMM2":"ndzÉÌÅÉÌkÆÌzÃ¹Ê","MMMM3":"ndzÉÌÅÉÌtÆÌdÊÌghÃ ","MMMM4":"ndzÉÌÅÉÌtÇafÊÌghÄ","MMMM5":"ndzÉÌÅÃ¨sÃ¨e","MMMM6":"ndzÉÌÅÉÌnzÃ¹ghÃ²","MMMM7":"ndzÉÌÅÉÌdÃ¹mlo","MMMM8":"ndzÉÌÅÉÌkwÃ®fÉÌe","MMMM9":"ndzÉÌÅÉÌtÆÌfÊÌghÃ dzughÃ¹","MMMM10":"ndzÉÌÅÉÌghÇuwelÉÌm","MMMM11":"ndzÉÌÅÉÌchwaÊÃ kaa wo","MMMM12":"ndzÉÌÅÃ¨fwÃ²o","E0":"n","E1":"k","E2":"g","E3":"t","E4":"u","E5":"g","E6":"d","EE0":"nt","EE1":"kp","EE2":"gh","EE3":"tÉ","EE4":"um","EE5":"gh","EE6":"dz","EEE0":"nts","EEE1":"kpa","EEE2":"ghÉ","EEE3":"tÉm","EEE4":"ume","EEE5":"ghÉ¨","EEE6":"dzk","EEEE0":"tsuÊntsÉ¨","EEEE1":"tsuÊukpÃ ","EEEE2":"tsuÊughÉe","EEEE3":"tsuÊutÉÌmlÃ²","EEEE4":"tsuÊumÃ¨","EEEE5":"tsuÊughÉ¨Ìm","EEEE6":"tsuÊndzÉ¨kÉÊÉ","a0":"a.g","a1":"a.k","G-1":"SK","G1":"BK","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_ak = {"generated":true,"NN1":"S-","NN2":"K-","NN3":"E-","NN4":"E-","NN5":"E-","NN6":"O-","NN7":"A-","NN8":"D-","NN9":"F-","NN10":"Æ-","NN11":"Æ-","NN12":"M-","MMM1":"S-Æ","MMM2":"K-Æ","MMM3":"E-Æ","MMM4":"E-O","MMM5":"E-K","MMM6":"O-A","MMM7":"A-K","MMM8":"D-Æ","MMM9":"F-Æ","MMM10":"Æ-A","MMM11":"Æ-O","MMM12":"M-Æ","MMMM1":"Sanda-ÆpÉpÉn","MMMM2":"Kwakwar-Ægyefuo","MMMM3":"EbÉw-Æbenem","MMMM4":"EbÉbira-Oforisuo","MMMM5":"Esusow Aketseaba-KÉtÉnimba","MMMM6":"Obirade-AyÉwohomumu","MMMM7":"AyÉwoho-Kitawonsa","MMMM8":"Difuu-Æsandaa","MMMM9":"Fankwa-ÆbÉ","MMMM10":"ÆbÉsÉ-Ahinime","MMMM11":"ÆberÉfÉw-Obubuo","MMMM12":"Mumu-ÆpÉnimba","E0":"K","E1":"D","E2":"B","E4":"Y","E6":"M","EE0":"Kw","EE1":"Dw","EE2":"Be","EE3":"Wu","EE4":"Ya","EE5":"Fi","EE6":"Me","EEE0":"Kwe","EEE1":"Dwo","EEE2":"Ben","EEE3":"Wuk","EEE4":"Yaw","EEE5":"Fia","EEE6":"Mem","EEEE0":"Kwesida","EEEE1":"Dwowda","EEEE2":"Benada","EEEE3":"Wukuda","EEEE4":"Yawda","EEEE5":"Fida","EEEE6":"Memeneda","a0":"AN","a1":"EW","G-1":"AK","G1":"KE","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_am = {"generated":true,"NN1":"áá","NN2":"áá¥","NN3":"áá­","NN4":"á¤á","NN5":"áá­","NN6":"áá","NN7":"áá","NN8":"á¦á","NN9":"á´á","NN10":"á¦á­","NN11":"áá¬","NN12":"á²á´","MMM1":"ááá©","MMM2":"áá¥á©","MMM3":"áá­á½","MMM4":"á¤ááª","MMM5":"áá­","MMM6":"áá","MMM7":"ááá­","MMM8":"á¦ááµ","MMM9":"á´áá´","MMM10":"á¦á­á°","MMM11":"áá¬á","MMM12":"á²á´á","MMMM1":"ááá©ááª","MMMM2":"áá¥á©ááª","MMMM3":"áá­á½","MMMM4":"á¤ááªá","MMMM5":"áá­","MMMM6":"áá","MMMM7":"ááá­","MMMM8":"á¦ááµáµ","MMMM9":"á´áá´áá á­","MMMM10":"á¦á­á°áá á­","MMMM11":"áá¬áá á­","MMMM12":"á²á´áá á­","E0":"á¥","E1":"á°","E2":"á","E3":"á¨","E4":"á","E5":"á","E6":"á","EE0":"á¥","EE1":"á°","EE2":"á","EE3":"á¨","EE4":"á","EE5":"á","EE6":"á","EEE0":"á¥ááµ","EEE1":"á°á","EEE2":"áá­á°","EEE3":"á¨á¡á","EEE4":"áááµ","EEE5":"áá­á¥","EEE6":"áá³á","EEEE0":"á¥ááµ","EEEE1":"á°á","EEEE2":"áá­á°á","EEEE3":"á¨á¡á","EEEE4":"áááµ","EEEE5":"áá­á¥","EEEE6":"áá³á","a0":"á¥ááµ","a1":"á¨á°ááµ","G-1":"á/á","G1":"á/á","#{num}s":"#{num}á°","1#1 se|#{num} sec":"#{num} á°á¨","1#1 sec|#{num} sec":"#{num} á°á¨á","1#1 second|#{num} seconds":"#{num} á°á¨áá¶á½","durationShortMinutes":"#{num}á°","1#1 mi|#{num} min":"#{num} á°á","1#1 min|#{num} min":"#{num} á°áá","1#1 minute|#{num} minutes":"#{num} á°áááá½","#{num}h":"#{num}á°","durationMediumHours":"one#{num} á°ááµ|#{num} á°á","1#1 hr|#{num} hrs":"#{num} á°áá¶á½","1#1 hour|#{num} hours":"#{num} á°áá¶á½","#{num}d":"#{num}á","1#1 dy|#{num} dys":"#{num} áááµ","durationLongDays":"#{num} áááµ","1#1 day|#{num} days":"#{num} áááµ","#{num}w":"#{num}á³","durationMediumWeeks":"#{num} á³á","1#1 wk|#{num} wks":"#{num} á³áá","1#1 week|#{num} weeks":"#{num} á³ááá³áµ","durationShortMonths":"#{num}á","1#1 mo|#{num} mos":"#{num} áá«áµ","1#1 mon|#{num} mons":"#{num} áá«áµ","1#1 month|#{num} months":"#{num} áá«áµ","#{num}y":"#{num}á","durationMediumYears":"#{num} áá","1#1 yr|#{num} yrs":"#{num} ááá³áµ","1#1 year|#{num} years":"#{num} ááá³áµ","{duration} ago":"á¨{duration} á ááµ","in {duration}":"á  {duration} ááµá¥","separatorFull":"á£ ","finalSeparatorFull":", á¥á ","separatorLong":" "};
ilib.data.sysres_ar = {"N1":"Ù","N2":"Ù","N3":"Ù","N4":"Ø£","N5":"Ù","N6":"Ù","N7":"Ù","N8":"Øº","N9":"Ø³","N10":"Ù","N11":"Ø¨","N12":"Ø¯","NN1":"ÙÙØ§ÙØ±","NN2":"ÙØ¨Ø±Ø§ÙØ±","NN3":"ÙØ§Ø±Ø³","NN4":"Ø£Ø¨Ø±ÙÙ","NN5":"ÙØ§ÙÙ","NN6":"ÙÙÙÙÙ","NN7":"ÙÙÙÙÙ","NN8":"Ø£ØºØ³Ø·Ø³","NN9":"Ø³Ø¨ØªÙØ¨Ø±","NN10":"Ø£ÙØªÙØ¨Ø±","NN11":"ÙÙÙÙØ¨Ø±","NN12":"Ø¯ÙØ³ÙØ¨Ø±","MMM1":"ÙÙØ§ÙØ±","MMM2":"ÙØ¨Ø±Ø§ÙØ±","MMM3":"ÙØ§Ø±Ø³","MMM4":"Ø£Ø¨Ø±ÙÙ","MMM5":"ÙØ§ÙÙ","MMM6":"ÙÙÙÙÙ","MMM7":"ÙÙÙÙÙ","MMM8":"Ø£ØºØ³Ø·Ø³","MMM9":"Ø³Ø¨ØªÙØ¨Ø±","MMM10":"Ø£ÙØªÙØ¨Ø±","MMM11":"ÙÙÙÙØ¨Ø±","MMM12":"Ø¯ÙØ³ÙØ¨Ø±","MMMM1":"ÙÙØ§ÙØ±","MMMM2":"ÙØ¨Ø±Ø§ÙØ±","MMMM3":"ÙØ§Ø±Ø³","MMMM4":"Ø£Ø¨Ø±ÙÙ","MMMM5":"ÙØ§ÙÙ","MMMM6":"ÙÙÙÙÙ","MMMM7":"ÙÙÙÙÙ","MMMM8":"Ø£ØºØ³Ø·Ø³","MMMM9":"Ø³Ø¨ØªÙØ¨Ø±","MMMM10":"Ø£ÙØªÙØ¨Ø±","MMMM11":"ÙÙÙÙØ¨Ø±","MMMM12":"Ø¯ÙØ³ÙØ¨Ø±","E0":"Ø­","E1":"Ù","E2":"Ø«","E3":"Ø±","E4":"Ø®","E5":"Ø¬","E6":"Ø³","EE0":"Ø§ÙØ£Ø­Ø¯","EE1":"Ø§ÙØ§Ø«ÙÙÙ","EE2":"Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","EE3":"Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","EE4":"Ø§ÙØ®ÙÙØ³","EE5":"Ø§ÙØ¬ÙØ¹Ø©","EE6":"Ø§ÙØ³Ø¨Øª","EEE0":"Ø§ÙØ£Ø­Ø¯","EEE1":"Ø§ÙØ§Ø«ÙÙÙ","EEE2":"Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","EEE3":"Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","EEE4":"Ø§ÙØ®ÙÙØ³","EEE5":"Ø§ÙØ¬ÙØ¹Ø©","EEE6":"Ø§ÙØ³Ø¨Øª","EEEE0":"Ø§ÙØ£Ø­Ø¯","EEEE1":"Ø§ÙØ§Ø«ÙÙÙ","EEEE2":"Ø§ÙØ«ÙØ§Ø«Ø§Ø¡","EEEE3":"Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡","EEEE4":"Ø§ÙØ®ÙÙØ³","EEEE5":"Ø§ÙØ¬ÙØ¹Ø©","EEEE6":"Ø§ÙØ³Ø¨Øª","a0":"Øµ","a1":"Ù","G-1":"Ù.Ù","G1":"Ù","in {duration}":"Ø®ÙØ§Ù {0} ÙÙ Ø§ÙØ£ÙØ§Ù","{duration} ago":"ÙØ¨Ù {0} ÙÙ Ø§ÙØ£ÙØ§Ù","#{num}s":"zero#ÙØ§ Ø«ÙØ§Ù|one#Ø«Ø§ÙÙØ©|two#Ø«Ø§ÙÙØªØ§Ù|few#{num} Ø«ÙØ§Ù|#{num} Ø«Ø§ÙÙØ©","1#1 se|#{num} sec":"zero#ÙØ§ Ø«ÙØ§Ù|one#Ø«Ø§ÙÙØ©|two#Ø«Ø§ÙÙØªØ§Ù|few#{num} Ø«ÙØ§Ù|#{num} Ø«Ø§ÙÙØ©","1#1 sec|#{num} sec":"zero#ÙØ§ Ø«ÙØ§Ù|one#Ø«Ø§ÙÙØ©|two#Ø«Ø§ÙÙØªØ§Ù|few#{num} Ø«ÙØ§Ù|#{num} Ø«Ø§ÙÙØ©","1#1 second|#{num} seconds":"zero#ÙØ§ Ø«ÙØ§Ù|one#Ø«Ø§ÙÙØ©|two#Ø«Ø§ÙÙØªØ§Ù|few#{num} Ø«ÙØ§Ù|#{num} Ø«Ø§ÙÙØ©","durationShortMinutes":"zero#ÙØ§ Ø¯ÙØ§Ø¦Ù|one#Ø¯ÙÙÙØ©|two#Ø¯ÙÙÙØªØ§Ù|few#{num} Ø¯ÙØ§Ø¦Ù|#{num} Ø¯ÙÙÙØ©","1#1 mi|#{num} min":"zero#ÙØ§ Ø¯ÙØ§Ø¦Ù|one#Ø¯ÙÙÙØ©|two#Ø¯ÙÙÙØªØ§Ù|few#{num} Ø¯ÙØ§Ø¦Ù|#{num} Ø¯ÙÙÙØ©","1#1 min|#{num} min":"zero#ÙØ§ Ø¯ÙØ§Ø¦Ù|one#Ø¯ÙÙÙØ©|two#Ø¯ÙÙÙØªØ§Ù|few#{num} Ø¯ÙØ§Ø¦Ù|#{num} Ø¯ÙÙÙØ©","1#1 minute|#{num} minutes":"zero#ÙØ§ Ø¯ÙØ§Ø¦Ù|one#Ø¯ÙÙÙØ©|two#Ø¯ÙÙÙØªØ§Ù|few#{num} Ø¯ÙØ§Ø¦Ù|#{num} Ø¯ÙÙÙØ©","#{num}h":"zero#ÙØ§ Ø³Ø§Ø¹Ø§Øª|one#Ø³Ø§Ø¹Ø©|two#Ø³Ø§Ø¹ØªØ§Ù|few#{num} Ø³Ø§Ø¹Ø§Øª|#{num} Ø³Ø§Ø¹Ø©","durationMediumHours":"zero#ÙØ§ Ø³Ø§Ø¹Ø§Øª|one#Ø³Ø§Ø¹Ø©|two#Ø³Ø§Ø¹ØªØ§Ù|few#{num} Ø³Ø§Ø¹Ø§Øª|#{num} Ø³Ø§Ø¹Ø©","1#1 hr|#{num} hrs":"zero#ÙØ§ Ø³Ø§Ø¹Ø§Øª|one#Ø³Ø§Ø¹Ø©|two#Ø³Ø§Ø¹ØªØ§Ù|few#{num} Ø³Ø§Ø¹Ø§Øª|#{num} Ø³Ø§Ø¹Ø©","1#1 hour|#{num} hours":"zero#ÙØ§ Ø³Ø§Ø¹Ø§Øª|one#Ø³Ø§Ø¹Ø©|two#Ø³Ø§Ø¹ØªØ§Ù|few#{num} Ø³Ø§Ø¹Ø§Øª|#{num} Ø³Ø§Ø¹Ø©","#{num}d":"one#ÙÙÙ|two#ÙÙÙØ§Ù|few#{num} Ø£ÙØ§Ù|#{num} ÙÙÙ","1#1 dy|#{num} dys":"one#ÙÙÙ|two#ÙÙÙØ§Ù|few#{num} Ø£ÙØ§Ù|#{num} ÙÙÙ","durationLongDays":"one#ÙÙÙ|two#ÙÙÙØ§Ù|few#{num} Ø£ÙØ§Ù|#{num} ÙÙÙ","1#1 day|#{num} days":"one#ÙÙÙ|two#ÙÙÙØ§Ù|few#{num} Ø£ÙØ§Ù|#{num} ÙÙÙ","#{num}w":"zero#ÙØ§ Ø£Ø³Ø§Ø¨ÙØ¹|one#Ø£Ø³Ø¨ÙØ¹|two#Ø£Ø³Ø¨ÙØ¹Ø§Ù|few#{num} Ø£Ø³Ø§Ø¨ÙØ¹|#{num} Ø£Ø³Ø¨ÙØ¹","durationMediumWeeks":"zero#ÙØ§ Ø£Ø³Ø§Ø¨ÙØ¹|one#Ø£Ø³Ø¨ÙØ¹|two#Ø£Ø³Ø¨ÙØ¹Ø§Ù|few#{num} Ø£Ø³Ø§Ø¨ÙØ¹|#{num} Ø£Ø³Ø¨ÙØ¹","1#1 wk|#{num} wks":"zero#ÙØ§ Ø£Ø³Ø§Ø¨ÙØ¹|one#Ø£Ø³Ø¨ÙØ¹|two#Ø£Ø³Ø¨ÙØ¹Ø§Ù|few#{num} Ø£Ø³Ø§Ø¨ÙØ¹|#{num} Ø£Ø³Ø¨ÙØ¹","1#1 week|#{num} weeks":"zero#ÙØ§ Ø£Ø³Ø§Ø¨ÙØ¹|one#Ø£Ø³Ø¨ÙØ¹|two#Ø£Ø³Ø¨ÙØ¹Ø§Ù|few#{num} Ø£Ø³Ø§Ø¨ÙØ¹|#{num} Ø£Ø³Ø¨ÙØ¹","durationShortMonths":"zero#ÙØ§ Ø£Ø´ÙØ±|one#Ø´ÙØ±|two#Ø´ÙØ±Ø§Ù|few#{num} Ø£Ø´ÙØ±|#{num} Ø´ÙØ±","1#1 mo|#{num} mos":"zero#ÙØ§ Ø£Ø´ÙØ±|one#Ø´ÙØ±|two#Ø´ÙØ±Ø§Ù|few#{num} Ø£Ø´ÙØ±|#{num} Ø´ÙØ±","1#1 mon|#{num} mons":"zero#ÙØ§ Ø£Ø´ÙØ±|one#Ø´ÙØ±|two#Ø´ÙØ±Ø§Ù|few#{num} Ø£Ø´ÙØ±|#{num} Ø´ÙØ±","1#1 month|#{num} months":"zero#ÙØ§ Ø£Ø´ÙØ±|one#Ø´ÙØ±|two#Ø´ÙØ±Ø§Ù|few#{num} Ø£Ø´ÙØ±|#{num} Ø´ÙØ±","#{num}y":"zero#ÙØ§ Ø³ÙÙØ§Øª|one#Ø³ÙØ©|two#Ø³ÙØªØ§Ù|few#{num} Ø³ÙÙØ§Øª|#{num} Ø³ÙØ©","durationMediumYears":"zero#ÙØ§ Ø³ÙÙØ§Øª|one#Ø³ÙØ©|two#Ø³ÙØªØ§Ù|few#{num} Ø³ÙÙØ§Øª|#{num} Ø³ÙØ©","1#1 yr|#{num} yrs":"zero#ÙØ§ Ø³ÙÙØ§Øª|one#Ø³ÙØ©|two#Ø³ÙØªØ§Ù|few#{num} Ø³ÙÙØ§Øª|#{num} Ø³ÙØ©","1#1 year|#{num} years":"zero#ÙØ§ Ø³ÙÙØ§Øª|one#Ø³ÙØ©|two#Ø³ÙØªØ§Ù|few#{num} Ø³ÙÙØ§Øª|#{num} Ø³ÙØ©","separatorLong":" ","separatorFull":"Ø ","finalSeparatorFull":"Ø Ù "};
ilib.data.sysres_ar_DZ = {"NN1":"Ø¬Ø§ÙÙÙ","NN2":"ÙÙÙØ±Ù","NN4":"Ø£ÙØ±ÙÙ","NN5":"ÙØ§Ù","NN6":"Ø¬ÙØ§Ù","NN7":"Ø¬ÙÙÙÙØ©","NN8":"Ø£ÙØª","MMM1":"Ø¬Ø§ÙÙÙ","MMM2":"ÙÙÙØ±Ù","MMM4":"Ø£ÙØ±ÙÙ","MMM5":"ÙØ§Ù","MMM6":"Ø¬ÙØ§Ù","MMM7":"Ø¬ÙÙÙÙØ©","MMM8":"Ø£ÙØª","MMMM1":"Ø¬Ø§ÙÙÙ","MMMM2":"ÙÙÙØ±Ù","MMMM4":"Ø£ÙØ±ÙÙ","MMMM5":"ÙØ§Ù","MMMM6":"Ø¬ÙØ§Ù","MMMM7":"Ø¬ÙÙÙÙØ©","MMMM8":"Ø£ÙØª"};
ilib.data.sysres_ar_IQ = {"NN1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","NN2":"Ø´Ø¨Ø§Ø·","NN3":"Ø¢Ø°Ø§Ø±","NN4":"ÙÙØ³Ø§Ù","NN5":"Ø£ÙØ§Ø±","NN6":"Ø­Ø²ÙØ±Ø§Ù","NN7":"ØªÙÙØ²","NN8":"Ø¢Ø¨","NN9":"Ø£ÙÙÙÙ","NN10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","NN11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","NN12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ","MMM1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","MMM2":"Ø´Ø¨Ø§Ø·","MMM3":"Ø¢Ø°Ø§Ø±","MMM4":"ÙÙØ³Ø§Ù","MMM5":"Ø£ÙØ§Ø±","MMM6":"Ø­Ø²ÙØ±Ø§Ù","MMM7":"ØªÙÙØ²","MMM8":"Ø¢Ø¨","MMM9":"Ø£ÙÙÙÙ","MMM10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","MMM11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","MMM12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ","MMMM1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","MMMM2":"Ø´Ø¨Ø§Ø·","MMMM3":"Ø¢Ø°Ø§Ø±","MMMM4":"ÙÙØ³Ø§Ù","MMMM5":"Ø£ÙØ§Ø±","MMMM6":"Ø­Ø²ÙØ±Ø§Ù","MMMM7":"ØªÙÙØ²","MMMM8":"Ø¢Ø¨","MMMM9":"Ø£ÙÙÙÙ","MMMM10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","MMMM11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","MMMM12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"};
ilib.data.sysres_ar_JO = {"NN1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","NN2":"Ø´Ø¨Ø§Ø·","NN3":"Ø¢Ø°Ø§Ø±","NN4":"ÙÙØ³Ø§Ù","NN5":"Ø£ÙØ§Ø±","NN6":"Ø­Ø²ÙØ±Ø§Ù","NN7":"ØªÙÙØ²","NN8":"Ø¢Ø¨","NN9":"Ø£ÙÙÙÙ","NN10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","NN11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","NN12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ","MMM1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","MMM2":"Ø´Ø¨Ø§Ø·","MMM3":"Ø¢Ø°Ø§Ø±","MMM4":"ÙÙØ³Ø§Ù","MMM5":"Ø£ÙØ§Ø±","MMM6":"Ø­Ø²ÙØ±Ø§Ù","MMM7":"ØªÙÙØ²","MMM8":"Ø¢Ø¨","MMM9":"Ø£ÙÙÙÙ","MMM10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","MMM11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","MMM12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ","MMMM1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","MMMM2":"Ø´Ø¨Ø§Ø·","MMMM3":"Ø¢Ø°Ø§Ø±","MMMM4":"ÙÙØ³Ø§Ù","MMMM5":"Ø£ÙØ§Ø±","MMMM6":"Ø­Ø²ÙØ±Ø§Ù","MMMM7":"ØªÙÙØ²","MMMM8":"Ø¢Ø¨","MMMM9":"Ø£ÙÙÙÙ","MMMM10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","MMMM11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","MMMM12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"};
ilib.data.sysres_ar_LB = {"NN1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","NN2":"Ø´Ø¨Ø§Ø·","NN3":"Ø¢Ø°Ø§Ø±","NN4":"ÙÙØ³Ø§Ù","NN5":"Ø£ÙØ§Ø±","NN6":"Ø­Ø²ÙØ±Ø§Ù","NN7":"ØªÙÙØ²","NN8":"Ø¢Ø¨","NN9":"Ø£ÙÙÙÙ","NN10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","NN11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","NN12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ","MMM1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","MMM2":"Ø´Ø¨Ø§Ø·","MMM3":"Ø¢Ø°Ø§Ø±","MMM4":"ÙÙØ³Ø§Ù","MMM5":"Ø£ÙØ§Ø±","MMM6":"Ø­Ø²ÙØ±Ø§Ù","MMM7":"ØªÙÙØ²","MMM8":"Ø¢Ø¨","MMM9":"Ø£ÙÙÙÙ","MMM10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","MMM11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","MMM12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ","MMMM1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","MMMM2":"Ø´Ø¨Ø§Ø·","MMMM3":"Ø¢Ø°Ø§Ø±","MMMM4":"ÙÙØ³Ø§Ù","MMMM5":"Ø£ÙØ§Ø±","MMMM6":"Ø­Ø²ÙØ±Ø§Ù","MMMM7":"ØªÙÙØ²","MMMM8":"Ø¢Ø¨","MMMM9":"Ø£ÙÙÙÙ","MMMM10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","MMMM11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","MMMM12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"};
ilib.data.sysres_ar_MA = {"NN4":"Ø¥Ø¨Ø±ÙÙ","NN5":"ÙØ§Ù","NN8":"ØºØ´Øª","NN11":"ÙÙÙØ¨Ø±","MMM4":"Ø¥Ø¨Ø±ÙÙ","MMM5":"ÙØ§Ù","MMM8":"ØºØ´Øª","MMM11":"ÙÙÙØ¨Ø±","MMMM4":"Ø¥Ø¨Ø±ÙÙ","MMMM5":"ÙØ§Ù","MMMM8":"ØºØ´Øª","MMMM11":"ÙÙÙØ¨Ø±"};
ilib.data.sysres_ar_SY = {"NN1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","NN2":"Ø´Ø¨Ø§Ø·","NN3":"Ø¢Ø°Ø§Ø±","NN4":"ÙÙØ³Ø§Ù","NN5":"Ø£ÙØ§Ø±","NN6":"Ø­Ø²ÙØ±Ø§Ù","NN7":"ØªÙÙØ²","NN8":"Ø¢Ø¨","NN9":"Ø£ÙÙÙÙ","NN10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","NN11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","NN12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ","MMM1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","MMM2":"Ø´Ø¨Ø§Ø·","MMM3":"Ø¢Ø°Ø§Ø±","MMM4":"ÙÙØ³Ø§Ù","MMM5":"Ø£ÙØ§Ø±","MMM6":"Ø­Ø²ÙØ±Ø§Ù","MMM7":"ØªÙÙØ²","MMM8":"Ø¢Ø¨","MMM9":"Ø£ÙÙÙÙ","MMM10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","MMM11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","MMM12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ","MMMM1":"ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ","MMMM2":"Ø´Ø¨Ø§Ø·","MMMM3":"Ø¢Ø°Ø§Ø±","MMMM4":"ÙÙØ³Ø§Ù","MMMM5":"Ø£ÙØ§Ø±","MMMM6":"Ø­Ø²ÙØ±Ø§Ù","MMMM7":"ØªÙÙØ²","MMMM8":"Ø¢Ø¨","MMMM9":"Ø£ÙÙÙÙ","MMMM10":"ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ","MMMM11":"ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ","MMMM12":"ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ"};
ilib.data.sysres_ar_TN = {"NN1":"Ø¬Ø§ÙÙÙ","NN2":"ÙÙÙØ±Ù","NN4":"Ø£ÙØ±ÙÙ","NN5":"ÙØ§Ù","NN6":"Ø¬ÙØ§Ù","NN7":"Ø¬ÙÙÙÙØ©","NN8":"Ø£ÙØª","MMM1":"Ø¬Ø§ÙÙÙ","MMM2":"ÙÙÙØ±Ù","MMM5":"ÙØ§Ù","MMM4":"Ø£ÙØ±ÙÙ","MMM6":"Ø¬ÙØ§Ù","MMM7":"Ø¬ÙÙÙÙØ©","MMM8":"Ø£ÙØª","MMMM1":"Ø¬Ø§ÙÙÙ","MMMM2":"ÙÙÙØ±Ù","MMMM4":"Ø£ÙØ±ÙÙ","MMMM5":"ÙØ§Ù","MMMM6":"Ø¬ÙØ§Ù","MMMM7":"Ø¬ÙÙÙÙØ©","MMMM8":"Ø£ÙØª"};
ilib.data.sysres_asa = {"generated":true,"NN5":"Me","NN8":"Ag","NN10":"Ok","MMM3":"Mac","MMM5":"Mei","MMM8":"Ago","MMM10":"Okt","MMMM1":"Januari","MMMM2":"Februari","MMMM3":"Machi","MMMM4":"Aprili","MMMM5":"Mei","MMMM6":"Juni","MMMM7":"Julai","MMMM8":"Agosti","MMMM9":"Septemba","MMMM10":"Oktoba","MMMM11":"Novemba","MMMM12":"Desemba","E0":"J","E1":"J","E2":"J","E3":"J","E4":"A","E5":"I","E6":"J","EE0":"Jp","EE1":"Jt","EE2":"Jn","EE3":"Jt","EE4":"Al","EE5":"Ij","EE6":"Jm","EEE0":"Jpi","EEE1":"Jtt","EEE2":"Jnn","EEE3":"Jtn","EEE4":"Alh","EEE5":"Ijm","EEE6":"Jmo","EEEE0":"Jumapili","EEEE1":"Jumatatu","EEEE2":"Jumanne","EEEE3":"Jumatano","EEEE4":"Alhamisi","EEEE5":"Ijumaa","EEEE6":"Jumamosi","a0":"icheheavo","a1":"ichamthi","G-1":"KM","G1":"BM","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_as = {"generated":true,"NN1":"à¦à¦¾","NN2":"à¦«à§","NN3":"à¦®à¦¾","NN4":"à¦à¦ª","NN5":"à¦®à§","NN6":"à¦à§","NN7":"à¦à§","NN8":"à¦à¦","NN9":"à¦¸à§","NN10":"à¦à¦","NN11":"à¦¨à¦­","NN12":"à¦¡à¦¿","MMM1":"à¦à¦¾à¦¨à§","MMM2":"à¦«à§à¦¬à§à§°à§","MMM3":"à¦®à¦¾à§°à§à¦","MMM4":"à¦à¦ªà§à§°à¦¿à¦²","MMM5":"à¦®à§","MMM6":"à¦à§à¦¨","MMM7":"à¦à§à¦²à¦¾à¦","MMM8":"à¦à¦","MMM9":"à¦¸à§à¦ªà§à¦","MMM10":"à¦à¦à§à¦à§","MMM11":"à¦¨à¦­à§","MMM12":"à¦¡à¦¿à¦¸à§","MMMM1":"à¦à¦¾à¦¨à§à§±à¦¾à§°à§","MMMM2":"à¦«à§à¦¬à§à§°à§à§±à¦¾à§°à§","MMMM3":"à¦®à¦¾à§°à§à¦","MMMM4":"à¦à¦ªà§à§°à¦¿à¦²","MMMM5":"à¦®à§","MMMM6":"à¦à§à¦¨","MMMM7":"à¦à§à¦²à¦¾à¦","MMMM8":"à¦à¦à¦·à§à¦","MMMM9":"à¦à§à¦ªà§à¦¤à§à¦®à§à¦¬à§°","MMMM10":"à¦à¦à§à¦à§à¦¬à§°","MMMM11":"à¦¨à§±à§à¦®à§à¦¬à§°","MMMM12":"à¦¡à¦¿à¦à§à¦®à§à¦¬à§°","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"à§°à¦¬","EE1":"à¦¸à§","EE2":"à¦®à¦","EE3":"à¦¬à§","EE4":"à¦¬à§","EE5":"à¦¶à§","EE6":"à¦¶à¦¨","EEE0":"à§°à¦¬à¦¿","EEE1":"à¦¸à§à¦®","EEE2":"à¦®à¦à§à¦à¦²","EEE3":"à¦¬à§à¦§","EEE4":"à¦¬à§à¦¹à¦·à§à¦ªà¦¤à¦¿","EEE5":"à¦¶à§à¦à§à§°","EEE6":"à¦¶à¦¨à¦¿","EEEE0":"à¦¦à§à¦à¦¬à¦¾à§°","EEEE1":"à¦¸à§à¦®à¦¬à¦¾à§°","EEEE2":"à¦®à¦à§à¦à¦²à¦¬à¦¾à§°","EEEE3":"à¦¬à§à¦§à¦¬à¦¾à§°","EEEE4":"à¦¬à§à¦¹à¦·à§à¦ªà¦¤à¦¿à¦¬à¦¾à§°","EEEE5":"à¦¶à§à¦à§à§°à¦¬à¦¾à§°","EEEE6":"à¦¶à¦¨à¦¿à¦¬à¦¾à§°","a0":"à¦ªà§à§°à§à¦¬à¦¾à¦¹à§à¦£","a1":"à¦à¦ªà§°à¦¾à¦¹à§à¦£","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_az = {"generated":true,"NN1":"ya","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"ma","NN6":"iy","NN7":"iy","NN8":"av","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"yan","MMM2":"fev","MMM3":"mar","MMM4":"apr","MMM5":"may","MMM6":"iyn","MMM7":"iyl","MMM8":"avq","MMM9":"sen","MMM10":"okt","MMM11":"noy","MMM12":"dek","MMMM1":"Yanvar","MMMM2":"Fevral","MMMM3":"Mart","MMMM4":"Aprel","MMMM6":"Ä°yun","MMMM7":"Ä°yul","MMMM8":"Avqust","MMMM9":"Sentyabr","MMMM10":"Oktyabr","MMMM11":"Noyabr","MMMM12":"Dekabr","E0":"7","E1":"1","E2":"2","E3":"3","E4":"4","E5":"5","E6":"6","EE0":"B.","EE1":"B.","EE2":"Ã.","EE3":"Ã.","EE4":"C.","EE5":"C","EE6":"Å.","EEE0":"B.","EEE1":"B.E.","EEE2":"Ã.A.","EEE3":"Ã.","EEE4":"C.A.","EEE5":"C","EEE6":"Å.","EEEE0":"bazar","EEEE1":"bazar ertÉsi","EEEE2":"Ã§ÉrÅÉnbÉ axÅamÄ±","EEEE3":"Ã§ÉrÅÉnbÉ","EEEE4":"cÃ¼mÉ axÅamÄ±","EEEE5":"cÃ¼mÉ","EEEE6":"ÅÉnbÉ","G-1":"e.É.","G1":"b.e.","1#1 sec|#{num} sec":"#{num} san","1#1 second|#{num} seconds":"#{num} saniyÉ","durationShortMinutes":"#{num}d","1#1 min|#{num} min":"#{num} dÉq","1#1 minute|#{num} minutes":"#{num} dÉqiqÉ","#{num}h":"#{num}s","1#1 hr|#{num} hrs":"#{num} saat","1#1 hour|#{num} hours":"#{num} saat","#{num}d":"#{num}g","durationLongDays":"#{num} gÃ¼n","1#1 day|#{num} days":"#{num} gÃ¼n","#{num}w":"#{num}h","1#1 wk|#{num} wks":"#{num} hÉf","1#1 week|#{num} weeks":"#{num} hÉftÉ","durationShortMonths":"#{num}a","1#1 mon|#{num} mons":"#{num} ay","1#1 month|#{num} months":"#{num} ay","#{num}y":"#{num}i","1#1 yr|#{num} yrs":"#{num} il","1#1 year|#{num} years":"#{num} il","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_bas = {"generated":true,"NN1":"kÉ","NN2":"ma","NN3":"ma","NN4":"mt","NN5":"mp","NN6":"hi","NN7":"nj","NN8":"hi","NN9":"di","NN10":"bi","NN11":"ma","NN12":"li","MMM1":"kÉn","MMM2":"mac","MMM3":"mat","MMM4":"mto","MMM5":"mpu","MMM6":"hil","MMM7":"nje","MMM8":"hik","MMM9":"dip","MMM10":"bio","MMM11":"may","MMM12":"liÉ","MMMM1":"KÉndÉÅ","MMMM2":"MÃ cÉÌl","MMMM3":"MÃ tÃ¹mb","MMMM4":"MÃ top","MMMM5":"MÌpuyÉ","MMMM6":"HÃ¬lÃ²ndÉÌ","MMMM7":"NjÃ¨bÃ ","MMMM8":"HÃ¬kaÅ","MMMM9":"DÃ¬pÉÌs","MMMM10":"BÃ¬Ã²Ã´m","MMMM11":"MÃ yÉsÃ¨p","MMMM12":"LÃ¬buy li ÅyÃ¨e","E0":"n","E1":"n","E2":"u","E3":"Å","E4":"m","E5":"k","E6":"j","EE0":"nÉ","EE1":"nj","EE2":"uu","EE3":"Åg","EE4":"mb","EE5":"kÉ","EE6":"jo","EEE0":"nÉy","EEE1":"nja","EEE2":"uum","EEE3":"Åge","EEE4":"mbÉ","EEE5":"kÉÉ","EEE6":"jon","EEEE0":"ÅgwÃ  nÉÌy","EEEE1":"ÅgwÃ  njaÅgumba","EEEE2":"ÅgwÃ  Ã»m","EEEE3":"ÅgwÃ  ÅgÃª","EEEE4":"ÅgwÃ  mbÉk","EEEE5":"ÅgwÃ  kÉÉ","EEEE6":"ÅgwÃ  jÃ´n","a0":"I bikÉÌglÃ ","a1":"I ÉugajÉp","G-1":"b.Y.K","G1":"m.Y.K","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_be = {"generated":true,"NN1":"ÑÑ","NN2":"Ð»Ñ","NN3":"ÑÐ°","NN4":"ÐºÑ","NN5":"Ð¼Ð°","NN6":"ÑÑ","NN7":"Ð»Ñ","NN8":"Ð¶Ð½","NN9":"Ð²Ðµ","NN10":"ÐºÐ°","NN11":"Ð»Ñ","NN12":"ÑÐ½","MMM1":"ÑÑÑ","MMM2":"Ð»ÑÑ","MMM3":"ÑÐ°Ðº","MMM4":"ÐºÑÐ°","MMM5":"Ð¼Ð°Ð¹","MMM6":"ÑÑÑ","MMM7":"Ð»ÑÐ¿","MMM8":"Ð¶Ð½Ñ","MMM9":"Ð²ÐµÑ","MMM10":"ÐºÐ°Ñ","MMM11":"Ð»ÑÑ","MMM12":"ÑÐ½Ðµ","MMMM1":"ÑÑÑÐ´Ð·ÐµÐ½Ñ","MMMM2":"Ð»ÑÑÑ","MMMM3":"ÑÐ°ÐºÐ°Ð²ÑÐº","MMMM4":"ÐºÑÐ°ÑÐ°Ð²ÑÐº","MMMM5":"Ð¼Ð°Ð¹","MMMM6":"ÑÑÑÐ²ÐµÐ½Ñ","MMMM7":"Ð»ÑÐ¿ÐµÐ½Ñ","MMMM8":"Ð¶Ð½ÑÐ²ÐµÐ½Ñ","MMMM9":"Ð²ÐµÑÐ°ÑÐµÐ½Ñ","MMMM10":"ÐºÐ°ÑÑÑÑÑÐ½ÑÐº","MMMM11":"Ð»ÑÑÑÐ°Ð¿Ð°Ð´","MMMM12":"ÑÐ½ÐµÐ¶Ð°Ð½Ñ","E0":"Ð½","E1":"Ð¿","E2":"Ð°","E3":"Ñ","E4":"Ñ","E5":"Ð¿","E6":"Ñ","EE0":"Ð½Ð´","EE1":"Ð¿Ð½","EE2":"Ð°Ñ","EE3":"ÑÑ","EE4":"ÑÑ","EE5":"Ð¿Ñ","EE6":"ÑÐ±","EEE0":"Ð½Ð´","EEE1":"Ð¿Ð½","EEE2":"Ð°Ñ","EEE3":"ÑÑ","EEE4":"ÑÑ","EEE5":"Ð¿Ñ","EEE6":"ÑÐ±","EEEE0":"Ð½ÑÐ´Ð·ÐµÐ»Ñ","EEEE1":"Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº","EEEE2":"Ð°ÑÑÐ¾ÑÐ°Ðº","EEEE3":"ÑÐµÑÐ°Ð´Ð°","EEEE4":"ÑÐ°ÑÐ²ÐµÑ","EEEE5":"Ð¿ÑÑÐ½ÑÑÐ°","EEEE6":"ÑÑÐ±Ð¾ÑÐ°","a0":"Ð´Ð° Ð¿Ð°Ð»ÑÐ´Ð½Ñ","a1":"Ð¿Ð°ÑÐ»Ñ Ð¿Ð°Ð»ÑÐ´Ð½Ñ","G-1":"Ð´Ð° Ð½.Ñ.","G1":"Ð½.Ñ.","#{num}s":"#{num}Ñ","1#1 sec|#{num} sec":"#{num} ÑÑÐº","1#1 second|#{num} seconds":"one#{num} ÑÑÐºÑÐ½Ð´Ð°|many#{num} ÑÑÐºÑÐ½Ð´|#{num} ÑÑÐºÑÐ½Ð´Ñ","durationShortMinutes":"#{num}Ñ","1#1 min|#{num} min":"#{num} ÑÐ²Ñ","1#1 minute|#{num} minutes":"one#{num} ÑÐ²ÑÐ»ÑÐ½Ð°|many#{num} ÑÐ²ÑÐ»ÑÐ½|#{num} ÑÐ²ÑÐ»ÑÐ½Ñ","#{num}h":"#{num}Ð³","1#1 hr|#{num} hrs":"#{num} Ð³Ð°Ð´","1#1 hour|#{num} hours":"one#{num} Ð³Ð°Ð´Ð·ÑÐ½Ð°|many#{num} Ð³Ð°Ð´Ð·ÑÐ½|#{num} Ð³Ð°Ð´Ð·ÑÐ½Ñ","#{num}d":"#{num}Ð´","durationLongDays":"one#{num} Ð´Ð·Ðµ|few#{num} Ð´Ð½Ñ|many#{num} Ð´Ð·ÑÐ½|#{num} Ð´Ð½Ñ","1#1 day|#{num} days":"one#{num} Ð´Ð·ÐµÐ½Ñ|few#{num} Ð´Ð½Ñ|many#{num} Ð´Ð·ÑÐ½|#{num} Ð´Ð½Ñ","#{num}w":"#{num}Ñ","1#1 wk|#{num} wks":"#{num} ÑÑÐ´","1#1 week|#{num} weeks":"one#{num} ÑÑÐ´Ð·ÐµÐ½Ñ|few#{num} ÑÑÐ´Ð½Ñ|many#{num} ÑÑÐ´Ð½ÑÑ|#{num} ÑÑÐ´Ð½Ñ","durationShortMonths":"#{num}Ð¼","1#1 mon|#{num} mons":"#{num} Ð¼ÐµÑ","1#1 month|#{num} months":"one#{num} Ð¼ÐµÑÑÑ|many#{num} Ð¼ÐµÑÑÑÐ°Ñ|#{num} Ð¼ÐµÑÑÑÐ°","#{num}y":"#{num}Ð³","1#1 yr|#{num} yrs":"one#{num} Ð³Ð¾Ð´|few#{num} Ð³Ð°Ð´Ñ|many#{num} Ð³Ð°Ð´|#{num} Ð³Ð¾Ð´Ñ","1#1 year|#{num} years":"one#{num} Ð³Ð¾Ð´|few#{num} Ð³Ð°Ð´Ñ|many#{num} Ð³Ð°Ð´Ð¾Ñ|#{num} Ð³Ð¾Ð´Ñ","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_bem = {"generated":true,"NN4":"Ep","NN5":"Me","NN8":"Og","NN10":"Ok","NN12":"Di","MMM3":"Mac","MMM4":"Epr","MMM5":"Mei","MMM8":"Oga","MMM10":"Okt","MMM12":"Dis","MMMM1":"Januari","MMMM2":"Februari","MMMM3":"Machi","MMMM4":"Epreo","MMMM5":"Mei","MMMM6":"Juni","MMMM7":"Julai","MMMM8":"Ogasti","MMMM9":"Septemba","MMMM10":"Oktoba","MMMM11":"Novemba","MMMM12":"Disemba","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"Pa","EE1":"Pa","EE2":"Pa","EE3":"Pa","EE4":"Pa","EE5":"Pa","EE6":"Pa","EEE0":"Pa Mulungu","EEE1":"Palichimo","EEE2":"Palichibuli","EEE3":"Palichitatu","EEE4":"Palichine","EEE5":"Palichisano","EEE6":"Pachibelushi","EEEE0":"Pa Mulungu","EEEE1":"Palichimo","EEEE2":"Palichibuli","EEEE3":"Palichitatu","EEEE4":"Palichine","EEEE5":"Palichisano","EEEE6":"Pachibelushi","a0":"uluchelo","a1":"akasuba","G-1":"BC","G1":"AD","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_bg = {"generated":true,"NN1":"ÑÐ½","NN2":"ÑÐµ","NN3":"Ð¼Ð°","NN4":"Ð°Ð¿","NN5":"Ð¼Ð°","NN6":"ÑÐ½","NN7":"ÑÐ»","NN8":"Ð°Ð²","NN9":"ÑÐµ","NN10":"Ð¾Ðº","NN11":"Ð½Ð¾","NN12":"Ð´Ðµ","MMM1":"ÑÐ½.","MMM2":"ÑÐµÐ²Ñ.","MMM3":"Ð¼Ð°ÑÑ","MMM4":"Ð°Ð¿Ñ.","MMM5":"Ð¼Ð°Ð¹","MMM6":"ÑÐ½Ð¸","MMM7":"ÑÐ»Ð¸","MMM8":"Ð°Ð²Ð³.","MMM9":"ÑÐµÐ¿Ñ.","MMM10":"Ð¾ÐºÑ.","MMM11":"Ð½Ð¾ÐµÐ¼.","MMM12":"Ð´ÐµÐº.","MMMM1":"ÑÐ½ÑÐ°ÑÐ¸","MMMM2":"ÑÐµÐ²ÑÑÐ°ÑÐ¸","MMMM3":"Ð¼Ð°ÑÑ","MMMM4":"Ð°Ð¿ÑÐ¸Ð»","MMMM5":"Ð¼Ð°Ð¹","MMMM6":"ÑÐ½Ð¸","MMMM7":"ÑÐ»Ð¸","MMMM8":"Ð°Ð²Ð³ÑÑÑ","MMMM9":"ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸","MMMM10":"Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸","MMMM11":"Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸","MMMM12":"Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸","E0":"Ð½","E1":"Ð¿","E2":"Ð²","E3":"Ñ","E4":"Ñ","E5":"Ð¿","E6":"Ñ","EE0":"Ð½Ð´","EE1":"Ð¿Ð½","EE2":"Ð²Ñ","EE3":"ÑÑ","EE4":"ÑÑ","EE5":"Ð¿Ñ","EE6":"ÑÐ±","EEE0":"Ð½Ð´","EEE1":"Ð¿Ð½","EEE2":"Ð²Ñ","EEE3":"ÑÑ","EEE4":"ÑÑ","EEE5":"Ð¿Ñ","EEE6":"ÑÐ±","EEEE0":"Ð½ÐµÐ´ÐµÐ»Ñ","EEEE1":"Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº","EEEE2":"Ð²ÑÐ¾ÑÐ½Ð¸Ðº","EEEE3":"ÑÑÑÐ´Ð°","EEEE4":"ÑÐµÑÐ²ÑÑÑÑÐº","EEEE5":"Ð¿ÐµÑÑÐº","EEEE6":"ÑÑÐ±Ð¾ÑÐ°","a0":"Ð¿Ñ. Ð¾Ð±.","a1":"ÑÐ». Ð¾Ð±.","G-1":"Ð¿Ñ. Ð½. Ðµ.","G1":"Ð¾Ñ Ð½. Ðµ.","#{num}s":"#{num}Ñ","1#1 se|#{num} sec":"#{num} ÑÐµÐº","1#1 sec|#{num} sec":"#{num} ÑÐµÐº","1#1 second|#{num} seconds":"one#{num} ÑÐµÐºÑÐ½Ð´Ð°|#{num} ÑÐµÐºÑÐ½Ð´Ð¸","durationShortMinutes":"#{num}Ð¼","1#1 mi|#{num} min":"#{num} Ð¼Ð¸Ð½","1#1 min|#{num} min":"#{num} Ð¼Ð¸Ð½","1#1 minute|#{num} minutes":"one#{num} Ð¼Ð¸Ð½ÑÑÐ°|#{num} Ð¼Ð¸Ð½ÑÑÐ¸","#{num}h":"#{num}Ñ","durationMediumHours":"one#{num} ÑÐ°Ñ|#{num} ÑÐ°","1#1 hr|#{num} hrs":"one#{num} ÑÐ°Ñ|#{num} ÑÐ°ÑÐ°","1#1 hour|#{num} hours":"one#{num} ÑÐ°Ñ|#{num} ÑÐ°ÑÐ°","#{num}d":"#{num}Ð´","1#1 dy|#{num} dys":"#{num} Ð´Ð½.","durationLongDays":"one#{num} Ð´ÐµÐ½|#{num} Ð´ÐµÐ½Ð°","1#1 day|#{num} days":"one#{num} Ð´ÐµÐ½|#{num} Ð´ÐµÐ½Ð°","#{num}w":"#{num}Ñ","durationMediumWeeks":"#{num} ÑÐµ","1#1 wk|#{num} wks":"#{num} ÑÐµÐ´","1#1 week|#{num} weeks":"one#{num} ÑÐµÐ´Ð¼Ð¸ÑÐ°|#{num} ÑÐµÐ´Ð¼Ð¸ÑÐ¸","durationShortMonths":"#{num}Ð¼","1#1 mo|#{num} mos":"#{num} Ð¼Ðµ","1#1 mon|#{num} mons":"#{num} Ð¼ÐµÑ","1#1 month|#{num} months":"one#{num} Ð¼ÐµÑÐµÑ|#{num} Ð¼ÐµÑÐµÑÐ°","#{num}y":"#{num}Ð³","durationMediumYears":"#{num} Ð³Ð¾","1#1 yr|#{num} yrs":"#{num} Ð³Ð¾Ð´","1#1 year|#{num} years":"one#{num} Ð³Ð¾Ð´Ð¸Ð½Ð°|#{num} Ð³Ð¾Ð´Ð¸Ð½Ð¸","{duration} ago":"Ð¿ÑÐµÐ´Ð¸ {duration}","in {duration}":"+{duration}","finalSeparatorFull":" Ð¸ ","separatorLong":" "};
ilib.data.sysres_bm = {"generated":true,"NN1":"za","NN2":"fe","NN3":"ma","NN4":"aw","NN5":"mÉ","NN6":"zu","NN7":"zu","NN8":"ut","NN9":"sÉ","NN10":"Ék","NN11":"no","NN12":"de","MMM1":"zan","MMM2":"feb","MMM3":"mar","MMM4":"awi","MMM5":"mÉ","MMM6":"zuw","MMM7":"zul","MMM8":"uti","MMM9":"sÉt","MMM10":"Éku","MMM11":"now","MMM12":"des","MMMM1":"zanwuye","MMMM2":"feburuye","MMMM3":"marisi","MMMM4":"awirili","MMMM5":"mÉ","MMMM6":"zuwÉn","MMMM7":"zuluye","MMMM8":"uti","MMMM9":"sÉtanburu","MMMM10":"ÉkutÉburu","MMMM11":"nowanburu","MMMM12":"desanburu","E0":"K","E1":"N","E3":"A","E4":"A","E5":"J","EE0":"ka","EE1":"nt","EE2":"ta","EE3":"ar","EE4":"al","EE5":"ju","EE6":"si","EEE0":"kar","EEE1":"ntÉ","EEE2":"tar","EEE3":"ara","EEE4":"ala","EEE5":"jum","EEE6":"sib","EEEE0":"kari","EEEE1":"ntÉnÉ","EEEE2":"tarata","EEEE3":"araba","EEEE4":"alamisa","EEEE5":"juma","EEEE6":"sibiri","G-1":"J.-C. É²É","G1":"ni J.-C.","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_bn = {"generated":true,"NN1":"à¦à¦¾","NN2":"à¦«à§","NN3":"à¦®à¦¾","NN4":"à¦à¦ª","NN5":"à¦®à§","NN6":"à¦à§","NN7":"à¦à§","NN8":"à¦à¦","NN9":"à¦¸à§","NN10":"à¦à¦","NN11":"à¦¨à¦­","NN12":"à¦¡à¦¿","MMM1":"à¦à¦¾à¦¨à§à¦¯à¦¼à¦¾à¦°à§","MMM2":"à¦«à§à¦¬à§à¦°à§à¦¯à¦¼à¦¾à¦°à§","MMM3":"à¦®à¦¾à¦°à§à¦","MMM4":"à¦à¦ªà§à¦°à¦¿à¦²","MMM5":"à¦®à§","MMM6":"à¦à§à¦¨","MMM7":"à¦à§à¦²à¦¾à¦","MMM8":"à¦à¦à¦¸à§à¦","MMM9":"à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°","MMM10":"à¦à¦à§à¦à§à¦¬à¦°","MMM11":"à¦¨à¦­à§à¦®à§à¦¬à¦°","MMM12":"à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°","MMMM1":"à¦à¦¾à¦¨à§à¦¯à¦¼à¦¾à¦°à§","MMMM2":"à¦«à§à¦¬à§à¦°à§à¦¯à¦¼à¦¾à¦°à§","MMMM3":"à¦®à¦¾à¦°à§à¦","MMMM4":"à¦à¦ªà§à¦°à¦¿à¦²","MMMM5":"à¦®à§","MMMM6":"à¦à§à¦¨","MMMM7":"à¦à§à¦²à¦¾à¦","MMMM8":"à¦à¦à¦¸à§à¦","MMMM9":"à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°","MMMM10":"à¦à¦à§à¦à§à¦¬à¦°","MMMM11":"à¦¨à¦­à§à¦®à§à¦¬à¦°","MMMM12":"à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°","E0":"à¦°","E1":"à¦¸à§","E2":"à¦®","E3":"à¦¬à§","E4":"à¦¬à§","E5":"à¦¶à§","E6":"à¦¶","EE0":"à¦°à¦","EE1":"à¦¸à§","EE2":"à¦®à¦","EE3":"à¦¬à§","EE4":"à¦¬à§","EE5":"à¦¶à§","EE6":"à¦¶à§","EEE0":"à¦°à¦¬à¦¿","EEE1":"à¦¸à§à¦®","EEE2":"à¦®à¦à§à¦à¦²","EEE3":"à¦¬à§à¦§","EEE4":"à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿","EEE5":"à¦¶à§à¦à§à¦°","EEE6":"à¦¶à¦¨à¦¿","EEEE0":"à¦°à¦¬à¦¿à¦¬à¦¾à¦°","EEEE1":"à¦¸à§à¦®à¦¬à¦¾à¦°","EEEE2":"à¦®à¦à§à¦à¦²à¦¬à¦¾à¦°","EEEE3":"à¦¬à§à¦§à¦¬à¦¾à¦°","EEEE4":"à¦¬à§à¦¹à¦·à§à¦ªà¦¤à¦¿à¦¬à¦¾à¦°","EEEE5":"à¦¶à§à¦à§à¦°à¦¬à¦¾à¦°","EEEE6":"à¦¶à¦¨à¦¿à¦¬à¦¾à¦°","a0":"à¦ªà§à¦°à§à¦¬à¦¾à¦¹à§à¦£","a1":"à¦à¦ªà¦°à¦¾à¦¹à§à¦£","G-1":"à¦à§à¦·à§à¦à¦ªà§à¦°à§à¦¬","G1":"à¦à§à¦·à§à¦à¦¾à¦¬à§à¦¦","#{num}s":"#{num}à¦¸","1#1 se|#{num} sec":"#{num} à¦¸à§","1#1 sec|#{num} sec":"#{num} à¦¸à§à¦","1#1 second|#{num} seconds":"#{num} à¦¸à§à¦à§à¦¨à§à¦¡","durationShortMinutes":"#{num}à¦®","1#1 mi|#{num} min":"#{num} à¦®à¦¿","1#1 min|#{num} min":"#{num} à¦®à¦¿à¦¨","1#1 minute|#{num} minutes":"#{num} à¦®à¦¿à¦¨à¦¿à¦","#{num}h":"#{num}à¦","durationMediumHours":"#{num} à¦à¦¨","1#1 hr|#{num} hrs":"#{num} à¦à¦¨à§","1#1 hour|#{num} hours":"#{num} à¦à¦¨à§à¦à¦¾","#{num}d":"#{num}à¦¦","1#1 dy|#{num} dys":"#{num} à¦¦à¦¿à¦¨","durationLongDays":"#{num} à¦¦à¦¿à¦¨","1#1 day|#{num} days":"#{num} à¦¦à¦¿à¦¨","#{num}w":"#{num}à¦¸","durationMediumWeeks":"#{num} à¦¸à¦ª","1#1 wk|#{num} wks":"#{num} à¦¸à¦ªà§","1#1 week|#{num} weeks":"#{num} à¦¸à¦ªà§à¦¤à¦¾à¦¹","durationShortMonths":"#{num}à¦®","1#1 mo|#{num} mos":"#{num} à¦®à¦¾à¦¸","1#1 mon|#{num} mons":"#{num} à¦®à¦¾à¦¸","1#1 month|#{num} months":"#{num} à¦®à¦¾à¦¸","#{num}y":"#{num}à¦¬","durationMediumYears":"#{num} à¦¬à¦à¦°","1#1 yr|#{num} yrs":"#{num} à¦¬à¦à¦°","1#1 year|#{num} years":"#{num} à¦¬à¦à¦°","{duration} ago":"{duration} à¦ªà§à¦°à§à¦¬à§","in {duration}":"{duration}à§à¦° à¦®à¦§à§à¦¯à§","finalSeparatorFull":", à¦à¦¬à¦ ","separatorLong":" "};
ilib.data.sysres_br = {"generated":true,"NN1":"Ge","NN2":"CÊ¼","NN3":"Me","NN4":"Eb","NN6":"Me","NN7":"Go","NN8":"Eo","NN9":"Gw","NN10":"He","NN11":"Du","NN12":"Ke","MMM1":"Gen","MMM2":"CÊ¼hwe","MMM3":"Meur","MMM4":"Ebr","MMM5":"Mae","MMM6":"Mezh","MMM7":"Goue","MMM8":"Eost","MMM9":"Gwen","MMM10":"Here","MMM11":"Du","MMM12":"Ker","MMMM1":"Genver","MMMM2":"CÊ¼hwevrer","MMMM3":"Meurzh","MMMM4":"Ebrel","MMMM5":"Mae","MMMM6":"Mezheven","MMMM7":"Gouere","MMMM8":"Eost","MMMM9":"Gwengolo","MMMM10":"Here","MMMM11":"Du","MMMM12":"Kerzu","E0":"su","E1":"lu","E2":"mz","E3":"mc","E4":"ya","E5":"gw","E6":"sa","EE1":"Lu","EE2":"Me","EE3":"Me","EE4":"Ya","EE5":"Gw","EEE0":"Sul","EEE1":"Lun","EEE2":"Meu.","EEE3":"Mer.","EEE4":"Yaou","EEE5":"Gwe.","EEE6":"Sad.","EEEE0":"Sul","EEEE1":"Lun","EEEE2":"Meurzh","EEEE3":"MercÊ¼her","EEEE4":"Yaou","EEEE5":"Gwener","EEEE6":"Sadorn","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_bs = {"generated":true,"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"ma","NN6":"ju","NN7":"ju","NN8":"av","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jan","MMM2":"feb","MMM3":"mar","MMM4":"apr","MMM5":"maj","MMM6":"jun","MMM7":"jul","MMM8":"avg","MMM9":"sep","MMM10":"okt","MMM11":"nov","MMM12":"dec","MMMM1":"januar","MMMM2":"februar","MMMM3":"mart","MMMM4":"april","MMMM5":"maj","MMMM6":"juni","MMMM7":"juli","MMMM8":"avgust","MMMM9":"septembar","MMMM10":"oktobar","MMMM11":"novembar","MMMM12":"decembar","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"ne","EE1":"po","EE2":"ut","EE3":"sr","EE4":"Äe","EE5":"pe","EE6":"su","EEE0":"ned","EEE1":"pon","EEE2":"uto","EEE3":"sri","EEE4":"Äet","EEE5":"pet","EEE6":"sub","EEEE0":"nedjelja","EEEE1":"ponedjeljak","EEEE2":"utorak","EEEE3":"srijeda","EEEE4":"Äetvrtak","EEEE5":"petak","EEEE6":"subota","a0":"pre podne","a1":"popodne","G-1":"p. n. e.","G1":"n. e","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekunda|few#{num} sekunde|#{num} sekundi","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minut|few#{num} minute|#{num} minuta","#{num}h":"#{num}s","1#1 hr|#{num} hrs":"one#{num} sat|few#{num} sata|#{num} sati","1#1 hour|#{num} hours":"one#{num} sat|few#{num} sata|#{num} sati","durationLongDays":"one#{num} dan|#{num} dana","1#1 day|#{num} days":"one#{num} dan|#{num} dana","#{num}w":"#{num}n","1#1 wk|#{num} wks":"#{num} ned","1#1 week|#{num} weeks":"few#{num} nedelje|#{num} nedelja","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} mes","1#1 month|#{num} months":"one#{num} mesec|few#{num} meseca|#{num} meseci","#{num}y":"#{num}g","durationMediumYears":"#{num} god","1#1 yr|#{num} yrs":"#{num} god","1#1 year|#{num} years":"few#{num} godine|#{num} godina","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":" i ","separatorLong":" "};
ilib.data.sysres_bs_Cyrl_BA = {"generated":true,"NN1":"ÑÐ°","NN2":"ÑÐµ","NN3":"Ð¼Ð°","NN4":"Ð°Ð¿","NN5":"Ð¼Ð°","NN6":"ÑÑ","NN7":"ÑÑ","NN8":"Ð°Ð²","NN9":"ÑÐµ","NN10":"Ð¾Ðº","NN11":"Ð½Ð¾","NN12":"Ð´Ðµ","MMM1":"ÑÐ°Ð½","MMM2":"ÑÐµÐ±","MMM3":"Ð¼Ð°Ñ","MMM4":"Ð°Ð¿Ñ","MMM5":"Ð¼Ð°Ñ","MMM6":"ÑÑÐ½","MMM7":"ÑÑÐ»","MMM8":"Ð°Ð²Ð³","MMM9":"ÑÐµÐ¿","MMM10":"Ð¾ÐºÑ","MMM11":"Ð½Ð¾Ð²","MMM12":"Ð´ÐµÑ","MMMM1":"ÑÐ°Ð½ÑÐ°Ñ","MMMM2":"ÑÐµÐ±ÑÑÐ°Ñ","MMMM3":"Ð¼Ð°ÑÑ","MMMM4":"Ð°Ð¿ÑÐ¸Ð»","MMMM5":"Ð¼Ð°Ñ","MMMM6":"ÑÑÐ½Ð¸","MMMM7":"ÑÑÐ»Ð¸","MMMM8":"Ð°Ð²Ð³ÑÑÑ","MMMM9":"ÑÐµÐ¿ÑÐµÐ¼Ð±Ð°Ñ","MMMM10":"Ð¾ÐºÑÐ¾Ð±Ð°Ñ","MMMM11":"Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ","MMMM12":"Ð´ÐµÑÐµÐ¼Ð±Ð°Ñ","E0":"Ð½","E1":"Ð¿","E2":"Ñ","E3":"Ñ","E4":"Ñ","E5":"Ð¿","E6":"Ñ","EE0":"Ð½Ðµ","EE1":"Ð¿Ð¾","EE2":"ÑÑ","EE3":"ÑÑ","EE4":"ÑÐµ","EE5":"Ð¿Ðµ","EE6":"ÑÑ","EEE0":"Ð½ÐµÐ´","EEE1":"Ð¿Ð¾Ð½","EEE2":"ÑÑÐ¾","EEE3":"ÑÑÐ¸","EEE4":"ÑÐµÑ","EEE5":"Ð¿ÐµÑ","EEE6":"ÑÑÐ±","EEEE0":"Ð½ÐµÐ´ÐµÑÐ°","EEEE1":"Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐ°Ðº","EEEE2":"ÑÑÐ¾ÑÐ°Ðº","EEEE3":"ÑÑÐ¸ÑÐµÐ´Ð°","EEEE4":"ÑÐµÑÐ²ÑÑÐ°Ðº","EEEE5":"Ð¿ÐµÑÐ°Ðº","EEEE6":"ÑÑÐ±Ð¾ÑÐ°","a0":"Ð¿ÑÐµ Ð¿Ð¾Ð´Ð½Ðµ","a1":"Ð¿Ð¾Ð¿Ð¾Ð´Ð½Ðµ","G-1":"Ð¿. Ð½. Ðµ.","G1":"Ð½. Ðµ.","#{num}s":"#{num}Ñ","1#1 se|#{num} sec":"#{num} ÑÐµÐº","1#1 sec|#{num} sec":"#{num} ÑÐµÐº","1#1 second|#{num} seconds":"few#{num} ÑÐµÐºÑÐ½Ð´Ðµ|many#{num} ÑÐµÐºÑÐ½Ð´Ð¸|#{num} ÑÐµÐºÑÐ½Ð´Ð°","durationShortMinutes":"#{num}Ð¼","1#1 mi|#{num} min":"#{num} Ð¼Ð¸Ð½","1#1 min|#{num} min":"#{num} Ð¼Ð¸Ð½","1#1 minute|#{num} minutes":"few#{num} Ð¼Ð¸Ð½ÑÑÐ°|many#{num} Ð¼Ð¸Ð½ÑÑÐ°|#{num} Ð¼Ð¸Ð½ÑÑ","#{num}h":"#{num}Ñ","durationMediumHours":"few#{num} ÑÐ°|many#{num} ÑÐ°|#{num} ÑÐ°Ñ","1#1 hr|#{num} hrs":"few#{num} ÑÐ°ÑÐ°|many#{num} ÑÐ°ÑÐ¸|#{num} ÑÐ°Ñ","1#1 hour|#{num} hours":"few#{num} ÑÐ°ÑÐ°|many#{num} ÑÐ°ÑÐ¸|#{num} ÑÐ°Ñ","#{num}d":"#{num}Ð´","1#1 dy|#{num} dys":"few#{num} Ð´Ð°|many#{num} Ð´Ð°|#{num} Ð´Ð°Ð½","durationLongDays":"few#{num} Ð´Ð°Ð½Ð°|many#{num} Ð´Ð°Ð½Ð°|#{num} Ð´Ð°Ð½","1#1 day|#{num} days":"few#{num} Ð´Ð°Ð½Ð°|many#{num} Ð´Ð°Ð½Ð°|#{num} Ð´Ð°Ð½","#{num}w":"#{num}Ð½","durationMediumWeeks":"#{num} Ð½ÐµÐ´","1#1 wk|#{num} wks":"#{num} Ð½ÐµÐ´","1#1 week|#{num} weeks":"few#{num} Ð½ÐµÐ´ÐµÑÐµ|#{num} Ð½ÐµÐ´ÐµÑÐ°","durationShortMonths":"#{num}Ð¼","1#1 mo|#{num} mos":"#{num} Ð¼ÐµÑ","1#1 mon|#{num} mons":"#{num} Ð¼ÐµÑ","1#1 month|#{num} months":"few#{num} Ð¼ÐµÑÐµÑÐ°|many#{num} Ð¼ÐµÑÐµÑÐ¸|#{num} Ð¼ÐµÑÐµÑ","#{num}y":"#{num}Ð³","durationMediumYears":"#{num} Ð³Ð¾Ð´","1#1 yr|#{num} yrs":"#{num} Ð³Ð¾Ð´","1#1 year|#{num} years":"few#{num} Ð³Ð¾Ð´Ð¸Ð½Ðµ|#{num} Ð³Ð¾Ð´Ð¸Ð½Ð°","{duration} ago":"Ð¿ÑÐµ {duration}","in {duration}":"Ð·Ð° {duration}","finalSeparatorFull":" Ð¸ "};
ilib.data.sysres_ca = {"generated":true,"NN1":"de","NN2":"de","NN3":"de","NN4":"dâ","NN5":"de","NN6":"de","NN7":"de","NN8":"dâ","NN9":"de","NN10":"dâ","NN11":"de","NN12":"de","MMM1":"de gen.","MMM2":"de febr.","MMM3":"de marÃ§","MMM4":"dâabr.","MMM5":"de maig","MMM6":"de juny","MMM7":"de jul.","MMM8":"dâag.","MMM9":"de set.","MMM10":"dâoct.","MMM11":"de nov.","MMM12":"de des.","MMMM1":"de gener","MMMM2":"de febrer","MMMM3":"de marÃ§","MMMM4":"dâabril","MMMM5":"de maig","MMMM6":"de juny","MMMM7":"de juliol","MMMM8":"dâagost","MMMM9":"de setembre","MMMM10":"dâoctubre","MMMM11":"de novembre","MMMM12":"de desembre","E0":"dg","E1":"dl","E2":"dt","E3":"dc","E4":"dj","E5":"dv","E6":"ds","EE0":"dg","EE1":"dl","EE2":"dt","EE3":"dc","EE4":"dj","EE5":"dv","EE6":"ds","EEE0":"dg.","EEE1":"dl.","EEE2":"dt.","EEE3":"dc.","EEE4":"dj.","EEE5":"dv.","EEE6":"ds.","EEEE0":"diumenge","EEEE1":"dilluns","EEEE2":"dimarts","EEEE3":"dimecres","EEEE4":"dijous","EEEE5":"divendres","EEEE6":"dissabte","a0":"a.m.","a1":"p.m.","G-1":"aC","G1":"dC","1#1 se|#{num} sec":"#{num} se","1#1 sec|#{num} sec":"#{num} seg","1#1 second|#{num} seconds":"one#{num} segon|#{num} segons","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} mi","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minut|#{num} minuts","durationMediumHours":"#{num} ho","1#1 hr|#{num} hrs":"one#{num} hora|#{num} hor","1#1 hour|#{num} hours":"one#{num} hora|#{num} hores","1#1 dy|#{num} dys":"one#{num} dia|#{num} di","durationLongDays":"one#{num} dia|#{num} dies","1#1 day|#{num} days":"one#{num} dia|#{num} dies","#{num}w":"#{num}s","durationMediumWeeks":"#{num} se","1#1 wk|#{num} wks":"#{num} set","1#1 week|#{num} weeks":"one#{num} setmana|#{num} setmanes","durationShortMonths":"#{num}m","1#1 mo|#{num} mos":"one#{num} mes|#{num} me","1#1 mon|#{num} mons":"#{num} mes","1#1 month|#{num} months":"one#{num} mes|#{num} mesos","#{num}y":"#{num}a","durationMediumYears":"one#{num} any|#{num} an","1#1 yr|#{num} yrs":"one#{num} any|#{num} anys","1#1 year|#{num} years":"one#{num} any|#{num} anys","{duration} ago":"fa {duration}","in {duration}":"d'aquÃ­ a {duration}","finalSeparatorFull":" i ","separatorLong":" "};
ilib.data.sysres_cs = {"generated":true,"NN1":"le","NN2":"Ãºn","NN3":"bÅ","NN4":"du","NN5":"kv","NN6":"Äv","NN7":"Äv","NN8":"sr","NN9":"zÃ¡","NN10":"ÅÃ­","NN11":"li","NN12":"pr","MMM1":"led","MMM2":"Ãºno","MMM3":"bÅe","MMM4":"dub","MMM5":"kvÄ","MMM6":"Ävn","MMM7":"Ävc","MMM8":"srp","MMM9":"zÃ¡Å","MMM10":"ÅÃ­j","MMM11":"lis","MMM12":"pro","MMMM1":"ledna","MMMM2":"Ãºnora","MMMM3":"bÅezna","MMMM4":"dubna","MMMM5":"kvÄtna","MMMM6":"Äervna","MMMM7":"Äervence","MMMM8":"srpna","MMMM9":"zÃ¡ÅÃ­","MMMM10":"ÅÃ­jna","MMMM11":"listopadu","MMMM12":"prosince","E0":"N","E1":"P","E2":"Ã","E3":"S","E4":"Ä","E5":"P","EE0":"ne","EE1":"po","EE2":"Ãºt","EE3":"st","EE4":"Ät","EE5":"pÃ¡","EE6":"so","EEE0":"ne","EEE1":"po","EEE2":"Ãºt","EEE3":"st","EEE4":"Ät","EEE5":"pÃ¡","EEE6":"so","EEEE0":"nedÄle","EEEE1":"pondÄlÃ­","EEEE2":"ÃºterÃ½","EEEE3":"stÅeda","EEEE4":"Ätvrtek","EEEE5":"pÃ¡tek","EEEE6":"sobota","G-1":"pÅ. n. l.","G1":"n. l.","1#1 se|#{num} sec":"#{num} se","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekunda|few#{num} sekundy|#{num} sekund","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} mi","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minuta|few#{num} minuty|#{num} minut","durationMediumHours":"#{num} ho","1#1 hr|#{num} hrs":"#{num} hod","1#1 hour|#{num} hours":"one#{num} hodina|few#{num} hodiny|#{num} hodin","1#1 dy|#{num} dys":"one#{num} den|few#{num} dny|#{num} dnÃ­","durationLongDays":"one#{num} den|few#{num} dny|#{num} dnÃ­","1#1 day|#{num} days":"one#{num} den|few#{num} dny|#{num} dnÃ­","#{num}w":"#{num}t","durationMediumWeeks":"#{num} tÃ½","1#1 wk|#{num} wks":"#{num} tÃ½d","1#1 week|#{num} weeks":"one#{num} tÃ½den|few#{num} tÃ½dny|#{num} tÃ½dnÅ¯","durationShortMonths":"#{num}m","1#1 mo|#{num} mos":"#{num} mÄ","1#1 mon|#{num} mons":"#{num} mÄs","1#1 month|#{num} months":"one#{num} mÄsÃ­c|few#{num} mÄsÃ­ce|#{num} mÄsÃ­cÅ¯","#{num}y":"#{num}r","durationMediumYears":"one#{num} rok|few#{num} ro|#{num} let","1#1 yr|#{num} yrs":"one#{num} rok|few#{num} roky|#{num} let","1#1 year|#{num} years":"one#{num} rok|few#{num} roky|#{num} let","{duration} ago":"-{duration}","in {duration}":"za {duration}","finalSeparatorFull":" a ","separatorLong":" "};
ilib.data.sysres_da = {"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"ma","NN6":"ju","NN7":"ju","NN8":"au","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jan.","MMM2":"feb.","MMM3":"mar.","MMM4":"apr.","MMM5":"maj","MMM6":"jun.","MMM7":"jul.","MMM8":"aug.","MMM9":"sep.","MMM10":"okt.","MMM11":"nov.","MMM12":"dec.","MMMM1":"januar","MMMM2":"februar","MMMM3":"marts","MMMM4":"april","MMMM5":"maj","MMMM6":"juni","MMMM7":"juli","MMMM8":"august","MMMM9":"september","MMMM10":"oktober","MMMM11":"november","MMMM12":"december","E3":"O","E6":"L","EE0":"sÃ¸","EE1":"ma","EE2":"ti","EE3":"on","EE4":"to","EE5":"fr","EE6":"lÃ¸","EEE0":"sÃ¸n.","EEE1":"man.","EEE2":"tir.","EEE3":"ons.","EEE4":"tor.","EEE5":"fre.","EEE6":"lÃ¸r.","EEEE0":"sÃ¸ndag","EEEE1":"mandag","EEEE2":"tirsdag","EEEE3":"onsdag","EEEE4":"torsdag","EEEE5":"fredag","EEEE6":"lÃ¸rdag","a0":"f.m.","a1":"e.m.","G-1":"f.Kr.","G1":"e.Kr.","in {duration}":"om {duration}","{duration} ago":"{duration} siden","1#1 year|#{num} years":"1#{num} Ã¥r|#{num} Ã¥r","1#1 month|#{num} months":"1#{num} mÃ¥ned|#{num} mÃ¥neder","1#1 week|#{num} weeks":"1#{num} uge|#{num} uger","1#1 day|#{num} days":"1#{num} dag|#{num} dage","1#1 hour|#{num} hours":"1#{num} time|#{num} timer","1#1 minute|#{num} minutes":"1#{num} minut|#{num} minutter","1#1 second|#{num} seconds":"1#{num} sekund|#{num} sekunder","1#1 millisecond|#{num} milliseconds":"1#{num} millisekund|#{num} millisekunder","1#1 yr|#{num} yrs":"#{num} Ã¥r","1#1 mon|#{num} mons":"#{num} mdr.","1#1 wk|#{num} wks":"1#{num} uge|#{num} uger","durationLongDays":"1#{num} dag|#{num} dage","1#1 hr|#{num} hrs":"1#{num} time|#{num} tmr.","1#1 min|#{num} min":"#{num} min.","1#1 sec|#{num} sec":"#{num} sek.","#{num} ms":"#{num} ms","durationMediumYears":"#{num} Ã¥r","1#1 mo|#{num} mos":"#{num} md","durationMediumWeeks":"#{num} ug","1#1 dy|#{num} dys":"#{num} da","durationMediumHours":"#{num} ti","1#1 mi|#{num} min":"#{num} mi","1#1 se|#{num} sec":"#{num} se","#{num}y":"#{num}Ã¥","durationShortMonths":"#{num}mÃ¥","#{num}w":"#{num}u","#{num}d":"#{num}d","#{num}h":"#{num}t","durationShortMinutes":"#{num}m","#{num}s":"#{num}s","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" og "};
ilib.data.sysres_de = {"MMMM1":"Januar","MMM1":"Jan.","MMMM2":"Februar","MMM2":"Feb.","MMMM3":"MÃ¤rz","MMM3":"MÃ¤r.","NN3":"MÃ¤","MMM4":"Apr.","MMMM5":"Mai","MMM5":"Mai","MMMM6":"Juni","MMM6":"Jun.","MMMM7":"Juli","MMM7":"Jul.","MMM8":"Aug.","MMM9":"Sep.","MMMM10":"Oktober","MMM10":"Okt.","NN10":"Ok","MMM11":"Nov.","MMMM12":"Dezember","MMM12":"Dez.","EEEE0":"Sonntag","EEE0":"So.","EE0":"So","EEEE1":"Montag","EEE1":"Mo.","EEEE2":"Dienstag","EEE2":"Di.","EE2":"Di","E2":"D","EEEE3":"Mittwoch","EEE3":"Mi.","EE3":"Mi","E3":"M","EEEE4":"Donnerstag","EEE4":"Do.","EE4":"Do","E4":"D","EEEE5":"Freitag","EEE5":"Fr.","EEEE6":"Samstag","EEE6":"Sa.","ordinalChoice":"#{num}.","a0":"vorm.","a1":"nachm.","G-1":"v. Chr.","G1":"n. Chr.","durationShortMillis":"#{num}Ms","#{num}s":"#{num}S","durationShortMinutes":"#{num}M","#{num}h":"#{num}St","#{num}d":"#{num}T","#{num}w":"#{num}W","durationShortMonths":"#{num}Mo","#{num}y":"#{num}J","#{num} ms":"#{num} Ms.","1#1 se|#{num} sec":"#{num} Se.","1#1 mi|#{num} min":"#{num} Mi.","durationMediumHours":"#{num} St.","1#1 dy|#{num} dys":"#{num} Ta.","durationMediumWeeks":"#{num} Wo.","1#1 mo|#{num} mos":"#{num} Mo.","durationMediumYears":"#{num} Ja.","1#1 sec|#{num} sec":"#{num} Sek.","1#1 min|#{num} min":"#{num} Min.","1#1 hr|#{num} hrs":"#{num} Std.","durationLongDays":"1#{num} Tag|#{num} Tage","1#1 wk|#{num} wks":"#{num} Wch.","1#1 mon|#{num} mons":"#{num} Mon.","1#1 yr|#{num} yrs":"#{num} Jhr.","1#1 millisecond|#{num} milliseconds":"1#{num} Millisekunde|#{num} Millisekunden","1#1 second|#{num} seconds":"1#{num} Sekunde|#{num} Sekunden","1#1 minute|#{num} minutes":"1#{num} Minute|#{num} Minuten","1#1 hour|#{num} hours":"1#{num} Stunde|#{num} Stunden","1#1 day|#{num} days":"1#{num} Tag|#{num} Tage","1#1 week|#{num} weeks":"1#{num} Woche|#{num} Wochen","1#1 month|#{num} months":"1#{num} Monat|#{num} Monate","1#1 year|#{num} years":"1#{num} Jahr|#{num} Jahre","{duration} ago":"vor {duration}","in {duration}":"in {duration}","separatorShort":" ","separatorMedium":" ","separatorLong":", ","separatorFull":", ","finalSeparatorFull":" und "};
ilib.data.sysres_de_AT = {"NN1":"JÃ¤","MMM1":"JÃ¤n","MMMM1":"JÃ¤nner"};
ilib.data.sysres_el = {"generated":true,"NN1":"ÎÎ±","NN2":"Î¦Îµ","NN3":"ÎÎ±","NN4":"ÎÏ","NN5":"ÎÎ±","NN6":"ÎÎ¿","NN7":"ÎÎ¿","NN8":"ÎÏ","NN9":"Î£Îµ","NN10":"ÎÎº","NN11":"ÎÎ¿","NN12":"ÎÎµ","MMM1":"ÎÎ±Î½","MMM2":"Î¦ÎµÎ²","MMM3":"ÎÎ±Ï","MMM4":"ÎÏÏ","MMM5":"ÎÎ±Ï","MMM6":"ÎÎ¿ÏÎ½","MMM7":"ÎÎ¿ÏÎ»","MMM8":"ÎÏÎ³","MMM9":"Î£ÎµÏ","MMM10":"ÎÎºÏ","MMM11":"ÎÎ¿Îµ","MMM12":"ÎÎµÎº","MMMM1":"ÎÎ±Î½Î¿ÏÎ±ÏÎ¯Î¿Ï","MMMM2":"Î¦ÎµÎ²ÏÎ¿ÏÎ±ÏÎ¯Î¿Ï","MMMM3":"ÎÎ±ÏÏÎ¯Î¿Ï","MMMM4":"ÎÏÏÎ¹Î»Î¯Î¿Ï","MMMM5":"ÎÎ±ÎÎ¿Ï","MMMM6":"ÎÎ¿ÏÎ½Î¯Î¿Ï","MMMM7":"ÎÎ¿ÏÎ»Î¯Î¿Ï","MMMM8":"ÎÏÎ³Î¿ÏÏÏÎ¿Ï","MMMM9":"Î£ÎµÏÏÎµÎ¼Î²ÏÎ¯Î¿Ï","MMMM10":"ÎÎºÏÏÎ²ÏÎ¯Î¿Ï","MMMM11":"ÎÎ¿ÎµÎ¼Î²ÏÎ¯Î¿Ï","MMMM12":"ÎÎµÎºÎµÎ¼Î²ÏÎ¯Î¿Ï","E0":"Î","E1":"Î","E2":"Î¤","E3":"Î¤","E4":"Î ","E5":"Î ","E6":"Î£","EE0":"ÎÏ","EE1":"ÎÎµ","EE2":"Î¤Ï","EE3":"Î¤Îµ","EE4":"Î Îµ","EE5":"Î Î±","EE6":"Î£Î±","EEE0":"ÎÏÏ","EEE1":"ÎÎµÏ","EEE2":"Î¤ÏÎ¯","EEE3":"Î¤ÎµÏ","EEE4":"Î Î­Î¼","EEE5":"Î Î±Ï","EEE6":"Î£Î¬Î²","EEEE0":"ÎÏÏÎ¹Î±ÎºÎ®","EEEE1":"ÎÎµÏÏÎ­ÏÎ±","EEEE2":"Î¤ÏÎ¯ÏÎ·","EEEE3":"Î¤ÎµÏÎ¬ÏÏÎ·","EEEE4":"Î Î­Î¼ÏÏÎ·","EEEE5":"Î Î±ÏÎ±ÏÎºÎµÏÎ®","EEEE6":"Î£Î¬Î²Î²Î±ÏÎ¿","a0":"Ï.Î¼.","a1":"Î¼.Î¼.","G-1":"Ï.Î§.","G1":"Î¼.Î§.","#{num}s":"#{num}Î´","1#1 se|#{num} sec":"#{num} Î´Îµ","1#1 sec|#{num} sec":"#{num} Î´ÎµÏ","1#1 second|#{num} seconds":"one#{num} Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ¿|#{num} Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ±","durationShortMinutes":"#{num}Î»","1#1 mi|#{num} min":"#{num} Î»Îµ","1#1 min|#{num} min":"#{num} Î»ÎµÏ","1#1 minute|#{num} minutes":"one#{num} Î»ÎµÏÏÏ|#{num} Î»ÎµÏÏÎ¬","#{num}h":"#{num}Ï","durationMediumHours":"one#{num} ÏÏÎ±|#{num} ÏÏ","1#1 hr|#{num} hrs":"one#{num} ÏÏÎ±|#{num} ÏÏÎµÏ","1#1 hour|#{num} hours":"one#{num} ÏÏÎ±|#{num} ÏÏÎµÏ","#{num}d":"#{num}Î·","1#1 dy|#{num} dys":"#{num} Î·Î¼","durationLongDays":"#{num} Î·Î¼Î­","1#1 day|#{num} days":"one#{num} Î·Î¼Î­ÏÎ±|#{num} Î·Î¼Î­ÏÎµÏ","#{num}w":"#{num}Îµ","durationMediumWeeks":"#{num} ÎµÎ²","1#1 wk|#{num} wks":"#{num} ÎµÎ²Î´","1#1 week|#{num} weeks":"one#{num} ÎµÎ²Î´Î¿Î¼Î¬Î´Î±|#{num} ÎµÎ²Î´Î¿Î¼Î¬Î´ÎµÏ","durationShortMonths":"#{num}Î¼","1#1 mo|#{num} mos":"#{num} Î¼Î®","1#1 mon|#{num} mons":"#{num} Î¼Î®Î½","1#1 month|#{num} months":"one#{num} Î¼Î®Î½Î±Ï|#{num} Î¼Î®Î½ÎµÏ","#{num}y":"#{num}Î­","durationMediumYears":"one#{num} Î­Ï|#{num} Î­ÏÎ·","1#1 yr|#{num} yrs":"one#{num} Î­ÏÎ¿Ï|#{num} Î­ÏÎ·","1#1 year|#{num} years":"one#{num} Î­ÏÎ¿Ï|#{num} Î­ÏÎ·","{duration} ago":"ÏÏÎ¹Î½ Î±ÏÏ {duration}","in {duration}":"ÏÎµ {duration}","finalSeparatorFull":" ÎºÎ±Î¹ ","separatorLong":" "};
ilib.data.sysres_en_IE = {"a0":"a.m.","a1":"p.m."};
ilib.data.sysres_en_US = {"a0":"am","a1":"pm","G-1":"BC","G1":"AD","finalSeparatorFull":" and "};
ilib.data.sysres_es = {"MMMM1":"enero","MMM1":"ene","NN1":"en","N1":"E","MMMM2":"febrero","MMM2":"feb","NN2":"fe","MMMM3":"marzo","MMM3":"mar","NN3":"ma","MMMM4":"abril","MMM4":"abr","NN4":"ab","MMMM5":"mayo","MMM5":"may","NN5":"ma","MMMM6":"junio","MMM6":"jun","NN6":"ju","MMMM7":"julio","MMM7":"jul","NN7":"ju","MMMM8":"agosto","MMM8":"ago","NN8":"ag","MMMM9":"septiembre","MMM9":"sep","NN9":"se","MMMM10":"octubre","MMM10":"oct","NN10":"oc","MMMM11":"noviembre","MMM11":"nov","NN11":"no","MMMM12":"diciembre","MMM12":"dic","NN12":"di","EEEE0":"domingo","EEE0":"dom","EE0":"do","E0":"D","EEEE1":"lunes","EEE1":"lun","EE1":"lu","E1":"L","EEEE2":"martes","EEE2":"mar","EE2":"ma","E2":"M","EEEE3":"miÃ©rcoles","EEE3":"miÃ©","EE3":"mi","E3":"M","EEEE4":"jueves","EEE4":"jue","EE4":"ju","E4":"J","EEEE5":"viernes","EEE5":"vie","EE5":"vi","E5":"V","EEEE6":"sÃ¡bado","EEE6":"sÃ¡b","EE6":"sÃ¡","ordinalChoice":"#{num} Âº","a0":"a.m.","a1":"p.m.","G-1":"a.C.","G1":"d.C.","durationShortMillis":"#{num}ms","#{num}s":"#{num}s","durationShortMinutes":"#{num}m","#{num}h":"#{num}h","#{num}d":"#{num}d","#{num}w":"#{num}sm","durationShortMonths":"#{num}me","#{num}y":"#{num}a","#{num} ms":"#{num} ms","1#1 se|#{num} sec":"1#{num} sg|#{num} sgs","1#1 mi|#{num} min":"1#{num} mn|#{num} mns","durationMediumHours":"1#{num} hr|#{num} hrs","1#1 dy|#{num} dys":"1#{num} dÃ­|#{num} dÃ­s","durationMediumWeeks":"1#{num} sm|#{num} sms","1#1 mo|#{num} mos":"1#{num} me|#{num} mss","durationMediumYears":"1#{num} aÃ±|#{num} aÃ±s","1#1 sec|#{num} sec":"1#{num} seg|#{num} segs","1#1 min|#{num} min":"1#{num} min|#{num} mins","1#1 hr|#{num} hrs":"1#{num} hor|#{num} hors","durationLongDays":"1#{num} dÃ­a|#{num} dÃ­as","1#1 wk|#{num} wks":"1#{num} sem|#{num} sems","1#1 mon|#{num} mons":"1#{num} mes|#{num} mss","1#1 yr|#{num} yrs":"1#{num} aÃ±o|#{num} aÃ±os","1#1 millisecond|#{num} milliseconds":"1#{num} millisegundo|#{num} millisegundos","1#1 second|#{num} seconds":"1#{num} segundo|#{num} segundos","1#1 minute|#{num} minutes":"1#{num} minuto|#{num} minutos","1#1 hour|#{num} hours":"1#{num} hora|#{num} horas","1#1 day|#{num} days":"1#{num} dÃ­a|#{num} dÃ­as","1#1 week|#{num} weeks":"1#{num} semana|#{num} semanas","1#1 month|#{num} months":"1#{num} mes|#{num} meses","1#1 year|#{num} years":"1#{num} aÃ±o|#{num} aÃ±os","{duration} ago":"hace {duration}","in {duration}":"en {duration}","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" y "};
ilib.data.sysres_es_ES = {"E3":"X","in {duration}":"dentro de {duration}"};
ilib.data.sysres_es_GQ = {"E3":"X","in {duration}":"dentro de {duration}"};
ilib.data.sysres_et = {"generated":true,"NN1":"ja","NN2":"ve","NN3":"mÃ¤","NN4":"ap","NN5":"ma","NN6":"ju","NN7":"ju","NN8":"au","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jaan","MMM2":"veebr","MMM3":"mÃ¤rts","MMM4":"apr","MMM5":"mai","MMM6":"juuni","MMM7":"juuli","MMM8":"aug","MMM9":"sept","MMM10":"okt","MMM11":"nov","MMM12":"dets","MMMM1":"jaanuar","MMMM2":"veebruar","MMMM3":"mÃ¤rts","MMMM4":"aprill","MMMM5":"mai","MMMM6":"juuni","MMMM7":"juuli","MMMM8":"august","MMMM9":"september","MMMM10":"oktoober","MMMM11":"november","MMMM12":"detsember","E0":"P","E1":"E","E3":"K","E4":"N","E5":"R","E6":"L","EE0":"P","EE1":"E","EE2":"T","EE3":"K","EE4":"N","EE5":"R","EE6":"L","EEE0":"P","EEE1":"E","EEE2":"T","EEE3":"K","EEE4":"N","EEE5":"R","EEE6":"L","EEEE0":"pÃ¼hapÃ¤ev","EEEE1":"esmaspÃ¤ev","EEEE2":"teisipÃ¤ev","EEEE3":"kolmapÃ¤ev","EEEE4":"neljapÃ¤ev","EEEE5":"reede","EEEE6":"laupÃ¤ev","G-1":"e.m.a.","G1":"m.a.j.","1#1 se|#{num} sec":"#{num} se","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekund|#{num} sekundit","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} min","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minut|#{num} minutit","#{num}h":"#{num}t","durationMediumHours":"#{num} tu","1#1 hr|#{num} hrs":"#{num} tun","1#1 hour|#{num} hours":"#{num} tundi","#{num}d":"#{num}Ã¶","1#1 dy|#{num} dys":"#{num} Ã¶Ã¶","durationLongDays":"#{num} Ã¶Ã¶p","1#1 day|#{num} days":"one#{num} Ã¶Ã¶pÃ¤ev|#{num} Ã¶Ã¶pÃ¤eva","#{num}w":"#{num}n","durationMediumWeeks":"#{num} nÃ¤","1#1 wk|#{num} wks":"#{num} nÃ¤d","1#1 week|#{num} weeks":"one#{num} nÃ¤dal|#{num} nÃ¤dalat","durationShortMonths":"#{num}k","1#1 mo|#{num} mos":"#{num} ku","1#1 mon|#{num} mons":"one#{num} kuu|#{num} kuud","1#1 month|#{num} months":"one#{num} kuu|#{num} kuud","#{num}y":"#{num}a","durationMediumYears":"#{num} aa","1#1 yr|#{num} yrs":"#{num} aas","1#1 year|#{num} years":"one#{num} aasta|#{num} aastat","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":" ja ","separatorLong":" "};
ilib.data.sysres_fa = {"NN1":"ÚØ§","NN2":"ÙÙ","NN3":"ÙØ§","NN4":"Ø¢Ù","NN5":"ÙÙ","NN6":"ÚÙ","NN7":"ÚÙ","NN8":"Ø§Ù","NN9":"Ø³Ù¾","NN10":"Ø§Ú©","NN11":"ÙÙ","NN12":"Ø¯Ø³","MMM1":"ÚØ§ÙÙÛÙÙ","MMM2":"ÙÙØ±ÛÙÙ","MMM3":"ÙØ§Ø±Ø³","MMM4":"Ø¢ÙØ±ÛÙ","MMM5":"ÙÙÙ","MMM6":"ÚÙØ¦Ù","MMM7":"ÚÙØ¦ÛÙÙ","MMM8":"Ø§ÙØª","MMM9":"Ø³Ù¾ØªØ§ÙØ¨Ø±","MMM10":"Ø§Ú©ØªØ¨Ø±","MMM11":"ÙÙØ§ÙØ¨Ø±","MMM12":"Ø¯Ø³Ø§ÙØ¨Ø±","MMMM1":"ÚØ§ÙÙÛÙÙ","MMMM2":"ÙÙØ±ÛÙÙ","MMMM3":"ÙØ§Ø±Ø³","MMMM4":"Ø¢ÙØ±ÛÙ","MMMM5":"ÙÙÙ","MMMM6":"ÚÙØ¦Ù","MMMM7":"ÚÙØ¦ÛÙÙ","MMMM8":"Ø§ÙØª","MMMM9":"Ø³Ù¾ØªØ§ÙØ¨Ø±","MMMM10":"Ø§Ú©ØªØ¨Ø±","MMMM11":"ÙÙØ§ÙØ¨Ø±","MMMM12":"Ø¯Ø³Ø§ÙØ¨Ø±","E0":"Û.","E1":"Ø¯.","E2":"Ø³.","E3":"Ú.","E4":"Ù¾.","E5":"Ø¬.","E6":"Ø´.","EE0":"Û±Ø´.","EE1":"Û²Ø´.","EE2":"Û³Ø´.","EE3":"Û´Ø´.","EE4":"ÛµØ´.","EE5":"Ø¬.","EE6":"Ø´.","EEE0":"ÛÚ©Ø´ÙØ¨Ù","EEE1":"Ø¯ÙØ´ÙØ¨Ù","EEE2":"Ø³ÙâØ´ÙØ¨Ù","EEE3":"ÚÙØ§Ø±Ø´ÙØ¨Ù","EEE4":"Ù¾ÙØ¬Ø´ÙØ¨Ù","EEE5":"Ø¬ÙØ¹Ù","EEE6":"Ø´ÙØ¨Ù","EEEE0":"ÛÚ©Ø´ÙØ¨Ù","EEEE1":"Ø¯ÙØ´ÙØ¨Ù","EEEE2":"Ø³ÙâØ´ÙØ¨Ù","EEEE3":"ÚÙØ§Ø±Ø´ÙØ¨Ù","EEEE4":"Ù¾ÙØ¬Ø´ÙØ¨Ù","EEEE5":"Ø¬ÙØ¹Ù","EEEE6":"Ø´ÙØ¨Ù","a0":"ÙØ¨ÙâØ§Ø²Ø¸ÙØ±","a1":"Ø¨Ø¹Ø¯Ø§Ø²Ø¸ÙØ±","G-1":"Ù.Ù.","G1":"Ù.","#{num}s":"#{num}Ø«","1#1 se|#{num} sec":"#{num} Ø«Ø§ÙÛÙ","1#1 sec|#{num} sec":"#{num} Ø«Ø§ÙÛÙ","1#1 second|#{num} seconds":"#{num} Ø«Ø§ÙÛÙ","durationShortMinutes":"#{num}Ø¯","1#1 mi|#{num} min":"#{num} Ø¯ÙÛÙÙ","1#1 min|#{num} min":"#{num} Ø¯ÙÛÙÙ","1#1 minute|#{num} minutes":"#{num} Ø¯ÙÛÙÙ","#{num}h":"#{num}Ø³","durationMediumHours":"#{num} Ø³Ø§Ø¹Øª","1#1 hr|#{num} hrs":"#{num} Ø³Ø§Ø¹Øª","1#1 hour|#{num} hours":"#{num} Ø³Ø§Ø¹Øª","#{num}d":"#{num}Ø±","1#1 dy|#{num} dys":"#{num} Ø±ÙØ²","durationLongDays":"#{num} Ø±ÙØ²","1#1 day|#{num} days":"#{num} Ø±ÙØ²","#{num}w":"#{num}Ù","durationMediumWeeks":"#{num} ÙÙØªÙ","1#1 wk|#{num} wks":"#{num} ÙÙØªÙ","1#1 week|#{num} weeks":"#{num} ÙÙØªÙ","durationShortMonths":"#{num}Ù","1#1 mo|#{num} mos":"#{num} ÙØ§Ù","1#1 mon|#{num} mons":"#{num} ÙØ§Ù","1#1 month|#{num} months":"#{num} ÙØ§Ù","#{num}y":"#{num}Ø³","durationMediumYears":"#{num} Ø³Ø§Ù","1#1 yr|#{num} yrs":"#{num} Ø³Ø§Ù","1#1 year|#{num} years":"#{num} Ø³Ø§Ù","{duration} ago":"â{duration} Ù¾ÛØ´","in {duration}":"â{duration} Ø¨Ø¹Ø¯","separatorFull":"Øâ ","finalSeparatorFull":"Ø Ù ","separatorLong":" ","E0-persian":"Û.","E1-persian":"Ø¯.","E2-persian":"Ø³.","E3-persian":"Ú.","E4-persian":"Ù¾.","E5-persian":"Ø¬.","E6-persian":"Ø´.","EE0-persian":"ÛÚ©Ø´ÙØ¨Ù","EE1-persian":"Ø¯ÙØ´ÙØ¨Ù","EE2-persian":"Ø³ÙâØ´ÙØ¨Ù","EE3-persian":"ÚÙØ§Ø±Ø´ÙØ¨Ù","EE4-persian":"Ù¾ÙØ¬Ø´ÙØ¨Ù","EE5-persian":"Ø¬ÙØ¹Ù","EE6-persian":"Ø´ÙØ¨Ù","EEE0-persian":"ÛÚ©Ø´ÙØ¨Ù","EEE1-persian":"Ø¯ÙØ´ÙØ¨Ù","EEE2-persian":"Ø³ÙâØ´ÙØ¨Ù","EEE3-persian":"ÚÙØ§Ø±Ø´ÙØ¨Ù","EEE4-persian":"Ù¾ÙØ¬Ø´ÙØ¨Ù","EEE5-persian":"Ø¬ÙØ¹Ù","EEE6-persian":"Ø´ÙØ¨Ù","EEEE0-persian":"ÛÚ©Ø´ÙØ¨Ù","EEEE1-persian":"Ø¯ÙØ´ÙØ¨Ù","EEEE2-persian":"Ø³ÙâØ´ÙØ¨Ù","EEEE3-persian":"ÚÙØ§Ø±Ø´ÙØ¨Ù","EEEE4-persian":"Ù¾ÙØ¬Ø´ÙØ¨Ù","EEEE5-persian":"Ø¬ÙØ¹Ù","EEEE6-persian":"Ø´ÙØ¨Ù","N1-persian":"Ù.","N2-persian":"Ø§.","N3-persian":"Ø®.","N4-persian":"Øª.","N5-persian":"Ù.","N6-persian":"Ø´.","N7-persian":"Ù.","N8-persian":"Ø¢.","N9-persian":"Ø¢.","N10-persian":"Ø¯.","N11-persian":"Ø¨.","N12-persian":"Ø§.","NN1-persian":"ÙØ±ÙØ±Ø¯ÛÙ","NN2-persian":"Ø§Ø±Ø¯ÛØ¨ÙØ´Øª","NN3-persian":"Ø®Ø±Ø¯Ø§Ø¯","NN4-persian":"ØªÛØ±","NN5-persian":"ÙØ±Ø¯Ø§Ø¯","NN6-persian":"Ø´ÙØ±ÛÙØ±","NN7-persian":"ÙÙØ±","NN8-persian":"Ø¢Ø¨Ø§Ù","NN9-persian":"Ø¢Ø°Ø±","NN10-persian":"Ø¯Û","NN11-persian":"Ø¨ÙÙÙ","NN12-persian":"Ø§Ø³ÙÙØ¯","MMM1-persian":"ÙØ±ÙØ±Ø¯ÛÙ","MMM2-persian":"Ø§Ø±Ø¯ÛØ¨ÙØ´Øª","MMM3-persian":"Ø®Ø±Ø¯Ø§Ø¯","MMM4-persian":"ØªÛØ±","MMM5-persian":"ÙØ±Ø¯Ø§Ø¯","MMM6-persian":"Ø´ÙØ±ÛÙØ±","MMM7-persian":"ÙÙØ±","MMM8-persian":"Ø¢Ø¨Ø§Ù","MMM9-persian":"Ø¢Ø°Ø±","MMM10-persian":"Ø¯Û","MMM11-persian":"Ø¨ÙÙÙ","MMM12-persian":"Ø§Ø³ÙÙØ¯","MMMM1-persian":"ÙØ±ÙØ±Ø¯ÛÙ","MMMM2-persian":"Ø§Ø±Ø¯ÛØ¨ÙØ´Øª","MMMM3-persian":"Ø®Ø±Ø¯Ø§Ø¯","MMMM4-persian":"ØªÛØ±","MMMM5-persian":"ÙØ±Ø¯Ø§Ø¯","MMMM6-persian":"Ø´ÙØ±ÛÙØ±","MMMM7-persian":"ÙÙØ±","MMMM8-persian":"Ø¢Ø¨Ø§Ù","MMMM9-persian":"Ø¢Ø°Ø±","MMMM10-persian":"Ø¯Û","MMMM11-persian":"Ø¨ÙÙÙ","MMMM12-persian":"Ø§Ø³ÙÙØ¯"};
ilib.data.sysres_fa_AF = {"NN1":"Ø¬Ù","NN5":"ÙÙ","NN7":"Ø¬Ù","MMM1":"Ø¬ÙÙ","MMM5":"ÙÙÛ","MMM7":"Ø¬ÙÙ","MMM12":"Ø¯Ø³Ù","MMMM1":"Ø¬ÙÙØ±Û","MMMM2":"ÙØ¨Ø±ÙØ±Û","MMMM3":"ÙØ§Ø±Ú","MMMM4":"Ø§Ù¾Ø±ÛÙ","MMMM5":"ÙÛ","MMMM6":"Ø¬ÙÙ","MMMM7":"Ø¬ÙÙØ§Û","MMMM8":"Ø§Ú¯Ø³Øª","MMMM9":"Ø³Ù¾ØªÙØ¨Ø±","MMMM10":"Ø§Ú©ØªÙØ¨Ø±","MMMM11":"ÙÙÙØ¨Ø±","MMMM12":"Ø¯Ø³ÙØ¨Ø±","N1-persian":"Ø­","N2-persian":"Ø«","N3-persian":"Ø¬","N4-persian":"Ø³","N5-persian":"Ø§","N6-persian":"Ø³","N7-persian":"Ù","N8-persian":"Ø¹","N9-persian":"Ù","N10-persian":"Ø¬","N11-persian":"Ø¯","N12-persian":"Ø­","NN1-persian":"Ø­ÙÙ","NN2-persian":"Ø«ÙØ±","NN3-persian":"Ø¬ÙØ²Ø§","NN4-persian":"Ø³Ø±Ø·Ø§Ù","NN5-persian":"Ø§Ø³Ø¯","NN6-persian":"Ø³ÙØ¨ÙÙ","NN7-persian":"ÙÛØ²Ø§Ù","NN8-persian":"Ø¹ÙØ±Ø¨","NN9-persian":"ÙÙØ³","NN10-persian":"Ø¬Ø¯Û","NN11-persian":"Ø¯ÙÙ","NN12-persian":"Ø­ÙØª","MMM1-persian":"Ø­ÙÙ","MMM2-persian":"Ø«ÙØ±","MMM3-persian":"Ø¬ÙØ²Ø§","MMM4-persian":"Ø³Ø±Ø·Ø§Ù","MMM5-persian":"Ø§Ø³Ø¯","MMM6-persian":"Ø³ÙØ¨ÙÙ","MMM7-persian":"ÙÛØ²Ø§Ù","MMM8-persian":"Ø¹ÙØ±Ø¨","MMM9-persian":"ÙÙØ³","MMM10-persian":"Ø¬Ø¯Û","MMM11-persian":"Ø¯ÙÙ","MMM12-persian":"Ø­ÙØª","MMMM1-persian":"Ø­ÙÙ","MMMM2-persian":"Ø«ÙØ±","MMMM3-persian":"Ø¬ÙØ²Ø§","MMMM4-persian":"Ø³Ø±Ø·Ø§Ù","MMMM5-persian":"Ø§Ø³Ø¯","MMMM6-persian":"Ø³ÙØ¨ÙÙ","MMMM7-persian":"ÙÛØ²Ø§Ù","MMMM8-persian":"Ø¹ÙØ±Ø¨","MMMM9-persian":"ÙÙØ³","MMMM10-persian":"Ø¬Ø¯Û","MMMM11-persian":"Ø¯ÙÙ","MMMM12-persian":"Ø­ÙØª"};
ilib.data.sysres_ff = {"generated":true,"NN1":"si","NN2":"co","NN3":"mb","NN4":"se","NN5":"du","NN6":"ko","NN7":"mo","NN8":"ju","NN9":"sl","NN10":"ya","NN11":"jo","NN12":"bo","MMM1":"sii","MMM2":"col","MMM3":"mbo","MMM4":"see","MMM5":"duu","MMM6":"kor","MMM7":"mor","MMM8":"juk","MMM9":"slt","MMM10":"yar","MMM11":"jol","MMM12":"bow","MMMM1":"siilo","MMMM2":"colte","MMMM3":"mbooy","MMMM4":"seeÉto","MMMM5":"duujal","MMMM6":"korse","MMMM7":"morso","MMMM8":"juko","MMMM9":"siilto","MMMM10":"yarkomaa","MMMM11":"jolal","MMMM12":"bowte","E0":"d","E1":"a","E2":"m","E3":"n","E4":"n","E5":"m","E6":"h","EE0":"de","EE1":"aa","EE2":"ma","EE3":"nj","EE4":"na","EE5":"mw","EE6":"hb","EEE0":"dew","EEE1":"aaÉ","EEE2":"maw","EEE3":"nje","EEE4":"naa","EEE5":"mwd","EEE6":"hbi","EEEE0":"dewo","EEEE1":"aaÉnde","EEEE2":"mawbaare","EEEE3":"njeslaare","EEEE4":"naasaande","EEEE5":"mawnde","EEEE6":"hoore-biir","a0":"subaka","a1":"kikiiÉe","G-1":"H-I","G1":"C-I","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_fi = {"N1":"T","N2":"H","N3":"M","N4":"H","N5":"T","N6":"K","N7":"H","N8":"E","N9":"S","N10":"L","N11":"M","N12":"J","NN1":"ta","NN2":"he","NN3":"ma","NN4":"hu","NN5":"to","NN6":"ke","NN7":"he","NN8":"el","NN9":"sy","NN10":"lo","NN11":"ma","NN12":"jo","MMM1":"tam","MMM2":"hel","MMM3":"maa","MMM4":"huh","MMM5":"tou","MMM6":"kes","MMM7":"hei","MMM8":"elo","MMM9":"syy","MMM10":"lok","MMM11":"mar","MMM12":"jou","MMMM1":"tammikuuta","MMMM2":"helmikuuta","MMMM3":"maaliskuuta","MMMM4":"huhtikuuta","MMMM5":"toukokuuta","MMMM6":"kesÃ¤kuuta","MMMM7":"heinÃ¤kuuta","MMMM8":"elokuuta","MMMM9":"syyskuuta","MMMM10":"lokakuuta","MMMM11":"marraskuuta","MMMM12":"joulukuuta","E3":"K","E5":"P","E6":"L","EE0":"su","EE1":"ma","EE2":"ti","EE3":"ke","EE4":"to","EE5":"pe","EE6":"la","EEE0":"sun","EEE1":"maa","EEE2":"tii","EEE3":"kes","EEE4":"tor","EEE5":"per","EEE6":"lau","EEEE0":"sunnuntaina","EEEE1":"maanantaina","EEEE2":"tiistaina","EEEE3":"keskiviikkona","EEEE4":"torstaina","EEEE5":"perjantaina","EEEE6":"lauantaina","a0":"ap.","a1":"ip.","G-1":"eKr.","G1":"jKr.","in {duration}":"{duration} pÃ¤Ã¤stÃ¤","{duration} ago":"{duration} sitten","1#1 year|#{num} years":"1#{num} vuosi|#{num} vuotta","1#1 month|#{num} months":"1#{num} kuukausi|#{num} kuukautta","1#1 week|#{num} weeks":"1#{num} viikko|#{num} viikkoa","1#1 day|#{num} days":"1#{num} pÃ¤ivÃ¤|#{num} pÃ¤ivÃ¤Ã¤","1#1 hour|#{num} hours":"1#{num} tunti|#{num} tuntia","1#1 minute|#{num} minutes":"1#{num} minuutti|#{num} minuuttia","1#1 second|#{num} seconds":"1#{num} sekunti|#{num} sekuntia","1#1 yr|#{num} yrs":"#{num} vuo","1#1 mon|#{num} mons":"#{num} kuu","1#1 wk|#{num} wks":"#{num} vii","durationLongDays":"#{num} pÃ¤i","1#1 hr|#{num} hrs":"#{num} tun","1#1 min|#{num} min":"#{num} min","1#1 sec|#{num} sec":"#{num} sek","durationMediumYears":"#{num} vs","1#1 mo|#{num} mos":"#{num} kk","durationMediumWeeks":"#{num} vk","1#1 dy|#{num} dys":"#{num} pv","durationMediumHours":"#{num} tt","1#1 mi|#{num} min":"#{num} mn","1#1 se|#{num} sec":"#{num} sk","#{num}y":"#{num}v","durationShortMonths":"#{num}k","#{num}w":"#{num}vk","#{num}d":"#{num}p","#{num}h":"#{num}t","durationShortMinutes":"#{num}m","#{num}s":"#{num}s","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" ja "};
ilib.data.sysres_fr = {"MMMM1":"janvier","MMM1":"janv","NN1":"ja","MMMM2":"fÃ©vrier","MMM2":"fÃ©vr","NN2":"fÃ©","MMMM3":"mars","MMM3":"mars","NN3":"ma","MMMM4":"avril","MMM4":"avr","NN4":"av","MMMM5":"mai","MMM5":"mai","NN5":"ma","MMMM6":"juin","MMM6":"juin","NN6":"ju","MMMM7":"juillet","MMM7":"juil","NN7":"ju","MMMM8":"aoÃ»t","MMM8":"aoÃ»t","NN8":"ao","MMMM9":"septembre","MMM9":"sept","NN9":"se","MMMM10":"octobre","MMM10":"oct","NN10":"oc","MMMM11":"novembre","MMM11":"nov","NN11":"no","MMMM12":"dÃ©cembre","MMM12":"dÃ©c","NN12":"dÃ©","EEEE0":"dimanche","EEE0":"dim.","EE0":"di","E0":"D","EEEE1":"lundi","EEE1":"lun.","EE1":"lu","E1":"L","EEEE2":"mardi","EEE2":"mar.","EE2":"ma","E2":"M","EEEE3":"mercredi","EEE3":"mer.","EE3":"me","E3":"M","EEEE4":"jeudi","EEE4":"jeu.","EE4":"je","E4":"J","EEEE5":"vendredi","EEE5":"ven.","EE5":"ve","E5":"V","EEEE6":"samedi","EEE6":"sam.","EE6":"sa","ordinalChoice":"1#1er|#{num}e","a0":"matin","a1":"soir","G-1":"av. J.-C.","G1":"ap. J.-C.","durationShortMillis":"#{num}ms","#{num}s":"#{num}s","durationShortMinutes":"#{num}m","#{num}h":"#{num}h","#{num}d":"#{num}j","#{num}w":"#{num}sm","durationShortMonths":"#{num}mo","#{num}y":"#{num}a","#{num} ms":"#{num} Ms","1#1 se|#{num} sec":"1#{num} se|#{num} ses","1#1 mi|#{num} min":"1#{num} mn|#{num} mns","durationMediumHours":"1#{num} hr|#{num} hrs","1#1 dy|#{num} dys":"1#{num} jr|#{num} jrs","durationMediumWeeks":"1#{num} sm|#{num} sms","1#1 mo|#{num} mos":"1#{num} mo|#{num} mos","durationMediumYears":"1#{num} an|#{num} ans","1#1 sec|#{num} sec":"1#{num} sec|#{num} secs","1#1 min|#{num} min":"1#{num} min|#{num} mins","1#1 hr|#{num} hrs":"1#{num} hr|#{num} hrs","durationLongDays":"1#{num} jr|#{num} jrs","1#1 wk|#{num} wks":"1#{num} sem|#{num} sems","1#1 mon|#{num} mons":"1#{num} mois|#{num} mois","1#1 yr|#{num} yrs":"1#{num} an|#{num} ans","1#1 millisecond|#{num} milliseconds":"1#{num} milliseconde|#{num} millisecondes","1#1 second|#{num} seconds":"1#{num} seconde|#{num} secondes","1#1 minute|#{num} minutes":"1#{num} minute|#{num} minutes","1#1 hour|#{num} hours":"1#{num} heure|#{num} heures","1#1 day|#{num} days":"1#{num} jour|#{num} jours","1#1 week|#{num} weeks":"1#{num} semaine|#{num} semaines","1#1 month|#{num} months":"#{num} mois","1#1 year|#{num} years":"1#{num} an|#{num} ans","{duration} ago":"il y a {duration}","in {duration}":"dans {duration}","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" et "};
ilib.data.sysres_ga = {"generated":true,"NN1":"Ea","NN3":"MÃ¡","NN4":"Ai","NN5":"Be","NN6":"Me","NN7":"IÃº","NN8":"LÃº","NN9":"MF","NN10":"DF","NN11":"Sa","NN12":"No","MMM1":"Ean","MMM2":"Feabh","MMM3":"MÃ¡rta","MMM4":"Aib","MMM5":"Beal","MMM6":"Meith","MMM7":"IÃºil","MMM8":"LÃºn","MMM9":"MFÃ³mh","MMM10":"DFÃ³mh","MMM11":"Samh","MMM12":"Noll","MMMM1":"EanÃ¡ir","MMMM2":"Feabhra","MMMM3":"MÃ¡rta","MMMM4":"AibreÃ¡n","MMMM5":"Bealtaine","MMMM6":"Meitheamh","MMMM7":"IÃºil","MMMM8":"LÃºnasa","MMMM9":"MeÃ¡n FÃ³mhair","MMMM10":"Deireadh FÃ³mhair","MMMM11":"Samhain","MMMM12":"Nollaig","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"Do","EE1":"Lu","EE2":"MÃ¡","EE3":"CÃ©","EE4":"DÃ©","EE5":"Ao","EEE0":"Domh","EEE1":"Luan","EEE2":"MÃ¡irt","EEE3":"CÃ©ad","EEE4":"DÃ©ar","EEE5":"Aoine","EEE6":"Sath","EEEE0":"DÃ© Domhnaigh","EEEE1":"DÃ© Luain","EEEE2":"DÃ© MÃ¡irt","EEEE3":"DÃ© CÃ©adaoin","EEEE4":"DÃ©ardaoin","EEEE5":"DÃ© hAoine","EEEE6":"DÃ© Sathairn","a0":"a.m.","a1":"p.m.","G-1":"RC","G1":"AD","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_gl = {"generated":true,"NN1":"Xa","NN4":"Ab","NN6":"Xu","NN7":"Xu","NN8":"Ag","NN10":"Ou","MMM1":"Xan","MMM4":"Abr","MMM5":"Mai","MMM6":"XuÃ±","MMM7":"Xul","MMM8":"Ago","MMM9":"Set","MMM10":"Out","MMMM1":"Xaneiro","MMMM2":"Febreiro","MMMM3":"Marzo","MMMM4":"Abril","MMMM5":"Maio","MMMM6":"XuÃ±o","MMMM7":"Xullo","MMMM8":"Agosto","MMMM9":"Setembro","MMMM10":"Outubro","MMMM11":"Novembro","MMMM12":"Decembro","E0":"D","E1":"L","E2":"M","E3":"M","E4":"X","E5":"V","EE0":"Do","EE1":"Lu","EE2":"Mt","EE3":"Mc","EE4":"Xv","EE5":"Ve","EE6":"SÃ¡","EEE0":"Dom","EEE1":"Lun","EEE2":"Mar","EEE3":"MÃ©r","EEE4":"Xov","EEE5":"Ven","EEE6":"SÃ¡b","EEEE0":"Domingo","EEEE1":"Luns","EEEE2":"Martes","EEEE3":"MÃ©rcores","EEEE4":"Xoves","EEEE5":"Venres","EEEE6":"SÃ¡bado","a0":"a.m.","a1":"p.m.","G-1":"a.C.","G1":"d.C.","1#1 se|#{num} sec":"#{num} se","1#1 sec|#{num} sec":"#{num} seg","1#1 second|#{num} seconds":"one#{num} segundo|#{num} segundos","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} min","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minuto|#{num} minutos","durationMediumHours":"#{num} ho","1#1 hr|#{num} hrs":"one#{num} hora|#{num} hor","1#1 hour|#{num} hours":"one#{num} hora|#{num} horas","1#1 dy|#{num} dys":"one#{num} dÃ­a|#{num} dÃ­","durationLongDays":"one#{num} dÃ­a|#{num} dÃ­as","1#1 day|#{num} days":"one#{num} dÃ­a|#{num} dÃ­as","#{num}w":"#{num}s","durationMediumWeeks":"one#{num} se|#{num} sem","1#1 wk|#{num} wks":"#{num} sem","1#1 week|#{num} weeks":"one#{num} semana|#{num} semanas","durationShortMonths":"#{num}m","1#1 mo|#{num} mos":"one#{num} mes|#{num} me","1#1 mon|#{num} mons":"#{num} mes","1#1 month|#{num} months":"one#{num} mes|#{num} meses","#{num}y":"#{num}a","durationMediumYears":"one#{num} ano|#{num} an","1#1 yr|#{num} yrs":"one#{num} ano|#{num} anos","1#1 year|#{num} years":"one#{num} ano|#{num} anos","{duration} ago":"hai {duration}","in {duration}":"en {duration}","finalSeparatorFull":" e ","separatorLong":" "};
ilib.data.sysres_ha = {"generated":true,"NN2":"Fa","NN4":"Af","NN6":"Yu","NN7":"Yu","NN8":"Ag","NN9":"Sa","NN10":"Ok","NN11":"Nu","NN12":"Di","MMM2":"Fab","MMM4":"Afi","MMM6":"Yun","MMM7":"Yul","MMM8":"Agu","MMM9":"Sat","MMM10":"Okt","MMM11":"Nuw","MMM12":"Dis","MMMM1":"Janairu","MMMM2":"Faburairu","MMMM3":"Maris","MMMM4":"Afirilu","MMMM5":"Mayu","MMMM6":"Yuni","MMMM7":"Yuli","MMMM8":"Agusta","MMMM9":"Satumba","MMMM10":"Oktoba","MMMM11":"Nuwamba","MMMM12":"Disamba","E0":"L","E1":"L","E3":"L","E4":"A","E5":"J","E6":"A","EE0":"Lh","EE1":"Li","EE2":"Ta","EE3":"Lr","EE4":"Al","EE5":"Ju","EE6":"As","EEE0":"Lh","EEE1":"Li","EEE2":"Ta","EEE3":"Lr","EEE4":"Al","EEE5":"Ju","EEE6":"As","EEEE0":"Lahadi","EEEE1":"Litinin","EEEE2":"Talata","EEEE3":"Laraba","EEEE4":"Alhamis","EEEE5":"Jumma'a","EEEE6":"Asabar","G-1":"KHAI","G1":"BHAI","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_he = {"NN1":"×× ","NN2":"×¤×","NN3":"××¨","NN4":"××¤","NN5":"××","NN6":"××","NN7":"××","NN8":"××","NN9":"×¡×¤","NN10":"××","NN11":"× ×","NN12":"××¦","MMM1":"×× ×","MMM2":"×¤××¨","MMM3":"××¨×¥","MMM4":"××¤×¨","MMM5":"×××","MMM6":"××× ","MMM7":"×××","MMM8":"×××","MMM9":"×¡×¤×","MMM10":"×××§","MMM11":"× ××","MMM12":"××¦×","MMMM1":"×× ×××¨","MMMM2":"×¤××¨×××¨","MMMM3":"××¨×¥","MMMM4":"××¤×¨××","MMMM5":"×××","MMMM6":"××× ×","MMMM7":"××××","MMMM8":"×××××¡×","MMMM9":"×¡×¤××××¨","MMMM10":"×××§××××¨","MMMM11":"× ×××××¨","MMMM12":"××¦×××¨","E0":"×'","E1":"×'","E2":"×'","E3":"×'","E4":"×'","E5":"××³","E6":"×©×³","EE0":"×'","EE1":"×'","EE2":"×'","EE3":"×'","EE4":"×'","EE5":"×'","EE6":"×©'","EEE0":"××× ××³","EEE1":"××× ××³","EEE2":"××× ××³","EEE3":"××× ××³","EEE4":"××× ××³","EEE5":"××× ××³","EEE6":"×©××ª","EEEE0":"××× ×¨××©××","EEEE1":"××× ×©× ×","EEEE2":"××× ×©×××©×","EEEE3":"××× ×¨×××¢×","EEEE4":"××× ××××©×","EEEE5":"××× ×©××©×","EEEE6":"××× ×©××ª","a0":"××¤× ××´×¦","a1":"××××´×¦","G-1":"××¤× ××´×¡","G1":"××¡××´× ","#{num}s":"#{num}×©","1#1 se|#{num} sec":"one#{num} ×©× ×³|two#{num} ×©× ×³|many#{num} ×©× ×³|#{num} ×©× ","1#1 sec|#{num} sec":"one#{num} ×©× ××|many#â{num} ×©× ×|#{num} ×©× ×","1#1 second|#{num} seconds":"one#{num} ×©× ××|many#{num} ×©× ×××ª|#{num} ×©× ×××ª","durationShortMinutes":"#{num}×","1#1 mi|#{num} min":"#{num} ××§×³","1#1 min|#{num} min":"one#{num} ××§×|#{num} ××§××ª","1#1 minute|#{num} minutes":"one#{num} ××§×|#{num} ××§××ª","#{num}h":"#{num}×©","durationMediumHours":"one#{num} ×©×¢×|#{num} ×©×¢","1#1 hr|#{num} hrs":"one#{num} ×©×¢×|#{num} ×©×¢××ª","1#1 hour|#{num} hours":"one#{num} ×©×¢×|#{num} ×©×¢××ª","#{num}d":"#â{num} ×××","1#1 dy|#{num} dys":"one#{num} ×××|#{num} ××","durationLongDays":"one#â{num} ×××|#{num} ××××","1#1 day|#{num} days":"one#â{num} ×××|#{num} ××××","#{num}w":"#{num}×©","durationMediumWeeks":"#{num} ×©×","1#1 wk|#{num} wks":"one#{num} ×©×××¢|#{num} ×©××","1#1 week|#{num} weeks":"one#{num} ×©×××¢|#{num} ×©×××¢××ª","durationShortMonths":"#{num}×","1#1 mo|#{num} mos":"#{num} ××","1#1 mon|#{num} mons":"one#{num} ××××©|#{num} ×××","1#1 month|#{num} months":"one#{num} ××××©|#{num} ××××©××","#{num}y":"#{num}×©","durationMediumYears":"one#{num} ×©× ×|#{num} ×©× ","1#1 yr|#{num} yrs":"one#{num} ×©× ×|#{num} ×©× ××","1#1 year|#{num} years":"one#{num} ×©× ×|#{num} ×©× ××","{duration} ago":"××¤× × {duration}","in {duration}":"×{duration}","finalSeparatorFull":" ×","separatorLong":" "};
ilib.data.sysres_hi = {"generated":true,"NN1":"à¤à¤¨","NN2":"à¤«à¤°","NN3":"à¤®à¤¾","NN4":"à¤à¤ª","NN5":"à¤®à¤","NN6":"à¤à¥","NN7":"à¤à¥","NN8":"à¤à¤","NN9":"à¤¸à¤¿","NN10":"à¤à¤","NN11":"à¤¨à¤µ","NN12":"à¤¦à¤¿","MMM1":"à¤à¤¨à¤µà¤°à¥","MMM2":"à¤«à¤°à¤µà¤°à¥","MMM3":"à¤®à¤¾à¤°à¥à¤","MMM4":"à¤à¤ªà¥à¤°à¥à¤²","MMM5":"à¤®à¤","MMM6":"à¤à¥à¤¨","MMM7":"à¤à¥à¤²à¤¾à¤","MMM8":"à¤à¤à¤¸à¥à¤¤","MMM9":"à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°","MMM10":"à¤à¤à¥à¤¤à¥à¤¬à¤°","MMM11":"à¤¨à¤µà¤®à¥à¤¬à¤°","MMM12":"à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°","MMMM1":"à¤à¤¨à¤µà¤°à¥","MMMM2":"à¤«à¤°à¤µà¤°à¥","MMMM3":"à¤®à¤¾à¤°à¥à¤","MMMM4":"à¤à¤ªà¥à¤°à¥à¤²","MMMM5":"à¤®à¤","MMMM6":"à¤à¥à¤¨","MMMM7":"à¤à¥à¤²à¤¾à¤","MMMM8":"à¤à¤à¤¸à¥à¤¤","MMMM9":"à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°","MMMM10":"à¤à¤à¥à¤¤à¥à¤¬à¤°","MMMM11":"à¤¨à¤µà¤®à¥à¤¬à¤°","MMMM12":"à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°","E0":"à¤°","E1":"à¤¸à¥","E2":"à¤®à¤","E3":"à¤¬à¥","E4":"à¤à¥","E5":"à¤¶à¥","E6":"à¤¶","EE0":"à¤°","EE1":"à¤¸à¥","EE2":"à¤®à¤","EE3":"à¤¬à¥","EE4":"à¤à¥","EE5":"à¤¶à¥","EE6":"à¤¶","EEE0":"à¤°à¤µà¤¿.","EEE1":"à¤¸à¥à¤®.","EEE2":"à¤®à¤à¤à¤².","EEE3":"à¤¬à¥à¤§.","EEE4":"à¤¬à¥à¤¹.","EEE5":"à¤¶à¥à¤à¥à¤°.","EEE6":"à¤¶à¤¨à¤¿.","EEEE0":"à¤°à¤µà¤¿à¤µà¤¾à¤°","EEEE1":"à¤¸à¥à¤®à¤µà¤¾à¤°","EEEE2":"à¤®à¤à¤à¤²à¤µà¤¾à¤°","EEEE3":"à¤¬à¥à¤§à¤µà¤¾à¤°","EEEE4":"à¤¬à¥à¤¹à¤¸à¥à¤ªà¤¤à¤¿à¤µà¤¾à¤°","EEEE5":"à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°","EEEE6":"à¤¶à¤¨à¤¿à¤µà¤¾à¤°","a0":"à¤ªà¥à¤°à¥à¤µà¤¾à¤¹à¥à¤¨","a1":"à¤à¤ªà¤°à¤¾à¤¹à¥à¤¨","G-1":"à¤à¤¸à¤¾à¤ªà¥à¤°à¥à¤µ","G1":"à¤¸à¤¨","#{num}s":"#{num}à¤¸","1#1 se|#{num} sec":"#{num} à¤¸à¥","1#1 sec|#{num} sec":"#{num} à¤¸à¥à¤","1#1 second|#{num} seconds":"#{num} à¤¸à¥à¤à¤à¤¡","durationShortMinutes":"#{num}à¤®","1#1 mi|#{num} min":"#{num} à¤®à¤¿","1#1 min|#{num} min":"#{num} à¤®à¤¿à¤¨à¤","1#1 minute|#{num} minutes":"#{num} à¤®à¤¿à¤¨à¤","#{num}h":"#{num}à¤","durationMediumHours":"one#{num} à¤à¤.|#{num} à¤à¤","1#1 hr|#{num} hrs":"one#{num} à¤à¤à¤à¤¾|#{num} à¤à¤à¤à¥","1#1 hour|#{num} hours":"one#{num} à¤à¤à¤à¤¾|#{num} à¤à¤à¤à¥","#{num}d":"#{num}à¤¦","1#1 dy|#{num} dys":"#{num} à¤¦à¤¿.","durationLongDays":"#{num} à¤¦à¤¿à¤¨","1#1 day|#{num} days":"#{num} à¤¦à¤¿à¤¨","#{num}w":"#{num}à¤¸","durationMediumWeeks":"#{num} à¤¸à¤ª","1#1 wk|#{num} wks":"#{num} à¤¸à¤ªà¥","1#1 week|#{num} weeks":"#{num} à¤¸à¤ªà¥à¤¤à¤¾à¤¹","durationShortMonths":"#{num}à¤®","1#1 mo|#{num} mos":"#{num} à¤®à¤¹","1#1 mon|#{num} mons":"#{num} à¤®à¤¹à¥","1#1 month|#{num} months":"one#{num} à¤®à¤¹à¥à¤¨à¤¾|#{num} à¤®à¤¹à¥à¤¨à¥","#{num}y":"#{num}à¤¸","durationMediumYears":"#{num} à¤¸à¤¾à¤²","1#1 yr|#{num} yrs":"#{num} à¤¸à¤¾à¤²","1#1 year|#{num} years":"#{num} à¤¸à¤¾à¤²","{duration} ago":"{duration} à¤ªà¤¹à¤²à¥","in {duration}":"{duration} à¤®à¥à¤","finalSeparatorFull":", à¤à¤° ","separatorLong":" "};
ilib.data.sysres_hr = {"generated":true,"NN1":"si","NN2":"ve","NN3":"oÅ¾","NN4":"tr","NN5":"sv","NN6":"li","NN7":"sr","NN8":"ko","NN9":"ru","NN10":"li","NN11":"st","NN12":"pr","MMM1":"sij","MMM2":"velj","MMM3":"oÅ¾u","MMM4":"tra","MMM5":"svi","MMM6":"lip","MMM7":"srp","MMM8":"kol","MMM9":"ruj","MMM10":"lis","MMM11":"stu","MMM12":"pro","MMMM1":"sijeÄnja","MMMM2":"veljaÄe","MMMM3":"oÅ¾ujka","MMMM4":"travnja","MMMM5":"svibnja","MMMM6":"lipnja","MMMM7":"srpnja","MMMM8":"kolovoza","MMMM9":"rujna","MMMM10":"listopada","MMMM11":"studenoga","MMMM12":"prosinca","E0":"N","E1":"P","E2":"U","E3":"S","E4":"Ä","E5":"P","EE0":"ne","EE1":"po","EE2":"ut","EE3":"sr","EE4":"Äe","EE5":"pe","EE6":"su","EEE0":"ned","EEE1":"pon","EEE2":"uto","EEE3":"sri","EEE4":"Äet","EEE5":"pet","EEE6":"sub","EEEE0":"nedjelja","EEEE1":"ponedjeljak","EEEE2":"utorak","EEEE3":"srijeda","EEEE4":"Äetvrtak","EEEE5":"petak","EEEE6":"subota","G-1":"p. n. e.","G1":"A. D.","1#1 se|#{num} sec":"#{num} se","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"few#{num} sekunde|many#{num} sekundi|#{num} sekunda","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} min","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"few#{num} minute|#{num} minuta","#{num}h":"#{num}s","durationMediumHours":"one#{num} sat|#{num} sa","1#1 hr|#{num} hrs":"one#{num} sat|many#{num} sati|#{num} sata","1#1 hour|#{num} hours":"one#{num} sat|many#{num} sati|#{num} sata","1#1 dy|#{num} dys":"few#{num} da|many#{num} da|#{num} dan","durationLongDays":"few#{num} dana|many#{num} dana|#{num} dan","1#1 day|#{num} days":"few#{num} dana|many#{num} dana|#{num} dan","#{num}w":"#{num}t","durationMediumWeeks":"#{num} tj.","1#1 wk|#{num} wks":"#{num} tje","1#1 week|#{num} weeks":"few#{num} tjedna|many#{num} tjedana|#{num} tjedan","durationShortMonths":"#{num}m","1#1 mo|#{num} mos":"#{num} mj.","1#1 mon|#{num} mons":"#{num} mje","1#1 month|#{num} months":"few#{num} mjeseca|many#{num} mjeseci|#{num} mjesec","#{num}y":"#{num}g","durationMediumYears":"#{num} g.","1#1 yr|#{num} yrs":"#{num} god","1#1 year|#{num} years":"few#{num} godine|#{num} godina","{duration} ago":"prije {duration}","in {duration}":"za {duration}","finalSeparatorFull":" i ","separatorLong":" "};
ilib.data.sysres_hu = {"generated":true,"NN1":"ja","NN2":"fe","NN3":"mÃ¡","NN4":"Ã¡p","NN5":"mÃ¡","NN6":"jÃº","NN7":"jÃº","NN8":"au","NN9":"sz","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jan.","MMM2":"febr.","MMM3":"mÃ¡rc.","MMM4":"Ã¡pr.","MMM5":"mÃ¡j.","MMM6":"jÃºn.","MMM7":"jÃºl.","MMM8":"aug.","MMM9":"szept.","MMM10":"okt.","MMM11":"nov.","MMM12":"dec.","MMMM1":"januÃ¡r","MMMM2":"februÃ¡r","MMMM3":"mÃ¡rcius","MMMM4":"Ã¡prilis","MMMM5":"mÃ¡jus","MMMM6":"jÃºnius","MMMM7":"jÃºlius","MMMM8":"augusztus","MMMM9":"szeptember","MMMM10":"oktÃ³ber","MMMM11":"november","MMMM12":"december","E0":"V","E1":"H","E2":"K","E3":"Sz","E4":"Cs","E5":"P","E6":"Sz","EE0":"v","EE1":"h","EE2":"k","EE3":"sz","EE4":"cs","EE5":"p","EE6":"sz","EEE0":"v","EEE1":"h","EEE2":"k","EEE3":"sze","EEE4":"cs","EEE5":"p","EEE6":"szo","EEEE0":"vasÃ¡rnap","EEEE1":"hÃ©tfÅ","EEEE2":"kedd","EEEE3":"szerda","EEEE4":"csÃ¼tÃ¶rtÃ¶k","EEEE5":"pÃ©ntek","EEEE6":"szombat","a0":"de.","a1":"du.","G-1":"i. e.","G1":"i. sz.","#{num}s":"#{num}m","1#1 se|#{num} sec":"#{num} mp","1#1 sec|#{num} sec":"#{num} mÃ¡s","1#1 second|#{num} seconds":"#{num} mÃ¡sodperc","durationShortMinutes":"#{num}p","1#1 mi|#{num} min":"#{num} pe","1#1 min|#{num} min":"#{num} perc","1#1 minute|#{num} minutes":"#{num} perc","#{num}h":"#{num}Ã³","durationMediumHours":"#{num} Ã³ra","1#1 hr|#{num} hrs":"#{num} Ã³ra","1#1 hour|#{num} hours":"#{num} Ã³ra","#{num}d":"#{num}n","1#1 dy|#{num} dys":"#{num} nap","durationLongDays":"#{num} nap","1#1 day|#{num} days":"#{num} nap","#{num}w":"#{num}h","durationMediumWeeks":"#{num} hÃ©t","1#1 wk|#{num} wks":"#{num} hÃ©t","1#1 week|#{num} weeks":"#{num} hÃ©t","durationShortMonths":"#{num}h","1#1 mo|#{num} mos":"#{num} hÃ³","1#1 mon|#{num} mons":"#{num} hÃ³n","1#1 month|#{num} months":"#{num} hÃ³nap","#{num}y":"#{num}Ã©","durationMediumYears":"#{num} Ã©v","1#1 yr|#{num} yrs":"#{num} Ã©v","1#1 year|#{num} years":"#{num} Ã©v","{duration} ago":"{duration}ja","in {duration}":"{duration} mÃºlva","finalSeparatorFull":" Ã©s ","separatorLong":" "};
ilib.data.sysres_hy = {"generated":true,"NN1":"Õ°Õ¶","NN2":"ÖÕ¿","NN3":"Õ´Ö","NN4":"Õ¡Õº","NN5":"Õ´Õµ","NN6":"Õ°Õ¶","NN7":"Õ°Õ¬","NN8":"ÖÕ£","NN9":"Õ½Õ¥","NN10":"Õ°Õ¸","NN11":"Õ¶Õ¸","NN12":"Õ¤Õ¥","MMM1":"Õ°Õ¶Õ¾","MMM2":"ÖÕ¿Õ¾","MMM3":"Õ´ÖÕ¿","MMM4":"Õ¡ÕºÖ","MMM5":"Õ´ÕµÕ½","MMM6":"Õ°Õ¶Õ½","MMM7":"Õ°Õ¬Õ½","MMM8":"ÖÕ£Õ½","MMM9":"Õ½Õ¥Õº","MMM10":"Õ°Õ¸Õ¯","MMM11":"Õ¶Õ¸Õµ","MMM12":"Õ¤Õ¥Õ¯","MMMM1":"Õ°Õ¸ÖÕ¶Õ¾Õ¡Ö","MMMM2":"ÖÕ¥Õ¿ÖÕ¾Õ¡Ö","MMMM3":"Õ´Õ¡ÖÕ¿","MMMM4":"Õ¡ÕºÖÕ«Õ¬","MMMM5":"Õ´Õ¡ÕµÕ«Õ½","MMMM6":"Õ°Õ¸ÖÕ¶Õ«Õ½","MMMM7":"Õ°Õ¸ÖÕ¬Õ«Õ½","MMMM8":"ÖÕ£Õ¸Õ½Õ¿Õ¸Õ½","MMMM9":"Õ½Õ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö","MMMM10":"Õ°Õ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö","MMMM11":"Õ¶Õ¸ÕµÕ¥Õ´Õ¢Õ¥Ö","MMMM12":"Õ¤Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"Õ¯Õ«","EE1":"Õ¥Ö","EE2":"Õ¥Ö","EE3":"Õ¹Õ¸","EE4":"Õ°Õ¶","EE5":"Õ¸Ö","EE6":"Õ·Õ¡","EEE0":"Õ¯Õ«Ö","EEE1":"Õ¥ÖÕ¯","EEE2":"Õ¥ÖÖ","EEE3":"Õ¹Õ¸Ö","EEE4":"Õ°Õ¶Õ£","EEE5":"Õ¸ÖÖ","EEE6":"Õ·Õ¡Õ¢","EEEE0":"Õ¯Õ«ÖÕ¡Õ¯Õ«","EEEE1":"Õ¥ÖÕ¯Õ¸ÖÕ·Õ¡Õ¢Õ©Õ«","EEEE2":"Õ¥ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«","EEEE3":"Õ¹Õ¸ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«","EEEE4":"Õ°Õ«Õ¶Õ£Õ·Õ¡Õ¢Õ©Õ«","EEEE5":"Õ¸ÖÖÕ¢Õ¡Õ©","EEEE6":"Õ·Õ¡Õ¢Õ¡Õ©","a0":"Ô±Õ¼â¤","a1":"Ô¿Õ¥â¤","G-1":"Õâ¤Ô¹â¤Ô±â¤","G1":"Õâ¤Ô¹â¤","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_id = {"NN5":"Me","NN8":"Ag","NN10":"Ok","MMM5":"Mei","MMM8":"Agt","MMM10":"Okt","MMM12":"Des","MMMM1":"Januari","MMMM2":"Februari","MMMM3":"Maret","MMMM5":"Mei","MMMM6":"Juni","MMMM7":"Juli","MMMM8":"Agustus","MMMM10":"Oktober","MMMM12":"Desember","E0":"M","E1":"S","E2":"S","E3":"R","E4":"K","E5":"J","EE0":"Mi","EE1":"Se","EE2":"Se","EE3":"Ra","EE4":"Ka","EE5":"Ju","EEE0":"Min","EEE1":"Sen","EEE2":"Sel","EEE3":"Rab","EEE4":"Kam","EEE5":"Jum","EEE6":"Sab","EEEE0":"Minggu","EEEE1":"Senin","EEEE2":"Selasa","EEEE3":"Rabu","EEEE4":"Kamis","EEEE5":"Jumat","EEEE6":"Sabtu","a0":"AM","a1":"PM","G-1":"SM","G1":"M","in {duration}":"dalam {duration}","{duration} ago":"{duration} yang lalu","1#1 year|#{num} years":"#{num} tahun","1#1 month|#{num} months":"#{num} bulan","1#1 week|#{num} weeks":"#{num} minggu","1#1 day|#{num} days":"#{num} hari","1#1 hour|#{num} hours":"#{num} jam","1#1 minute|#{num} minutes":"#{num} menit","1#1 second|#{num} seconds":"#{num} detik","1#1 yr|#{num} yrs":"#{num} thn","1#1 mon|#{num} mons":"#{num} bln","1#1 wk|#{num} wks":"#{num} mggu","durationLongDays":"#{num} hari","1#1 hr|#{num} hrs":"#{num} jam","1#1 min|#{num} min":"#{num} mnt","1#1 sec|#{num} sec":"#{num} dtk","durationMediumYears":"#{num} th","1#1 mo|#{num} mos":"#{num} bl","durationMediumWeeks":"#{num} mg","1#1 dy|#{num} dys":"#{num} hr","durationMediumHours":"#{num} ja","1#1 mi|#{num} min":"#{num} mn","1#1 se|#{num} sec":"#{num} dt","#{num}y":"#{num}t","durationShortMonths":"#{num}b","#{num}w":"#{num}m","#{num}d":"#{num}h","#{num}h":"#{num}j","durationShortMinutes":"#{num}m","#{num}s":"#{num}d","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":", dan ","durationShortMillis":"#{num}m"};
ilib.data.sysres_it = {"MMMM1":"gennaio","MMM1":"gen","NN1":"ge","N1":"G","MMMM2":"febbraio","MMM2":"feb","NN2":"fe","MMMM3":"marzo","MMM3":"mar","NN3":"ma","MMMM4":"aprile","MMM4":"apr","NN4":"ap","MMMM5":"maggio","MMM5":"mag","NN5":"ma","MMMM6":"giugno","MMM6":"giu","NN6":"gi","N6":"G","MMMM7":"luglio","MMM7":"lug","NN7":"lu","N7":"L","MMMM8":"agosto","MMM8":"ago","NN8":"ag","MMMM9":"settembre","MMM9":"set","NN9":"se","MMMM10":"ottobre","MMM10":"ott","NN10":"ot","MMMM11":"novembre","MMM11":"nov","NN11":"no","MMMM12":"dicembre","MMM12":"dic","NN12":"di","EEEE0":"domenica","EEE0":"dom","EE0":"do","E0":"D","EEEE1":"lunedÃ¬","EEE1":"lun","EE1":"lu","E1":"L","EEEE2":"martedÃ¬","EEE2":"mar","EE2":"ma","E2":"M","EEEE3":"mercoledÃ¬","EEE3":"mer","EE3":"me","E3":"M","EEEE4":"giovedÃ¬","EEE4":"gio","EE4":"gi","E4":"G","EEEE5":"venerdÃ¬","EEE5":"ven","EE5":"ve","E5":"V","EEEE6":"sabato","EEE6":"sab","EE6":"sa","ordinalChoice":"#{num} Âº","a0":"AM","a1":"PM","G-1":"aC","G1":"dC","durationShortMillis":"#{num}ms","#{num}s":"#{num}s","durationShortMinutes":"#{num}m","#{num}h":"#{num}o","#{num}d":"#{num}g","#{num}w":"#{num}st","durationShortMonths":"#{num}me","#{num}y":"#{num}a","#{num} ms":"#{num} ms","1#1 se|#{num} sec":"#{num} se","1#1 mi|#{num} min":"#{num} mn","durationMediumHours":"#{num} h","1#1 dy|#{num} dys":"1#{num} g|#{num} gg","durationMediumWeeks":"#{num} set","1#1 mo|#{num} mos":"#{num} me","durationMediumYears":"#{num} an","1#1 sec|#{num} sec":"#{num} sec","1#1 min|#{num} min":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","durationLongDays":"1#{num} g|#{num} gg","1#1 wk|#{num} wks":"#{num} sett","1#1 mon|#{num} mons":"1#{num} mese|#{num} mesi","1#1 yr|#{num} yrs":"1#{num} anno|#{num} anni","1#1 millisecond|#{num} milliseconds":"1#{num} millisecondo|#{num} millisecondi","1#1 second|#{num} seconds":"1#{num} secondo|#{num} secondi","1#1 minute|#{num} minutes":"1#{num} minuto|#{num} minuti","1#1 hour|#{num} hours":"1#{num} ora|#{num} ore","1#1 day|#{num} days":"1#{num} giorno|#{num} giorni","1#1 week|#{num} weeks":"1#{num} settimana|#{num} settimane","1#1 month|#{num} months":"1#{num} mese|#{num} mesi","1#1 year|#{num} years":"1#{num} anno|#{num} anni","in {duration}":"tra {duration}","{duration} ago":"{duration} fa","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":", e "};
ilib.data.sysres_ja = {"MMMM1":"1","MMM1":"1","NN1":"1","N1":"ä¸","MMMM2":"2","MMM2":"2","NN2":"2","N2":"äº","MMMM3":"3","MMM3":"3","NN3":"3","N3":"ä¸","MMMM4":"4","MMM4":"4","NN4":"4","N4":"å","MMMM5":"5","MMM5":"5","NN5":"5","N5":"äº","MMMM6":"6","MMM6":"6","NN6":"6","N6":"å­","MMMM7":"7","MMM7":"7","NN7":"7","N7":"ä¸","MMMM8":"8","MMM8":"8","NN8":"8","N8":"å«","MMMM9":"9","MMM9":"9","NN9":"9","N9":"ä¹","MMMM10":"10","MMM10":"10","NN10":"10","N10":"å","MMMM11":"11","MMM11":"11","NN11":"11","N11":"åä¸","MMMM12":"12","MMM12":"12","NN12":"12","N12":"åäº","EEEE0":"æ¥ææ¥","EEE0":"æ¥ææ¥","EE0":"æ¥","E0":"æ¥","EEEE1":"æææ¥","EEE1":"æææ¥","EE1":"æ","E1":"æ","EEEE2":"ç«ææ¥","EEE2":"ç«ææ¥","EE2":"ç«","E2":"ç«","EEEE3":"æ°´ææ¥","EEE3":"æ°´ææ¥","EE3":"æ°´","E3":"æ°´","EEEE4":"æ¨ææ¥","EEE4":"æ¨ææ¥","EE4":"æ¨","E4":"æ¨","EEEE5":"éææ¥","EEE5":"éææ¥","EE5":"é","E5":"é","EEEE6":"åææ¥","EEE6":"åææ¥","EE6":"å","E6":"å","ordinalChoice":"#{num}","a0":"åå","a1":"åå¾","G-1":"ç´åå","G1":"ç´å","durationShortMillis":"#{num}ããªç§","#{num}s":"#{num}ç§","durationShortMinutes":"#{num}å","#{num}h":"#{num}æé","#{num}d":"#{num}æ¥","#{num}w":"#{num}é±é","durationShortMonths":"#{num}ã¶æ","#{num}y":"#{num}å¹´","#{num} ms":"#{num}ããªç§","1#1 se|#{num} sec":"#{num}ç§","1#1 mi|#{num} min":"#{num}å","durationMediumHours":"#{num}æé","1#1 dy|#{num} dys":"#{num}æ¥","durationMediumWeeks":"#{num}é±é","1#1 mo|#{num} mos":"#{num}ã¶æ","durationMediumYears":"#{num}å¹´","1#1 sec|#{num} sec":"#{num}ç§","1#1 min|#{num} min":"#{num}å","1#1 hr|#{num} hrs":"#{num}æé","durationLongDays":"#{num}æ¥","1#1 wk|#{num} wks":"#{num}é±é","1#1 mon|#{num} mons":"#{num}ã¶æ","1#1 yr|#{num} yrs":"#{num}å¹´","1#1 millisecond|#{num} milliseconds":"#{num}ããªç§","1#1 second|#{num} seconds":"#{num}ç§","1#1 minute|#{num} minutes":"#{num}å","1#1 hour|#{num} hours":"#{num}æé","1#1 day|#{num} days":"#{num}æ¥","1#1 week|#{num} weeks":"#{num}é±é","1#1 month|#{num} months":"#{num}ã¶æ","1#1 year|#{num} years":"#{num}å¹´","{duration} ago":"{duration}å","in {duration}":"{duration}ã§","separatorShort":"","separatorMedium":"","separatorLong":"ã","separatorFull":"ã","finalSeparatorFull":"ã"};
ilib.data.sysres_ka = {"generated":true,"NN1":"áá","NN2":"áá","NN3":"áá","NN4":"áá","NN5":"áá","NN6":"áá","NN7":"áá","NN8":"áá","NN9":"á¡á","NN10":"áá¥","NN11":"áá","NN12":"áá","MMM1":"ááá","MMM2":"ááá","MMM3":"ááá ","MMM4":"ááá ","MMM5":"ááá","MMM6":"ááá","MMM7":"ááá","MMM8":"ááá","MMM9":"á¡áá¥","MMM10":"áá¥á¢","MMM11":"ááá","MMM12":"ááá","MMMM1":"áááááá á","MMMM2":"ááááá áááá","MMMM3":"ááá á¢á","MMMM4":"ááá ááá","MMMM5":"áááá¡á","MMMM6":"ááááá¡á","MMMM7":"ááááá¡","MMMM8":"ááááá¡á¢á","MMMM9":"á¡áá¥á¢ááááá á","MMMM10":"áá¥á¢ááááá á","MMMM11":"ááááááá á","MMMM12":"áááááááá á","E0":"á","E1":"á","E2":"á¡","E3":"á","E4":"á®","E5":"á","E6":"á¨","EE0":"áá","EE1":"áá ","EE2":"á¡á","EE3":"áá","EE4":"á®á£","EE5":"áá","EE6":"á¨á","EEE0":"ááá","EEE1":"áá á¨","EEE2":"á¡áá","EEE3":"ááá®","EEE4":"á®á£á","EEE5":"ááá ","EEE6":"á¨áá","EEEE0":"áááá á","EEEE1":"áá á¨ááááá","EEEE2":"á¡ááá¨ááááá","EEEE3":"ááá®á¨ááááá","EEEE4":"á®á£áá¨ááááá","EEEE5":"ááá áá¡áááá","EEEE6":"á¨ááááá","G-1":"á©áááá¡ á¬ááááá¦á ááªá®ááááá","G1":"á©áááá á¬ááááá¦á ááªá®ááá","#{num}s":"#{num}á¬","1#1 sec|#{num} sec":"#{num} á¬ááá","1#1 second|#{num} seconds":"#{num} á¬ááá","durationShortMinutes":"#{num}á¬","1#1 min|#{num} min":"#{num} á¬á£áá","1#1 minute|#{num} minutes":"#{num} á¬á£áá","#{num}h":"#{num}á¡","1#1 hr|#{num} hrs":"#{num} á¡áá","1#1 hour|#{num} hours":"#{num} á¡áááá","#{num}d":"#{num}á","durationLongDays":"#{num} áá¦á","1#1 day|#{num} days":"#{num} áá¦á","#{num}w":"#{num}á","1#1 wk|#{num} wks":"#{num} ááá","1#1 week|#{num} weeks":"#{num} áááá á","durationShortMonths":"#{num}á","1#1 mon|#{num} mons":"#{num} ááá","1#1 month|#{num} months":"#{num} ááá","#{num}y":"#{num}á¬","1#1 yr|#{num} yrs":"#{num} á¬ááá","1#1 year|#{num} years":"#{num} á¬ááá","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":" áá ","separatorLong":" "};
ilib.data.sysres_kk = {"generated":true,"NN1":"ÒÐ°","NN2":"Ð°Ò","NN3":"Ð½Ð°","NN4":"ÑÓ","NN5":"Ð¼Ð°","NN6":"Ð¼Ð°","NN7":"ÑÑ","NN8":"ÑÐ°","NN9":"ÒÑ","NN10":"ÒÐ°","NN11":"ÒÐ°","NN12":"Ð¶Ðµ","MMM1":"ÒÐ°Ò£.","MMM2":"Ð°ÒÐ¿.","MMM3":"Ð½Ð°Ñ.","MMM4":"ÑÓÑ.","MMM5":"Ð¼Ð°Ð¼.","MMM6":"Ð¼Ð°Ñ.","MMM7":"ÑÑÐ».","MMM8":"ÑÐ°Ð¼.","MMM9":"ÒÑÑ.","MMM10":"ÒÐ°Ð·.","MMM11":"ÒÐ°Ñ.","MMM12":"Ð¶ÐµÐ»Ñ.","MMMM1":"ÒÐ°Ò£ÑÐ°Ñ","MMMM2":"Ð°ÒÐ¿Ð°Ð½","MMMM3":"Ð½Ð°ÑÑÑÐ·","MMMM4":"ÑÓÑÑÑ","MMMM5":"Ð¼Ð°Ð¼ÑÑ","MMMM6":"Ð¼Ð°ÑÑÑÐ¼","MMMM7":"ÑÑÐ»Ð´Ðµ","MMMM8":"ÑÐ°Ð¼ÑÐ·","MMMM9":"ÒÑÑÐºÒ¯Ð¹ÐµÐº","MMMM10":"ÒÐ°Ð·Ð°Ð½","MMMM11":"ÒÐ°ÑÐ°ÑÐ°","MMMM12":"Ð¶ÐµÐ»ÑÐ¾ÒÑÐ°Ð½","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"Ð¶Ñ","EE1":"Ð´Ñ","EE2":"ÑÑ","EE3":"ÑÑ","EE4":"Ð±Ñ","EE5":"Ð¶Ð¼","EE6":"ÑÒ»","EEE0":"Ð¶Ñ.","EEE1":"Ð´Ñ.","EEE2":"ÑÑ.","EEE3":"ÑÑ.","EEE4":"Ð±Ñ.","EEE5":"Ð¶Ð¼.","EEE6":"ÑÒ».","EEEE0":"Ð¶ÐµÐºÑÐµÐ½Ñ","EEEE1":"Ð´ÑÐ¹ÑÐµÐ½Ð±Ñ","EEEE2":"ÑÐµÐ¹ÑÐµÐ½Ð±Ñ","EEEE3":"ÑÓÑÐµÐ½Ð±Ñ","EEEE4":"Ð±ÐµÐ¹ÑÐµÐ½Ð±Ñ","EEEE5":"Ð¶Ò±Ð¼Ð°","EEEE6":"ÑÐµÐ½Ð±Ñ","#{num}s":"#{num}Ñ","1#1 sec|#{num} sec":"#{num} ÑÐµÐº","1#1 second|#{num} seconds":"#{num} ÑÐµÐºÑÐ½Ð´","durationShortMinutes":"#{num}Ð¼","1#1 min|#{num} min":"#{num} Ð¼Ð¸Ð½","1#1 minute|#{num} minutes":"#{num} Ð¼Ð¸Ð½ÑÑ","#{num}h":"#{num}Ñ","1#1 hr|#{num} hrs":"#{num} ÑÐ°Ò","1#1 hour|#{num} hours":"#{num} ÑÐ°ÒÐ°Ñ","#{num}d":"#{num}Ñ","durationLongDays":"#{num} ÑÓÑ","1#1 day|#{num} days":"#{num} ÑÓÑÐ»ÑÐº","#{num}w":"#{num}Ð°","1#1 wk|#{num} wks":"#{num} Ð°Ð¿ÑÐ°","1#1 week|#{num} weeks":"#{num} Ð°Ð¿ÑÐ°","durationShortMonths":"#{num}Ð°","1#1 mon|#{num} mons":"#{num} Ð°Ð¹","1#1 month|#{num} months":"#{num} Ð°Ð¹","#{num}y":"#{num}Ð¶","1#1 yr|#{num} yrs":"#{num} Ð¶ÑÐ»","1#1 year|#{num} years":"#{num} Ð¶ÑÐ»","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_kn = {"NN1":"à²à²¨","NN2":"à²«à³","NN3":"à²®à²¾","NN4":"à²à²ª","NN5":"à²®à³","NN6":"à²à³","NN7":"à²à³","NN8":"à²à²","NN9":"à²¸à³","NN10":"à²à²","NN11":"à²¨à²µ","NN12":"à²¡à²¿","MMM1":"à²à²¨à²µà²°à²¿","MMM2":"à²«à³à²¬à³à²°à³à²µà²°à²¿","MMM3":"à²®à²¾à²°à³à²à³","MMM4":"à²à²ªà³à²°à²¿à²²à³ââ","MMM5":"à²®à³","MMM6":"à²à³à²¨à³","MMM7":"à²à³à²²à³","MMM8":"à²à²à²¸à³à²à³","MMM9":"à²¸à³à²ªà³à²à³à²à²¬à²°à³â","MMM10":"à²à²à³à²à³à²¬à²°à³","MMM11":"à²¨à²µà³à²à²¬à²°à³","MMM12":"à²¡à²¿à²¸à³à²à²¬à²°à³","MMMM1":"à²à²¨à²µà²°à²¿","MMMM2":"à²«à³à²¬à³à²°à³à²µà²°à²¿","MMMM3":"à²®à²¾à²°à³à²à³","MMMM4":"à²à²ªà³à²°à²¿à²²à³","MMMM5":"à²®à³","MMMM6":"à²à³à²¨à³","MMMM7":"à²à³à²²à³","MMMM8":"à²à²à²¸à³à²à³","MMMM9":"à²¸à²ªà³à²à³à²à²¬à²°à³","MMMM10":"à²à²à³à²à³à²¬à²°à³","MMMM11":"à²¨à²µà³à²à²¬à²°à³","MMMM12":"à²¡à²¿à²¸à³à²à²¬à²°à³","E0":"à²°","E1":"à²¸à³","E2":"à²®à²","E3":"à²¬à³","E4":"à²à³","E5":"à²¶à³","E6":"à²¶","EE0":"à²­à²¾","EE1":"à²¸à³","EE2":"à²®à²","EE3":"à²¬à³","EE4":"à²à³","EE5":"à²¶à³","EE6":"à²¶à²¨","EEE0":"à²°.","EEE1":"à²¸à³.","EEE2":"à²®à².","EEE3":"à²¬à³.","EEE4":"à²à³.","EEE5":"à²¶à³.","EEE6":"à²¶à²¨à²¿.","EEEE0":"à²°à²µà²¿à²µà²¾à²°","EEEE1":"à²¸à³à²®à²µà²¾à²°","EEEE2":"à²®à²à²à²³à²µà²¾à²°","EEEE3":"à²¬à³à²§à²µà²¾à²°","EEEE4":"à²à³à²°à³à²µà²¾à²°","EEEE5":"à²¶à³à²à³à²°à²µà²¾à²°","EEEE6":"à²¶à²¨à²¿à²µà²¾à²°","a0":"à²ªà³à²°à³à²µà²¾à²¹à³à²¨","a1":"à²®à²§à³à²¯à²¾à²¹à³à²¨","G-1":"à²à³à²°à²¿.à²ªà³","G1":"à²à²¾à²¹à³","#{num}s":"#{num}à²¸","1#1 se|#{num} sec":"#{num} à²¸à³","1#1 sec|#{num} sec":"#{num} à²¸à³à²","1#1 second|#{num} seconds":"#{num} à²¸à³à²à³à²à²¡à³à²à²³à³","durationShortMinutes":"#{num}à²¨","1#1 mi|#{num} min":"#{num} à²¨à²¿","1#1 min|#{num} min":"#{num} à²¨à²¿à²®","1#1 minute|#{num} minutes":"#{num} à²¨à²¿à²®à²¿à²·à²à²³à³","#{num}h":"#{num}à²","durationMediumHours":"#{num} à²à².","1#1 hr|#{num} hrs":"#{num} à²à²à²","1#1 hour|#{num} hours":"#{num} à²à²à²à³à²à²³à³","#{num}d":"#{num}à²¦","1#1 dy|#{num} dys":"#{num} à²¦à²¿à²¨","durationLongDays":"#{num} à²¦à²¿à²¨","1#1 day|#{num} days":"#{num} à²¦à²¿à²¨à²à²³à³","#{num}w":"#{num}à²µ","durationMediumWeeks":"#{num} à²µà²¾","1#1 wk|#{num} wks":"#{num} à²µà²¾à²°","1#1 week|#{num} weeks":"#{num} à²µà²¾à²°à²à²³à³","durationShortMonths":"#{num}à²¤","1#1 mo|#{num} mos":"#{num} à²¤à²¿","1#1 mon|#{num} mons":"#{num} à²¤à²¿à²","1#1 month|#{num} months":"#{num} à²¤à²¿à²à²à²³à³à²à²³à³","#{num}y":"#{num}à²µ","durationMediumYears":"#{num} à²µà²°","1#1 yr|#{num} yrs":"#{num} à²µà²°à³","1#1 year|#{num} years":"#{num} à²µà²°à³à²·à²à²³à³","{duration} ago":"{duration} à²¹à²¿à²à²¦à³","in {duration}":"{duration} à²¨à²à²¤à²°","finalSeparatorFull":", à²®à²¤à³à²¤à³ ","separatorLong":" "};
ilib.data.sysres_ko = {"MMMM1":"ì¼","MMM1":"1","NN1":"1","N1":"1","MMMM2":"ì´","MMM2":"2","NN2":"2","N2":"2","MMMM3":"ì¼","MMM3":"3","NN3":"3","N3":"3","MMMM4":"ì¬","MMM4":"4","NN4":"4","N4":"4","MMMM5":"ì¤","MMM5":"5","NN5":"5","N5":"5","MMMM6":"ì ","MMM6":"6","NN6":"6","N6":"6","MMMM7":"ì¹ ","MMM7":"7","NN7":"7","N7":"7","MMMM8":"í","MMM8":"8","NN8":"8","N8":"8","MMMM9":"êµ¬","MMM9":"9","NN9":"9","N9":"9","MMMM10":"ì","MMM10":"10","NN10":"10","N10":"1O","MMMM11":"ì­ì¼","MMM11":"11","NN11":"11","N11":"11","MMMM12":"ì­ì´","MMM12":"12","NN12":"12","N12":"12","EEEE0":"ì¼ìì¼","EEE0":"ì¼ìì¼","EE0":"ì¼","E0":"ì¼","EEEE1":"ììì¼","EEE1":"ììì¼","EE1":"ì","E1":"ì","EEEE2":"íìì¼","EEE2":"íìì¼","EE2":"í","E2":"í","EEEE3":"ììì¼","EEE3":"ììì¼","EE3":"ì","E3":"ì","EEEE4":"ëª©ìì¼","EEE4":"ëª©ìì¼","EE4":"ëª©","E4":"ëª©","EEEE5":"ê¸ìì¼","EEE5":"ê¸ìì¼","EE5":"ê¸","E5":"ê¸","EEEE6":"í ìì¼","EEE6":"í ìì¼","EE6":"í ","E6":"í ","ordinalChoice":"#{num}","a0":"ì¤ì ","a1":"ì¤í","G-1":"ê¸°ìì ","G1":"ìê¸°","durationShortMillis":"#{num}ë¦¬ì´","#{num}s":"#{num}ì´","durationShortMinutes":"#{num}ë¶","#{num}h":"#{num}ì","#{num}d":"#{num}ì¼","#{num}w":"#{num}ì£¼","durationShortMonths":"#{num}ê°","#{num}y":"#{num}ë","#{num} ms":"#{num}ë¦¬ì´","1#1 se|#{num} sec":"#{num}ì´","1#1 mi|#{num} min":"#{num}ë¶","durationMediumHours":"#{num}ìê°","1#1 dy|#{num} dys":"#{num}ì¼","durationMediumWeeks":"#{num}ì£¼","1#1 mo|#{num} mos":"#{num}ê°ì","durationMediumYears":"#{num}ë","1#1 sec|#{num} sec":"#{num}ì´","1#1 min|#{num} min":"#{num}ë¶","1#1 hr|#{num} hrs":"#{num}ìê°","durationLongDays":"#{num}ì¼","1#1 wk|#{num} wks":"#{num}ì£¼","1#1 mon|#{num} mons":"#{num}ê°ì","1#1 yr|#{num} yrs":"#{num}ë","1#1 millisecond|#{num} milliseconds":"#{num}ë°ë¦¬ì´","1#1 second|#{num} seconds":"#{num}ì´","1#1 minute|#{num} minutes":"#{num}ë¶","1#1 hour|#{num} hours":"#{num}ìê°","1#1 day|#{num} days":"#{num}ì¼","1#1 week|#{num} weeks":"#{num}ì£¼","1#1 month|#{num} months":"#{num}ê°ì","1#1 year|#{num} years":"#{num}ë","{duration} ago":"{duration}ì ","in {duration}":"{duration}ì","separatorShort":" ","separatorMedium":" ","separatorLong":", ","separatorFull":", ","finalSeparatorFull":" ë° "};
ilib.data.sysres_ks = {"generated":true,"NN1":"Ø¬Ù","NN2":"ÙØ±","NN3":"ÙØ§","NN4":"Ø§Ù¾","NN5":"ÙÛ","NN6":"Ø¬Ù","NN7":"Ø¬Ù","NN8":"Ø§Ú¯","NN9":"Ø³Øª","NN10":"Ø§Ú©","NN11":"ÙÙ","NN12":"Ø¯Ø³","MMM1":"Ø¬ÙØ¤Ø±Û","MMM2":"ÙØ±Ø¤Ø±Û","MMM3":"ÙØ§Ø±ÙÚ","MMM4":"Ø§Ù¾Ø±ÛÙ","MMM5":"ÙÛÙ","MMM6":"Ø¬ÙÙÙ","MMM7":"Ø¬ÙÙÙØ§ÛÛ","MMM8":"Ø§Ú¯Ø³Øª","MMM9":"Ø³ØªÙØ¨Ø±","MMM10":"Ø§Ú©ØªÙÙØ¨Ø±","MMM11":"ÙÙÙØ¨Ø±","MMM12":"Ø¯Ø³ÙØ¨Ø±","MMMM1":"Ø¬ÙØ¤Ø±Û","MMMM2":"ÙØ±Ø¤Ø±Û","MMMM3":"ÙØ§Ø±ÙÚ","MMMM4":"Ø§Ù¾Ø±ÛÙ","MMMM5":"ÙÛÙ","MMMM6":"Ø¬ÙÙÙ","MMMM7":"Ø¬ÙÙÙØ§ÛÛ","MMMM8":"Ø§Ú¯Ø³Øª","MMMM9":"Ø³ØªÙØ¨Ø±","MMMM10":"Ø§Ú©ØªÙÙØ¨Ø±","MMMM11":"ÙÙÙØ¨Ø±","MMMM12":"Ø¯Ø³ÙØ¨Ø±","E0":"Ø§","E1":"Ú","E2":"Ø¨","E3":"Ø¨","E4":"Ø¨","E5":"Ø¬","E6":"Ø¨","EE0":"Ø¢Øª","EE1":"ÚÙ","EE2":"Ø¨Ù","EE3":"Ø¨Ù","EE4":"Ø¨Ø±","EE5":"Ø¬Ù","EE6":"Ø¨Ù¹","EEE0":"Ø¢ØªÚ¾ÙØ§Ø±","EEE1":"ÚÙÙÙØ¯ÙØ±ÙØ§Ø±","EEE2":"Ø¨ÙÙÙÙØ§Ø±","EEE3":"Ø¨ÙØ¯ÙØ§Ø±","EEE4":"Ø¨Ø±ÙÙ®ÛªØ³ÙØ§Ø±","EEE5":"Ø¬ÙÙÛ","EEE6":"Ø¨Ù¹ÙØ§Ø±","EEEE0":"Ø§ÙØªÚ¾ÙØ§Ø±","EEEE1":"ÚÙÙÙØ¯Ø±ÙØ±ÙØ§Ø±","EEEE2":"Ø¨ÙÙÙÙØ§Ø±","EEEE3":"Ø¨ÙØ¯ÙØ§Ø±","EEEE4":"Ø¨Ø±ÙÙ®ÛªØ³ÙØ§Ø±","EEEE5":"Ø¬ÙÙÛ","EEEE6":"Ø¨Ù¹ÙØ§Ø±","G-1":"Ø¨Û Ø³Û","G1":"Ø§Û ÚÛ","#{num}s":"#{num}Ø³","1#1 sec|#{num} sec":"#{num} Ø³ÛÙ","1#1 second|#{num} seconds":"#{num} Ø³ÛÙÚ©ÙÙÙÚ","durationShortMinutes":"#{num}Ù","1#1 min|#{num} min":"#{num} ÙÙÙ","1#1 minute|#{num} minutes":"#{num} ÙÙÙÙÙ¹","#{num}h":"#{num}Ú¯","1#1 hr|#{num} hrs":"one#{num} Ú¯ÙÙ|#{num} Ú¯Ù²Ù","1#1 hour|#{num} hours":"one#{num} Ú¯ÙÙÙ¹ÛÙ|#{num} Ú¯Ù²ÙÙÙ¹ÛÙ","#{num}d":"#{num}Ø¯","durationLongDays":"#{num} Ø¯ÛÛ","1#1 day|#{num} days":"#{num} Ø¯ÛÛ","#{num}w":"#{num}Û","1#1 wk|#{num} wks":"#{num} ÛÙÙ","1#1 week|#{num} weeks":"#{num} ÛÙÙØªÛÙ","durationShortMonths":"#{num}Ø±","1#1 mon|#{num} mons":"#{num} Ø±ÛÙ","1#1 month|#{num} months":"#{num} Ø±ÛÙØªÚ¾","#{num}y":"#{num}Ø¤","1#1 yr|#{num} yrs":"#{num} Ø¤Ø±Û","1#1 year|#{num} years":"#{num} Ø¤Ø±Û","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_ku = {"N1":"Ú©","N2":"Ø´","N3":"Ø¦","N4":"Ù","N5":"Ø¦","N6":"Ø­","N7":"Øª","N8":"Ø¦","N9":"Ø¦","N10":"Øª","N11":"Øª","N12":"Ú©","NN1":"Ú©Ø§1","NN2":"Ø´ÙØ¨","NN3":"Ø¦Ø§Ø²","NN4":"ÙÛØ³","NN5":"Ø¦Ø§Û","NN6":"Ø­ÙØ²","NN7":"ØªÛÙ","NN8":"Ø¦Ø§Ø¨","NN9":"Ø¦ÛÛ","NN10":"ØªØ´1","NN11":"ØªØ´2","NN12":"Ú©Ø§2","MMM1":"Ú©Ø§1","MMM2":"Ø´ÙØ¨","MMM3":"Ø¦Ø§Ø²","MMM4":"ÙÛØ³","MMM5":"Ø¦Ø§Û","MMM6":"Ø­ÙØ²","MMM7":"ØªÛÙ","MMM8":"Ø¦Ø§Ø¨","MMM9":"Ø¦ÛÛ","MMM10":"ØªØ´1","MMM11":"ØªØ´2","MMM12":"Ú©Ø§2","MMMM1":"Ú©Ø§ÙÙÙÛ Ø¯ÙÙÛÙ","MMMM2":"Ø´ÙØ¨Ø§Øª","MMMM3":"Ø¦Ø§Ø²Ø§Ø±","MMMM4":"ÙÛØ³Ø§Ù","MMMM5":"Ø¦Ø§ÛØ§Ø±","MMMM6":"Ø­ÙØ²ÛÛØ±Ø§Ù","MMMM7":"ØªÛÙÙØ²","MMMM8":"Ø¦Ø§Ø¨","MMMM9":"Ø¦ÛÛÙÙÙ","MMMM10":"ØªØ´Ø±ÛÙÛ ÛÛÚ©ÛÙ","MMMM11":"ØªØ´Ø±ÛÙÛ Ø¯ÙÙÛÙ","MMMM12":"Ú©Ø§ÙÙÙÛ ÛÛÚ©ÛÙ","EE0":"Ø´Û","EE1":"ÛÛÚ©","EE2":"Ø¯ÙÙ","EE3":"Ø³Û","EE4":"ÚÙØ§","EE5":"Ù¾ÛÙ","EE6":"ÙÛÛ","EEE0":"Ø´ÛÙÙÛ","EEE1":"ÛÛÚ©","EEE2":"Ø¯ÙÙ","EEE3":"Ø³Û","EEE4":"ÚÙØ§Ø±","EEE5":"Ù¾ÛÙØ¬","EEE6":"ÙÛÛÙÛ","EEEE0":"Ø´ÛÙÙÛ","EEEE1":"ÛÛÚ© Ø´ÛÙÙÛ","EEEE2":"Ø¯ÙÙ Ø´ÛÙÙÛ","EEEE3":"Ø³Û Ø´ÛÙÙÛ","EEEE4":"ÚÙØ§Ø± Ø´ÛÙÙÛ","EEEE5":"Ù¾ÛÙØ¬ Ø´ÛÙÙÛ","EEEE6":"ÙÛÛÙÛ","G-1":"Ù¾ÛØ´ Ø²Ø§ÛÛÙ","G1":"Ø²Ø§ÛÙÛ","a0":"Ù¾ÛØ´ÙÛÙÛÚÛ","a1":"Ù¾Ø§Ø´ÙÛÙÛÚÛ","#{num}s":"#{num}Ú","1#1 se|#{num} sec":"#{num} ÚØ±","1#1 sec|#{num} sec":"#{num} ÚØ±Ú©","1#1 second|#{num} seconds":"#{num} ÚØ±Ú©Û","durationShortMinutes":"#{num}Ø®","1#1 mi|#{num} min":"#{num} Ø®Ù","1#1 min|#{num} min":"#{num} Ø®ÙÙ","1#1 minute|#{num} minutes":"#{num} Ø®ÙÙÛÚ©","#{num}h":"#{num}Ú©","durationMediumHours":"one#{num} à¤à¤.|#{num} Ú©Ø§Øª","1#1 hr|#{num} hrs":"one#{num} à¤à¤à¤à¤¾|#{num} Ú©Ø§ØªÚ","1#1 hour|#{num} hours":"one#{num} à¤à¤à¤à¤¾|#{num} Ú©Ø§ØªÚÙÛØ±","#{num}d":"#{num}Ø±","1#1 dy|#{num} dys":"#{num} Ø±Û","durationLongDays":"#{num} Ø±ÛÚ","1#1 day|#{num} days":"#{num} Ø±ÛÚ","#{num}w":"#{num}w","durationMediumWeeks":"#{num} we","1#1 wk|#{num} wks":"#{num} wee","1#1 week|#{num} weeks":"#{num} weeks","durationShortMonths":"#{num}Ù","1#1 mo|#{num} mos":"#{num} ÙØ§","1#1 mon|#{num} mons":"#{num} ÙØ§ÙÚ¯","1#1 month|#{num} months":"one#{num} à¤®à¤¹à¥à¤¨à¤¾|#{num} ÙØ§ÙÚ¯","#{num}y":"#{num}Ø³","durationMediumYears":"#{num} Ø³Ø§","1#1 yr|#{num} yrs":"#{num} Ø³Ø§Úµ","1#1 year|#{num} years":"#{num} Ø³Ø§Úµ","{duration} ago":"ÙÛÙÛÙØ¨ÛØ± {duration}","in {duration}":"{duration} ÙÛ","finalSeparatorFull":",  ","separatorLong":" ","EE0-persian":"Ø´Û","EE1-persian":"ÛÛÚ©","EE2-persian":"Ø¯ÙÙ","EE3-persian":"Ø³Û","EE4-persian":"ÚÙØ§","EE5-persian":"Ù¾ÛÙ","EE6-persian":"ÙÛÛ","EEE0-persian":"Ø´ÛÙÙÛ","EEE1-persian":"ÛÛÚ©","EEE2-persian":"Ø¯ÙÙ","EEE3-persian":"Ø³Û","EEE4-persian":"ÚÙØ§Ø±","EEE5-persian":"Ù¾ÛÙØ¬","EEE6-persian":"ÙÛÛÙÛ","EEEE0-persian":"Ø´ÛÙÙÛ","EEEE1-persian":"ÛÛÚ© Ø´ÛÙÙÛ","EEEE2-persian":"Ø¯ÙÙ Ø´ÛÙÙÛ","EEEE3-persian":"Ø³Û Ø´ÛÙÙÛ","EEEE4-persian":"ÚÙØ§Ø± Ø´ÛÙÙÛ","EEEE5-persian":"Ù¾ÛÙØ¬ Ø´ÛÙÙÛ","EEEE6-persian":"ÙÛÛÙÛ","N1-persian":"Ø®","N2-persian":"Ú¯","N3-persian":"Ø¬","N4-persian":"Ù¾","N5-persian":"Ú¯","N6-persian":"Ø®","N7-persian":"Ú","N8-persian":"Ú¯","N9-persian":"Ø³","N10-persian":"Ø¨","N11-persian":"Ú","N12-persian":"Ú","NN1-persian":"Ø®Ø§Ú©ÛÙÛÙÛ","NN2-persian":"Ú¯ÙÚµØ§Ù","NN3-persian":"Ø¬ÛØ²ÛØ±Ø¯Ø§Ù","NN4-persian":"Ù¾ÙÙØ´Ù¾ÛÚ","NN5-persian":"Ú¯ÛÙØ§ÙÛÚ","NN6-persian":"Ø®ÛØ±ÙØ§ÙØ§Ù","NN7-persian":"ÚÛØ²Ø¨ÛØ±","NN8-persian":"Ú¯ÛÚµØ§ÚÛØ²Ø§Ù","NN9-persian":"Ø³ÛØ±ÙØ§ÙÛØ²","NN10-persian":"Ø¨ÛÙØ±Ø§ÙØ¨Ø§Ø±","NN11-persian":"ÚÛØ¨ÛÙØ¯Ø§Ù","NN12-persian":"ÚÛØ´ÛÙÛ","MMM1-persian":"Ø®Ø§Ú©ÛÙÛÙÛ","MMM2-persian":"Ú¯ÙÚµØ§Ù","MMM3-persian":"Ø¬ÛØ²ÛØ±Ø¯Ø§Ù","MMM4-persian":"Ù¾ÙÙØ´Ù¾ÛÚ","MMM5-persian":"Ú¯ÛÙØ§ÙÛÚ","MMM6-persian":"Ø®ÛØ±ÙØ§ÙØ§Ù","MMM7-persian":"ÚÛØ²Ø¨ÛØ±","MMM8-persian":"Ú¯ÛÚµØ§ÚÛØ²Ø§Ù","MMM9-persian":"Ø³ÛØ±ÙØ§ÙÛØ²","MMM10-persian":"Ø¨ÛÙØ±Ø§ÙØ¨Ø§Ø±","MMM11-persian":"ÚÛØ¨ÛÙØ¯Ø§Ù","MMM12-persian":"ÚÛØ´ÛÙÛ","MMMM1-persian":"Ø®Ø§Ú©ÛÙÛÙÛ","MMMM2-persian":"Ú¯ÙÚµØ§Ù","MMMM3-persian":"Ø¬ÛØ²ÛØ±Ø¯Ø§Ù","MMMM4-persian":"Ù¾ÙÙØ´Ù¾ÛÚ","MMMM5-persian":"Ú¯ÛÙØ§ÙÛÚ","MMMM6-persian":"Ø®ÛØ±ÙØ§ÙØ§Ù","MMMM7-persian":"ÚÛØ²Ø¨ÛØ±","MMMM8-persian":"Ú¯ÛÚµØ§ÚÛØ²Ø§Ù","MMMM9-persian":"Ø³ÛØ±ÙØ§ÙÛØ²","MMMM10-persian":"Ø¨ÛÙØ±Ø§ÙØ¨Ø§Ø±","MMMM11-persian":"ÚÛØ¨ÛÙØ¯Ø§Ù","MMMM12-persian":"ÚÛØ´ÛÙÛ"};
ilib.data.sysres_lg = {"generated":true,"NN8":"Ag","NN10":"Ok","MMM4":"Apu","MMM5":"Maa","MMM6":"Juu","MMM8":"Agu","MMM9":"Seb","MMM10":"Oki","MMM12":"Des","MMMM1":"Janwaliyo","MMMM2":"Febwaliyo","MMMM3":"Marisi","MMMM4":"Apuli","MMMM5":"Maayi","MMMM6":"Juuni","MMMM7":"Julaayi","MMMM8":"Agusito","MMMM9":"Sebuttemba","MMMM10":"Okitobba","MMMM11":"Novemba","MMMM12":"Desemba","E1":"B","E2":"L","E3":"L","E4":"L","E5":"L","E6":"L","EE0":"Sa","EE1":"Ba","EE2":"Lw","EE3":"Lw","EE4":"Lw","EE5":"Lw","EE6":"Lw","EEE0":"Sab","EEE1":"Bal","EEE2":"Lw2","EEE3":"Lw3","EEE4":"Lw4","EEE5":"Lw5","EEE6":"Lw6","EEEE0":"Sabbiiti","EEEE1":"Balaza","EEEE2":"Lwakubiri","EEEE3":"Lwakusatu","EEEE4":"Lwakuna","EEEE5":"Lwakutaano","EEEE6":"Lwamukaaga","G-1":"BC","G1":"AD","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_ln = {"generated":true,"NN1":"ya","NN2":"fb","NN3":"ms","NN4":"ap","NN5":"ma","NN6":"yu","NN7":"yu","NN8":"ag","NN9":"st","NN10":"Ét","NN11":"nv","NN12":"ds","MMM1":"yan","MMM2":"fbl","MMM3":"msi","MMM4":"apl","MMM5":"mai","MMM6":"yun","MMM7":"yul","MMM8":"agt","MMM9":"stb","MMM10":"Étb","MMM11":"nvb","MMM12":"dsb","MMMM1":"sÃ¡nzÃ¡ ya yambo","MMMM2":"sÃ¡nzÃ¡ ya mÃ­balÃ©","MMMM3":"sÃ¡nzÃ¡ ya mÃ­sÃ¡to","MMMM4":"sÃ¡nzÃ¡ ya mÃ­nei","MMMM5":"sÃ¡nzÃ¡ ya mÃ­tÃ¡no","MMMM6":"sÃ¡nzÃ¡ ya motÃ³bÃ¡","MMMM7":"sÃ¡nzÃ¡ ya nsambo","MMMM8":"sÃ¡nzÃ¡ ya mwambe","MMMM9":"sÃ¡nzÃ¡ ya libwa","MMMM10":"sÃ¡nzÃ¡ ya zÃ³mi","MMMM11":"sÃ¡nzÃ¡ ya zÃ³mi na mÉÌkÉÌ","MMMM12":"sÃ¡nzÃ¡ ya zÃ³mi na mÃ­balÃ©","E0":"e","E1":"y","E2":"m","E3":"m","E4":"m","E5":"m","E6":"p","EE0":"ey","EE1":"yb","EE2":"mb","EE3":"ms","EE4":"mi","EE5":"mt","EE6":"mp","EEE0":"eye","EEE1":"ybo","EEE2":"mbl","EEE3":"mst","EEE4":"min","EEE5":"mtn","EEE6":"mps","EEEE0":"eyenga","EEEE1":"mokÉlÉ mwa yambo","EEEE2":"mokÉlÉ mwa mÃ­balÃ©","EEEE3":"mokÉlÉ mwa mÃ­sÃ¡to","EEEE4":"mokÉlÉ ya mÃ­nÃ©i","EEEE5":"mokÉlÉ ya mÃ­tÃ¡no","EEEE6":"mpÉÌsÉ","a0":"ntÉÌngÉÌ","a1":"mpÃ³kwa","G-1":"libÃ³so ya","G1":"nsima ya Y","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_lt = {"generated":true,"NN1":"sa","NN2":"va","NN3":"ko","NN4":"ba","NN5":"ge","NN6":"bi","NN7":"li","NN8":"ru","NN9":"ru","NN10":"sp","NN11":"la","NN12":"gr","MMM1":"saus.","MMM2":"vas.","MMM3":"kov.","MMM4":"bal.","MMM5":"geg.","MMM6":"birÅ¾.","MMM7":"liep.","MMM8":"rugp.","MMM9":"rugs.","MMM10":"spal.","MMM11":"lapkr.","MMM12":"gruod.","MMMM1":"sausis","MMMM2":"vasaris","MMMM3":"kovas","MMMM4":"balandis","MMMM5":"geguÅ¾Ä","MMMM6":"birÅ¾elis","MMMM7":"liepa","MMMM8":"rugpjÅ«tis","MMMM9":"rugsÄjis","MMMM10":"spalis","MMMM11":"lapkritis","MMMM12":"gruodis","E1":"P","E2":"A","E3":"T","E4":"K","E5":"P","E6":"Å ","EE0":"sk","EE1":"pr","EE2":"an","EE3":"tr","EE4":"kt","EE5":"pn","EE6":"Å¡t","EEE0":"sk","EEE1":"pr","EEE2":"an","EEE3":"tr","EEE4":"kt","EEE5":"pn","EEE6":"Å¡t","EEEE0":"sekmadienis","EEEE1":"pirmadienis","EEEE2":"antradienis","EEEE3":"treÄiadienis","EEEE4":"ketvirtadienis","EEEE5":"penktadienis","EEEE6":"Å¡eÅ¡tadienis","a0":"prieÅ¡piet","a1":"popiet","G-1":"pr. Kr.","G1":"po Kr.","1#1 se|#{num} sec":"#{num} se","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekundÄ|few#{num} sekundÄs|#{num} sekundÅ¾iÅ³","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} mi","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minutÄ|few#{num} minutÄs|#{num} minuÄiÅ³","#{num}h":"#{num}v","durationMediumHours":"#{num} va","1#1 hr|#{num} hrs":"#{num} val","1#1 hour|#{num} hours":"one#{num} valanda|few#{num} valandos|#{num} valandÅ³","1#1 dy|#{num} dys":"#{num} d.","durationLongDays":"#{num} die","1#1 day|#{num} days":"one#{num} diena|few#{num} dienos|#{num} dienÅ³","#{num}w":"#{num}s","durationMediumWeeks":"#{num} sa","1#1 wk|#{num} wks":"#{num} sav","1#1 week|#{num} weeks":"one#{num} savaitÄ|few#{num} savaitÄs|#{num} savaiÄiÅ³","durationShortMonths":"#{num}m","1#1 mo|#{num} mos":"#{num} mÄ","1#1 mon|#{num} mons":"#{num} mÄn","1#1 month|#{num} months":"one#{num} mÄnuo|few#{num} mÄnesiai|#{num} mÄnesiÅ³","#{num}y":"#{num}m","durationMediumYears":"#{num} m.","1#1 yr|#{num} yrs":"one#{num} met|few#{num} met|#{num} metÅ³","1#1 year|#{num} years":"one#{num} metai|few#{num} metai|#{num} metÅ³","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":" ir ","separatorLong":" "};
ilib.data.sysres_lv = {"generated":true,"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"ma","NN6":"jÅ«","NN7":"jÅ«","NN8":"au","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"janv.","MMM2":"febr.","MMM3":"marts","MMM4":"apr.","MMM5":"maijs","MMM6":"jÅ«n.","MMM7":"jÅ«l.","MMM8":"aug.","MMM9":"sept.","MMM10":"okt.","MMM11":"nov.","MMM12":"dec.","MMMM1":"janvÄris","MMMM2":"februÄris","MMMM3":"marts","MMMM4":"aprÄ«lis","MMMM5":"maijs","MMMM6":"jÅ«nijs","MMMM7":"jÅ«lijs","MMMM8":"augusts","MMMM9":"septembris","MMMM10":"oktobris","MMMM11":"novembris","MMMM12":"decembris","E1":"P","E2":"O","E3":"T","E4":"C","E5":"P","EE0":"sv","EE1":"pr","EE2":"ot","EE3":"tr","EE4":"ce","EE5":"pk","EE6":"se","EEE0":"sv","EEE1":"pr","EEE2":"ot","EEE3":"tr","EEE4":"ce","EEE5":"pk","EEE6":"se","EEEE0":"svÄtdiena","EEEE1":"pirmdiena","EEEE2":"otrdiena","EEEE3":"treÅ¡diena","EEEE4":"ceturtdiena","EEEE5":"piektdiena","EEEE6":"sestdiena","a0":"priekÅ¡pusdienÄ","a1":"pÄcpusdienÄ","G-1":"p.m.Ä.","G1":"m.Ä.","1#1 se|#{num} sec":"#{num} se","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekunde|#{num} sekundes","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} min","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minÅ«te|#{num} minÅ«tes","#{num}h":"#{num}s","durationMediumHours":"#{num} st","1#1 hr|#{num} hrs":"#{num} stu","1#1 hour|#{num} hours":"one#{num} stunda|#{num} stundas","1#1 dy|#{num} dys":"#{num} di","durationLongDays":"#{num} die","1#1 day|#{num} days":"one#{num} diennakts|#{num} diennaktis","#{num}w":"#{num}n","durationMediumWeeks":"#{num} ne","1#1 wk|#{num} wks":"#{num} ned","1#1 week|#{num} weeks":"one#{num} nedÄÄ¼a|#{num} nedÄÄ¼as","durationShortMonths":"#{num}m","1#1 mo|#{num} mos":"#{num} mÄ","1#1 mon|#{num} mons":"#{num} mÄn","1#1 month|#{num} months":"one#{num} mÄnesis|#{num} mÄneÅ¡i","#{num}y":"#{num}g","durationMediumYears":"#{num} g.","1#1 yr|#{num} yrs":"one#{num} gads|#{num} gadi","1#1 year|#{num} years":"one#{num} gads|#{num} gadi","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":" un ","separatorLong":" "};
ilib.data.sysres_mk = {"generated":true,"NN1":"ÑÐ°","NN2":"ÑÐµ","NN3":"Ð¼Ð°","NN4":"Ð°Ð¿","NN5":"Ð¼Ð°","NN6":"ÑÑ","NN7":"ÑÑ","NN8":"Ð°Ð²","NN9":"ÑÐµ","NN10":"Ð¾Ðº","NN11":"Ð½Ð¾","NN12":"Ð´Ðµ","MMM1":"ÑÐ°Ð½.","MMM2":"ÑÐµÐ².","MMM3":"Ð¼Ð°Ñ.","MMM4":"Ð°Ð¿Ñ.","MMM5":"Ð¼Ð°Ñ","MMM6":"ÑÑÐ½.","MMM7":"ÑÑÐ».","MMM8":"Ð°Ð²Ð³.","MMM9":"ÑÐµÐ¿Ñ.","MMM10":"Ð¾ÐºÑ.","MMM11":"Ð½Ð¾ÐµÐ¼.","MMM12":"Ð´ÐµÐºÐµÐ¼.","MMMM1":"ÑÐ°Ð½ÑÐ°ÑÐ¸","MMMM2":"ÑÐµÐ²ÑÑÐ°ÑÐ¸","MMMM3":"Ð¼Ð°ÑÑ","MMMM4":"Ð°Ð¿ÑÐ¸Ð»","MMMM5":"Ð¼Ð°Ñ","MMMM6":"ÑÑÐ½Ð¸","MMMM7":"ÑÑÐ»Ð¸","MMMM8":"Ð°Ð²Ð³ÑÑÑ","MMMM9":"ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸","MMMM10":"Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸","MMMM11":"Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸","MMMM12":"Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸","E0":"Ð½","E1":"Ð¿","E2":"Ð²","E3":"Ñ","E4":"Ñ","E5":"Ð¿","E6":"Ñ","EE0":"Ð½Ðµ","EE1":"Ð¿Ð¾","EE2":"3","EE3":"ÑÑ","EE4":"ÑÐµ","EE5":"Ð¿Ðµ","EE6":"7","EEE0":"Ð½ÐµÐ´.","EEE1":"Ð¿Ð¾Ð½.","EEE2":"Ð²Ñ.","EEE3":"ÑÑÐµ.","EEE4":"ÑÐµÑ.","EEE5":"Ð¿ÐµÑ.","EEE6":"ÑÐ°Ð±.","EEEE0":"Ð½ÐµÐ´ÐµÐ»Ð°","EEEE1":"Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº","EEEE2":"Ð²ÑÐ¾ÑÐ½Ð¸Ðº","EEEE3":"ÑÑÐµÐ´Ð°","EEEE4":"ÑÐµÑÐ²ÑÑÐ¾Ðº","EEEE5":"Ð¿ÐµÑÐ¾Ðº","EEEE6":"ÑÐ°Ð±Ð¾ÑÐ°","a0":"Ð¿ÑÐµÑÐ¿Ð»Ð°Ð´Ð½Ðµ","a1":"Ð¿Ð¾Ð¿Ð»Ð°Ð´Ð½Ðµ","G-1":"Ð¿Ñ.Ð½.Ðµ.","G1":"Ð°Ðµ.","#{num}s":"#{num}Ñ","1#1 se|#{num} sec":"one#{num} ÑÐµÐº|#{num} ÑÐµ","1#1 sec|#{num} sec":"#{num} ÑÐµÐº","1#1 second|#{num} seconds":"one#{num} ÑÐµÐºÑÐ½Ð´Ð°|#{num} ÑÐµÐºÑÐ½Ð´Ð¸","durationShortMinutes":"#{num}Ð¼","1#1 mi|#{num} min":"one#{num} Ð¼Ð¸Ð½|#{num} Ð¼Ð¸","1#1 min|#{num} min":"#{num} Ð¼Ð¸Ð½","1#1 minute|#{num} minutes":"one#{num} Ð¼Ð¸Ð½ÑÑÐ°|#{num} Ð¼Ð¸Ð½ÑÑÐ¸","#{num}h":"#{num}Ñ","durationMediumHours":"one#{num} ÑÐ°Ñ|#{num} ÑÐ°","1#1 hr|#{num} hrs":"#{num} ÑÐ°Ñ","1#1 hour|#{num} hours":"one#{num} ÑÐ°Ñ|#{num} ÑÐ°ÑÐ¾Ð²Ð¸","#{num}d":"#{num}Ð´","1#1 dy|#{num} dys":"one#{num} Ð´ÐµÐ½|#{num} Ð´Ðµ","durationLongDays":"#{num} Ð´ÐµÐ½","1#1 day|#{num} days":"one#{num} Ð´ÐµÐ½|#{num} Ð´ÐµÐ½Ð¾Ð²Ð¸","#{num}w":"#{num}Ð½","durationMediumWeeks":"one#{num} Ð½ÐµÐ´|#{num} Ð½Ðµ","1#1 wk|#{num} wks":"#{num} Ð½ÐµÐ´","1#1 week|#{num} weeks":"one#{num} Ð½ÐµÐ´ÐµÐ»Ð°|#{num} Ð½ÐµÐ´ÐµÐ»Ð¸","durationShortMonths":"#{num}Ð¼","1#1 mo|#{num} mos":"one#{num} Ð¼ÑÑ|#{num} Ð¼Ñ","1#1 mon|#{num} mons":"#{num} Ð¼ÐµÑ","1#1 month|#{num} months":"one#{num} Ð¼ÐµÑÐµÑ|#{num} Ð¼ÐµÑÐµÑÐ¸","#{num}y":"#{num}Ð³","durationMediumYears":"one#{num} Ð³Ð¾Ð´|#{num} Ð³Ð¾","1#1 yr|#{num} yrs":"#{num} Ð³Ð¾Ð´","1#1 year|#{num} years":"one#{num} Ð³Ð¾Ð´Ð¸Ð½Ð°|#{num} Ð³Ð¾Ð´Ð¸Ð½Ð¸","{duration} ago":"Ð¿ÑÐµÐ´ {duration}","in {duration}":"Ð·Ð° {duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_ml = {"generated":true,"NN1":"à´à´¨","NN2":"à´«àµ","NN3":"à´®à´¾","NN4":"à´à´ª","NN5":"à´®àµ","NN6":"à´àµ","NN7":"à´àµ","NN8":"à´à´","NN9":"à´¸àµ","NN10":"à´à´","NN11":"à´¨à´µ","NN12":"à´¡à´¿","MMM1":"à´à´¨àµ","MMM2":"à´«àµà´¬àµà´°àµ","MMM3":"à´®à´¾àµ¼","MMM4":"à´à´ªàµà´°à´¿","MMM5":"à´®àµà´¯àµ","MMM6":"à´àµàµº","MMM7":"à´àµà´²àµ","MMM8":"à´à´","MMM9":"à´¸àµà´ªàµà´±àµà´±à´","MMM10":"à´à´àµà´àµ","MMM11":"à´¨à´µà´","MMM12":"à´¡à´¿à´¸à´","MMMM1":"à´à´¨àµà´µà´°à´¿","MMMM2":"à´«àµà´¬àµà´°àµà´µà´°à´¿","MMMM3":"à´®à´¾àµ¼à´àµà´àµ","MMMM4":"à´à´ªàµà´°à´¿àµ½","MMMM5":"à´®àµà´¯àµ","MMMM6":"à´àµàµº","MMMM7":"à´àµà´²àµ","MMMM8":"à´à´à´¸àµà´±àµà´±àµ","MMMM9":"à´¸àµà´ªàµà´±àµà´±à´à´¬àµ¼","MMMM10":"à´à´àµà´àµà´¬àµ¼","MMMM11":"à´¨à´µà´à´¬àµ¼","MMMM12":"à´¡à´¿à´¸à´à´¬àµ¼","E0":"à´à´¾","E1":"à´¤à´¿","E2":"à´àµ","E3":"à´¬àµ","E4":"à´µàµà´¯à´¾","E5":"à´µàµ","E6":"à´¶","EE0":"à´à´¾","EE1":"à´¤à´¿","EE2":"à´àµ","EE3":"à´¬àµ","EE4":"à´µàµ","EE5":"à´µàµ","EE6":"à´¶","EEE0":"à´à´¾à´¯àµ¼","EEE1":"à´¤à´¿à´àµà´àµ¾","EEE2":"à´àµà´µàµà´µ","EEE3":"à´¬àµà´§àµ»","EEE4":"à´µàµà´¯à´¾à´´à´","EEE5":"à´µàµà´³àµà´³à´¿","EEE6":"à´¶à´¨à´¿","EEEE0":"à´à´¾à´¯à´±à´¾à´´àµà´","EEEE1":"à´¤à´¿à´àµà´à´³à´¾à´´àµà´","EEEE2":"à´àµà´µàµà´µà´¾à´´àµà´","EEEE3":"à´¬àµà´§à´¨à´¾à´´àµà´","EEEE4":"à´µàµà´¯à´¾à´´à´¾à´´àµà´","EEEE5":"à´µàµà´³àµà´³à´¿à´¯à´¾à´´àµà´","EEEE6":"à´¶à´¨à´¿à´¯à´¾à´´àµà´","G-1":"à´àµà´°à´¿.à´®àµ","G1":"à´àµà´°à´¿.à´ªà´¿.","#{num}s":"#{num}à´¸","1#1 se|#{num} sec":"#{num} à´¸àµ","1#1 sec|#{num} sec":"#{num} à´¸àµà´","1#1 second|#{num} seconds":"#{num} à´¸àµà´àµà´à´¨àµà´±àµ","durationShortMinutes":"#{num}à´®","1#1 mi|#{num} min":"#{num} à´®à´¿","1#1 min|#{num} min":"#{num} à´®à´¿à´¨","1#1 minute|#{num} minutes":"#{num} à´®à´¿à´¨à´¿à´àµà´àµ","#{num}h":"#{num}à´®","durationMediumHours":"#{num} à´®à´£","1#1 hr|#{num} hrs":"#{num} à´®à´£à´¿","1#1 hour|#{num} hours":"#{num} à´®à´£à´¿à´àµà´àµàµ¼","#{num}d":"#{num}à´¦","1#1 dy|#{num} dys":"#{num} à´¦à´¿","durationLongDays":"#{num} à´¦à´¿à´µ","1#1 day|#{num} days":"#{num} à´¦à´¿à´µà´¸à´","#{num}w":"#{num}à´","durationMediumWeeks":"#{num} à´à´´","1#1 wk|#{num} wks":"#{num} à´à´´àµà´","1#1 week|#{num} weeks":"#{num} à´à´´àµà´","durationShortMonths":"#{num}à´®","1#1 mo|#{num} mos":"#{num} à´®à´¾","1#1 mon|#{num} mons":"#{num} à´®à´¾à´¸à´","1#1 month|#{num} months":"#{num} à´®à´¾à´¸à´","#{num}y":"#{num}à´µ","durationMediumYears":"#{num} à´µàµ¼","1#1 yr|#{num} yrs":"#{num} à´µàµ¼à´·à´","1#1 year|#{num} years":"#{num} à´µàµ¼à´·à´","{duration} ago":"{duration} à´®àµà´®àµà´ªàµ","in {duration}":"+{duration}","finalSeparatorFull":",  à´à´¨àµà´¨à´¿à´µ","separatorLong":" "};
ilib.data.sysres_mn = {"N1":"1","N2":"2","N3":"3","N4":"4","N5":"5","N6":"6","N7":"7","N8":"8","N9":"9","N10":"10","N11":"11","N12":"12","NN1":"1","NN2":"2","NN3":"3","NN4":"4","NN5":"5","NN6":"6","NN7":"7","NN8":"8","NN9":"9","NN10":"10","NN11":"11","NN12":"12","MMM1":"1 ÑÐ°Ñ","MMM2":"2 ÑÐ°Ñ","MMM3":"3 ÑÐ°Ñ","MMM4":"4 ÑÐ°Ñ","MMM5":"5 ÑÐ°Ñ","MMM6":"6 ÑÐ°Ñ","MMM7":"7 ÑÐ°Ñ","MMM8":"8 ÑÐ°Ñ","MMM9":"9 ÑÐ°Ñ","MMM10":"10 ÑÐ°Ñ","MMM11":"11 ÑÐ°Ñ","MMM12":"12 ÑÐ°Ñ","MMMM1":"1 ÑÐ°Ñ","MMMM2":"2 ÑÐ°Ñ","MMMM3":"3 ÑÐ°Ñ","MMMM4":"4 ÑÐ°Ñ","MMMM5":"5 ÑÐ°Ñ","MMMM6":"6 ÑÐ°Ñ","MMMM7":"7 ÑÐ°Ñ","MMMM8":"8 ÑÐ°Ñ","MMMM9":"9 ÑÐ°Ñ","MMMM10":"10 ÑÐ°Ñ","MMMM11":"11 ÑÐ°Ñ","MMMM12":"12 ÑÐ°Ñ","E0":"Ð","E1":"Ð","E2":"Ð","E3":"Ð","E4":"Ð","E5":"Ð","E6":"Ð","EE0":"ÐÐ°","EE1":"ÐÑ","EE2":"ÐÑ","EE3":"ÐÒ¯","EE4":"ÐÐ°","EE5":"ÐÑ","EE6":"ÐÑ","EEE0":"ÐÐ°Ð²Ð°Ð°","EEE1":"ÐÑÐ³Ð¼Ð°Ñ","EEE2":"ÐÑÐ°Ð³Ð²Ð°","EEE3":"ÐÒ¯ÑÑÐ²","EEE4":"ÐÐ°Ð°ÑÐ°Ð½","EEE5":"ÐÑÐ¼Ð±Ð°","EEE6":"ÐÑÐ¼","EEEE0":"ÐÐ°Ð²Ð°Ð°","EEEE1":"ÐÑÐ³Ð¼Ð°Ñ","EEEE2":"ÐÑÐ°Ð³Ð²Ð°","EEEE3":"ÐÒ¯ÑÑÐ²","EEEE4":"ÐÐ°Ð°ÑÐ°Ð½","EEEE5":"ÐÑÐ¼Ð±Ð°","EEEE6":"ÐÑÐ¼","G-1":"ÐÐ­Ó¨","G1":"ÐÐ­","durationShortMillis":"#{num}Ð¼Ñ","#{num} ms":"#{num} Ð¼Ñ","1#1 millisecond|#{num} milliseconds":"#{num} Ð¼Ð¸Ð»Ð»Ð¸ÑÐµÐºÑÐ½Ð´","#{num}s":"#{num}Ñ","1#1 se|#{num} sec":"#{num} ÑÐµ","1#1 sec|#{num} sec":"#{num} ÑÐµÐº","1#1 second|#{num} seconds":"#{num} ÑÐµÐºÑÐ½Ð´","durationShortMinutes":"#{num}Ð¼","1#1 mi|#{num} min":"#{num} Ð¼Ð¸","1#1 min|#{num} min":"#{num} Ð¼Ð¸Ð½","1#1 minute|#{num} minutes":"#{num} Ð¼Ð¸Ð½ÑÑ","#{num}h":"#{num}Ñ","durationMediumHours":"#{num} ÑÐ°","1#1 hr|#{num} hrs":"#{num} ÑÐ°Ð³","1#1 hour|#{num} hours":"#{num} ÑÐ°Ð³","#{num}d":"#{num}Ñ","1#1 dy|#{num} dys":"#{num} ÑÐ¾","durationLongDays":"#{num} ÑÐ¾Ð½","1#1 day|#{num} days":"#{num} ÑÐ¾Ð½Ð¾Ð³","#{num}w":"#{num}w","durationMediumWeeks":"#{num} Ð´Ð¾","1#1 wk|#{num} wks":"#{num} Ð´Ð¾Ð»","1#1 week|#{num} weeks":"#{num} Ð´Ð¾Ð»Ð¾Ð¾ ÑÐ¾Ð½Ð¾Ð³","durationShortMonths":"#{num}Ñ","1#1 mo|#{num} mos":"#{num} ÑÐ°","1#1 mon|#{num} mons":"#{num} ÑÐ°Ñ","1#1 month|#{num} months":"#{num} ÑÐ°Ñ","#{num}y":"#{num}Ð¶","durationMediumYears":"#{num} Ð¶Ð¸","1#1 yr|#{num} yrs":"#{num} Ð¶Ð¸Ð»","1#1 year|#{num} years":"#{num} Ð¶Ð¸Ð»","{duration} ago":"{duration}Ð¸Ð¹Ð½ Ó©Ð¼Ð½Ó©","in {duration}":"{duration}Ð´","finalSeparatorFull":",  ","separatorLong":" "};
ilib.data.sysres_mr = {"generated":true,"NN1":"à¤à¤¾","NN2":"à¤«à¥","NN3":"à¤®à¤¾","NN4":"à¤à¤ª","NN5":"à¤®à¥","NN6":"à¤à¥","NN7":"à¤à¥","NN8":"à¤à¤","NN9":"à¤¸à¥","NN10":"à¤à¤","NN11":"à¤¨à¥","NN12":"à¤¡à¤¿","MMM1":"à¤à¤¾à¤¨à¥","MMM2":"à¤«à¥à¤¬à¥à¤°à¥","MMM3":"à¤®à¤¾à¤°à¥à¤","MMM4":"à¤à¤ªà¥à¤°à¤¿","MMM5":"à¤®à¥","MMM6":"à¤à¥à¤¨","MMM7":"à¤à¥à¤²à¥","MMM8":"à¤à¤","MMM9":"à¤¸à¥à¤ªà¥à¤à¥à¤","MMM10":"à¤à¤à¥à¤","MMM11":"à¤¨à¥à¤µà¥à¤¹à¥à¤","MMM12":"à¤¡à¤¿à¤¸à¥à¤","MMMM1":"à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥","MMMM2":"à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥","MMMM3":"à¤®à¤¾à¤°à¥à¤","MMMM4":"à¤à¤ªà¥à¤°à¤¿à¤²","MMMM5":"à¤®à¥","MMMM6":"à¤à¥à¤¨","MMMM7":"à¤à¥à¤²à¥","MMMM8":"à¤à¤à¤¸à¥à¤","MMMM9":"à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°","MMMM10":"à¤à¤à¥à¤à¥à¤¬à¤°","MMMM11":"à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°","MMMM12":"à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°","E0":"à¤°","E1":"à¤¸à¥","E2":"à¤®à¤","E3":"à¤¬à¥","E4":"à¤à¥","E5":"à¤¶à¥","E6":"à¤¶","EE0":"à¤°","EE1":"à¤¸à¥","EE2":"à¤®à¤","EE3":"à¤¬à¥","EE4":"à¤à¥","EE5":"à¤¶à¥","EE6":"à¤¶","EEE0":"à¤°à¤µà¤¿","EEE1":"à¤¸à¥à¤®","EEE2":"à¤®à¤à¤à¤³","EEE3":"à¤¬à¥à¤§","EEE4":"à¤à¥à¤°à¥","EEE5":"à¤¶à¥à¤à¥à¤°","EEE6":"à¤¶à¤¨à¤¿","EEEE0":"à¤°à¤µà¤¿à¤µà¤¾à¤°","EEEE1":"à¤¸à¥à¤®à¤µà¤¾à¤°","EEEE2":"à¤®à¤à¤à¤³à¤µà¤¾à¤°","EEEE3":"à¤¬à¥à¤§à¤µà¤¾à¤°","EEEE4":"à¤à¥à¤°à¥à¤µà¤¾à¤°","EEEE5":"à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°","EEEE6":"à¤¶à¤¨à¤¿à¤µà¤¾à¤°","G-1":"à¤à¤¸à¤¾à¤ªà¥à¤°à¥à¤µ","G1":"à¤¸à¤¨","a0":"à¤à¤à¤®","a1":"à¤¸à¤¾à¤¯à¤","#{num}s":"#{num}à¤¸","1#1 se|#{num} sec":"#{num} à¤¸à¥","1#1 sec|#{num} sec":"#{num} à¤¸à¥à¤","1#1 second|#{num} seconds":"#{num} à¤¸à¥à¤à¤à¤¦","durationShortMinutes":"#{num}à¤®","1#1 mi|#{num} min":"#{num} à¤®à¤¿","1#1 min|#{num} min":"#{num} à¤®à¤¿à¤¨","1#1 minute|#{num} minutes":"one#{num} à¤®à¤¿à¤¨à¤¿à¤|#{num} à¤®à¤¿à¤¨à¤¿à¤à¥","#{num}h":"#{num}à¤¤","durationMediumHours":"#{num} à¤¤à¤¾à¤¸","1#1 hr|#{num} hrs":"#{num} à¤¤à¤¾à¤¸","1#1 hour|#{num} hours":"#{num} à¤¤à¤¾à¤¸","#{num}d":"#{num}à¤¦","1#1 dy|#{num} dys":"#{num} à¤¦à¤¿","durationLongDays":"#{num} à¤¦à¤¿à¤µà¤¸","1#1 day|#{num} days":"#{num} à¤¦à¤¿à¤µà¤¸","#{num}w":"#{num}à¤","durationMediumWeeks":"#{num} à¤à¤ ","1#1 wk|#{num} wks":"#{num} à¤à¤ à¤µ","1#1 week|#{num} weeks":"one#{num} à¤à¤ à¤µà¤¡à¤¾|#{num} à¤à¤ à¤µà¤¡à¥","durationShortMonths":"#{num}à¤®","1#1 mo|#{num} mos":"#{num} à¤®à¤¹","1#1 mon|#{num} mons":"#{num} à¤®à¤¹à¤¿","1#1 month|#{num} months":"one#{num} à¤®à¤¹à¤¿à¤¨à¤¾|#{num} à¤®à¤¹à¤¿à¤¨à¥","#{num}y":"#{num}à¤µ","durationMediumYears":"#{num} à¤µà¤°","1#1 yr|#{num} yrs":"one#{num} à¤µà¤°à¥à¤·|#{num} à¤µà¤°à¥","1#1 year|#{num} years":"one#{num} à¤µà¤°à¥à¤·|#{num} à¤µà¤°à¥à¤·à¥","{duration} ago":"{duration}à¤¾à¤ªà¥à¤°à¥à¤µà¥","in {duration}":"{duration}à¤¾à¤¤","finalSeparatorFull":" à¤à¤£à¤¿ ","separatorLong":" "};
ilib.data.sysres_ms = {"generated":true,"NN5":"Me","NN8":"Og","NN10":"Ok","NN12":"Di","MMM3":"Mac","MMM5":"Mei","MMM8":"Ogos","MMM10":"Okt","MMM12":"Dis","MMMM1":"Januari","MMMM2":"Februari","MMMM3":"Mac","MMMM5":"Mei","MMMM6":"Jun","MMMM7":"Julai","MMMM8":"Ogos","MMMM10":"Oktober","MMMM12":"Disember","E0":"A","E1":"I","E2":"S","E3":"R","E4":"K","E5":"J","EE0":"Ah","EE1":"Is","EE2":"Se","EE3":"Ra","EE4":"Kh","EE5":"Ju","EEE0":"Ahd","EEE1":"Isn","EEE2":"Sel","EEE3":"Rab","EEE4":"Kha","EEE5":"Jum","EEE6":"Sab","EEEE0":"Ahad","EEEE1":"Isnin","EEEE2":"Selasa","EEEE3":"Rabu","EEEE4":"Khamis","EEEE5":"Jumaat","EEEE6":"Sabtu","a0":"PG","a1":"PTG","G-1":"S.M.","G1":"TM","1#1 se|#{num} sec":"#{num} sa","1#1 sec|#{num} sec":"#{num} saat","1#1 second|#{num} seconds":"#{num} saat","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} min","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} minit","#{num}h":"#{num}j","durationMediumHours":"#{num} jam","1#1 hr|#{num} hrs":"#{num} jam","1#1 hour|#{num} hours":"#{num} jam","#{num}d":"#{num}h","1#1 dy|#{num} dys":"#{num} ha","durationLongDays":"#{num} hari","1#1 day|#{num} days":"#{num} hari","#{num}w":"#{num}m","durationMediumWeeks":"#{num} mi","1#1 wk|#{num} wks":"#{num} min","1#1 week|#{num} weeks":"#{num} minggu","durationShortMonths":"#{num}b","1#1 mo|#{num} mos":"#{num} bu","1#1 mon|#{num} mons":"#{num} bul","1#1 month|#{num} months":"#{num} bulan","#{num}y":"#{num}t","durationMediumYears":"#{num} thn","1#1 yr|#{num} yrs":"#{num} tah","1#1 year|#{num} years":"#{num} tahun","{duration} ago":"{duration} lalu","in {duration}":"dalam {duration}","finalSeparatorFull":", dan ","separatorLong":" "};
ilib.data.sysres_nb = {"generated":true,"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"ma","NN6":"ju","NN7":"ju","NN8":"au","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jan.","MMM2":"feb.","MMM3":"mars","MMM4":"apr.","MMM5":"mai","MMM6":"juni","MMM7":"juli","MMM8":"aug.","MMM9":"sep.","MMM10":"okt.","MMM11":"nov.","MMM12":"des.","MMMM1":"januar","MMMM2":"februar","MMMM3":"mars","MMMM4":"april","MMMM5":"mai","MMMM6":"juni","MMMM7":"juli","MMMM8":"august","MMMM9":"september","MMMM10":"oktober","MMMM11":"november","MMMM12":"desember","E3":"O","E6":"L","EE0":"sÃ¸","EE1":"ma","EE2":"ti","EE3":"on","EE4":"to","EE5":"fr","EE6":"lÃ¸","EEE0":"sÃ¸n.","EEE1":"man.","EEE2":"tir.","EEE3":"ons.","EEE4":"tor.","EEE5":"fre.","EEE6":"lÃ¸r.","EEEE0":"sÃ¸ndag","EEEE1":"mandag","EEEE2":"tirsdag","EEEE3":"onsdag","EEEE4":"torsdag","EEEE5":"fredag","EEEE6":"lÃ¸rdag","G-1":"f.Kr.","G1":"e.Kr.","1#1 se|#{num} sec":"#{num} sek","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekund|#{num} sekunder","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} min","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minutt|#{num} minutter","#{num}h":"#{num}t","durationMediumHours":"#{num} ti","1#1 hr|#{num} hrs":"one#{num} time|#{num} tim","1#1 hour|#{num} hours":"one#{num} time|#{num} timer","1#1 dy|#{num} dys":"one#{num} dag|#{num} da","durationLongDays":"#{num} dag","1#1 day|#{num} days":"one#{num} dag|#{num} dager","#{num}w":"#{num}u","durationMediumWeeks":"one#{num} uke|#{num} uk","1#1 wk|#{num} wks":"one#{num} uke|#{num} uker","1#1 week|#{num} weeks":"one#{num} uke|#{num} uker","durationShortMonths":"#{num}m","1#1 mo|#{num} mos":"#{num} md.","1#1 mon|#{num} mons":"#{num} mÃ¥n","1#1 month|#{num} months":"one#{num} mÃ¥ned|#{num} mÃ¥neder","#{num}y":"#{num}Ã¥","durationMediumYears":"#{num} Ã¥r","1#1 yr|#{num} yrs":"#{num} Ã¥r","1#1 year|#{num} years":"#{num} Ã¥r","{duration} ago":"for {duration} siden","in {duration}":"om {duration}","finalSeparatorFull":" og ","separatorLong":" "};
ilib.data.sysres_ne = {"generated":true,"NN1":"à¤à¤¨","NN2":"à¤«à¥","NN3":"à¤®à¤¾","NN4":"à¤à¤ª","NN5":"à¤®à¥","NN6":"à¤à¥","NN7":"à¤à¥","NN8":"à¤à¤","NN9":"à¤¸à¥","NN10":"à¤à¤","NN11":"à¤¨à¥","NN12":"à¤¡à¤¿","MMM1":"à¤à¤¨","MMM2":"à¤«à¥à¤¬","MMM3":"à¤®à¤¾à¤°à¥à¤","MMM4":"à¤à¤ªà¥à¤°à¤¿","MMM5":"à¤®à¥","MMM6":"à¤à¥à¤¨","MMM7":"à¤à¥à¤²à¤¾","MMM8":"à¤à¤","MMM9":"à¤¸à¥à¤ªà¥à¤","MMM10":"à¤à¤à¥à¤à¥","MMM11":"à¤¨à¥à¤­à¥","MMM12":"à¤¡à¤¿à¤¸à¥","MMMM1":"à¤à¤¨à¤µà¤°à¥","MMMM2":"à¤«à¥à¤¬à¥à¤°à¥à¤à¤°à¥","MMMM3":"à¤®à¤¾à¤°à¥à¤","MMMM4":"à¤à¤ªà¥à¤°à¤¿à¤²","MMMM5":"à¤®à¥","MMMM6":"à¤à¥à¤¨","MMMM7":"à¤à¥à¤²à¤¾à¤","MMMM8":"à¤à¤à¤¸à¥à¤","MMMM9":"à¤¸à¥à¤ªà¥à¤à¥à¤®à¥à¤¬à¤°","MMMM10":"à¤à¤à¥à¤à¥à¤¬à¤°","MMMM11":"à¤¨à¥à¤­à¥à¤®à¥à¤¬à¤°","MMMM12":"à¤¡à¤¿à¤¸à¥à¤®à¥à¤¬à¤°","E0":"à¥§","E1":"à¥¨","E2":"à¥©","E3":"à¥ª","E4":"à¥«","E5":"à¥¬","E6":"à¥­","EE0":"à¤à¤","EE1":"à¤¸à¥","EE2":"à¤®à¤","EE3":"à¤¬à¥","EE4":"à¤¬à¤¿","EE5":"à¤¶à¥","EE6":"à¤¶à¤¨","EEE0":"à¤à¤à¤¤","EEE1":"à¤¸à¥à¤®","EEE2":"à¤®à¤à¥à¤à¤²","EEE3":"à¤¬à¥à¤§","EEE4":"à¤¬à¤¿à¤¹à¥","EEE5":"à¤¶à¥à¤à¥à¤°","EEE6":"à¤¶à¤¨à¤¿","EEEE0":"à¤à¤à¤¤à¤¬à¤¾à¤°","EEEE1":"à¤¸à¥à¤®à¤¬à¤¾à¤°","EEEE2":"à¤®à¤à¥à¤à¤²à¤¬à¤¾à¤°","EEEE3":"à¤¬à¥à¤§à¤¬à¤¾à¤°","EEEE4":"à¤¬à¤¿à¤¹à¥à¤¬à¤¾à¤°","EEEE5":"à¤¶à¥à¤à¥à¤°à¤¬à¤¾à¤°","EEEE6":"à¤¶à¤¨à¤¿à¤¬à¤¾à¤°","a0":"à¤ªà¥à¤°à¥à¤µ à¤®à¤§à¥à¤¯à¤¾à¤¨à¥à¤¹","a1":"à¤à¤¤à¥à¤¤à¤° à¤®à¤§à¥à¤¯à¤¾à¤¨à¥à¤¹","G-1":"à¤à¤¸à¤¾ à¤ªà¥à¤°à¥à¤µ","G1":"à¤¸à¤¨à¥","#{num}s":"#{num}à¤¸","1#1 sec|#{num} sec":"#{num} à¤¸à¥à¤","1#1 second|#{num} seconds":"#{num} à¤¸à¥à¤à¥à¤£à¥à¤¡","durationShortMinutes":"#{num}à¤®","1#1 min|#{num} min":"#{num} à¤®à¤¿à¤¨","1#1 minute|#{num} minutes":"#{num} à¤®à¤¿à¤¨à¥à¤","#{num}h":"#{num}à¤","1#1 hr|#{num} hrs":"#{num} à¤à¤£à¥","1#1 hour|#{num} hours":"#{num} à¤à¤£à¥à¤à¤¾","#{num}d":"#{num}à¤¦","durationLongDays":"#{num} à¤¦à¤¿à¤¨","1#1 day|#{num} days":"#{num} à¤¦à¤¿à¤¨","#{num}w":"#{num}à¤¹","1#1 wk|#{num} wks":"#{num} à¤¹à¤ªà¥","1#1 week|#{num} weeks":"#{num} à¤¹à¤ªà¥à¤¤à¤¾","durationShortMonths":"#{num}à¤®","1#1 mon|#{num} mons":"#{num} à¤®à¤¹à¤¿","1#1 month|#{num} months":"#{num} à¤®à¤¹à¤¿à¤¨à¤¾","#{num}y":"#{num}à¤¬","1#1 yr|#{num} yrs":"#{num} à¤¬à¤°à¥à¤·","1#1 year|#{num} years":"#{num} à¤¬à¤°à¥à¤·","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_ne_IN = {"generated":true,"MMMM2":"à¤«à¤°à¤µà¤°à¥","MMMM4":"à¤à¤ªà¥à¤°à¥à¤²","MMMM5":"à¤®à¤","MMMM8":"à¤à¤à¤¸à¥à¤¤","MMMM12":"à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°","EEEE0":"à¤à¤à¤¤à¤µà¤¾à¤°","EEEE1":"à¤¸à¥à¤®à¤µà¤¾à¤°","EEEE2":"à¤®à¤à¥à¤à¤²à¤µà¤¾à¤°","EEEE3":"à¤¬à¥à¤§à¤µà¤¾à¤°","EEEE4":"à¤¬à¤¿à¤¹à¥à¤µà¤¾à¤°","EEEE5":"à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°","EEEE6":"à¤¶à¤¨à¤¿à¤µà¤¾à¤°","a0":"à¤ªà¥à¤°à¥à¤µà¤¾à¤¹à¥à¤¨","a1":"à¤à¤ªà¤°à¤¾à¤¹à¥à¤¨","#{num}w":"#{num}à¤¸","1#1 wk|#{num} wks":"one#{num} à¤¸à¤¾à¤¤à¤¾|#{num} à¤¹à¤ªà¥","1#1 week|#{num} weeks":"one#{num} à¤¸à¤¾à¤¤à¤¾|#{num} à¤¹à¤ªà¥à¤¤à¤¾","#{num}y":"#{num}à¤µ","1#1 yr|#{num} yrs":"#{num} à¤µà¤°à¥à¤·","1#1 year|#{num} years":"#{num} à¤µà¤°à¥à¤·"};
ilib.data.sysres_nl = {"N1":"J","N2":"F","N3":"M","N4":"A","N5":"M","N6":"J","N7":"J","N8":"A","N9":"S","N10":"O","N11":"N","N12":"D","NN1":"ja","NN2":"fe","NN3":"mr","NN4":"ap","NN5":"me","NN6":"ju","NN7":"jl","NN8":"au","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jan.","MMM2":"feb.","MMM3":"mrt.","MMM4":"apr.","MMM5":"mei","MMM6":"jun.","MMM7":"jul.","MMM8":"aug.","MMM9":"sep.","MMM10":"okt.","MMM11":"nov.","MMM12":"dec.","MMMM1":"januari","MMMM2":"februari","MMMM3":"maart","MMMM4":"april","MMMM5":"mei","MMMM6":"juni","MMMM7":"juli","MMMM8":"augustus","MMMM9":"september","MMMM10":"oktober","MMMM11":"november","MMMM12":"december","E0":"Z","E1":"M","E2":"D","E3":"W","E4":"D","E5":"V","E6":"Z","EE0":"zo","EE1":"ma","EE2":"di","EE3":"wo","EE4":"do","EE5":"vr","EE6":"za","EEE0":"zon","EEE1":"maa","EEE2":"din","EEE3":"woe","EEE4":"don","EEE5":"vrÃ¿","EEE6":"zat","EEEE0":"zondag","EEEE1":"maandag","EEEE2":"dinsdag","EEEE3":"woensdag","EEEE4":"donderdag","EEEE5":"vrijdag","EEEE6":"zaterdag","a0":"AM","a1":"PM","G-1":"v.Chr.","G1":"n.Chr.","in {duration}":"over {duration}","{duration} ago":"{duration} geleden","1#1 year|#{num} years":"#{num} jaar","1#1 month|#{num} months":"1#{num} maand|#{num} maanden","1#1 week|#{num} weeks":"1#{num} week|#{num} weken","1#1 day|#{num} days":"1#{num} dag|#{num} dagen","1#1 hour|#{num} hours":"#{num} uur","1#1 minute|#{num} minutes":"1#{num} minuut|#{num} minuten","1#1 second|#{num} seconds":"1#{num} seconde|#{num} seconden","1#1 yr|#{num} yrs":"#{num} jr","1#1 mon|#{num} mons":"#{num} mnd","1#1 wk|#{num} wks":"1#{num} wk|#{num} wkn","durationLongDays":"1#{num} dag|#{num} dgn","1#1 hr|#{num} hrs":"#{num} uur","1#1 min|#{num} min":"#{num} min","1#1 sec|#{num} sec":"#{num} sec","durationMediumYears":"#{num} jr","1#1 mo|#{num} mos":"#{num} mn","durationMediumWeeks":"#{num} wk","1#1 dy|#{num} dys":"#{num} da","durationMediumHours":"#{num} u","1#1 mi|#{num} min":"#{num} mi","1#1 se|#{num} sec":"#{num} se","#{num}y":"#{num}j","durationShortMonths":"#{num}m","#{num}w":"#{num}w","#{num}d":"#{num}d","#{num}h":"#{num}u","durationShortMinutes":"#{num}m","#{num}s":"#{num}s","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" en "};
ilib.data.sysres_no = {"MMMM1":"januar","MMM1":"jan.","NN1":"ja.","MMMM2":"februar","MMM2":"feb.","NN2":"fe.","MMMM3":"mars","MMM3":"mar.","NN3":"ma.","MMMM4":"april","MMM4":"apr.","NN4":"ap.","MMMM5":"mai","MMM5":"mai","NN5":"ma.","MMMM6":"juni","MMM6":"jun.","NN6":"jn.","MMMM7":"juli","MMM7":"jul.","NN7":"ju.","MMMM8":"august","MMM8":"aug.","NN8":"au.","MMMM9":"september","MMM9":"sep.","NN9":"se.","MMMM10":"oktober","MMM10":"okt.","NN10":"ok.","MMMM11":"november","MMM11":"nov.","NN11":"no.","MMMM12":"desember","MMM12":"des.","NN12":"de.","EEEE0":"SÃ¸ndag","EEE0":"SÃ¸n.","EE0":"SÃ¸","EEEE1":"Mandag","EEE1":"Man.","EE1":"Ma","EEEE2":"Tirsdag","EEE2":"Tir.","EE2":"Ti","EEEE3":"Onsdag","EEE3":"Ons.","EE3":"On","E3":"O","EEEE4":"Torsdag","EEE4":"Tor.","EE4":"To","EEEE5":"Fredag","EEE5":"Fr","EEEE6":"LÃ¸rdag","EEE6":"LÃ¸r.","EE6":"LÃ¸","E6":"L","ordinalChoice":"#{num}.","a0":"fm","a1":"em","G-1":"f.Kr.","G1":"e.Kr.","durationShortMillis":"#{num}ms","#{num}s":"#{num}s","durationShortMinutes":"#{num}m","#{num}h":"#{num}t","#{num}d":"#{num}d","#{num}w":"#{num}u","durationShortMonths":"#{num}mÃ¥","#{num}y":"#{num}Ã¥","#{num} ms":"#{num} ms","1#1 se|#{num} sec":"#{num} se","1#1 mi|#{num} min":"#{num} mi","durationMediumHours":"#{num} ti","1#1 dy|#{num} dys":"#{num} da","durationMediumWeeks":"#{num} uk","1#1 mo|#{num} mos":"#{num} mÃ¥","durationMediumYears":"#{num} Ã¥r","1#1 sec|#{num} sec":"1#1 sek|#{num} skr","1#1 min|#{num} min":"1#1 min|#{num} mnr","1#1 hr|#{num} hrs":"1#1 tim|#{num} tmr","durationLongDays":"1#1 dag|#{num} dgr","1#1 wk|#{num} wks":"1#1 uke|#{num} ukr","1#1 mon|#{num} mons":"#{num} mÃ¥n","1#1 yr|#{num} yrs":"#{num} Ã¥r","1#1 millisecond|#{num} milliseconds":"1#1 millisekund|#{num} millisekunder","1#1 second|#{num} seconds":"1#1 sekund|#{num} sekunder","1#1 minute|#{num} minutes":"1#1 minutt|#{num} minutter","1#1 hour|#{num} hours":"1#1 time|#{num} timer","1#1 day|#{num} days":"1#1 dag|#{num} dager","1#1 week|#{num} weeks":"1#1 uke|#{num} uker","1#1 month|#{num} months":"1#1 mÃ¥ned|#{num} mÃ¥neder","1#1 year|#{num} years":"#{num} Ã¥r","{duration} ago":"{duration} siden","in {duration}":"i {duration}","separatorShort":" ","separatorMedium":" ","separatorLong":", ","separatorFull":", ","finalSeparatorFull":" og "};
ilib.data.sysres_om = {"generated":true,"NN1":"Am","NN2":"Gu","NN3":"Bi","NN4":"El","NN5":"Ca","NN6":"Wa","NN7":"Ad","NN8":"Ha","NN9":"Fu","NN10":"On","NN11":"Sa","NN12":"Mu","MMM1":"Ama","MMM2":"Gur","MMM3":"Bit","MMM4":"Elb","MMM5":"Cam","MMM6":"Wax","MMM7":"Ado","MMM8":"Hag","MMM9":"Ful","MMM10":"Onk","MMM11":"Sad","MMM12":"Mud","MMMM1":"Amajjii","MMMM2":"Guraandhala","MMMM3":"Bitooteessa","MMMM4":"Elba","MMMM5":"Caamsa","MMMM6":"Waxabajjii","MMMM7":"Adooleessa","MMMM8":"Hagayya","MMMM9":"Fuulbana","MMMM10":"Onkololeessa","MMMM11":"Sadaasa","MMMM12":"Muddee","EE0":"Di","EE1":"Wi","EE2":"Qi","EE3":"Ro","EE4":"Ka","EE5":"Ji","EEE0":"Dil","EEE1":"Wix","EEE2":"Qib","EEE3":"Rob","EEE4":"Kam","EEE5":"Jim","EEE6":"San","EEEE0":"Dilbata","EEEE1":"Wiixata","EEEE2":"Qibxata","EEEE3":"Roobii","EEEE4":"Kamiisa","EEEE5":"Jimaata","EEEE6":"Sanbata","a0":"WD","a1":"WB","G-1":"KD","G1":"KB","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_or = {"generated":true,"NN1":"à¬à¬¾","NN2":"à¬«à­","NN3":"à¬®à¬¾","NN4":"à¬à¬ª","NN5":"à¬®à­","NN6":"à¬à­","NN7":"à¬à­","NN8":"à¬à¬","NN9":"à¬¸à­","NN10":"à¬à¬","NN11":"à¬¨à¬­","NN12":"à¬¡à¬¿","MMM1":"à¬à¬¾à¬¨à­à¬à¬°à­","MMM2":"à¬«à­à¬¬à­à¬°à­à­à¬¾à¬°à­","MMM3":"à¬®à¬¾à¬°à­à¬à­à¬","MMM4":"à¬à¬ªà­à¬°à­à¬²","MMM5":"à¬®à­","MMM6":"à¬à­à¬¨","MMM7":"à¬à­à¬²à¬¾à¬","MMM8":"à¬à¬à¬·à­à¬","MMM9":"à¬¸à­à¬ªà­à¬à­à¬®à­à¬¬à¬°","MMM10":"à¬à¬à­à¬à­à¬¬à¬°","MMM11":"à¬¨à¬­à­à¬®à­à¬¬à¬°","MMM12":"à¬¡à¬¿à¬¸à­à¬®à­à¬¬à¬°","MMMM1":"à¬à¬¾à¬¨à­à¬à¬°à­","MMMM2":"à¬«à­à¬¬à­à¬°à­à­à¬¾à¬°à­","MMMM3":"à¬®à¬¾à¬°à­à¬à­à¬","MMMM4":"à¬à¬ªà­à¬°à­à¬²","MMMM5":"à¬®à­","MMMM6":"à¬à­à¬¨","MMMM7":"à¬à­à¬²à¬¾à¬","MMMM8":"à¬à¬à¬·à­à¬","MMMM9":"à¬¸à­à¬ªà­à¬à­à¬®à­à¬¬à¬°","MMMM10":"à¬à¬à­à¬à­à¬¬à¬°","MMMM11":"à¬¨à¬­à­à¬®à­à¬¬à¬°","MMMM12":"à¬¡à¬¿à¬¸à­à¬®à­à¬¬à¬°","E0":"à¬°","E1":"à¬¸à­","E2":"à¬®","E3":"à¬¬à­","E4":"à¬à­","E5":"à¬¶à­","E6":"à¬¶","EE0":"à¬°à¬¬","EE1":"à¬¸à­","EE2":"à¬®à¬","EE3":"à¬¬à­","EE4":"à¬à­","EE5":"à¬¶à­","EE6":"à¬¶à¬¨","EEE0":"à¬°à¬¬à¬¿","EEE1":"à¬¸à­à¬®","EEE2":"à¬®à¬à­à¬à¬³","EEE3":"à¬¬à­à¬§","EEE4":"à¬à­à¬°à­","EEE5":"à¬¶à­à¬à­à¬°","EEE6":"à¬¶à¬¨à¬¿","EEEE0":"à¬°à¬¬à¬¿à¬¬à¬¾à¬°","EEEE1":"à¬¸à­à¬®à¬¬à¬¾à¬°","EEEE2":"à¬®à¬à­à¬à¬³à¬¬à¬¾à¬°","EEEE3":"à¬¬à­à¬§à¬¬à¬¾à¬°","EEEE4":"à¬à­à¬°à­à¬¬à¬¾à¬°","EEEE5":"à¬¶à­à¬à­à¬°à¬¬à¬¾à¬°","EEEE6":"à¬¶à¬¨à¬¿à¬¬à¬¾à¬°","a0":"am","a1":"pm","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_os = {"generated":true,"NN1":"1","NN2":"2","NN3":"3","NN4":"4","NN5":"5","NN6":"6","NN7":"7","NN8":"8","NN9":"9","NN10":"10","NN11":"11","NN12":"12","MMM1":"1","MMM2":"2","MMM3":"3","MMM4":"4","MMM5":"5","MMM6":"6","MMM7":"7","MMM8":"8","MMM9":"9","MMM10":"10","MMM11":"11","MMM12":"12","MMMM1":"1","MMMM2":"2","MMMM3":"3","MMMM4":"4","MMMM5":"5","MMMM6":"6","MMMM7":"7","MMMM8":"8","MMMM9":"9","MMMM10":"10","MMMM11":"11","MMMM12":"12","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"1","EE1":"2","EE2":"3","EE3":"4","EE4":"5","EE5":"6","EE6":"7","EEE0":"1","EEE1":"2","EEE2":"3","EEE3":"4","EEE4":"5","EEE5":"6","EEE6":"7","EEEE0":"1","EEEE1":"2","EEEE2":"3","EEEE3":"4","EEEE4":"5","EEEE5":"6","EEEE6":"7","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_pa = {"generated":true,"NN1":"à¨à¨¨","NN2":"à¨«à¨¼","NN3":"à¨®à¨¾","NN4":"à¨à¨ª","NN5":"à¨®à¨","NN6":"à¨à©","NN7":"à¨à©","NN8":"à¨à¨","NN9":"à¨¸à¨¤","NN10":"à¨à¨","NN11":"à¨¨à¨µ","NN12":"à¨¦à¨¸","MMM1":"à¨à¨¨à¨µà¨°à©","MMM2":"à¨«à¨¼à¨°à¨µà¨°à©","MMM3":"à¨®à¨¾à¨°à¨","MMM4":"à¨à¨ªà©à¨°à©à¨²","MMM5":"à¨®à¨","MMM6":"à¨à©à¨¨","MMM7":"à¨à©à¨²à¨¾à¨","MMM8":"à¨à¨à¨¸à¨¤","MMM9":"à¨¸à¨¤à©°à¨¬à¨°","MMM10":"à¨à¨à¨¤à©à¨¬à¨°","MMM11":"à¨¨à¨µà©°à¨¬à¨°","MMM12":"à¨¦à¨¸à©°à¨¬à¨°","MMMM1":"à¨à¨¨à¨µà¨°à©","MMMM2":"à¨«à¨¼à¨°à¨µà¨°à©","MMMM3":"à¨®à¨¾à¨°à¨","MMMM4":"à¨à¨ªà©à¨°à©à¨²","MMMM5":"à¨®à¨","MMMM6":"à¨à©à¨¨","MMMM7":"à¨à©à¨²à¨¾à¨","MMMM8":"à¨à¨à¨¸à¨¤","MMMM9":"à¨¸à¨¤à©°à¨¬à¨°","MMMM10":"à¨à¨à¨¤à©à¨¬à¨°","MMMM11":"à¨¨à¨µà©°à¨¬à¨°","MMMM12":"à¨¦à¨¸à©°à¨¬à¨°","E0":"à¨","E1":"à¨¸à©","E2":"à¨®à©°","E3":"à¨¬à©à©±","E4":"à¨µà©","E5":"à¨¸à¨¼à©à©±","E6":"à¨¸à¨¼","EE0":"à¨à¨¤","EE1":"à¨¸à©","EE2":"à¨®à©°","EE3":"à¨¬à©","EE4":"à¨µà©","EE5":"à¨¸à¨¼","EE6":"à¨¸à¨¼","EEE0":"à¨à¨¤.","EEE1":"à¨¸à©à¨®.","EEE2":"à¨®à©°à¨à¨².","EEE3":"à¨¬à©à¨§.","EEE4":"à¨µà©à¨°.","EEE5":"à¨¸à¨¼à©à¨à¨°.","EEE6":"à¨¸à¨¼à¨¨à©.","EEEE0":"à¨à¨¤à¨µà¨¾à¨°","EEEE1":"à¨¸à©à¨®à¨µà¨¾à¨°","EEEE2":"à¨®à©°à¨à¨²à¨µà¨¾à¨°","EEEE3":"à¨¬à©à¨§à¨µà¨¾à¨°","EEEE4":"à¨µà©à¨°à¨µà¨¾à¨°","EEEE5":"à¨¸à¨¼à©à©±à¨à¨°à¨µà¨¾à¨°","EEEE6":"à¨¸à¨¼à¨¨à©à¨à¨°à¨µà¨¾à¨°","a0":"à¨ªà©à¨°à¨µ à¨¦à©à¨ªà¨¹à¨¿à¨°","a1":"à¨¬à¨¾à¨à¨¦ à¨¦à©à¨ªà¨¹à¨¿à¨°","G-1":"à¨. à¨ªà©.","G1":"à¨¸à¨¾à¨²","durationShortMillis":"#{num} à¨®à¨¿","#{num} ms":"#{num} à¨®à¨¿","1#1 millisecond|#{num} milliseconds":"#{num} à¨®à¨¿à¨²à©à¨¸à¨à¨¿à©°à¨","#{num}s":"#{num}à¨¸","1#1 se|#{num} sec":"#{num} à¨¸à¨","1#1 sec|#{num} sec":"#{num} à¨¸à¨à¨¿à©°à¨","1#1 second|#{num} seconds":"#{num} à¨¸à¨à¨¿à©°à¨","durationShortMinutes":"#{num}à¨®à¨¿à©°","1#1 mi|#{num} min":"#{num} à¨®à¨¿à©°","1#1 min|#{num} min":"#{num} à¨®à¨¿à©°à¨","1#1 minute|#{num} minutes":"#{num} à¨®à¨¿à©°à¨","#{num}h":"#{num}à¨à©°","durationMediumHours":"#{num} à¨à©°à¨à©","1#1 hr|#{num} hrs":"#{num} à¨à©°à¨à©","1#1 hour|#{num} hours":"#{num} à¨à©°à¨à©","#{num}d":"#{num}à¨¦à¨¿","1#1 dy|#{num} dys":"#{num} à¨¦à¨¿","1#1 day|#{num} days":"#{num} à¨¦à¨¿à¨¨","durationLongDays":"#{num} à¨¦à¨¿à¨¨","#{num}w":"#{num}à¨¹","durationMediumWeeks":"#{num} à¨¹à¨«à¨¼","1#1 wk|#{num} wks":"#{num} à¨¹à¨«à¨¼à¨¤à©","1#1 week|#{num} weeks":"#{num} à¨¹à¨«à¨¼à¨¤à©","durationShortMonths":"#{num}à¨®","1#1 mo|#{num} mos":"#{num} à¨®","1#1 mon|#{num} mons":"#{num} à¨®à¨¹à©à¨¨à©","1#1 month|#{num} months":"#{num} à¨®à¨¹à©à¨¨à©","#{num}y":"#{num}à¨¸","durationMediumYears":"#{num} à¨¸à¨¾","1#1 yr|#{num} yrs":"#{num} à¨¸à¨¾à¨²","1#1 year|#{num} years":"#{num} à¨¸à¨¾à¨²","{duration} ago":"{duration} à¨à¨¼à¨¿à¨à¨¦à¨¾","in {duration}":"{duration} à¨µà¨¿à©±à¨","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_pa_Arab_PK = {"generated":true,"NN1":"Ø¬Ù","NN2":"ÙØ±","NN3":"ÙØ§","NN4":"Ø§Ù¾","NN5":"ÙØ¦","NN6":"Ø¬Ù","NN7":"Ø¬Ù","NN8":"Ø§Ú¯","NN9":"Ø³Øª","NN10":"Ø§Ú©","NN11":"ÙÙ","NN12":"Ø¯Ø³","MMM1":"Ø¬ÙÙØ±Û","MMM2":"ÙØ±ÙØ±Û","MMM3":"ÙØ§Ø±Ú","MMM4":"Ø§Ù¾Ø±ÛÙ","MMM5":"ÙØ¦","MMM6":"Ø¬ÙÙ","MMM7":"Ø¬ÙÙØ§Ø¦Û","MMM8":"Ø§Ú¯Ø³Øª","MMM9":"Ø³ØªÙØ¨Ø±","MMM10":"Ø§Ú©ØªÙØ¨Ø±","MMM11":"ÙÙÙØ¨Ø±","MMM12":"Ø¯Ø³ÙØ¨Ø±","MMMM1":"Ø¬ÙÙØ±Û","MMMM2":"ÙØ±ÙØ±Û","MMMM3":"ÙØ§Ø±Ú","MMMM4":"Ø§Ù¾Ø±ÛÙ","MMMM5":"ÙØ¦","MMMM6":"Ø¬ÙÙ","MMMM7":"Ø¬ÙÙØ§Ø¦Û","MMMM8":"Ø§Ú¯Ø³Øª","MMMM9":"Ø³ØªÙØ¨Ø±","MMMM10":"Ø§Ú©ØªÙØ¨Ø±","MMMM11":"ÙÙÙØ¨Ø±","MMMM12":"Ø¯Ø³ÙØ¨Ø±","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"Ø§Øª","EE1":"Ù¾Û","EE2":"ÙÙ","EE3":"Ø¨Ù","EE4":"Ø¬Ù","EE5":"Ø¬Ù","EE6":"ÛÙ","EEE0":"Ø§ØªÙØ§Ø±","EEE1":"Ù¾ÛØ±","EEE2":"ÙÙÚ¯Ù","EEE3":"Ø¨ÙØ¯Ú¾","EEE4":"Ø¬ÙØ¹Ø±Ø§Øª","EEE5":"Ø¬ÙØ¹Û","EEE6":"ÛÙØªÛ","EEEE0":"Ø§ØªÙØ§Ø±","EEEE1":"Ù¾ÛØ±","EEEE2":"ÙÙÚ¯Ù","EEEE3":"Ø¨ÙØ¯Ú¾","EEEE4":"Ø¬ÙØ¹Ø±Ø§Øª","EEEE5":"Ø¬ÙØ¹Û","EEEE6":"ÛÙØªÛ","a0":"AM","a1":"PM","G-1":"BCE","G1":"CE"};
ilib.data.sysres_pl = {"generated":true,"NN1":"st","NN2":"lu","NN3":"ma","NN4":"kw","NN5":"ma","NN6":"cz","NN7":"li","NN8":"si","NN9":"wr","NN10":"pa","NN11":"li","NN12":"gr","MMM1":"sty","MMM2":"lut","MMM3":"mar","MMM4":"kwi","MMM5":"maj","MMM6":"cze","MMM7":"lip","MMM8":"sie","MMM9":"wrz","MMM10":"paÅº","MMM11":"lis","MMM12":"gru","MMMM1":"stycznia","MMMM2":"lutego","MMMM3":"marca","MMMM4":"kwietnia","MMMM5":"maja","MMMM6":"czerwca","MMMM7":"lipca","MMMM8":"sierpnia","MMMM9":"wrzeÅnia","MMMM10":"paÅºdziernika","MMMM11":"listopada","MMMM12":"grudnia","E0":"N","E1":"P","E2":"W","E3":"Å","E4":"C","E5":"P","EE0":"ni","EE1":"po","EE2":"wt","EE3":"År","EE4":"cz","EE5":"pt","EE6":"so","EEE0":"niedz.","EEE1":"pon.","EEE2":"wt.","EEE3":"År.","EEE4":"czw.","EEE5":"pt.","EEE6":"sob.","EEEE0":"niedziela","EEEE1":"poniedziaÅek","EEEE2":"wtorek","EEEE3":"Åroda","EEEE4":"czwartek","EEEE5":"piÄtek","EEEE6":"sobota","G-1":"p.n.e.","G1":"n.e.","1#1 se|#{num} sec":"#{num} se","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekunda|few#{num} sekundy|#{num} sekund","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} mi","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minuta|many#{num} minut|#{num} minuty","#{num}h":"#{num}g","durationMediumHours":"#{num} go","1#1 hr|#{num} hrs":"#{num} god","1#1 hour|#{num} hours":"one#{num} godzina|few#{num} godziny|#{num} godzin","1#1 dy|#{num} dys":"one#{num} dz|few#{num} dni|many#{num} dni|#{num} dn","durationLongDays":"one#{num} dzi|few#{num} dni|many#{num} dni|#{num} dnia","1#1 day|#{num} days":"one#{num} dzieÅ|few#{num} dni|many#{num} dni|#{num} dnia","#{num}w":"#{num}t","durationMediumWeeks":"#{num} ty","1#1 wk|#{num} wks":"one#{num} tyd|#{num} tyg","1#1 week|#{num} weeks":"one#{num} tydzieÅ|few#{num} tygodnie|many#{num} tygodni|#{num} tygodnia","durationShortMonths":"#{num}m","1#1 mo|#{num} mos":"#{num} mi","1#1 mon|#{num} mons":"#{num} mie","1#1 month|#{num} months":"one#{num} miesiÄc|few#{num} miesiÄce|many#{num} miesiÄcy|#{num} miesiÄca","#{num}y":"#{num}r","durationMediumYears":"one#{num} rok|few#{num} la|many#{num} lat|#{num} ro","1#1 yr|#{num} yrs":"one#{num} rok|few#{num} lata|many#{num} lat|#{num} roku","1#1 year|#{num} years":"one#{num} rok|few#{num} lata|many#{num} lat|#{num} roku","{duration} ago":"{duration} temu","in {duration}":"za {duration}","finalSeparatorFull":" i ","separatorLong":" "};
ilib.data.sysres_pt = {"MMMM1":"Janeiro","MMM1":"Jan","NN1":"Ja","MMMM2":"Fevereiro","MMM2":"Fev","NN2":"Fe","MMMM3":"MarÃ§o","MMM3":"Mar","NN3":"Ma","MMMM4":"Abril","MMM4":"Abr","NN4":"Ab","MMMM5":"Maio","MMM5":"Mai","NN5":"Ma","MMMM6":"Junho","MMM6":"Jun","NN6":"Ju","MMMM7":"Julho","MMM7":"Jul","NN7":"Ju","MMMM8":"Agosto","MMM8":"Ago","NN8":"Ag","MMMM9":"Setembro","MMM9":"Set","NN9":"Se","MMMM10":"Outubro","MMM10":"Out","NN10":"Ou","MMMM11":"Novembro","MMM11":"Nov","NN11":"No","MMMM12":"Dezembro","MMM12":"Dez","NN12":"De","EEEE0":"domingo","EEE0":"dom","EE0":"do","E0":"D","EEEE1":"segunda-feira","EEE1":"seg","EE1":"sg","E1":"S","EEEE2":"terÃ§a-feira","EEE2":"ter","EE2":"te","EEEE3":"quarta-feira","EEE3":"qua","EE3":"qu","E3":"Q","EEEE4":"quinta-feira","EEE4":"qui","EE4":"qi","E4":"Q","EEEE5":"sexta-feira","EEE5":"sex","EE5":"sx","E5":"S","EEEE6":"sÃ¡bado","EEE6":"sÃ¡b","EE6":"sb","ordinalChoice":"#{num}","a0":"AM","a1":"PM","G-1":"a.C.","G1":"d.C.","durationShortMillis":"#{num}ms","#{num}s":"#{num}s","durationShortMinutes":"#{num}m","#{num}h":"#{num}h","#{num}d":"#{num}d","#{num}w":"#{num}sm","durationShortMonths":"#{num}me","#{num}y":"#{num}a","#{num} ms":"#{num} ms","1#1 se|#{num} sec":"1#{num} sg|#{num} sgs","1#1 mi|#{num} min":"1#{num} mn|#{num} mns","durationMediumHours":"1#{num} hr|#{num} hrs","1#1 dy|#{num} dys":"1#{num} di|#{num} dis","durationMediumWeeks":"1#{num} sm|#{num} sms","1#1 mo|#{num} mos":"1#{num} mÃª|#{num} mes","durationMediumYears":"1#{num} an|#{num} ans","1#1 sec|#{num} sec":"1#{num} seg|#{num} segs","1#1 min|#{num} min":"1#{num} min|#{num} mins","1#1 hr|#{num} hrs":"1#{num} hor|#{num} hors","durationLongDays":"1#{num} dia|#{num} dias","1#1 wk|#{num} wks":"1#{num} sem|#{num} sems","1#1 mon|#{num} mons":"1#{num} mÃªs|#{num} mss","1#1 yr|#{num} yrs":"1#{num} ano|#{num} anos","1#1 millisecond|#{num} milliseconds":"1#{num} millisegundo|#{num} millisegundos","1#1 second|#{num} seconds":"1#{num} segundo|#{num} segundos","1#1 minute|#{num} minutes":"1#{num} minuto|#{num} minutos","1#1 hour|#{num} hours":"1#{num} hora|#{num} horas","1#1 day|#{num} days":"1#{num} dia|#{num} dias","1#1 week|#{num} weeks":"1#{num} semana|#{num} semanas","1#1 month|#{num} months":"1#{num} mÃªs|#{num} meses","1#1 year|#{num} years":"1#{num} ano|#{num} anos","{duration} ago":"hÃ¡ {duration}","in {duration}":"dentro de {duration}","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" e "};
ilib.data.sysres_pt_BR = {"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ab","NN5":"ma","NN6":"ju","NN7":"ju","NN8":"ag","NN9":"se","NN10":"ou","NN11":"no","NN12":"de","MMM1":"jan","MMM2":"fev","MMM3":"mar","MMM4":"abr","MMM5":"mai","MMM6":"jun","MMM7":"jul","MMM8":"ago","MMM9":"set","MMM10":"out","MMM11":"nov","MMM12":"dez","MMMM1":"janeiro","MMMM2":"fevereiro","MMMM3":"marÃ§o","MMMM4":"abril","MMMM5":"maio","MMMM6":"junho","MMMM7":"julho","MMMM8":"agosto","MMMM9":"setembro","MMMM10":"outubro","MMMM11":"novembro","MMMM12":"dezembro","EE1":"se","EE4":"qu","EE5":"se","EE6":"sÃ¡"};
ilib.data.sysres_ro = {"generated":true,"NN1":"ia","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"ma","NN6":"iu","NN7":"iu","NN8":"au","NN9":"se","NN10":"oc","NN11":"no","NN12":"de","MMM1":"ian.","MMM2":"feb.","MMM3":"mar.","MMM4":"apr.","MMM5":"mai","MMM6":"iun.","MMM7":"iul.","MMM8":"aug.","MMM9":"sept.","MMM10":"oct.","MMM11":"nov.","MMM12":"dec.","MMMM1":"ianuarie","MMMM2":"februarie","MMMM3":"martie","MMMM4":"aprilie","MMMM5":"mai","MMMM6":"iunie","MMMM7":"iulie","MMMM8":"august","MMMM9":"septembrie","MMMM10":"octombrie","MMMM11":"noiembrie","MMMM12":"decembrie","E0":"D","E1":"L","E2":"M","E3":"M","E4":"J","E5":"V","EE0":"du","EE1":"lu","EE2":"ma","EE3":"mi","EE4":"jo","EE5":"vi","EE6":"sÃ¢","EEE0":"du","EEE1":"lu","EEE2":"ma","EEE3":"mi","EEE4":"jo","EEE5":"vi","EEE6":"sÃ¢","EEEE0":"duminicÄ","EEEE1":"luni","EEEE2":"marÈi","EEEE3":"miercuri","EEEE4":"joi","EEEE5":"vineri","EEEE6":"sÃ¢mbÄtÄ","G-1":"Ã®.Hr.","G1":"d.Hr.","1#1 se|#{num} sec":"#{num} se","1#1 sec|#{num} sec":"one#{num} sec|few#{num} sec|#{num} de ","1#1 second|#{num} seconds":"one#{num} secundÄ|few#{num} secunde|#{num} de secunde","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} mi","1#1 min|#{num} min":"one#{num} min|few#{num} min|#{num} de ","1#1 minute|#{num} minutes":"one#{num} minut|few#{num} minute|#{num} de minute","#{num}h":"#{num}o","durationMediumHours":"one#{num} orÄ|#{num} ore","1#1 hr|#{num} hrs":"one#{num} orÄ|few#{num} ore|#{num} de ","1#1 hour|#{num} hours":"one#{num} orÄ|few#{num} ore|#{num} de ore","#{num}d":"#{num}z","1#1 dy|#{num} dys":"#{num} zi","durationLongDays":"one#{num} zi|few#{num} zile|#{num} de ","1#1 day|#{num} days":"one#{num} zi|few#{num} zile|#{num} de zile","#{num}w":"#{num}s","durationMediumWeeks":"#{num} sÄ","1#1 wk|#{num} wks":"one#{num} sÄp|few#{num} sÄp|#{num} de ","1#1 week|#{num} weeks":"one#{num} sÄptÄmÃ¢nÄ|few#{num} sÄptÄmÃ¢ni|#{num} de sÄptÄmÃ¢ni","durationShortMonths":"#{num}l","1#1 mo|#{num} mos":"#{num} lu","1#1 mon|#{num} mons":"one#{num} lunÄ|few#{num} luni|#{num} de ","1#1 month|#{num} months":"one#{num} lunÄ|few#{num} luni|#{num} de luni","#{num}y":"#{num}a","durationMediumYears":"one#{num} an|#{num} ani","1#1 yr|#{num} yrs":"one#{num} an|few#{num} ani|#{num} de ","1#1 year|#{num} years":"one#{num} an|few#{num} ani|#{num} de ani","{duration} ago":"Ã®n urmÄ cu {duration}","in {duration}":"Ã®n {duration}","finalSeparatorFull":" Åi ","separatorLong":" "};
ilib.data.sysres_ru = {"N1":"Ð¯","N2":"Ð¤","N3":"Ð","N4":"Ð","N5":"Ð","N6":"Ð","N7":"Ð","N8":"Ð","N9":"Ð¡","N10":"Ð","N11":"Ð","N12":"Ð","NN1":"ÑÐ½","NN2":"ÑÐµ","NN3":"Ð¼Ð°","NN4":"Ð°Ð¿","NN5":"Ð¼Ð°","NN6":"Ð¸Ñ","NN7":"Ð¸Ñ","NN8":"Ð°Ð²","NN9":"ÑÐµ","NN10":"Ð¾Ðº","NN11":"Ð½Ð¾","NN12":"Ð´Ðµ","MMM1":"ÑÐ½Ð².","MMM2":"ÑÐµÐ²Ñ.","MMM3":"Ð¼Ð°ÑÑÐ°","MMM4":"Ð°Ð¿Ñ.","MMM5":"Ð¼Ð°Ñ","MMM6":"Ð¸ÑÐ½Ñ","MMM7":"Ð¸ÑÐ»Ñ","MMM8":"Ð°Ð²Ð³.","MMM9":"ÑÐµÐ½Ñ.","MMM10":"Ð¾ÐºÑ.","MMM11":"Ð½Ð¾ÑÐ±.","MMM12":"Ð´ÐµÐº","MMMM1":"ÑÐ½Ð²Ð°ÑÑ","MMMM2":"ÑÐµÐ²ÑÐ°Ð»Ñ","MMMM3":"Ð¼Ð°ÑÑÐ°","MMMM4":"Ð°Ð¿ÑÐµÐ»Ñ","MMMM5":"Ð¼Ð°Ñ","MMMM6":"Ð¸ÑÐ½Ñ","MMMM7":"Ð¸ÑÐ»Ñ","MMMM8":"Ð°Ð²Ð³ÑÑÑÐ°","MMMM9":"ÑÐµÐ½ÑÑÐ±ÑÑ","MMMM10":"Ð¾ÐºÑÑÐ±ÑÑ","MMMM11":"Ð½Ð¾ÑÐ±ÑÑ","MMMM12":"Ð´ÐµÐºÐ°Ð±ÑÑ","E0":"Ð","E1":"Ð","E2":"Ð","E3":"Ð¡","E4":"Ð§","E5":"Ð","E6":"Ð¡","EE0":"Ð²Ñ","EE1":"Ð¿Ð½","EE2":"Ð²Ñ","EE3":"ÑÑ","EE4":"ÑÑ","EE5":"Ð¿Ñ","EE6":"ÑÐ±","EEE0":"Ð²Ñ","EEE1":"Ð¿Ð½","EEE2":"Ð²Ñ","EEE3":"ÑÑ","EEE4":"ÑÑ","EEE5":"Ð¿Ñ","EEE6":"ÑÐ±","EEEE0":"Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ","EEEE1":"Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº","EEEE2":"Ð²ÑÐ¾ÑÐ½Ð¸Ðº","EEEE3":"ÑÑÐµÐ´Ð°","EEEE4":"ÑÐµÑÐ²ÐµÑÐ³","EEEE5":"Ð¿ÑÑÐ½Ð¸ÑÐ°","EEEE6":"ÑÑÐ±Ð±Ð¾ÑÐ°","a0":"Ð´Ð¾ Ð¿Ð¾Ð»ÑÐ´Ð½Ñ","a1":"Ð¿Ð¾ÑÐ»Ðµ Ð¿Ð¾Ð»ÑÐ´Ð½Ñ","G-1":"Ð´Ð¾ Ð½.Ñ.","G1":"Ð½.Ñ.","in {duration}":"ÑÐµÑÐµÐ· {duration}","{duration} ago":"{duration} Ð½Ð°Ð·Ð°Ð´","1#1 year|#{num} years":"one#{num} Ð³Ð¾Ð´|many#{num} Ð»ÐµÑ|#{num} Ð³Ð¾Ð´Ð°","1#1 month|#{num} months":"one#{num} Ð¼ÐµÑÑÑ|many#{num} Ð¼ÐµÑÑÑÐµÐ²|#{num} Ð¼ÐµÑÑÑÐ°","1#1 week|#{num} weeks":"one#{num} Ð½ÐµÐ´ÐµÐ»Ñ|many#{num} Ð½ÐµÐ´ÐµÐ»Ñ|#{num} Ð½ÐµÐ´ÐµÐ»Ð¸","1#1 day|#{num} days":"one#{num} Ð´ÐµÐ½Ñ|many#{num} Ð´Ð½ÐµÐ¹|#{num} Ð´Ð½Ñ","1#1 hour|#{num} hours":"one#{num} ÑÐ°Ñ|many#{num} ÑÐ°ÑÐ¾Ð²|#{num} ÑÐ°ÑÐ°","1#1 minute|#{num} minutes":"one#{num} Ð¼Ð¸Ð½ÑÑÐ°|many#{num} Ð¼Ð¸Ð½ÑÑ|#{num} Ð¼Ð¸Ð½ÑÑÑ","1#1 second|#{num} seconds":"one#{num} ÑÐµÐºÑÐ½Ð´Ð°|many#{num} ÑÐµÐºÑÐ½Ð´|#{num} ÑÐµÐºÑÐ½Ð´Ñ","1#1 yr|#{num} yrs":"one#{num} Ð³Ð¾Ð´|many#{num} Ð»ÐµÑ|#{num} Ð³Ð¾Ð´Ð°","1#1 mon|#{num} mons":"#{num} Ð¼ÐµÑ","1#1 wk|#{num} wks":"#{num} Ð½ÐµÐ´","durationLongDays":"one#{num} Ð´ÐµÐ½Ñ|many#{num} Ð´Ð½ÐµÐ¹|#{num} Ð´Ð½Ñ","1#1 hr|#{num} hrs":"one#{num} ÑÐ°Ñ|many#{num} ÑÐ°Ñ|#{num} ÑÐ°ÑÐ°","1#1 min|#{num} min":"#{num} Ð¼Ð¸Ð½","1#1 sec|#{num} sec":"#{num} ÑÐµÐº","durationMediumYears":"#{num} Ð³","1#1 mo|#{num} mos":"#{num} Ð¼Ðµ","durationMediumWeeks":"#{num} Ð½Ðµ","1#1 dy|#{num} dys":"#{num} Ð´Ð½","durationMediumHours":"#{num} Ñ","1#1 mi|#{num} min":"#{num} Ð¼Ð¸","1#1 se|#{num} sec":"#{num} ÑÐµ","#{num}y":"#{num}Ð³","durationShortMonths":"#{num}Ð¼","#{num}w":"#{num}Ð½","#{num}d":"#{num}Ð´","#{num}h":"#{num}Ñ","durationShortMinutes":"#{num}Ð¼","#{num}s":"#{num}Ñ","durationShortMillis":"#{num}Ð¼Ñ","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" Ð¸ "};
ilib.data.sysres_si = {"generated":true,"NN1":"à¶¢à¶±","NN2":"à¶´à·","NN3":"à¶¸à·","NN4":"à¶à¶´","NN5":"à¶¸à·","NN6":"à¶¢à·","NN7":"à¶¢à·","NN8":"à¶à¶","NN9":"à·à·","NN10":"à¶à¶","NN11":"à¶±à·","NN12":"à¶¯à·","MMM1":"à¶¢à¶±","MMM2":"à¶´à·à¶¶","MMM3":"à¶¸à·à¶»à·à¶­à·","MMM4":"à¶à¶´à·âà¶»à·à¶½à·","MMM5":"à¶¸à·à¶ºà·","MMM6":"à¶¢à·à¶±à·","MMM7":"à¶¢à·à¶½à·","MMM8":"à¶à¶à·","MMM9":"à·à·à¶´à·","MMM10":"à¶à¶à·","MMM11":"à¶±à·à·à·","MMM12":"à¶¯à·à·à·","MMMM1":"à¶¢à¶±à·à·à¶»à·","MMMM2":"à¶´à·à¶¶à¶»à·à·à¶»à·","MMMM3":"à¶¸à·à¶»à·à¶­à·","MMMM4":"à¶à¶´à·âà¶»à·à¶½à·","MMMM5":"à¶¸à·à¶ºà·","MMMM6":"à¶¢à·à¶±à·","MMMM7":"à¶¢à·à¶½à·","MMMM8":"à¶à¶à·à·à·à¶­à·","MMMM9":"à·à·à¶´à·à¶­à·à¶¸à·à¶¶à¶»à·","MMMM10":"à¶à¶à·à¶­à·à¶¶à¶»à·","MMMM11":"à¶±à·à·à·à¶¸à·à¶¶à¶»à·","MMMM12":"à¶¯à·à·à·à¶¸à·à¶¶à¶»à·","E0":"à¶","E1":"à·","E2":"à¶","E3":"à¶¶","E4":"à¶¶à·âà¶»","E5":"à·à·","E6":"à·à·","EE0":"à¶","EE1":"à·","EE2":"à¶","EE3":"à¶¶","EE4":"à¶¶à·","EE5":"à·à·","EE6":"à·à·","EEE0":"à¶à¶»à·","EEE1":"à·à¶³à·","EEE2":"à¶à¶","EEE3":"à¶¶à¶¯à·","EEE4":"à¶¶à·âà¶»à·","EEE5":"à·à·à¶à·","EEE6":"à·à·à¶±","EEEE0":"à¶à¶»à·à¶¯à·","EEEE1":"à·à¶³à·à¶¯à·","EEEE2":"à¶à¶à·à¶»à·à·à·à¶¯à·","EEEE3":"à¶¶à¶¯à·à¶¯à·","EEEE4":"à¶¶à·âà¶»à·à·à·à¶´à¶­à·à¶±à·à¶¯à·","EEEE5":"à·à·à¶à·à¶»à·à¶¯à·","EEEE6":"à·à·à¶±à·à·à¶»à·à¶¯à·","a0":"à¶´à·.à·.","a1":"à¶´.à·.","G-1":"à¶à·âà¶»à·.à¶´à·.","G1":"à¶à·âà¶»à·.à·.","#{num}s":"#à·à·à¶±à·à¶©à· {num}à¶à·","1#1 sec|#{num} sec":"#à·à·à¶±à·à¶©à· {num}à¶à·","1#1 second|#{num} seconds":"#à·à·à¶±à·à¶©à· {num}à¶à·","durationShortMinutes":"#à·à·à¶±à·à¶©à· {num}à¶à·","1#1 min|#{num} min":"#à·à·à¶±à·à¶©à· {num}à¶à·","1#1 minute|#{num} minutes":"#à·à·à¶±à·à¶©à· {num}à¶à·","#{num}h":"#à¶´à·à¶º {num}à¶à·","1#1 hr|#{num} hrs":"#à¶´à·à¶º {num}à¶à·","1#1 hour|#{num} hours":"#à¶´à·à¶º {num}à¶à·","#{num}d":"#à¶¯à·à¶± {num}à¶à·","durationLongDays":"#à¶¯à·à¶± {num}à¶à·","1#1 day|#{num} days":"#à¶¯à·à¶± {num}à¶à·","#{num}w":"#à·à¶­à· {num}à¶à·","1#1 wk|#{num} wks":"#à·à¶­à· {num}à¶à·","1#1 week|#{num} weeks":"#à·à¶­à· {num}à¶à·","durationShortMonths":"#à¶¸à·à· {num}à¶à·","1#1 mon|#{num} mons":"#à¶¸à·à· {num}à¶à·","1#1 month|#{num} months":"#à¶¸à·à· {num}à¶à·","#{num}y":"#à·à·à¶» {num}à¶à·","1#1 yr|#{num} yrs":"#à·à·à¶» {num}à¶à·","1#1 year|#{num} years":"#à·à·à¶» {num}à¶à·","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_sk = {"generated":true,"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"mÃ¡","NN6":"jÃº","NN7":"jÃº","NN8":"au","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jan","MMM2":"feb","MMM3":"mar","MMM4":"apr","MMM5":"mÃ¡j","MMM6":"jÃºn","MMM7":"jÃºl","MMM8":"aug","MMM9":"sep","MMM10":"okt","MMM11":"nov","MMM12":"dec","MMMM1":"januÃ¡r","MMMM2":"februÃ¡r","MMMM3":"marec","MMMM4":"aprÃ­l","MMMM5":"mÃ¡j","MMMM6":"jÃºn","MMMM7":"jÃºl","MMMM8":"august","MMMM9":"september","MMMM10":"oktÃ³ber","MMMM11":"november","MMMM12":"december","E0":"N","E1":"P","E2":"U","E3":"S","E4":"Å ","E5":"P","EE0":"ne","EE1":"po","EE2":"ut","EE3":"st","EE4":"Å¡t","EE5":"pi","EE6":"so","EEE0":"ne","EEE1":"po","EEE2":"ut","EEE3":"st","EEE4":"Å¡t","EEE5":"pi","EEE6":"so","EEEE0":"nedeÄ¾a","EEEE1":"pondelok","EEEE2":"utorok","EEEE3":"streda","EEEE4":"Å¡tvrtok","EEEE5":"piatok","EEEE6":"sobota","a0":"dopoludnia","a1":"popoludnÃ­","G-1":"pred n.l.","G1":"n.l.","1#1 se|#{num} sec":"#{num} se","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekunda|few#{num} sekundy|#{num} sekÃºnd","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} min","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minÃºta|few#{num} minÃºty|#{num} minÃºt","durationMediumHours":"#{num} ho","1#1 hr|#{num} hrs":"#{num} hod","1#1 hour|#{num} hours":"one#{num} hodina|few#{num} hodiny|#{num} hodÃ­n","1#1 dy|#{num} dys":"#{num} d.","durationLongDays":"one#{num} deÅ|few#{num} dni|#{num} dnÃ­","1#1 day|#{num} days":"one#{num} deÅ|few#{num} dni|#{num} dnÃ­","#{num}w":"#{num}t","durationMediumWeeks":"#{num} tÃ½","1#1 wk|#{num} wks":"#{num} tÃ½Å¾","1#1 week|#{num} weeks":"one#{num} tÃ½Å¾deÅ|few#{num} tÃ½Å¾dne|#{num} tÃ½Å¾dÅov","durationShortMonths":"#{num}m","1#1 mo|#{num} mos":"#{num} me","1#1 mon|#{num} mons":"#{num} mes","1#1 month|#{num} months":"one#{num} mesiac|few#{num} mesiace|#{num} mesiacov","#{num}y":"#{num}r","durationMediumYears":"#{num} r.","1#1 yr|#{num} yrs":"few#{num} roky|#{num} rok","1#1 year|#{num} years":"one#{num} rok|few#{num} roky|#{num} rokov","{duration} ago":"-{duration}","in {duration}":"{duration}","finalSeparatorFull":" a ","separatorLong":" "};
ilib.data.sysres_sl = {"generated":true,"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"ma","NN6":"ju","NN7":"ju","NN8":"av","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jan.","MMM2":"feb.","MMM3":"mar.","MMM4":"apr.","MMM5":"maj","MMM6":"jun.","MMM7":"jul.","MMM8":"avg.","MMM9":"sep.","MMM10":"okt.","MMM11":"nov.","MMM12":"dec.","MMMM1":"januar","MMMM2":"februar","MMMM3":"marec","MMMM4":"april","MMMM5":"maj","MMMM6":"junij","MMMM7":"julij","MMMM8":"avgust","MMMM9":"september","MMMM10":"oktober","MMMM11":"november","MMMM12":"december","E0":"n","E1":"p","E2":"t","E3":"s","E4":"Ä","E5":"p","E6":"s","EE0":"ne","EE1":"po","EE2":"to","EE3":"sr","EE4":"Äe","EE5":"pe","EE6":"so","EEE0":"ned.","EEE1":"pon.","EEE2":"tor.","EEE3":"sre.","EEE4":"Äet.","EEE5":"pet.","EEE6":"sob.","EEEE0":"nedelja","EEEE1":"ponedeljek","EEEE2":"torek","EEEE3":"sreda","EEEE4":"Äetrtek","EEEE5":"petek","EEEE6":"sobota","a0":"dop.","a1":"pop.","G-1":"pr. n. Å¡t.","G1":"po Kr.","1#1 se|#{num} sec":"#{num} se","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekunda|two#{num} sekundi|few#{num} sekunde|#{num} sekund","durationShortMinutes":"#{num}m","1#1 mi|#{num} min":"#{num} min","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minuta|two#{num} minuti|few#{num} minute|#{num} minut","#{num}h":"#{num}u","durationMediumHours":"one#{num} ura|two#{num} uri|few#{num} ure|#{num} ur","1#1 hr|#{num} hrs":"one#{num} ura|two#{num} uri|few#{num} ure|#{num} ur","1#1 hour|#{num} hours":"one#{num} ura|two#{num} uri|few#{num} ure|#{num} ur","1#1 dy|#{num} dys":"one#{num} dan|few#{num} dn|#{num} dni","durationLongDays":"one#{num} dan|few#{num} dne|#{num} dni","1#1 day|#{num} days":"one#{num} dan|few#{num} dnevi|#{num} dni","#{num}w":"#{num}t","durationMediumWeeks":"#{num} te","1#1 wk|#{num} wks":"#{num} ted","1#1 week|#{num} weeks":"one#{num} teden|two#{num} tedna|few#{num} tedni|#{num} tednov","durationShortMonths":"#{num}m","1#1 mo|#{num} mos":"#{num} me","1#1 mon|#{num} mons":"#{num} mes","1#1 month|#{num} months":"one#{num} mesec|two#{num} meseca|few#{num} meseci|#{num} mesecev","#{num}y":"#{num}l","durationMediumYears":"one#{num} le|two#{num} le|few#{num} le|#{num} let","1#1 yr|#{num} yrs":"one#{num} leto|two#{num} leti|few#{num} leta|#{num} let","1#1 year|#{num} years":"one#{num} leto|two#{num} leti|few#{num} leta|#{num} let","{duration} ago":"-{duration}","in {duration}":"Äez {duration}","finalSeparatorFull":" in ","separatorLong":" "};
ilib.data.sysres_so = {"generated":true,"NN1":"Ko","NN2":"La","NN3":"Sa","NN4":"Af","NN5":"Sh","NN6":"Li","NN7":"To","NN8":"Si","NN9":"Sa","NN10":"To","NN11":"KI","NN12":"LI","MMM1":"Kob","MMM2":"Lab","MMM3":"Sad","MMM4":"Afr","MMM5":"Sha","MMM6":"Lix","MMM7":"Tod","MMM8":"Sid","MMM9":"Sag","MMM10":"Tob","MMM11":"KIT","MMM12":"LIT","MMMM1":"Bisha Koobaad","MMMM2":"Bisha Labaad","MMMM3":"Bisha Saddexaad","MMMM4":"Bisha Afraad","MMMM5":"Bisha Shanaad","MMMM6":"Bisha Lixaad","MMMM7":"Bisha Todobaad","MMMM8":"Bisha Sideedaad","MMMM9":"Bisha Sagaalaad","MMMM10":"Bisha Tobnaad","MMMM11":"Bisha Kow iyo Tobnaad","MMMM12":"Bisha Laba iyo Tobnaad","E0":"A","E1":"I","E3":"A","E4":"K","E5":"J","EE0":"Ax","EE1":"Is","EE2":"Ta","EE3":"Ar","EE4":"Kh","EE5":"Ji","EEE0":"Axd","EEE1":"Isn","EEE2":"Tal","EEE3":"Arb","EEE4":"Kha","EEE5":"Jim","EEE6":"Sab","EEEE0":"Axad","EEEE1":"Isniin","EEEE2":"Talaado","EEEE3":"Arbaco","EEEE4":"Khamiis","EEEE5":"Jimco","EEEE6":"Sabti","a0":"sn.","a1":"gn.","G-1":"CK","G1":"CD","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_sq = {"generated":true,"NN2":"Sh","NN4":"Pr","NN6":"Qe","NN7":"Ko","NN8":"Gs","NN9":"Sh","NN10":"Te","NN11":"NÃ«","NN12":"Dh","MMM2":"Shk","MMM4":"Pri","MMM5":"Maj","MMM6":"Qer","MMM7":"Kor","MMM8":"Gsh","MMM9":"Sht","MMM10":"Tet","MMM11":"NÃ«n","MMM12":"Dhj","MMMM1":"janar","MMMM2":"shkurt","MMMM3":"mars","MMMM4":"prill","MMMM5":"maj","MMMM6":"qershor","MMMM7":"korrik","MMMM8":"gusht","MMMM9":"shtator","MMMM10":"tetor","MMMM11":"nÃ«ntor","MMMM12":"dhjetor","E0":"D","E1":"H","E2":"M","E3":"M","E4":"E","E5":"P","EE0":"Di","EE1":"HÃ«","EE2":"Ma","EE3":"MÃ«","EE4":"En","EE5":"Pr","EE6":"Sh","EEE0":"Die","EEE1":"HÃ«n","EEE2":"Mar","EEE3":"MÃ«r","EEE4":"Enj","EEE5":"Pre","EEE6":"Sht","EEEE0":"e diel","EEEE1":"e hÃ«nÃ«","EEEE2":"e martÃ«","EEEE3":"e mÃ«rkurÃ«","EEEE4":"e enjte","EEEE5":"e premte","EEEE6":"e shtunÃ«","a0":"PD","a1":"MD","G-1":"p.e.r.","G1":"n.e.r.","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekondÃ«|#{num} sekonda","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minutÃ«|#{num} minuta","#{num}h":"#{num}o","1#1 hr|#{num} hrs":"#{num} orÃ«","1#1 hour|#{num} hours":"#{num} orÃ«","durationLongDays":"#{num} ditÃ«","1#1 day|#{num} days":"#{num} ditÃ«","#{num}w":"#{num}j","1#1 wk|#{num} wks":"#{num} javÃ«","1#1 week|#{num} weeks":"#{num} javÃ«","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} muaj","1#1 month|#{num} months":"#{num} muaj","#{num}y":"#{num}v","1#1 yr|#{num} yrs":"one#{num} vit|#{num} vjet","1#1 year|#{num} years":"one#{num} vit|#{num} vjet","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_sr = {"generated":true,"NN1":"ÑÐ°","NN2":"ÑÐµ","NN3":"Ð¼Ð°","NN4":"Ð°Ð¿","NN5":"Ð¼Ð°","NN6":"ÑÑ","NN7":"ÑÑ","NN8":"Ð°Ð²","NN9":"ÑÐµ","NN10":"Ð¾Ðº","NN11":"Ð½Ð¾","NN12":"Ð´Ðµ","MMM1":"ÑÐ°Ð½","MMM2":"ÑÐµÐ±","MMM3":"Ð¼Ð°Ñ","MMM4":"Ð°Ð¿Ñ","MMM5":"Ð¼Ð°Ñ","MMM6":"ÑÑÐ½","MMM7":"ÑÑÐ»","MMM8":"Ð°Ð²Ð³","MMM9":"ÑÐµÐ¿","MMM10":"Ð¾ÐºÑ","MMM11":"Ð½Ð¾Ð²","MMM12":"Ð´ÐµÑ","MMMM1":"ÑÐ°Ð½ÑÐ°Ñ","MMMM2":"ÑÐµÐ±ÑÑÐ°Ñ","MMMM3":"Ð¼Ð°ÑÑ","MMMM4":"Ð°Ð¿ÑÐ¸Ð»","MMMM5":"Ð¼Ð°Ñ","MMMM6":"ÑÑÐ½","MMMM7":"ÑÑÐ»","MMMM8":"Ð°Ð²Ð³ÑÑÑ","MMMM9":"ÑÐµÐ¿ÑÐµÐ¼Ð±Ð°Ñ","MMMM10":"Ð¾ÐºÑÐ¾Ð±Ð°Ñ","MMMM11":"Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ","MMMM12":"Ð´ÐµÑÐµÐ¼Ð±Ð°Ñ","E0":"Ð½","E1":"Ð¿","E2":"Ñ","E3":"Ñ","E4":"Ñ","E5":"Ð¿","E6":"Ñ","EE0":"Ð½Ðµ","EE1":"Ð¿Ð¾","EE2":"ÑÑ","EE3":"ÑÑ","EE4":"ÑÐµ","EE5":"Ð¿Ðµ","EE6":"ÑÑ","EEE0":"Ð½ÐµÐ´","EEE1":"Ð¿Ð¾Ð½","EEE2":"ÑÑÐ¾","EEE3":"ÑÑÐµ","EEE4":"ÑÐµÑ","EEE5":"Ð¿ÐµÑ","EEE6":"ÑÑÐ±","EEEE0":"Ð½ÐµÐ´ÐµÑÐ°","EEEE1":"Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐ°Ðº","EEEE2":"ÑÑÐ¾ÑÐ°Ðº","EEEE3":"ÑÑÐµÐ´Ð°","EEEE4":"ÑÐµÑÐ²ÑÑÐ°Ðº","EEEE5":"Ð¿ÐµÑÐ°Ðº","EEEE6":"ÑÑÐ±Ð¾ÑÐ°","a0":"Ð¿ÑÐµ Ð¿Ð¾Ð´Ð½Ðµ","a1":"Ð¿Ð¾Ð¿Ð¾Ð´Ð½Ðµ","G-1":"Ð¿. Ð½. Ðµ.","G1":"Ð½. Ðµ.","#{num}s":"#{num}Ñ","1#1 se|#{num} sec":"#{num} ÑÐµÐº","1#1 sec|#{num} sec":"#{num} ÑÐµÐº","1#1 second|#{num} seconds":"few#{num} ÑÐµÐºÑÐ½Ð´Ðµ|many#{num} ÑÐµÐºÑÐ½Ð´Ð¸|#{num} ÑÐµÐºÑÐ½Ð´Ð°","durationShortMinutes":"#{num}Ð¼","1#1 mi|#{num} min":"#{num} Ð¼Ð¸Ð½","1#1 min|#{num} min":"#{num} Ð¼Ð¸Ð½","1#1 minute|#{num} minutes":"few#{num} Ð¼Ð¸Ð½ÑÑÐ°|many#{num} Ð¼Ð¸Ð½ÑÑÐ°|#{num} Ð¼Ð¸Ð½ÑÑ","#{num}h":"#{num}Ñ","durationMediumHours":"few#{num} ÑÐ°|many#{num} ÑÐ°|#{num} ÑÐ°Ñ","1#1 hr|#{num} hrs":"few#{num} ÑÐ°ÑÐ°|many#{num} ÑÐ°ÑÐ¸|#{num} ÑÐ°Ñ","1#1 hour|#{num} hours":"few#{num} ÑÐ°ÑÐ°|many#{num} ÑÐ°ÑÐ¸|#{num} ÑÐ°Ñ","#{num}d":"#{num}Ð´","1#1 dy|#{num} dys":"few#{num} Ð´Ð°|many#{num} Ð´Ð°|#{num} Ð´Ð°Ð½","durationLongDays":"few#{num} Ð´Ð°Ð½Ð°|many#{num} Ð´Ð°Ð½Ð°|#{num} Ð´Ð°Ð½","1#1 day|#{num} days":"few#{num} Ð´Ð°Ð½Ð°|many#{num} Ð´Ð°Ð½Ð°|#{num} Ð´Ð°Ð½","#{num}w":"#{num}Ð½","durationMediumWeeks":"#{num} Ð½ÐµÐ´","1#1 wk|#{num} wks":"#{num} Ð½ÐµÐ´","1#1 week|#{num} weeks":"few#{num} Ð½ÐµÐ´ÐµÑÐµ|#{num} Ð½ÐµÐ´ÐµÑÐ°","durationShortMonths":"#{num}Ð¼","1#1 mo|#{num} mos":"#{num} Ð¼ÐµÑ","1#1 mon|#{num} mons":"#{num} Ð¼ÐµÑ","1#1 month|#{num} months":"few#{num} Ð¼ÐµÑÐµÑÐ°|many#{num} Ð¼ÐµÑÐµÑÐ¸|#{num} Ð¼ÐµÑÐµÑ","#{num}y":"#{num}Ð³","durationMediumYears":"#{num} Ð³Ð¾Ð´","1#1 yr|#{num} yrs":"#{num} Ð³Ð¾Ð´","1#1 year|#{num} years":"few#{num} Ð³Ð¾Ð´Ð¸Ð½Ðµ|#{num} Ð³Ð¾Ð´Ð¸Ð½Ð°","{duration} ago":"Ð¿ÑÐµ {duration}","in {duration}":"Ð·Ð° {duration}","finalSeparatorFull":" Ð¸ ","separatorLong":" "};
ilib.data.sysres_sr_Cyrl_BA = {"generated":true,"MMMM6":"ÑÑÐ½Ð¸","MMMM7":"ÑÑÐ»Ð¸","EEE3":"ÑÑÐ¸","EEEE3":"ÑÑÐ¸ÑÐµÐ´Ð°"};
ilib.data.sysres_sr_Latn_BA = {"generated":true,"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"ma","NN6":"ju","NN7":"ju","NN8":"av","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jan","MMM2":"feb","MMM3":"mar","MMM4":"apr","MMM5":"maj","MMM6":"jun","MMM7":"jul","MMM8":"avg","MMM9":"sep","MMM10":"okt","MMM11":"nov","MMM12":"dec","MMMM1":"januar","MMMM2":"februar","MMMM3":"mart","MMMM4":"april","MMMM5":"maj","MMMM6":"jun","MMMM7":"jul","MMMM8":"avgust","MMMM9":"septembar","MMMM10":"oktobar","MMMM11":"novembar","MMMM12":"decembar","E0":"n","E1":"p","E2":"u","E3":"s","E4":"Ä","E5":"p","E6":"s","EE0":"ne","EE1":"po","EE2":"ut","EE3":"sr","EE4":"Äe","EE5":"pe","EE6":"su","EEE0":"ned","EEE1":"pon","EEE2":"uto","EEE3":"sre","EEE4":"Äet","EEE5":"pet","EEE6":"sub","EEEE0":"nedelja","EEEE1":"ponedeljak","EEEE2":"utorak","EEEE3":"sreda","EEEE4":"Äetvrtak","EEEE5":"petak","EEEE6":"subota","a0":"pre podne","a1":"popodne","G-1":"p. n. e.","G1":"n. e","#{num}s":"#{num}s","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekunda|few#{num} sekunde|#{num} sekundi","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minut|few#{num} minute|#{num} minuta","#{num}h":"#{num}s","1#1 hr|#{num} hrs":"one#{num} sat|few#{num} sata|#{num} sati","1#1 hour|#{num} hours":"one#{num} sat|few#{num} sata|#{num} sati","#{num}d":"#{num}d","durationLongDays":"one#{num} dan|#{num} dana","1#1 day|#{num} days":"one#{num} dan|#{num} dana","#{num}w":"#{num}n","1#1 wk|#{num} wks":"#{num} ned","1#1 week|#{num} weeks":"few#{num} nedelje|#{num} nedelja","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} mes","1#1 month|#{num} months":"one#{num} mesec|few#{num} meseca|#{num} meseci","#{num}y":"#{num}g","1#1 yr|#{num} yrs":"#{num} god","1#1 year|#{num} years":"few#{num} godine|#{num} godina","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":" i "};
ilib.data.sysres_sr_Latn_ME = {"generated":true,"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"ma","NN6":"ju","NN7":"ju","NN8":"av","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jan","MMM2":"feb","MMM3":"mar","MMM4":"apr","MMM5":"maj","MMM6":"jun","MMM7":"jul","MMM8":"avg","MMM9":"sep","MMM10":"okt","MMM11":"nov","MMM12":"dec","MMMM1":"januar","MMMM2":"februar","MMMM3":"mart","MMMM4":"april","MMMM5":"maj","MMMM6":"jun","MMMM7":"jul","MMMM8":"avgust","MMMM9":"septembar","MMMM10":"oktobar","MMMM11":"novembar","MMMM12":"decembar","E0":"n","E1":"p","E2":"u","E3":"s","E4":"Ä","E5":"p","E6":"s","EE0":"ne","EE1":"po","EE2":"ut","EE3":"sr","EE4":"Äe","EE5":"pe","EE6":"su","EEE0":"ned","EEE1":"pon","EEE2":"uto","EEE3":"sre","EEE4":"Äet","EEE5":"pet","EEE6":"sub","EEEE0":"nedelja","EEEE1":"ponedeljak","EEEE2":"utorak","EEEE3":"sreda","EEEE4":"Äetvrtak","EEEE5":"petak","EEEE6":"subota","a0":"pre podne","a1":"popodne","G-1":"p. n. e.","G1":"n. e","#{num}s":"#{num}s","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekunda|few#{num} sekunde|#{num} sekundi","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minut|few#{num} minute|#{num} minuta","#{num}h":"#{num}s","1#1 hr|#{num} hrs":"one#{num} sat|few#{num} sata|#{num} sati","1#1 hour|#{num} hours":"one#{num} sat|few#{num} sata|#{num} sati","#{num}d":"#{num}d","durationLongDays":"one#{num} dan|#{num} dana","1#1 day|#{num} days":"one#{num} dan|#{num} dana","#{num}w":"#{num}n","1#1 wk|#{num} wks":"#{num} ned","1#1 week|#{num} weeks":"few#{num} nedelje|#{num} nedelja","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} mes","1#1 month|#{num} months":"one#{num} mesec|few#{num} meseca|#{num} meseci","#{num}y":"#{num}g","1#1 yr|#{num} yrs":"#{num} god","1#1 year|#{num} years":"few#{num} godine|#{num} godina","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":" i "};
ilib.data.sysres_sr_Latn_RS = {"generated":true,"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"ma","NN6":"ju","NN7":"ju","NN8":"av","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jan","MMM2":"feb","MMM3":"mar","MMM4":"apr","MMM5":"maj","MMM6":"jun","MMM7":"jul","MMM8":"avg","MMM9":"sep","MMM10":"okt","MMM11":"nov","MMM12":"dec","MMMM1":"januar","MMMM2":"februar","MMMM3":"mart","MMMM4":"april","MMMM5":"maj","MMMM6":"jun","MMMM7":"jul","MMMM8":"avgust","MMMM9":"septembar","MMMM10":"oktobar","MMMM11":"novembar","MMMM12":"decembar","E0":"n","E1":"p","E2":"u","E3":"s","E4":"Ä","E5":"p","E6":"s","EE0":"ne","EE1":"po","EE2":"ut","EE3":"sr","EE4":"Äe","EE5":"pe","EE6":"su","EEE0":"ned","EEE1":"pon","EEE2":"uto","EEE3":"sre","EEE4":"Äet","EEE5":"pet","EEE6":"sub","EEEE0":"nedelja","EEEE1":"ponedeljak","EEEE2":"utorak","EEEE3":"sreda","EEEE4":"Äetvrtak","EEEE5":"petak","EEEE6":"subota","a0":"pre podne","a1":"popodne","G-1":"p. n. e.","G1":"n. e","#{num}s":"#{num}s","1#1 sec|#{num} sec":"#{num} sek","1#1 second|#{num} seconds":"one#{num} sekunda|few#{num} sekunde|#{num} sekundi","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"one#{num} minut|few#{num} minute|#{num} minuta","#{num}h":"#{num}s","1#1 hr|#{num} hrs":"one#{num} sat|few#{num} sata|#{num} sati","1#1 hour|#{num} hours":"one#{num} sat|few#{num} sata|#{num} sati","#{num}d":"#{num}d","durationLongDays":"one#{num} dan|#{num} dana","1#1 day|#{num} days":"one#{num} dan|#{num} dana","#{num}w":"#{num}n","1#1 wk|#{num} wks":"#{num} ned","1#1 week|#{num} weeks":"few#{num} nedelje|#{num} nedelja","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} mes","1#1 month|#{num} months":"one#{num} mesec|few#{num} meseca|#{num} meseci","#{num}y":"#{num}g","1#1 yr|#{num} yrs":"#{num} god","1#1 year|#{num} years":"few#{num} godine|#{num} godina","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":" i "};
ilib.data.sysres_ss = {"generated":true,"NN1":"1","NN2":"2","NN3":"3","NN4":"4","NN5":"5","NN6":"6","NN7":"7","NN8":"8","NN9":"9","NN10":"10","NN11":"11","NN12":"12","MMM1":"1","MMM2":"2","MMM3":"3","MMM4":"4","MMM5":"5","MMM6":"6","MMM7":"7","MMM8":"8","MMM9":"9","MMM10":"10","MMM11":"11","MMM12":"12","MMMM1":"1","MMMM2":"2","MMMM3":"3","MMMM4":"4","MMMM5":"5","MMMM6":"6","MMMM7":"7","MMMM8":"8","MMMM9":"9","MMMM10":"10","MMMM11":"11","MMMM12":"12","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"1","EE1":"2","EE2":"3","EE3":"4","EE4":"5","EE5":"6","EE6":"7","EEE0":"1","EEE1":"2","EEE2":"3","EEE3":"4","EEE4":"5","EEE5":"6","EEE6":"7","EEEE0":"1","EEEE1":"2","EEEE2":"3","EEEE3":"4","EEEE4":"5","EEEE5":"6","EEEE6":"7","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_st = {"generated":true,"NN1":"1","NN2":"2","NN3":"3","NN4":"4","NN5":"5","NN6":"6","NN7":"7","NN8":"8","NN9":"9","NN10":"10","NN11":"11","NN12":"12","MMM1":"1","MMM2":"2","MMM3":"3","MMM4":"4","MMM5":"5","MMM6":"6","MMM7":"7","MMM8":"8","MMM9":"9","MMM10":"10","MMM11":"11","MMM12":"12","MMMM1":"1","MMMM2":"2","MMMM3":"3","MMMM4":"4","MMMM5":"5","MMMM6":"6","MMMM7":"7","MMMM8":"8","MMMM9":"9","MMMM10":"10","MMMM11":"11","MMMM12":"12","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"1","EE1":"2","EE2":"3","EE3":"4","EE4":"5","EE5":"6","EE6":"7","EEE0":"1","EEE1":"2","EEE2":"3","EEE3":"4","EEE4":"5","EEE5":"6","EEE6":"7","EEEE0":"1","EEEE1":"2","EEEE2":"3","EEEE3":"4","EEEE4":"5","EEEE5":"6","EEEE6":"7","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_sv = {"NN1":"ja","NN2":"fe","NN3":"ma","NN4":"ap","NN5":"ma","NN6":"ju","NN7":"ju","NN8":"au","NN9":"se","NN10":"ok","NN11":"no","NN12":"de","MMM1":"jan","MMM2":"feb","MMM3":"mar","MMM4":"apr","MMM5":"maj","MMM6":"jun","MMM7":"jul","MMM8":"aug","MMM9":"sep","MMM10":"okt","MMM11":"nov","MMM12":"dec","MMMM1":"januari","MMMM2":"februari","MMMM3":"mars","MMMM4":"april","MMMM5":"maj","MMMM6":"juni","MMMM7":"juli","MMMM8":"augusti","MMMM9":"september","MMMM10":"oktober","MMMM11":"november","MMMM12":"december","E3":"O","E6":"L","EE0":"sÃ¶","EE1":"mÃ¥","EE2":"ti","EE3":"on","EE4":"to","EE5":"fr","EE6":"lÃ¶","EEE0":"sÃ¶n","EEE1":"mÃ¥n","EEE2":"tis","EEE3":"ons","EEE4":"tor","EEE5":"fre","EEE6":"lÃ¶r","EEEE0":"sÃ¶ndag","EEEE1":"mÃ¥ndag","EEEE2":"tisdag","EEEE3":"onsdag","EEEE4":"torsdag","EEEE5":"fredag","EEEE6":"lÃ¶rdag","a0":"fm","a1":"em","G-1":"f.Kr.","G1":"e.Kr.","in {duration}":"om {duration}","{duration} ago":"fÃ¶r {duration} sedan","1#1 year|#{num} years":"#{num} Ã¥r","1#1 month|#{num} months":"1#{num} mÃ¥nad|#{num} mÃ¥nader","1#1 week|#{num} weeks":"1#{num} vecka|#{num} veckor","1#1 day|#{num} days":"#{num} dygn","1#1 hour|#{num} hours":"1#{num} timme|#{num} timmar","1#1 minute|#{num} minutes":"1#{num} minut|#{num} minuter","1#1 second|#{num} seconds":"1#{num} sekund|#{num} sekunder","1#1 millisecond|#{num} milliseconds":"1#{num} millisekund|#{num} millisekunder","1#1 yr|#{num} yrs":"#{num} Ã¥r","1#1 mon|#{num} mons":"#{num} mÃ¥n","1#1 wk|#{num} wks":"#{num} vec","durationLongDays":"#{num} dygn","1#1 hr|#{num} hrs":"#{num} tim","1#1 min|#{num} min":"#{num} min","1#1 sec|#{num} sec":"#{num} sek","#{num} ms":"#{num} ms","durationMediumYears":"#{num} Ã¥r","1#1 mo|#{num} mos":"#{num} mÃ¥","durationMediumWeeks":"#{num} ve","1#1 dy|#{num} dys":"#{num} dy","durationMediumHours":"#{num} ti","1#1 mi|#{num} min":"#{num} mi","1#1 se|#{num} sec":"#{num} se","#{num}y":"#{num}Ã¥","durationShortMonths":"#{num}mÃ¥","#{num}w":"#{num}v","#{num}d":"#{num}d","#{num}h":"#{num}t","durationShortMinutes":"#{num}m","#{num}s":"#{num}s","separatorShort":" ","separatorMedium":" ","separatorLong":", ","separatorFull":", ","finalSeparatorFull":" och "};
ilib.data.sysres_sw = {"generated":true,"NN5":"Me","NN8":"Ag","NN10":"Ok","MMM3":"Mac","MMM5":"Mei","MMM8":"Ago","MMM10":"Okt","MMM12":"Des","MMMM1":"Januari","MMMM2":"Februari","MMMM3":"Machi","MMMM4":"Aprili","MMMM5":"Mei","MMMM6":"Juni","MMMM7":"Julai","MMMM8":"Agosti","MMMM9":"Septemba","MMMM10":"Oktoba","MMMM11":"Novemba","MMMM12":"Desemba","E0":"2","E1":"3","E2":"4","E3":"5","E4":"A","E5":"I","E6":"1","EE0":"Ju","EE1":"Ju","EE2":"Ju","EE3":"Ju","EE4":"Al","EE5":"Ij","EE6":"Ju","EEE0":"J2","EEE1":"J3","EEE2":"J4","EEE3":"J5","EEE4":"Alh","EEE5":"Ij","EEE6":"J1","EEEE0":"Jumapili","EEEE1":"Jumatatu","EEEE2":"Jumanne","EEEE3":"Jumatano","EEEE4":"Alhamisi","EEEE5":"Ijumaa","EEEE6":"Jumamosi","a0":"asubuhi","a1":"alasiri","G-1":"KK","G1":"BK","#{num}s":"#s{num}","1#1 se|#{num} sec":"#sekunde {num}","1#1 sec|#{num} sec":"#sekunde {num}","1#1 second|#{num} seconds":"#sekunde {num}","durationShortMinutes":"#d{num}","1#1 mi|#{num} min":"#dakika {num}","1#1 min|#{num} min":"#dakika {num}","1#1 minute|#{num} minutes":"#dakika {num}","#{num}h":"#s{num}","durationMediumHours":"one#saa {num}|#masaa {num}","1#1 hr|#{num} hrs":"one#saa {num}|#masaa {num}","1#1 hour|#{num} hours":"one#saa {num}|#masaa {num}","#{num}d":"#s{num}","1#1 dy|#{num} dys":"#siku {num}","durationLongDays":"#siku {num}","1#1 day|#{num} days":"#siku {num}","#{num}w":"#w{num}","durationMediumWeeks":"#wiki {num}","1#1 wk|#{num} wks":"#wiki {num}","1#1 week|#{num} weeks":"#wiki {num}","durationShortMonths":"#m{num}","1#1 mo|#{num} mos":"one#mwezi {num}|#miezi {num}","1#1 mon|#{num} mons":"one#mwezi {num}|#miezi {num}","1#1 month|#{num} months":"one#mwezi {num}|#miezi {num}","#{num}y":"#m{num}","durationMediumYears":"one#mwaka {num}|#miaka {num}","1#1 yr|#{num} yrs":"one#mwaka {num}|#miaka {num}","1#1 year|#{num} years":"one#mwaka {num}|#miaka {num}","{duration} ago":"-{duration}","in {duration}":"baada ya {duration}","finalSeparatorFull":", na ","separatorLong":" "};
ilib.data.sysres_ta = {"NN1":"à®à®©","NN2":"à®ªà®¿","NN3":"à®®à®¾","NN4":"à®à®ª","NN5":"à®®à¯","NN6":"à®à¯","NN7":"à®à¯","NN8":"à®à®","NN9":"à®à¯","NN10":"à®à®","NN11":"à®¨à®µ","NN12":"à®à®¿","MMM1":"à®à®©","MMM2":"à®ªà®¿à®ªà¯","MMM3":"à®®à®¾à®°à¯","MMM4":"à®à®ªà¯","MMM5":"à®®à¯","MMM6":"à®à¯à®©à¯","MMM7":"à®à¯à®²à¯","MMM8":"à®à®","MMM9":"à®à¯à®ªà¯","MMM10":"à®à®à¯","MMM11":"à®¨à®µ","MMM12":"à®à®¿à®","MMMM1":"à®à®©à®µà®°à®¿","MMMM2":"à®ªà®¿à®ªà¯à®°à®µà®°à®¿","MMMM3":"à®®à®¾à®°à¯à®à¯","MMMM4":"à®à®ªà¯à®°à®²à¯","MMMM5":"à®®à¯","MMMM6":"à®à¯à®©à¯","MMMM7":"à®à¯à®²à¯","MMMM8":"à®à®à®¸à¯à®à¯","MMMM9":"à®à¯à®ªà¯à®à®®à¯à®ªà®°à¯","MMMM10":"à®à®à¯à®à¯à®ªà®°à¯","MMMM11":"à®¨à®µà®®à¯à®ªà®°à¯","MMMM12":"à®à®¿à®à®®à¯à®ªà®°à¯","E0":"à®à®¾","E1":"à®¤à®¿","E2":"à®à¯","E3":"à®ªà¯","E4":"à®µà®¿","E5":"à®µà¯","E6":"à®","EE0":"à®à®¾","EE1":"à®¤à®¿","EE2":"à®à¯","EE3":"à®ªà¯","EE4":"à®µà®¿","EE5":"à®µà¯","EE6":"à®","EEE0":"à®à®¾","EEE1":"à®¤à®¿","EEE2":"à®à¯","EEE3":"à®ªà¯","EEE4":"à®µà®¿","EEE5":"à®µà¯","EEE6":"à®","EEEE0":"à®à®¾à®¯à®¿à®±à¯","EEEE1":"à®¤à®¿à®à¯à®à®³à¯","EEEE2":"à®à¯à®µà¯à®µà®¾à®¯à¯","EEEE3":"à®ªà¯à®¤à®©à¯","EEEE4":"à®µà®¿à®¯à®¾à®´à®©à¯","EEEE5":"à®µà¯à®³à¯à®³à®¿","EEEE6":"à®à®©à®¿","G-1":"à®à®¿.à®®à¯.","G1":"à®à®¿.à®ªà®¿.","#{num}s":"#{num}à®µ","1#1 se|#{num} sec":"#{num} à®µà®¿","1#1 sec|#{num} sec":"#{num} à®µà®¿à®©","1#1 second|#{num} seconds":"one#{num} à®µà®¿à®©à®¾à®à®¿|#{num} à®µà®¿à®©à®¾à®à®¿à®à®³à¯","durationShortMinutes":"#{num}à®¨","1#1 mi|#{num} min":"#{num} à®¨à®¿","1#1 min|#{num} min":"#{num} à®¨à®¿à®®","1#1 minute|#{num} minutes":"one#{num} à®¨à®¿à®®à®¿à®à®®à¯|#{num} à®¨à®¿à®®à®¿à®à®à¯à®à®³à¯","#{num}h":"#{num}à®®","durationMediumHours":"#{num} à®®à®£","1#1 hr|#{num} hrs":"#{num} à®®à®£à®¿","1#1 hour|#{num} hours":"#{num} à®®à®£à®¿à®¨à¯à®°à®®à¯","#{num}d":"#{num}à®¨","1#1 dy|#{num} dys":"#{num} à®¨à®¾","durationLongDays":"one#{num} à®¨à®¾à®³à¯|#{num} à®¨à®¾à®","1#1 day|#{num} days":"one#{num} à®¨à®¾à®³à¯|#{num} à®¨à®¾à®à¯à®à®³à¯","#{num}w":"#{num}à®µ","durationMediumWeeks":"#{num} à®µà®¾","1#1 wk|#{num} wks":"#{num} à®µà®¾à®°","1#1 week|#{num} weeks":"one#{num} à®µà®¾à®°à®®à¯|#{num} à®µà®¾à®°à®à¯à®à®³à¯","durationShortMonths":"#{num}à®®","1#1 mo|#{num} mos":"#{num} à®®à®¾","1#1 mon|#{num} mons":"#{num} à®®à®¾à®¤","1#1 month|#{num} months":"one#{num} à®®à®¾à®¤à®®à¯|#{num} à®®à®¾à®¤à®à¯à®à®³à¯","#{num}y":"#{num}à®µ","durationMediumYears":"#{num} à®µà®°","1#1 yr|#{num} yrs":"#{num} à®µà®°à¯","1#1 year|#{num} years":"one#{num} à®µà®°à¯à®à®®à¯|#{num} à®µà®°à¯à®à®à¯à®à®³à¯","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":" à®®à®±à¯à®±à¯à®®à¯ ","separatorLong":" "};
ilib.data.sysres_te = {"NN1":"à°à°¨","NN2":"à°«à°¿","NN3":"à°®à°¾","NN4":"à°à°ª","NN5":"à°®à±","NN6":"à°à±","NN7":"à°à±","NN8":"à°à°","NN9":"à°¸à±","NN10":"à°à°","NN11":"à°¨à°µ","NN12":"à°¡à°¿","MMM1":"à°à°¨","MMM2":"à°«à°¿à°¬à±à°°","MMM3":"à°®à°¾à°°à±à°à°¿","MMM4":"à°à°ªà±à°°à°¿","MMM5":"à°®à±","MMM6":"à°à±à°¨à±","MMM7":"à°à±à°²à±","MMM8":"à°à°à°¸à±à°à±","MMM9":"à°¸à±à°ªà±à°à±à°à°¬à°°à±","MMM10":"à°à°à±à°à±à°¬à°°à±","MMM11":"à°¨à°µà°à°¬à°°à±","MMM12":"à°¡à°¿à°¸à±à°à°¬à°°à±","MMMM1":"à°à°¨à°µà°°à°¿","MMMM2":"à°«à°¿à°¬à±à°°à°µà°°à°¿","MMMM3":"à°®à°¾à°°à±à°à°¿","MMMM4":"à°à°ªà±à°°à°¿à°²à±","MMMM5":"à°®à±","MMMM6":"à°à±à°¨à±","MMMM7":"à°à±à°²à±","MMMM8":"à°à°à°¸à±à°à±","MMMM9":"à°¸à±à°ªà±à°à±à°à°¬à°°à±","MMMM10":"à°à°à±à°à±à°¬à°°à±","MMMM11":"à°¨à°µà°à°¬à°°à±","MMMM12":"à°¡à°¿à°¸à±à°à°¬à°°à±","E0":"à°","E1":"à°¸à±","E2":"à°®","E3":"à°¬à±","E4":"à°à±","E5":"à°¶à±","E6":"à°¶","EE0":"à°à°¦","EE1":"à°¸à±","EE2":"à°®à°","EE3":"à°¬à±","EE4":"à°à±","EE5":"à°¶à±","EE6":"à°¶à°¨","EEE0":"à°à°¦à°¿","EEE1":"à°¸à±à°®","EEE2":"à°®à°à°à°³","EEE3":"à°¬à±à°§","EEE4":"à°à±à°°à±","EEE5":"à°¶à±à°à±à°°","EEE6":"à°¶à°¨à°¿","EEEE0":"à°à°¦à°¿à°µà°¾à°°à°","EEEE1":"à°¸à±à°®à°µà°¾à°°à°","EEEE2":"à°®à°à°à°³à°µà°¾à°°à°","EEEE3":"à°¬à±à°§à°µà°¾à°°à°","EEEE4":"à°à±à°°à±à°µà°¾à°°à°","EEEE5":"à°¶à±à°à±à°°à°µà°¾à°°à°","EEEE6":"à°¶à°¨à°¿à°µà°¾à°°à°","a0":"à°à°¦à°¯à°","a1":"à°®à°§à±à°¯à°¾à°¹à±à°¨à°","G-1":"à°à±à°°à±à°ªà±","G1":"à°à±à°°à±à°¶","#{num}s":"#{num}à°¸","1#1 se|#{num} sec":"#{num} à°¸à±","1#1 sec|#{num} sec":"#{num} à°¸à±à°","1#1 second|#{num} seconds":"one#{num} à°¸à±à°à°¨à±|#{num} à°¸à±à°à°¨à±à°²à±","durationShortMinutes":"#{num}à°¨","1#1 mi|#{num} min":"#{num} à°¨à°¿","1#1 min|#{num} min":"#{num} à°¨à°¿à°®","1#1 minute|#{num} minutes":"one#{num} à°¨à°¿à°®à°¿à°·à°|#{num} à°¨à°¿à°®à°¿à°·à°¾à°²à±","#{num}h":"#{num}à°","durationMediumHours":"one#{num} à°à°à°|#{num} à°à°","1#1 hr|#{num} hrs":"#{num} à°à°à°","1#1 hour|#{num} hours":"one#{num} à°à°à°|#{num} à°à°à°à°²à±","#{num}d":"#{num}à°°","1#1 dy|#{num} dys":"one#{num} à°°à±|#{num} à°°à±à°à±","durationLongDays":"one#{num} à°°à±à°à±|#{num} à°°à±à°à±à°²à±","1#1 day|#{num} days":"one#{num} à°°à±à°à±|#{num} à°°à±à°à±à°²à±","#{num}w":"#{num}à°µ","durationMediumWeeks":"#{num} à°µà°¾","1#1 wk|#{num} wks":"one#{num} à°µà°¾à°°à°|#{num} à°µà°¾à°°à°¾à°²à±","1#1 week|#{num} weeks":"one#{num} à°µà°¾à°°à°|#{num} à°µà°¾à°°à°¾à°²à±","durationShortMonths":"#{num}à°¨","1#1 mo|#{num} mos":"one#{num} à°¨à±à°²|#{num} à°¨à±","1#1 mon|#{num} mons":"#{num} à°¨à±à°²","1#1 month|#{num} months":"one#{num} à°¨à±à°²|#{num} à°¨à±à°²à°²à±","#{num}y":"#{num}à°¸","durationMediumYears":"#{num} à°¸à°","1#1 yr|#{num} yrs":"#{num} à°¸à°à°µ","1#1 year|#{num} years":"one#{num} à°¸à°à°µà°¤à±à°¸à°°à°|#{num} à°¸à°à°µà°¤à±à°¸à°°à°¾à°²à±","{duration} ago":"{duration} à°à±à°°à°¿à°¤à°","in {duration}":"{duration} à°¤à°°à±à°µà°¾à°¤","finalSeparatorFull":" à°®à°°à°¿à°¯à± ","separatorLong":" "};
ilib.data.sysres_th = {"N1":"à¸¡","N2":"à¸","N3":"à¸¡à¸µ","N4":"à¹à¸¡","N5":"à¸","N6":"à¸¡à¸´","N7":"à¸","N8":"à¸ª","N9":"à¸","N10":"à¸","N11":"à¸","N12":"à¸","NN1":"à¸¡.","NN2":"à¸.","NN3":"à¸¡à¸µ","NN4":"à¹à¸¡","NN5":"à¸.","NN6":"à¸¡à¸´","NN7":"à¸.","NN8":"à¸ª.","NN9":"à¸.","NN10":"à¸.","NN11":"à¸.","NN12":"à¸.","MMM1":"à¸¡.à¸.","MMM2":"à¸.à¸.","MMM3":"à¸¡à¸µ.à¸.","MMM4":"à¹à¸¡.à¸¢.","MMM5":"à¸.à¸.","MMM6":"à¸¡à¸´.à¸¢.","MMM7":"à¸.à¸.","MMM8":"à¸ª.à¸.","MMM9":"à¸.à¸¢.","MMM10":"à¸.à¸.","MMM11":"à¸.à¸¢.","MMM12":"à¸.à¸.","MMMM1":"à¸¡à¸à¸£à¸²à¸à¸¡","MMMM2":"à¸à¸¸à¸¡à¸ à¸²à¸à¸±à¸à¸à¹","MMMM3":"à¸¡à¸µà¸à¸²à¸à¸¡","MMMM4":"à¹à¸¡à¸©à¸²à¸¢à¸","MMMM5":"à¸à¸¤à¸©à¸ à¸²à¸à¸¡","MMMM6":"à¸¡à¸´à¸à¸¸à¸à¸²à¸¢à¸","MMMM7":"à¸à¸£à¸à¸à¸²à¸à¸¡","MMMM8":"à¸ªà¸´à¸à¸«à¸²à¸à¸¡","MMMM9":"à¸à¸±à¸à¸¢à¸²à¸¢à¸","MMMM10":"à¸à¸¸à¸¥à¸²à¸à¸¡","MMMM11":"à¸à¸¤à¸¨à¸à¸´à¸à¸²à¸¢à¸","MMMM12":"à¸à¸±à¸à¸§à¸²à¸à¸¡","E0":"à¸­","E1":"à¸","E2":"à¸­","E3":"à¸","E4":"à¸","E5":"à¸¨","E6":"à¸ª","EE0":"à¸­à¸²","EE1":"à¸.","EE2":"à¸­.","EE3":"à¸.","EE4":"à¸à¸¤","EE5":"à¸¨.","EE6":"à¸ª.","EEE0":"à¸­à¸².","EEE1":"à¸.","EEE2":"à¸­.","EEE3":"à¸.","EEE4":"à¸à¸¤.","EEE5":"à¸¨.","EEE6":"à¸ª.","EEEE0":"à¸§à¸±à¸à¸­à¸²à¸à¸´à¸à¸¢à¹","EEEE1":"à¸§à¸±à¸à¸à¸±à¸à¸à¸£à¹","EEEE2":"à¸§à¸±à¸à¸­à¸±à¸à¸à¸²à¸£","EEEE3":"à¸§à¸±à¸à¸à¸¸à¸","EEEE4":"à¸§à¸±à¸à¸à¸¤à¸«à¸±à¸ªà¸à¸à¸µ","EEEE5":"à¸§à¸±à¸à¸¨à¸¸à¸à¸£à¹","EEEE6":"à¸§à¸±à¸à¹à¸ªà¸²à¸£à¹","N1-thaisolar":"à¸¡","N2-thaisolar":"à¸","N3-thaisolar":"à¸¡à¸µ","N4-thaisolar":"à¹à¸¡","N5-thaisolar":"à¸","N6-thaisolar":"à¸¡à¸´","N7-thaisolar":"à¸","N8-thaisolar":"à¸ª","N9-thaisolar":"à¸","N10-thaisolar":"à¸","N11-thaisolar":"à¸","N12-thaisolar":"à¸","NN1-thaisolar":"à¸¡.","NN2-thaisolar":"à¸.","NN3-thaisolar":"à¸¡à¸µ","NN4-thaisolar":"à¹à¸¡","NN5-thaisolar":"à¸.","NN6-thaisolar":"à¸¡à¸´","NN7-thaisolar":"à¸.","NN8-thaisolar":"à¸ª.","NN9-thaisolar":"à¸.","NN10-thaisolar":"à¸.","NN11-thaisolar":"à¸.","NN12-thaisolar":"à¸.","MMM1-thaisolar":"à¸¡.à¸.","MMM2-thaisolar":"à¸.à¸.","MMM3-thaisolar":"à¸¡à¸µ.à¸.","MMM4-thaisolar":"à¹à¸¡.à¸¢.","MMM5-thaisolar":"à¸.à¸.","MMM6-thaisolar":"à¸¡à¸´.à¸¢.","MMM7-thaisolar":"à¸.à¸.","MMM8-thaisolar":"à¸ª.à¸.","MMM9-thaisolar":"à¸.à¸¢.","MMM10-thaisolar":"à¸.à¸.","MMM11-thaisolar":"à¸.à¸¢.","MMM12-thaisolar":"à¸.à¸.","MMMM1-thaisolar":"à¸¡à¸à¸£à¸²à¸à¸¡","MMMM2-thaisolar":"à¸à¸¸à¸¡à¸ à¸²à¸à¸±à¸à¸à¹","MMMM3-thaisolar":"à¸¡à¸µà¸à¸²à¸à¸¡","MMMM4-thaisolar":"à¹à¸¡à¸©à¸²à¸¢à¸","MMMM5-thaisolar":"à¸à¸¤à¸©à¸ à¸²à¸à¸¡","MMMM6-thaisolar":"à¸¡à¸´à¸à¸¸à¸à¸²à¸¢à¸","MMMM7-thaisolar":"à¸à¸£à¸à¸à¸²à¸à¸¡","MMMM8-thaisolar":"à¸ªà¸´à¸à¸«à¸²à¸à¸¡","MMMM9-thaisolar":"à¸à¸±à¸à¸¢à¸²à¸¢à¸","MMMM10-thaisolar":"à¸à¸¸à¸¥à¸²à¸à¸¡","MMMM11-thaisolar":"à¸à¸¤à¸¨à¸à¸´à¸à¸²à¸¢à¸","MMMM12-thaisolar":"à¸à¸±à¸à¸§à¸²à¸à¸¡","E0-thaisolar":"à¸­","E1-thaisolar":"à¸","E2-thaisolar":"à¸­","E3-thaisolar":"à¸","E4-thaisolar":"à¸","E5-thaisolar":"à¸¨","E6-thaisolar":"à¸ª","EE0-thaisolar":"à¸­à¸²","EE1-thaisolar":"à¸.","EE2-thaisolar":"à¸­.","EE3-thaisolar":"à¸.","EE4-thaisolar":"à¸à¸¤","EE5-thaisolar":"à¸¨.","EE6-thaisolar":"à¸ª.","EEE0-thaisolar":"à¸­à¸².","EEE1-thaisolar":"à¸.","EEE2-thaisolar":"à¸­.","EEE3-thaisolar":"à¸.","EEE4-thaisolar":"à¸à¸¤.","EEE5-thaisolar":"à¸¨.","EEE6-thaisolar":"à¸ª.","EEEE0-thaisolar":"à¸§à¸±à¸à¸­à¸²à¸à¸´à¸à¸¢à¹","EEEE1-thaisolar":"à¸§à¸±à¸à¸à¸±à¸à¸à¸£à¹","EEEE2-thaisolar":"à¸§à¸±à¸à¸­à¸±à¸à¸à¸²à¸£","EEEE3-thaisolar":"à¸§à¸±à¸à¸à¸¸à¸","EEEE4-thaisolar":"à¸§à¸±à¸à¸à¸¤à¸«à¸±à¸ªà¸à¸à¸µ","EEEE5-thaisolar":"à¸§à¸±à¸à¸¨à¸¸à¸à¸£à¹","EEEE6-thaisolar":"à¸§à¸±à¸à¹à¸ªà¸²à¸£à¹","a0":"à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸","a1":"à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸","G-1":"à¸à¸µà¸à¹à¸­à¸ à¸.à¸¨.","G1":"à¸.à¸¨.","#{num}s":"#{num}à¸§","1#1 se|#{num} sec":"#{num} à¸§à¸´","1#1 sec|#{num} sec":"#{num} à¸§à¸´à¸","1#1 second|#{num} seconds":"#{num} à¸§à¸´à¸à¸²à¸à¸µ","durationShortMinutes":"#{num}à¸","1#1 mi|#{num} min":"#{num} à¸à¸²","1#1 min|#{num} min":"#{num} à¸à¸²à¸à¸µ","1#1 minute|#{num} minutes":"#{num} à¸à¸²à¸à¸µ","#{num}h":"#{num}à¸","durationMediumHours":"#{num} à¸à¸±","1#1 hr|#{num} hrs":"#{num} à¸à¸±à¹","1#1 hour|#{num} hours":"#{num} à¸à¸±à¹à¸§à¹à¸¡à¸","#{num}d":"#{num}à¸§","1#1 dy|#{num} dys":"#{num} à¸§à¸±à¸","durationLongDays":"#{num} à¸§à¸±à¸","1#1 day|#{num} days":"#{num} à¸§à¸±à¸","#{num}w":"#{num}à¸ª","durationMediumWeeks":"#{num} à¸ªà¸±","1#1 wk|#{num} wks":"#{num} à¸ªà¸±à¸","1#1 week|#{num} weeks":"#{num} à¸ªà¸±à¸à¸à¸²à¸«à¹","durationShortMonths":"#{num}à¹","1#1 mo|#{num} mos":"#{num} à¹à¸","1#1 mon|#{num} mons":"#{num} à¹à¸à¸·","1#1 month|#{num} months":"#{num} à¹à¸à¸·à¸­à¸","#{num}y":"#{num}à¸","durationMediumYears":"#{num} à¸à¸µ","1#1 yr|#{num} yrs":"#{num} à¸à¸µ","1#1 year|#{num} years":"#{num} à¸à¸µ","{duration} ago":"{duration} à¸à¸µà¹à¸à¹à¸²à¸à¸¡à¸²","in {duration}":"à¹à¸à¸­à¸µà¸ {duration}","separatorFull":" ","finalSeparatorFull":" à¹à¸¥à¸°","separatorLong":" "};
ilib.data.sysres_tr = {"N1":"O","N2":"Å","N4":"N","N6":"H","N7":"T","N9":"E","N10":"E","N11":"K","N12":"A","NN1":"oc","NN2":"Åu","NN3":"ma","NN4":"ni","NN5":"ma","NN6":"ha","NN7":"te","NN8":"aÄ","NN9":"ey","NN10":"ek","NN11":"ka","NN12":"ar","MMM1":"oca","MMM2":"Åub","MMM3":"mar","MMM4":"nis","MMM5":"may","MMM6":"haz","MMM7":"tem","MMM8":"aÄu","MMM9":"eyl","MMM10":"eki","MMM11":"kas","MMM12":"ara","MMMM1":"ocak","MMMM2":"Åubat","MMMM3":"mart","MMMM4":"nisan","MMMM5":"mayÄ±s","MMMM6":"haziran","MMMM7":"temmuz","MMMM8":"aÄustos","MMMM9":"eylÃ¼l","MMMM10":"ekim","MMMM11":"kasÄ±m","MMMM12":"aralÄ±k","E0":"P","E1":"P","E2":"S","E3":"Ã","E4":"P","E5":"C","E6":"C","EE0":"Pa","EE1":"Pt","EE2":"Sa","EE3":"Ãa","EE4":"Pe","EE5":"Cu","EE6":"Ct","EEE0":"Paz","EEE1":"Pzt","EEE2":"Sal","EEE3":"Ãar","EEE4":"Per","EEE5":"Cum","EEE6":"Cmt","EEEE0":"Pazar","EEEE1":"Pazartesi","EEEE2":"SalÄ±","EEEE3":"ÃarÅamba","EEEE4":"PerÅembe","EEEE5":"Cuma","EEEE6":"Cumartesi","a0":"ÃÃ","a1":"ÃS","G-1":"MÃ","G1":"MS","in {duration}":"{duration} sonra","{duration} ago":"{duration} Ã¶nce","1#1 year|#{num} years":"#{num} yÄ±l","1#1 month|#{num} months":"#{num} ay","1#1 week|#{num} weeks":"#{num} hafta","1#1 day|#{num} days":"#{num} gÃ¼n","1#1 hour|#{num} hours":"#{num} saat","1#1 minute|#{num} minutes":"#{num} dakika","1#1 second|#{num} seconds":"#{num} saniye","1#1 yr|#{num} yrs":"#{num} yÄ±l","1#1 mon|#{num} mons":"#{num} ay","1#1 wk|#{num} wks":"#{num} haf","durationLongDays":"#{num} gÃ¼n","1#1 hr|#{num} hrs":"#{num} saat","1#1 min|#{num} min":"#{num} dak","1#1 sec|#{num} sec":"#{num} san","durationMediumYears":"#{num} yÄ±l","1#1 mo|#{num} mos":"#{num} ay","durationMediumWeeks":"#{num} hf","1#1 dy|#{num} dys":"#{num} gÃ¼n","durationMediumHours":"#{num} sa","1#1 mi|#{num} min":"#{num} dk","1#1 se|#{num} sec":"#{num} sn","#{num}y":"#{num}y","durationShortMonths":"#{num}a","#{num}w":"#{num}h","#{num}d":"#{num}g","#{num}h":"#{num}s","durationShortMinutes":"#{num}d","#{num}s":"#{num}s","separatorShort":" ","separatorMedium":" ","separatorLong":" ","separatorFull":", ","finalSeparatorFull":" ve ","#{num} ms":"#{num} ms","1#1 millisecond|#{num} milliseconds":"#{num} milisaniye"};
ilib.data.sysres_uk = {"generated":true,"NN1":"ÑÑ","NN2":"Ð»Ñ","NN3":"Ð±Ðµ","NN4":"ÐºÐ²","NN5":"ÑÑ","NN6":"ÑÐµ","NN7":"Ð»Ð¸","NN8":"ÑÐµ","NN9":"Ð²Ðµ","NN10":"Ð¶Ð¾","NN11":"Ð»Ð¸","NN12":"Ð³Ñ","MMM1":"ÑÑÑ.","MMM2":"Ð»ÑÑ.","MMM3":"Ð±ÐµÑ.","MMM4":"ÐºÐ²ÑÑ.","MMM5":"ÑÑÐ°Ð².","MMM6":"ÑÐµÑÐ².","MMM7":"Ð»Ð¸Ð¿.","MMM8":"ÑÐµÑÐ¿.","MMM9":"Ð²ÐµÑ.","MMM10":"Ð¶Ð¾Ð²Ñ.","MMM11":"Ð»Ð¸ÑÑ.","MMM12":"Ð³ÑÑÐ´.","MMMM1":"ÑÑÑÐ½Ñ","MMMM2":"Ð»ÑÑÐ¾Ð³Ð¾","MMMM3":"Ð±ÐµÑÐµÐ·Ð½Ñ","MMMM4":"ÐºÐ²ÑÑÐ½Ñ","MMMM5":"ÑÑÐ°Ð²Ð½Ñ","MMMM6":"ÑÐµÑÐ²Ð½Ñ","MMMM7":"Ð»Ð¸Ð¿Ð½Ñ","MMMM8":"ÑÐµÑÐ¿Ð½Ñ","MMMM9":"Ð²ÐµÑÐµÑÐ½Ñ","MMMM10":"Ð¶Ð¾Ð²ÑÐ½Ñ","MMMM11":"Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´Ð°","MMMM12":"Ð³ÑÑÐ´Ð½Ñ","E0":"Ð","E1":"Ð","E2":"Ð","E3":"Ð¡","E4":"Ð§","E5":"Ð","E6":"Ð¡","EE0":"ÐÐ´","EE1":"ÐÐ½","EE2":"ÐÑ","EE3":"Ð¡Ñ","EE4":"Ð§Ñ","EE5":"ÐÑ","EE6":"Ð¡Ð±","EEE0":"ÐÐ´","EEE1":"ÐÐ½","EEE2":"ÐÑ","EEE3":"Ð¡Ñ","EEE4":"Ð§Ñ","EEE5":"ÐÑ","EEE6":"Ð¡Ð±","EEEE0":"ÐÐµÐ´ÑÐ»Ñ","EEEE1":"ÐÐ¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº","EEEE2":"ÐÑÐ²ÑÐ¾ÑÐ¾Ðº","EEEE3":"Ð¡ÐµÑÐµÐ´Ð°","EEEE4":"Ð§ÐµÑÐ²ÐµÑ","EEEE5":"ÐÊ¼ÑÑÐ½Ð¸ÑÑ","EEEE6":"Ð¡ÑÐ±Ð¾ÑÐ°","a0":"Ð´Ð¿","a1":"Ð¿Ð¿","G-1":"Ð´Ð¾ Ð½.Ðµ.","G1":"Ð½.Ðµ.","#{num}s":"#{num}Ñ","1#1 se|#{num} sec":"#{num} ÑÐµ","1#1 sec|#{num} sec":"#{num} ÑÐµÐº","1#1 second|#{num} seconds":"one#{num} ÑÐµÐºÑÐ½Ð´Ð°|many#{num} ÑÐµÐºÑÐ½Ð´|#{num} ÑÐµÐºÑÐ½Ð´Ð¸","durationShortMinutes":"#{num}Ñ","1#1 mi|#{num} min":"#{num} ÑÐ².","1#1 min|#{num} min":"#{num} ÑÐ²Ð¸","1#1 minute|#{num} minutes":"one#{num} ÑÐ²Ð¸Ð»Ð¸Ð½Ð°|many#{num} ÑÐ²Ð¸Ð»Ð¸Ð½|#{num} ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸","#{num}h":"#{num}Ð³","durationMediumHours":"#{num} Ð³Ð¾","1#1 hr|#{num} hrs":"#{num} Ð³Ð¾Ð´","1#1 hour|#{num} hours":"one#{num} Ð³Ð¾Ð´Ð¸Ð½Ð°|many#{num} Ð³Ð¾Ð´Ð¸Ð½|#{num} Ð³Ð¾Ð´Ð¸Ð½Ð¸","#{num}d":"#{num}Ð´","1#1 dy|#{num} dys":"one#{num} Ð´Ðµ|few#{num} Ð´Ð½Ñ|many#{num} Ð´Ð½|#{num} Ð´Ð½Ñ","durationLongDays":"one#{num} Ð´ÐµÐ½Ñ|few#{num} Ð´Ð½Ñ|many#{num} Ð´Ð½ÑÐ²|#{num} Ð´Ð½Ñ","1#1 day|#{num} days":"one#{num} Ð´ÐµÐ½Ñ|few#{num} Ð´Ð½Ñ|many#{num} Ð´Ð½ÑÐ²|#{num} Ð´Ð½Ñ","#{num}w":"#{num}Ñ","durationMediumWeeks":"#{num} ÑÐ¸","1#1 wk|#{num} wks":"#{num} ÑÐ¸Ð¶","1#1 week|#{num} weeks":"one#{num} ÑÐ¸Ð¶Ð´ÐµÐ½Ñ|few#{num} ÑÐ¸Ð¶Ð½Ñ|many#{num} ÑÐ¸Ð¶Ð½ÑÐ²|#{num} ÑÐ¸Ð¶Ð½Ñ","durationShortMonths":"#{num}Ð¼","1#1 mo|#{num} mos":"#{num} Ð¼Ñ","1#1 mon|#{num} mons":"#{num} Ð¼ÑÑ","1#1 month|#{num} months":"one#{num} Ð¼ÑÑÑÑÑ|few#{num} Ð¼ÑÑÑÑÑ|many#{num} Ð¼ÑÑÑÑÑÐ²|#{num} Ð¼ÑÑÑÑÑ","#{num}y":"#{num}Ñ","durationMediumYears":"#{num} Ñ.","1#1 yr|#{num} yrs":"one#{num} ÑÑÐº|few#{num} ÑÐ¾ÐºÐ¸|many#{num} ÑÐ¾Ðº|#{num} ÑÐ¾ÐºÑ","1#1 year|#{num} years":"one#{num} ÑÑÐº|few#{num} ÑÐ¾ÐºÐ¸|many#{num} ÑÐ¾ÐºÑÐ²|#{num} ÑÐ¾ÐºÑ","{duration} ago":"{duration} ÑÐ¾Ð¼Ñ","in {duration}":"ÑÐµÑÐµÐ· {duration}","finalSeparatorFull":" ÑÐ° ","separatorLong":" "};
ilib.data.sysres_ur = {"NN1":"Ø¬Ù","NN2":"ÙØ±","NN3":"ÙØ§","NN4":"Ø§Ù¾","NN5":"ÙØ¦","NN6":"Ø¬Ù","NN7":"Ø¬Ù","NN8":"Ø§Ú¯","NN9":"Ø³Øª","NN10":"Ø§Ú©","NN11":"ÙÙ","NN12":"Ø¯Ø³","MMM1":"Ø¬ÙÙØ±Û","MMM2":"ÙØ±ÙØ±Û","MMM3":"ÙØ§Ø±Ú","MMM4":"Ø§Ù¾Ø±ÛÙ","MMM5":"ÙØ¦","MMM6":"Ø¬ÙÙ","MMM7":"Ø¬ÙÙØ§Ø¦","MMM8":"Ø§Ú¯Ø³Øª","MMM9":"Ø³ØªÙØ¨Ø±","MMM10":"Ø§Ú©ØªÙØ¨Ø±","MMM11":"ÙÙÙØ¨Ø±","MMM12":"Ø¯Ø³ÙØ¨Ø±","MMMM1":"Ø¬ÙÙØ±Û","MMMM2":"ÙØ±ÙØ±Û","MMMM3":"ÙØ§Ø±Ú","MMMM4":"Ø§Ù¾Ø±ÛÙ","MMMM5":"ÙØ¦","MMMM6":"Ø¬ÙÙ","MMMM7":"Ø¬ÙÙØ§Ø¦","MMMM8":"Ø§Ú¯Ø³Øª","MMMM9":"Ø³ØªÙØ¨Ø±","MMMM10":"Ø§Ú©ØªÙØ¨Ø±","MMMM11":"ÙÙÙØ¨Ø±","MMMM12":"Ø¯Ø³ÙØ¨Ø±","E0":"Ø§Øª","E1":"Ø³Ù","E2":"ÙÙ","E3":"Ø¨Ø¯","E4":"Ø¬Ù","E5":"Ø¬Ù","E6":"ÛÙ","EE0":"Ø§Øª","EE1":"Ø³Ù","EE2":"ÙÙ","EE3":"Ø¨Ø¯","EE4":"Ø¬Ù","EE5":"Ø¬Ù","EE6":"ÛÙ","EEE0":"Ø§ØªÙØ§Ø±","EEE1":"Ù¾ÛØ±","EEE2":"ÙÙÚ¯Ù","EEE3":"Ø¨Ø¯Ù","EEE4":"Ø¬ÙØ¹Ø±Ø§Øª","EEE5":"Ø¬ÙØ¹Û","EEE6":"ÛÙØªÛ","EEEE0":"Ø§ØªÙØ§Ø±","EEEE1":"Ù¾ÛØ±","EEEE2":"ÙÙÚ¯Ù","EEEE3":"Ø¨Ø¯Ù","EEEE4":"Ø¬ÙØ¹Ø±Ø§Øª","EEEE5":"Ø¬ÙØ¹Û","EEEE6":"ÛÙØªÛ","a0":"Ø¯Ù","a1":"Ø±Ø§Øª","G-1":"Ù Ù","G1":"Ø¹ÛØ³ÙÛ Ø³Ù","#{num}s":"#{num}Ø³","1#1 se|#{num} sec":"#{num} Ø³Û","1#1 sec|#{num} sec":"#{num} Ø³ÛÚ©","1#1 second|#{num} seconds":"#{num} Ø³ÛÚ©ÙÚ","durationShortMinutes":"#{num}Ù","1#1 mi|#{num} min":"#{num} ÙÙÙ¹","1#1 min|#{num} min":"#{num} ÙÙÙ¹","1#1 minute|#{num} minutes":"#{num} ÙÙÙ¹","#{num}h":"#{num}Ú¯","durationMediumHours":"#{num} Ú¯Ú¾","1#1 hr|#{num} hrs":"#{num} Ú¯Ú¾Ù","1#1 hour|#{num} hours":"one#{num} Ú¯Ú¾ÙÙ¹Û|#{num} Ú¯Ú¾ÙÙ¹Û","#{num}d":"#{num}Ø¯","1#1 dy|#{num} dys":"#{num} Ø¯Ù","durationLongDays":"#{num} Ø¯Ù","1#1 day|#{num} days":"#{num} Ø¯Ù","#{num}w":"#{num}Û","durationMediumWeeks":"#{num} ÛÙ","1#1 wk|#{num} wks":"one#{num} ÛÙØªÛ|#{num} ÛÙØªÛ","1#1 week|#{num} weeks":"one#{num} ÛÙØªÛ|#{num} ÛÙØªÛ","durationShortMonths":"#{num}Ù","1#1 mo|#{num} mos":"#{num} ÙÛ","1#1 mon|#{num} mons":"#{num} ÙÛÛ","1#1 month|#{num} months":"one#{num} ÙÛÛÙÛ|#{num} ÙÛÛÙÛ","#{num}y":"#{num}Ø³","durationMediumYears":"#{num} Ø³Ø§Ù","1#1 yr|#{num} yrs":"#{num} Ø³Ø§Ù","1#1 year|#{num} years":"#{num} Ø³Ø§Ù","{duration} ago":"â{duration} Ù¾ÛÙÛ","in {duration}":"â{duration} ÙÛÚº","separatorFull":"Ø ","finalSeparatorFull":"Ø Ø§ÙØ± ","separatorLong":" "};
ilib.data.sysres_uz = {"generated":true,"NN1":"Ð¯Ð½","NN2":"Ð¤Ðµ","NN3":"ÐÐ°","NN4":"ÐÐ¿","NN5":"ÐÐ°","NN6":"ÐÑ","NN7":"ÐÑ","NN8":"ÐÐ²","NN9":"Ð¡Ðµ","NN10":"ÐÐº","NN11":"ÐÐ¾","NN12":"ÐÐµ","MMM1":"Ð¯Ð½Ð²","MMM2":"Ð¤ÐµÐ²","MMM3":"ÐÐ°Ñ","MMM4":"ÐÐ¿Ñ","MMM5":"ÐÐ°Ð¹","MMM6":"ÐÑÐ½","MMM7":"ÐÑÐ»","MMM8":"ÐÐ²Ð³","MMM9":"Ð¡ÐµÐ½","MMM10":"ÐÐºÑ","MMM11":"ÐÐ¾Ñ","MMM12":"ÐÐµÐº","MMMM1":"Ð¯Ð½Ð²Ð°Ñ","MMMM2":"Ð¤ÐµÐ²ÑÐ°Ð»","MMMM3":"ÐÐ°ÑÑ","MMMM4":"ÐÐ¿ÑÐµÐ»","MMMM5":"ÐÐ°Ð¹","MMMM6":"ÐÑÐ½","MMMM7":"ÐÑÐ»","MMMM8":"ÐÐ²Ð³ÑÑÑ","MMMM9":"Ð¡ÐµÐ½ÑÑÐ±Ñ","MMMM10":"ÐÐºÑÑÐ±Ñ","MMMM11":"ÐÐ¾ÑÐ±Ñ","MMMM12":"ÐÐµÐºÐ°Ð±Ñ","E0":"Ð¯","E1":"Ð","E2":"Ð¡","E3":"Ð§","E4":"Ð","E5":"Ð","E6":"Ð¨","EE0":"Ð¯Ðº","EE1":"ÐÑ","EE2":"Ð¡Ðµ","EE3":"Ð§Ð¾","EE4":"ÐÐ°","EE5":"ÐÑ","EE6":"Ð¨Ð°","EEE0":"Ð¯ÐºÑ","EEE1":"ÐÑÑ","EEE2":"Ð¡ÐµÑ","EEE3":"Ð§Ð¾Ñ","EEE4":"ÐÐ°Ð¹","EEE5":"ÐÑÐ¼","EEE6":"Ð¨Ð°Ð½","EEEE0":"ÑÐºÑÐ°Ð½Ð±Ð°","EEEE1":"Ð´ÑÑÐ°Ð½Ð±Ð°","EEEE2":"ÑÐµÑÐ°Ð½Ð±Ð°","EEEE3":"ÑÐ¾ÑÑÐ°Ð½Ð±Ð°","EEEE4":"Ð¿Ð°Ð¹ÑÐ°Ð½Ð±Ð°","EEEE5":"Ð¶ÑÐ¼Ð°","EEEE6":"ÑÐ°Ð½Ð±Ð°","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_uz_Arab_AF = {"generated":true,"NN1":"1","NN2":"2","NN3":"3","NN4":"4","NN5":"5","NN6":"6","NN7":"7","NN8":"8","NN9":"9","NN10":"10","NN11":"11","NN12":"12","MMM1":"1","MMM2":"2","MMM3":"3","MMM4":"4","MMM5":"5","MMM6":"6","MMM7":"7","MMM8":"8","MMM9":"9","MMM10":"10","MMM11":"11","MMM12":"12","MMMM1":"1","MMMM2":"2","MMMM3":"3","MMMM4":"4","MMMM5":"5","MMMM6":"6","MMMM7":"7","MMMM8":"8","MMMM9":"9","MMMM10":"10","MMMM11":"11","MMMM12":"12","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"1","EE1":"2","EE2":"3","EE3":"4","EE4":"5","EE5":"6","EE6":"7","EEE0":"1","EEE1":"2","EEE2":"3","EEE3":"4","EEE4":"5","EEE5":"6","EEE6":"7","EEEE0":"1","EEEE1":"2","EEEE2":"3","EEEE3":"4","EEEE4":"5","EEEE5":"6","EEEE6":"7"};
ilib.data.sysres_uz_Latn_UZ = {"generated":true,"NN1":"Ya","NN2":"Fe","NN3":"Ma","NN4":"Ap","NN5":"Ma","NN6":"Iy","NN7":"Iy","NN8":"Av","NN9":"Se","NN10":"Ok","NN11":"No","NN12":"De","MMM1":"Yanv","MMM2":"Fev","MMM3":"Mar","MMM4":"Apr","MMM5":"May","MMM6":"Iyun","MMM7":"Iyul","MMM8":"Avg","MMM9":"Sen","MMM10":"Okt","MMM11":"Noya","MMM12":"Dek","MMMM1":"Yanvar","MMMM2":"Fevral","MMMM3":"Mart","MMMM4":"Aprel","MMMM5":"May","MMMM6":"Iyun","MMMM7":"Iyul","MMMM8":"Avgust","MMMM9":"Sentyabr","MMMM10":"Oktyabr","MMMM11":"Noyabr","MMMM12":"Dekabr","E0":"Y","E1":"D","E2":"S","E3":"C","E4":"P","E5":"C","E6":"S","EE0":"Ya","EE1":"Du","EE2":"Se","EE3":"Ch","EE4":"Pa","EE5":"Cu","EE6":"Sh","EEE0":"Yaksh","EEE1":"Dush","EEE2":"Sesh","EEE3":"Chor","EEE4":"Pay","EEE5":"Cum","EEE6":"Shan","EEEE0":"yakshanba","EEEE1":"dushanba","EEEE2":"seshanba","EEEE3":"chorshanba","EEEE4":"payshanba","EEEE5":"cuma","EEEE6":"shanba"};
ilib.data.sysres_vai = {"generated":true,"NN1":"ê¨êª","NN2":"êê¡","NN3":"ê¾êº","NN4":"ê¢ê","NN5":"êê±","NN6":"6","NN7":"7","NN8":"êê","NN9":"ê¢ê","NN10":"ê­ê","NN11":"êê","NN12":"ê¨êª","MMM1":"ê¨êªê êê®","MMM2":"êê¡êê","MMM3":"ê¾êº","MMM4":"ê¢ê","MMM5":"êê±","MMM6":"6","MMM7":"7","MMM8":"êê","MMM9":"ê¢ê","MMM10":"ê­ê","MMM11":"êêêê¿ ê¸êê","MMM12":"ê¨êªê± êê®","MMMM1":"ê¨êªê êê®","MMMM2":"êê¡êê","MMMM3":"ê¾êº","MMMM4":"ê¢ê","MMMM5":"êê±","MMMM6":"6","MMMM7":"7","MMMM8":"êê","MMMM9":"ê¢ê","MMMM10":"ê­ê","MMMM11":"êêêê¿ ê¸êê","MMMM12":"ê¨êªê± êê®","E0":"1","E1":"2","E2":"3","E3":"4","E4":"5","E5":"6","E6":"7","EE0":"êê","EE1":"ê³ê¡","EE2":"êê","EE3":"êê","EE4":"êê¤","EE5":"êê¤","EE6":"ê»ê¬","EEE0":"êêêµ","EEE1":"ê³ê¡ê","EEE2":"êêê","EEE3":"êêê","EEE4":"êê¤êê¢","EEE5":"êê¤êê®","EEE6":"ê»ê¬ê³","EEEE0":"êêêµ","EEEE1":"ê³ê¡ê","EEEE2":"êêê","EEEE3":"êêê","EEEE4":"êê¤êê¢","EEEE5":"êê¤êê®","EEEE6":"ê»ê¬ê³","1#1 sec|#{num} sec":"#{num} s","1#1 second|#{num} seconds":"#{num} s","durationShortMinutes":"#{num}m","1#1 min|#{num} min":"#{num} min","1#1 minute|#{num} minutes":"#{num} min","1#1 hr|#{num} hrs":"#{num} h","1#1 hour|#{num} hours":"#{num} h","durationLongDays":"#{num} d","1#1 day|#{num} days":"#{num} d","1#1 wk|#{num} wks":"#{num} w","1#1 week|#{num} weeks":"#{num} w","durationShortMonths":"#{num}m","1#1 mon|#{num} mons":"#{num} m","1#1 month|#{num} months":"#{num} m","1#1 yr|#{num} yrs":"#{num} y","1#1 year|#{num} years":"#{num} y","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", ","separatorLong":" "};
ilib.data.sysres_vai_Latn_LR = {"generated":true,"NN1":"lu","NN2":"Éa","NN3":"vÉ","NN4":"fu","NN5":"go","NN8":"kÉ","NN9":"sa","NN10":"ga","NN11":"ke","NN12":"lu","MMM1":"luukao kemÃ£","MMM2":"ÉandaÉu","MMM3":"vÉÉ","MMM4":"fulu","MMM5":"goo","MMM8":"kÉnde","MMM9":"saah","MMM10":"galo","MMM11":"kenpkato ÉololÉ","MMM12":"luukao lÉma","MMMM1":"luukao kemÃ£","MMMM2":"ÉandaÉu","MMMM3":"vÉÉ","MMMM4":"fulu","MMMM5":"goo","MMMM8":"kÉnde","MMMM9":"saah","MMMM10":"galo","MMMM11":"kenpkato ÉololÉ","MMMM12":"luukao lÉma","EE0":"la","EE1":"tÉ","EE2":"ta","EE3":"al","EE4":"ai","EE5":"ai","EE6":"si","EEE0":"lahadi","EEE1":"tÉÉnÉÉ","EEE2":"talata","EEE3":"alaba","EEE4":"aimisa","EEE5":"aijima","EEE6":"siÉiti","EEEE0":"lahadi","EEEE1":"tÉÉnÉÉ","EEEE2":"talata","EEEE3":"alaba","EEEE4":"aimisa","EEEE5":"aijima","EEEE6":"siÉiti"};
ilib.data.sysres_vi = {"N1":"1","N2":"2","N3":"3","N4":"4","N5":"5","N6":"6","N7":"7","N8":"8","N9":"9","N10":"10","N11":"11","N12":"12","NN1":"1","NN2":"2","NN3":"3","NN4":"4","NN5":"5","NN6":"6","NN7":"7","NN8":"8","NN9":"9","NN10":"10","NN11":"11","NN12":"12","MMM1":"th.1","MMM2":"th.2","MMM3":"th.3","MMM4":"th.4","MMM5":"th.5","MMM6":"th.6","MMM7":"th.7","MMM8":"th.8","MMM9":"th.9","MMM10":"th.10","MMM11":"th.11","MMM12":"th.12","MMMM1":"thÃ¡ng má»t","MMMM2":"thÃ¡ng hai","MMMM3":"thÃ¡ng ba","MMMM4":"thÃ¡ng tÆ°","MMMM5":"thÃ¡ng nÄm","MMMM6":"thÃ¡ng sÃ¡u","MMMM7":"thÃ¡ng báº£y","MMMM8":"thÃ¡ng tÃ¡m","MMMM9":"thÃ¡ng chÃ­n","MMMM10":"thÃ¡ng mÆ°á»i","MMMM11":"thÃ¡ng mÆ°á»i má»t","MMMM12":"thÃ¡ng mÆ°á»i hai","E0":"cn","E1":"t2","E2":"t3","E3":"t4","E4":"t5","E5":"t6","E6":"t7","EE0":"cn","EE1":"t2","EE2":"t3","EE3":"t4","EE4":"t5","EE5":"t6","EE6":"t7","EEE0":"cnh","EEE1":"hai","EEE2":"ba","EEE3":"tÆ°","EEE4":"nÄm","EEE5":"sÃ¡u","EEE6":"báº£y","EEEE0":"chá»§ nháº­t","EEEE1":"thá»© hai","EEEE2":"thá»© ba","EEEE3":"thá»© tÆ°","EEEE4":"thá»© nÄm","EEEE5":"thá»© sÃ¡u","EEEE6":"thá»© báº£y","a0":"SA","a1":"CH","G-1":"tr. CN","G1":"sau CN","in {duration}":"trong {duration}","{duration} ago":"{duration} trÆ°á»c","1#1 year|#{num} years":"#{num} nÄm","1#1 month|#{num} months":"#{num} thÃ¡ng","1#1 week|#{num} weeks":"#{num} tuáº§n","1#1 day|#{num} days":"#{num} ngÃ y","1#1 hour|#{num} hours":"#{num} giá»","1#1 minute|#{num} minutes":"#{num} phÃºt","1#1 second|#{num} seconds":"#{num} giÃ¢y","1#1 yr|#{num} yrs":"#{num} nÄm","1#1 mon|#{num} mons":"#{num} thÃ¡","1#1 wk|#{num} wks":"#{num} tuáº§n","durationLongDays":"#{num} ngÃ y","1#1 hr|#{num} hrs":"#{num} giá»","1#1 min|#{num} min":"#{num} phÃºt","1#1 sec|#{num} sec":"#{num} giÃ¢y","durationMediumYears":"#{num} nÄm","1#1 mo|#{num} mos":"#{num} th","durationMediumWeeks":"#{num} tu","1#1 dy|#{num} dys":"#{num} ng","durationMediumHours":"#{num} giá»","1#1 mi|#{num} min":"#{num} ph","1#1 se|#{num} sec":"#{num} gi","#{num}y":"#{num}n","durationShortMonths":"#{num}t","#{num}w":"#{num}t","#{num}d":"#{num}n","#{num}h":"#{num}g","durationShortMinutes":"#{num}p","#{num}s":"#{num}g","separatorShort":" ","separatorMedium":" ","separatorLong":", ","separatorFull":", ","finalSeparatorFull":" vÃ  "};
ilib.data.sysres_zh = {"MMMM1":"1","MMM1":"1","NN1":"01","N1":"1","MMMM2":"2","MMM2":"2","NN2":"02","N2":"2","MMMM3":"3","MMM3":"3","NN3":"03","N3":"3","MMMM4":"4","MMM4":"4","NN4":"04","N4":"4","MMMM5":"5","MMM5":"5","NN5":"05","N5":"5","MMMM6":"6","MMM6":"6","NN6":"06","N6":"6","MMMM7":"7","MMM7":"7","NN7":"07","N7":"7","MMMM8":"8","MMM8":"8","NN8":"08","N8":"8","MMMM9":"9","MMM9":"9","NN9":"09","N9":"9","MMMM10":"10","MMM10":"10","NN10":"10","N10":"1O","MMMM11":"11","MMM11":"11","NN11":"11","N11":"11","MMMM12":"12","MMM12":"12","NN12":"12","N12":"12","EEEE0":"æææ¥","EEE0":"å¨æ¥","EE0":"å¨æ¥","E0":"æ¥","EEEE1":"ææä¸","EEE1":"å¨ä¸","EE1":"å¨ä¸","E1":"ä¸","EEEE2":"ææäº","EEE2":"å¨äº","EE2":"å¨äº","E2":"äº","EEEE3":"ææä¸","EEE3":"å¨ä¸","EE3":"å¨ä¸","E3":"ä¸","EEEE4":"ææå","EEE4":"å¨å","EE4":"å¨å","E4":"å","EEEE5":"ææäº","EEE5":"å¨äº","EE5":"å¨äº","E5":"äº","EEEE6":"ææå­","EEE6":"å¨å­","EE6":"å¨å­","E6":"å­","ordinalChoice":"#{num}å¤©","a0":"ä¸å","a1":"ä¸å","azh0":"åæ¨","azh1":"æ©ä¸","azh2":"ä¸å","azh3":"ä¸­å","azh4":"ä¸å","azh5":"åæ","azh6":"æä¸","G-1":"å¬åå","G1":"å¬å","durationShortMillis":"#{num}æ¯«ç§","#{num}s":"#{num}ç§","durationShortMinutes":"#{num}åé","#{num}h":"#{num}å°æ¶","#{num}d":"#{num}å¤©","#{num}w":"#{num}å¨","durationShortMonths":"#{num}ä¸ªæ","#{num}y":"#{num}å¹´","#{num} ms":"#{num}æ¯«ç§","1#1 se|#{num} sec":"#{num}ç§","1#1 mi|#{num} min":"#{num}åé","durationMediumHours":"#{num}å°æ¶","1#1 dy|#{num} dys":"#{num}å¤©","durationMediumWeeks":"#{num}å¨","1#1 mo|#{num} mos":"#{num}ä¸ªæ","durationMediumYears":"#{num}å¹´","1#1 sec|#{num} sec":"#{num}ç§","1#1 min|#{num} min":"#{num}åé","1#1 hr|#{num} hrs":"#{num}å°æ¶","durationLongDays":"#{num}å¤©","1#1 wk|#{num} wks":"#{num}å¨","1#1 mon|#{num} mons":"#{num}ä¸ªæ","1#1 yr|#{num} yrs":"#{num}å¹´","1#1 millisecond|#{num} milliseconds":"#{num}æ¯«ç§","1#1 second|#{num} seconds":"#{num}ç§","1#1 minute|#{num} minutes":"#{num}åé","1#1 hour|#{num} hours":"#{num}å°æ¶","1#1 day|#{num} days":"#{num}å¤©","1#1 week|#{num} weeks":"#{num}å¨","1#1 month|#{num} months":"#{num}ä¸ªæ","1#1 year|#{num} years":"#{num}å¹´","{duration} ago":"{duration}å","in {duration}":"{duration}å","separatorShort":"","separatorMedium":"","separatorLong":"ã","separatorFull":"ã","finalSeparatorFull":"å"};
ilib.data.sysres_zh_Hant = {"EEE0":"é±æ¥","EE0":"é±æ¥","E0":"é±æ¥","EEE1":"é±ä¸","EE1":"é±ä¸","E1":"é±ä¸","EEE2":"é±äº","EE2":"é±äº","E2":"é±äº","EEE3":"é±ä¸","EE3":"é±ä¸","E3":"é±ä¸","EEE4":"é±å","EE4":"é±å","E4":"é±å","EEE5":"é±äº","EE5":"é±äº","E5":"é±äº","EEE6":"é±å­","EE6":"é±å­","E6":"é±å­","azh3":"æ­£å","durationShortMinutes":"#{num}åé","#{num}h":"#{num}å°æ","#{num}w":"#{num}é±","durationShortMonths":"#{num}åæ","1#1 mi|#{num} min":"#{num}åé","durationMediumHours":"#{num}å°æ","1#1 wk|#{num} wks":"#{num}é±","1#1 mo|#{num} mos":"#{num}åæ","1#1 min|#{num} min":"#{num}åé","1#1 hr|#{num} hrs":"#{num}å°æ","1#1 mon|#{num} mons":"#{num}åæ","1#1 minute|#{num} minutes":"#{num}åé","1#1 hour|#{num} hours":"#{num}å°æ","1#1 week|#{num} weeks":"#{num}é±","1#1 month|#{num} months":"#{num}åæ"};
ilib.data.sysres_zu = {"generated":true,"NN5":"Me","NN8":"Ag","NN10":"Ok","NN12":"Di","MMM3":"Mas","MMM5":"Mey","MMM8":"Aga","MMM10":"Okt","MMM12":"Dis","MMMM1":"Januwari","MMMM2":"Februwari","MMMM3":"Mashi","MMMM4":"Apreli","MMMM5":"Meyi","MMMM6":"Juni","MMMM7":"Julayi","MMMM8":"Agasti","MMMM9":"Septhemba","MMMM10":"Okthoba","MMMM11":"Novemba","MMMM12":"Disemba","E2":"B","E3":"T","E4":"S","E5":"H","E6":"M","EE0":"Is","EE1":"Um","EE2":"Ul","EE3":"Ul","EE4":"Ul","EE5":"Ul","EE6":"Um","EEE0":"Son","EEE1":"Mso","EEE2":"Bil","EEE3":"Tha","EEE4":"Sin","EEE5":"Hla","EEE6":"Mgq","EEEE0":"Sonto","EEEE1":"Msombuluko","EEEE2":"Lwesibili","EEEE3":"Lwesithathu","EEEE4":"ULwesine","EEEE5":"Lwesihlanu","EEEE6":"Mgqibelo","a0":"Ekuseni","a1":"Ntambama","G-1":"BC","G1":"AD","#{num}s":"#i{num}","1#1 se|#{num} sec":"one#isekhondi elingu-{num}|#{num} am","1#1 sec|#{num} sec":"one#isekhondi elingu-{num}|#{num} ama","1#1 second|#{num} seconds":"one#isekhondi elingu-{num}|#{num} amasekhondi","durationShortMinutes":"#i{num}","1#1 mi|#{num} min":"one#iminithi elingu-{num}|#{num} am","1#1 min|#{num} min":"one#iminithi elingu-{num}|#{num} ama","1#1 minute|#{num} minutes":"one#iminithi elingu-{num}|#{num} amaminithi","#{num}h":"#i{num}","durationMediumHours":"one#ihora elingu-{num}|#{num} am","1#1 hr|#{num} hrs":"one#ihora elingu-{num}|#{num} ama","1#1 hour|#{num} hours":"one#ihora elingu-{num}|#{num} amahora","#{num}d":"#u{num}","1#1 dy|#{num} dys":"one#usuku olungu-{num}|#{num} iz","durationLongDays":"one#usuku olungu-{num}|#{num} izi","1#1 day|#{num} days":"one#usuku olungu-{num}|#{num} izinsuku","#{num}w":"#i{num}","durationMediumWeeks":"one#iviki elingu-{num}|#{num} am","1#1 wk|#{num} wks":"one#iviki elingu-{num}|#{num} ama","1#1 week|#{num} weeks":"one#iviki elingu-{num}|#{num} amaviki","durationShortMonths":"#i{num}","1#1 mo|#{num} mos":"one#inyanga engu-{num}|#{num} iz","1#1 mon|#{num} mons":"one#inyana engu-{num}|#{num} izi","1#1 month|#{num} months":"one#inyana engu-{num}|#{num} izinyanga","#{num}y":"#u{num}","durationMediumYears":"one#unyaka ongu-{num}|#{num} im","1#1 yr|#{num} yrs":"one#unyaka ongu-{num}|#{num} imi","1#1 year|#{num} years":"one#unyaka ongu-{num}|#{num} iminyaka","{duration} ago":"-{duration}","in {duration}":"+{duration}","finalSeparatorFull":", no-","separatorLong":" "};
/*
 * datefmt.js - Date formatter definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
date.js 
strings.js 
resources.js 
calendar.js
localeinfo.js
timezone.js
calendar/gregorian.js
util/jsutils.js
*/

// !data dateformats sysres

/**
 * @class
 * Create a new date formatter instance. The date formatter is immutable once
 * it is created, but can format as many different dates as needed with the same
 * options. Create different date formatter instances for different purposes
 * and then keep them cached for use later if you have more than one date to
 * format.<p>
 * 
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when formatting the date/time. If the locale is
 * not specified, then the default locale of the app or web page will be used.
 * 
 * <li><i>calendar</i> - the type of calendar to use for this format. The value should
 * be a sting containing the name of the calendar. Currently, the supported
 * types are "gregorian", "julian", "arabic", "hebrew", or "chinese". If the
 * calendar is not specified, then the default calendar for the locale is used. When the
 * calendar type is specified, then the format method must be called with an instance of
 * the appropriate date type. (eg. Gregorian calendar means that the format method must 
 * be called with a GregDate instance.)
 *  
 * <li><i>timezone</i> - time zone to use when formatting times. This may be a time zone
 * instance or a time zone specifier from the IANA list of time zone database names 
 * (eg. "America/Los_Angeles"), 
 * the string "local", or a string specifying the offset in RFC 822 format. The IANA
 * list of time zone names can be viewed at 
 * <a href="http://en.wikipedia.org/wiki/List_of_tz_database_time_zones">this page</a>.
 * If the time zone is given as "local", the offset from UTC as given by
 * the Javascript system is used. If the offset is given as an RFC 822 style offset
 * specifier, it will parse that string and use the resulting offset. If the time zone
 * is not specified, the
 * default time zone for the locale is used. If both the date object and this formatter
 * instance contain time zones and those time zones are different from each other, the 
 * formatter will calculate the offset between the time zones and subtract it from the 
 * date before formatting the result for the current time zone. The theory is that a date
 * object that contains a time zone specifies a specific instant in time that is valid
 * around the world, whereas a date object without one is a local time and can only be
 * used for doing things in the local time zone of the user.
 * 
 * <li><i>type</i> - Specify whether this formatter should format times only, dates only, or
 * both times and dates together. Valid values are "time", "date", and "datetime". Note that
 * in some locales, the standard format uses the order "time followed by date" and in others, 
 * the order is exactly opposite, so it is better to create a single "datetime" formatter 
 * than it is to create a time formatter and a date formatter separately and concatenate the 
 * results. A "datetime" formatter will get the order correct for the locale.<p>
 * 
 * The default type if none is specified in with the type option is "date".
 * 
 * <li><i>length</i> - Specify the length of the format to use. The length is the approximate size of the 
 * formatted string.
 * 
 * <ul>
 * <li><i>short</i> - use a short representation of the time. This is the most compact format possible for the locale.
 * <li><i>medium</i> - use a medium length representation of the time. This is a slightly longer format.
 * <li><i>long</i> - use a long representation of the time. This is a fully specified format, but some of the textual 
 * components may still be abbreviated
 * <li><i>full</i> - use a full representation of the time. This is a fully specified format where all the textual 
 * components are spelled out completely
 * </ul>
 * 
 * eg. The "short" format for an en_US date may be "MM/dd/yy", whereas the long format might be "d MMM, yyyy". In the long
 * format, the month name is textual instead of numeric and is longer, the year is 4 digits instead of 2, and the format 
 * contains slightly more spaces and formatting characters.<p>
 * 
 * Note that the length parameter does not specify which components are to be formatted. Use the "date" and the "time"
 * properties to specify the components. Also, very few of the components of a time format differ according to the length,
 * so this property has little to no affect on time formatting.
 * 
 * <li><i>date</i> - This property tells
 * which components of a date format to use. For example,
 * sometimes you may wish to format a date that only contains the month and date
 * without the year, such as when displaying a person's yearly birthday. The value
 * of this property allows you to specify only those components you want to see in the
 * final output, ordered correctly for the locale. <p>
 * 
 * Valid values are:
 * 
 * <ul>
 * <li><i>dmwy</i> - format all components, weekday, date, month, and year
 * <li><i>dmy</i> - format only date, month, and year
 * <li><i>dmw</i> - format only weekday, date, and month
 * <li><i>dm</i> - format only date and month
 * <li><i>my</i> - format only month and year
 * <li><i>dw</i> - format only the weekday and date
 * <li><i>d</i> - format only the date
 * <li><i>m</i> - format only the month, in numbers for shorter lengths, and letters for 
 * longer lengths
 * <li><i>n</i> - format only the month, in letters only for all lengths
 * <li><i>y</i> - format only the year
 * </ul>
 * Default components, if this property is not specified, is "dmy". This property may be specified
 * but has no affect if the current formatter is for times only.
 * 
 * <li><i>time</i> - This property gives which components of a time format to use. The time will be formatted 
 * correctly for the locale with only the time components requested. For example, a clock might only display 
 * the hour and minute and not need the seconds or the am/pm component. In this case, the time property should be set 
 * to "hm". <p>
 * 
 * Valid values for this property are:
 * 
 * <ul>
 * <li><i>ahmsz</i> - format the hours, minutes, seconds, am/pm (if using a 12 hour clock), and the time zone
 * <li><i>ahms</i> - format the hours, minutes, seconds, and am/pm (if using a 12 hour clock)
 * <li><i>hmsz</i> - format the hours, minutes, seconds, and the time zone
 * <li><i>hms</i> - format the hours, minutes, and seconds
 * <li><i>ahmz</i> - format the hours, minutes, am/pm (if using a 12 hour clock), and the time zone
 * <li><i>ahm</i> - format the hours, minutes, and am/pm (if using a 12 hour clock)
 * <li><i>hmz</i> - format the hours, minutes, and the time zone
 * <li><i>ah</i> - format only the hours and am/pm if using a 12 hour clock
 * <li><i>hm</i> - format only the hours and minutes
 * <li><i>ms</i> - format only the minutes and seconds
 * <li><i>h</i> - format only the hours
 * <li><i>m</i> - format only the minutes
 * <li><i>s</i> - format only the seconds
 * </ul>
 * 
 * If you want to format a length of time instead of a particular instant
 * in time, use the duration formatter object (ilib.DurFmt) instead because this
 * formatter is geared towards instants. A date formatter will make sure that each component of the 
 * time is within the normal range
 * for that component. That is, the minutes will always be between 0 and 59, no matter
 * what is specified in the date to format. A duration format will allow the number
 * of minutes to exceed 59 if, for example, you were displaying the length of
 * a movie of 198 minutes.<p>
 * 
 * Default value if this property is not specified is "hma".
 * 
 * <li><i>clock</i> - specify that the time formatter should use a 12 or 24 hour clock. 
 * Valid values are "12" and "24".<p>
 * 
 * In some locales, both clocks are used. For example, in en_US, the general populace uses
 * a 12 hour clock with am/pm, but in the US military or in nautical or aeronautical or 
 * scientific writing, it is more common to use a 24 hour clock. This property allows you to
 * construct a formatter that overrides the default for the locale.<p>
 * 
 * If this property is not specified, the default is to use the most widely used convention
 * for the locale.
 *  
 * <li><i>template</i> - use the given template string as a fixed format when formatting 
 * the date/time. Valid codes to use in a template string are as follows:
 * 
 * <ul>
 * <li><i>a</i> - am/pm marker
 * <li><i>d</i> - 1 or 2 digit date of month, not padded
 * <li><i>dd</i> - 1 or 2 digit date of month, 0 padded to 2 digits
 * <li><i>O</i> - ordinal representation of the date of month (eg. "1st", "2nd", etc.)
 * <li><i>D</i> - 1 to 3 digit day of year
 * <li><i>DD</i> - 1 to 3 digit day of year, 0 padded to 2 digits
 * <li><i>DDD</i> - 1 to 3 digit day of year, 0 padded to 3 digits
 * <li><i>M</i> - 1 or 2 digit month number, not padded
 * <li><i>MM</i> - 1 or 2 digit month number, 0 padded to 2 digits
 * <li><i>N</i> - 1 character month name abbreviation
 * <li><i>NN</i> - 2 character month name abbreviation
 * <li><i>MMM</i> - 3 character month month name abbreviation
 * <li><i>MMMM</i> - fully spelled out month name
 * <li><i>yy</i> - 2 digit year
 * <li><i>yyyy</i> - 4 digit year
 * <li><i>E</i> - day-of-week name, abbreviated to a single character
 * <li><i>EE</i> - day-of-week name, abbreviated to a max of 2 characters
 * <li><i>EEE</i> - day-of-week name, abbreviated to a max of 3 characters
 * <li><i>EEEE</i> - day-of-week name fully spelled out 
 * <li><i>G</i> - era designator
 * <li><i>w</i> - week number in year
 * <li><i>ww</i> - week number in year, 0 padded to 2 digits
 * <li><i>W</i> - week in month
 * <li><i>h</i> - hour (1 to 12)
 * <li><i>hh</i> - hour (1 to 12), 0 padded to 2 digits
 * <li><i>k</i> - hour (1 to 24)
 * <li><i>kk</i> - hour (1 to 24), 0 padded to 2 digits
 * <li><i>H</i> - hour (0 to 23)
 * <li><i>HH</i> - hour (0 to 23), 0 padded to 2 digits
 * <li><i>K</i> - hour (0 to 11)
 * <li><i>KK</i> - hour (0 to 11), 0 padded to 2 digits
 * <li><i>m</i> - minute in hour
 * <li><i>mm</i> - minute in hour, 0 padded to 2 digits
 * <li><i>s</i> - second in minute
 * <li><i>ss</i> - second in minute, 0 padded to 2 digits
 * <li><i>S</i> - millisecond (1 to 3 digits)
 * <li><i>SSS</i> - millisecond, 0 padded to 3 digits
 * <li><i>z</i> - general time zone
 * <li><i>Z</i> - RFC 822 time zone
 * </ul>
 * 
 * <li><i>useNative</i> - the flag used to determine whether to use the native script settings 
 * for formatting the numbers.
 *
 * <li><i>meridiems</i> - string that specifies what style of meridiems to use with this 
 * format. The choices are "default" and "chinese". The "default" style is the simple AM/PM,
 * and the "chinese" style uses 7 different meridiems corresponding to the various parts of 
 * the day. The default if not specified is "default", even for the Chinese locales. 
 *
 * <li><i>onLoad</i> - a callback function to call when the date format object is fully 
 * loaded. When the onLoad option is given, the DateFmt object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Any substring containing letters within single or double quotes will be used 
 * as-is in the final output and will not be interpretted for codes as above.<p>
 * 
 * Example: a date format in Spanish might be given as: "'El' d. 'de' MMMM", where
 * the 'El' and the 'de' are left as-is in the output because they are quoted. Typical 
 * output for this example template might be, "El 5. de Mayo".
 * 
 * The following options will be used when formatting a date/time with an explicit
 * template:
 * 
 * <ul>
 * <li>locale - the locale is only used for 
 * translations of things like month names or day-of-week names.
 * <li>calendar - used to translate a date instance into date/time component values 
 * that can be formatted into the template
 * <li>timezone - used to figure out the offset to add or subtract from the time to
 * get the final time component values
 * <li>clock - used to figure out whether to format times with a 12 or 24 hour clock.
 * If this option is specified, it will override the hours portion of a time format.
 * That is, "hh" is switched with "HH" and "kk" is switched with "KK" as appropriate. 
 * If this option is not specified, the 12/24 code in the template will dictate whether 
 * to use the 12 or 24 clock, and the 12/24 default in the locale will be ignored.
 * </ul>
 * 
 * All other options will be ignored and their corresponding getter methods will
 * return the empty string.<p>
 * 
 * Depends directive: !depends datefmt.js
 * 
 * @constructor
 * @param {Object} options options governing the way this date formatter instance works
 */
ilib.DateFmt = function(options) {
	var arr, i, bad, 
		sync = true, 
		loadParams = undefined;
	
	this.locale = new ilib.Locale();
	this.type = "date";
	this.length = "s";
	this.dateComponents = "dmy";
	this.timeComponents = "ahm";
	this.meridiems = "default";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.type) {
			if (options.type === 'date' || options.type === 'time' || options.type === 'datetime') {
				this.type = options.type;
			}
		}
		
		if (options.calendar) {
			this.calName = options.calendar;
		}
		
		if (options.length) {
			if (options.length === 'short' ||
				options.length === 'medium' ||
				options.length === 'long' ||
				options.length === 'full') {
				// only use the first char to save space in the json files
				this.length = options.length.charAt(0);
			}
		}
		
		if (options.date) {
			arr = options.date.split("");
			arr.sort(function (left, right) {
				return (left < right) ? -1 : ((right < left) ? 1 : 0);
			});
			bad = false;
			for (i = 0; i < arr.length; i++) {
				if (arr[i] !== 'd' && arr[i] !== 'm' && arr[i] !== 'y' && arr[i] !== 'w' && arr[i] !== 'n') {
					bad = true;
					break;
				}
			}
			if (!bad) {
				this.dateComponents = arr.join("");
			}
		}

		if (options.time) {
			arr = options.time.split("");
			arr.sort(function (left, right) {
				return (left < right) ? -1 : ((right < left) ? 1 : 0);
			});
			this.badTime = false;
			for (i = 0; i < arr.length; i++) {
				if (arr[i] !== 'h' && arr[i] !== 'm' && arr[i] !== 's' && arr[i] !== 'a' && arr[i] !== 'z') {
					this.badTime = true;
					break;
				}
			}
			if (!this.badTime) {
				this.timeComponents = arr.join("");
			}
		}
		
		if (options.clock && (options.clock === '12' || options.clock === '24')) {
			this.clock = options.clock;
		}
		
		if (options.template) {
			// many options are not useful when specifying the template directly, so zero
			// them out.
			this.type = "";
			this.length = "";
			this.dateComponents = "";
			this.timeComponents = "";
			
			this.template = options.template;
		}
		
		if (options.timezone) {
			if (options.timezone instanceof ilib.TimeZone) {
				this.tz = options.timezone;
			} else {
				this.tz = new ilib.TimeZone({
					locale: this.locale, 
					id: options.timezone
				});
			}
		} else if (options.locale) {
			// if an explicit locale was given, then get the time zone for that locale
			this.tz = new ilib.TimeZone({
				locale: this.locale
			});
		} // else just assume time zone "local"
		
		if (typeof(options.useNative) === 'boolean') {
			this.useNative = options.useNative;
		}
		
		if (typeof(options.meridiems) !== 'undefined' && options.meridiems === "chinese") {
			this.meridiems = options.meridiems;
		}
		
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync === true);
		}
		
		loadParams = options.loadParams;
	}

	if (!ilib.DateFmt.cache) {
		ilib.DateFmt.cache = {};
	}

	new ilib.LocaleInfo(this.locale, {
		sync: sync,
		loadParams: loadParams, 
		onLoad: ilib.bind(this, function (li) {
			this.locinfo = li;
			
			// get the default calendar name from the locale, and if the locale doesn't define
			// one, use the hard-coded gregorian as the last resort
			this.calName = this.calName || this.locinfo.getCalendar() || "gregorian";
			this.cal = ilib.Cal.newInstance({
				type: this.calName
			});
			if (!this.cal) {
				this.cal = new ilib.Cal.Gregorian();
			}

			/*
			if (this.timeComponents &&
					(this.clock === '24' || 
					(!this.clock && this.locinfo.getClock() === "24"))) {
				// make sure we don't have am/pm in 24 hour mode unless the user specifically
				// requested it in the time component option
				this.timeComponents = this.timeComponents.replace("a", "");
			}
			*/

			// load the strings used to translate the components
			new ilib.ResBundle({
				locale: this.locale,
				name: "sysres",
				sync: sync,
				loadParams: loadParams, 
				onLoad: ilib.bind(this, function (rb) {
					this.sysres = rb;
					
					if (!this.template) {
						ilib.loadData({
							object: ilib.DateFmt, 
							locale: this.locale, 
							name: "dateformats.json", 
							sync: sync, 
							loadParams: loadParams, 
							callback: ilib.bind(this, function (formats) {
								if (!formats) {
									formats = ilib.data.dateformats || ilib.DateFmt.defaultFmt;
									var spec = this.locale.getSpec().replace(/-/g, '_');
									ilib.DateFmt.cache[spec] = formats;
								}
								if (typeof(this.clock) === 'undefined') {
									// default to the locale instead
									this.clock = this.locinfo.getClock();
								}
								this._initTemplate(formats);
								this._massageTemplate();
								if (options && typeof(options.onLoad) === 'function') {
									options.onLoad(this);
								}
							})
						});
					} else {
						this._massageTemplate();
						if (options && typeof(options.onLoad) === 'function') {
							options.onLoad(this);
						}
					}
				})
			});	
		})
	});
};

// used in getLength
ilib.DateFmt.lenmap = {
	"s": "short",
	"m": "medium",
	"l": "long",
	"f": "full"
};

ilib.DateFmt.zeros = "0000";

ilib.DateFmt.defaultFmt = {
	"gregorian": {
		"order": "{date} {time}",
		"date": {
			"dmwy": "EEE d/MM/yyyy",
			"dmy": "d/MM/yyyy",
			"dmw": "EEE d/MM",
			"dm": "d/MM",
			"my": "MM/yyyy",
			"dw": "EEE d",
			"d": "dd",
			"m": "MM",
			"y": "yyyy",
			"n": "NN",
			"w": "EEE"
		},
		"time": {
			"12": "h:mm:ssa",
			"24": "H:mm:ss"
		},
		"range": {
			"c00": "{st} - {et}, {sd}/{sm}/{sy}",
			"c01": "{sd}/{sm} {st} - {ed}/{em} {et}, {sy}",
			"c02": "{sd}/{sm} {st} - {ed}/{em} {et}, {sy}",
			"c03": "{sd}/{sm}/{sy} {st} - {ed}/{em}/{ey} {et}",
			"c10": "{sd}-{ed}/{sm}/{sy}",
			"c11": "{sd}/{sm} - {ed}/{em} {sy}",
			"c12": "{sd}/{sm}/{sy} - {ed}/{em}/{ey}",
			"c20": "{sm}/{sy} - {em}/{ey}",
			"c30": "{sy} - {ey}"
		}
	},
	"islamic": "gregorian",
	"hebrew": "gregorian",
	"julian": "gregorian",
	"buddhist": "gregorian",
	"persian": "gregorian",
	"persian-algo": "gregorian"
};

/**
* @static
* @private
*/
ilib.DateFmt.monthNameLenMap = {
	"short" : "N",
	"medium": "NN",
	"long":   "MMM",
	"full":   "MMMM"
};

/**
* @static
* @private
*/
ilib.DateFmt.weekDayLenMap = {
	"short" : "E",
	"medium": "EE",
	"long":   "EEE",
	"full":   "EEEE"
};

ilib.DateFmt.prototype = {
	/**
	 * @protected
	 */
	_initTemplate: function (formats) {
		if (formats[this.calName]) {
			/** 
			 * @private
			 * @type {{order:(string|{s:string,m:string,l:string,f:string}),date:Object.<string, (string|{s:string,m:string,l:string,f:string})>,time:Object.<string,(string|{s:string,m:string,l:string,f:string})>,range:Object.<string, (string|{s:string,m:string,l:string,f:string})>}}
			 */
			this.formats = formats[this.calName];
			if (typeof(this.formats) === "string") {
				// alias to another calendar type
				this.formats = formats[this.formats];
			}
			
			this.template = "";
			
			switch (this.type) {
				case "datetime":
					this.template = (this.formats && this._getLengthFormat(this.formats.order, this.length)) || "{date} {time}";
					this.template = this.template.replace("{date}", this._getFormat(this.formats.date, this.dateComponents, this.length) || "");
					this.template = this.template.replace("{time}", this._getFormat(this.formats.time[this.clock], this.timeComponents, this.length) || "");
					break;
				case "date":
					this.template = this._getFormat(this.formats.date, this.dateComponents, this.length);
					break;
				case "time":
					this.template = this._getFormat(this.formats.time[this.clock], this.timeComponents, this.length);
					break;
			}
		} else {
			throw "No formats available for calendar " + this.calName + " in locale " + this.locale.toString();
		}
	},
	
	/**
	 * @protected
	 */
	_massageTemplate: function () {
		var i;
		
		if (this.clock && this.template) {
			// explicitly set the hours to the requested type
			var temp = "";
			switch (this.clock) {
				case "24":
					for (i = 0; i < this.template.length; i++) {
						if (this.template.charAt(i) == "'") {
							temp += this.template.charAt(i++);
							while (i < this.template.length && this.template.charAt(i) !== "'") {
								temp += this.template.charAt(i++);
							}
							if (i < this.template.length) {
								temp += this.template.charAt(i);
							}
						} else if (this.template.charAt(i) == 'K') {
							temp += 'k';
						} else if (this.template.charAt(i) == 'h') {
							temp += 'H';
						} else {
							temp += this.template.charAt(i);
						}
					}
					this.template = temp;
					break;
				case "12":
					for (i = 0; i < this.template.length; i++) {
						if (this.template.charAt(i) == "'") {
							temp += this.template.charAt(i++);
							while (i < this.template.length && this.template.charAt(i) !== "'") {
								temp += this.template.charAt(i++);
							}
							if (i < this.template.length) {
								temp += this.template.charAt(i);
							}
						} else if (this.template.charAt(i) == 'k') {
							temp += 'K';
						} else if (this.template.charAt(i) == 'H') {
							temp += 'h';
						} else {
							temp += this.template.charAt(i);
						}
					}
					this.template = temp;
					break;
			}
		}
		
		// tokenize it now for easy formatting
		this.templateArr = this._tokenize(this.template);

		var digits;
		// set up the mapping to native or alternate digits if necessary
		if (typeof(this.useNative) === "boolean") {
			if (this.useNative) {
				digits = this.locinfo.getNativeDigits();
				if (digits) {
					this.digits = digits;
				}
			}
		} else if (this.locinfo.getDigitsStyle() === "native") {
			digits = this.locinfo.getNativeDigits();
			if (digits) {
				this.useNative = true;
				this.digits = digits;
			}
		}
	},
    
	/**
	 * Convert the template into an array of date components separated by formatting chars.
	 * @protected
	 * @param {string} template Format template to tokenize into components
	 * @return {Array.<string>} a tokenized array of date format components
	 */
	_tokenize: function (template) {
		var i = 0, start, ch, letter, arr = [];
		
		// console.log("_tokenize: tokenizing template " + template);
		if (template) {
			while (i < template.length) {
				ch = template.charAt(i);
				start = i;
				if (ch === "'") {
					// console.log("found quoted string");
					i++;
					// escaped string - push as-is, then dequote later
					while (i < template.length && template.charAt(i) !== "'") {
						i++;
					}
					if (i < template.length) {
						i++;	// grab the other quote too
					}
				} else if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {
					letter = template.charAt(i);
					// console.log("found letters " + letter);
					while (i < template.length && ch === letter) {
						ch = template.charAt(++i);
					}
				} else {
					// console.log("found other");
					while (i < template.length && ch !== "'" && (ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z')) {
						ch = template.charAt(++i);
					}
				}
				arr.push(template.substring(start,i));
				// console.log("start is " + start + " i is " + i + " and substr is " + template.substring(start,i));
			}
		}
		return arr;
	},
                          
	/**
	 * @protected
	 * @param {Object.<string, (string|{s:string,m:string,l:string,f:string})>} obj Object to search
	 * @param {string} components Format components to search
	 * @param {string} length Length of the requested format
	 * @return {string|undefined} the requested format
	 */
	_getFormat: function getFormat(obj, components, length) {
		if (typeof(components) !== 'undefined' && obj[components]) {
			return this._getLengthFormat(obj[components], length);
		}
		return undefined;
	},

	/**
	 * @protected
	 * @param {(string|{s:string,m:string,l:string,f:string})} obj Object to search
	 * @param {string} length Length of the requested format
	 * @return {(string|undefined)} the requested format
	 */
	_getLengthFormat: function getLengthFormat(obj, length) {
		if (typeof(obj) === 'string') {
			return obj;
		} else if (obj[length]) {
			return obj[length];
		}
		return undefined;
	},

	/**
	 * Return the locale used with this formatter instance.
	 * @return {ilib.Locale} the ilib.Locale instance for this formatter
	 */
	getLocale: function() {
		return this.locale;
	},
	
	/**
	 * Return the template string that is used to format date/times for this
	 * formatter instance. This will work, even when the template property is not explicitly 
	 * given in the options to the constructor. Without the template option, the constructor 
	 * will build the appropriate template according to the options and use that template
	 * in the format method. 
	 * 
	 * @return {string} the format template for this formatter
	 */
	getTemplate: function() {
		return this.template;
	},
	
	/**
	 * Return the type of this formatter. The type is a string that has one of the following
	 * values: "time", "date", "datetime".
	 * @return {string} the type of the formatter
	 */
	getType: function() {
		return this.type;
	},
	
	/**
	 * Return the name of the calendar used to format date/times for this
	 * formatter instance.
	 * @return {string} the name of the calendar used by this formatter
	 */
	getCalendar: function () {
		return this.cal.getType();
	},
	
	/**
	 * Return the length used to format date/times in this formatter. This is either the
	 * value of the length option to the constructor, or the default value.
	 * 
	 * @return {string} the length of formats this formatter returns
	 */
	getLength: function () {
		return ilib.DateFmt.lenmap[this.length] || "";
	},
	
	/**
	 * Return the date components that this formatter formats. This is either the 
	 * value of the date option to the constructor, or the default value. If this
	 * formatter is a time-only formatter, this method will return the empty 
	 * string. The date component letters may be specified in any order in the 
	 * constructor, but this method will reorder the given components to a standard 
	 * order.
	 * 
	 * @return {string} the date components that this formatter formats
	 */
	getDateComponents: function () {
		return this.dateComponents || "";
	},

	/**
	 * Return the time components that this formatter formats. This is either the 
	 * value of the time option to the constructor, or the default value. If this
	 * formatter is a date-only formatter, this method will return the empty 
	 * string. The time component letters may be specified in any order in the 
	 * constructor, but this method will reorder the given components to a standard 
	 * order.
	 * 
	 * @return {string} the time components that this formatter formats
	 */
	getTimeComponents: function () {
		return this.timeComponents || "";
	},

	/**
	 * Return the time zone used to format date/times for this formatter
	 * instance.
	 * @return a string naming the time zone
	 */
	getTimeZone: function () {
		// Lazy load the time zone. If it wasn't explicitly set up before, set 
		// it up now, but use the 
		// default TZ for the locale. This way, if the caller never uses the
		// time zone in their format, we never have to load up a TimeZone
		// instance into this formatter.
		if (!this.tz) {
			this.tz = new ilib.TimeZone({id: ilib.getTimeZone()});
		}
		return this.tz;
	},
	/**
	 * Return the clock option set in the constructor. If the clock option was
	 * not given, the default from the locale is returned instead.
	 * @return {string} "12" or "24" depending on whether this formatter uses
	 * the 12-hour or 24-hour clock
	 */
	getClock: function () {
		return this.clock || this.locinfo.getClock();
	},
	
	/**
	 * @private
	 */
	_getTemplate: function (prefix, calendar) {
		if (calendar !== "gregorian") {
			return prefix + "-" + calendar;
		}
		return prefix;
	},

	/**
	 * Returns an array of the months of the year, formatted to the optional length specified.
	 * i.e. ...getMonthsOfYear() OR ...getMonthsOfYear({length: "short"})
	 * <p>
	 * The options parameter may contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>length</i> - length of the names of the months being sought. This may be one of
	 * "short", "medium", "long", or "full"
	 * <li><i>date</i> - retrieve the names of the months in the date of the given date
	 * <li><i>year</i> - retrieve the names of the months in the given year. In some calendars,
	 * the months have different names depending if that year is a leap year or not.
	 * </ul>
	 * 
	 * @param  {Object=} options an object-literal that contains any of the above properties
	 * @return {Array} an array of the names of all of the months of the year in the current calendar
	 */
	getMonthsOfYear: function(options) {
		var length = (options && options.length) || this.getLength(),
			template = ilib.DateFmt.monthNameLenMap[length],
			months = [undefined],
			date,
			monthCount;
		
		if (options) {
			if (options.date) {
				date = ilib.Date._dateToIlib(options.date); 	
			}
			
			if (options.year) {
				date = ilib.Date.newInstance({year: options.year, month: 1, day: 1, type: this.cal.getType()});
			}
		}
		
		if (!date) {
			date = this.cal.newDateInstance();
		}

		monthCount = this.cal.getNumMonths(date.getYears());
		for (var i = 1; i <= monthCount; i++) {
			months[i] = this.sysres.getString(this._getTemplate(template + i, this.cal.getType())).toString();
		}
		return months;
	},

	/**
	 * Returns an array of the days of the week, formatted to the optional length specified.
	 * i.e. ...getDaysOfWeek() OR ...getDaysOfWeek({length: "short"})
	 * <p>
	 * The options parameter may contain any of the following properties:
	 * 
	 * <ul>
	 * <li><i>length</i> - length of the names of the months being sought. This may be one of
	 * "short", "medium", "long", or "full"
	 * </ul>
	 * @param  {Object=} options an object-literal that contains one key 
	 *                   "length" with the standard length strings
	 * @return {Array} an array of all of the names of the days of the week
	 */
	getDaysOfWeek: function(options) {
		var length = (options && options.length) || this.getLength(),
			template = ilib.DateFmt.weekDayLenMap[length],
			days = [];
		for (var i = 0; i < 7; i++) {
			days[i] = this.sysres.getString(this._getTemplate(template + i, this.cal.getType())).toString();
		}
		return days;
	},

	
	/**
	 * Convert this formatter to a string representation by returning the
	 * format template. This method delegates to getTemplate.
	 * 
	 * @return {string} the format template
	 */
	toString: function() {
		return this.getTemplate();
	},
	
	/*
	 * @private
	 * Left pad the str to the given length of digits with zeros
	 * @param {string} str the string to pad
	 * @param {number} length the desired total length of the output string, padded 
	 */
	_pad: function (str, length) {
		if (typeof(str) !== 'string') {
			str = "" + str;
		}
		var start = 0;
		if (str.charAt(0) === '-') {
			start++;
		}
		return (str.length >= length+start) ? str : str.substring(0, start) + ilib.DateFmt.zeros.substring(0,length-str.length+start) + str.substring(start);
	},
	
	/*
	 * @private
	 * Format a date according to a sequence of components. 
	 * @param {ilib.Date} date a date/time object to format
	 * @param {Array.<string>} templateArr an array of components to format
	 * @return {string} the formatted date
	 */
	_formatTemplate: function (date, templateArr) {
		var i, key, temp, tz, str = "";
		for (i = 0; i < templateArr.length; i++) {
			switch (templateArr[i]) {
				case 'd':
					str += (date.day || 1);
					break;
				case 'dd':
					str += this._pad(date.day || "1", 2);
					break;
				case 'yy':
					temp = "" + ((date.year || 0) % 100);
					str += this._pad(temp, 2);
					break;
				case 'yyyy':
					str += this._pad(date.year || "0", 4);
					break;
				case 'M':
					str += (date.month || 1);
					break;
				case 'MM':
					str += this._pad(date.month || "1", 2);
					break;

				case 'h':
					temp = (date.hour || 0) % 12;
					if (temp == 0) {
						temp = "12";
					}
					str += temp; 
					break;
				case 'hh':
					temp = (date.hour || 0) % 12;
					if (temp == 0) {
						temp = "12";
					}
					str += this._pad(temp, 2);
					break;
				case 'K':
					temp = (date.hour || 0) % 12;
					str += temp; 
					break;
				case 'KK':
					temp = (date.hour || 0) % 12;
					str += this._pad(temp, 2);
					break;

				case 'H':
					str += (date.hour || "0");
					break;
				case 'HH':
					str += this._pad(date.hour || "0", 2);
					break;
				case 'k':
					str += (date.hour == 0 ? "24" : date.hour);
					break;
				case 'kk':
					temp = (date.hour == 0 ? "24" : date.hour);
					str += this._pad(temp, 2);
					break;

				case 'm':
					str += (date.minute || "0");
					break;
				case 'mm':
					str += this._pad(date.minute || "0", 2);
					break;
				case 's':
					str += (date.minute || "0");
					break;
				case 'ss':
					str += this._pad(date.second || "0", 2);
					break;
				case 'S':
					str += (date.millisecond || "0");
					break;
				case 'SSS':
					str += this._pad(date.millisecond || "0", 3);
					break;

				case 'N':
				case 'NN':
				case 'MMM':
				case 'MMMM':
					key = templateArr[i] + (date.month || 1);
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;

				case 'E':
				case 'EE':
				case 'EEE':
				case 'EEEE':
					key = templateArr[i] + date.getDayOfWeek();
					//console.log("finding " + key + " in the resources");
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;
					
				case 'a':
					if (this.meridiems === "chinese") {
						if (date.hour < 6) {
							key = "azh0";	// before dawn
						} else if (date.hour < 9) {
							key = "azh1";	// morning
						} else if (date.hour < 12) {
							key = "azh2";	// late morning/day before noon
						} else if (date.hour < 13) {
							key = "azh3";	// noon hour/midday
						} else if (date.hour < 18) {
							key = "azh4";	// afternoon
						} else if (date.hour < 21) {
							key = "azh5";	// evening time/dusk
						} else {
							key = "azh6";	// night time
						}
					} else {
						key = date.hour < 12 ? "a0" : "a1";
					}
					//console.log("finding " + key + " in the resources");
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;
					
				case 'w':
					str += date.getWeekOfYear();
					break;
				case 'ww':
					str += this._pad(date.getWeekOfYear(), 2);
					break;

				case 'D':
					str += date.getDayOfYear();
					break;
				case 'DD':
					str += this._pad(date.getDayOfYear(), 2);
					break;
				case 'DDD':
					str += this._pad(date.getDayOfYear(), 3);
					break;
				case 'W':
					str += date.getWeekOfMonth(this.locale);
					break;

				case 'G':
					key = "G" + date.getEra();
					str += (this.sysres.getString(undefined, key + "-" + this.calName) || this.sysres.getString(undefined, key));
					break;

				case 'O':
					temp = this.sysres.getString("1#1st|2#2nd|3#3rd|21#21st|22#22nd|23#23rd|31#31st|#{num}th", "ordinalChoice");
					str += temp.formatChoice(date.day, {num: date.day});
					break;
					
				case 'z': // general time zone
					tz = this.getTimeZone(); // lazy-load the tz
					str += tz.getDisplayName(date, "standard");
					break;
				case 'Z': // RFC 822 time zone
					tz = this.getTimeZone(); // lazy-load the tz
					str += tz.getDisplayName(date, "rfc822");
					break;

				default:
					str += templateArr[i].replace(/'/g, "");
					break;
			}
		}

		if (this.digits) {
			str = ilib.mapString(str, this.digits);
		}
		return str;
	},
	
	/**
	 * Format a particular date instance according to the settings of this
	 * formatter object. The type of the date instance being formatted must 
	 * correspond exactly to the calendar type with which this formatter was 
	 * constructed. If the types are not compatible, this formatter will
	 * produce bogus results.
	 * 
	 * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} dateLike a date-like object to format
	 * @return {string} the formatted version of the given date instance
	 */
	format: function (dateLike) {
		var thisZoneName = this.tz && this.tz.getId() || "local";

		var date = ilib.Date._dateToIlib(dateLike, thisZoneName);
		
		if (!date.getCalendar || !(date instanceof ilib.Date)) {
			throw "Wrong date type passed to ilib.DateFmt.format()";
		}
		
		var dateZoneName = date.timezone || "local";
		
		// convert to the time zone of this formatter before formatting
		if (dateZoneName !== thisZoneName || date.getCalendar() !== this.calName) {
			// console.log("Differing time zones date: " + dateZoneName + " and fmt: " + thisZoneName + ". Converting...");
			// this will recalculate the date components based on the new time zone
			// and/or convert a date in another calendar to the current calendar before formatting it
			var newDate = ilib.Date.newInstance({
				type: this.calName,
				timezone: thisZoneName,
				julianday: date.getJulianDay()
			});
			
			date = newDate;
		}
		return this._formatTemplate(date, this.templateArr);
	},
	
	/**
	 * Return a string that describes a date relative to the given 
	 * reference date. The string returned is text that for the locale that
	 * was specified when the formatter instance was constructed.<p>
	 * 
	 * The date can be in the future relative to the reference date or in
	 * the past, and the formatter will generate the appropriate string.<p>
	 * 
	 * The text used to describe the relative reference depends on the length
	 * of time between the date and the reference. If the time was in the
	 * past, it will use the "ago" phrase, and in the future, it will use
	 * the "in" phrase. Examples:<p>
	 * 
	 * <ul>
	 * <li>within a minute: either "X seconds ago" or "in X seconds"
	 * <li>within an hour: either "X minutes ago" or "in X minutes"
	 * <li>within a day: either "X hours ago" or "in X hours"
	 * <li>within 2 weeks: either "X days ago" or "in X days"
	 * <li>within 12 weeks (~3 months): either "X weeks ago" or "in X weeks"
	 * <li>within two years: either "X months ago" or "in X months"
	 * <li>longer than 2 years: "X years ago" or "in X years"
	 * </ul>
	 * 
	 * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} reference a date that the date parameter should be relative to
	 * @param {Date|Number|String|ilib.Date|ilib.JulianDay|null|undefined} date a date being formatted
	 * @throws "Wrong calendar type" when the start or end dates are not the same
	 * calendar type as the formatter itself
	 * @return {string} the formatted relative date
	 */
	formatRelative: function(reference, date) {
		reference = ilib.Date._dateToIlib(reference);
		date = ilib.Date._dateToIlib(date);
		
		var referenceRd, dateRd, fmt, time, diff, num;
		
		if (typeof(reference) !== 'object' || !reference.getCalendar || reference.getCalendar() !== this.calName ||
			typeof(date) !== 'object' || !date.getCalendar || date.getCalendar() !== this.calName) {
			throw "Wrong calendar type";
		}
		
		referenceRd = reference.getRataDie();
		dateRd = date.getRataDie();
		
		if (dateRd < referenceRd) {
			diff = referenceRd - dateRd;
			fmt = this.sysres.getString("{duration} ago");
		} else {
			diff = dateRd - referenceRd;
			fmt = this.sysres.getString("in {duration}");
		}
		
		if (diff < 0.000694444) {
			num = Math.round(diff * 86400);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}s");
					break;
				case 'm':
					time = this.sysres.getString("1#1 se|#{num} sec");
					break;
				case 'l':
					time = this.sysres.getString("1#1 sec|#{num} sec");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 second|#{num} seconds");
					break;
			}
		} else if (diff < 0.041666667) {
			num = Math.round(diff * 1440);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}m", "durationShortMinutes");
					break;
				case 'm':
					time = this.sysres.getString("1#1 mi|#{num} min");
					break;
				case 'l':
					time = this.sysres.getString("1#1 min|#{num} min");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 minute|#{num} minutes");
					break;
			}
		} else if (diff < 1) {
			num = Math.round(diff * 24);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}h");
					break;
				case 'm':
					time = this.sysres.getString("1#1 hr|#{num} hrs", "durationMediumHours");
					break;
				case 'l':
					time = this.sysres.getString("1#1 hr|#{num} hrs");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 hour|#{num} hours");
					break;
			}
		} else if (diff < 14) {
			num = Math.round(diff);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}d");
					break;
				case 'm':
					time = this.sysres.getString("1#1 dy|#{num} dys");
					break;
				case 'l':
					time = this.sysres.getString("1#1 day|#{num} days", "durationLongDays");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 day|#{num} days");
					break;
			}
		} else if (diff < 84) {
			num = Math.round(diff/7);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}w");
					break;
				case 'm':
					time = this.sysres.getString("1#1 wk|#{num} wks", "durationMediumWeeks");
					break;
				case 'l':
					time = this.sysres.getString("1#1 wk|#{num} wks");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 week|#{num} weeks");
					break;
			}
		} else if (diff < 730) {
			num = Math.round(diff/30.4);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}m", "durationShortMonths");
					break;
				case 'm':
					time = this.sysres.getString("1#1 mo|#{num} mos");
					break;
				case 'l':
					time = this.sysres.getString("1#1 mon|#{num} mons");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 month|#{num} months");
					break;
			}
		} else {
			num = Math.round(diff/365);
			switch (this.length) {
				case 's':
					time = this.sysres.getString("#{num}y");
					break;
				case 'm':
					time = this.sysres.getString("1#1 yr|#{num} yrs", "durationMediumYears");
					break;
				case 'l':
					time = this.sysres.getString("1#1 yr|#{num} yrs");
					break;
				default:
				case 'f':
					time = this.sysres.getString("1#1 year|#{num} years");
					break;
			}
		}
		return fmt.format({duration: time.formatChoice(num, {num: num})});
	}
};

/*
 * datefmt.js - Date formatter definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
date.js 
strings.js 
calendar.js
localeinfo.js
timezone.js
datefmt.js
calendar/gregorian.js
util/jsutils.js
*/

// !data dateformats sysres

/**
 * @class
 * Create a new date range formatter instance. The date range formatter is immutable once
 * it is created, but can format as many different date ranges as needed with the same
 * options. Create different date range formatter instances for different purposes
 * and then keep them cached for use later if you have more than one range to
 * format.<p>
 * 
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when formatting the date/times in the range. If the 
 * locale is not specified, then the default locale of the app or web page will be used.
 * 
 * <li><i>calendar</i> - the type of calendar to use for this format. The value should
 * be a sting containing the name of the calendar. Currently, the supported
 * types are "gregorian", "julian", "arabic", "hebrew", or "chinese". If the
 * calendar is not specified, then the default calendar for the locale is used. When the
 * calendar type is specified, then the format method must be called with an instance of
 * the appropriate date type. (eg. Gregorian calendar means that the format method must 
 * be called with a GregDate instance.)
 *  
 * <li><i>timezone</i> - time zone to use when formatting times. This may be a time zone
 * instance or a time zone specifier string in RFC 822 format. If not specified, the
 * default time zone for the locale is used.
 * 
 * <li><i>length</i> - Specify the length of the format to use as a string. The length 
 * is the approximate size of the formatted string.
 * 
 * <ul>
 * <li><i>short</i> - use a short representation of the time. This is the most compact format possible for the locale.
 * <li><i>medium</i> - use a medium length representation of the time. This is a slightly longer format.
 * <li><i>long</i> - use a long representation of the time. This is a fully specified format, but some of the textual 
 * components may still be abbreviated. (eg. "Tue" instead of "Tuesday")
 * <li><i>full</i> - use a full representation of the time. This is a fully specified format where all the textual 
 * components are spelled out completely.
 * </ul>
 * 
 * eg. The "short" format for an en_US range may be "MM/yy - MM/yy", whereas the long format might be 
 * "MMM, yyyy - MMM, yyyy". In the long format, the month name is textual instead of numeric 
 * and is longer, the year is 4 digits instead of 2, and the format contains slightly more 
 * spaces and formatting characters.<p>
 * 
 * Note that the length parameter does not specify which components are to be formatted. The
 * components that are formatted depend on the length of time in the range.
 * 
 * <li><i>clock</i> - specify that formatted times should use a 12 or 24 hour clock if the
 * format happens to include times. Valid values are "12" and "24".<p>
 * 
 * In some locales, both clocks are used. For example, in en_US, the general populace uses
 * a 12 hour clock with am/pm, but in the US military or in nautical or aeronautical or 
 * scientific writing, it is more common to use a 24 hour clock. This property allows you to
 * construct a formatter that overrides the default for the locale.<p>
 * 
 * If this property is not specified, the default is to use the most widely used convention
 * for the locale.
 * <li>onLoad - a callback function to call when the date range format object is fully 
 * loaded. When the onLoad option is given, the DateRngFmt object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * <p>
 * 
 * Depends directive: !depends daterangefmt.js
 * 
 * @constructor
 * @param {Object} options options governing the way this date range formatter instance works
 */
ilib.DateRngFmt = function(options) {
	var sync = true;
	var loadParams = undefined;
	this.locale = new ilib.Locale();
	this.length = "s";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.calendar) {
			this.calName = options.calendar;
		}
		
		if (options.length) {
			if (options.length === 'short' ||
				options.length === 'medium' ||
				options.length === 'long' ||
				options.length === 'full') {
				// only use the first char to save space in the json files
				this.length = options.length.charAt(0);
			}
		}
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		loadParams = options.loadParams;
	}
	
	var opts = {};
	ilib.shallowCopy(options, opts);
	opts.sync = sync;
	opts.loadParams = loadParams;
	
	/**
	 * @private
	 */
	opts.onLoad = ilib.bind(this, function (fmt) {
		this.dateFmt = fmt;
		if (fmt) {
			this.locinfo = this.dateFmt.locinfo;

			// get the default calendar name from the locale, and if the locale doesn't define
			// one, use the hard-coded gregorian as the last resort
			this.calName = this.calName || this.locinfo.getCalendar() || "gregorian";
			this.cal = ilib.Cal.newInstance({
				type: this.calName
			});
			if (!this.cal) {
				this.cal = new ilib.Cal.Gregorian();
			}
			
			this.timeTemplate = this.dateFmt._getFormat(this.dateFmt.formats.time[this.dateFmt.clock], this.dateFmt.timeComponents, this.length) || "hh:mm";
			this.timeTemplateArr = this.dateFmt._tokenize(this.timeTemplate);
			
			if (options && typeof(options.onLoad) === 'function') {
				options.onLoad(this);
			}
		}
	});

	// delegate a bunch of the formatting to this formatter
	new ilib.DateFmt(opts);
};

ilib.DateRngFmt.prototype = {
	/**
	 * Return the locale used with this formatter instance.
	 * @return {ilib.Locale} the ilib.Locale instance for this formatter
	 */
	getLocale: function() {
		return this.locale;
	},
	
	/**
	 * Return the name of the calendar used to format date/times for this
	 * formatter instance.
	 * @return {string} the name of the calendar used by this formatter
	 */
	getCalendar: function () {
		return this.dateFmt.getCalendar();
	},
	
	/**
	 * Return the length used to format date/times in this formatter. This is either the
	 * value of the length option to the constructor, or the default value.
	 * 
	 * @return {string} the length of formats this formatter returns
	 */
	getLength: function () {
		return ilib.DateFmt.lenmap[this.length] || "";
	},
	
	/**
	 * Return the time zone used to format date/times for this formatter
	 * instance.
	 * @return {ilib.TimeZone} a string naming the time zone
	 */
	getTimeZone: function () {
		return this.dateFmt.getTimeZone();
	},
	
	/**
	 * Return the clock option set in the constructor. If the clock option was
	 * not given, the default from the locale is returned instead.
	 * @return {string} "12" or "24" depending on whether this formatter uses
	 * the 12-hour or 24-hour clock
	 */
	getClock: function () {
		return this.dateFmt.getClock();
	},
	
	/**
	 * Format a date/time range according to the settings of the current
	 * formatter. The range is specified as being from the "start" date until
	 * the "end" date. <p>
	 * 
	 * The template that the date/time range uses depends on the
	 * length of time between the dates, on the premise that a long date range
	 * which is too specific is not useful. For example, when giving
	 * the dates of the 100 Years War, in most situations it would be more 
	 * appropriate to format the range as "1337 - 1453" than to format it as 
	 * "10:37am November 9, 1337 - 4:37pm July 17, 1453", as the latter format 
	 * is much too specific given the length of time that the range represents.
	 * If a very specific, but long, date range really is needed, the caller 
	 * should format two specific dates separately and put them 
	 * together as you might with other normal strings.<p>
	 * 
	 * The format used for a date range contains the following date components,
	 * where the order of those components is rearranged and the component values 
	 * are translated according to each locale:
	 * 
	 * <ul>
	 * <li>within 3 days: the times of day, dates, months, and years
	 * <li>within 730 days (2 years): the dates, months, and years
	 * <li>within 3650 days (10 years): the months and years
	 * <li>longer than 10 years: the years only 
	 * </ul>
	 * 
	 * In general, if any of the date components share a value between the
	 * start and end date, that component is only given once. For example,
	 * if the range is from November 15, 2011 to November 26, 2011, the 
	 * start and end dates both share the same month and year. The 
	 * range would then be formatted as "November 15-26, 2011". <p>
	 * 
	 * If you want to format a length of time instead of a particular range of
	 * time (for example, the length of an event rather than the specific start time
	 * and end time of that event), then use a duration formatter instance 
	 * (ilib.DurFmt) instead. The formatRange method will make sure that each component 
	 * of the date/time is within the normal range for that component. For example, 
	 * the minutes will always be between 0 and 59, no matter what is specified in 
	 * the date to format, because that is the normal range for minutes. A duration 
	 * format will allow the number of minutes to exceed 59. For example, if you 
	 * were displaying the length of a movie that is 198 minutes long, the minutes
	 * component of a duration could be 198.<p>
	 * 
	 * @param {ilib.Date} start the starting date/time of the range. This must be of 
	 * the same calendar type as the formatter itself. 
	 * @param {ilib.Date} end the ending date/time of the range. This must be of the 
	 * same calendar type as the formatter itself.
	 * @throws "Wrong calendar type" when the start or end dates are not the same
	 * calendar type as the formatter itself
	 * @return {string} a date range formatted for the locale
	 */
	format: function (start, end) {
		var startRd, endRd, fmt = "", yearTemplate, monthTemplate, dayTemplate;
		
		if (typeof(start) !== 'object' || !start.getCalendar || start.getCalendar() !== this.calName ||
			typeof(end) !== 'object' || !end.getCalendar || end.getCalendar() !== this.calName) {
			throw "Wrong calendar type";
		}
		
		startRd = start.getRataDie();
		endRd = end.getRataDie();
		
		// 
		// legend:
		// c00 - difference is less than 3 days. Year, month, and date are same, but time is different
		// c01 - difference is less than 3 days. Year and month are same but date and time are different
		// c02 - difference is less than 3 days. Year is same but month, date, and time are different. (ie. it straddles a month boundary)
		// c03 - difference is less than 3 days. Year, month, date, and time are all different. (ie. it straddles a year boundary)
		// c10 - difference is less than 2 years. Year and month are the same, but date is different.
		// c11 - difference is less than 2 years. Year is the same, but month, date, and time are different.
		// c12 - difference is less than 2 years. All fields are different. (ie. straddles a year boundary)
		// c20 - difference is less than 10 years. All fields are different.
		// c30 - difference is more than 10 years. All fields are different.
		//
		
		if (endRd - startRd < 3) {
			if (start.year === end.year) {
				if (start.month === end.month) {
					if (start.day === end.day) {
						fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c00", this.length));
					} else {
						fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c01", this.length));
					}
				} else {
					fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c02", this.length));
				}
			} else {
				fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c03", this.length));
			}
		} else if (endRd - startRd < 730) {
			if (start.year === end.year) {
				if (start.month === end.month) {
					fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c10", this.length));
				} else {
					fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c11", this.length));
				}
			} else {
				fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c12", this.length));
			}
		} else if (endRd - startRd < 3650) {
			fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c20", this.length));
		} else {
			fmt = new ilib.String(this.dateFmt._getFormat(this.dateFmt.formats.range, "c30", this.length));
		}

		yearTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, "y", this.length) || "yyyy");
		monthTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, "m", this.length) || "MM");
		dayTemplate = this.dateFmt._tokenize(this.dateFmt._getFormat(this.dateFmt.formats.date, "d", this.length) || "dd");
		
		/*
		console.log("fmt is " + fmt.toString());
		console.log("year template is " + yearTemplate);
		console.log("month template is " + monthTemplate);
		console.log("day template is " + dayTemplate);
		*/
		
		return fmt.format({
			sy: this.dateFmt._formatTemplate(start, yearTemplate),
			sm: this.dateFmt._formatTemplate(start, monthTemplate),
			sd: this.dateFmt._formatTemplate(start, dayTemplate),
			st: this.dateFmt._formatTemplate(start, this.timeTemplateArr),
			ey: this.dateFmt._formatTemplate(end, yearTemplate),
			em: this.dateFmt._formatTemplate(end, monthTemplate),
			ed: this.dateFmt._formatTemplate(end, dayTemplate),
			et: this.dateFmt._formatTemplate(end, this.timeTemplateArr)
		});
	}
};

/*
 * hebrew.js - Represent a Hebrew calendar object.
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js util/utils.js */

/**
 * @class
 * Construct a new Hebrew calendar object. This class encodes information about
 * the Hebrew (Jewish) calendar. The Hebrew calendar is a tabular hebrew 
 * calendar where the dates are calculated by arithmetic rules. This differs from 
 * the religious Hebrew calendar which is used to mark the beginning of particular 
 * holidays. The religious calendar depends on the first sighting of the new 
 * crescent moon to determine the first day of the new month. Because humans and 
 * weather are both involved, the actual time of sighting varies, so it is not 
 * really possible to precalculate the religious calendar. Certain groups, such 
 * as the Hebrew Society of North America, decreed in in 2007 that they will use
 * a calendar based on calculations rather than observations to determine the 
 * beginning of lunar months, and therefore the dates of holidays.<p>
 * 
 * Depends directive: !depends hebrew.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.Hebrew = function() {
	this.type = "hebrew";
};


/**
 * Return the number of days elapsed in the Hebrew calendar before the
 * given year starts.
 * @private
 * @param {number} year the year for which the number of days is sought
 * @return {number} the number of days elapsed in the Hebrew calendar before the
 * given year starts
 */
ilib.Cal.Hebrew.elapsedDays = function(year) {
	var months = Math.floor(((235*year) - 234)/19);
	var parts = 204 + 793 * ilib.mod(months, 1080);
	var hours = 11 + 12 * months + 793 * Math.floor(months/1080) + 
		Math.floor(parts/1080);
	var days = 29 * months + Math.floor(hours/24);
	return (ilib.mod(3 * (days + 1), 7) < 3) ? days + 1 : days;
};

/**
 * Return the number of days that the New Year's (Rosh HaShanah) in the Hebrew 
 * calendar will be corrected for the given year. Corrections are caused because New 
 * Year's is not allowed to start on certain days of the week. To deal with 
 * it, the start of the new year is corrected for the next year by adding a 
 * day to the 8th month (Heshvan) and/or the 9th month (Kislev) in the current
 * year to make them 30 days long instead of 29.
 * 
 * @private
 * @param {number} year the year for which the correction is sought
 * @param {number} elapsed number of days elapsed up to this year
 * @return {number} the number of days correction in the current year to make sure
 * Rosh HaShanah does not fall on undesirable days of the week
 */
ilib.Cal.Hebrew.newYearsCorrection = function(year, elapsed) {
	var lastYear = ilib.Cal.Hebrew.elapsedDays(year-1),
		thisYear = elapsed,
		nextYear = ilib.Cal.Hebrew.elapsedDays(year+1);
	
	return (nextYear - thisYear) == 356 ? 2 : ((thisYear - lastYear) == 382 ? 1 : 0);
};

/**
 * Return the rata die date of the new year for the given hebrew year.
 * @private
 * @param {number} year the year for which the new year is needed
 * @return {number} the rata die date of the new year
 */
ilib.Cal.Hebrew.newYear = function(year) {
	var elapsed = ilib.Cal.Hebrew.elapsedDays(year); 
	
	return elapsed + ilib.Cal.Hebrew.newYearsCorrection(year, elapsed);
};

/**
 * Return the number of days in the given year. Years contain a variable number of
 * days because the date of Rosh HaShanah (New Year's) changes so that it doesn't
 * fall on particular days of the week. Days are added to the months of Heshvan
 * and/or Kislev in the previous year in order to prevent the current year's New
 * Year from being on Sunday, Wednesday, or Friday.
 * 
 * @param {number} year the year for which the length is sought
 * @return {number} number of days in the given year
 */
ilib.Cal.Hebrew.daysInYear = function(year) {
	return ilib.Cal.Hebrew.newYear(year+1) - ilib.Cal.Hebrew.newYear(year);
};

/**
 * Return true if the given year contains a long month of Heshvan. That is,
 * it is 30 days instead of 29.
 * 
 * @private
 * @param {number} year the year in which that month is questioned
 * @return {boolean} true if the given year contains a long month of Heshvan
 */
ilib.Cal.Hebrew.longHeshvan = function(year) {
	return ilib.mod(ilib.Cal.Hebrew.daysInYear(year), 10) === 5;
};

/**
 * Return true if the given year contains a long month of Kislev. That is,
 * it is 30 days instead of 29.
 * 
 * @private
 * @param {number} year the year in which that month is questioned
 * @return {boolean} true if the given year contains a short month of Kislev
 */
ilib.Cal.Hebrew.longKislev = function(year) {
	return ilib.mod(ilib.Cal.Hebrew.daysInYear(year), 10) !== 3;
};

/**
 * Return the date of the last day of the month for the given year. The date of
 * the last day of the month is variable because a number of months gain an extra 
 * day in leap years, and it is variable which months gain a day for each leap 
 * year and which do not.
 * 
 * @param {number} month the month for which the number of days is sought
 * @param {number} year the year in which that month is
 * @return {number} the number of days in the given month and year
 */
ilib.Cal.Hebrew.prototype.lastDayOfMonth = function(month, year) {
	switch (month) {
		case 2: 
		case 4: 
		case 6: 
		case 10: 
			return 29;
		case 13:
			return this.isLeapYear(year) ? 29 : 0;
		case 8:
			return ilib.Cal.Hebrew.longHeshvan(year) ? 30 : 29;
		case 9:
			return ilib.Cal.Hebrew.longKislev(year) ? 30 : 29;
		case 12:
		case 1:
		case 3:
		case 5:
		case 7:
		case 11:
			return 30;
		default:
			return 0;
	}
};

/**
 * Return the number of months in the given year. The number of months in a year varies
 * for luni-solar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=first month, 2=second month, etc.
 * 
 * @param {number} year a year for which the number of months is sought
 */
ilib.Cal.Hebrew.prototype.getNumMonths = function(year) {
	return this.isLeapYear(year) ? 13 : 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of leap years.
 *
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @returns {number} the number of days within the given month in the given year, or
 * 0 for an invalid month in the year
 */
ilib.Cal.Hebrew.prototype.getMonLength = function(month, year) {
	if (month < 1 || month > 13 || (month == 13 && !this.isLeapYear(year))) {
		return 0;
	}
	return this.lastDayOfMonth(month, year);
};

/**
 * Return true if the given year is a leap year in the Hebrew calendar.
 * The year parameter may be given as a number, or as a HebrewDate object.
 * @param {number|Object} year the year for which the leap year information is being sought
 * @returns {boolean} true if the given year is a leap year
 */
ilib.Cal.Hebrew.prototype.isLeapYear = function(year) {
	var y = (typeof(year) == 'number') ? year : year.year;
	return (ilib.mod(1 + 7 * y, 19) < 7);
};

/**
 * Return the type of this calendar.
 * 
 * @returns {string} the name of the type of this calendar 
 */
ilib.Cal.Hebrew.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @returns {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.Hebrew.prototype.newDateInstance = function (options) {
	return new ilib.Date.HebrewDate(options);
};

/*register this calendar for the factory method */
ilib.Cal._constructors["hebrew"] = ilib.Cal.Hebrew;

/*
 * hebrewdate.js - Represent a date in the Hebrew calendar
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/hebrew.js
calendar/ratadie.js
util/utils.js
julianday.js 
*/

/**
 * @class
 * Construct a new Hebrew RD date number object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify 
 * the parts or specify the minutes, seconds, and milliseconds, but not both. 
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Hebrew date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above are present, then the RD is calculate based on 
 * the current date at the time of instantiation. <p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends hebrewdate.js
 * 
 * @private
 * @constructor
 * @extends ilib.Date.RataDie
 * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew RD date
 */
ilib.Date.HebrewRataDie = function(params) {
	this.cal = params && params.cal || new ilib.Cal.Hebrew();
	this.rd = undefined;
	ilib.Date.RataDie.call(this, params);
};

ilib.Date.HebrewRataDie.prototype = new ilib.Date.RataDie();
ilib.Date.HebrewRataDie.prototype.parent = ilib.Date.RataDie;
ilib.Date.HebrewRataDie.prototype.constructor = ilib.Date.HebrewRataDie;

/**
 * The difference between a zero Julian day and the first day of the Hebrew 
 * calendar: sunset on Monday, Tishri 1, 1 = September 7, 3760 BC Gregorian = JD 347997.25
 * @private
 * @const
 * @type number
 */
ilib.Date.HebrewRataDie.prototype.epoch = 347997.25;

/**
 * Calculate the Rata Die (fixed day) number of the given date from the
 * date components.
 * 
 * @private
 * @param {Object} date the date components to calculate the RD from
 */
ilib.Date.HebrewRataDie.prototype._setDateComponents = function(date) {
	var elapsed = ilib.Cal.Hebrew.elapsedDays(date.year);
	var days = elapsed +
		ilib.Cal.Hebrew.newYearsCorrection(date.year, elapsed) +
		date.day - 1;
	var sum = 0, table;
	
	//console.log("getRataDie: converting " +  JSON.stringify(date));
	//console.log("getRataDie: days is " +  days);
	//console.log("getRataDie: new years correction is " +  ilib.Cal.Hebrew.newYearsCorrection(date.year, elapsed));
	
	table = this.cal.isLeapYear(date.year) ? 
				ilib.Date.HebrewDate.cumMonthLengthsLeap :
				ilib.Date.HebrewDate.cumMonthLengths;
	sum = table[date.month-1];
	
	// gets cumulative without correction, so now add in the correction
	if ((date.month < 7 || date.month > 8) && ilib.Cal.Hebrew.longHeshvan(date.year)) {
		sum++;
	}
	if ((date.month < 7 || date.month > 9) && ilib.Cal.Hebrew.longKislev(date.year)) {
		sum++;
	}
	// console.log("getRataDie: cum days is now " +  sum);
	
	days += sum;
	
	// the date starts at sunset, which we take as 18:00, so the hours from
	// midnight to 18:00 are on the current Gregorian day, and the hours from
	// 18:00 to midnight are on the previous Gregorian day. So to calculate the 
	// number of hours into the current day that this time represents, we have
	// to count from 18:00 to midnight first, and add in 6 hours if the time is
	// less than 18:00
	var minute, second, millisecond;
	
	if (typeof(date.parts) !== 'undefined') {
		// The parts (halaqim) of the hour. This can be a number from 0 to 1079.
		var parts = parseInt(date.parts, 10);
		var seconds = parseInt(parts, 10) * 3.333333333333;
		minute = Math.floor(seconds / 60);
		seconds -= minute * 60;
		second = Math.floor(seconds);
		millisecond = (seconds - second);	
	} else {
		minute = parseInt(date.minute, 10) || 0;
		second = parseInt(date.second, 10) || 0;
		millisecond = parseInt(date.millisecond, 10) || 0;
	}
		
	var time;
	if (date.hour >= 18) {
		time = ((date.hour - 18 || 0) * 3600000 +
			(minute || 0) * 60000 +
			(second || 0) * 1000 +
			(millisecond || 0)) / 
			86400000;
	} else {
		time = 0.25 +	// 6 hours from 18:00 to midnight on the previous gregorian day
				((date.hour || 0) * 3600000 +
				(minute || 0) * 60000 +
				(second || 0) * 1000 +
				(millisecond || 0)) / 
				86400000;
	}
	
	//console.log("getRataDie: rd is " +  (days + time));
	this.rd = days + time;
};
	
/**
 * Return the rd number of the particular day of the week on or before the 
 * given rd. eg. The Sunday on or before the given rd.
 * @private
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the current date
 * @return {number} the rd of the day of the week
 */
ilib.Date.HebrewRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {
	return rd - ilib.mod(Math.floor(rd) - dayOfWeek + 1, 7);
};

/**
 * @class
 * Construct a new civil Hebrew date object. The constructor can be called
 * with a params object that can contain the following properties:<p>
 * 
 * <ul>
 * <li><i>julianday</i> - the Julian Day to set into this date
 * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year
 * <li><i>month</i> - 1 to 12, where 1 means Nisan, 2 means Iyyar, etc.
 * <li><i>day</i> - 1 to 30
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * <li><i>parts</i> - 0 to 1079. Specify the halaqim parts of an hour. Either specify 
 * the parts or specify the minutes, seconds, and milliseconds, but not both. 
 * <li><i>minute</i> - 0 to 59
 * <li><i>second</i> - 0 to 59
 * <li><i>millisecond</i> - 0 to 999
 * <li><i>locale</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this julian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * <li><i>timezone</i> - the time zone of this instance. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale. 
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 * 
 * If called with another Hebrew date argument, the date components of the given
 * date are copied into the current one.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>julianday</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * Depends directive: !depends hebrewdate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Hebrew date
 */
ilib.Date.HebrewDate = function(params) {
	this.cal = new ilib.Cal.Hebrew();
	
	if (params) {
		if (params.timezone) {
			this.timezone = params.timezone;
		}
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			if (!this.timezone) {
				var li = new ilib.LocaleInfo(this.locale);
				this.timezone = li.getTimeZone(); 
			}
		}

		if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond || params.parts ) {
			/**
			 * Year in the Hebrew calendar.
			 * @type number
			 */
			this.year = parseInt(params.year, 10) || 0;

			/**
			 * The month number, ranging from 1 to 13.
			 * @type number
			 */
			this.month = parseInt(params.month, 10) || 1;

			/**
			 * The day of the month. This ranges from 1 to 30.
			 * @type number
			 */
			this.day = parseInt(params.day, 10) || 1;
			
			/**
			 * The hour of the day. This can be a number from 0 to 23, as times are
			 * stored unambiguously in the 24-hour clock.
			 * @type number
			 */
			this.hour = parseInt(params.hour, 10) || 0;

			if (typeof(params.parts) !== 'undefined') {
				/**
				 * The parts (halaqim) of the hour. This can be a number from 0 to 1079.
				 * @type number
				 */
				this.parts = parseInt(params.parts, 10);
				var seconds = parseInt(params.parts, 10) * 3.333333333333;
				this.minute = Math.floor(seconds / 60);
				seconds -= this.minute * 60;
				this.second = Math.floor(seconds);
				this.millisecond = (seconds - this.second);	
			} else {
				/**
				 * The minute of the hours. Ranges from 0 to 59.
				 * @type number
				 */
				this.minute = parseInt(params.minute, 10) || 0;
	
				/**
				 * The second of the minute. Ranges from 0 to 59.
				 * @type number
				 */
				this.second = parseInt(params.second, 10) || 0;
	
				/**
				 * The millisecond of the second. Ranges from 0 to 999.
				 * @type number
				 */
				this.millisecond = parseInt(params.millisecond, 10) || 0;
			}
				
			/**
			 * The day of the year. Ranges from 1 to 383.
			 * @type number
			 */
			this.dayOfYear = parseInt(params.dayOfYear, 10);
			
			if (typeof(params.dst) === 'boolean') {
				this.dst = params.dst;
			}
			
			this.rd = this.newRd(this);
			
			// add the time zone offset to the rd to convert to UTC
			if (!this.tz) {
				this.tz = new ilib.TimeZone({id: this.timezone});
			}
			// getOffsetMillis requires that this.year, this.rd, and this.dst 
			// are set in order to figure out which time zone rules apply and 
			// what the offset is at that point in the year
			this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
			if (this.offset !== 0) {
				this.rd = this.newRd({
					rd: this.rd.getRataDie() - this.offset
				});
			}
		}
	} 
	
	if (!this.rd) {
		this.rd = this.newRd(params);
		this._calcDateComponents();
	}
};

ilib.Date.HebrewDate.prototype = new ilib.Date();
ilib.Date.HebrewDate.prototype.parent = ilib.Date;
ilib.Date.HebrewDate.prototype.constructor = ilib.Date.HebrewDate;

/**
 * the cumulative lengths of each month for a non-leap year, without new years corrections
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Date.HebrewDate.cumMonthLengths = [
	176,  /* Nisan */
	206,  /* Iyyar */
	235,  /* Sivan */
	265,  /* Tammuz */
	294,  /* Av */
	324,  /* Elul */
	0,    /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	30,   /* Heshvan */
	59,   /* Kislev */
	88,   /* Teveth */
	117,  /* Shevat */
	147   /* Adar I */
];

/**
 * the cumulative lengths of each month for a non-leap year, without new years corrections,
 * that can be used in reverse to map days to months
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Date.HebrewDate.cumMonthLengthsReverse = [
//  [days, monthnumber],                                                
	[0,   7],  /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	[30,  8],  /* Heshvan */
	[59,  9],  /* Kislev */
	[88,  10], /* Teveth */
	[117, 11], /* Shevat */
	[147, 12], /* Adar I */
	[176, 1],  /* Nisan */
	[206, 2],  /* Iyyar */
	[235, 3],  /* Sivan */
	[265, 4],  /* Tammuz */
	[294, 5],  /* Av */
	[324, 6],  /* Elul */
	[354, 7]   /* end of year sentinel value */
];

/**
 * the cumulative lengths of each month for a leap year, without new years corrections 
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Date.HebrewDate.cumMonthLengthsLeap = [
	206,  /* Nisan */
	236,  /* Iyyar */
	265,  /* Sivan */
	295,  /* Tammuz */
	324,  /* Av */
	354,  /* Elul */
	0,    /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	30,   /* Heshvan */
	59,   /* Kislev */
	88,   /* Teveth */
	117,  /* Shevat */
	147,  /* Adar I */
	177   /* Adar II */
];

/**
 * the cumulative lengths of each month for a leap year, without new years corrections
 * that can be used in reverse to map days to months 
 * 
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Date.HebrewDate.cumMonthLengthsLeapReverse = [
//  [days, monthnumber],                                                
	[0,   7],  /* Tishri - Jewish New Year (Rosh HaShanah) starts in month 7 */
	[30,  8],  /* Heshvan */
	[59,  9],  /* Kislev */
	[88,  10], /* Teveth */
	[117, 11], /* Shevat */
	[147, 12], /* Adar I */
	[177, 13], /* Adar II */
	[206, 1],  /* Nisan */
	[236, 2],  /* Iyyar */
	[265, 3],  /* Sivan */
	[295, 4],  /* Tammuz */
	[324, 5],  /* Av */
	[354, 6],  /* Elul */
	[384, 7]   /* end of year sentinel value */
];

/**
 * Number of days difference between RD 0 of the Hebrew calendar 
 * (Jan 1, 1 Gregorian = JD 1721057.5) and RD 0 of the Hebrew calendar
 * (September 7, -3760 Gregorian = JD 347997.25)
 * @private
 * @const
 * @type number
 */
ilib.Date.HebrewDate.GregorianDiff = 1373060.25;

/**
 * Return a new RD for this date type using the given params.
 * @private
 * @param {Object=} params the parameters used to create this rata die instance
 * @returns {ilib.Date.RataDie} the new RD instance for the given params
 */
ilib.Date.HebrewDate.prototype.newRd = function (params) {
	return new ilib.Date.HebrewRataDie(params);
};

/**
 * Return the year for the given RD
 * @protected
 * @param {number} rd RD to calculate from 
 * @returns {number} the year for the RD
 */
ilib.Date.HebrewDate.prototype._calcYear = function(rd) {
	var year, approximation, nextNewYear;
	
	// divide by the average number of days per year in the Hebrew calendar
	// to approximate the year, then tweak it to get the real year
	approximation = Math.floor(rd / 365.246822206) + 1;
	
	// console.log("HebrewDate._calcYear: approx is " + approximation);
	
	// search forward from approximation-1 for the year that actually contains this rd
	year = approximation;
	nextNewYear = ilib.Cal.Hebrew.newYear(year);
	while (rd >= nextNewYear) {
		year++;
		nextNewYear = ilib.Cal.Hebrew.newYear(year);
	}
	return year - 1;
};

/**
 * Calculate date components for the given RD date.
 * @protected
 */
ilib.Date.HebrewDate.prototype._calcDateComponents = function () {
	var remainder,
		i,
		table,
		target,
		rd = this.rd.getRataDie();
	
	// console.log("HebrewDate.calcComponents: calculating for rd " + rd);

	if (typeof(this.offset) === "undefined") {
		this.year = this._calcYear(rd);
		
		// now offset the RD by the time zone, then recalculate in case we were 
		// near the year boundary
		if (!this.tz) {
			this.tz = new ilib.TimeZone({id: this.timezone});
		}
		this.offset = this.tz.getOffsetMillis(this) / 86400000;
	}

	if (this.offset !== 0) {
		rd += this.offset;
		this.year = this._calcYear(rd);
	}
	
	// console.log("HebrewDate.calcComponents: year is " + this.year + " with starting rd " + thisNewYear);
	
	remainder = rd - ilib.Cal.Hebrew.newYear(this.year);
	// console.log("HebrewDate.calcComponents: remainder is " + remainder);

	// take out new years corrections so we get the right month when we look it up in the table
	if (remainder >= 59) {
		if (remainder >= 88) {
			if (ilib.Cal.Hebrew.longKislev(this.year)) {
				remainder--;
			}
		}
		if (ilib.Cal.Hebrew.longHeshvan(this.year)) {
			remainder--;
		}
	}
	
	// console.log("HebrewDate.calcComponents: after new years corrections, remainder is " + remainder);
	
	table = this.cal.isLeapYear(this.year) ? 
			ilib.Date.HebrewDate.cumMonthLengthsLeapReverse :
			ilib.Date.HebrewDate.cumMonthLengthsReverse;
	
	i = 0;
	target = Math.floor(remainder);
	while (i+1 < table.length && target >= table[i+1][0]) {
		i++;
	}
	
	this.month = table[i][1];
	// console.log("HebrewDate.calcComponents: remainder is " + remainder);
	remainder -= table[i][0];
	
	// console.log("HebrewDate.calcComponents: month is " + this.month + " and remainder is " + remainder);
	
	this.day = Math.floor(remainder);
	remainder -= this.day;
	this.day++; // days are 1-based
	
	// console.log("HebrewDate.calcComponents: day is " + this.day + " and remainder is " + remainder);

	// now convert to milliseconds for the rest of the calculation
	remainder = Math.round(remainder * 86400000);
	
	this.hour = Math.floor(remainder/3600000);
	remainder -= this.hour * 3600000;
	
	// the hours from 0 to 6 are actually 18:00 to midnight of the previous
	// gregorian day, so we have to adjust for that
	if (this.hour >= 6) {
		this.hour -= 6;
	} else {
		this.hour += 18;
	}
		
	this.minute = Math.floor(remainder/60000);
	remainder -= this.minute * 60000;
	
	this.second = Math.floor(remainder/1000);
	remainder -= this.second * 1000;
	
	this.millisecond = Math.floor(remainder);
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.HebrewDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
	return ilib.mod(rd+1, 7);
};

/**
 * Get the Halaqim (parts) of an hour. There are 1080 parts in an hour, which means
 * each part is 3.33333333 seconds long. This means the number returned may not
 * be an integer.
 * 
 * @return {number} the halaqim parts of the current hour
 */
ilib.Date.HebrewDate.prototype.getHalaqim = function() {
	if (this.parts < 0) {
		// convert to ms first, then to parts
		var h = this.minute * 60000 + this.second * 1000 + this.millisecond;
		this.parts = (h * 0.0003);
	}
	return this.parts;
};

/**
 * Return the rd number of the first Sunday of the given ISO year.
 * @protected
 * @return the rd of the first Sunday of the ISO year
 */
ilib.Date.HebrewDate.prototype.firstSunday = function (year) {
	var tishri1 = this.newRd({
		year: year,
		month: 7,
		day: 1,
		hour: 18,
		minute: 0,
		second: 0,
		millisecond: 0,
		cal: this.cal
	});
	var firstThu = this.newRd({
		rd: tishri1.onOrAfter(4),
		cal: this.cal
	});
	return firstThu.before(0);
};

/**
 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
 * 385, regardless of months or weeks, etc. That is, Tishri 1st is day 1, and 
 * Elul 29 is 385 for a leap year with a long Heshvan and long Kislev.
 * @return {number} the ordinal day of the year
 */
ilib.Date.HebrewDate.prototype.getDayOfYear = function() {
	var table = this.cal.isLeapYear(this.year) ? 
				ilib.Date.HebrewDate.cumMonthLengthsLeap : 
				ilib.Date.HebrewDate.cumMonthLengths;
	var days = table[this.month-1];
	if ((this.month < 7 || this.month > 8) && ilib.Cal.Hebrew.longHeshvan(this.year)) {
		days++;
	}
	if ((this.month < 7 || this.month > 9) && ilib.Cal.Hebrew.longKislev(this.year)) {
		days++;
	}

	return days + this.day;
};

/**
 * Return the ordinal number of the week within the month. The first week of a month is
 * the first one that contains 4 or more days in that month. If any days precede this
 * first week, they are marked as being in week 0. This function returns values from 0
 * through 6.<p>
 * 
 * The locale is a required parameter because different locales that use the same 
 * Hebrew calendar consider different days of the week to be the beginning of
 * the week. This can affect the week of the month in which some days are located.
 * 
 * @param {ilib.Locale|string} locale the locale or locale spec to use when figuring out 
 * the first day of the week
 * @return {number} the ordinal number of the week within the current month
 */
ilib.Date.HebrewDate.prototype.getWeekOfMonth = function(locale) {
	var li = new ilib.LocaleInfo(locale),
		first = this.newRd({
			year: this.year,
			month: this.month,
			day: 1,
			hour: 18,
			minute: 0,
			second: 0,
			millisecond: 0
		}),
		rd = this.rd.getRataDie(),
		weekStart = first.onOrAfter(li.getFirstDayOfWeek());
	
	if (weekStart - first.getRataDie() > 3) {
		// if the first week has 4 or more days in it of the current month, then consider
		// that week 1. Otherwise, it is week 0. To make it week 1, move the week start
		// one week earlier.
		weekStart -= 7;
	}
	return (rd < weekStart) ? 0 : Math.floor((rd - weekStart) / 7) + 1;
};

/**
 * Return the era for this date as a number. The value for the era for Hebrew 
 * calendars is -1 for "before the Hebrew era" and 1 for "the Hebrew era". 
 * Hebrew era dates are any date after Tishri 1, 1, which is the same as
 * September 7, 3760 BC in the Gregorian calendar. 
 * 
 * @return {number} 1 if this date is in the Hebrew era, -1 if it is before the 
 * Hebrew era 
 */
ilib.Date.HebrewDate.prototype.getEra = function() {
	return (this.year < 1) ? -1 : 1;
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.HebrewDate.prototype.getCalendar = function() {
	return "hebrew";
};

// register with the factory method
ilib.Date._constructors["hebrew"] = ilib.Date.HebrewDate;
/*
 * islamic.js - Represent a Islamic calendar object.
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js util/utils.js */

/**
 * @class
 * Construct a new Islamic calendar object. This class encodes information about
 * the civil Islamic calendar. The civil Islamic calendar is a tabular islamic 
 * calendar where the dates are calculated by arithmetic rules. This differs from 
 * the religious Islamic calendar which is used to mark the beginning of particular 
 * holidays. The religious calendar depends on the first sighting of the new 
 * crescent moon to determine the first day of the new month. Because humans and 
 * weather are both involved, the actual time of sighting varies, so it is not 
 * really possible to precalculate the religious calendar. Certain groups, such 
 * as the Islamic Society of North America, decreed in in 2007 that they will use
 * a calendar based on calculations rather than observations to determine the 
 * beginning of lunar months, and therefore the dates of holidays.<p>
 * 
 * Depends directive: !depends islamic.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.Islamic = function() {
	this.type = "islamic";
};

/**
 * the lengths of each month 
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Cal.Islamic.monthLengths = [
	30,  /* Muharram */
	29,  /* Saffar */
	30,  /* Rabi'I */
	29,  /* Rabi'II */
	30,  /* Jumada I */
	29,  /* Jumada II */
	30,  /* Rajab */
	29,  /* Sha'ban */
	30,  /* Ramadan */
	29,  /* Shawwal */
	30,  /* Dhu al-Qa'da */
	29   /* Dhu al-Hijja */
];


/**
 * Return the number of months in the given year. The number of months in a year varies
 * for luni-solar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=first month, 2=second month, etc.
 * 
 * @param {number} year a year for which the number of months is sought
 */
ilib.Cal.Islamic.prototype.getNumMonths = function(year) {
	return 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of things
 * like leap years.
 *
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @return {number} the number of days within the given month in the given year
 */
ilib.Cal.Islamic.prototype.getMonLength = function(month, year) {
	if (month !== 12) {
		return ilib.Cal.Islamic.monthLengths[month-1];
	} else {
		return this.isLeapYear(year) ? 30 : 29;
	}
};

/**
 * Return true if the given year is a leap year in the Islamic calendar.
 * The year parameter may be given as a number, or as a IslamicDate object.
 * @param {number} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.Islamic.prototype.isLeapYear = function(year) {
	return (ilib.mod((14 + 11 * year), 30) < 11);
};

/**
 * Return the type of this calendar.
 * 
 * @return {string} the name of the type of this calendar 
 */
ilib.Cal.Islamic.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.Islamic.prototype.newDateInstance = function (options) {
	return new ilib.Date.IslamicDate(options);
};

/*register this calendar for the factory method */
ilib.Cal._constructors["islamic"] = ilib.Cal.Islamic;

/*
 * util/search.js - Misc search utility routines
 * 
 * Copyright Â© 2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

/**
 * Binary search a sorted array for a particular target value.
 * If the exact value is not found, it returns the index of the smallest 
 * entry that is greater than the given target value.<p> 
 * 
 * The comparator
 * parameter is a function that knows how to compare elements of the 
 * array and the target. The function should return a value greater than 0
 * if the array element is greater than the target, a value less than 0 if
 * the array element is less than the target, and 0 if the array element 
 * and the target are equivalent.<p>
 * 
 * If the comparator function is not specified, this function assumes
 * the array and the target are numeric values and should be compared 
 * as such.<p>
 * 
 * Depends directive: !depends utils.js
 * 
 * @static
 * @param {*} target element being sought 
 * @param {Array} arr the array being searched
 * @param {?function(*,*)=} comparator a comparator that is appropriate for comparing two entries
 * in the array  
 * @return the index of the array into which the value would fit if 
 * inserted, or -1 if given array is not an array or the target is not 
 * a number
 */
ilib.bsearch = function(target, arr, comparator) {
	if (typeof(arr) === 'undefined' || !arr || typeof(target) === 'undefined') {
		return -1;
	}
	
	var high = arr.length - 1,
		low = 0,
		mid = 0,
		value,
		cmp = comparator || ilib.bsearch.numbers;
	
	while (low <= high) {
		mid = Math.floor((high+low)/2);
		value = cmp(arr[mid], target);
		if (value > 0) {
			high = mid - 1;
		} else if (value < 0) {
			low = mid + 1;
		} else {
			return mid;
		}
	}
	
	return low;
};

/**
 * Returns whether or not the given element is greater than, less than,
 * or equal to the given target.<p>
 * 
 * @private
 * @static
 * @param {number} element the element being tested
 * @param {number} target the target being sought
 */
ilib.bsearch.numbers = function(element, target) {
	return element - target;
};

/*
 * islamicdate.js - Represent a date in the Islamic calendar
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/islamic.js 
util/utils.js 
util/search.js
util/math.js
localeinfo.js
julianday.js
*/

/**
 * @class
 * Construct a new Islamic RD date number object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Islamic date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above are present, then the RD is calculate based on 
 * the current date at the time of instantiation. <p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends islamicdate.js
 * 
 * @private
 * @constructor
 * @extends ilib.Date.RataDie
 * @param {Object=} params parameters that govern the settings and behaviour of this Islamic RD date
 */
ilib.Date.IslamicRataDie = function(params) {
	this.cal = params && params.cal || new ilib.Cal.Islamic();
	this.rd = undefined;
	ilib.Date.RataDie.call(this, params);
};

ilib.Date.IslamicRataDie.prototype = new ilib.Date.RataDie();
ilib.Date.IslamicRataDie.prototype.parent = ilib.Date.RataDie;
ilib.Date.IslamicRataDie.prototype.constructor = ilib.Date.IslamicRataDie;

/**
 * The difference between a zero Julian day and the first Islamic date
 * of Friday, July 16, 622 CE Julian. 
 * @private
 * @const
 * @type number
 */
ilib.Date.IslamicRataDie.prototype.epoch = 1948439.5;

/**
 * Calculate the Rata Die (fixed day) number of the given date from the
 * date components.
 *
 * @protected
 * @param {Object} date the date components to calculate the RD from
 */
ilib.Date.IslamicRataDie.prototype._setDateComponents = function(date) {
	var days = (date.year - 1) * 354 +
		Math.ceil(29.5 * (date.month - 1)) +
		date.day +
		Math.floor((3 + 11 * date.year) / 30) - 1;
	var time = (date.hour * 3600000 +
		date.minute * 60000 +
		date.second * 1000 +
		date.millisecond) / 
		86400000; 
	
	//console.log("getRataDie: converting " +  JSON.stringify(date));
	//console.log("getRataDie: days is " +  days);
	//console.log("getRataDie: time is " +  time);
	//console.log("getRataDie: rd is " +  (days + time));

	this.rd = days + time;
};
	
/**
 * @class
 * Construct a new civil Islamic date object. The constructor can be called
 * with a params object that can contain the following properties:<p>
 * 
 * <ul>
 * <li><i>julianday</i> - the Julian Day to set into this date
 * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero year
 * <li><i>month</i> - 1 to 12, where 1 means Muharram, 2 means Saffar, etc.
 * <li><i>day</i> - 1 to 30
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * <li><i>minute</i> - 0 to 59
 * <li><i>second</i> - 0 to 59
 * <li><i>millisecond</i> - 0 to 999
 * <li><i>locale</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this julian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * <li><i>timezone</i> - the time zone of this instance. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale. 
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 * 
 * If called with another Islamic date argument, the date components of the given
 * date are copied into the current one.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>julianday</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * Depends directive: !depends islamicdate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Islamic date
 */
ilib.Date.IslamicDate = function(params) {
	this.cal = new ilib.Cal.Islamic();
	
	if (params) {
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			var li = new ilib.LocaleInfo(this.locale);
			this.timezone = li.getTimeZone(); 
		}
		if (params.timezone) {
			this.timezone = params.timezone;
		}
		
		if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond ) {
			/**
			 * Year in the Islamic calendar.
			 * @type number
			 */
			this.year = parseInt(params.year, 10) || 0;

			/**
			 * The month number, ranging from 1 to 12 (December).
			 * @type number
			 */
			this.month = parseInt(params.month, 10) || 1;

			/**
			 * The day of the month. This ranges from 1 to 30.
			 * @type number
			 */
			this.day = parseInt(params.day, 10) || 1;
			
			/**
			 * The hour of the day. This can be a number from 0 to 23, as times are
			 * stored unambiguously in the 24-hour clock.
			 * @type number
			 */
			this.hour = parseInt(params.hour, 10) || 0;

			/**
			 * The minute of the hours. Ranges from 0 to 59.
			 * @type number
			 */
			this.minute = parseInt(params.minute, 10) || 0;

			/**
			 * The second of the minute. Ranges from 0 to 59.
			 * @type number
			 */
			this.second = parseInt(params.second, 10) || 0;

			/**
			 * The millisecond of the second. Ranges from 0 to 999.
			 * @type number
			 */
			this.millisecond = parseInt(params.millisecond, 10) || 0;
			
			/**
			 * The day of the year. Ranges from 1 to 355.
			 * @type number
			 */
			this.dayOfYear = parseInt(params.dayOfYear, 10);

			if (typeof(params.dst) === 'boolean') {
				this.dst = params.dst;
			}
			
			this.rd = this.newRd(this);
			
			// add the time zone offset to the rd to convert to UTC
			if (!this.tz) {
				this.tz = new ilib.TimeZone({id: this.timezone});
			}
			// getOffsetMillis requires that this.year, this.rd, and this.dst 
			// are set in order to figure out which time zone rules apply and 
			// what the offset is at that point in the year
			this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
			if (this.offset !== 0) {
				this.rd = this.newRd({
					rd: this.rd.getRataDie() - this.offset
				});
			}
		}
	}

	if (!this.rd) {
		this.rd = this.newRd(params);
		this._calcDateComponents();
	}
};

ilib.Date.IslamicDate.prototype = new ilib.Date();
ilib.Date.IslamicDate.prototype.parent = ilib.Date;
ilib.Date.IslamicDate.prototype.constructor = ilib.Date.IslamicDate;

/**
 * the cumulative lengths of each month, for a non-leap year 
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Date.IslamicDate.cumMonthLengths = [
	0,  /* Muharram */
	30,  /* Saffar */
	59,  /* Rabi'I */
	89,  /* Rabi'II */
	118,  /* Jumada I */
	148,  /* Jumada II */
	177,  /* Rajab */
	207,  /* Sha'ban */
	236,  /* Ramadan */
	266,  /* Shawwal */
	295,  /* Dhu al-Qa'da */
	325,  /* Dhu al-Hijja */
	354
];

/**
 * Number of days difference between RD 0 of the Gregorian calendar and
 * RD 0 of the Islamic calendar. 
 * @private
 * @const
 * @type number
 */
ilib.Date.IslamicDate.GregorianDiff = 227015;

/**
 * Return a new RD for this date type using the given params.
 * @protected
 * @param {Object=} params the parameters used to create this rata die instance
 * @returns {ilib.Date.RataDie} the new RD instance for the given params
 */
ilib.Date.IslamicDate.prototype.newRd = function (params) {
	return new ilib.Date.IslamicRataDie(params);
};

/**
 * Return the year for the given RD
 * @protected
 * @param {number} rd RD to calculate from 
 * @returns {number} the year for the RD
 */
ilib.Date.IslamicDate.prototype._calcYear = function(rd) {
	return Math.floor((30 * rd + 10646) / 10631);
};

/**
 * Calculate date components for the given RD date.
 * @protected
 */
ilib.Date.IslamicDate.prototype._calcDateComponents = function () {
	var remainder,
		rd = this.rd.getRataDie();
	
	this.year = this._calcYear(rd);

	if (typeof(this.offset) === "undefined") {
		this.year = this._calcYear(rd);
		
		// now offset the RD by the time zone, then recalculate in case we were 
		// near the year boundary
		if (!this.tz) {
			this.tz = new ilib.TimeZone({id: this.timezone});
		}
		this.offset = this.tz.getOffsetMillis(this) / 86400000;
	}

	if (this.offset !== 0) {
		rd += this.offset;
		this.year = this._calcYear(rd);
	}

	//console.log("IslamicDate.calcComponent: calculating for rd " + rd);
	//console.log("IslamicDate.calcComponent: year is " + ret.year);
	var yearStart = this.newRd({
		year: this.year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	remainder = rd - yearStart.getRataDie() + 1;
	
	this.dayOfYear = remainder;
	
	//console.log("IslamicDate.calcComponent: remainder is " + remainder);
	
	this.month = ilib.bsearch(remainder, ilib.Date.IslamicDate.cumMonthLengths);
	remainder -= ilib.Date.IslamicDate.cumMonthLengths[this.month-1];

	//console.log("IslamicDate.calcComponent: month is " + this.month + " and remainder is " + remainder);
	
	this.day = Math.floor(remainder);
	remainder -= this.day;

	//console.log("IslamicDate.calcComponent: day is " + this.day + " and remainder is " + remainder);

	// now convert to milliseconds for the rest of the calculation
	remainder = Math.round(remainder * 86400000);
	
	this.hour = Math.floor(remainder/3600000);
	remainder -= this.hour * 3600000;
	
	this.minute = Math.floor(remainder/60000);
	remainder -= this.minute * 60000;
	
	this.second = Math.floor(remainder/1000);
	remainder -= this.second * 1000;
	
	this.millisecond = remainder;
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.IslamicDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
	return ilib.mod(rd-2, 7);
};

/**
 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
 * 354 or 355, regardless of months or weeks, etc. That is, Muharran 1st is day 1, and 
 * Dhu al-Hijja 29 is 354.
 * @return {number} the ordinal day of the year
 */
ilib.Date.IslamicDate.prototype.getDayOfYear = function() {
	return ilib.Date.IslamicDate.cumMonthLengths[this.month-1] + this.day;
};

/**
 * Return the era for this date as a number. The value for the era for Islamic 
 * calendars is -1 for "before the Islamic era" and 1 for "the Islamic era". 
 * Islamic era dates are any date after Muharran 1, 1, which is the same as
 * July 16, 622 CE in the Gregorian calendar. 
 * 
 * @return {number} 1 if this date is in the common era, -1 if it is before the 
 * common era 
 */
ilib.Date.IslamicDate.prototype.getEra = function() {
	return (this.year < 1) ? -1 : 1;
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.IslamicDate.prototype.getCalendar = function() {
	return "islamic";
};

//register with the factory method
ilib.Date._constructors["islamic"] = ilib.Date.IslamicDate;
/*
 * julian.js - Represent a Julian calendar object.
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js util/utils.js */

/**
 * @class
 * Construct a new Julian calendar object. This class encodes information about
 * a Julian calendar.<p>
 * 
 * Depends directive: !depends julian.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.Julian = function() {
	this.type = "julian";
};

/* the lengths of each month */
ilib.Cal.Julian.monthLengths = [
	31,  /* Jan */
	28,  /* Feb */
	31,  /* Mar */
	30,  /* Apr */
	31,  /* May */
	30,  /* Jun */
	31,  /* Jul */
	31,  /* Aug */
	30,  /* Sep */
	31,  /* Oct */
	30,  /* Nov */
	31   /* Dec */
];

/**
 * Return the number of months in the given year. The number of months in a year varies
 * for lunar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=Jaunary, 2=February, etc. until 12=December.
 * 
 * @param {number} year a year for which the number of months is sought
 */
ilib.Cal.Julian.prototype.getNumMonths = function(year) {
	return 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of things
 * like leap years.
 * 
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @return {number} the number of days within the given month in the given year
 */
ilib.Cal.Julian.prototype.getMonLength = function(month, year) {
	if (month !== 2 || !this.isLeapYear(year)) {
		return ilib.Cal.Julian.monthLengths[month-1];
	} else {
		return 29;
	}
};

/**
 * Return true if the given year is a leap year in the Julian calendar.
 * The year parameter may be given as a number, or as a JulDate object.
 * @param {number|ilib.Date.JulDate} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.Julian.prototype.isLeapYear = function(year) {
	var y = (typeof(year) === 'number' ? year : year.year);
	return ilib.mod(y, 4) === ((year > 0) ? 0 : 3);
};

/**
 * Return the type of this calendar.
 * 
 * @return {string} the name of the type of this calendar 
 */
ilib.Cal.Julian.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.Julian.prototype.newDateInstance = function (options) {
	return new ilib.Date.JulDate(options);
};

/* register this calendar for the factory method */
ilib.Cal._constructors["julian"] = ilib.Cal.Julian;
/*
 * juliandate.js - Represent a date in the Julian calendar
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/julian.js 
util/utils.js
util/search.js 
localeinfo.js 
julianday.js 
*/

/**
 * @class
 * Construct a new Julian RD date number object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Julian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above are present, then the RD is calculate based on 
 * the current date at the time of instantiation. <p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends juliandate.js
 * 
 * @private
 * @constructor
 * @extends ilib.Date.RataDie
 * @param {Object=} params parameters that govern the settings and behaviour of this Julian RD date
 */
ilib.Date.JulianRataDie = function(params) {
	this.cal = params && params.cal || new ilib.Cal.Julian();
	this.rd = undefined;
	ilib.Date.RataDie.call(this, params);
};

ilib.Date.JulianRataDie.prototype = new ilib.Date.RataDie();
ilib.Date.JulianRataDie.prototype.parent = ilib.Date.RataDie;
ilib.Date.JulianRataDie.prototype.constructor = ilib.Date.JulianRataDie;

/**
 * The difference between a zero Julian day and the first Julian date
 * of Friday, July 16, 622 CE Julian. 
 * @private
 * @const
 * @type number
 */
ilib.Date.JulianRataDie.prototype.epoch = 1721422.5;

/**
 * Calculate the Rata Die (fixed day) number of the given date from the
 * date components.
 * 
 * @protected
 * @param {Object} date the date components to calculate the RD from
 */
ilib.Date.JulianRataDie.prototype._setDateComponents = function(date) {
	var year = date.year + ((date.year < 0) ? 1 : 0);
	var years = 365 * (year - 1) + Math.floor((year-1)/4);
	var dayInYear = (date.month > 1 ? ilib.Date.JulDate.cumMonthLengths[date.month-1] : 0) +
		date.day +
		(this.cal.isLeapYear(date.year) && date.month > 2 ? 1 : 0);
	var rdtime = (date.hour * 3600000 +
		date.minute * 60000 +
		date.second * 1000 +
		date.millisecond) / 
		86400000;
	
	/*
	console.log("calcRataDie: converting " +  JSON.stringify(parts));
	console.log("getRataDie: year is " +  years);
	console.log("getRataDie: day in year is " +  dayInYear);
	console.log("getRataDie: rdtime is " +  rdtime);
	console.log("getRataDie: rd is " +  (years + dayInYear + rdtime));
	*/
	
	this.rd = years + dayInYear + rdtime;
};

/**
 * @class
 * Construct a new date object for the Julian Calendar. The constructor can be called
 * with a parameter object that contains any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970 (Gregorian).
 * <li><i>julianday</i> - the Julian Day to set into this date
 * <li><i>year</i> - any integer except 0. Years go from -1 (BCE) to 1 (CE), skipping the zero 
 * year which doesn't exist in the Julian calendar
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * <li><i>day</i> - 1 to 31
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * <li><i>minute</i> - 0 to 59
 * <li><i>second</i> - 0 to 59
 * <li><i>millisecond<i> - 0 to 999
 * <li><i>locale</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this julian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * <li><i>timezone</i> - the time zone of this instance. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale. 
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 * 
 * NB. The <a href="http://en.wikipedia.org/wiki/Julian_date">Julian Day</a> 
 * (ilib.JulianDay) object is a <i>different</i> object than a 
 * <a href="http://en.wikipedia.org/wiki/Julian_calendar">date in
 * the Julian calendar</a> and the two are not to be confused. The Julian Day 
 * object represents time as a number of whole and fractional days since the 
 * beginning of the epoch, whereas a date in the Julian 
 * calendar is a regular date that signifies year, month, day, etc. using the rules
 * of the Julian calendar. The naming of Julian Days and the Julian calendar are
 * unfortunately close, and come from history.<p>
 *  
 * If called with another Julian date argument, the date components of the given
 * date are copied into the current one.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * Depends directive: !depends juliandate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Julian date
 */
ilib.Date.JulDate = function(params) {
	this.cal = new ilib.Cal.Julian();
	
	if (params) {
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			var li = new ilib.LocaleInfo(this.locale);
			this.timezone = li.getTimeZone(); 
		}
		if (params.timezone) {
			this.timezone = params.timezone;
		}
		
		if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond ) {
			/**
			 * Year in the Julian calendar.
			 * @type number
			 */
			this.year = parseInt(params.year, 10) || 0;
			/**
			 * The month number, ranging from 1 (January) to 12 (December).
			 * @type number
			 */
			this.month = parseInt(params.month, 10) || 1;
			/**
			 * The day of the month. This ranges from 1 to 31.
			 * @type number
			 */
			this.day = parseInt(params.day, 10) || 1;
			/**
			 * The hour of the day. This can be a number from 0 to 23, as times are
			 * stored unambiguously in the 24-hour clock.
			 * @type number
			 */
			this.hour = parseInt(params.hour, 10) || 0;
			/**
			 * The minute of the hours. Ranges from 0 to 59.
			 * @type number
			 */
			this.minute = parseInt(params.minute, 10) || 0;
			/**
			 * The second of the minute. Ranges from 0 to 59.
			 * @type number
			 */
			this.second = parseInt(params.second, 10) || 0;
			/**
			 * The millisecond of the second. Ranges from 0 to 999.
			 * @type number
			 */
			this.millisecond = parseInt(params.millisecond, 10) || 0;
			
			/**
			 * The day of the year. Ranges from 1 to 383.
			 * @type number
			 */
			this.dayOfYear = parseInt(params.dayOfYear, 10);
			
			if (typeof(params.dst) === 'boolean') {
				this.dst = params.dst;
			}
			
			this.rd = this.newRd(this);
			
			// add the time zone offset to the rd to convert to UTC
			if (!this.tz) {
				this.tz = new ilib.TimeZone({id: this.timezone});
			}
			// getOffsetMillis requires that this.year, this.rd, and this.dst 
			// are set in order to figure out which time zone rules apply and 
			// what the offset is at that point in the year
			this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
			if (this.offset !== 0) {
				this.rd = this.newRd({
					rd: this.rd.getRataDie() - this.offset
				});
			}
		}
	}
	
	if (!this.rd) {
		this.rd = this.newRd(params);
		this._calcDateComponents();
	}
};

ilib.Date.JulDate.prototype = new ilib.Date();
ilib.Date.JulDate.prototype.parent = ilib.Date;
ilib.Date.JulDate.prototype.constructor = ilib.Date.JulDate;

/**
 * the cumulative lengths of each month, for a non-leap year 
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Date.JulDate.cumMonthLengths = [
    0,   /* Jan */
	31,  /* Feb */
	59,  /* Mar */
	90,  /* Apr */
	120, /* May */
	151, /* Jun */
	181, /* Jul */
	212, /* Aug */
	243, /* Sep */
	273, /* Oct */
	304, /* Nov */
	334, /* Dec */
	365
];

/**
 * the cumulative lengths of each month, for a leap year 
 * @private
 * @const
 * @type Array.<number>
 */
ilib.Date.JulDate.cumMonthLengthsLeap = [
	0,   /* Jan */
	31,  /* Feb */
	60,  /* Mar */
	91,  /* Apr */
	121, /* May */
	152, /* Jun */
	182, /* Jul */
	213, /* Aug */
	244, /* Sep */
	274, /* Oct */
	305, /* Nov */
	335, /* Dec */
	366
];

/**
 * Return a new RD for this date type using the given params.
 * @protected
 * @param {Object=} params the parameters used to create this rata die instance
 * @returns {ilib.Date.RataDie} the new RD instance for the given params
 */
ilib.Date.JulDate.prototype.newRd = function (params) {
	return new ilib.Date.JulianRataDie(params);
};

/**
 * Return the year for the given RD
 * @protected
 * @param {number} rd RD to calculate from 
 * @returns {number} the year for the RD
 */
ilib.Date.JulDate.prototype._calcYear = function(rd) {
	var year = Math.floor((4*(Math.floor(rd)-1) + 1464)/1461);
	
	return (year <= 0) ? year - 1 : year;
};

/**
 * Calculate date components for the given RD date.
 * @protected
 */
ilib.Date.JulDate.prototype._calcDateComponents = function () {
	var remainder,
		cumulative,
		rd = this.rd.getRataDie();
	
	this.year = this._calcYear(rd);

	if (typeof(this.offset) === "undefined") {
		this.year = this._calcYear(rd);
		
		// now offset the RD by the time zone, then recalculate in case we were 
		// near the year boundary
		if (!this.tz) {
			this.tz = new ilib.TimeZone({id: this.timezone});
		}
		this.offset = this.tz.getOffsetMillis(this) / 86400000;
	}

	if (this.offset !== 0) {
		rd += this.offset;
		this.year = this._calcYear(rd);
	}
	
	var jan1 = this.newRd({
		year: this.year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	remainder = rd + 1 - jan1.getRataDie();
	
	cumulative = this.cal.isLeapYear(this.year) ? 
		ilib.Date.JulDate.cumMonthLengthsLeap : 
		ilib.Date.JulDate.cumMonthLengths; 
	
	this.month = ilib.bsearch(Math.floor(remainder), cumulative);
	remainder = remainder - cumulative[this.month-1];
	
	this.day = Math.floor(remainder);
	remainder -= this.day;
	// now convert to milliseconds for the rest of the calculation
	remainder = Math.round(remainder * 86400000);
	
	this.hour = Math.floor(remainder/3600000);
	remainder -= this.hour * 3600000;
	
	this.minute = Math.floor(remainder/60000);
	remainder -= this.minute * 60000;
	
	this.second = Math.floor(remainder/1000);
	remainder -= this.second * 1000;
	
	this.millisecond = remainder;
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.JulDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
	return ilib.mod(rd-2, 7);
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.JulDate.prototype.getCalendar = function() {
	return "julian";
};

//register with the factory method
ilib.Date._constructors["julian"] = ilib.Date.JulDate;
/*
 * gregoriandate.js - Represent a date in the Gregorian calendar
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/gregorian.js 
util/utils.js
util/search.js 
localeinfo.js 
julianday.js
calendar/gregratadie.js
timezone.js
*/

/**
 * @class
 * Construct a new Gregorian date object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>dst</i> - boolean used to specify whether the given time components are
 * intended to be in daylight time or not. This is only used in the overlap
 * time when transitioning from DST to standard time, and the time components are 
 * ambiguous. Otherwise at all other times of the year, this flag is ignored.
 * If you specify the date using unix time (UTC) or a julian day, then the time is
 * already unambiguous and this flag does not need to be specified.
 * <p>
 * For example, in the US, the transition out of daylight savings time 
 * in 2014 happens at Nov 2, 2014 2:00am Daylight Time, when the time falls 
 * back to Nov 2, 2014 1:00am Standard Time. If you give a date/time components as 
 * "Nov 2, 2014 1:30am", then there are two 1:30am times in that day, and you would 
 * have to give the standard flag to indicate which of those two you mean. 
 * (dst=true means daylight time, dst=false means standard time).   
 * 
 * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this gregorian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * 
 * <li><i>locale</i> - locale for this gregorian date. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale.
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Gregorian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends gregoriandate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Gregorian date
 */
ilib.Date.GregDate = function(params) {
	this.cal = new ilib.Cal.Gregorian();
	this.timezone = "local";

	if (params) {
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			var li = new ilib.LocaleInfo(this.locale);
			this.timezone = li.getTimeZone(); 
		}
		if (params.timezone) {
			this.timezone = params.timezone.toString();
		}
		
		if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond ) {
			this.year = parseInt(params.year, 10) || 0;
			this.month = parseInt(params.month, 10) || 1;
			this.day = parseInt(params.day, 10) || 1;
			this.hour = parseInt(params.hour, 10) || 0;
			this.minute = parseInt(params.minute, 10) || 0;
			this.second = parseInt(params.second, 10) || 0;
			this.millisecond = parseInt(params.millisecond, 10) || 0;
			if (typeof(params.dst) === 'boolean') {
				this.dst = params.dst;
			}
			this.rd = this.newRd(params);
			
			// add the time zone offset to the rd to convert to UTC
			this.offset = 0;
			if (this.timezone === "local" && typeof(params.dst) === 'undefined') {
				// if dst is defined, the intrinsic Date object has no way of specifying which version of a time you mean
				// in the overlap time at the end of DST. Do you mean the daylight 1:30am or the standard 1:30am? In this
				// case, use the ilib calculations below, which can distinguish between the two properly
				var d = new Date(this.year, this.month-1, this.day, this.hour, this.minute, this.second, this.millisecond);
				this.offset = -d.getTimezoneOffset() / 1440;
			} else {
				if (!this.tz) {
					this.tz = new ilib.TimeZone({id: this.timezone});
				}
				// getOffsetMillis requires that this.year, this.rd, and this.dst 
				// are set in order to figure out which time zone rules apply and 
				// what the offset is at that point in the year
				this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
			}
			if (this.offset !== 0) {
				this.rd = this.newRd({
					rd: this.rd.getRataDie() - this.offset
				});
			}
		}
	} 

	if (!this.rd) {
		this.rd = this.newRd(params);
		this._calcDateComponents();
	}
};

ilib.Date.GregDate.prototype = new ilib.Date({noinstance: true});
ilib.Date.GregDate.prototype.parent = ilib.Date;
ilib.Date.GregDate.prototype.constructor = ilib.Date.GregDate;

/**
 * Return a new RD for this date type using the given params.
 * @private
 * @param {Object=} params the parameters used to create this rata die instance
 * @returns {ilib.Date.RataDie} the new RD instance for the given params
 */
ilib.Date.GregDate.prototype.newRd = function (params) {
	return new ilib.Date.GregRataDie(params);
};

/**
 * Calculates the Gregorian year for a given rd number.
 * @private
 */
ilib.Date.GregDate.prototype._calcYear = function(rd) {
	var days400,
		days100,
		days4,
		years400,
		years100,
		years4,
		years1,
		year;

	years400 = Math.floor((rd - 1) / 146097);
	days400 = ilib.mod((rd - 1), 146097);
	years100 = Math.floor(days400 / 36524);
	days100 = ilib.mod(days400, 36524);
	years4 = Math.floor(days100 / 1461);
	days4 = ilib.mod(days100, 1461);
	years1 = Math.floor(days4 / 365);
	
	year = 400 * years400 + 100 * years100 + 4 * years4 + years1;
	if (years100 !== 4 && years1 !== 4) {
		year++;
	}
	return year;
};

/**
 * Calculate the date components for the current time zone
 * @private
 */
ilib.Date.GregDate.prototype._calcDateComponents = function () {
	if (this.timezone === "local" && this.rd.getRataDie() >= 719163 && this.rd.getRataDie() <= 744018.134803241) {
		// console.log("using js Date to calculate offset");
		// use the intrinsic JS Date object to do the tz conversion for us, which 
		// guarantees that it follows the system tz database settings 
		var d = new Date(this.rd.getTime());
	
		/**
		 * Year in the Gregorian calendar.
		 * @type number
		 */
		this.year = d.getFullYear();
		
		/**
		 * The month number, ranging from 1 (January) to 12 (December).
		 * @type number
		 */
		this.month = d.getMonth()+1;
		
		/**
		 * The day of the month. This ranges from 1 to 31.
		 * @type number
		 */
		this.day = d.getDate();
		
		/**
		 * The hour of the day. This can be a number from 0 to 23, as times are
		 * stored unambiguously in the 24-hour clock.
		 * @type number
		 */
		this.hour = d.getHours();
		
		/**
		 * The minute of the hours. Ranges from 0 to 59.
		 * @type number
		 */
		this.minute = d.getMinutes();
		
		/**
		 * The second of the minute. Ranges from 0 to 59.
		 * @type number
		 */
		this.second = d.getSeconds();
		
		/**
		 * The millisecond of the second. Ranges from 0 to 999.
		 * @type number
		 */
		this.millisecond = d.getMilliseconds();
		
		this.offset = -d.getTimezoneOffset() / 1440;
	} else {
		// console.log("using ilib to calculate offset. tz is " + this.timezone);
		// console.log("GregDate._calcDateComponents: date is " + JSON.stringify(this) + " parent is " + JSON.stringify(this.parent) + " and parent.parent is " + JSON.stringify(this.parent.parent));
		if (typeof(this.offset) === "undefined") {
			// console.log("calculating offset");
			this.year = this._calcYear(this.rd.getRataDie());
			
			// now offset the RD by the time zone, then recalculate in case we were 
			// near the year boundary
			if (!this.tz) {
				this.tz = new ilib.TimeZone({id: this.timezone});
			}
			this.offset = this.tz.getOffsetMillis(this) / 86400000;
		// } else {
			// console.log("offset is already defined somehow. type is " + typeof(this.offset));
			// console.trace("Stack is this one");
		}
		// console.log("offset is " + this.offset);
		var rd = this.rd.getRataDie();
		if (this.offset !== 0) {
			rd += this.offset;
		}
		this.year = this._calcYear(rd);
		
		var yearStartRd = this.newRd({
			year: this.year,
			month: 1,
			day: 1,
			cal: this.cal
		});
		
		// remainder is days into the year
		var remainder = rd - yearStartRd.getRataDie() + 1;
		
		var cumulative = ilib.Cal.Gregorian.prototype.isLeapYear.call(this.cal, this.year) ? 
			ilib.Date.GregRataDie.cumMonthLengthsLeap : 
			ilib.Date.GregRataDie.cumMonthLengths; 
		
		this.month = ilib.bsearch(Math.floor(remainder), cumulative);
		remainder = remainder - cumulative[this.month-1];
		
		this.day = Math.floor(remainder);
		remainder -= this.day;
		// now convert to milliseconds for the rest of the calculation
		remainder = Math.round(remainder * 86400000);
		
		this.hour = Math.floor(remainder/3600000);
		remainder -= this.hour * 3600000;
		
		this.minute = Math.floor(remainder/60000);
		remainder -= this.minute * 60000;
		
		this.second = Math.floor(remainder/1000);
		remainder -= this.second * 1000;
		
		this.millisecond = Math.floor(remainder);
	}
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.GregDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.rd.getRataDie() + (this.offset || 0));
	return ilib.mod(rd, 7);
};

/**
 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
 * 365, regardless of months or weeks, etc. That is, January 1st is day 1, and 
 * December 31st is 365 in regular years, or 366 in leap years.
 * @return {number} the ordinal day of the year
 */
ilib.Date.GregDate.prototype.getDayOfYear = function() {
	var cumulativeMap = this.cal.isLeapYear(this.year) ? 
		ilib.Date.GregRataDie.cumMonthLengthsLeap : 
		ilib.Date.GregRataDie.cumMonthLengths; 
		
	return cumulativeMap[this.month-1] + this.day;
};

/**
 * Return the era for this date as a number. The value for the era for Gregorian 
 * calendars is -1 for "before the common era" (BCE) and 1 for "the common era" (CE). 
 * BCE dates are any date before Jan 1, 1 CE. In the proleptic Gregorian calendar, 
 * there is a year 0, so any years that are negative or zero are BCE. In the Julian
 * calendar, there is no year 0. Instead, the calendar goes straight from year -1 to 
 * 1.
 * @return {number} 1 if this date is in the common era, -1 if it is before the 
 * common era 
 */
ilib.Date.GregDate.prototype.getEra = function() {
	return (this.year < 1) ? -1 : 1;
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.GregDate.prototype.getCalendar = function() {
	return "gregorian";
};

// register with the factory method
ilib.Date._constructors["gregorian"] = ilib.Date.GregDate;
/*
 * thaisolar.js - Represent a Thai solar calendar object.
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js calendar/gregorian.js util/utils.js */

/**
 * @class
 * Construct a new Thai solar calendar object. This class encodes information about
 * a Thai solar calendar.<p>
 * 
 * Depends directive: !depends thaisolar.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.ThaiSolar = function() {
	this.type = "thaisolar";
};

ilib.Cal.ThaiSolar.prototype = new ilib.Cal.Gregorian();
ilib.Cal.ThaiSolar.prototype.parent = ilib.Cal.Gregorian;
ilib.Cal.ThaiSolar.prototype.constructor = ilib.Cal.ThaiSolar;

/**
 * Return true if the given year is a leap year in the Thai solar calendar.
 * The year parameter may be given as a number, or as a ThaiSolarDate object.
 * @param {number|ilib.Date.ThaiSolarDate} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.ThaiSolar.prototype.isLeapYear = function(year) {
	var y = (typeof(year) === 'number' ? year : year.getYears());
	y -= 543;
	var centuries = ilib.mod(y, 400);
	return (ilib.mod(y, 4) === 0 && centuries !== 100 && centuries !== 200 && centuries !== 300);
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.ThaiSolar.prototype.newDateInstance = function (options) {
	return new ilib.Date.ThaiSolarDate(options);
};

/* register this calendar for the factory method */
ilib.Cal._constructors["thaisolar"] = ilib.Cal.ThaiSolar;
/*
 * thaisolardate.js - Represent a date in the ThaiSolar calendar
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/gregorian.js 
util/jsutils.js
*/

/**
 * @class
 * Construct a new Thai solar date object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970.
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means January, 2 means February, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this Thai solar date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * 
 * <li><i>locale</i> - locale for this Thai solar date. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale. 
 * </ul>
 *
 * If the constructor is called with another Thai solar date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends thaisolardate.js
 * 
 * @constructor
 * @extends ilib.Date.GregDate
 * @param {Object=} params parameters that govern the settings and behaviour of this Thai solar date
 */
ilib.Date.ThaiSolarDate = function(params) {
	var p = params;
	if (params) {
		// there is 198327 days difference between the Thai solar and 
		// Gregorian epochs which is equivalent to 543 years
		p = {};
		ilib.shallowCopy(params, p);
		if (typeof(p.year) !== 'undefined') {
			p.year -= 543;	
		}
		if (typeof(p.rd) !== 'undefined') {
			p.rd -= 198327;
		}
	}
	this.rd = undefined; // clear these out so that the GregDate constructor can set it
	this.offset = undefined;
	//console.log("ThaiSolarDate.constructor: date is " + JSON.stringify(this) + " parent is " + JSON.stringify(this.parent) + " and parent.parent is " + JSON.stringify(this.parent.parent));
	ilib.Date.GregDate.call(this, p);
	this.cal = new ilib.Cal.ThaiSolar();
	// make sure the year is set correctly
	if (params && typeof(params.year) !== 'undefined') {
		this.year = parseInt(params.year, 10);
	}
};

ilib.Date.ThaiSolarDate.prototype = new ilib.Date.GregDate();
ilib.Date.ThaiSolarDate.prototype.parent = ilib.Date.GregDate.prototype;
ilib.Date.ThaiSolarDate.prototype.constructor = ilib.Date.ThaiSolarDate;

/**
 * the difference between a zero Julian day and the zero Thai Solar date.
 * This is some 543 years before the start of the Gregorian epoch. 
 * @private
 * @const
 * @type number
 */
ilib.Date.ThaiSolarDate.epoch = 1523097.5;

/**
 * Calculate the date components for the current time zone
 * @protected
 */
ilib.Date.ThaiSolarDate.prototype._calcDateComponents = function () {
	// there is 198327 days difference between the Thai solar and 
	// Gregorian epochs which is equivalent to 543 years
	// console.log("ThaiSolarDate._calcDateComponents: date is " + JSON.stringify(this) + " parent is " + JSON.stringify(this.parent) + " and parent.parent is " + JSON.stringify(this.parent.parent));
	this.parent._calcDateComponents.call(this);
	this.year += 543;
};

/**
 * Return the Rata Die (fixed day) number of this date.
 * 
 * @protected
 * @return {number} the rd date as a number
 */
ilib.Date.ThaiSolarDate.prototype.getRataDie = function() {
	// there is 198327 days difference between the Thai solar and 
	// Gregorian epochs which is equivalent to 543 years
	return this.rd.getRataDie() + 198327;
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week before the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.before = function (dow) {
	return this.cal.newDateInstance({
		rd: this.rd.before(dow, this.offset) + 198327,
		timezone: this.timezone
	});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week after the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.after = function (dow) {
	return this.cal.newDateInstance({
		rd: this.rd.after(dow, this.offset) + 198327,
		timezone: this.timezone
	});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or before the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or before the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.onOrBefore = function (dow) {
	return this.cal.newDateInstance({
		rd: this.rd.onOrBefore(dow, this.offset) + 198327,
		timezone: this.timezone
	});
};

/**
 * Return a new Gregorian date instance that represents the first instance of the 
 * given day of the week on or after the current date. The day of the week is encoded
 * as a number where 0 = Sunday, 1 = Monday, etc.
 * 
 * @param {number} dow the day of the week on or after the current date that is being sought
 * @return {ilib.Date} the date being sought
 */
ilib.Date.ThaiSolarDate.prototype.onOrAfter = function (dow) {
	return this.cal.newDateInstance({
		rd: this.rd.onOrAfter(dow, this.offset) + 198327,
		timezone: this.timezone
	});
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.ThaiSolarDate.prototype.getCalendar = function() {
	return "thaisolar";
};

//register with the factory method
ilib.Date._constructors["thaisolar"] = ilib.Date.ThaiSolarDate;


/*
 * persian.js - Represent a Persian algorithmic calendar object.
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends calendar.js locale.js date.js julianday.js util/utils.js */

/**
 * @class
 * Construct a new Persian algorithmic calendar object. This class encodes information about
 * a Persian algorithmic calendar.<p>
 * 
 * Depends directive: !depends persian.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.PersianAlgo = function() {
	this.type = "persian-algo";
};

/**
 * @private
 * @const
 * @type Array.<number> 
 * the lengths of each month 
 */
ilib.Cal.PersianAlgo.monthLengths = [
	31,  // Farvardin
	31,  // Ordibehesht
	31,  // Khordad
	31,  // Tir
	31,  // Mordad
	31,  // Shahrivar
	30,  // Mehr
	30,  // Aban
	30,  // Azar
	30,  // Dey
	30,  // Bahman
	29   // Esfand
];

/**
 * Return the number of months in the given year. The number of months in a year varies
 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=first month, 2=second month, etc.
 * 
 * @param {number} year a year for which the number of months is sought
 * @return {number} The number of months in the given year
 */
ilib.Cal.PersianAlgo.prototype.getNumMonths = function(year) {
	return 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of things
 * like leap years.
 * 
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @return {number} the number of days within the given month in the given year
 */
ilib.Cal.PersianAlgo.prototype.getMonLength = function(month, year) {
	if (month !== 12 || !this.isLeapYear(year)) {
		return ilib.Cal.PersianAlgo.monthLengths[month-1];
	} else {
		// Month 12, Esfand, has 30 days instead of 29 in leap years
		return 30;
	}
};

/**
 * Return the equivalent year in the 2820 year cycle that begins on 
 * Far 1, 474. This particular cycle obeys the cycle-of-years formula 
 * whereas the others do not specifically. This cycle can be used as
 * a proxy for other years outside of the cycle by shifting them into 
 * the cycle.   
 * @param {number} year year to find the equivalent cycle year for
 * @returns {number} the equivalent cycle year
 */
ilib.Cal.PersianAlgo.prototype.equivalentCycleYear = function(year) {
	var y = year - (year >= 0 ? 474 : 473);
	return ilib.mod(y, 2820) + 474;
};

/**
 * Return true if the given year is a leap year in the Persian calendar.
 * The year parameter may be given as a number, or as a PersAlgoDate object.
 * @param {number} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.PersianAlgo.prototype.isLeapYear = function(year) {
	return (ilib.mod((this.equivalentCycleYear(year) + 38) * 682, 2816) < 682);
};

/**
 * Return the type of this calendar.
 * 
 * @return {string} the name of the type of this calendar 
 */
ilib.Cal.PersianAlgo.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.PersianAlgo.prototype.newDateInstance = function (options) {
	return new ilib.Date.PersAlgoDate(options);
};

/* register this calendar for the factory method */
ilib.Cal._constructors["persian-algo"] = ilib.Cal.PersianAlgo;

/*
 * persiandate.js - Represent a date in the Persian algorithmic calendar
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js 
calendar/persian.js 
util/utils.js
util/search.js 
localeinfo.js 
julianday.js 
*/

/**
 * Construct a new Persian RD date number object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Persian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above are present, then the RD is calculate based on 
 * the current date at the time of instantiation. <p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends persiandate.js
 * 
 * @private
 * @class
 * @constructor
 * @extends ilib.Date.RataDie
 * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date
 */
ilib.Date.PersAlgoRataDie = function(params) {
	this.cal = params && params.cal || new ilib.Cal.PersianAlgo();
	this.rd = undefined;
	ilib.Date.RataDie.call(this, params);
};

ilib.Date.PersAlgoRataDie.prototype = new ilib.Date.RataDie();
ilib.Date.PersAlgoRataDie.prototype.parent = ilib.Date.RataDie;
ilib.Date.PersAlgoRataDie.prototype.constructor = ilib.Date.PersAlgoRataDie;

/**
 * The difference between a zero Julian day and the first Persian date
 * @private
 * @const
 * @type number
 */
ilib.Date.PersAlgoRataDie.prototype.epoch = 1948319.5;

/**
 * Calculate the Rata Die (fixed day) number of the given date from the
 * date components.
 *
 * @protected
 * @param {Object} date the date components to calculate the RD from
 */
ilib.Date.PersAlgoRataDie.prototype._setDateComponents = function(date) {
	var year = this.cal.equivalentCycleYear(date.year);
	var y = date.year - (date.year >= 0 ? 474 : 473);
	var rdOfYears = 1029983 * Math.floor(y/2820) + 365 * (year - 1) + Math.floor((682 * year - 110) / 2816);
	var dayInYear = (date.month > 1 ? ilib.Date.PersAlgoDate.cumMonthLengths[date.month-1] : 0) + date.day;
	var rdtime = (date.hour * 3600000 +
		date.minute * 60000 +
		date.second * 1000 +
		date.millisecond) /
		86400000;
	
	/*
	// console.log("getRataDie: converting " +  JSON.stringify(this));
	console.log("getRataDie: year is " +  year);
	console.log("getRataDie: rd of years is " +  rdOfYears);
	console.log("getRataDie: day in year is " +  dayInYear);
	console.log("getRataDie: rdtime is " +  rdtime);
	console.log("getRataDie: rd is " +  (rdOfYears + dayInYear + rdtime));
	*/
	
	this.rd = rdOfYears + dayInYear + rdtime;
};

/**
 * Return the rd number of the particular day of the week on or before the 
 * given rd. eg. The Sunday on or before the given rd.
 * @private
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the current date
 * @return {number} the rd of the day of the week
 */
ilib.Date.PersAlgoRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {
	return rd - ilib.mod(Math.floor(rd) - dayOfWeek - 3, 7);
};


/**
 * @class
 * 
 * Construct a new Persian date object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this persian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * 
 * <li><i>locale</i> - locale for this persian date. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale.
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Persian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends persiandate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Persian date
 */
ilib.Date.PersAlgoDate = function(params) {
	this.cal = new ilib.Cal.PersianAlgo();
	this.timezone = "local";
	
	if (params) {
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			var li = new ilib.LocaleInfo(this.locale);
			this.timezone = li.getTimeZone(); 
		}
		if (params.timezone) {
			this.timezone = params.timezone;
		}
		
		if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond ) {
			/**
			 * Year in the Persian calendar.
			 * @type number
			 */
			this.year = parseInt(params.year, 10) || 0;

			/**
			 * The month number, ranging from 1 to 12
			 * @type number
			 */
			this.month = parseInt(params.month, 10) || 1;

			/**
			 * The day of the month. This ranges from 1 to 31.
			 * @type number
			 */
			this.day = parseInt(params.day, 10) || 1;
			
			/**
			 * The hour of the day. This can be a number from 0 to 23, as times are
			 * stored unambiguously in the 24-hour clock.
			 * @type number
			 */
			this.hour = parseInt(params.hour, 10) || 0;

			/**
			 * The minute of the hours. Ranges from 0 to 59.
			 * @type number
			 */
			this.minute = parseInt(params.minute, 10) || 0;

			/**
			 * The second of the minute. Ranges from 0 to 59.
			 * @type number
			 */
			this.second = parseInt(params.second, 10) || 0;

			/**
			 * The millisecond of the second. Ranges from 0 to 999.
			 * @type number
			 */
			this.millisecond = parseInt(params.millisecond, 10) || 0;
			
			/**
			 * The day of the year. Ranges from 1 to 366.
			 * @type number
			 */
			this.dayOfYear = parseInt(params.dayOfYear, 10);

			if (typeof(params.dst) === 'boolean') {
				this.dst = params.dst;
			}
			
			this.rd = this.newRd(this);
			
			// add the time zone offset to the rd to convert to UTC
			if (!this.tz) {
				this.tz = new ilib.TimeZone({id: this.timezone});
			}
			// getOffsetMillis requires that this.year, this.rd, and this.dst 
			// are set in order to figure out which time zone rules apply and 
			// what the offset is at that point in the year
			this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
			if (this.offset !== 0) {
				this.rd = this.newRd({
					rd: this.rd.getRataDie() - this.offset
				});
			}
		}
	}

	if (!this.rd) {
		this.rd = this.newRd(params);
		this._calcDateComponents();
	}
};

ilib.Date.PersAlgoDate.prototype = new ilib.Date({noinstance: true});
ilib.Date.PersAlgoDate.prototype.parent = ilib.Date;
ilib.Date.PersAlgoDate.prototype.constructor = ilib.Date.PersAlgoDate;

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month, for a non-leap year 
 */
ilib.Date.PersAlgoDate.cumMonthLengths = [
    0,    // Farvardin
	31,   // Ordibehesht
	62,   // Khordad
	93,   // Tir
	124,  // Mordad
	155,  // Shahrivar
	186,  // Mehr
	216,  // Aban
	246,  // Azar
	276,  // Dey
	306,  // Bahman
	336,  // Esfand
	365
];

/**
 * Return a new RD for this date type using the given params.
 * @protected
 * @param {Object=} params the parameters used to create this rata die instance
 * @returns {ilib.Date.RataDie} the new RD instance for the given params
 */
ilib.Date.PersAlgoDate.prototype.newRd = function (params) {
	return new ilib.Date.PersAlgoRataDie(params);
};

/**
 * Return the year for the given RD
 * @protected
 * @param {number} rd RD to calculate from 
 * @returns {number} the year for the RD
 */
ilib.Date.PersAlgoDate.prototype._calcYear = function(rd) {
	var shiftedRd = rd - 173126;
	var numberOfCycles = Math.floor(shiftedRd / 1029983);
	var shiftedDayInCycle = ilib.mod(shiftedRd, 1029983);
	var yearInCycle = (shiftedDayInCycle === 1029982) ? 2820 : Math.floor((2816 * shiftedDayInCycle + 1031337) / 1028522);
	var year = 474 + 2820 * numberOfCycles + yearInCycle;
	return (year > 0) ? year : year - 1;
};

/**
 * @private
 * Calculate date components for the given RD date.
 */
ilib.Date.PersAlgoDate.prototype._calcDateComponents = function () {
	var remainder,
		rd = this.rd.getRataDie();
	
	this.year = this._calcYear(rd);
	
	if (typeof(this.offset) === "undefined") {
		// now offset the RD by the time zone, then recalculate in case we were 
		// near the year boundary
		if (!this.tz) {
			this.tz = new ilib.TimeZone({id: this.timezone});
		}
		this.offset = this.tz.getOffsetMillis(this) / 86400000;
	}
	
	if (this.offset !== 0) {
		rd += this.offset;
		this.year = this._calcYear(rd);
	}
	
	//console.log("PersAlgoDate.calcComponent: calculating for rd " + rd);
	//console.log("PersAlgoDate.calcComponent: year is " + ret.year);
	var yearStart = this.newRd({
		year: this.year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	remainder = rd - yearStart.getRataDie() + 1;
	
	this.dayOfYear = remainder;
	
	//console.log("PersAlgoDate.calcComponent: remainder is " + remainder);
	
	this.month = ilib.bsearch(remainder, ilib.Date.PersAlgoDate.cumMonthLengths);
	remainder -= ilib.Date.PersAlgoDate.cumMonthLengths[this.month-1];
	
	//console.log("PersAlgoDate.calcComponent: month is " + this.month + " and remainder is " + remainder);
	
	this.day = Math.floor(remainder);
	remainder -= this.day;
	
	//console.log("PersAlgoDate.calcComponent: day is " + this.day + " and remainder is " + remainder);
	
	// now convert to milliseconds for the rest of the calculation
	remainder = Math.round(remainder * 86400000);
	
	this.hour = Math.floor(remainder/3600000);
	remainder -= this.hour * 3600000;
	
	this.minute = Math.floor(remainder/60000);
	remainder -= this.minute * 60000;
	
	this.second = Math.floor(remainder/1000);
	remainder -= this.second * 1000;
	
	this.millisecond = remainder;
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.PersAlgoDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.getRataDie());
	return ilib.mod(rd-3, 7);
};

/**
 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
 * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and 
 * December 31st is 365 in regular years, or 366 in leap years.
 * @return {number} the ordinal day of the year
 */
ilib.Date.PersAlgoDate.prototype.getDayOfYear = function() {
	return ilib.Date.PersAlgoDate.cumMonthLengths[this.month-1] + this.day;
};

/**
 * Return the era for this date as a number. The value for the era for Persian 
 * calendars is -1 for "before the persian era" (BP) and 1 for "the persian era" (anno 
 * persico or AP). 
 * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar, 
 * there is a year 0, so any years that are negative or zero are BP.
 * @return {number} 1 if this date is in the common era, -1 if it is before the 
 * common era 
 */
ilib.Date.PersAlgoDate.prototype.getEra = function() {
	return (this.year < 1) ? -1 : 1;
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.PersAlgoDate.prototype.getCalendar = function() {
	return "persian-algo";
};

// register with the factory method
ilib.Date._constructors["persian-algo"] = ilib.Date.PersAlgoDate;
/*
 * astro.js - Static functions to support astronomical calculations
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends
ilibglobal.js
date.js 
*/

/*
 * These routines were derived from a public domain set of JavaScript 
 * functions for positional astronomy by John Walker of Fourmilab, 
 * September 1999.
 */

/**
 * Convert degrees to radians.
 * 
 * @static
 * @param {number} d angle in degrees
 * @return {number} angle in radians 
 */
ilib.Date._dtr = function(d) {
	return (d * Math.PI) / 180.0;
};

/**
 * Convert radians to degrees.
 * 
 * @static
 * @param {number} r angle in radians
 * @return {number} angle in degrees 
 */
ilib.Date._rtd = function(r) {
	return (r * 180.0) / Math.PI;
};

/**
 * Return the cosine of an angle given in degrees.
 * @param {number} d angle in degrees
 * @return {number} cosine of the angle.
 */  
ilib.Date._dcos = function(d) {
	return Math.cos(ilib.Date._dtr(d));
};

/**
 * Return the sine of an angle given in degrees.
 * @param {number} d angle in degrees
 * @return {number} cosine of the angle.
 */  
ilib.Date._dsin = function(d) {
	return Math.sin(ilib.Date._dtr(d));
};

/**
 * Range reduce angle in degrees.
 * 
 * @static
 * @param {number} a angle to reduce
 * @return {number} the reduced angle  
 */
ilib.Date._fixangle = function(a) {
	return a - 360.0 * (Math.floor(a / 360.0));
};

/**
 * Range reduce angle in radians.
 * 
 * @static
 * @param {number} a angle to reduce
 * @return {number} the reduced angle  
 */
ilib.Date._fixangr = function(a) {
	return a - (2 * Math.PI) * (Math.floor(a / (2 * Math.PI)));
};

//  Periodic terms to obtain true time
ilib.Date._EquinoxpTerms = [ 
	485, 324.96, 1934.136, 203, 337.23, 32964.467,
	199, 342.08, 20.186, 182, 27.85, 445267.112, 156, 73.14, 45036.886,
	136, 171.52, 22518.443, 77, 222.54, 65928.934, 74, 296.72, 3034.906,
	70, 243.58, 9037.513, 58, 119.81, 33718.147, 52, 297.17, 150.678, 50,
	21.02, 2281.226, 45, 247.54, 29929.562, 44, 325.15, 31555.956, 29,
	60.93, 4443.417, 18, 155.12, 67555.328, 17, 288.79, 4562.452, 16,
	198.04, 62894.029, 14, 199.76, 31436.921, 12, 95.39, 14577.848, 12,
	287.11, 31931.756, 12, 320.81, 34777.259, 9, 227.73, 1222.114, 8,
	15.45, 16859.074
];

ilib.Date._JDE0tab1000 = [ 
	[ 1721139.29189, 365242.13740, 0.06134, 0.00111, -0.00071 ],
	[ 1721233.25401, 365241.72562, -0.05323, 0.00907, 0.00025 ],
	[ 1721325.70455, 365242.49558, -0.11677, -0.00297, 0.00074 ],
	[ 1721414.39987, 365242.88257, -0.00769, -0.00933, -0.00006 ] 
];

ilib.Date._JDE0tab2000 = [ 
	[ 2451623.80984, 365242.37404, 0.05169, -0.00411, -0.00057 ],
	[ 2451716.56767, 365241.62603, 0.00325, 0.00888, -0.00030 ],
	[ 2451810.21715, 365242.01767, -0.11575, 0.00337, 0.00078 ],
	[ 2451900.05952, 365242.74049, -0.06223, -0.00823, 0.00032 ] 
];

/**
 * Determine the Julian Ephemeris Day of an equinox or solstice.  The "which" 
 * argument selects the item to be computed:
 * 
 * <ul>
 * <li>0   March equinox
 * <li>1   June solstice
 * <li>2   September equinox
 * <li>3   December solstice
 * </ul>
 * 
 * @static
 * @param {number} year Gregorian year to calculate for
 * @param {number} which Which equinox or solstice to calculate
 */
ilib.Date._equinox = function(year, which) {
	var deltaL, i, j, JDE0, JDE, JDE0tab, S, T, W, Y;

	/*  Initialize terms for mean equinox and solstices.  We
	    have two sets: one for years prior to 1000 and a second
	    for subsequent years.  */

	if (year < 1000) {
		JDE0tab = ilib.Date._JDE0tab1000;
		Y = year / 1000;
	} else {
		JDE0tab = ilib.Date._JDE0tab2000;
		Y = (year - 2000) / 1000;
	}

	JDE0 = JDE0tab[which][0] + (JDE0tab[which][1] * Y)
			+ (JDE0tab[which][2] * Y * Y) + (JDE0tab[which][3] * Y * Y * Y)
			+ (JDE0tab[which][4] * Y * Y * Y * Y);

	//document.debug.log.value += "JDE0 = " + JDE0 + "\n";

	T = (JDE0 - 2451545.0) / 36525;
	//document.debug.log.value += "T = " + T + "\n";
	W = (35999.373 * T) - 2.47;
	//document.debug.log.value += "W = " + W + "\n";
	deltaL = 1 + (0.0334 * ilib.Date._dcos(W)) + (0.0007 * ilib.Date._dcos(2 * W));
	//document.debug.log.value += "deltaL = " + deltaL + "\n";

	//  Sum the periodic terms for time T

	S = 0;
	j = 0;
	for (i = 0; i < 24; i++) {
		S += ilib.Date._EquinoxpTerms[j]
				* ilib.Date._dcos(ilib.Date._EquinoxpTerms[j + 1] + (ilib.Date._EquinoxpTerms[j + 2] * T));
		j += 3;
	}

	//document.debug.log.value += "S = " + S + "\n";
	//document.debug.log.value += "Corr = " + ((S * 0.00001) / deltaL) + "\n";

	JDE = JDE0 + ((S * 0.00001) / deltaL);

	return JDE;
};

/*  Table of observed Delta T values at the beginning of
even numbered years from 1620 through 2002.  */

ilib.Date._deltaTtab = [ 
    121, 112, 103, 95, 88, 82, 77, 72, 68, 63, 60, 56,
	53, 51, 48, 46, 44, 42, 40, 38, 35, 33, 31, 29, 26, 24, 22, 20, 18, 16,
	14, 12, 11, 10, 9, 8, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10,
	10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13,
	14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15,
	15, 14, 13, 13.1, 12.5, 12.2, 12, 12, 12, 12, 12, 12, 11.9, 11.6, 11,
	10.2, 9.2, 8.2, 7.1, 6.2, 5.6, 5.4, 5.3, 5.4, 5.6, 5.9, 6.2, 6.5, 6.8,
	7.1, 7.3, 7.5, 7.6, 7.7, 7.3, 6.2, 5.2, 2.7, 1.4, -1.2, -2.8, -3.8,
	-4.8, -5.5, -5.3, -5.6, -5.7, -5.9, -6, -6.3, -6.5, -6.2, -4.7, -2.8,
	-0.1, 2.6, 5.3, 7.7, 10.4, 13.3, 16, 18.2, 20.2, 21.1, 22.4, 23.5,
	23.8, 24.3, 24, 23.9, 23.9, 23.7, 24, 24.3, 25.3, 26.2, 27.3, 28.2,
	29.1, 30, 30.7, 31.4, 32.2, 33.1, 34, 35, 36.5, 38.3, 40.2, 42.2, 44.5,
	46.5, 48.5, 50.5, 52.2, 53.8, 54.9, 55.8, 56.9, 58.3, 60, 61.6, 63, 65,
	66.6 
];

/**  
 * Determine the difference, in seconds, between dynamical time and universal time.
 * 
 * @static
 * @param {number} year to calculate the difference for
 * @return {number} difference in seconds between dynamical time and universal time  
 */
ilib.Date._deltat = function (year) {
	var dt, f, i, t;

	if ((year >= 1620) && (year <= 2000)) {
		i = Math.floor((year - 1620) / 2);
		f = ((year - 1620) / 2) - i; /* Fractional part of year */
		dt = ilib.Date._deltaTtab[i] + ((ilib.Date._deltaTtab[i + 1] - ilib.Date._deltaTtab[i]) * f);
	} else {
		t = (year - 2000) / 100;
		if (year < 948) {
			dt = 2177 + (497 * t) + (44.1 * t * t);
		} else {
			dt = 102 + (102 * t) + (25.3 * t * t);
			if ((year > 2000) && (year < 2100)) {
				dt += 0.37 * (year - 2100);
			}
		}
	}
	return dt;
};

ilib.Date._oterms = [
	-4680.93, -1.55, 1999.25, -51.38, -249.67, 
	-39.05, 7.12, 27.87, 5.79, 2.45 
];

/**
 * Calculate the obliquity of the ecliptic for a given
 * Julian date.  This uses Laskar's tenth-degree
 * polynomial fit (J. Laskar, Astronomy and
 * Astrophysics, Vol. 157, page 68 [1986]) which is
 * accurate to within 0.01 arc second between AD 1000
 * and AD 3000, and within a few seconds of arc for
 * +/-10000 years around AD 2000.  If we're outside the
 * range in which this fit is valid (deep time) we
 * simply return the J2000 value of the obliquity, which
 * happens to be almost precisely the mean.
 * 
 * @static
 * @param {number} jd Julian Day to calculate the obliquity for
 * @return {number} the obliquity
 */
ilib.Date._obliqeq = function (jd) {
	var eps, u, v, i;

 	v = u = (jd - 2451545.0) / 3652500.0;

 	eps = 23 + (26 / 60.0) + (21.448 / 3600.0);

 	if (Math.abs(u) < 1.0) {
 		for (i = 0; i < 10; i++) {
 			eps += (ilib.Date._oterms[i] / 3600.0) * v;
 			v *= u;
 		}
 	}
 	return eps;
};

/**
 * Return the position of the sun.  We return
 * intermediate values because they are useful in a
 * variety of other contexts.
 * @param {number} jd find the position of sun on this Julian Day
 * @return {Object} the position of the sun and many intermediate
 * values   
 */
ilib.Date._sunpos = function(jd) {
	var ret = {}, 
		T, T2, Omega, epsilon, epsilon0;

	T = (jd - 2451545.0) / 36525.0;
	//document.debug.log.value += "Sunpos.  T = " + T + "\n";
	T2 = T * T;
	ret.meanLongitude = 280.46646 + (36000.76983 * T) + (0.0003032 * T2);
	//document.debug.log.value += "ret.meanLongitude = " + ret.meanLongitude + "\n";
	ret.meanLongitude = ilib.Date._fixangle(ret.meanLongitude);
	//document.debug.log.value += "ret.meanLongitude = " + ret.meanLongitude + "\n";
	ret.meanAnomaly = 357.52911 + (35999.05029 * T) + (-0.0001537 * T2);
	//document.debug.log.value += "ret.meanAnomaly = " + ret.meanAnomaly + "\n";
	ret.meanAnomaly = ilib.Date._fixangle(ret.meanAnomaly);
	//document.debug.log.value += "ret.meanAnomaly = " + ret.meanAnomaly + "\n";
	ret.eccentricity = 0.016708634 + (-0.000042037 * T) + (-0.0000001267 * T2);
	//document.debug.log.value += "e = " + e + "\n";
	ret.equationOfCenter = ((1.914602 + (-0.004817 * T) + (-0.000014 * T2)) * ilib.Date._dsin(ret.meanAnomaly))
			+ ((0.019993 - (0.000101 * T)) * ilib.Date._dsin(2 * ret.meanAnomaly))
			+ (0.000289 * ilib.Date._dsin(3 * ret.meanAnomaly));
	//document.debug.log.value += "ret.equationOfCenter = " + ret.equationOfCenter + "\n";
	ret.sunLongitude = ret.meanLongitude + ret.equationOfCenter;
	//document.debug.log.value += "ret.sunLongitude = " + ret.sunLongitude + "\n";
	ret.sunAnomaly = ret.meanAnomaly + ret.equationOfCenter;
	//document.debug.log.value += "ret.sunAnomaly = " + ret.sunAnomaly + "\n";
	ret.sunRadius = (1.000001018 * (1 - (ret.eccentricity * ret.eccentricity))) / (1 + (ret.eccentricity * ilib.Date._dcos(ret.sunAnomaly)));
	//document.debug.log.value += "ret.sunRadius = " + ret.sunRadius + "\n";
	Omega = 125.04 - (1934.136 * T);
	//document.debug.log.value += "Omega = " + Omega + "\n";
	ret.apparentLong = ret.sunLongitude + (-0.00569) + (-0.00478 * ilib.Date._dsin(Omega));
	//document.debug.log.value += "ret.apparentLong = " + ret.apparentLong + "\n";
	epsilon0 = ilib.Date._obliqeq(jd);
	//document.debug.log.value += "epsilon0 = " + epsilon0 + "\n";
	epsilon = epsilon0 + (0.00256 * ilib.Date._dcos(Omega));
	//document.debug.log.value += "epsilon = " + epsilon + "\n";
	ret.rightAscension = ilib.Date._rtd(Math.atan2(ilib.Date._dcos(epsilon0) * ilib.Date._dsin(ret.sunLongitude), ilib.Date._dcos(ret.sunLongitude)));
	//document.debug.log.value += "ret.rightAscension = " + ret.rightAscension + "\n";
	ret.rightAscension = ilib.Date._fixangle(ret.rightAscension);
	////document.debug.log.value += "ret.rightAscension = " + ret.rightAscension + "\n";
	ret.decliation = ilib.Date._rtd(Math.asin(ilib.Date._dsin(epsilon0) * ilib.Date._dsin(ret.sunLongitude)));
	////document.debug.log.value += "ret.decliation = " + ret.decliation + "\n";
	ret.apparentRightAscension = ilib.Date._rtd(Math.atan2(ilib.Date._dcos(epsilon) * ilib.Date._dsin(ret.apparentLong), ilib.Date._dcos(ret.apparentLong)));
	//document.debug.log.value += "ret.apparentRightAscension = " + ret.apparentRightAscension + "\n";
	ret.apparentRightAscension = ilib.Date._fixangle(ret.apparentRightAscension);
	//document.debug.log.value += "ret.apparentRightAscension = " + ret.apparentRightAscension + "\n";
	ret.apparentDecliation = ilib.Date._rtd(Math.asin(ilib.Date._dsin(epsilon) * ilib.Date._dsin(ret.apparentLong)));
	//document.debug.log.value += "ret.apparentDecliation = " + ret.apparentDecliation + "\n";

	// Angular quantities are expressed in decimal degrees
	return ret;
	
	/*
	return {
		meanLongitude: L0, //  [0] Geometric mean longitude of the Sun
		meanAnomaly: M, //  [1] Mean anomaly of the Sun
		eccentricity: e, //  [2] Eccentricity of the Earth's orbit
		equationOfCenter: C, //  [3] Sun's equation of the Centre
		sunLongitude: sunLong, //  [4] Sun's true longitude
		sunAnomaly: sunAnomaly, //  [5] Sun's true anomaly
		sunRadius: sunR, //  [6] Sun's radius vector in AU
		apparentLong: Lambda, //  [7] Sun's apparent longitude at true equinox of the date
		rightAscension: Alpha, //  [8] Sun's true right ascension
		declination: Delta, //  [9] Sun's true declination
		apparentRightAscension: AlphaApp, // [10] Sun's apparent right ascension
		apparentDecliation: DeltaApp // [11] Sun's apparent declination
	};
	*/
};

ilib.Date._nutArgMult = [ 
    0, 0, 0, 0, 1, -2, 0, 0, 2, 2, 0, 0, 0, 2, 2, 0, 0,
	0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, -2, 1, 0, 2, 2, 0, 0, 0, 2, 1,
	0, 0, 1, 2, 2, -2, -1, 0, 2, 2, -2, 0, 1, 0, 0, -2, 0, 0, 2, 1, 0, 0,
	-1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, -1, 2, 2, 0, 0, -1, 0, 1,
	0, 0, 1, 2, 1, -2, 0, 2, 0, 0, 0, 0, -2, 2, 1, 2, 0, 0, 2, 2, 0, 0, 2,
	2, 2, 0, 0, 2, 0, 0, -2, 0, 1, 2, 2, 0, 0, 0, 2, 0, -2, 0, 0, 2, 0, 0,
	0, -1, 2, 1, 0, 2, 0, 0, 0, 2, 0, -1, 0, 1, -2, 2, 0, 2, 2, 0, 1, 0, 0,
	1, -2, 0, 1, 0, 1, 0, -1, 0, 0, 1, 0, 0, 2, -2, 0, 2, 0, -1, 2, 1, 2,
	0, 1, 2, 2, 0, 1, 0, 2, 2, -2, 1, 1, 0, 0, 0, -1, 0, 2, 2, 2, 0, 0, 2,
	1, 2, 0, 1, 0, 0, -2, 0, 2, 2, 2, -2, 0, 1, 2, 1, 2, 0, -2, 0, 1, 2, 0,
	0, 0, 1, 0, -1, 1, 0, 0, -2, -1, 0, 2, 1, -2, 0, 0, 0, 1, 0, 0, 2, 2,
	1, -2, 0, 2, 0, 1, -2, 1, 0, 2, 1, 0, 0, 1, -2, 0, -1, 0, 1, 0, 0, -2,
	1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, -1, -1, 1, 0, 0, 0, 1, 1, 0,
	0, 0, -1, 1, 2, 2, 2, -1, -1, 2, 2, 0, 0, -2, 2, 2, 0, 0, 3, 2, 2, 2,
	-1, 0, 2, 2 
];

ilib.Date._nutArgCoeff = [ 
	-171996, -1742, 92095, 89, /*  0,  0,  0,  0,  1 */
	-13187, -16, 5736, -31, /* -2,  0,  0,  2,  2 */
	-2274, -2, 977, -5, /*  0,  0,  0,  2,  2 */
	2062, 2, -895, 5, /*  0,  0,  0,  0,  2 */
	1426, -34, 54, -1, /*  0,  1,  0,  0,  0 */
	712, 1, -7, 0, /*  0,  0,  1,  0,  0 */
	-517, 12, 224, -6, /* -2,  1,  0,  2,  2 */
	-386, -4, 200, 0, /*  0,  0,  0,  2,  1 */
	-301, 0, 129, -1, /*  0,  0,  1,  2,  2 */
	217, -5, -95, 3, /* -2, -1,  0,  2,  2 */
	-158, 0, 0, 0, /* -2,  0,  1,  0,  0 */
	129, 1, -70, 0, /* -2,  0,  0,  2,  1 */
	123, 0, -53, 0, /*  0,  0, -1,  2,  2 */
	63, 0, 0, 0, /*  2,  0,  0,  0,  0 */
	63, 1, -33, 0, /*  0,  0,  1,  0,  1 */
	-59, 0, 26, 0, /*  2,  0, -1,  2,  2 */
	-58, -1, 32, 0, /*  0,  0, -1,  0,  1 */
	-51, 0, 27, 0, /*  0,  0,  1,  2,  1 */
	48, 0, 0, 0, /* -2,  0,  2,  0,  0 */
	46, 0, -24, 0, /*  0,  0, -2,  2,  1 */
	-38, 0, 16, 0, /*  2,  0,  0,  2,  2 */
	-31, 0, 13, 0, /*  0,  0,  2,  2,  2 */
	29, 0, 0, 0, /*  0,  0,  2,  0,  0 */
	29, 0, -12, 0, /* -2,  0,  1,  2,  2 */
	26, 0, 0, 0, /*  0,  0,  0,  2,  0 */
	-22, 0, 0, 0, /* -2,  0,  0,  2,  0 */
	21, 0, -10, 0, /*  0,  0, -1,  2,  1 */
	17, -1, 0, 0, /*  0,  2,  0,  0,  0 */
	16, 0, -8, 0, /*  2,  0, -1,  0,  1 */
	-16, 1, 7, 0, /* -2,  2,  0,  2,  2 */
	-15, 0, 9, 0, /*  0,  1,  0,  0,  1 */
	-13, 0, 7, 0, /* -2,  0,  1,  0,  1 */
	-12, 0, 6, 0, /*  0, -1,  0,  0,  1 */
	11, 0, 0, 0, /*  0,  0,  2, -2,  0 */
	-10, 0, 5, 0, /*  2,  0, -1,  2,  1 */
	-8, 0, 3, 0, /*  2,  0,  1,  2,  2 */
	7, 0, -3, 0, /*  0,  1,  0,  2,  2 */
	-7, 0, 0, 0, /* -2,  1,  1,  0,  0 */
	-7, 0, 3, 0, /*  0, -1,  0,  2,  2 */
	-7, 0, 3, 0, /*  2,  0,  0,  2,  1 */
	6, 0, 0, 0, /*  2,  0,  1,  0,  0 */
	6, 0, -3, 0, /* -2,  0,  2,  2,  2 */
	6, 0, -3, 0, /* -2,  0,  1,  2,  1 */
	-6, 0, 3, 0, /*  2,  0, -2,  0,  1 */
	-6, 0, 3, 0, /*  2,  0,  0,  0,  1 */
	5, 0, 0, 0, /*  0, -1,  1,  0,  0 */
	-5, 0, 3, 0, /* -2, -1,  0,  2,  1 */
	-5, 0, 3, 0, /* -2,  0,  0,  0,  1 */
	-5, 0, 3, 0, /*  0,  0,  2,  2,  1 */
	4, 0, 0, 0, /* -2,  0,  2,  0,  1 */
	4, 0, 0, 0, /* -2,  1,  0,  2,  1 */
	4, 0, 0, 0, /*  0,  0,  1, -2,  0 */
	-4, 0, 0, 0, /* -1,  0,  1,  0,  0 */
	-4, 0, 0, 0, /* -2,  1,  0,  0,  0 */
	-4, 0, 0, 0, /*  1,  0,  0,  0,  0 */
	3, 0, 0, 0, /*  0,  0,  1,  2,  0 */
	-3, 0, 0, 0, /* -1, -1,  1,  0,  0 */
	-3, 0, 0, 0, /*  0,  1,  1,  0,  0 */
	-3, 0, 0, 0, /*  0, -1,  1,  2,  2 */
	-3, 0, 0, 0, /*  2, -1, -1,  2,  2 */
	-3, 0, 0, 0, /*  0,  0, -2,  2,  2 */
	-3, 0, 0, 0, /*  0,  0,  3,  2,  2 */
	-3, 0, 0, 0 /*  2, -1,  0,  2,  2 */
];

/**
 * Calculate the nutation in longitude, deltaPsi, and obliquity, 
 * deltaEpsilon for a given Julian date jd. Results are returned as an object
 * giving deltaPsi and deltaEpsilon in degrees.
 * 
 * @static
 * @param {number} jd calculate the nutation of this Julian Day
 * @return {Object} the deltaPsi and deltaEpsilon of the nutation
 */
ilib.Date._nutation = function(jd) {
	var i, j, 
		t = (jd - 2451545.0) / 36525.0, 
		t2, t3, to10, 
		ta = [], 
		dp = 0, 
		de = 0, 
		ang,
		ret = {};

	t3 = t * (t2 = t * t);

	/*
	 * Calculate angles. The correspondence between the elements of our array
	 * and the terms cited in Meeus are:
	 * 
	 * ta[0] = D ta[0] = M ta[2] = M' ta[3] = F ta[4] = \Omega
	 * 
	 */

	ta[0] = ilib.Date._dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0);
	ta[1] = ilib.Date._dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0);
	ta[2] = ilib.Date._dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0);
	ta[3] = ilib.Date._dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270);
	ta[4] = ilib.Date._dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0);

	/*
	 * Range reduce the angles in case the sine and cosine functions don't do it
	 * as accurately or quickly.
	 */

	for (i = 0; i < 5; i++) {
		ta[i] = ilib.Date._fixangr(ta[i]);
	}

	to10 = t / 10.0;
	for (i = 0; i < 63; i++) {
		ang = 0;
		for (j = 0; j < 5; j++) {
			if (ilib.Date._nutArgMult[(i * 5) + j] != 0) {
				ang += ilib.Date._nutArgMult[(i * 5) + j] * ta[j];
			}
		}
		dp += (ilib.Date._nutArgCoeff[(i * 4) + 0] + ilib.Date._nutArgCoeff[(i * 4) + 1] * to10) * Math.sin(ang);
		de += (ilib.Date._nutArgCoeff[(i * 4) + 2] + ilib.Date._nutArgCoeff[(i * 4) + 3] * to10) * Math.cos(ang);
	}

	/*
	 * Return the result, converting from ten thousandths of arc seconds to
	 * radians in the process.
	 */

	ret.deltaPsi = dp / (3600.0 * 10000.0);
	ret.deltaEpsilon = de / (3600.0 * 10000.0);

	return ret;
};

/**
 * Returns the equation of time as a fraction of a day.
 * 
 * @static
 * @param {number} jd the Julian Day of the day to calculate for
 * @return {number} the equation of time for the given day  
 */
ilib.Date._equationOfTime = function(jd) {
	var alpha, deltaPsi, E, epsilon, L0, tau, pos;

	// 2451545.0 is the Julian day of J2000 epoch
	// 365250.0 is the number of days in a Julian millenium
	tau = (jd - 2451545.0) / 365250.0;
	//document.debug.log.value += "equationOfTime.  tau = " + tau + "\n";
	L0 = 280.4664567 + (360007.6982779 * tau) + (0.03032028 * tau * tau)
			+ ((tau * tau * tau) / 49931)
			+ (-((tau * tau * tau * tau) / 15300))
			+ (-((tau * tau * tau * tau * tau) / 2000000));
	//document.debug.log.value += "L0 = " + L0 + "\n";
	L0 = ilib.Date._fixangle(L0);
	//document.debug.log.value += "L0 = " + L0 + "\n";
	pos = ilib.Date._sunpos(jd);
	alpha = pos.apparentRightAscension;
	//document.debug.log.value += "alpha = " + alpha + "\n";
	var nut = ilib.Date._nutation(jd);
	deltaPsi = nut.deltaPsi;
	//document.debug.log.value += "deltaPsi = " + deltaPsi + "\n";
	epsilon = ilib.Date._obliqeq(jd) + nut.deltaEpsilon;
	//document.debug.log.value += "epsilon = " + epsilon + "\n";
	E = L0 + (-0.0057183) + (-alpha) + (deltaPsi * ilib.Date._dcos(epsilon));
	//document.debug.log.value += "E = " + E + "\n";
	E = E - 20.0 * (Math.floor(E / 20.0));
	//document.debug.log.value += "Efixed = " + E + "\n";
	E = E / (24 * 60);
	//document.debug.log.value += "Eday = " + E + "\n";

	return E;
};

/*
 * persratadie.js - Represent a rata die date in the Persian calendar
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js
util/utils.js
calendar/ratadie.js
calendar/astro.js
calendar/gregoriandate.js
*/

/**
 * Construct a new Persian RD date number object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Persian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above are present, then the RD is calculate based on 
 * the current date at the time of instantiation. <p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends persiandate.js
 * 
 * @private
 * @class
 * @constructor
 * @extends ilib.Date.RataDie
 * @param {Object=} params parameters that govern the settings and behaviour of this Persian RD date
 */
ilib.Date.PersAstroRataDie = function(params) {
	this.rd = undefined;
	ilib.Date.RataDie.call(this, params);
};

ilib.Date.PersAstroRataDie.prototype = new ilib.Date.RataDie();
ilib.Date.PersAstroRataDie.prototype.parent = ilib.Date.RataDie;
ilib.Date.PersAstroRataDie.prototype.constructor = ilib.Date.PersAstroRataDie;

/**
 * The difference between a zero Julian day and the first Persian date
 * @private
 * @const
 * @type number
 */
ilib.Date.PersAstroRataDie.prototype.epoch = 1948319.5;

/**
 * @protected 
 */
ilib.Date.PersAstroRataDie.prototype._tehranEquinox = function(year) {
    var equJED, equJD, equAPP, equTehran, dtTehran;

    //  March equinox in dynamical time
    equJED = ilib.Date._equinox(year, 0);

    //  Correct for delta T to obtain Universal time
    equJD = equJED - (ilib.Date._deltat(year) / (24 * 60 * 60));

    //  Apply the equation of time to yield the apparent time at Greenwich
    equAPP = equJD + ilib.Date._equationOfTime(equJED);

    /*  
     * Finally, we must correct for the constant difference between
     * the Greenwich meridian and the time zone standard for Iran 
     * Standard time, 52 degrees 30 minutes to the East.
     */

    dtTehran = 52.5 / 360;
    equTehran = equAPP + dtTehran;

    return equTehran;
};

/**
 * Calculate the year based on the given Julian day.
 * @protected
 * @param {number} jd the Julian day to get the year for
 * @return {{year:number,equinox:number}} the year and the last equinox
 */
ilib.Date.PersAstroRataDie.prototype._getYear = function(jd) {
	var gd = new ilib.Date.GregDate({julianday: jd});
    var guess = gd.getYears() - 2,
    	nexteq,
    	ret = {};

    //ret.equinox = Math.floor(this._tehranEquinox(guess));
    ret.equinox = this._tehranEquinox(guess);
	while (ret.equinox > jd) {
	    guess--;
	    // ret.equinox = Math.floor(this._tehranEquinox(guess));
	    ret.equinox = this._tehranEquinox(guess);
	}
	nexteq = ret.equinox - 1;
	// if the equinox falls after noon, then the day after that is the start of the 
	// next year, so truncate the JD to get the noon of the day before the day with 
	//the equinox on it, then add 0.5 to get the midnight of that day 
	while (!(Math.floor(ret.equinox) + 0.5 <= jd && jd < Math.floor(nexteq) + 0.5)) {
	    ret.equinox = nexteq;
	    guess++;
	    // nexteq = Math.floor(this._tehranEquinox(guess));
	    nexteq = this._tehranEquinox(guess);
	}
	
	// Mean solar tropical year is 365.24219878 days
	ret.year = Math.round((ret.equinox - this.epoch - 1) / 365.24219878) + 1;
	
	return ret;
};

/**
 * Calculate the Rata Die (fixed day) number of the given date from the
 * date components.
 *
 * @protected
 * @param {Object} date the date components to calculate the RD from
 */
ilib.Date.PersAstroRataDie.prototype._setDateComponents = function(date) {
    var adr, guess, jd;

    // Mean solar tropical year is 365.24219878 days 
    guess = this.epoch + 1 + 365.24219878 * (date.year - 2);
    adr = {year: date.year - 1, equinox: 0};

    while (adr.year < date.year) {
        adr = this._getYear(guess);
        guess = adr.equinox + (365.24219878 + 2);
    }

    jd = Math.floor(adr.equinox) +
            ((date.month <= 7) ?
                ((date.month - 1) * 31) :
                (((date.month - 1) * 30) + 6)
            ) +
    	    (date.day - 1 + 0.5); // add 0.5 so that we convert JDs, which start at noon to RDs which start at midnight
    
	jd += (date.hour * 3600000 +
			date.minute * 60000 +
			date.second * 1000 +
			date.millisecond) /
			86400000;

    this.rd = jd - this.epoch;
};

/**
 * Return the rd number of the particular day of the week on or before the 
 * given rd. eg. The Sunday on or before the given rd.
 * @private
 * @param {number} rd the rata die date of the reference date
 * @param {number} dayOfWeek the day of the week that is being sought relative 
 * to the current date
 * @return {number} the rd of the day of the week
 */
ilib.Date.PersAstroRataDie.prototype._onOrBefore = function(rd, dayOfWeek) {
	return rd - ilib.mod(Math.floor(rd) - dayOfWeek - 3, 7);
};

/*
 * persianastro.js - Represent a Persian astronomical (Hijjri) calendar object.
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/* !depends 
calendar/astro.js 
calendar.js 
locale.js 
date.js 
julianday.js 
util/utils.js
calendar/persratadie.js 
*/

/**
 * @class
 * Construct a new Persian astronomical (Hijjri) calendar object. This class encodes 
 * information about a Persian calendar. This class differs from the 
 * Persian calendar in that the leap years are calculated based on the
 * astronomical observations of the sun in Teheran, instead of calculating
 * the leap years based on a regular cyclical rhythm algorithm.<p>
 * 
 * Depends directive: !depends persianastro.js
 * 
 * @constructor
 * @implements ilib.Cal
 */
ilib.Cal.Persian = function() {
	this.type = "persian";
};

/**
 * @private
 * @const
 * @type Array.<number> 
 * the lengths of each month 
 */
ilib.Cal.Persian.monthLengths = [
	31,  // Farvardin
	31,  // Ordibehesht
	31,  // Khordad
	31,  // Tir
	31,  // Mordad
	31,  // Shahrivar
	30,  // Mehr
	30,  // Aban
	30,  // Azar
	30,  // Dey
	30,  // Bahman
	29   // Esfand
];

/**
 * Return the number of months in the given year. The number of months in a year varies
 * for some luni-solar calendars because in some years, an extra month is needed to extend the 
 * days in a year to an entire solar year. The month is represented as a 1-based number
 * where 1=first month, 2=second month, etc.
 * 
 * @param {number} year a year for which the number of months is sought
 * @return {number} The number of months in the given year
 */
ilib.Cal.Persian.prototype.getNumMonths = function(year) {
	return 12;
};

/**
 * Return the number of days in a particular month in a particular year. This function
 * can return a different number for a month depending on the year because of things
 * like leap years.
 * 
 * @param {number} month the month for which the length is sought
 * @param {number} year the year within which that month can be found
 * @return {number} the number of days within the given month in the given year
 */
ilib.Cal.Persian.prototype.getMonLength = function(month, year) {
	if (month !== 12 || !this.isLeapYear(year)) {
		return ilib.Cal.Persian.monthLengths[month-1];
	} else {
		// Month 12, Esfand, has 30 days instead of 29 in leap years
		return 30;
	}
};

/**
 * Return true if the given year is a leap year in the Persian astronomical calendar.
 * @param {number} year the year for which the leap year information is being sought
 * @return {boolean} true if the given year is a leap year
 */
ilib.Cal.Persian.prototype.isLeapYear = function(year) {
	var rdNextYear = new ilib.Date.PersAstroRataDie({
		cal: this,
		year: year + 1,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	var rdThisYear = new ilib.Date.PersAstroRataDie({
		cal: this,
		year: year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	}); 
    return (rdNextYear.getRataDie() - rdThisYear.getRataDie()) > 365;
};

/**
 * Return the type of this calendar.
 * 
 * @return {string} the name of the type of this calendar 
 */
ilib.Cal.Persian.prototype.getType = function() {
	return this.type;
};

/**
 * Return a date instance for this calendar type using the given
 * options.
 * @param {Object} options options controlling the construction of 
 * the date instance
 * @return {ilib.Date} a date appropriate for this calendar type
 */
ilib.Cal.Persian.prototype.newDateInstance = function (options) {
	return new ilib.Date.PersDate(options);
};

/* register this calendar for the factory method */
ilib.Cal._constructors["persian"] = ilib.Cal.Persian;

/*
 * persianastrodate.js - Represent a date in the Persian astronomical (Hijjri) calendar
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
date.js
calendar/persratadie.js
calendar/persianastro.js 
util/utils.js
util/search.js 
localeinfo.js 
julianday.js 
*/

/**
 * @class
 * 
 * Construct a new Persian astronomical date object. The constructor parameters can 
 * contain any of the following properties:
 * 
 * <ul>
 * <li><i>unixtime<i> - sets the time of this instance according to the given 
 * unix time. Unix time is the number of milliseconds since midnight on Jan 1, 1970, Gregorian
 * 
 * <li><i>julianday</i> - sets the time of this instance according to the given
 * Julian Day instance or the Julian Day given as a float
 * 
 * <li><i>year</i> - any integer, including 0
 * 
 * <li><i>month</i> - 1 to 12, where 1 means Farvardin, 2 means Ordibehesht, etc.
 * 
 * <li><i>day</i> - 1 to 31
 * 
 * <li><i>hour</i> - 0 to 23. A formatter is used to display 12 hour clocks, but this representation 
 * is always done with an unambiguous 24 hour representation
 * 
 * <li><i>minute</i> - 0 to 59
 * 
 * <li><i>second</i> - 0 to 59
 * 
 * <li><i>millisecond</i> - 0 to 999
 * 
 * <li><i>timezone</i> - the ilib.TimeZone instance or time zone name as a string 
 * of this persian date. The date/time is kept in the local time. The time zone
 * is used later if this date is formatted according to a different time zone and
 * the difference has to be calculated, or when the date format has a time zone
 * component in it.
 * 
 * <li><i>locale</i> - locale for this persian date. If the time zone is not 
 * given, it can be inferred from this locale. For locales that span multiple
 * time zones, the one with the largest population is chosen as the one that 
 * represents the locale.
 * 
 * <li><i>date</i> - use the given intrinsic Javascript date to initialize this one.
 * </ul>
 *
 * If the constructor is called with another Persian date instance instead of
 * a parameter block, the other instance acts as a parameter block and its
 * settings are copied into the current instance.<p>
 * 
 * If the constructor is called with no arguments at all or if none of the 
 * properties listed above 
 * from <i>unixtime</i> through <i>millisecond</i> are present, then the date 
 * components are 
 * filled in with the current date at the time of instantiation. Note that if
 * you do not give the time zone when defaulting to the current time and the 
 * time zone for all of ilib was not set with <i>ilib.setTimeZone()</i>, then the
 * time zone will default to UTC ("Universal Time, Coordinated" or "Greenwich 
 * Mean Time").<p>
 * 
 * If any of the properties from <i>year</i> through <i>millisecond</i> are not
 * specified in the params, it is assumed that they have the smallest possible
 * value in the range for the property (zero or one).<p>
 * 
 * Depends directive: !depends persiandate.js
 * 
 * @constructor
 * @extends ilib.Date
 * @param {Object=} params parameters that govern the settings and behaviour of this Persian date
 */
ilib.Date.PersDate = function(params) {
	this.cal = new ilib.Cal.Persian();
	this.timezone = "local";
	
	if (params) {
		if (params.locale) {
			this.locale = (typeof(params.locale) === 'string') ? new ilib.Locale(params.locale) : params.locale;
			var li = new ilib.LocaleInfo(this.locale);
			this.timezone = li.getTimeZone(); 
		}
		if (params.timezone) {
			this.timezone = params.timezone;
		}
		
		if (params.year || params.month || params.day || params.hour ||
				params.minute || params.second || params.millisecond ) {
			/**
			 * Year in the Persian calendar.
			 * @type number
			 */
			this.year = parseInt(params.year, 10) || 0;

			/**
			 * The month number, ranging from 1 to 12
			 * @type number
			 */
			this.month = parseInt(params.month, 10) || 1;

			/**
			 * The day of the month. This ranges from 1 to 31.
			 * @type number
			 */
			this.day = parseInt(params.day, 10) || 1;
			
			/**
			 * The hour of the day. This can be a number from 0 to 23, as times are
			 * stored unambiguously in the 24-hour clock.
			 * @type number
			 */
			this.hour = parseInt(params.hour, 10) || 0;

			/**
			 * The minute of the hours. Ranges from 0 to 59.
			 * @type number
			 */
			this.minute = parseInt(params.minute, 10) || 0;

			/**
			 * The second of the minute. Ranges from 0 to 59.
			 * @type number
			 */
			this.second = parseInt(params.second, 10) || 0;

			/**
			 * The millisecond of the second. Ranges from 0 to 999.
			 * @type number
			 */
			this.millisecond = parseInt(params.millisecond, 10) || 0;
			
			/**
			 * The day of the year. Ranges from 1 to 366.
			 * @type number
			 */
			this.dayOfYear = parseInt(params.dayOfYear, 10);

			if (typeof(params.dst) === 'boolean') {
				this.dst = params.dst;
			}
			
			this.rd = this.newRd(this);
			
			// add the time zone offset to the rd to convert to UTC
			if (!this.tz) {
				this.tz = new ilib.TimeZone({id: this.timezone});
			}
			// getOffsetMillis requires that this.year, this.rd, and this.dst 
			// are set in order to figure out which time zone rules apply and 
			// what the offset is at that point in the year
			this.offset = this.tz._getOffsetMillisWallTime(this) / 86400000;
			if (this.offset !== 0) {
				this.rd = this.newRd({
					rd: this.rd.getRataDie() - this.offset
				});
			}
		}
	}

	if (!this.rd) {
		this.rd = this.newRd(params);
		this._calcDateComponents();
	}
};

ilib.Date.PersDate.prototype = new ilib.Date({noinstance: true});
ilib.Date.PersDate.prototype.parent = ilib.Date;
ilib.Date.PersDate.prototype.constructor = ilib.Date.PersDate;

/**
 * @private
 * @const
 * @type Array.<number>
 * the cumulative lengths of each month, for a non-leap year 
 */
ilib.Date.PersDate.cumMonthLengths = [
    0,    // Farvardin
	31,   // Ordibehesht
	62,   // Khordad
	93,   // Tir
	124,  // Mordad
	155,  // Shahrivar
	186,  // Mehr
	216,  // Aban
	246,  // Azar
	276,  // Dey
	306,  // Bahman
	336,  // Esfand
	366
];

/**
 * Return a new RD for this date type using the given params.
 * @protected
 * @param {Object=} params the parameters used to create this rata die instance
 * @returns {ilib.Date.RataDie} the new RD instance for the given params
 */
ilib.Date.PersDate.prototype.newRd = function (params) {
	return new ilib.Date.PersAstroRataDie(params);
};

/**
 * Return the year for the given RD
 * @protected
 * @param {number} rd RD to calculate from 
 * @returns {number} the year for the RD
 */
ilib.Date.PersDate.prototype._calcYear = function(rd) {
	var julianday = rd + this.rd.epoch;
	return this.rd._getYear(julianday).year;
};

/**
 * @private
 * Calculate date components for the given RD date.
 */
ilib.Date.PersDate.prototype._calcDateComponents = function () {
	var remainder,
		rd = this.rd.getRataDie();
	
	this.year = this._calcYear(rd);
	
	if (typeof(this.offset) === "undefined") {
		// now offset the RD by the time zone, then recalculate in case we were 
		// near the year boundary
		if (!this.tz) {
			this.tz = new ilib.TimeZone({id: this.timezone});
		}
		this.offset = this.tz.getOffsetMillis(this) / 86400000;
	}
	
	if (this.offset !== 0) {
		rd += this.offset;
		this.year = this._calcYear(rd);
	}
	
	//console.log("PersDate.calcComponent: calculating for rd " + rd);
	//console.log("PersDate.calcComponent: year is " + ret.year);
	var yearStart = this.newRd({
		year: this.year,
		month: 1,
		day: 1,
		hour: 0,
		minute: 0,
		second: 0,
		millisecond: 0
	});
	remainder = rd - yearStart.getRataDie() + 1;
	
	this.dayOfYear = remainder;
	
	//console.log("PersDate.calcComponent: remainder is " + remainder);
	
	this.month = ilib.bsearch(Math.floor(remainder), ilib.Date.PersDate.cumMonthLengths);
	remainder -= ilib.Date.PersDate.cumMonthLengths[this.month-1];
	
	//console.log("PersDate.calcComponent: month is " + this.month + " and remainder is " + remainder);
	
	this.day = Math.floor(remainder);
	remainder -= this.day;
	
	//console.log("PersDate.calcComponent: day is " + this.day + " and remainder is " + remainder);
	
	// now convert to milliseconds for the rest of the calculation
	remainder = Math.round(remainder * 86400000);
	
	this.hour = Math.floor(remainder/3600000);
	remainder -= this.hour * 3600000;
	
	this.minute = Math.floor(remainder/60000);
	remainder -= this.minute * 60000;
	
	this.second = Math.floor(remainder/1000);
	remainder -= this.second * 1000;
	
	this.millisecond = remainder;
};

/**
 * Return the day of the week of this date. The day of the week is encoded
 * as number from 0 to 6, with 0=Sunday, 1=Monday, etc., until 6=Saturday.
 * 
 * @return {number} the day of the week
 */
ilib.Date.PersDate.prototype.getDayOfWeek = function() {
	var rd = Math.floor(this.getRataDie());
	return ilib.mod(rd-3, 7);
};

/**
 * Return the ordinal day of the year. Days are counted from 1 and proceed linearly up to 
 * 365, regardless of months or weeks, etc. That is, Farvardin 1st is day 1, and 
 * December 31st is 365 in regular years, or 366 in leap years.
 * @return {number} the ordinal day of the year
 */
ilib.Date.PersDate.prototype.getDayOfYear = function() {
	return ilib.Date.PersDate.cumMonthLengths[this.month-1] + this.day;
};

/**
 * Return the era for this date as a number. The value for the era for Persian 
 * calendars is -1 for "before the persian era" (BP) and 1 for "the persian era" (anno 
 * persico or AP). 
 * BP dates are any date before Farvardin 1, 1 AP. In the proleptic Persian calendar, 
 * there is a year 0, so any years that are negative or zero are BP.
 * @return {number} 1 if this date is in the common era, -1 if it is before the 
 * common era 
 */
ilib.Date.PersDate.prototype.getEra = function() {
	return (this.year < 1) ? -1 : 1;
};

/**
 * Return the name of the calendar that governs this date.
 * 
 * @return {string} a string giving the name of the calendar
 */
ilib.Date.PersDate.prototype.getCalendar = function() {
	return "persian";
};

// register with the factory method
ilib.Date._constructors["persian"] = ilib.Date.PersDate;
ilib.data.ctype = {"ideograph":[[4352,4607],[12353,12447],[12449,12543],[12549,12589],[12593,12686],[12704,12727],[12784,12799],[13312,19893],[19968,40907],[40960,42124],[43360,43388],[44032,55203],[55216,55291],[63744,64217],[65382,65437],[65440,65500]],"ideoother":[[12294,12294],[12348,12348],[12352,12352],[12448,12448],[12544,12548],[12590,12591],[12592,12592],[12687,12687],[12800,13055],[13056,13183],[13184,13311],[40908,40959],[42125,42191],[43389,43391],[55292,55295],[64218,64255]],"ascii":[[32,127]],"digit":[[48,57]],"xdigit":[[48,57],[65,70],[97,102]],"blank":[[9,9],[32,32]],"space":[[9,13],[133],[8232,8233]],"latin":[[0,591],[7680,7935],[11360,11391],[42784,43007]],"ipa":[[592,687],[7424,7551],[7552,7615]],"operators":[[8704,8959],[10752,11007]],"greek":[[880,1023],[7936,8191]],"cyrillic":[[1024,1327],[11744,11775],[42560,42655]],"arabic":[[1536,1791],[1872,1919],[64336,65023],[65136,65279]],"devanagari":[[2304,2431],[43232,43263]],"myanmar":[[4096,4255],[43616,43647]],"hangul":[[4352,4607],[44032,55215],[43360,43391],[55216,55295],[12592,12687]],"ethiopic":[[4608,5023],[11648,11743],[43776,43823]],"canadian":[[5120,5759],[6320,6399]],"combining":[[768,879],[7616,7679],[8400,8447]],"arrows":[[8592,8703],[11008,11263],[10224,10239],[10496,10623]],"cjk":[[19968,40959],[13312,19903],[131072,173791],[173824,177983],[177984,178207],[12272,12287]],"cjkcompatibility":[[13056,13311],[63744,64255],[65072,65103],[194560,195103]],"mathematical":[[119808,120831],[10176,10223],[10624,10751]],"privateuse":[[57344,63743],[983040,1048575],[1048576,1114111]],"variations":[[65024,65039],[917760,917999]],"bamum":[[42656,42751],[92160,92735]],"georgian":[[4256,4351],[11520,11567]],"punctuation":[[8192,8303],[11776,11903]],"katakana":[[12448,12543],[12784,12799],[110592,110847]],"bopomofo":[[12544,12591],[12704,12735]],"enclosedalpha":[[9312,9471],[127232,127487]],"cjkradicals":[[11904,12031],[12032,12255]],"yi":[[40960,42127],[42128,42191]],"linearb":[[65536,65663],[65664,65791]],"enclosedcjk":[[12800,13055],[127488,127743]],"spacing":[[688,767]],"armenian":[[1328,1423]],"hebrew":[[1424,1535]],"syriac":[[1792,1871]],"thaana":[[1920,1983]],"nko":[[1984,2047]],"samaritan":[[2048,2111]],"mandaic":[[2112,2143]],"bengali":[[2432,2559]],"gurmukhi":[[2560,2687]],"gujarati":[[2688,2815]],"oriya":[[2816,2943]],"tamil":[[2944,3071]],"telugu":[[3072,3199]],"kannada":[[3200,3327]],"malayalam":[[3328,3455]],"sinhala":[[3456,3583]],"thai":[[3584,3711]],"lao":[[3712,3839]],"tibetan":[[3840,4095]],"cherokee":[[5024,5119]],"ogham":[[5760,5791]],"runic":[[5792,5887]],"tagalog":[[5888,5919]],"hanunoo":[[5920,5951]],"buhid":[[5952,5983]],"tagbanwa":[[5984,6015]],"khmer":[[6016,6143]],"mongolian":[[6144,6319]],"limbu":[[6400,6479]],"taile":[[6480,6527]],"newtailue":[[6528,6623]],"khmersymbols":[[6624,6655]],"buginese":[[6656,6687]],"taitham":[[6688,6831]],"balinese":[[6912,7039]],"sundanese":[[7040,7103]],"batak":[[7104,7167]],"lepcha":[[7168,7247]],"olchiki":[[7248,7295]],"vedic":[[7376,7423]],"supersub":[[8304,8351]],"currency":[[8352,8399]],"letterlike":[[8448,8527]],"numbers":[[8528,8591]],"misc":[[8960,9215]],"controlpictures":[[9216,9279]],"ocr":[[9280,9311]],"box":[[9472,9599]],"block":[[9600,9631]],"geometric":[[9632,9727]],"miscsymbols":[[9728,9983],[127744,128511]],"dingbats":[[9984,10175]],"braille":[[10240,10495]],"glagolitic":[[11264,11359]],"coptic":[[11392,11519]],"tifinagh":[[11568,11647]],"cjkpunct":[[12288,12351]],"hiragana":[[12352,12447]],"kanbun":[[12688,12703]],"yijing":[[19904,19967]],"cjkstrokes":[[12736,12783]],"lisu":[[42192,42239]],"vai":[[42240,42559]],"modifiertone":[[42752,42783]],"sylotinagri":[[43008,43055]],"indicnumber":[[43056,43071]],"phagspa":[[43072,43135]],"saurashtra":[[43136,43231]],"kayahli":[[43264,43311]],"rejang":[[43312,43359]],"javanese":[[43392,43487]],"cham":[[43520,43615]],"taiviet":[[43648,43743]],"meeteimayek":[[43968,44031]],"presentation":[[64256,64335]],"vertical":[[65040,65055]],"halfmarks":[[65056,65071]],"small":[[65104,65135]],"width":[[65280,65519]],"specials":[[65520,65535]],"aegean":[[65792,65855]],"ancient":[[65936,65999]],"phaistosdisc":[[66000,66047]],"lycian":[[66176,66207]],"carian":[[66208,66271]],"olditalic":[[66304,66351]],"gothic":[[66352,66383]],"ugaritic":[[66432,66463]],"oldpersian":[[66464,66527]],"deseret":[[66560,66639]],"shavian":[[66640,66687]],"osmanya":[[66688,66735]],"cypriot":[[67584,67647]],"aramaic":[[67648,67679]],"phoenician":[[67840,67871]],"lydian":[[67872,67903]],"kharoshthi":[[68096,68191]],"oldsoutharabian":[[68192,68223]],"avestan":[[68352,68415]],"parthian":[[68416,68447]],"pahlavi":[[68448,68479]],"oldturkic":[[68608,68687]],"ruminumerals":[[69216,69247]],"brahmi":[[69632,69759]],"kaithi":[[69760,69839]],"cuneiform":[[73728,74751]],"cuneiformnumbers":[[74752,74879]],"hieroglyphs":[[77824,78895]],"byzantine musical":[[118784,119039]],"musicalsymbols":[[119040,119295]],"taixuanjing":[[119552,119647]],"rodnumerals":[[119648,119679]],"mahjong":[[126976,127023]],"domino":[[127024,127135]],"playingcards":[[127136,127231]],"emoticons":[[128512,128591]],"mapsymbols":[[128640,128767]],"alchemic":[[128768,128895]],"tags":[[917504,917631]],"greeknumbers":[[65856,65935]],"greekmusic":[[119296,119375]]};
/*
 * ctype.js - Character type definitions
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js

// !data ctype

/**
 * Provides a set of static routines that return information about characters.
 * These routines emulate the C-library ctype functions. The characters must be 
 * encoded in utf-16, as no other charsets are currently supported. Only the first
 * character of the given string is tested.
 * @namespace
 */
ilib.CType = {
	/**
	 * Actual implementation for withinRange. Searches the given object for ranges.
	 * The range names are taken from the Unicode range names in 
	 * http://www.unicode.org/Public/UNIDATA/extracted/DerivedGeneralCategory.txt
	 * 
	 * <ul>
	 * <li>Cn - Unassigned
	 * <li>Lu - Uppercase_Letter
	 * <li>Ll - Lowercase_Letter
	 * <li>Lt - Titlecase_Letter
	 * <li>Lm - Modifier_Letter
	 * <li>Lo - Other_Letter
	 * <li>Mn - Nonspacing_Mark
	 * <li>Me - Enclosing_Mark
	 * <li>Mc - Spacing_Mark
	 * <li>Nd - Decimal_Number
	 * <li>Nl - Letter_Number
	 * <li>No - Other_Number
	 * <li>Zs - Space_Separator
	 * <li>Zl - Line_Separator
	 * <li>Zp - Paragraph_Separator
	 * <li>Cc - Control
	 * <li>Cf - Format
	 * <li>Co - Private_Use
	 * <li>Cs - Surrogate
	 * <li>Pd - Dash_Punctuation
	 * <li>Ps - Open_Punctuation
	 * <li>Pe - Close_Punctuation
	 * <li>Pc - Connector_Punctuation
	 * <li>Po - Other_Punctuation
	 * <li>Sm - Math_Symbol
	 * <li>Sc - Currency_Symbol
	 * <li>Sk - Modifier_Symbol
	 * <li>So - Other_Symbol
	 * <li>Pi - Initial_Punctuation
	 * <li>Pf - Final_Punctuation
	 * </ul>
	 * 
	 * @protected
	 * @param {string} ch character to examine
	 * @param {string} rangeName the name of the range to check
	 * @param {Object} obj object containing the character range data
	 * @return {boolean} true if the first character is within the named
	 * range
	 */
	_inRange: function(ch, rangeName, obj) {
		var range, i, num;
		if (!ch || ch.length === 0 || !rangeName || !obj) {
			return false;
		}
		
		num = new ilib.String(ch).codePointAt(0);
		range = obj[rangeName];
		if (!range) {
			return false;
		}
		
		for (i = 0; i < range.length; i++) {
			if (range[i].length === 1) {
				// single character range
				if (num === range[i][0]) {
					return true;
				}
			} else if (num >= range[i][0] && num <= range[i][1]) {
				// multi-character range
				return true;
			}
		}
		
		return false;
	},
	
	/**
	 * Return whether or not the first character is within the named range
	 * of Unicode characters. The valid list of range names are taken from 
	 * the Unicode 6.0 spec. Characters in all ranges of Unicode are supported,
	 * including those supported in Javascript via UTF-16. Currently, this method 
	 * supports the following range names:
	 * 
	 * <ul>
	 * <li><i>ascii</i> - basic ASCII
	 * <li><i>latin</i> - Latin, Latin Extended Additional, Latin Extended-C, Latin Extended-D
	 * <li><i>armenian</i>
	 * <li><i>greek</i> - Greek, Greek Extended
	 * <li><i>cyrillic</i> - Cyrillic, Cyrillic Extended-A, Cyrillic Extended-B
	 * <li><i>georgian</i> - Georgian, Georgian Supplement
	 * <li><i>glagolitic</i>
	 * <li><i>gothic</i>
	 * <li><i>ogham</i>
	 * <li><i>oldpersian</i>
	 * <li><i>runic</i>
	 * <li><i>ipa</i> - IPA, Phonetic Extensions, Phonetic Extensions Supplement
	 * <li><i>phonetic</i>
	 * <li><i>modifiertone</i> - Modifier Tone Letters
	 * <li><i>spacing</i>
	 * <li><i>diacritics</i>
	 * <li><i>halfmarks</i> - Combining Half Marks
	 * <li><i>small</i> - Small Form Variants
	 * <li><i>bamum</i> - Bamum, Bamum Supplement
	 * <li><i>ethiopic</i> - Ethiopic, Ethiopic Extended, Ethiopic Extended-A
	 * <li><i>nko</i>
	 * <li><i>osmanya</i>
	 * <li><i>tifinagh</i>
	 * <li><i>val</i>
	 * <li><i>arabic</i> - Arabic, Arabic Supplement, Arabic Presentation Forms-A, 
	 * Arabic Presentation Forms-B
	 * <li><i>carlan</i>
	 * <li><i>hebrew</i>
	 * <li><i>mandaic</i>
	 * <li><i>samaritan</i>
	 * <li><i>syriac</i>
	 * <li><i>mongolian</i>
	 * <li><i>phagspa</i>
	 * <li><i>tibetan</i>
	 * <li><i>bengali</i>
	 * <li><i>devanagari</i> - Devanagari, Devanagari Extended
	 * <li><i>gujarati</i>
	 * <li><i>gurmukhi</i>
	 * <li><i>kannada</i>
	 * <li><i>lepcha</i>
	 * <li><i>limbu</i>
	 * <li><i>malayalam</i>
	 * <li><i>meetaimayek</i>
	 * <li><i>olchiki</i>
	 * <li><i>oriya</i>
	 * <li><i>saurashtra</i>
	 * <li><i>sinhala</i>
	 * <li><i>sylotinagri</i> - Syloti Nagri
	 * <li><i>tamil</i>
	 * <li><i>telugu</i>
	 * <li><i>thaana</i>
	 * <li><i>vedic</i>
	 * <li><i>batak</i>
	 * <li><i>balinese</i>
	 * <li><i>buginese</i>
	 * <li><i>cham</i>
	 * <li><i>javanese</i>
	 * <li><i>kayahli</i>
	 * <li><i>khmer</i>
	 * <li><i>lao</i>
	 * <li><i>myanmar</i> - Myanmar, Myanmar Extended-A
	 * <li><i>newtailue</i>
	 * <li><i>rejang</i>
	 * <li><i>sundanese</i>
	 * <li><i>taile</i>
	 * <li><i>taitham</i>
	 * <li><i>taiviet</i>
	 * <li><i>thai</i>
	 * <li><i>buhld</i>
	 * <li><i>hanunoo</i>
	 * <li><i>tagalog</i>
	 * <li><i>tagbanwa</i>
	 * <li><i>bopomofo</i> - Bopomofo, Bopomofo Extended
	 * <li><i>cjk</i> - the CJK unified ideographs (Han), CJK Unified Ideographs
	 *  Extension A, CJK Unified Ideographs Extension B, CJK Unified Ideographs 
	 *  Extension C, CJK Unified Ideographs Extension D, Ideographic Description 
	 *  Characters (=isIdeo())
	 * <li><i>cjkcompatibility</i> - CJK Compatibility, CJK Compatibility 
	 * Ideographs, CJK Compatibility Forms, CJK Compatibility Ideographs Supplement
	 * <li><i>cjkradicals</i> - the CJK radicals, KangXi radicals
	 * <li><i>hangul</i> - Hangul Jamo, Hangul Syllables, Hangul Jamo Extended-A, 
	 * Hangul Jamo Extended-B, Hangul Compatibility Jamo
	 * <li><i>cjkpunct</i> - CJK symbols and punctuation
	 * <li><i>cjkstrokes</i> - CJK strokes
	 * <li><i>hiragana</i>
	 * <li><i>katakana</i> - Katakana, Katakana Phonetic Extensions, Kana Supplement
	 * <li><i>kanbun</i>
	 * <li><i>lisu</i>
	 * <li><i>yi</i> - Yi Syllables, Yi Radicals
	 * <li><i>cherokee</i>
	 * <li><i>canadian</i> - Unified Canadian Aboriginal Syllabics, Unified Canadian 
	 * Aboriginal Syllabics Extended
	 * <li><i>presentation</i> - Alphabetic presentation forms
	 * <li><i>vertical</i> - Vertical Forms
	 * <li><i>width</i> - Halfwidth and Fullwidth Forms
	 * <li><i>punctuation</i> - General punctuation, Supplemental Punctuation
	 * <li><i>box</i> - Box Drawing
	 * <li><i>block</i> - Block Elements
	 * <li><i>letterlike</i> - Letterlike symbols
	 * <li><i>mathematical</i> - Mathematical alphanumeric symbols, Miscellaneous 
	 * Mathematical Symbols-A, Miscellaneous Mathematical Symbols-B
	 * <li><i>enclosedalpha</i> - Enclosed alphanumerics, Enclosed Alphanumeric Supplement
	 * <li><i>enclosedcjk</i> - Enclosed CJK letters and months, Enclosed Ideographic Supplement
	 * <li><i>cjkcompatibility</i> - CJK compatibility
	 * <li><i>apl</i> - APL symbols
	 * <li><i>controlpictures</i> - Control pictures
	 * <li><i>misc</i> - Miscellaneous technical
	 * <li><i>ocr</i> - Optical character recognition (OCR)
	 * <li><i>combining</i> - Combining Diacritical Marks, Combining Diacritical Marks 
	 * for Symbols, Combining Diacritical Marks Supplement
	 * <li><i>digits</i> - ASCII digits (=isDigit())
	 * <li><i>indicnumber</i> - Common Indic Number Forms
	 * <li><i>numbers</i> - Number dorms
	 * <li><i>supersub</i> - Super- and subscripts
	 * <li><i>arrows</i> - Arrows, Miscellaneous Symbols and Arrows, Supplemental Arrows-A,
	 * Supplemental Arrows-B
	 * <li><i>operators</i> - Mathematical operators, supplemental 
	 * mathematical operators 
	 * <li><i>geometric</i> - Geometric shapes
	 * <li><i>ancient</i> - Ancient symbols
	 * <li><i>braille</i> - Braille patterns
	 * <li><i>currency</i> - Currency symbols
	 * <li><i>dingbats</i>
	 * <li><i>gamesymbols</i>
	 * <li><i>yijing</i> - Yijing Hexagram Symbols
	 * <li><i>specials</i>
	 * <li><i>variations</i> - Variation Selectors, Variation Selectors Supplement
	 * <li><i>privateuse</i> - Private Use Area, Supplementary Private Use Area-A, 
	 * Supplementary Private Use Area-B
	 * <li><i>supplementarya</i> - Supplementary private use area-A
	 * <li><i>supplementaryb</i> - Supplementary private use area-B
	 * <li><i>highsurrogates</i> - High Surrogates, High Private Use Surrogates
	 * <li><i>lowsurrogates</i>
	 * <li><i>reserved</i>
	 * <li><i>noncharacters</i>
	 * </ul><p>
	 * 
	 * Depends directive: !depends ctype.js
	 * 
	 * @param {string} ch character to examine
	 * @param {string} rangeName the name of the range to check
	 * @return {boolean} true if the first character is within the named
	 * range
	 */
	withinRange: function(ch, rangeName) {
		if (!rangeName) {
			return false;
		}
		return ilib.CType._inRange(ch, rangeName.toLowerCase(), ilib.data.ctype);
	},
	
	/**
	 * @protected
	 * @param {boolean} sync
	 * @param {Object} loadParams
	 * @param {function(*)|undefined} onLoad
	 */
	_init: function(sync, loadParams, onLoad) {
		ilib.CType._load("ctype", sync, loadParams, onLoad);
	},
	
	/**
	 * @protected
	 * @param {string} name
	 * @param {boolean} sync
	 * @param {Object} loadParams
	 * @param {function(*)|undefined} onLoad
	 */
	_load: function (name, sync, loadParams, onLoad) {
		if (!ilib.data[name]) {
			var loadName = name ? name + ".json" : "ctype.json";
			ilib.loadData({
				name: loadName,
				locale: "-",
				sync: sync,
				loadParams: loadParams, 
				callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(ct) {
					ilib.data[name] = ct;
					if (onLoad && typeof(onLoad) === 'function') {
						onLoad(ilib.data[name]);
					}
				})
			});
		} else {
			if (onLoad && typeof(onLoad) === 'function') {
				onLoad(ilib.data[name]);
			}
		}
	}
};

/*
 * ctype.isdigit.js - Character type is digit
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype

/**
 * Return whether or not the first character is a digit character in the
 * Latin script.<p>
 * 
 * Depends directive: !depends ctype.isdigit.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is a digit character in the
 * Latin script. 
 */
ilib.CType.isDigit = function (ch) {
	return ilib.CType._inRange(ch, 'digit', ilib.data.ctype);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isDigit._init = function (sync, loadParams, onLoad) {
	ilib.CType._init(sync, loadParams, onLoad);
};

ilib.data.ctype_z = {"Zs":[[32],[160],[5760],[6158],[8192,8202],[8239],[8287],[12288]],"Zl":[[8232]],"Zp":[[8233]]};
/*
 * ctype.isspace.js - Character type is space char
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype ctype_z

/**
 * Return whether or not the first character is a whitespace character.<p>
 * 
 * Depends directive: !depends ctype.isspace.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is a whitespace character.
 */
ilib.CType.isSpace = function (ch) {
	return ilib.CType._inRange(ch, 'space', ilib.data.ctype) ||
		ilib.CType._inRange(ch, 'Zs', ilib.data.ctype_z) ||
		ilib.CType._inRange(ch, 'Zl', ilib.data.ctype_z) ||
		ilib.CType._inRange(ch, 'Zp', ilib.data.ctype_z);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isSpace._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_z", sync, loadParams, function () {
		ilib.CType._init(sync, loadParams, onLoad);
	});
};

/*
 * numprs.js - Parse a number in any locale
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
strings.js 
ctype.isdigit.js 
ctype.isspace.js
*/

/**
 * @class
 * Parse a string as a number, ignoring all locale-specific formatting.<p>
 * 
 * This class is different from the standard Javascript parseInt() and parseFloat() 
 * functions in that the number to be parsed can have formatting characters in it 
 * that are not supported by those two
 * functions, and it handles numbers written in other locales properly. For example, 
 * if you pass the string "203,231.23" to the parseFloat() function in Javascript, it 
 * will return you the number 203. The ilib.Number class will parse it correctly and 
 * the value() function will return the number 203231.23. If you pass parseFloat() the 
 * string "203.231,23" with the locale set to de-DE, it will return you 203 again. This
 * class will return the correct number 203231.23 again.<p>
 * 
 * The options object may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - specify the locale of the string to parse. This is used to
 * figure out what the decimal point character is. If not specified, the default locale
 * for the app or browser is used.
 * <li><i>type</i> - specify whether this string should be interpretted as a number,
 * currency, or percentage amount. When the number is interpretted as a currency
 * amount, the getCurrency() method will return something useful, otherwise it will
 * return undefined. If
 * the number is to be interpretted as percentage amount and there is a percentage sign
 * in the string, then the number will be returned
 * as a fraction from the valueOf() method. If there is no percentage sign, then the 
 * number will be returned as a regular number. That is "58.3%" will be returned as the 
 * number 0.583 but "58.3" will be returned as 58.3. Valid values for this property 
 * are "number", "currency", and "percentage". Default if this is not specified is
 * "number".
 * <li><i>onLoad</i> - a callback function to call when the locale data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * <p>
 * 
 * Depends directive: !depends numprs.js
 * 
 * @constructor
 * @param {string|number|Number|ilib.Number|undefined} str a string to parse as a number, or a number value
 * @param {Object=} options Options controlling how the instance should be created 
 */
ilib.Number = function (str, options) {
	var i, stripped = "", 
		sync = true,
		loadParams,
		onLoad;
	
	this.locale = new ilib.Locale();
	this.type = "number";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		if (options.type) {
			switch (options.type) {
				case "number":
				case "currency":
				case "percentage":
					this.type = options.type;
					break;
				default:
					break;
			}
		}
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		loadParams = options.loadParams;
		onLoad = options.onLoad;
	}
	
	ilib.CType.isDigit._init(sync, loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
		ilib.CType.isSpace._init(sync, loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
			new ilib.LocaleInfo(this.locale, {
				sync: sync,
				onLoad: ilib.bind(this, function (li) {
					this.decimal = li.getDecimalSeparator();
					
					switch (typeof(str)) {
					case 'string':
						// stripping should work for all locales, because you just ignore all the
						// formatting except the decimal char
						var unary = true; // looking for the unary minus still?
						this.str = str || "0";
						i = 0;
						for (i = 0; i < this.str.length; i++) {
							if (unary && this.str.charAt(i) === '-') {
								unary = false;
								stripped += this.str.charAt(i);
							} else if (ilib.CType.isDigit(this.str.charAt(i))) {
								stripped += this.str.charAt(i);
								unary = false;
							} else if (this.str.charAt(i) === this.decimal) {
								stripped += "."; // always convert to period
								unary = false;
							} // else ignore
						}
						this.value = parseFloat(stripped);
						break;
					case 'number':
						this.str = "" + str;
						this.value = str;
						break;
						
					case 'object':
						this.value = /** @type {number} */ str.valueOf();
						this.str = "" + this.value;
						break;
						
					case 'undefined':
						this.value = 0;
						this.str = "0";
						break;
					}
					
					switch (this.type) {
						default:
							// don't need to do anything special for other types
							break;
						case "percentage":
							if (this.str.indexOf(li.getPercentageSymbol()) !== -1) {
								this.value /= 100;
							}
							break;
						case "currency":
							stripped = "";
							i = 0;
							while (i < this.str.length &&
								   !ilib.CType.isDigit(this.str.charAt(i)) &&
								   !ilib.CType.isSpace(this.str.charAt(i))) {
								stripped += this.str.charAt(i++);
							}
							if (stripped.length === 0) {
								while (i < this.str.length && 
									   ilib.CType.isDigit(this.str.charAt(i)) ||
									   ilib.CType.isSpace(this.str.charAt(i)) ||
									   this.str.charAt(i) === '.' ||
									   this.str.charAt(i) === ',' ) {
									i++;
								}
								while (i < this.str.length && 
									   !ilib.CType.isDigit(this.str.charAt(i)) &&
									   !ilib.CType.isSpace(this.str.charAt(i))) {
									stripped += this.str.charAt(i++);
								}
							}
							new ilib.Currency({
								locale: this.locale, 
								sign: stripped,
								sync: sync,
								onLoad: ilib.bind(this, function (cur) {
									this.currency = cur;
									if (options && typeof(options.onLoad) === 'function') {
										options.onLoad(this);
									}				
								})
							});
							return;
					}
					
					if (options && typeof(options.onLoad) === 'function') {
						options.onLoad(this);
					}
				})
			});
		}));
	}));
};

ilib.Number.prototype = {
	/**
	 * Return the locale for this formatter instance.
	 * @return {ilib.Locale} the locale instance for this formatter
	 */
	getLocale: function () {
		return this.locale;
	},
	
	/**
	 * Return the original string that this number instance was created with.
	 * @return {string} the original string
	 */
	toString: function () {
		return this.str;
	},
	
	/**
	 * If the type of this Number instance is "currency", then the parser will attempt
	 * to figure out which currency this amount represents. The amount can be written
	 * with any of the currency signs or ISO 4217 codes that are currently
	 * recognized by ilib, and the currency signs may occur before or after the
	 * numeric portion of the string. If no currency can be recognized, then the 
	 * default currency for the locale is returned. If multiple currencies can be
	 * recognized (for example if the currency sign is "$"), then this method 
	 * will prefer the one for the current locale. If multiple currencies can be
	 * recognized, but none are used in the current locale, then the first currency
	 * encountered will be used. This may produce random results, though the larger
	 * currencies occur earlier in the list. For example, if the sign found in the
	 * string is "$" and that is not the sign of the currency of the current locale
	 * then the US dollar will be recognized, as it is the largest currency that uses
	 * the "$" as its sign.
	 * 
	 * @return {ilib.Currency|undefined} the currency instance for this amount, or 
	 * undefined if this Number object is not of type currency
	 */
	getCurrency: function () {
		return this.currency;
	},
	
	/**
	 * Return the value of this number object as a primitive number instance.
	 * @return {number} the value of this number instance
	 */
	valueOf: function () {
		return this.value;
	}
};

ilib.data.currency = {"USD":{"name":"US Dollar","decimals":2,"sign":"$"},"CHF":{"name":"Swiss Franc","decimals":2,"sign":"Fr"},"RON":{"name":"Leu","decimals":2,"sign":"L"},"RUB":{"name":"Russian Ruble","decimals":2,"sign":"ÑÑÐ±."},"SEK":{"name":"Swedish Krona","decimals":2,"sign":"kr"},"GBP":{"name":"Pound Sterling","decimals":2,"sign":"Â£"},"PKR":{"name":"Pakistan Rupee","decimals":2,"sign":"â¨"},"KES":{"name":"Kenyan Shilling","decimals":2,"sign":"Sh"},"AED":{"name":"UAE Dirham","decimals":2,"sign":"Ø¯.Ø¥"},"KRW":{"name":"Won","decimals":0,"sign":"â©"},"AFN":{"name":"Afghani","decimals":2,"sign":"Ø"},"ALL":{"name":"Lek","decimals":2,"sign":"L"},"AMD":{"name":"Armenian Dram","decimals":2,"sign":"Õ¤Ö."},"ANG":{"name":"Netherlands Antillean Guilder","decimals":2,"sign":"Æ"},"AOA":{"name":"Kwanza","decimals":2,"sign":"Kz"},"ARS":{"name":"Argentine Peso","decimals":2,"sign":"$"},"AUD":{"name":"Australian Dollar","decimals":2,"sign":"$"},"AWG":{"name":"Aruban Florin","decimals":2,"sign":"Æ"},"AZN":{"name":"Azerbaijanian Manat","decimals":2,"sign":"AZN"},"BAM":{"name":"Convertible Mark","decimals":2,"sign":"ÐÐ"},"BBD":{"name":"Barbados Dollar","decimals":2,"sign":"$"},"BDT":{"name":"Taka","decimals":2,"sign":"à§³"},"BGN":{"name":"Bulgarian Lev","decimals":2,"sign":"Ð»Ð²"},"BHD":{"name":"Bahraini Dinar","decimals":3,"sign":".Ø¯.Ø¨"},"BIF":{"name":"Burundi Franc","decimals":0,"sign":"Fr"},"BMD":{"name":"Bermudian Dollar","decimals":2,"sign":"$"},"BND":{"name":"Brunei Dollar","decimals":2,"sign":"$"},"BOB":{"name":"Boliviano","decimals":2,"sign":"Bs."},"BRL":{"name":"Brazilian Real","decimals":2,"sign":"R$"},"BSD":{"name":"Bahamian Dollar","decimals":2,"sign":"$"},"BTN":{"name":"Ngultrum","decimals":2,"sign":"Nu."},"BWP":{"name":"Pula","decimals":2,"sign":"P"},"BYR":{"name":"Belarussian Ruble","decimals":0,"sign":"Br"},"BZD":{"name":"Belize Dollar","decimals":2,"sign":"$"},"CAD":{"name":"Canadian Dollar","decimals":2,"sign":"$"},"CDF":{"name":"Congolese Franc","decimals":2,"sign":"Fr"},"CLP":{"name":"Chilean Peso","decimals":0,"sign":"$"},"CNY":{"name":"Yuan Renminbi","decimals":2,"sign":"å"},"COP":{"name":"Colombian Peso","decimals":2,"sign":"$"},"CRC":{"name":"Costa Rican Colon","decimals":2,"sign":"â¡"},"CUP":{"name":"Cuban Peso","decimals":2,"sign":"$"},"CVE":{"name":"Cape Verde Escudo","decimals":2,"sign":"$"},"CZK":{"name":"Czech Koruna","decimals":2,"sign":"KÄ"},"DJF":{"name":"Djibouti Franc","decimals":0,"sign":"Fr"},"DKK":{"name":"Danish Krone","decimals":2,"sign":"kr"},"DOP":{"name":"Dominican Peso","decimals":2,"sign":"$"},"DZD":{"name":"Algerian Dinar","decimals":2,"sign":"Ø¯.Ø¬"},"EGP":{"name":"Egyptian Pound","decimals":2,"sign":"Â£"},"ERN":{"name":"Nakfa","decimals":2,"sign":"Nfk"},"ETB":{"name":"Ethiopian Birr","decimals":2,"sign":"Br"},"EUR":{"name":"Euro","decimals":2,"sign":"â¬"},"FJD":{"name":"Fiji Dollar","decimals":2,"sign":"$"},"FKP":{"name":"Falkland Islands Pound","decimals":2,"sign":"Â£"},"GEL":{"name":"Lari","decimals":2,"sign":"á"},"GHS":{"name":"Cedi","decimals":2,"sign":"âµ"},"GIP":{"name":"Gibraltar Pound","decimals":2,"sign":"Â£"},"GMD":{"name":"Dalasi","decimals":2,"sign":"D"},"GNF":{"name":"Guinea Franc","decimals":0,"sign":"Fr"},"GTQ":{"name":"Quetzal","decimals":2,"sign":"Q"},"GYD":{"name":"Guyana Dollar","decimals":2,"sign":"$"},"HKD":{"name":"Hong Kong Dollar","decimals":2,"sign":"$"},"HNL":{"name":"Lempira","decimals":2,"sign":"L"},"HRK":{"name":"Croatian Kuna","decimals":2,"sign":"kn"},"HTG":{"name":"Gourde","decimals":2,"sign":"G"},"HUF":{"name":"Forint","decimals":2,"sign":"Ft"},"IDR":{"name":"Rupiah","decimals":2,"sign":"Rp"},"ILS":{"name":"New Israeli Sheqel","decimals":2,"sign":"âª"},"INR":{"name":"Indian Rupee","decimals":2,"sign":"â¹"},"IQD":{"name":"Iraqi Dinar","decimals":3,"sign":"Ø¹.Ø¯"},"IRR":{"name":"Iranian Rial","decimals":2,"sign":"ï·¼"},"ISK":{"name":"Iceland Krona","decimals":0,"sign":"kr"},"JMD":{"name":"Jamaican Dollar","decimals":2,"sign":"$"},"JOD":{"name":"Jordanian Dinar","decimals":3,"sign":"Ø¯.Ø§"},"JPY":{"name":"Yen","decimals":0,"sign":"Â¥"},"KGS":{"name":"Som","decimals":2,"sign":"Ð»Ð²"},"KHR":{"name":"Riel","decimals":2,"sign":"á"},"KMF":{"name":"Comoro Franc","decimals":0,"sign":"Fr"},"KPW":{"name":"North Korean Won","decimals":2,"sign":"â©"},"KWD":{"name":"Kuwaiti Dinar","decimals":3,"sign":"Ø¯.Ù"},"KYD":{"name":"Cayman Islands Dollar","decimals":2,"sign":"$"},"KZT":{"name":"Tenge","decimals":2,"sign":"â¸"},"LAK":{"name":"Kip","decimals":2,"sign":"â­"},"LBP":{"name":"Lebanese Pound","decimals":2,"sign":"Ù.Ù"},"LKR":{"name":"Sri Lanka Rupee","decimals":2,"sign":"Rs"},"LRD":{"name":"Liberian Dollar","decimals":2,"sign":"$"},"LSL":{"name":"Loti","decimals":2,"sign":"L"},"LTL":{"name":"Lithuanian Litas","decimals":2,"sign":"Lt"},"LVL":{"name":"Latvian Lats","decimals":2,"sign":"Ls"},"LYD":{"name":"Libyan Dinar","decimals":3,"sign":"Ù.Ø¯"},"MAD":{"name":"Moroccan Dirham","decimals":2,"sign":"Ø¯.Ù."},"MDL":{"name":"Moldovan Leu","decimals":2,"sign":"L"},"MGA":{"name":"Malagasy Ariary","decimals":2,"sign":"Ar"},"MKD":{"name":"Denar","decimals":2,"sign":"Ð´ÐµÐ½"},"MMK":{"name":"Kyat","decimals":2,"sign":"K"},"MNT":{"name":"Tugrik","decimals":2,"sign":"â®"},"MOP":{"name":"Pataca","decimals":2,"sign":"P"},"MRO":{"name":"Ouguiya","decimals":2,"sign":"UM"},"MUR":{"name":"Mauritius Rupee","decimals":2,"sign":"â¨"},"MVR":{"name":"Rufiyaa","decimals":2,"sign":".Þ"},"MWK":{"name":"Kwacha","decimals":2,"sign":"MK"},"MXN":{"name":"Mexican Peso","decimals":2,"sign":"$"},"MYR":{"name":"Malaysian Ringgit","decimals":2,"sign":"RM"},"MZN":{"name":"Metical","decimals":2,"sign":"MT"},"NAD":{"name":"Namibia Dollar","decimals":2,"sign":"$"},"NGN":{"name":"Naira","decimals":2,"sign":"â¦"},"NIO":{"name":"Cordoba Oro","decimals":2,"sign":"C$"},"NOK":{"name":"Norwegian Krone","decimals":2,"sign":"kr"},"NPR":{"name":"Nepalese Rupee","decimals":2,"sign":"â¨"},"NZD":{"name":"New Zealand Dollar","decimals":2,"sign":"$"},"OMR":{"name":"Rial Omani","decimals":3,"sign":"Ø±.Ø¹."},"PAB":{"name":"Balboa","decimals":2,"sign":"B/."},"PEN":{"name":"Nuevo Sol","decimals":2,"sign":"S/."},"PGK":{"name":"Kina","decimals":2,"sign":"K"},"PHP":{"name":"Philippine Peso","decimals":2,"sign":"â±"},"PLN":{"name":"Zloty","decimals":2,"sign":"zÅ"},"PYG":{"name":"Guarani","decimals":0,"sign":"â²"},"QAR":{"name":"Qatari Rial","decimals":2,"sign":"Ø±.Ù"},"RSD":{"name":"Serbian Dinar","decimals":2,"sign":"Ð´Ð¸Ð½."},"RWF":{"name":"Rwanda Franc","decimals":0,"sign":"Fr"},"SAR":{"name":"Saudi Riyal","decimals":2,"sign":"Ø±.Ø³"},"SBD":{"name":"Solomon Islands Dollar","decimals":2,"sign":"$"},"SCR":{"name":"Seychelles Rupee","decimals":2,"sign":"â¨"},"SDG":{"name":"Sudanese Pound","decimals":2,"sign":"Â£"},"SGD":{"name":"Singapore Dollar","decimals":2,"sign":"$"},"SHP":{"name":"Saint Helena Pound","decimals":2,"sign":"Â£"},"SLL":{"name":"Leone","decimals":2,"sign":"Le"},"SOS":{"name":"Somali Shilling","decimals":2,"sign":"Sh"},"SRD":{"name":"Surinam Dollar","decimals":2,"sign":"$"},"SSP":{"name":"South Sudanese Pound","decimals":2,"sign":""},"STD":{"name":"Dobra","decimals":2,"sign":"Db"},"SYP":{"name":"Syrian Pound","decimals":2,"sign":"Â£"},"SZL":{"name":"Lilangeni","decimals":2,"sign":"L"},"THB":{"name":"Baht","decimals":2,"sign":"à¸¿"},"TJS":{"name":"Somoni","decimals":2,"sign":"ÐÐ"},"TMT":{"name":"New Manat","decimals":2,"sign":"m"},"TND":{"name":"Tunisian Dinar","decimals":3,"sign":"Ø¯.Øª"},"TOP":{"name":"Paâanga","decimals":2,"sign":"T$"},"TRY":{"name":"Turkish Lira","decimals":2,"sign":"TL"},"TTD":{"name":"Trinidad and Tobago Dollar","decimals":2,"sign":"$"},"TWD":{"name":"New Taiwan Dollar","decimals":2,"sign":"$"},"TZS":{"name":"Tanzanian Shilling","decimals":2,"sign":"Sh"},"UAH":{"name":"Hryvnia","decimals":2,"sign":"â´"},"UGX":{"name":"Uganda Shilling","decimals":2,"sign":"Sh"},"UYU":{"name":"Peso Uruguayo","decimals":2,"sign":"$"},"UZS":{"name":"Uzbekistan Sum","decimals":2,"sign":"Ð»Ð²"},"VEF":{"name":"Bolivar Fuerte","decimals":2,"sign":"Bs F"},"VND":{"name":"Dong","decimals":0,"sign":"â«"},"VUV":{"name":"Vatu","decimals":0,"sign":"Vt"},"WST":{"name":"Tala","decimals":2,"sign":"T"},"XAF":{"name":"CFA Franc BEAC","decimals":0,"sign":"Fr"},"XCD":{"name":"East Caribbean Dollar","decimals":2,"sign":"$"},"XOF":{"name":"CFA Franc BCEAO","decimals":0,"sign":"Fr"},"XPF":{"name":"CFP Franc","decimals":0,"sign":"Fr"},"YER":{"name":"Yemeni Rial","decimals":2,"sign":"ï·¼"},"ZAR":{"name":"Rand","decimals":2,"sign":"R"},"ZMK":{"name":"Zambian Kwacha","decimals":2,"sign":"ZK"},"ZWL":{"name":"Zimbabwe Dollar","decimals":2,"sign":"$"}};
/*
 * currency.js - Currency definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js

// !data currency

/**
 * @class
 * Create a new currency information instance. Instances of this class encode 
 * information about a particular currency.<p>
 * 
 * Note: that if you are looking to format currency for display, please see
 * the number formatting class {ilib.NumFmt}. This class only gives information
 * about currencies.<p> 
 * 
 * The options can contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - specify the locale for this instance
 * <li><i>code</i> - find info on a specific currency with the given ISO 4217 code 
 * <li><i>sign</i> - search for a currency that uses this sign
 * <li><i>onLoad</i> - a callback function to call when the currency data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * When searching for a currency by its sign, this class cannot guarantee 
 * that it will return info about a specific currency. The reason is that currency 
 * signs are sometimes shared between different currencies and the sign is 
 * therefore ambiguous. If you need a 
 * guarantee, find the currency using the code instead.<p>
 * 
 * The way this class finds a currency by sign is the following. If the sign is 
 * unambiguous, then
 * the currency is returned. If there are multiple currencies that use the same
 * sign, and the current locale uses that sign, then the default currency for
 * the current locale is returned. If there are multiple, but the current locale
 * does not use that sign, then the currency with the largest circulation is
 * returned. For example, if you are in the en-GB locale, and the sign is "$",
 * then this class will notice that there are multiple currencies with that
 * sign (USD, CAD, AUD, HKD, MXP, etc.) Since "$" is not used in en-GB, it will 
 * pick the one with the largest circulation, which in this case is the US Dollar
 * (USD).<p>
 * 
 * If neither the code or sign property is set, the currency that is most common 
 * for the locale
 * will be used instead. If the locale is not set, the default locale will be used.
 * If the code is given, but it is not found in the list of known currencies, this
 * constructor will throw an exception. If the sign is given, but it is not found,
 * this constructor will default to the currency for the current locale. If both
 * the code and sign properties are given, then the sign property will be ignored
 * and only the code property used. If the locale is given, but it is not a known
 * locale, this class will default to the default locale instead.<p>
 * 
 * Depends directive: !depends currency.js
 * 
 * @constructor
 * @param options {Object} a set of properties to govern how this instance is constructed.
 * @throws "currency xxx is unknown" when the given currency code is not in the list of 
 * known currencies. xxx is replaced with the requested code.
 */
ilib.Currency = function (options) {
	this.sync = true;
	
	if (options) {
		if (options.code) {
			this.code = options.code;
		}
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		if (options.sign) {
			this.sign = options.sign;
		}
		if (typeof(options.sync) !== 'undefined') {
			this.sync = options.sync;
		}
		if (options.loadParams) {
			this.loadParams = options.loadParams;
		}
	}
	
	this.locale = this.locale || new ilib.Locale();
	if (typeof(ilib.data.currency) === 'undefined') {
		ilib.loadData({
			name: "currency.json",
			object: ilib.Currency, 
			locale: "-",
			sync: this.sync, 
			loadParams: this.loadParams, 
			callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(currency) {
				ilib.data.currency = currency;
				this._loadLocinfo(options && options.onLoad);
			})
		});
	} else {
		this._loadLocinfo(options && options.onLoad);
	}
};

/**
 * Return an array of the ids for all ISO 4217 currencies that
 * this copy of ilib knows about.
 * 
 * @static
 * @return {Array.<string>} an array of currency ids that this copy of ilib knows about.
 */
ilib.Currency.getAvailableCurrencies = function() {
	var ret = [],
		cur,
		currencies = new ilib.ResBundle({
			name: "currency"
		}).getResObj();
	
	for (cur in currencies) {
		if (cur && currencies[cur]) {
			ret.push(cur);
		}
	}
	
	return ret;
};

ilib.Currency.prototype = {
	/**
	 * @private
	 */
	_loadLocinfo: function(onLoad) {
		new ilib.LocaleInfo(this.locale, {
			onLoad: ilib.bind(this, function (li) {
				var currInfo;
				
				this.locinfo = li;
		    	if (this.code) {
		    		currInfo = ilib.data.currency[this.code];
		    		if (!currInfo) {
		    			throw "currency " + this.code + " is unknown";
		    		}
		    	} else if (this.sign) {
		    		currInfo = ilib.data.currency[this.sign]; // maybe it is really a code...
		    		if (typeof(currInfo) !== 'undefined') {
		    			this.code = this.sign;
		    		} else {
		    			this.code = this.locinfo.getCurrency();
		    			currInfo = ilib.data.currency[this.code];
		    			if (currInfo.sign !== this.sign) {
		    				// current locale does not use the sign, so search for it
		    				for (var cur in ilib.data.currency) {
		    					if (cur && ilib.data.currency[cur]) {
		    						currInfo = ilib.data.currency[cur];
		    						if (currInfo.sign === this.sign) {
		    							// currency data is already ordered so that the currency with the
		    							// largest circulation is at the beginning, so all we have to do
		    							// is take the first one in the list that matches
		    							this.code = cur;
		    							break;
		    						}
		    					}
		    				}
		    			}
		    		}
		    	}
		    	
		    	if (!currInfo || !this.code) {
		    		this.code = this.locinfo.getCurrency();
		    		currInfo = ilib.data.currency[this.code];
		    	}
		    	
		    	this.name = currInfo.name;
		    	this.fractionDigits = currInfo.decimals;
		    	this.sign = currInfo.sign;
		    	
				if (typeof(onLoad) === 'function') {
					onLoad(this);
				}
			})
		});
	},
	
	/**
	 * Return the ISO 4217 currency code for this instance.
	 * @return {string} the ISO 4217 currency code for this instance
	 */
	getCode: function () {
		return this.code;
	},
	
	/**
	 * Return the default number of fraction digits that is typically used
	 * with this type of currency.
	 * @return {number} the number of fraction digits for this currency
	 */
	getFractionDigits: function () {
		return this.fractionDigits;
	},
	
	/**
	 * Return the sign commonly used to represent this currency.
	 * @return {string} the sign commonly used to represent this currency
	 */
	getSign: function () {
		return this.sign;
	},
	
	/**
	 * Return the name of the currency in English.
	 * @return {string} the name of the currency in English
	 */
	getName: function () {
		return this.name;
	},
	
	/**
	 * Return the locale for this currency. If the options to the constructor 
	 * included a locale property in order to find the currency that is appropriate
	 * for that locale, then the locale is returned here. If the options did not
	 * include a locale, then this method returns undefined.
	 * @return {ilib.Locale} the locale used in the constructor of this instance,
	 * or undefined if no locale was given in the constructor
	 */
	getLocale: function () {
		return this.locale;
	}
};

/*
 * numfmt.js - Number formatter definition
 *
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js strings.js currency.js
/*
!depends 
ilibglobal.js 
locale.js
localeinfo.js
util/utils.js
util/math.js
currency.js
strings.js
util/jsutils.js
*/

// !data localeinfo currency

/**
 * @class
 * Create a new number formatter instance. Locales differ in the way that digits
 * in a formatted number are grouped, in the way the decimal character is represented,
 * etc. Use this formatter to get it right for any locale.<p>
 *
 * This formatter can format plain numbers, currency amounts, and percentage amounts.<p>
 *
 * As with all formatters, the recommended
 * practice is to create one formatter and use it multiple times to format various
 * numbers.<p>
 *
 * The options can contain any of the following properties:
 *
 * <ul>
 * <li><i>locale</i> - use the conventions of the specified locale when figuring out how to
 * format a number.
 * <li><i>type</i> - the type of this formatter. Valid values are "number", "currency", or
 * "percentage". If this property is not specified, the default is "number".
 * <li><i>currency</i> - the ISO 4217 3-letter currency code to use when the formatter type
 * is "currency". This property is required for currency formatting. If the type property
 * is "currency" and the currency property is not specified, the constructor will throw a
 * an exception.
 * <li><i>maxFractionDigits</i> - the maximum number of digits that should appear in the
 * formatted output after the decimal. A value of -1 means unlimited, and 0 means only print
 * the integral part of the number.
 * <li><i>minFractionDigits</i> - the minimum number of fractional digits that should
 * appear in the formatted output. If the number does not have enough fractional digits
 * to reach this minimum, the number will be zero-padded at the end to get to the limit.
 * If the type of the formatter is "currency" and this
 * property is not specified, then the minimum fraction digits is set to the normal number
 * of digits used with that currency, which is almost always 0, 2, or 3 digits.
 * <li><i>useNative</i> - the flag used to determaine whether to use the native script settings
 * for formatting the numbers .
 * <li><i>roundingMode</i> - When the maxFractionDigits or maxIntegerDigits is specified,
 * this property governs how the least significant digits are rounded to conform to that
 * maximum. The value of this property is a string with one of the following values:
 * <ul>
 *   <li><i>up</i> - round away from zero
 *   <li><i>down</i> - round towards zero. This has the effect of truncating the number
 *   <li><i>ceiling</i> - round towards positive infinity
 *   <li><i>floor</i> - round towards negative infinity
 *   <li><i>halfup</i> - round towards nearest neighbour. If equidistant, round up.
 *   <li><i>halfdown</i> - round towards nearest neighbour. If equidistant, round down.
 *   <li><i>halfeven</i> - round towards nearest neighbour. If equidistant, round towards the even neighbour
 *   <li><i>halfodd</i> - round towards nearest neighbour. If equidistant, round towards the odd neighbour
 * </ul>
 * When the type of the formatter is "currency" and the <i>roundingMode</i> property is not
 * set, then the standard legal rounding rules for the locale are followed. If the type
 * is "number" or "percentage" and the <i>roundingMode</i> property is not set, then the
 * default mode is "halfdown".</i>.
 *
 * <li><i>style</i> - When the type of this formatter is "currency", the currency amount
 * can be formatted in the following styles: "common" and "iso". The common style is the
 * one commonly used in every day writing where the currency unit is represented using a
 * symbol. eg. "$57.35" for fifty-seven dollars and thirty five cents. The iso style is
 * the international style where the currency unit is represented using the ISO 4217 code.
 * eg. "USD 57.35" for the same amount. The default is "common" style if the style is
 * not specified.<p>
 *
 * When the type of this formatter is "number",
 * the style can be either "standard" or "scientific" or "native". A "standard" style means
 * a fully specified floating point number formatted for the locale, whereas "scientific" uses
 * scientific notation for all numbers. That is, 1 integral digit, followed by a number
 * of fractional digits, followed by an "e" which denotes exponentiation, followed digits
 * which give the power of 10 in the exponent. The native style will format a floating point
 * number using the native digits and formatting symbols for the script of the locale. Note
 * that if you specify a maximum number
 * of integral digits, the formatter with a standard style will give you standard
 * formatting for smaller numbers and scientific notation for larger numbers. The default
 * is standard style if this is not specified.
 *
 * <li><i>onLoad</i> - a callback function to call when the format data is fully
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 *
 * <li>sync - tell whether to load any missing locale data synchronously or
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 * </ul>
 * <p>
 *
 * Depends directive: !depends numfmt.js
 *
 * @constructor
 * @param {Object.<string,*>} options A set of options that govern how the formatter will behave
 */
ilib.NumFmt = function (options) {
	var sync = true;
	this.locale = new ilib.Locale();
	/** @type {string} */
	this.type = "number";

	if (options) {
		if (options.locale) {
			this.locale = (typeof (options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}

		if (options.type) {
			if (options.type === 'number' ||
				options.type === 'currency' ||
				options.type === 'percentage') {
				this.type = options.type;
			}
		}

		if (options.currency) {
			/** @type {string} */
			this.currency = options.currency;
		}

		if (typeof (options.maxFractionDigits) === 'number') {
			/** @type {number|undefined} */
			this.maxFractionDigits = this._toPrimitive(options.maxFractionDigits);
		}
		if (typeof (options.minFractionDigits) === 'number') {
			/** @type {number|undefined} */
			this.minFractionDigits = this._toPrimitive(options.minFractionDigits);
		}
		if (options.style) {
			/** @type {string} */
			this.style = options.style;
		}
		if (typeof(options.useNative) === 'boolean') {
			this.useNative = options.useNative;
		}
		/** @type {string} */
		this.roundingMode = options.roundingMode;

		if (typeof (options.sync) !== 'undefined') {
			/** @type {boolean} */
			sync = (options.sync == true);
		}
	}

	/** @type {ilib.LocaleInfo|undefined} */
	this.localeInfo = undefined;
	
	new ilib.LocaleInfo(this.locale, {
		sync: sync,
		onLoad: ilib.bind(this, function (li) {
			/** @type {ilib.LocaleInfo|undefined} */
			this.localeInfo = li;

			if (this.type === "number") {
				this.templateNegative = new ilib.String(this.localeInfo.getNegativeNumberFormat() || "-{n}");
			} else if (this.type === "currency") {
				var templates;

				if (!this.currency || typeof (this.currency) != 'string') {
					throw "A currency property is required in the options to the number formatter constructor when the type property is set to currency.";
				}

				new ilib.Currency({
					locale: this.locale,
					code: this.currency,
					sync: sync,
					onLoad: ilib.bind(this, function (cur) {
						this.currencyInfo = cur;
						if (this.style !== "common" && this.style !== "iso") {
							this.style = "common";
						}
						
						if (typeof(this.maxFractionDigits) !== 'number' && typeof(this.minFractionDigits) !== 'number') {
							this.minFractionDigits = this.maxFractionDigits = this.currencyInfo.getFractionDigits();
						}

						templates = this.localeInfo.getCurrencyFormats();
						this.template = new ilib.String(templates[this.style] || templates.common);
						this.templateNegative = new ilib.String(templates[this.style + "Negative"] || templates["commonNegative"]);
						this.sign = (this.style === "iso") ? this.currencyInfo.getCode() : this.currencyInfo.getSign();
						
						if (!this.roundingMode) {
							this.roundingMode = this.currencyInfo && this.currencyInfo.roundingMode;
						}

						this._init();

						if (options && typeof (options.onLoad) === 'function') {
							options.onLoad(this);
						}
					})
				});
				return;
			} else if (this.type === "percentage") {
				this.template =  new ilib.String(this.localeInfo.getPercentageFormat() || "{n}%");
				this.templateNegative = new ilib.String(this.localeInfo.getNegativePercentageFormat() || this.localeInfo.getNegativeNumberFormat() + "%");
			}

			this._init();

			if (options && typeof (options.onLoad) === 'function') {
				options.onLoad(this);
			}
		})
	});
};

/**
 * Return an array of available locales that this formatter can format
 * @static
 * @return {Array.<ilib.Locale>|undefined} an array of available locales
 */
ilib.NumFmt.getAvailableLocales = function () {
	return undefined;
};

/**
 * @private
 * @const
 * @type string
 */
ilib.NumFmt.zeros = "0000000000000000000000000000000000000000000000000000000000000000000000";

ilib.NumFmt.prototype = {
	/**
	 * Return true if this formatter uses native digits to format the number. If the useNative
	 * option is given to the constructor, then this flag will be honoured. If the useNative
	 * option is not given to the constructor, this this formatter will use native digits if
	 * the locale typically uses native digits.
	 * 
	 *  @return {boolean} true if this formatter will format with native digits, false otherwise
	 */
	getUseNative: function() {
		if (typeof(this.useNative) === "boolean") {
			return this.useNative;
		} 
		return (this.localeInfo.getDigitsStyle() === "native");
	},
	
	/**
	 * @private
	 */
	_init: function () {
		if (this.maxFractionDigits < this.minFractionDigits) {
			this.minFractionDigits = this.maxFractionDigits;
		}

		if (!this.roundingMode) {
			this.roundingMode = this.localeInfo.getRoundingMode();
		}

		if (!this.roundingMode) {
			this.roundingMode = "halfdown";
		}

		// set up the function, so we only have to figure it out once
		// and not every time we do format()
		this.round = ilib._roundFnc[this.roundingMode];
		if (!this.round) {
			this.roundingMode = "halfdown";
			this.round = ilib._roundFnc[this.roundingMode];
		}
		
		this.prigroupSize = this.localeInfo.getPrimaryGroupingDigits(),
		this.secgroupSize = this.localeInfo.getSecondaryGroupingDigits(),
		this.groupingSeparator = this.getUseNative() ? this.localeInfo.getNativeGroupingSeparator() : this.localeInfo.getGroupingSeparator();
		this.decimalSeparator = this.getUseNative() ? this.localeInfo.getNativeDecimalSeparator() : this.localeInfo.getDecimalSeparator();
		
		if (this.getUseNative()) {
			var nd = this.localeInfo.getNativeDigits() || this.localeInfo.getDigits();
			if (nd) {
				this.digits = nd.split("");
			}
		}
		
		this.exponentSymbol = this.localeInfo.getExponential() || "e";
	},

	/*
	 * @private
	 */
	_pad: function (str, length, left) {
		return (str.length >= length) ?
			str :
			(left ?
			ilib.NumFmt.zeros.substring(0, length - str.length) + str :
			str + ilib.NumFmt.zeros.substring(0, length - str.length));
	},

	/**
	 * @private
	 * @param {Number|ilib.Number|string|number} num object, string, or number to convert to a primitive number
	 * @return {number} the primitive number equivalent of the argument
	 */
	_toPrimitive: function (num) {
		var n = 0;

		switch (typeof (num)) {
		case 'number':
			n = num;
			break;
		case 'string':
			n = parseFloat(num);
			break;
		case 'object':
			// Number.valueOf() is incorrectly documented as being of type "string" rather than "number", so coerse 
			// the type here to shut the type checker up
			n = /** @type {number} */ num.valueOf();
			break;
		}

		return n;
	},

	/**
	 * Format the number using scientific notation as a positive number. Negative
	 * formatting to be applied later.
	 * @private
	 * @param {number} num the number to format
	 * @return {string} the formatted number
	 */
	_formatScientific: function (num) {
		var n = new Number(num);
		var formatted;
		if (typeof (this.maxFractionDigits) !== 'undefined') {
			// if there is fraction digits, round it to the right length first
			// divide or multiply by 10 by manipulating the exponent so as to
			// avoid the rounding errors of floating point numbers
			var e,
				factor,
				str = n.toExponential(),
				parts = str.split("e"),
				significant = parts[0];

			e = parts[1];
			factor = Math.pow(10, this.maxFractionDigits);
			significant = this.round(significant * factor) / factor;
			formatted = "" + significant + this.exponentSymbol + e;
		} else {
			formatted = n.toExponential(this.minFractionDigits);
			if (this.exponentSymbol !== 'e') {
				formatted = formatted.replace(/e/, this.exponentSymbol);
			}
		}
		return formatted;
	},

	/**
	 * Formats the number as a positive number. Negative formatting to be applied later.
	 * @private
	 * @param {number} num the number to format
	 * @return {string} the formatted number
	 */
	_formatStandard: function (num) {
		var i;
		var k;
		
		if (typeof(this.maxFractionDigits) !== 'undefined' && this.maxFractionDigits > -1) {
			var factor = Math.pow(10, this.maxFractionDigits);
			num = this.round(num * factor) / factor;
		}

		num = Math.abs(num);

		var parts = ("" + num).split("."),
			integral = parts[0],
			fraction = parts[1],
			cycle,
			formatted;
		
		integral = integral.toString();

		if (this.minFractionDigits > 0) {
			fraction = this._pad(fraction || "", this.minFractionDigits, false);
		}

		if (this.secgroupSize > 0) {
			if (integral.length > this.prigroupSize) {
				var size1 = this.prigroupSize;
				var size2 = integral.length;
				var size3 = size2 - size1;
				integral = integral.slice(0, size3) + this.groupingSeparator + integral.slice(size3);
				var num_sec = integral.substring(0, integral.indexOf(this.groupingSeparator));
				k = num_sec.length;
				while (k > this.secgroupSize) {
					var secsize1 = this.secgroupSize;
					var secsize2 = num_sec.length;
					var secsize3 = secsize2 - secsize1;
					integral = integral.slice(0, secsize3) + this.groupingSeparator + integral.slice(secsize3);
					num_sec = integral.substring(0, integral.indexOf(this.groupingSeparator));
					k = num_sec.length;
				}
			}

			formatted = integral;
		} else if (this.prigroupSize !== 0) {
			cycle = ilib.mod(integral.length - 1, this.prigroupSize);

			formatted = "";

			for (i = 0; i < integral.length - 1; i++) {
				formatted += integral.charAt(i);
				if (cycle === 0) {
					formatted += this.groupingSeparator;
				}
				cycle = ilib.mod(cycle - 1, this.prigroupSize);
			}
			formatted += integral.charAt(integral.length - 1);
		} else {
			formatted = integral;
		}

		if (fraction && (typeof(this.maxFractionDigits) === 'undefined' || this.maxFractionDigits > 0)) {
			formatted += this.decimalSeparator;
			formatted += fraction;
		}
		
		if (this.digits) {
			formatted = ilib.mapString(formatted, this.digits);
		}
		
		return formatted;
	},

	/**
	 * Format a number according to the settings of this number formatter instance.
	 * @param num {number|string|Number|ilib.Number} a floating point number to format
	 * @return {string} a string containing the formatted number
	 */
	format: function (num) {
		var formatted, n;

		if (typeof (num) === 'undefined') {
			return "";
		}

		// convert to a real primitive number type
		n = this._toPrimitive(num);

		if (this.type === "number") {
			formatted = (this.style === "scientific") ?
				this._formatScientific(n) :
				this._formatStandard(n);

			if (num < 0) {
				formatted = this.templateNegative.format({n: formatted});
			}
		} else {
			formatted = this._formatStandard(n);
			var template = (n < 0) ? this.templateNegative : this.template;
			formatted = template.format({
				n: formatted,
				s: this.sign
			});
		}

		return formatted;
	},

	/**
	 * Return the type of formatter. Valid values are "number", "currency", and
	 * "percentage".
	 *
	 * @return {string} the type of formatter
	 */
	getType: function () {
		return this.type;
	},

	/**
	 * Return the locale for this formatter instance.
	 * @return {ilib.Locale} the locale instance for this formatter
	 */
	getLocale: function () {
		return this.locale;
	},

	/**
	 * Returns true if this formatter groups together digits in the integral
	 * portion of a number, based on the options set up in the constructor. In
	 * most western European cultures, this means separating every 3 digits
	 * of the integral portion of a number with a particular character.
	 *
	 * @return {boolean} true if this formatter groups digits in the integral
	 * portion of the number
	 */
	isGroupingUsed: function () {
		return (this.groupingSeparator !== 'undefined' && this.groupingSeparator.length > 0);
	},

	/**
	 * Returns the maximum fraction digits set up in the constructor.
	 *
	 * @return {number} the maximum number of fractional digits this
	 * formatter will format, or -1 for no maximum
	 */
	getMaxFractionDigits: function () {
		return typeof (this.maxFractionDigits) !== 'undefined' ? this.maxFractionDigits : -1;
	},

	/**
	 * Returns the minimum fraction digits set up in the constructor. If
	 * the formatter has the type "currency", then the minimum fraction
	 * digits is the amount of digits that is standard for the currency
	 * in question unless overridden in the options to the constructor.
	 *
	 * @return {number} the minimum number of fractional digits this
	 * formatter will format, or -1 for no minimum
	 */
	getMinFractionDigits: function () {
		return typeof (this.minFractionDigits) !== 'undefined' ? this.minFractionDigits : -1;
	},

	/**
	 * Returns the ISO 4217 code for the currency that this formatter formats.
	 * IF the typeof this formatter is not "currency", then this method will
	 * return undefined.
	 *
	 * @return {string} the ISO 4217 code for the currency that this formatter
	 * formats, or undefined if this not a currency formatter
	 */
	getCurrency: function () {
		return this.currencyInfo && this.currencyInfo.getCode();
	},

	/**
	 * Returns the rounding mode set up in the constructor. The rounding mode
	 * controls how numbers are rounded when the integral or fraction digits
	 * of a number are limited.
	 *
	 * @return {string} the name of the rounding mode used in this formatter
	 */
	getRoundingMode: function () {
		return this.roundingMode;
	},

	/**
	 * If this formatter is a currency formatter, then the style determines how the
	 * currency is denoted in the formatted output. This method returns the style
	 * that this formatter will produce. (See the constructor comment for more about
	 * the styles.)
	 * @return {string} the name of the style this formatter will use to format
	 * currency amounts, or "undefined" if this formatter is not a currency formatter
	 */
	getStyle: function () {
		return this.style;
	}
};

/*
 * durfmt.js - Date formatter definition
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
date.js 
strings.js 
resources.js 
localeinfo.js
util/jsutils.js
*/

// !data dateformats sysres
// !resbundle sysres

/**
 * @class
 * Create a new duration formatter instance. The duration formatter is immutable once
 * it is created, but can format as many different durations as needed with the same
 * options. Create different duration formatter instances for different purposes
 * and then keep them cached for use later if you have more than one duration to
 * format.<p>
 * 
 * Duration formatters format lengths of time. The duration formatter is meant to format 
 * durations of such things as the length of a song or a movie or a meeting, or the 
 * current position in that song or movie while playing it. If you wish to format a 
 * period of time that has a specific start and end date/time, then use a
 * [ilib.DateRngFmt] instance instead and call its format method.<p>
 *  
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when formatting the duration. If the locale is
 * not specified, then the default locale of the app or web page will be used.
 * 
 * <li><i>length</i> - Specify the length of the format to use. The length is the approximate size of the 
 * formatted string.
 * 
 * <ul>
 * <li><i>short</i> - use a short representation of the duration. This is the most compact format possible for the locale. eg. 1y 1m 1w 1d 1:01:01
 * <li><i>medium</i> - use a medium length representation of the duration. This is a slightly longer format. eg. 1 yr 1 mo 1 wk 1 dy 1 hr 1 mi 1 se
 * <li><i>long</i> - use a long representation of the duration. This is a fully specified format, but some of the textual 
 * parts may still be abbreviated. eg. 1 yr 1 mo 1 wk 1 day 1 hr 1 min 1 sec
 * <li><i>full</i> - use a full representation of the duration. This is a fully specified format where all the textual 
 * parts are spelled out completely. eg. 1 year, 1 month, 1 week, 1 day, 1 hour, 1 minute and 1 second
 * </ul>
 * 
 * <li><i>style<i> - whether hours, minutes, and seconds should be formatted as a text string
 * or as a regular time as on a clock. eg. text is "1 hour, 15 minutes", whereas clock is "1:15:00". Valid
 * values for this property are "text" or "clock". Default if this property is not specified
 * is "text".
 * 
 *<li><i>useNative</i> - the flag used to determaine whether to use the native script settings 
 * for formatting the numbers .
 * 
 * <li><i>onLoad</i> - a callback function to call when the format data is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * <p>
 * 
 * Depends directive: !depends durfmt.js
 * 
 * @constructor
 * @param {?Object} options options governing the way this date formatter instance works
 */
ilib.DurFmt = function(options) {
	var sync = true;
	var loadParams = undefined;
	
	this.locale = new ilib.Locale();
	this.length = "short";
	this.style = "text";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.length) {
			if (options.length === 'short' ||
				options.length === 'medium' ||
				options.length === 'long' ||
				options.length === 'full') {
				this.length = options.length;
			}
		}
		
		if (options.style) {
			if (options.style === 'text' || options.style === 'clock') {
				this.style = options.style;
			}
		}
		
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.useNative) === 'boolean') {
			this.useNative = options.useNative;
		}
		
		loadParams = options.loadParams;
	}
	
	new ilib.ResBundle({
		locale: this.locale,
		name: "sysres",
		sync: sync,
		loadParams: loadParams,
		onLoad: ilib.bind(this, function (sysres) {
			switch (this.length) {
				case 'short':
					this.components = {
						year: sysres.getString("#{num}y"),
						month: sysres.getString("#{num}m", "durationShortMonths"),
						week: sysres.getString("#{num}w"),
						day: sysres.getString("#{num}d"),
						hour: sysres.getString("#{num}h"),
						minute: sysres.getString("#{num}m", "durationShortMinutes"),
						second: sysres.getString("#{num}s"),
						millisecond: sysres.getString("#{num}m", "durationShortMillis"),
						separator: sysres.getString(" ", "separatorShort"),
						finalSeparator: "" // not used at this length
					};
					break;
					
				case 'medium':
					this.components = {
						year: sysres.getString("1#1 yr|#{num} yrs", "durationMediumYears"),
						month: sysres.getString("1#1 mo|#{num} mos"),
						week: sysres.getString("1#1 wk|#{num} wks", "durationMediumWeeks"),
						day: sysres.getString("1#1 dy|#{num} dys"),
						hour: sysres.getString("1#1 hr|#{num} hrs", "durationMediumHours"),
						minute: sysres.getString("1#1 mi|#{num} min"),
						second: sysres.getString("1#1 se|#{num} sec"),
						millisecond: sysres.getString("#{num} ms"),
						separator: sysres.getString(" ", "separatorMedium"),
						finalSeparator: "" // not used at this length
					};
					break;
					
				case 'long':
					this.components = {
						year: sysres.getString("1#1 yr|#{num} yrs"),
						month: sysres.getString("1#1 mon|#{num} mons"),
						week: sysres.getString("1#1 wk|#{num} wks"),
						day: sysres.getString("1#1 day|#{num} days", "durationLongDays"),
						hour: sysres.getString("1#1 hr|#{num} hrs"),
						minute: sysres.getString("1#1 min|#{num} min"),
						second: sysres.getString("1#1 sec|#{num} sec"),
						millisecond: sysres.getString("#{num} ms"),
						separator: sysres.getString(", ", "separatorLong"),
						finalSeparator: "" // not used at this length
					};
					break;
					
				case 'full':
					this.components = {
						year: sysres.getString("1#1 year|#{num} years"),
						month: sysres.getString("1#1 month|#{num} months"),
						week: sysres.getString("1#1 week|#{num} weeks"),
						day: sysres.getString("1#1 day|#{num} days"),
						hour: sysres.getString("1#1 hour|#{num} hours"),
						minute: sysres.getString("1#1 minute|#{num} minutes"),
						second: sysres.getString("1#1 second|#{num} seconds"),
						millisecond: sysres.getString("1#1 millisecond|#{num} milliseconds"),
						separator: sysres.getString(", ", "separatorFull"),
						finalSeparator: sysres.getString(" and ", "finalSeparatorFull")
					};
					break;
			}
			
			if (this.style === 'clock') {
				new ilib.DateFmt({
					locale: this.locale,
					type: "time",
					time: "ms",
					sync: sync,
					loadParams: loadParams,
					useNative: this.useNative,
					onLoad: ilib.bind(this, function (fmtMS) {
						this.timeFmtMS = fmtMS;
						new ilib.DateFmt({
							locale: this.locale,
							type: "time",
							time: "hm",
							sync: sync,
							loadParams: loadParams,
							useNative: this.useNative,
							onLoad: ilib.bind(this, function (fmtHM) {
								this.timeFmtHM = fmtHM;		
								new ilib.DateFmt({
									locale: this.locale,
									type: "time",
									time: "hms",
									sync: sync,
									loadParams: loadParams,
									useNative: this.useNative,
									onLoad: ilib.bind(this, function (fmtHMS) {
										this.timeFmtHMS = fmtHMS;		

										// munge with the template to make sure that the hours are not formatted mod 12
										this.timeFmtHM.template = this.timeFmtHM.template.replace(/hh?/, 'H');
										this.timeFmtHM.templateArr = this.timeFmtHM._tokenize(this.timeFmtHM.template);
										this.timeFmtHMS.template = this.timeFmtHMS.template.replace(/hh?/, 'H');
										this.timeFmtHMS.templateArr = this.timeFmtHMS._tokenize(this.timeFmtHMS.template);
										
										this._init(this.timeFmtHM.locinfo, options && options.onLoad);
									})
								});
							})
						});
					})
				});
				return;
			}

			new ilib.LocaleInfo(this.locale, {
				sync: sync,
				loadParams: loadParams,
				onLoad: ilib.bind(this, function (li) {
					this._init(li, options && options.onLoad);
				})
			});
		})
	});
};

/**
 * @private
 * @static
 */
ilib.DurFmt.complist = {
	"text": ["year", "month", "week", "day", "hour", "minute", "second", "millisecond"],
	"clock": ["year", "month", "week", "day"]
};

/**
 * @private
 */
ilib.DurFmt.prototype._mapDigits = function(str) {
	if (this.useNative && this.digits) {
		return ilib.mapString(str.toString(), this.digits);
	}
	return str;
};

/**
 * @private
 * @param {ilib.LocaleInfo} locinfo
 * @param {function(ilib.DurFmt)|undefined} onLoad
 */
ilib.DurFmt.prototype._init = function(locinfo, onLoad) {
	var digits;
	if (typeof(this.useNative) === 'boolean') {
		// if the caller explicitly said to use native or not, honour that despite what the locale data says...
		if (this.useNative) {
			digits = locinfo.getNativeDigits();
			if (digits) {
				this.digits = digits;
			}
		}
	} else if (locinfo.getDigitsStyle() === "native") {
		// else if the locale usually uses native digits, then use them 
		digits = locinfo.getNativeDigits();
		if (digits) {
			this.useNative = true;
			this.digits = digits;
		}
	} // else use western digits always

	if (typeof(onLoad) === 'function') {
		onLoad(this);
	}
};

/**
 * Format a duration according to the format template of this formatter instance.<p>
 * 
 * The components parameter should be an object that contains any or all of these 
 * numeric properties:
 * 
 * <ul>
 * <li>year
 * <li>month
 * <li>week
 * <li>day
 * <li>hour
 * <li>minute
 * <li>second
 * </ul>
 * <p>
 *
 * When a property is left out of the components parameter or has a value of 0, it will not
 * be formatted into the output string, except for times that include 0 minutes and 0 seconds.
 * 
 * This formatter will not ensure that numbers for each component property is within the
 * valid range for that component. This allows you to format durations that are longer
 * than normal range. For example, you could format a duration has being "33 hours" rather
 * than "1 day, 9 hours".
 * 
 * @param {Object} components date/time components to be formatted into a duration string
 * @return {ilib.String} a string with the duration formatted according to the style and 
 * locale set up for this formatter instance. If the components parameter is empty or 
 * undefined, an empty string is returned.
 */
ilib.DurFmt.prototype.format = function (components) {
	var i, list, temp, fmt, secondlast = true, str = "";
	
	list = ilib.DurFmt.complist[this.style];
	//for (i = 0; i < list.length; i++) {
	for (i = list.length-1; i >= 0; i--) {
		//console.log("Now dealing with " + list[i]);
		if (typeof(components[list[i]]) !== 'undefined' && components[list[i]] != 0) {
			if (str.length > 0) {
				str = ((this.length === 'full' && secondlast) ? this.components.finalSeparator : this.components.separator) + str;
				secondlast = false;
			}
			str = this.components[list[i]].formatChoice(components[list[i]], {num: this._mapDigits(components[list[i]])}) + str;
		}
	}

	if (this.style === 'clock') {
		if (typeof(components.hour) !== 'undefined') {
			fmt = (typeof(components.second) !== 'undefined') ? this.timeFmtHMS : this.timeFmtHM;
		} else {
			fmt = this.timeFmtMS;
		}
				
		if (str.length > 0) {
			str += this.components.separator;
		}
		str += fmt._formatTemplate(components, fmt.templateArr);
	}
	
	return new ilib.String(str);
};

/**
 * Return the locale that was used to construct this duration formatter object. If the
 * locale was not given as parameter to the constructor, this method returns the default
 * locale of the system.
 * 
 * @return {ilib.Locale} locale that this duration formatter was constructed with
 */
ilib.DurFmt.prototype.getLocale = function () {
	return this.locale;
};

/**
 * Return the length that was used to construct this duration formatter object. If the
 * length was not given as parameter to the constructor, this method returns the default
 * length. Valid values are "short", "medium", "long", and "full".
 * 
 * @return {string} length that this duration formatter was constructed with
 */
ilib.DurFmt.prototype.getLength = function () {
	return this.length;
};

/**
 * Return the style that was used to construct this duration formatter object. Returns
 * one of "text" or "clock".
 * 
 * @return {string} style that this duration formatter was constructed with
 */
ilib.DurFmt.prototype.getStyle = function () {
	return this.style;
};

ilib.data.ctype_l = {"Lu":[[65,90],[192,214],[216,222],[256],[258],[260],[262],[264],[266],[268],[270],[272],[274],[276],[278],[280],[282],[284],[286],[288],[290],[292],[294],[296],[298],[300],[302],[304],[306],[308],[310],[313],[315],[317],[319],[321],[323],[325],[327],[330],[332],[334],[336],[338],[340],[342],[344],[346],[348],[350],[352],[354],[356],[358],[360],[362],[364],[366],[368],[370],[372],[374],[376,377],[379],[381],[385,386],[388],[390,391],[393,395],[398,401],[403,404],[406,408],[412,413],[415,416],[418],[420],[422,423],[425],[428],[430,431],[433,435],[437],[439,440],[444],[452],[455],[458],[461],[463],[465],[467],[469],[471],[473],[475],[478],[480],[482],[484],[486],[488],[490],[492],[494],[497],[500],[502,504],[506],[508],[510],[512],[514],[516],[518],[520],[522],[524],[526],[528],[530],[532],[534],[536],[538],[540],[542],[544],[546],[548],[550],[552],[554],[556],[558],[560],[562],[570,571],[573,574],[577],[579,582],[584],[586],[588],[590],[880],[882],[886],[902],[904,906],[908],[910,911],[913,929],[931,939],[975],[978,980],[984],[986],[988],[990],[992],[994],[996],[998],[1000],[1002],[1004],[1006],[1012],[1015],[1017,1018],[1021,1071],[1120],[1122],[1124],[1126],[1128],[1130],[1132],[1134],[1136],[1138],[1140],[1142],[1144],[1146],[1148],[1150],[1152],[1162],[1164],[1166],[1168],[1170],[1172],[1174],[1176],[1178],[1180],[1182],[1184],[1186],[1188],[1190],[1192],[1194],[1196],[1198],[1200],[1202],[1204],[1206],[1208],[1210],[1212],[1214],[1216,1217],[1219],[1221],[1223],[1225],[1227],[1229],[1232],[1234],[1236],[1238],[1240],[1242],[1244],[1246],[1248],[1250],[1252],[1254],[1256],[1258],[1260],[1262],[1264],[1266],[1268],[1270],[1272],[1274],[1276],[1278],[1280],[1282],[1284],[1286],[1288],[1290],[1292],[1294],[1296],[1298],[1300],[1302],[1304],[1306],[1308],[1310],[1312],[1314],[1316],[1318],[1329,1366],[4256,4293],[4295],[4301],[7680],[7682],[7684],[7686],[7688],[7690],[7692],[7694],[7696],[7698],[7700],[7702],[7704],[7706],[7708],[7710],[7712],[7714],[7716],[7718],[7720],[7722],[7724],[7726],[7728],[7730],[7732],[7734],[7736],[7738],[7740],[7742],[7744],[7746],[7748],[7750],[7752],[7754],[7756],[7758],[7760],[7762],[7764],[7766],[7768],[7770],[7772],[7774],[7776],[7778],[7780],[7782],[7784],[7786],[7788],[7790],[7792],[7794],[7796],[7798],[7800],[7802],[7804],[7806],[7808],[7810],[7812],[7814],[7816],[7818],[7820],[7822],[7824],[7826],[7828],[7838],[7840],[7842],[7844],[7846],[7848],[7850],[7852],[7854],[7856],[7858],[7860],[7862],[7864],[7866],[7868],[7870],[7872],[7874],[7876],[7878],[7880],[7882],[7884],[7886],[7888],[7890],[7892],[7894],[7896],[7898],[7900],[7902],[7904],[7906],[7908],[7910],[7912],[7914],[7916],[7918],[7920],[7922],[7924],[7926],[7928],[7930],[7932],[7934],[7944,7951],[7960,7965],[7976,7983],[7992,7999],[8008,8013],[8025],[8027],[8029],[8031],[8040,8047],[8120,8123],[8136,8139],[8152,8155],[8168,8172],[8184,8187],[8450],[8455],[8459,8461],[8464,8466],[8469],[8473,8477],[8484],[8486],[8488],[8490,8493],[8496,8499],[8510,8511],[8517],[8579],[11264,11310],[11360],[11362,11364],[11367],[11369],[11371],[11373,11376],[11378],[11381],[11390,11392],[11394],[11396],[11398],[11400],[11402],[11404],[11406],[11408],[11410],[11412],[11414],[11416],[11418],[11420],[11422],[11424],[11426],[11428],[11430],[11432],[11434],[11436],[11438],[11440],[11442],[11444],[11446],[11448],[11450],[11452],[11454],[11456],[11458],[11460],[11462],[11464],[11466],[11468],[11470],[11472],[11474],[11476],[11478],[11480],[11482],[11484],[11486],[11488],[11490],[11499],[11501],[11506],[42560],[42562],[42564],[42566],[42568],[42570],[42572],[42574],[42576],[42578],[42580],[42582],[42584],[42586],[42588],[42590],[42592],[42594],[42596],[42598],[42600],[42602],[42604],[42624],[42626],[42628],[42630],[42632],[42634],[42636],[42638],[42640],[42642],[42644],[42646],[42786],[42788],[42790],[42792],[42794],[42796],[42798],[42802],[42804],[42806],[42808],[42810],[42812],[42814],[42816],[42818],[42820],[42822],[42824],[42826],[42828],[42830],[42832],[42834],[42836],[42838],[42840],[42842],[42844],[42846],[42848],[42850],[42852],[42854],[42856],[42858],[42860],[42862],[42873],[42875],[42877,42878],[42880],[42882],[42884],[42886],[42891],[42893],[42896],[42898],[42912],[42914],[42916],[42918],[42920],[42922],[65313,65338],[66560,66599],[119808,119833],[119860,119885],[119912,119937],[119964],[119966,119967],[119970],[119973,119974],[119977,119980],[119982,119989],[120016,120041],[120068,120069],[120071,120074],[120077,120084],[120086,120092],[120120,120121],[120123,120126],[120128,120132],[120134],[120138,120144],[120172,120197],[120224,120249],[120276,120301],[120328,120353],[120380,120405],[120432,120457],[120488,120512],[120546,120570],[120604,120628],[120662,120686],[120720,120744],[120778]],"Ll":[[97,122],[181],[223,246],[248,255],[257],[259],[261],[263],[265],[267],[269],[271],[273],[275],[277],[279],[281],[283],[285],[287],[289],[291],[293],[295],[297],[299],[301],[303],[305],[307],[309],[311,312],[314],[316],[318],[320],[322],[324],[326],[328,329],[331],[333],[335],[337],[339],[341],[343],[345],[347],[349],[351],[353],[355],[357],[359],[361],[363],[365],[367],[369],[371],[373],[375],[378],[380],[382,384],[387],[389],[392],[396,397],[402],[405],[409,411],[414],[417],[419],[421],[424],[426,427],[429],[432],[436],[438],[441,442],[445,447],[454],[457],[460],[462],[464],[466],[468],[470],[472],[474],[476,477],[479],[481],[483],[485],[487],[489],[491],[493],[495,496],[499],[501],[505],[507],[509],[511],[513],[515],[517],[519],[521],[523],[525],[527],[529],[531],[533],[535],[537],[539],[541],[543],[545],[547],[549],[551],[553],[555],[557],[559],[561],[563,569],[572],[575,576],[578],[583],[585],[587],[589],[591,659],[661,687],[881],[883],[887],[891,893],[912],[940,974],[976,977],[981,983],[985],[987],[989],[991],[993],[995],[997],[999],[1001],[1003],[1005],[1007,1011],[1013],[1016],[1019,1020],[1072,1119],[1121],[1123],[1125],[1127],[1129],[1131],[1133],[1135],[1137],[1139],[1141],[1143],[1145],[1147],[1149],[1151],[1153],[1163],[1165],[1167],[1169],[1171],[1173],[1175],[1177],[1179],[1181],[1183],[1185],[1187],[1189],[1191],[1193],[1195],[1197],[1199],[1201],[1203],[1205],[1207],[1209],[1211],[1213],[1215],[1218],[1220],[1222],[1224],[1226],[1228],[1230,1231],[1233],[1235],[1237],[1239],[1241],[1243],[1245],[1247],[1249],[1251],[1253],[1255],[1257],[1259],[1261],[1263],[1265],[1267],[1269],[1271],[1273],[1275],[1277],[1279],[1281],[1283],[1285],[1287],[1289],[1291],[1293],[1295],[1297],[1299],[1301],[1303],[1305],[1307],[1309],[1311],[1313],[1315],[1317],[1319],[1377,1415],[7424,7467],[7531,7543],[7545,7578],[7681],[7683],[7685],[7687],[7689],[7691],[7693],[7695],[7697],[7699],[7701],[7703],[7705],[7707],[7709],[7711],[7713],[7715],[7717],[7719],[7721],[7723],[7725],[7727],[7729],[7731],[7733],[7735],[7737],[7739],[7741],[7743],[7745],[7747],[7749],[7751],[7753],[7755],[7757],[7759],[7761],[7763],[7765],[7767],[7769],[7771],[7773],[7775],[7777],[7779],[7781],[7783],[7785],[7787],[7789],[7791],[7793],[7795],[7797],[7799],[7801],[7803],[7805],[7807],[7809],[7811],[7813],[7815],[7817],[7819],[7821],[7823],[7825],[7827],[7829,7837],[7839],[7841],[7843],[7845],[7847],[7849],[7851],[7853],[7855],[7857],[7859],[7861],[7863],[7865],[7867],[7869],[7871],[7873],[7875],[7877],[7879],[7881],[7883],[7885],[7887],[7889],[7891],[7893],[7895],[7897],[7899],[7901],[7903],[7905],[7907],[7909],[7911],[7913],[7915],[7917],[7919],[7921],[7923],[7925],[7927],[7929],[7931],[7933],[7935,7943],[7952,7957],[7968,7975],[7984,7991],[8000,8005],[8016,8023],[8032,8039],[8048,8061],[8064,8071],[8080,8087],[8096,8103],[8112,8116],[8118,8119],[8126],[8130,8132],[8134,8135],[8144,8147],[8150,8151],[8160,8167],[8178,8180],[8182,8183],[8458],[8462,8463],[8467],[8495],[8500],[8505],[8508,8509],[8518,8521],[8526],[8580],[11312,11358],[11361],[11365,11366],[11368],[11370],[11372],[11377],[11379,11380],[11382,11387],[11393],[11395],[11397],[11399],[11401],[11403],[11405],[11407],[11409],[11411],[11413],[11415],[11417],[11419],[11421],[11423],[11425],[11427],[11429],[11431],[11433],[11435],[11437],[11439],[11441],[11443],[11445],[11447],[11449],[11451],[11453],[11455],[11457],[11459],[11461],[11463],[11465],[11467],[11469],[11471],[11473],[11475],[11477],[11479],[11481],[11483],[11485],[11487],[11489],[11491,11492],[11500],[11502],[11507],[11520,11557],[11559],[11565],[42561],[42563],[42565],[42567],[42569],[42571],[42573],[42575],[42577],[42579],[42581],[42583],[42585],[42587],[42589],[42591],[42593],[42595],[42597],[42599],[42601],[42603],[42605],[42625],[42627],[42629],[42631],[42633],[42635],[42637],[42639],[42641],[42643],[42645],[42647],[42787],[42789],[42791],[42793],[42795],[42797],[42799,42801],[42803],[42805],[42807],[42809],[42811],[42813],[42815],[42817],[42819],[42821],[42823],[42825],[42827],[42829],[42831],[42833],[42835],[42837],[42839],[42841],[42843],[42845],[42847],[42849],[42851],[42853],[42855],[42857],[42859],[42861],[42863],[42865,42872],[42874],[42876],[42879],[42881],[42883],[42885],[42887],[42892],[42894],[42897],[42899],[42913],[42915],[42917],[42919],[42921],[43002],[64256,64262],[64275,64279],[65345,65370],[66600,66639],[119834,119859],[119886,119892],[119894,119911],[119938,119963],[119990,119993],[119995],[119997,120003],[120005,120015],[120042,120067],[120094,120119],[120146,120171],[120198,120223],[120250,120275],[120302,120327],[120354,120379],[120406,120431],[120458,120485],[120514,120538],[120540,120545],[120572,120596],[120598,120603],[120630,120654],[120656,120661],[120688,120712],[120714,120719],[120746,120770],[120772,120777],[120779]],"Lt":[[453],[456],[459],[498],[8072,8079],[8088,8095],[8104,8111],[8124],[8140],[8188]],"Lm":[[688,705],[710,721],[736,740],[748],[750],[884],[890],[1369],[1600],[1765,1766],[2036,2037],[2042],[2074],[2084],[2088],[2417],[3654],[3782],[4348],[6103],[6211],[6823],[7288,7293],[7468,7530],[7544],[7579,7615],[8305],[8319],[8336,8348],[11388,11389],[11631],[11823],[12293],[12337,12341],[12347],[12445,12446],[12540,12542],[40981],[42232,42237],[42508],[42623],[42775,42783],[42864],[42888],[43000,43001],[43471],[43632],[43741],[43763,43764],[65392],[65438,65439],[94099,94111]],"Lo":[[170],[186],[443],[448,451],[660],[1488,1514],[1520,1522],[1568,1599],[1601,1610],[1646,1647],[1649,1747],[1749],[1774,1775],[1786,1788],[1791],[1808],[1810,1839],[1869,1957],[1969],[1994,2026],[2048,2069],[2112,2136],[2208],[2210,2220],[2308,2361],[2365],[2384],[2392,2401],[2418,2423],[2425,2431],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482],[2486,2489],[2493],[2510],[2524,2525],[2527,2529],[2544,2545],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2649,2652],[2654],[2674,2676],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2749],[2768],[2784,2785],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2877],[2908,2909],[2911,2913],[2929],[2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3024],[3077,3084],[3086,3088],[3090,3112],[3114,3123],[3125,3129],[3133],[3160,3161],[3168,3169],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3261],[3294],[3296,3297],[3313,3314],[3333,3340],[3342,3344],[3346,3386],[3389],[3406],[3424,3425],[3450,3455],[3461,3478],[3482,3505],[3507,3515],[3517],[3520,3526],[3585,3632],[3634,3635],[3648,3653],[3713,3714],[3716],[3719,3720],[3722],[3725],[3732,3735],[3737,3743],[3745,3747],[3749],[3751],[3754,3755],[3757,3760],[3762,3763],[3773],[3776,3780],[3804,3807],[3840],[3904,3911],[3913,3948],[3976,3980],[4096,4138],[4159],[4176,4181],[4186,4189],[4193],[4197,4198],[4206,4208],[4213,4225],[4238],[4304,4346],[4349,4680],[4682,4685],[4688,4694],[4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4992,5007],[5024,5108],[5121,5740],[5743,5759],[5761,5786],[5792,5866],[5888,5900],[5902,5905],[5920,5937],[5952,5969],[5984,5996],[5998,6000],[6016,6067],[6108],[6176,6210],[6212,6263],[6272,6312],[6314],[6320,6389],[6400,6428],[6480,6509],[6512,6516],[6528,6571],[6593,6599],[6656,6678],[6688,6740],[6917,6963],[6981,6987],[7043,7072],[7086,7087],[7098,7141],[7168,7203],[7245,7247],[7258,7287],[7401,7404],[7406,7409],[7413,7414],[8501,8504],[11568,11623],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[12294],[12348],[12353,12438],[12447],[12449,12538],[12543],[12549,12589],[12593,12686],[12704,12730],[12784,12799],[13312,19893],[19968,40908],[40960,40980],[40982,42124],[42192,42231],[42240,42507],[42512,42527],[42538,42539],[42606],[42656,42725],[43003,43009],[43011,43013],[43015,43018],[43020,43042],[43072,43123],[43138,43187],[43250,43255],[43259],[43274,43301],[43312,43334],[43360,43388],[43396,43442],[43520,43560],[43584,43586],[43588,43595],[43616,43631],[43633,43638],[43642],[43648,43695],[43697],[43701,43702],[43705,43709],[43712],[43714],[43739,43740],[43744,43754],[43762],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822],[43968,44002],[44032,55203],[55216,55238],[55243,55291],[63744,64109],[64112,64217],[64285],[64287,64296],[64298,64310],[64312,64316],[64318],[64320,64321],[64323,64324],[64326,64433],[64467,64829],[64848,64911],[64914,64967],[65008,65019],[65136,65140],[65142,65276],[65382,65391],[65393,65437],[65440,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500],[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786],[66176,66204],[66208,66256],[66304,66334],[66352,66368],[66370,66377],[66432,66461],[66464,66499],[66504,66511],[66640,66717],[67584,67589],[67592],[67594,67637],[67639,67640],[67644],[67647,67669],[67840,67861],[67872,67897],[67968,68023],[68030,68031],[68096],[68112,68115],[68117,68119],[68121,68147],[68192,68220],[68352,68405],[68416,68437],[68448,68466],[68608,68680],[69635,69687],[69763,69807],[69840,69864],[69891,69926],[70019,70066],[70081,70084],[71296,71338],[73728,74606],[77824,78894],[92160,92728],[93952,94020],[94032],[110592,110593],[126464,126467],[126469,126495],[126497,126498],[126500],[126503],[126505,126514],[126516,126519],[126521],[126523],[126530],[126535],[126537],[126539],[126541,126543],[126545,126546],[126548],[126551],[126553],[126555],[126557],[126559],[126561,126562],[126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[131072,173782],[173824,177972],[177984,178205],[194560,195101]]};
/*
 * ctype.islpha.js - Character type is alphabetic
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype_l

/**
 * Return whether or not the first character is alphabetic.<p>
 * 
 * Depends directive: !depends ctype.isalnum.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is alphabetic.
 */
ilib.CType.isAlpha = function (ch) {
	return ilib.CType._inRange(ch, 'Lu', ilib.data.ctype_l) ||
		ilib.CType._inRange(ch, 'Ll', ilib.data.ctype_l) ||
		ilib.CType._inRange(ch, 'Lt', ilib.data.ctype_l) ||
		ilib.CType._inRange(ch, 'Lm', ilib.data.ctype_l) ||
		ilib.CType._inRange(ch, 'Lo', ilib.data.ctype_l);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isAlpha._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_l", sync, loadParams, onLoad);
};



/*
 * ctype.isalnum.js - Character type alphanumeric
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js ctype.isalpha.js ctype.isdigit.js

/**
 * Return whether or not the first character is alphabetic or numeric.<p>
 * 
 * Depends directive: !depends ctype.isalnum.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is alphabetic or numeric
 */
ilib.CType.isAlnum = function isAlnum(ch) {
	return ilib.CType.isAlpha(ch) || ilib.CType.isDigit(ch);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isAlnum._init = function (sync, loadParams, onLoad) {
	ilib.CType.isAlpha._init(sync, loadParams, function () {
		ilib.CType.isDigit._init(sync, loadParams, onLoad);
	});
};

/*
 * ctype.isascii.js - Character type is ASCII
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype

/**
 * Return whether or not the first character is in the ASCII range.<p>
 * 
 * Depends directive: !depends ctype.isascii.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is in the ASCII range.
 */
ilib.CType.isAscii = function (ch) {
	return ilib.CType._inRange(ch, 'ascii', ilib.data.ctype);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isAscii._init = function (sync, loadParams, onLoad) {
	ilib.CType._init(sync, loadParams, onLoad);
};

/*
 * ctype.isblank.js - Character type is blank
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype

/**
 * Return whether or not the first character is a blank character.<p>
 * 
 * Depends directive: !depends ctype.isblank.js
 * 
 * ie. a space or a tab.
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is a blank character.
 */
ilib.CType.isBlank = function (ch) {
	return ilib.CType._inRange(ch, 'blank', ilib.data.ctype);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isBlank._init = function (sync, loadParams, onLoad) {
	ilib.CType._init(sync, loadParams, onLoad);
};

ilib.data.ctype_c = {"Cn":[[888,889],[895,899],[907],[909],[930],[1320,1328],[1367,1368],[1376],[1416],[1419,1422],[1424],[1480,1487],[1515,1519],[1525,1535],[1541],[1564,1565],[1806],[1867,1868],[1970,1983],[2043,2047],[2094,2095],[2111],[2140,2141],[2143,2207],[2209],[2221,2275],[2303],[2424],[2432],[2436],[2445,2446],[2449,2450],[2473],[2481],[2483,2485],[2490,2491],[2501,2502],[2505,2506],[2511,2518],[2520,2523],[2526],[2532,2533],[2556,2560],[2564],[2571,2574],[2577,2578],[2601],[2609],[2612],[2615],[2618,2619],[2621],[2627,2630],[2633,2634],[2638,2640],[2642,2648],[2653],[2655,2661],[2678,2688],[2692],[2702],[2706],[2729],[2737],[2740],[2746,2747],[2758],[2762],[2766,2767],[2769,2783],[2788,2789],[2802,2816],[2820],[2829,2830],[2833,2834],[2857],[2865],[2868],[2874,2875],[2885,2886],[2889,2890],[2894,2901],[2904,2907],[2910],[2916,2917],[2936,2945],[2948],[2955,2957],[2961],[2966,2968],[2971],[2973],[2976,2978],[2981,2983],[2987,2989],[3002,3005],[3011,3013],[3017],[3022,3023],[3025,3030],[3032,3045],[3067,3072],[3076],[3085],[3089],[3113],[3124],[3130,3132],[3141],[3145],[3150,3156],[3159],[3162,3167],[3172,3173],[3184,3191],[3200,3201],[3204],[3213],[3217],[3241],[3252],[3258,3259],[3269],[3273],[3278,3284],[3287,3293],[3295],[3300,3301],[3312],[3315,3329],[3332],[3341],[3345],[3387,3388],[3397],[3401],[3407,3414],[3416,3423],[3428,3429],[3446,3448],[3456,3457],[3460],[3479,3481],[3506],[3516],[3518,3519],[3527,3529],[3531,3534],[3541],[3543],[3552,3569],[3573,3584],[3643,3646],[3676,3712],[3715],[3717,3718],[3721],[3723,3724],[3726,3731],[3736],[3744],[3748],[3750],[3752,3753],[3756],[3770],[3774,3775],[3781],[3783],[3790,3791],[3802,3803],[3808,3839],[3912],[3949,3952],[3992],[4029],[4045],[4059,4095],[4294],[4296,4300],[4302,4303],[4681],[4686,4687],[4695],[4697],[4702,4703],[4745],[4750,4751],[4785],[4790,4791],[4799],[4801],[4806,4807],[4823],[4881],[4886,4887],[4955,4956],[4989,4991],[5018,5023],[5109,5119],[5789,5791],[5873,5887],[5901],[5909,5919],[5943,5951],[5972,5983],[5997],[6001],[6004,6015],[6110,6111],[6122,6127],[6138,6143],[6159],[6170,6175],[6264,6271],[6315,6319],[6390,6399],[6429,6431],[6444,6447],[6460,6463],[6465,6467],[6510,6511],[6517,6527],[6572,6575],[6602,6607],[6619,6621],[6684,6685],[6751],[6781,6782],[6794,6799],[6810,6815],[6830,6911],[6988,6991],[7037,7039],[7156,7163],[7224,7226],[7242,7244],[7296,7359],[7368,7375],[7415,7423],[7655,7675],[7958,7959],[7966,7967],[8006,8007],[8014,8015],[8024],[8026],[8028],[8030],[8062,8063],[8117],[8133],[8148,8149],[8156],[8176,8177],[8181],[8191],[8293,8297],[8306,8307],[8335],[8349,8351],[8379,8399],[8433,8447],[8586,8591],[9204,9215],[9255,9279],[9291,9311],[9984],[11085,11087],[11098,11263],[11311],[11359],[11508,11512],[11558],[11560,11564],[11566,11567],[11624,11630],[11633,11646],[11671,11679],[11687],[11695],[11703],[11711],[11719],[11727],[11735],[11743],[11836,11903],[11930],[12020,12031],[12246,12271],[12284,12287],[12352],[12439,12440],[12544,12548],[12590,12592],[12687],[12731,12735],[12772,12783],[12831],[13055],[19894,19903],[40909,40959],[42125,42127],[42183,42191],[42540,42559],[42648,42654],[42744,42751],[42895],[42900,42911],[42923,42999],[43052,43055],[43066,43071],[43128,43135],[43205,43213],[43226,43231],[43260,43263],[43348,43358],[43389,43391],[43470],[43482,43485],[43488,43519],[43575,43583],[43598,43599],[43610,43611],[43644,43647],[43715,43738],[43767,43776],[43783,43784],[43791,43792],[43799,43807],[43815],[43823,43967],[44014,44015],[44026,44031],[55204,55215],[55239,55242],[55292,55295],[64110,64111],[64218,64255],[64263,64274],[64280,64284],[64311],[64317],[64319],[64322],[64325],[64450,64466],[64832,64847],[64912,64913],[64968,65007],[65022,65023],[65050,65055],[65063,65071],[65107],[65127],[65132,65135],[65141],[65277,65278],[65280],[65471,65473],[65480,65481],[65488,65489],[65496,65497],[65501,65503],[65511],[65519,65528],[65534,65535],[65548],[65575],[65595],[65598],[65614,65615],[65630,65663],[65787,65791],[65795,65798],[65844,65846],[65931,65935],[65948,65999],[66046,66175],[66205,66207],[66257,66303],[66335],[66340,66351],[66379,66431],[66462],[66500,66503],[66518,66559],[66718,66719],[66730,67583],[67590,67591],[67593],[67638],[67641,67643],[67645,67646],[67670],[67680,67839],[67868,67870],[67898,67902],[67904,67967],[68024,68029],[68032,68095],[68100],[68103,68107],[68116],[68120],[68148,68151],[68155,68158],[68168,68175],[68185,68191],[68224,68351],[68406,68408],[68438,68439],[68467,68471],[68480,68607],[68681,69215],[69247,69631],[69710,69713],[69744,69759],[69826,69839],[69865,69871],[69882,69887],[69941],[69956,70015],[70089,70095],[70106,71295],[71352,71359],[71370,73727],[74607,74751],[74851,74863],[74868,77823],[78895,92159],[92729,93951],[94021,94031],[94079,94094],[94112,110591],[110594,118783],[119030,119039],[119079,119080],[119262,119295],[119366,119551],[119639,119647],[119666,119807],[119893],[119965],[119968,119969],[119971,119972],[119975,119976],[119981],[119994],[119996],[120004],[120070],[120075,120076],[120085],[120093],[120122],[120127],[120133],[120135,120137],[120145],[120486,120487],[120780,120781],[120832,126463],[126468],[126496],[126499],[126501,126502],[126504],[126515],[126520],[126522],[126524,126529],[126531,126534],[126536],[126538],[126540],[126544],[126547],[126549,126550],[126552],[126554],[126556],[126558],[126560],[126563],[126565,126566],[126571],[126579],[126584],[126589],[126591],[126602],[126620,126624],[126628],[126634],[126652,126703],[126706,126975],[127020,127023],[127124,127135],[127151,127152],[127167,127168],[127184],[127200,127231],[127243,127247],[127279],[127340,127343],[127387,127461],[127491,127503],[127547,127551],[127561,127567],[127570,127743],[127777,127791],[127798],[127869,127871],[127892,127903],[127941],[127947,127967],[127985,127999],[128063],[128065],[128248],[128253,128255],[128318,128319],[128324,128335],[128360,128506],[128577,128580],[128592,128639],[128710,128767],[128884,131071],[173783,173823],[177973,177983],[178206,194559],[195102,917504],[917506,917535],[917632,917759],[918000,983039],[1048574,1048575],[1114110,1114111]],"Cc":[[0,31],[127,159]],"Cf":[[173],[1536,1540],[1757],[1807],[8203,8207],[8234,8238],[8288,8292],[8298,8303],[65279],[65529,65531],[69821],[119155,119162],[917505],[917536,917631]],"Co":[[57344,63743],[983040,1048573],[1048576,1114109]],"Cs":[[55296,57343]]};
/*
 * ctype.iscntrl.js - Character type is control character
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype_c

/**
 * Return whether or not the first character is a control character.<p>
 * 
 * Depends directive: !depends ctype.iscntrl.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is a control character.
 */
ilib.CType.isCntrl = function (ch) {
	return ilib.CType._inRange(ch, 'Cc', ilib.data.ctype_c);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isCntrl._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_c", sync, loadParams, onLoad);
};

/*
 * ctype.isgraph.js - Character type is graph char
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js ctype.isspace.js ctype.iscntrl.js

/**
 * Return whether or not the first character is any printable character
 * other than space.<p>
 * 
 * Depends directive: !depends ctype.isgraph.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is any printable character
 * other than space. 
 */
ilib.CType.isGraph = function (ch) {
	return typeof(ch) !== 'undefined' && ch.length > 0 && !ilib.CType.isSpace(ch) && !ilib.CType.isCntrl(ch);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isGraph._init = function (sync, loadParams, onLoad) {
	ilib.CType.isSpace._init(sync, loadParams, function () {
		ilib.CType.isCntrl._init(sync, loadParams, onLoad);
	});
};

/*
 * ctype.js - Character type definitions
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype

/**
 * Return whether or not the first character is an ideographic character.<p>
 * 
 * Depends directive: !depends ctype.isideo.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is an ideographic character.
 */
ilib.CType.isIdeo = function (ch) {
	return ilib.CType._inRange(ch, 'cjk', ilib.data.ctype) ||
		ilib.CType._inRange(ch, 'cjkradicals', ilib.data.ctype) ||
		ilib.CType._inRange(ch, 'enclosedcjk', ilib.data.ctype) ||
		ilib.CType._inRange(ch, 'cjkpunct', ilib.data.ctype) ||
		ilib.CType._inRange(ch, 'cjkcompatibility', ilib.data.ctype);
	
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isIdeo._init = function (sync, loadParams, onLoad) {
	ilib.CType._init(sync, loadParams, onLoad);
};

/*
 * ctype.islower.js - Character type is lower case letter
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype_l

/**
 * Return whether or not the first character is lower-case. For alphabetic
 * characters in scripts that do not make a distinction between upper- and 
 * lower-case, this function always returns true.<p>
 * 
 * Depends directive: !depends ctype.islower.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is lower-case.
 */
ilib.CType.isLower = function (ch) {
	return ilib.CType._inRange(ch, 'Ll', ilib.data.ctype_l);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isLower._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_l", sync, loadParams, onLoad);
};

/*
 * ctype.isprint.js - Character type is printable char
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js ctype.iscntrl.js

/**
 * Return whether or not the first character is any printable character,
 * including space.<p>
 * 
 * Depends directive: !depends ctype.isprint.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is printable.
 */
ilib.CType.isPrint = function (ch) {
	return typeof(ch) !== 'undefined' && ch.length > 0 && !ilib.CType.isCntrl(ch);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isPrint._init = function (sync, loadParams, onLoad) {
	ilib.CType.isCntrl._init(sync, loadParams, onLoad);
};

ilib.data.ctype_p = {"Pd":[[45],[1418],[1470],[5120],[6150],[8208,8213],[11799],[11802],[11834,11835],[12316],[12336],[12448],[65073,65074],[65112],[65123],[65293]],"Ps":[[40],[91],[123],[3898],[3900],[5787],[8218],[8222],[8261],[8317],[8333],[9001],[10088],[10090],[10092],[10094],[10096],[10098],[10100],[10181],[10214],[10216],[10218],[10220],[10222],[10627],[10629],[10631],[10633],[10635],[10637],[10639],[10641],[10643],[10645],[10647],[10712],[10714],[10748],[11810],[11812],[11814],[11816],[12296],[12298],[12300],[12302],[12304],[12308],[12310],[12312],[12314],[12317],[64830],[65047],[65077],[65079],[65081],[65083],[65085],[65087],[65089],[65091],[65095],[65113],[65115],[65117],[65288],[65339],[65371],[65375],[65378]],"Pe":[[41],[93],[125],[3899],[3901],[5788],[8262],[8318],[8334],[9002],[10089],[10091],[10093],[10095],[10097],[10099],[10101],[10182],[10215],[10217],[10219],[10221],[10223],[10628],[10630],[10632],[10634],[10636],[10638],[10640],[10642],[10644],[10646],[10648],[10713],[10715],[10749],[11811],[11813],[11815],[11817],[12297],[12299],[12301],[12303],[12305],[12309],[12311],[12313],[12315],[12318,12319],[64831],[65048],[65078],[65080],[65082],[65084],[65086],[65088],[65090],[65092],[65096],[65114],[65116],[65118],[65289],[65341],[65373],[65376],[65379]],"Pc":[[95],[8255,8256],[8276],[65075,65076],[65101,65103],[65343]],"Po":[[33,35],[37,39],[42],[44],[46,47],[58,59],[63,64],[92],[161],[167],[182,183],[191],[894],[903],[1370,1375],[1417],[1472],[1475],[1478],[1523,1524],[1545,1546],[1548,1549],[1563],[1566,1567],[1642,1645],[1748],[1792,1805],[2039,2041],[2096,2110],[2142],[2404,2405],[2416],[2800],[3572],[3663],[3674,3675],[3844,3858],[3860],[3973],[4048,4052],[4057,4058],[4170,4175],[4347],[4960,4968],[5741,5742],[5867,5869],[5941,5942],[6100,6102],[6104,6106],[6144,6149],[6151,6154],[6468,6469],[6686,6687],[6816,6822],[6824,6829],[7002,7008],[7164,7167],[7227,7231],[7294,7295],[7360,7367],[7379],[8214,8215],[8224,8231],[8240,8248],[8251,8254],[8257,8259],[8263,8273],[8275],[8277,8286],[11513,11516],[11518,11519],[11632],[11776,11777],[11782,11784],[11787],[11790,11798],[11800,11801],[11803],[11806,11807],[11818,11822],[11824,11833],[12289,12291],[12349],[12539],[42238,42239],[42509,42511],[42611],[42622],[42738,42743],[43124,43127],[43214,43215],[43256,43258],[43310,43311],[43359],[43457,43469],[43486,43487],[43612,43615],[43742,43743],[43760,43761],[44011],[65040,65046],[65049],[65072],[65093,65094],[65097,65100],[65104,65106],[65108,65111],[65119,65121],[65128],[65130,65131],[65281,65283],[65285,65287],[65290],[65292],[65294,65295],[65306,65307],[65311,65312],[65340],[65377],[65380,65381],[65792,65794],[66463],[66512],[67671],[67871],[67903],[68176,68184],[68223],[68409,68415],[69703,69709],[69819,69820],[69822,69825],[69952,69955],[70085,70088],[74864,74867]],"Pi":[[171],[8216],[8219,8220],[8223],[8249],[11778],[11780],[11785],[11788],[11804],[11808]],"Pf":[[187],[8217],[8221],[8250],[11779],[11781],[11786],[11789],[11805],[11809]]};
/*
 * ctype.ispunct.js - Character type is punctuation
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype_p

/**
 * Return whether or not the first character is punctuation.<p>
 * 
 * Depends directive: !depends ctype.isprint.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is punctuation.
 */
ilib.CType.isPunct = function (ch) {
	return ilib.CType._inRange(ch, 'Pd', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Ps', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Pe', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Pc', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Po', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Pi', ilib.data.ctype_p) ||
		ilib.CType._inRange(ch, 'Pf', ilib.data.ctype_p);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isPunct._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_p", sync, loadParams, onLoad);
};

/*
 * ctype.isupper.js - Character type is upper-case letter
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype_l

/**
 * Return whether or not the first character is upper-case. For alphabetic
 * characters in scripts that do not make a distinction between upper- and 
 * lower-case, this function always returns true.<p>
 * 
 * Depends directive: !depends ctype.isupper.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is upper-case.
 */
ilib.CType.isUpper = function (ch) {
	return ilib.CType._inRange(ch, 'Lu', ilib.data.ctype_l);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isUpper._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("ctype_l", sync, loadParams, onLoad);
};

/*
 * ctype.isdigit.js - Character type is digit
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data ctype

/**
 * Return whether or not the first character is a hexadecimal digit written
 * in the Latin script. (0-9 or A-F)<p>
 * 
 * Depends directive: !depends ctype.isxdigit.js
 * 
 * @param {string} ch character to examine
 * @return {boolean} true if the first character is a hexadecimal digit written
 * in the Latin script.
 */
ilib.CType.isXdigit = function (ch) {
	return ilib.CType._inRange(ch, 'xdigit', ilib.data.ctype);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isXdigit._init = function (sync, loadParams, onLoad) {
	ilib.CType._init(sync, loadParams, onLoad);
};

ilib.data.scriptToRange = {"Zyyy":[[0,64],[91,96],[123,169],[171,185],[187,191],[215],[247],[697,735],[741,745],[748,767],[884],[894],[901],[903],[1417],[1548],[1563],[1567],[1600],[1632,1641],[1757],[2404,2405],[3647],[4053,4056],[4347],[5867,5869],[5941,5942],[6146,6147],[6149],[7379],[7393],[7401,7404],[7406,7411],[7413,7414],[8192,8203],[8206,8292],[8298,8304],[8308,8318],[8320,8334],[8352,8378],[8448,8485],[8487,8489],[8492,8497],[8499,8525],[8527,8543],[8585],[8592,9203],[9216,9254],[9280,9290],[9312,9983],[9985,10239],[10496,11084],[11088,11097],[11776,11835],[12272,12283],[12288,12292],[12294],[12296,12320],[12336,12343],[12348,12351],[12443,12444],[12448],[12539,12540],[12688,12703],[12736,12771],[12832,12895],[12927,13007],[13144,13311],[19904,19967],[42752,42785],[42888,42890],[43056,43065],[64830,64831],[65021],[65040,65049],[65072,65106],[65108,65126],[65128,65131],[65279],[65281,65312],[65339,65344],[65371,65381],[65392],[65438,65439],[65504,65510],[65512,65518],[65529,65533],[65792,65794],[65799,65843],[65847,65855],[65936,65947],[66000,66044],[118784,119029],[119040,119078],[119081,119142],[119146,119162],[119171,119172],[119180,119209],[119214,119261],[119552,119638],[119648,119665],[119808,119892],[119894,119964],[119966,119967],[119970],[119973,119974],[119977,119980],[119982,119993],[119995],[119997,120003],[120005,120069],[120071,120074],[120077,120084],[120086,120092],[120094,120121],[120123,120126],[120128,120132],[120134],[120138,120144],[120146,120485],[120488,120779],[120782,120831],[126976,127019],[127024,127123],[127136,127150],[127153,127166],[127169,127183],[127185,127199],[127232,127242],[127248,127278],[127280,127339],[127344,127386],[127462,127487],[127489,127490],[127504,127546],[127552,127560],[127568,127569],[127744,127776],[127792,127797],[127799,127868],[127872,127891],[127904,127940],[127942,127946],[127968,127984],[128000,128062],[128064],[128066,128247],[128249,128252],[128256,128317],[128320,128323],[128336,128359],[128507,128576],[128581,128591],[128640,128709],[128768,128883],[917505],[917536,917631]],"Latn":[[65,90],[97,122],[170],[186],[192,214],[216,246],[248,696],[736,740],[7424,7461],[7468,7516],[7522,7525],[7531,7543],[7545,7614],[7680,7935],[8305],[8319],[8336,8348],[8490,8491],[8498],[8526],[8544,8584],[11360,11391],[42786,42887],[42891,42894],[42896,42899],[42912,42922],[43000,43007],[64256,64262],[65313,65338],[65345,65370]],"Grek":[[880,883],[885,887],[890,893],[900],[902],[904,906],[908],[910,929],[931,993],[1008,1023],[7462,7466],[7517,7521],[7526,7530],[7615],[7936,7957],[7960,7965],[7968,8005],[8008,8013],[8016,8023],[8025],[8027],[8029],[8031,8061],[8064,8116],[8118,8132],[8134,8147],[8150,8155],[8157,8175],[8178,8180],[8182,8190],[8486],[65856,65930],[119296,119365]],"Cyrl":[[1024,1156],[1159,1319],[7467],[7544],[11744,11775],[42560,42647],[42655]],"Armn":[[1329,1366],[1369,1375],[1377,1415],[1418],[1423],[64275,64279]],"Hebr":[[1425,1479],[1488,1514],[1520,1524],[64285,64310],[64312,64316],[64318],[64320,64321],[64323,64324],[64326,64335]],"Arab":[[1536,1540],[1542,1547],[1549,1562],[1566],[1568,1599],[1601,1610],[1622,1631],[1642,1647],[1649,1756],[1758,1791],[1872,1919],[2208],[2210,2220],[2276,2302],[64336,64449],[64467,64829],[64848,64911],[64914,64967],[65008,65020],[65136,65140],[65142,65276],[69216,69246],[126464,126467],[126469,126495],[126497,126498],[126500],[126503],[126505,126514],[126516,126519],[126521],[126523],[126530],[126535],[126537],[126539],[126541,126543],[126545,126546],[126548],[126551],[126553],[126555],[126557],[126559],[126561,126562],[126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[126704,126705]],"Syrc":[[1792,1805],[1807,1866],[1869,1871]],"Thaa":[[1920,1969]],"Deva":[[2304,2384],[2387,2403],[2406,2423],[2425,2431],[43232,43259]],"Beng":[[2433,2435],[2437,2444],[2447,2448],[2451,2472],[2474,2480],[2482],[2486,2489],[2492,2500],[2503,2504],[2507,2510],[2519],[2524,2525],[2527,2531],[2534,2555]],"Guru":[[2561,2563],[2565,2570],[2575,2576],[2579,2600],[2602,2608],[2610,2611],[2613,2614],[2616,2617],[2620],[2622,2626],[2631,2632],[2635,2637],[2641],[2649,2652],[2654],[2662,2677]],"Gujr":[[2689,2691],[2693,2701],[2703,2705],[2707,2728],[2730,2736],[2738,2739],[2741,2745],[2748,2757],[2759,2761],[2763,2765],[2768],[2784,2787],[2790,2801]],"Orya":[[2817,2819],[2821,2828],[2831,2832],[2835,2856],[2858,2864],[2866,2867],[2869,2873],[2876,2884],[2887,2888],[2891,2893],[2902,2903],[2908,2909],[2911,2915],[2918,2935]],"Taml":[[2946,2947],[2949,2954],[2958,2960],[2962,2965],[2969,2970],[2972],[2974,2975],[2979,2980],[2984,2986],[2990,3001],[3006,3010],[3014,3016],[3018,3021],[3024],[3031],[3046,3066]],"Telu":[[3073,3075],[3077,3084],[3086,3088],[3090,3112],[3114,3123],[3125,3129],[3133,3140],[3142,3144],[3146,3149],[3157,3158],[3160,3161],[3168,3171],[3174,3183],[3192,3199]],"Knda":[[3202,3203],[3205,3212],[3214,3216],[3218,3240],[3242,3251],[3253,3257],[3260,3268],[3270,3272],[3274,3277],[3285,3286],[3294],[3296,3299],[3302,3311],[3313,3314]],"Mlym":[[3330,3331],[3333,3340],[3342,3344],[3346,3386],[3389,3396],[3398,3400],[3402,3406],[3415],[3424,3427],[3430,3445],[3449,3455]],"Sinh":[[3458,3459],[3461,3478],[3482,3505],[3507,3515],[3517],[3520,3526],[3530],[3535,3540],[3542],[3544,3551],[3570,3572]],"Thai":[[3585,3642],[3648,3675]],"Laoo":[[3713,3714],[3716],[3719,3720],[3722],[3725],[3732,3735],[3737,3743],[3745,3747],[3749],[3751],[3754,3755],[3757,3769],[3771,3773],[3776,3780],[3782],[3784,3789],[3792,3801],[3804,3807]],"Tibt":[[3840,3911],[3913,3948],[3953,3991],[3993,4028],[4030,4044],[4046,4052],[4057,4058]],"Mymr":[[4096,4255],[43616,43643]],"Geok":[[4256,4293],[4295],[4301],[4304,4346],[4348,4351],[11520,11557],[11559],[11565]],"Hang":[[4352,4607],[12334,12335],[12593,12686],[12800,12830],[12896,12926],[43360,43388],[44032,55203],[55216,55238],[55243,55291],[65440,65470],[65474,65479],[65482,65487],[65490,65495],[65498,65500]],"Ethi":[[4608,4680],[4682,4685],[4688,4694],[4696],[4698,4701],[4704,4744],[4746,4749],[4752,4784],[4786,4789],[4792,4798],[4800],[4802,4805],[4808,4822],[4824,4880],[4882,4885],[4888,4954],[4957,4988],[4992,5017],[11648,11670],[11680,11686],[11688,11694],[11696,11702],[11704,11710],[11712,11718],[11720,11726],[11728,11734],[11736,11742],[43777,43782],[43785,43790],[43793,43798],[43808,43814],[43816,43822]],"Cher":[[5024,5108]],"Cans":[[5120,5759],[6320,6389]],"Ogam":[[5760,5788]],"Runr":[[5792,5866],[5870,5872]],"Khmr":[[6016,6109],[6112,6121],[6128,6137],[6624,6655]],"Mong":[[6144,6145],[6148],[6150,6158],[6160,6169],[6176,6263],[6272,6314]],"Hira":[[12353,12438],[12445,12447],[110593],[127488]],"Kana":[[12449,12538],[12541,12543],[12784,12799],[13008,13054],[13056,13143],[65382,65391],[65393,65437],[110592]],"Bopo":[[746,747],[12549,12589],[12704,12730]],"Hani":[[11904,11929],[11931,12019],[12032,12245],[12293],[12295],[12321,12329],[12344,12347],[13312,19893],[19968,40908],[63744,64109],[64112,64217],[131072,173782],[173824,177972],[177984,178205],[194560,195101]],"Yiii":[[40960,42124],[42128,42182]],"Ital":[[66304,66334],[66336,66339]],"Goth":[[66352,66378]],"Dsrt":[[66560,66639]],"Zinh":[[768,879],[1157,1158],[1611,1621],[1648],[2385,2386],[7376,7378],[7380,7392],[7394,7400],[7405],[7412],[7616,7654],[7676,7679],[8204,8205],[8400,8432],[12330,12333],[12441,12442],[65024,65039],[65056,65062],[66045],[119143,119145],[119163,119170],[119173,119179],[119210,119213],[917760,917999]],"Tglg":[[5888,5900],[5902,5908]],"Hano":[[5920,5940]],"Buhd":[[5952,5971]],"Tagb":[[5984,5996],[5998,6000],[6002,6003]],"Limb":[[6400,6428],[6432,6443],[6448,6459],[6464],[6468,6479]],"Tale":[[6480,6509],[6512,6516]],"Linb":[[65536,65547],[65549,65574],[65576,65594],[65596,65597],[65599,65613],[65616,65629],[65664,65786]],"Ugar":[[66432,66461],[66463]],"Shaw":[[66640,66687]],"Osma":[[66688,66717],[66720,66729]],"Cprt":[[67584,67589],[67592],[67594,67637],[67639,67640],[67644],[67647]],"Brai":[[10240,10495]],"Bugi":[[6656,6683],[6686,6687]],"Copt":[[994,1007],[11392,11507],[11513,11519]],"Talu":[[6528,6571],[6576,6601],[6608,6618],[6622,6623]],"Glag":[[11264,11310],[11312,11358]],"Tfng":[[11568,11623],[11631,11632],[11647]],"Sylo":[[43008,43051]],"Xpeo":[[66464,66499],[66504,66517]],"Khar":[[68096,68099],[68101,68102],[68108,68115],[68117,68119],[68121,68147],[68152,68154],[68159,68167],[68176,68184]],"Bali":[[6912,6987],[6992,7036]],"Xsux":[[73728,74606],[74752,74850],[74864,74867]],"Phnx":[[67840,67867],[67871]],"Phag":[[43072,43127]],"Nkoo":[[1984,2042]],"Sund":[[7040,7103],[7360,7367]],"Lepc":[[7168,7223],[7227,7241],[7245,7247]],"Olck":[[7248,7295]],"Vaii":[[42240,42539]],"Saur":[[43136,43204],[43214,43225]],"Kali":[[43264,43311]],"Rjng":[[43312,43347],[43359]],"Lyci":[[66176,66204]],"Cari":[[66208,66256]],"Lydi":[[67872,67897],[67903]],"Cham":[[43520,43574],[43584,43597],[43600,43609],[43612,43615]],"Lana":[[6688,6750],[6752,6780],[6783,6793],[6800,6809],[6816,6829]],"Tavt":[[43648,43714],[43739,43743]],"Avst":[[68352,68405],[68409,68415]],"Egyp":[[77824,78894]],"Samr":[[2048,2093],[2096,2110]],"Lisu":[[42192,42239]],"Bamu":[[42656,42743],[92160,92728]],"Java":[[43392,43469],[43471,43481],[43486,43487]],"Mtei":[[43744,43766],[43968,44013],[44016,44025]],"Armi":[[67648,67669],[67671,67679]],"Sarb":[[68192,68223]],"Prti":[[68416,68437],[68440,68447]],"Phli":[[68448,68466],[68472,68479]],"Orkh":[[68608,68680]],"Kthi":[[69760,69825]],"Batk":[[7104,7155],[7164,7167]],"Brah":[[69632,69709],[69714,69743]],"Mand":[[2112,2139],[2142]],"Cakm":[[69888,69940],[69942,69955]],"Merc":[[68000,68023],[68030,68031]],"Mero":[[67968,67999]],"Plrd":[[93952,94020],[94032,94078],[94095,94111]],"Shrd":[[70016,70088],[70096,70105]],"Sora":[[69840,69864],[69872,69881]],"Takr":[[71296,71351],[71360,71369]]};
/*
 * ctype.isscript.js - Character type is script
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ctype.js

// !data scriptToRange

/**
 * Return whether or not the first character in the given string is 
 * in the given script. The script is given as the 4-letter ISO
 * 15924 script code.<p>
 * 
 * Depends directive: !depends ctype.isscript.js
 * 
 * @param {string} ch character to examine
 * @param {string} script the 4-letter ISO 15924 to query against
 * @return {boolean} true if the first character is in the given script, and
 * false otherwise
 */
ilib.CType.isScript = function (ch, script) {
	return ilib.CType._inRange(ch, script, ilib.data.scriptToRange);
};

/**
 * @protected
 * @param {boolean} sync
 * @param {Object} loadParams
 * @param {function(*)|undefined} onLoad
 */
ilib.CType.isScript._init = function (sync, loadParams, onLoad) {
	ilib.CType._load("scriptToRange", sync, loadParams, onLoad);
};


ilib.data.scripts = {"Afak":{"nb":439,"nm":"Afaka","lid":"Afaka"},"Aghb":{"nb":239,"nm":"Caucasian Albanian","lid":"Caucasian_Albanian"},"Arab":{"nb":160,"nm":"Arabic","lid":"Arabic","rtl":true,"ime":false,"casing":false},"Armi":{"nb":124,"nm":"Imperial Aramaic","lid":"Imperial_Aramaic","rtl":true,"ime":false,"casing":false},"Armn":{"nb":230,"nm":"Armenian","lid":"Armenian","rtl":false,"ime":false,"casing":true},"Avst":{"nb":134,"nm":"Avestan","lid":"Avestan","rtl":true,"ime":false,"casing":false},"Bali":{"nb":360,"nm":"Balinese","lid":"Balinese","rtl":false,"ime":false,"casing":false},"Bamu":{"nb":435,"nm":"Bamum","lid":"Bamum","rtl":false,"ime":true,"casing":false},"Bass":{"nb":259,"nm":"Bassa Vah","lid":"Bassa_Vah"},"Batk":{"nb":365,"nm":"Batak","lid":"Batak","rtl":false,"ime":false,"casing":false},"Beng":{"nb":325,"nm":"Bengali","lid":"Bengali","rtl":false,"ime":false,"casing":false},"Blis":{"nb":550,"nm":"Blissymbols","lid":"Blissymbols"},"Bopo":{"nb":285,"nm":"Bopomofo","lid":"Bopomofo","rtl":false,"ime":false,"casing":false},"Brah":{"nb":300,"nm":"Brahmi","lid":"Brahmi","rtl":false,"ime":false,"casing":false},"Brai":{"nb":570,"nm":"Braille","lid":"Braille","rtl":false,"ime":false,"casing":false},"Bugi":{"nb":367,"nm":"Buginese","lid":"Buginese","rtl":false,"ime":false,"casing":false},"Buhd":{"nb":372,"nm":"Buhid","lid":"Buhid","rtl":false,"ime":false,"casing":false},"Cakm":{"nb":349,"nm":"Chakma","lid":"Chakma","rtl":false,"ime":false,"casing":false},"Cans":{"nb":440,"nm":"Unified Canadian Aboriginal Syllabics","lid":"Canadian_Aboriginal","rtl":false,"ime":true,"casing":false},"Cari":{"nb":201,"nm":"Carian","lid":"Carian","rtl":false,"ime":false,"casing":false},"Cham":{"nb":358,"nm":"Cham","lid":"Cham","rtl":false,"ime":false,"casing":false},"Cher":{"nb":445,"nm":"Cherokee","lid":"Cherokee","rtl":false,"ime":false,"casing":false},"Cirt":{"nb":291,"nm":"Cirth","lid":"Cirth"},"Copt":{"nb":204,"nm":"Coptic","lid":"Coptic","rtl":false,"ime":false,"casing":true},"Cprt":{"nb":403,"nm":"Cypriot","lid":"Cypriot","rtl":true,"ime":false,"casing":false},"Cyrl":{"nb":220,"nm":"Cyrillic","lid":"Cyrillic","rtl":false,"ime":false,"casing":true},"Cyrs":{"nb":221,"nm":"Cyrillic (Old Church Slavonic variant)","lid":"Cyrillic_(Old_Church_Slavonic_variant)"},"Deva":{"nb":315,"nm":"Devanagari (Nagari)","lid":"Devanagari","rtl":false,"ime":false,"casing":false},"Dsrt":{"nb":250,"nm":"Deseret (Mormon)","lid":"Deseret","rtl":false,"ime":false,"casing":true},"Dupl":{"nb":755,"nm":"Duployan shorthand, Duployan stenography","lid":"Duployan_shorthand,_Duployan_stenography"},"Egyd":{"nb":70,"nm":"Egyptian demotic","lid":"Egyptian_demotic"},"Egyh":{"nb":60,"nm":"Egyptian hieratic","lid":"Egyptian_hieratic"},"Egyp":{"nb":50,"nm":"Egyptian hieroglyphs","lid":"Egyptian_Hieroglyphs","rtl":false,"ime":true,"casing":false},"Elba":{"nb":226,"nm":"Elbasan","lid":"Elbasan"},"Ethi":{"nb":430,"nm":"Ethiopic (GeÊ»ez)","lid":"Ethiopic","rtl":false,"ime":true,"casing":false},"Geor":{"nb":240,"nm":"Georgian (Mkhedruli)","lid":"Georgian","rtl":false,"ime":false,"casing":false},"Geok":{"nb":241,"nm":"Khutsuri (Asomtavruli and Nuskhuri)","lid":"Georgian"},"Glag":{"nb":225,"nm":"Glagolitic","lid":"Glagolitic","rtl":false,"ime":false,"casing":true},"Goth":{"nb":206,"nm":"Gothic","lid":"Gothic","rtl":false,"ime":false,"casing":false},"Gran":{"nb":343,"nm":"Grantha","lid":"Grantha"},"Grek":{"nb":200,"nm":"Greek","lid":"Greek","rtl":false,"ime":false,"casing":true},"Gujr":{"nb":320,"nm":"Gujarati","lid":"Gujarati","rtl":false,"ime":false,"casing":false},"Guru":{"nb":310,"nm":"Gurmukhi","lid":"Gurmukhi","rtl":false,"ime":false,"casing":false},"Hang":{"nb":286,"nm":"Hangul (HangÅ­l, Hangeul)","lid":"Hangul","rtl":false,"ime":true,"casing":false},"Hani":{"nb":500,"nm":"Han (Hanzi, Kanji, Hanja)","lid":"Han","rtl":false,"ime":true,"casing":false},"Hano":{"nb":371,"nm":"Hanunoo (HanunÃ³o)","lid":"Hanunoo","rtl":false,"ime":false,"casing":false},"Hans":{"nb":501,"nm":"Han (Simplified variant)","lid":"Han_(Simplified_variant)","rtl":false,"ime":true,"casing":false},"Hant":{"nb":502,"nm":"Han (Traditional variant)","lid":"Han_(Traditional_variant)","rtl":false,"ime":true,"casing":false},"Hebr":{"nb":125,"nm":"Hebrew","lid":"Hebrew","rtl":true,"ime":false,"casing":false},"Hira":{"nb":410,"nm":"Hiragana","lid":"Hiragana","rtl":false,"ime":false,"casing":false},"Hluw":{"nb":80,"nm":"Anatolian Hieroglyphs (Luwian Hieroglyphs, Hittite Hieroglyphs)","lid":"Anatolian_Hieroglyphs_(Luwian_Hieroglyphs,_Hittite_Hieroglyphs)"},"Hmng":{"nb":450,"nm":"Pahawh Hmong","lid":"Pahawh_Hmong"},"Hrkt":{"nb":412,"nm":"Japanese syllabaries (alias for Hiragana + Katakana)","lid":"Katakana_Or_Hiragana"},"Hung":{"nb":176,"nm":"Old Hungarian (Hungarian Runic)","lid":"Old_Hungarian_(Hungarian_Runic)"},"Inds":{"nb":610,"nm":"Indus (Harappan)","lid":"Indus_(Harappan)"},"Ital":{"nb":210,"nm":"Old Italic (Etruscan, Oscan, etc.)","lid":"Old_Italic","rtl":false,"ime":false,"casing":false},"Java":{"nb":361,"nm":"Javanese","lid":"Javanese","rtl":false,"ime":false,"casing":false},"Jpan":{"nb":413,"nm":"Japanese (alias for Han + Hiragana + Katakana)","lid":"Japanese_(alias_for_Han_+_Hiragana_+_Katakana)","rtl":false,"ime":false,"casing":false},"Jurc":{"nb":510,"nm":"Jurchen","lid":"Jurchen"},"Kali":{"nb":357,"nm":"Kayah Li","lid":"Kayah_Li","rtl":false,"ime":false,"casing":false},"Kana":{"nb":411,"nm":"Katakana","lid":"Katakana","rtl":false,"ime":false,"casing":false},"Khar":{"nb":305,"nm":"Kharoshthi","lid":"Kharoshthi","rtl":true,"ime":false,"casing":false},"Khmr":{"nb":355,"nm":"Khmer","lid":"Khmer","rtl":false,"ime":false,"casing":false},"Khoj":{"nb":322,"nm":"Khojki","lid":"Khojki"},"Knda":{"nb":345,"nm":"Kannada","lid":"Kannada","rtl":false,"ime":false,"casing":false},"Kore":{"nb":287,"nm":"Korean (alias for Hangul + Han)","lid":"Korean_(alias_for_Hangul_+_Han)","rtl":false,"ime":true,"casing":false},"Kpel":{"nb":436,"nm":"Kpelle","lid":"Kpelle"},"Kthi":{"nb":317,"nm":"Kaithi","lid":"Kaithi","rtl":false,"ime":false,"casing":false},"Lana":{"nb":351,"nm":"Tai Tham (Lanna)","lid":"Tai_Tham","rtl":false,"ime":false,"casing":false},"Laoo":{"nb":356,"nm":"Lao","lid":"Lao","rtl":false,"ime":false,"casing":false},"Latf":{"nb":217,"nm":"Latin (Fraktur variant)","lid":"Latin_(Fraktur_variant)"},"Latg":{"nb":216,"nm":"Latin (Gaelic variant)","lid":"Latin_(Gaelic_variant)"},"Latn":{"nb":215,"nm":"Latin","lid":"Latin","rtl":false,"ime":false,"casing":true},"Lepc":{"nb":335,"nm":"Lepcha (RÃ³ng)","lid":"Lepcha","rtl":false,"ime":false,"casing":false},"Limb":{"nb":336,"nm":"Limbu","lid":"Limbu","rtl":false,"ime":false,"casing":false},"Lina":{"nb":400,"nm":"Linear A","lid":"Linear_A"},"Linb":{"nb":401,"nm":"Linear B","lid":"Linear_B","rtl":false,"ime":true,"casing":false},"Lisu":{"nb":399,"nm":"Lisu (Fraser)","lid":"Lisu","rtl":false,"ime":true,"casing":false},"Loma":{"nb":437,"nm":"Loma","lid":"Loma"},"Lyci":{"nb":202,"nm":"Lycian","lid":"Lycian","rtl":false,"ime":false,"casing":false},"Lydi":{"nb":116,"nm":"Lydian","lid":"Lydian","rtl":true,"ime":false,"casing":false},"Mahj":{"nb":314,"nm":"Mahajani","lid":"Mahajani"},"Mand":{"nb":140,"nm":"Mandaic, Mandaean","lid":"Mandaic","rtl":true,"ime":false,"casing":false},"Mani":{"nb":139,"nm":"Manichaean","lid":"Manichaean"},"Maya":{"nb":90,"nm":"Mayan hieroglyphs","lid":"Mayan_hieroglyphs"},"Mend":{"nb":438,"nm":"Mende","lid":"Mende"},"Merc":{"nb":101,"nm":"Meroitic Cursive","lid":"Meroitic_Cursive","rtl":true,"ime":false,"casing":false},"Mero":{"nb":100,"nm":"Meroitic Hieroglyphs","lid":"Meroitic_Hieroglyphs","rtl":true,"ime":false,"casing":false},"Mlym":{"nb":347,"nm":"Malayalam","lid":"Malayalam","rtl":false,"ime":false,"casing":false},"Moon":{"nb":218,"nm":"Moon (Moon code, Moon script, Moon type)","lid":"Moon_(Moon_code,_Moon_script,_Moon_type)"},"Mong":{"nb":145,"nm":"Mongolian","lid":"Mongolian","rtl":false,"ime":false,"casing":false},"Mroo":{"nb":199,"nm":"Mro, Mru","lid":"Mro,_Mru"},"Mtei":{"nb":337,"nm":"Meitei Mayek (Meithei, Meetei)","lid":"Meetei_Mayek","rtl":false,"ime":false,"casing":false},"Mymr":{"nb":350,"nm":"Myanmar (Burmese)","lid":"Myanmar","rtl":false,"ime":false,"casing":false},"Narb":{"nb":106,"nm":"Old North Arabian (Ancient North Arabian)","lid":"Old_North_Arabian_(Ancient_North_Arabian)"},"Nbat":{"nb":159,"nm":"Nabataean","lid":"Nabataean"},"Nkgb":{"nb":420,"nm":"Nakhi Geba ('Na-'Khi Â²GgÅ-Â¹baw, Naxi Geba)","lid":"Nakhi_Geba_('Na-'Khi_Â²GgÅ-Â¹baw,_Naxi_Geba)"},"Nkoo":{"nb":165,"nm":"NâKo","lid":"Nko","rtl":true,"ime":false,"casing":false},"Nshu":{"nb":499,"nm":"NÃ¼shu","lid":"NÃ¼shu"},"Ogam":{"nb":212,"nm":"Ogham","lid":"Ogham","rtl":false,"ime":false,"casing":false},"Olck":{"nb":261,"nm":"Ol Chiki (Ol Cemetâ, Ol, Santali)","lid":"Ol_Chiki","rtl":false,"ime":false,"casing":false},"Orkh":{"nb":175,"nm":"Old Turkic, Orkhon Runic","lid":"Old_Turkic","rtl":true,"ime":false,"casing":false},"Orya":{"nb":327,"nm":"Oriya","lid":"Oriya","rtl":false,"ime":false,"casing":false},"Osma":{"nb":260,"nm":"Osmanya","lid":"Osmanya","rtl":false,"ime":false,"casing":false},"Palm":{"nb":126,"nm":"Palmyrene","lid":"Palmyrene"},"Perm":{"nb":227,"nm":"Old Permic","lid":"Old_Permic"},"Phag":{"nb":331,"nm":"Phags-pa","lid":"Phags_Pa","rtl":false,"ime":false,"casing":false},"Phli":{"nb":131,"nm":"Inscriptional Pahlavi","lid":"Inscriptional_Pahlavi","rtl":true,"ime":false,"casing":false},"Phlp":{"nb":132,"nm":"Psalter Pahlavi","lid":"Psalter_Pahlavi"},"Phlv":{"nb":133,"nm":"Book Pahlavi","lid":"Book_Pahlavi"},"Phnx":{"nb":115,"nm":"Phoenician","lid":"Phoenician","rtl":true,"ime":false,"casing":false},"Plrd":{"nb":282,"nm":"Miao (Pollard)","lid":"Miao","rtl":false,"ime":false,"casing":false},"Prti":{"nb":130,"nm":"Inscriptional Parthian","lid":"Inscriptional_Parthian","rtl":true,"ime":false,"casing":false},"Qaaa":{"nb":900,"nm":"Reserved for private use (start)","lid":"Reserved_for_private_use_(start)"},"Qabx":{"nb":949,"nm":"Reserved for private use (end)","lid":"Reserved_for_private_use_(end)"},"Rjng":{"nb":363,"nm":"Rejang (Redjang, Kaganga)","lid":"Rejang","rtl":false,"ime":false,"casing":false},"Roro":{"nb":620,"nm":"Rongorongo","lid":"Rongorongo"},"Runr":{"nb":211,"nm":"Runic","lid":"Runic","rtl":false,"ime":false,"casing":false},"Samr":{"nb":123,"nm":"Samaritan","lid":"Samaritan","rtl":true,"ime":false,"casing":false},"Sara":{"nb":292,"nm":"Sarati","lid":"Sarati"},"Sarb":{"nb":105,"nm":"Old South Arabian","lid":"Old_South_Arabian","rtl":true,"ime":false,"casing":false},"Saur":{"nb":344,"nm":"Saurashtra","lid":"Saurashtra","rtl":false,"ime":false,"casing":false},"Sgnw":{"nb":95,"nm":"SignWriting","lid":"SignWriting"},"Shaw":{"nb":281,"nm":"Shavian (Shaw)","lid":"Shavian","rtl":false,"ime":false,"casing":false},"Shrd":{"nb":319,"nm":"Sharada, ÅÄradÄ","lid":"Sharada","rtl":false,"ime":false,"casing":false},"Sind":{"nb":318,"nm":"Khudawadi, Sindhi","lid":"Khudawadi,_Sindhi"},"Sinh":{"nb":348,"nm":"Sinhala","lid":"Sinhala","rtl":false,"ime":false,"casing":false},"Sora":{"nb":398,"nm":"Sora Sompeng","lid":"Sora_Sompeng","rtl":false,"ime":false,"casing":false},"Sund":{"nb":362,"nm":"Sundanese","lid":"Sundanese","rtl":false,"ime":false,"casing":false},"Sylo":{"nb":316,"nm":"Syloti Nagri","lid":"Syloti_Nagri","rtl":false,"ime":false,"casing":false},"Syrc":{"nb":135,"nm":"Syriac","lid":"Syriac","rtl":true,"ime":false,"casing":false},"Syre":{"nb":138,"nm":"Syriac (Estrangelo variant)","lid":"Syriac_(Estrangelo_variant)"},"Syrj":{"nb":137,"nm":"Syriac (Western variant)","lid":"Syriac_(Western_variant)"},"Syrn":{"nb":136,"nm":"Syriac (Eastern variant)","lid":"Syriac_(Eastern_variant)"},"Tagb":{"nb":373,"nm":"Tagbanwa","lid":"Tagbanwa","rtl":false,"ime":false,"casing":false},"Takr":{"nb":321,"nm":"Takri, á¹¬ÄkrÄ«, á¹¬Äá¹krÄ«","lid":"Takri","rtl":false,"ime":false,"casing":false},"Tale":{"nb":353,"nm":"Tai Le","lid":"Tai_Le","rtl":false,"ime":false,"casing":false},"Talu":{"nb":354,"nm":"New Tai Lue","lid":"New_Tai_Lue","rtl":false,"ime":false,"casing":false},"Taml":{"nb":346,"nm":"Tamil","lid":"Tamil","rtl":false,"ime":false,"casing":false},"Tang":{"nb":520,"nm":"Tangut","lid":"Tangut"},"Tavt":{"nb":359,"nm":"Tai Viet","lid":"Tai_Viet","rtl":false,"ime":false,"casing":false},"Telu":{"nb":340,"nm":"Telugu","lid":"Telugu","rtl":false,"ime":false,"casing":false},"Teng":{"nb":290,"nm":"Tengwar","lid":"Tengwar"},"Tfng":{"nb":120,"nm":"Tifinagh (Berber)","lid":"Tifinagh","rtl":false,"ime":false,"casing":false},"Tglg":{"nb":370,"nm":"Tagalog (Baybayin, Alibata)","lid":"Tagalog","rtl":false,"ime":false,"casing":false},"Thaa":{"nb":170,"nm":"Thaana","lid":"Thaana","rtl":true,"ime":false,"casing":false},"Thai":{"nb":352,"nm":"Thai","lid":"Thai","rtl":false,"ime":false,"casing":false},"Tibt":{"nb":330,"nm":"Tibetan","lid":"Tibetan","rtl":false,"ime":false,"casing":false},"Tirh":{"nb":326,"nm":"Tirhuta","lid":"Tirhuta"},"Ugar":{"nb":40,"nm":"Ugaritic","lid":"Ugaritic","rtl":false,"ime":false,"casing":false},"Vaii":{"nb":470,"nm":"Vai","lid":"Vai","rtl":false,"ime":true,"casing":false},"Visp":{"nb":280,"nm":"Visible Speech","lid":"Visible_Speech"},"Wara":{"nb":262,"nm":"Warang Citi (Varang Kshiti)","lid":"Warang_Citi_(Varang_Kshiti)"},"Wole":{"nb":480,"nm":"Woleai","lid":"Woleai"},"Xpeo":{"nb":30,"nm":"Old Persian","lid":"Old_Persian","rtl":false,"ime":false,"casing":false},"Xsux":{"nb":20,"nm":"Cuneiform, Sumero-Akkadian","lid":"Cuneiform","rtl":false,"ime":true,"casing":false},"Yiii":{"nb":460,"nm":"Yi","lid":"Yi","rtl":false,"ime":true,"casing":false},"Zinh":{"nb":994,"nm":"Code for inherited script","lid":"Inherited","rtl":false,"ime":false,"casing":false},"Zmth":{"nb":995,"nm":"Mathematical notation","lid":"Mathematical_notation"},"Zsym":{"nb":996,"nm":"Symbols","lid":"Symbols"},"Zxxx":{"nb":997,"nm":"Code for unwritten documents","lid":"Code_for_unwritten_documents"},"Zyyy":{"nb":998,"nm":"Code for undetermined script","lid":"Common","rtl":false,"ime":false,"casing":false},"Zzzz":{"nb":999,"nm":"Code for uncoded script","lid":"Unknown","rtl":false,"ime":false,"casing":false}};
/*
 * scriptinfo.js - information about scripts
 * 
 * Copyright Â© 2012-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js

// !data scripts

/**
 * @class
 * Create a new script info instance. This class encodes information about
 * scripts, which are sets of characters used in a writing system.<p>
 * 
 * The options object may contain any of the following properties:
 * 
 * <ul>
 * <li><i>onLoad</i> - a callback function to call when the script info object is fully 
 * loaded. When the onLoad option is given, the script info object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Depends directive: !depends scriptinfo.js
 * 
 * @constructor
 * @param {string} script The ISO 15924 4-letter identifier for the script
 * @param {Object} options parameters to initialize this matcher 
 */
ilib.ScriptInfo = function(script, options) {
	var sync = true,
	    loadParams = undefined;
	
	this.script = script;
	
	if (options) {
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			loadParams = options.loadParams;
		}
	}

	if (!ilib.ScriptInfo.cache) {
		ilib.ScriptInfo.cache = {};
	}

	if (!ilib.data.scripts) {
		ilib.loadData({
			object: ilib.ScriptInfo, 
			locale: "-", 
			name: "scripts.json", 
			sync: sync, 
			loadParams: loadParams, 
			callback: ilib.bind(this, function (info) {
				if (!info) {
					info = {"Latn":{"nb":215,"nm":"Latin","lid":"Latin","rtl":false,"ime":false,"casing":true}};
					var spec = this.locale.getSpec().replace(/-/g, "_");
					ilib.ScriptInfo.cache[spec] = info;
				}
				ilib.data.scripts = info;
				this.info = script && ilib.data.scripts[script];
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			})
		});
	} else {
		this.info = ilib.data.scripts[script];
	}

};

/**
 * Return an array of all ISO 15924 4-letter identifier script identifiers that
 * this copy of ilib knows about.
 * @static
 * @return {Array.<string>} an array of all script identifiers that this copy of
 * ilib knows about
 */
ilib.ScriptInfo.getAllScripts = function() {
	var ret = [],
		script = undefined,
		scripts = ilib.data.scripts;
	
	for (script in scripts) {
		if (script && scripts[script]) {
			ret.push(script);
		}
	}
	
	return ret;
};

ilib.ScriptInfo.prototype = {
	/**
	 * Return the 4-letter ISO 15924 identifier associated
	 * with this script.
	 * @return {string} the 4-letter ISO code for this script
	 */
	getCode: function () {
		return this.info && this.script;
	},
	
	/**
	 * Get the ISO 15924 code number associated with this
	 * script.
	 * 
	 * @return {number} the ISO 15924 code number
	 */
	getCodeNumber: function () {
		return this.info && this.info.nb || 0;
	},
	
	/**
	 * Get the name of this script in English.
	 * 
	 * @return {string} the name of this script in English
	 */
	getName: function () {
		return this.info && this.info.nm;
	},
	
	/**
	 * Get the long identifier assciated with this script.
	 * 
	 * @return {string} the long identifier of this script
	 */
	getLongCode: function () {
		return this.info && this.info.lid;
	},
	
	/**
	 * Return the usual direction that text in this script is written
	 * in. Possible return values are "rtl" for right-to-left,
	 * "ltr" for left-to-right, and "ttb" for top-to-bottom.
	 * 
	 * @return {string} the usual direction that text in this script is
	 * written in
	 */
	getScriptDirection: function() {
		return (this.info && typeof(this.info.rtl) !== 'undefined' && this.info.rtl) ? "rtl" : "ltr";
	},
	
	/**
	 * Return true if this script typically requires an input method engine
	 * to enter its characters.
	 * 
	 * @return {boolean} true if this script typically requires an IME
	 */
	getNeedsIME: function () {
		return this.info && this.info.ime ? true : false; // converts undefined to false
	},
	
	/**
	 * Return true if this script uses lower- and upper-case characters.
	 * 
	 * @return {boolean} true if this script uses letter case
	 */
	getCasing: function () {
		return this.info && this.info.casing ? true : false; // converts undefined to false
	}
};
ilib.data.name = {"components":{"short":{"g":1,"f":1},"medium":{"g":1,"m":1,"f":1},"long":{"p":1,"g":1,"m":1,"f":1},"full":{"p":1,"g":1,"m":1,"f":1,"s":1}},"format":"{prefix} {givenName} {middleName} {familyName}{suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"and","and2":"and","or1":"or","or2":"or"},"auxillaries":{"mac":1,"mc":1,"von":1,"von der":1,"von den":1,"vom":1,"zu":1,"zum":1,"zur":1,"von und zu":1,"van":1,"van der":1,"van de":1,"van den":1,"de":1,"den":1,"vande":1,"vander":1,"di":1,"da":1,"della":1,"dalla":1,"la":1,"lo":1,"li":1,"del":1,"des":1,"le":1,"les":1,"du":1,"de la":1,"de los":1,"de las":1,"do":1,"abu":1,"ibn":1,"bar":1,"ter":1,"ben":1,"bin":1},"prefixes":["doctor","dr","mr","mrs","ms","mister","madame","madamoiselle","miss","herr","hr","frau","fr","fraulein","frl","monsieur","mssr","mdm","mlle","seÃ±or","seÃ±ora","seÃ±orita","sr","sra","srta","meneer","mevrouw"],"suffixes":[",","junior","jr","senior","sr","i","iii","iii","iv","v","vi","vii","viii","ix","x","2nd","3rd","4th","5th","6th","7th","8th","9th","10th","esq","phd","md","ddm","dds"]};
ilib.data.name_ar = {"conjunctions":{"and1":"Ù","and2":"Ù","or1":"Ø£Ù","or2":"Ø£Ù"},"prefixes":["Ø§ÙØ³ÙØ¯","Ø§ÙØ³ÙØ¯Ø©","Ø§ÙØ±Ø¦ÙØ³","ÙØ§Ø¦Ø¨ Ø§ÙØ±Ø¦ÙØ³","Ø±Ø¦ÙØ³ Ø§ÙÙØ²Ø±Ø§Ø¡","Ø¹ÙØ¯Ø©","ÙØ­Ø§ÙØ¸","Ø§ÙØ±Ø¦ÙØ³","Ø±Ø¦ÙØ³Ø©","ÙØ²ÙØ±","Ø­Ø§Ø®Ø§Ù","ÙÙÙØ§Ù","Ø§ÙÙØ³","Ø§ÙØ´ÙÙ","ÙØ¯Ø±Ø¨","Ø£Ø³ØªØ§Ø°","Ø§ÙØ£Ø³ØªØ§Ø°","Ø§ÙÙÙÙ","Ø§ÙÙÙÙØ©","Ø§ÙØ£ÙÙØ±","Ø§ÙØ£ÙÙØ±Ø©","Ø§ÙØ¬ÙØ±Ø§Ù","Ø§ÙØ§ÙÙØ±Ø§Ù","Ø§ÙÙÙÙØ¶","ÙØ´Ø±ÙØ©","Ø´Ø±ÙÙ","ÙÙØªØ´","Ø§ÙÙØ¨Ø§Ø­Ø«","Ø¶Ø§Ø¨Ø·","Ø³ÙØ¯Ù Ø§ÙØ±Ø¦ÙØ³","Ø³ÙØ¯Ø©","ÙØ§ Ø±Ø¨","Ø§ÙÙÙÙØ²Ø©","Ø§ÙØ£Ø¨","Ø§ÙØ£Ù","Ø´ÙÙÙ","Ø§ÙØ´ÙÙÙØ©","Ø§ÙÙØ³","Ø¹ÙØ©","Ø§ÙØ¹Ù","Ø§ÙØ¬Ø¯Ø©","Ø¬Ø¯Ø©","Ø§ÙØ¬Ø¯","Ø¬Ø¯Ù","ØºØ±Ø§ÙÙØ§","Ø§Ø¨Ù Ø¹Ù"],"suffixes":["ØµØºØ§Ø±","Ø§ÙØ§Ø¨Ù","ÙØ¨Ø§Ø±","Ø±ÙØ§Ù","Ø£ÙØ§","Ø«Ø§ÙØ«Ø§","Ø«Ø§ÙØ«Ø§","Ø±Ø§Ø¨Ø¹Ø§","Ø§ÙØ³Ø§Ø¯Ø³","Ø§ÙØ³Ø§Ø¨Ø¹","Ø§ÙØ«Ø§ÙÙ","Ø§ÙØªØ§Ø³Ø¹","Ø¯ÙØªÙØ±Ø§Ù","Ø£Ø±Ø¬Ø¹"]};
ilib.data.name_bg = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"Ð¸","and2":"Ð¸","or1":"Ð¸Ð»Ð¸","or2":"Ð¸Ð»Ð¸"},"prefixes":["Ð-Ð¶Ð°","Ð-ÑÐ°","Ð¡ÑÑ","ÐÐµÐ¹Ð´Ð¸","ÐÐ¾ÑÐ¿Ð¾Ð´","Ð´Ð°Ð¼","Ð±Ð°ÑÐ°","Ð¼Ð°Ð¹ÐºÐ°","Ð±ÑÐ°Ñ","ÑÐµÑÑÑÐ°","Ð¿ÑÐµÐ¿Ð¾Ð´Ð¾Ð±Ð½Ð¸Ñ","Ð»ÐµÐ»Ñ","ÑÐ¸ÑÐ¾","Ð±Ð°Ð±Ð°","Ð±Ð°Ð±Ð°","ÐÑÐ´Ð¾","ÐÑÐ´Ð¾","ÐÑÐ°Ð½Ð¼Ð°","Grampa","Ð±ÑÐ°ÑÐ¾Ð²ÑÐµÐ´","Ð¸","Ð¸Ð»Ð¸"],"suffixes":["Ð¼Ð»Ð°Ð´ÑÐ¸","ÑÑÐ°ÑÑÐ¸","Ð¿ÐµÐ½ÑÐ¸Ð¾Ð½ÐµÑ"]};
ilib.data.name_bn = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"à¦à¦¬à¦","and2":"à¦à¦¬à¦","or1":"à¦¬à¦¾","or2":"à¦¬à¦¾"},"prefixes":["à¦¡à¦¾à¦à§à¦¤à¦¾à¦°","à¦¡à¦¿à¦à¦°","à¦®à¦¿à¦","à¦®à¦¿à¦¸à§à¦¸","à¦à¦®à¦à¦¸","à¦®à¦¹à¦¾à¦¸à¦¯","à¦®à¦¾à¦¦à¦¾à¦®","à¦®à¦¿à¦¸à§"],"suffixes":["à¦à¦¨à¦¿à¦·à§à¦ ","à¦à§à¦¯à§à¦·à§à¦ ","à¦à¦¸à¦à¦°","à¦¦à§à¦¬à¦¿à¦¤à§à§","à¦¤à§à¦¤à§à§","à¦ªà¦¿à¦à¦à¦à¦¡à¦¿"]};
ilib.data.name_bs = {"format":"{prefix} {givenName} {middleName} {familyName}{suffix}","sortByHeadWord":false,"conjunctions":{"and1":"i","and2":"a","or1":"ili","or2":"ili"},"prefixes":["gospodin","gospoÄica","gospoÄa","predsjednik","podpredsjednik","premijer","gradonaÄelnik","guverner","predsjednik","predsjedavajuÄa","ministar","rabin","kuvar","trener","profesor","kralj","kraljica","princ","princeza","povjerenik","domar","Å¡erif","inspektor","detektiv","oficir","ser","dama","dama","otac","majka","brat","sestra","veleÄasni","tetka","ujak","baka","deda","roÄak"],"suffixes":["mlaÄi","viÅ¡i","moÄiti","penzionisan"]};
ilib.data.name_cs = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"a","and2":"a","or1":"nebo","or2":"nebo"},"prefixes":["pan","panÃ­","dÃ¡ma","prezident","viceprezident","ministerskÃ½ pÅedseda","starosta","guvernÃ©r","pÅedseda","pÅedsedkynÄ","ministr","rabÃ­n","pastor","Å¡Ã©fkuchaÅ","trenÃ©r","profesor","profesor","krÃ¡l","krÃ¡lovna","princ","princezna","obecnÃ½","admirÃ¡l","komisaÅ","sprÃ¡vce","Å¡erif","inspektor","detektivnÃ­","dÅ¯stojnÃ­k","pane","dÃ¡ma","otec","matka","bratr","sestra","ctihodnÃ½","teta","strÃ½c","babiÄka","babiÄka","dÄdeÄek","dÄdeÄek","Granma","dÄdeÄek","bratranec","a","nebo"],"suffixes":["v dÅ¯chodu"]};
ilib.data.name_da = {"sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"og","and2":"og","or1":"eller","or2":"eller"},"prefixes":["herr","fru","frÃ¸ken","prÃ¦sident","vice president","premierminister","borgmester","guvernÃ¸r","formand","forkvinde","minister","rabbiner","mulah","prÃ¦st","kok","trÃ¦ner","professor","prof","konge","dronning","prince","prinsesse","generelt","admiral","kommissÃ¦r","OverlÃ¦gen","sherif","inspektÃ¸r","detektiv","far","mor","bror","sÃ¸ster","Ã¦rvÃ¦rdige","tante","onkel","bedstemor","bedstefar","fÃ¦tter"],"suffixes":["pensioneret"]};
ilib.data.name_de = {"sortByHeadWord":true,"conjunctions":{"and1":"und","and2":"und","or1":"oder","or2":"oder"},"auxillaries":{"von":1,"van":1,"von der":1,"von den":1,"vom":1,"auf":1,"auf dem":1,"auf der":1,"aus":1,"aus den":1,"aus dem":1,"aus der":1,"in":1,"im":1,"in den":1,"in dem":1,"in der":1,"zu":1,"zu den":1,"zum":1,"zur":1,"von und zu":1,"vor dem":1},"prefixes":["doktor","dr","med","dent","habil","rer nat","hc","jur","vet","ing","dipl-ing","prÃ¤sident","prÃ¤sidentin","professor","professorin","prof","privatdozent","privatdozentin","direktor","direktorin","chefarzt","oberarzt","chefÃ¤rztin","oberÃ¤rztin","mutter","vater","schwester","bruder","patin","pate","tante","onkel","groÃmutter","groÃvater","oma","opa","bundesprÃ¤sident","bundeskanzler","minister","senator","staatssekretÃ¤r","abgeordneter","bÃ¼rgermeister","landrat","stadtrat","staatsanwalt","vorsitzender","rechtsanwalt","anwalt","verteidiger","bundesprÃ¤sidentin","bundeskanzlerin","ministerin","senatorin","staatssekretÃ¤rin","abgeordnete","bÃ¼rgermeisterin","landrÃ¤tin","stadtrÃ¤tin","staatsanwÃ¤ltin","vorsitzende","rechtsanwÃ¤ltin","anwÃ¤ltin","verteidigerin","unteroffizier","leutnant","feldwebel","fÃ¤hnrich","oberleutnant","hauptmann","major","gefreiter","kapitÃ¤n","admiral","maat","bootsmann","oberst","general","exzellenz","botschafter","botschafterin","konsul","konsulin","gesandter","gesandte","fÃ¼rst","fÃ¼rstin","herzog","herzogin","graf","grÃ¤fin","baron","baronin","freiherr","freifrau","hofrÃ¤tin","hofrat","hr","regierungsrÃ¤tin","regierungsrat","rgr","amtsrÃ¤tin","amtsrat","ar","kanzleirÃ¤tin","kanzleirat","kzlr","kommerzialrÃ¤tin","kommerzialrat","kommr","Ã¶konomierÃ¤tin","Ã¶konomierat","Ã¶kr","medizinalrÃ¤tin","medizinalrat","medr","obermedizinalrÃ¤tin","obermedizinalrat","omedr","veterinÃ¤rrÃ¤tin","veterinÃ¤rrat","vetr","technische rÃ¤tin","technischer rat","tr","schulrÃ¤tin","schulrat","sr","oberschulrÃ¤tin","oberschulrat","osr","studienrÃ¤tin","studienrat","str","oberstudienrÃ¤tin","oberstudienrat","ostr","universitÃ¤tsprofessorin","universitÃ¤tsprofessor","univprof","kammersÃ¤ngerin","kammersÃ¤nger","ksÃ¤ng","kammerschauspielerin","kammerschauspieler","kschausp","pfarrer","pfr","pfarrerin","dekan","dekanin","kreisdekan","kreisdekanin","bischof","bischÃ¶fin","regionalbischof","regionalbischÃ¶fin","ddr","agr","biol hum","diac","disc pol","e h","h c mult","habil","iur","iur","iur et rer pol","math","med","med dent","med dent et scient med","med univ","med univ et scient med","med vet","mult","mus","nat med","nat techn","oec","oec publ","oec troph","paed","pharm","phil","rer agr","rer biol hum","rer biol vet","rer cam","rer cult","rer cur","rer forest","rer hort","rer med","rer merc","rer mont","rer nat","rer oec","rer physiol","rer pol","rer publ","rer sec","rer silv","rer soc","rer soc oec","rer tech","sc agr","sc hum","sc inf","sc inf biomed","sc inf med","sc math","sc mus","sc nat","sc oec","sc pol","sc rel","sc soc","sc techn","scient med","techn","theol","troph","dr-ing","hochwÃ¼rdigste","hochwÃ¼rdigster","hochwÃ¼rden","ehrwÃ¼rden","montsignore","hoheit","kÃ¶nigliche","ihre","seine","hochwohlgeborene","hochwohlgeborener","heiliger","der","die","das","dem","den","und","oder"],"suffixes":["junior","jr","senior","sr","i","iii","iii","iv","v","vi","vii","viii","ix","x","ir","im ruhestand","ba","ma","phd"]};
ilib.data.name_el = {"sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"ÎºÎ±Î¹","and2":"ÎºÎ±Î¹","or1":"Î®","or2":"Î®"},"prefixes":["Î¿ Îº","ÎºÎ±","ÎºÏÏÎ¯Î±","ÏÏÏÎµÎ´ÏÎ¿Ï","Î±Î½ÏÎ¹ÏÏÏÎµÎ´ÏÎ¿Ï","ÏÏÏÎ¸ÏÏÎ¿ÏÏÎ³ÏÏ","Î´Î®Î¼Î±ÏÏÎ¿Ï","ÎºÏÎ²ÎµÏÎ½Î®ÏÎ·Ï","ÏÏÏÎµÎ´ÏÎ¿Ï","ÏÏÏÎµÎ´ÏÎ¿Ï","ÏÏÎ¿ÏÏÎ³ÏÏ","ÏÎ±Î²Î²Î¯Î½Î¿Ï","ÏÎ¬ÏÏÎ¿ÏÎ±Ï","ÏÎµÏ","ÏÎ¿ÏÎ»Î¼Î±Î½","ÎºÎ±Î¸Î·Î³Î·ÏÎ®Ï","Î²Î±ÏÎ¹Î»Î¹Î¬Ï","Î²Î±ÏÎ¯Î»Î¹ÏÏÎ±","ÏÏÎ¯Î³ÎºÎ¹ÏÎ±Ï","ÏÏÎ¹Î³ÎºÎ¯ÏÎ¹ÏÏÎ±","Î³ÎµÎ½Î¹ÎºÏÏ","Î½Î±ÏÎ±ÏÏÎ¿Ï","ÎµÏÎ¯ÏÏÎ¿ÏÎ¿Ï","ÎµÏÎ¹ÏÏÎ¬ÏÎ·Ï","ÏÎµÏÎ¯ÏÎ·Ï","ÎµÏÎ¹Î¸ÎµÏÏÎ·ÏÎ®Ï","Î½ÏÎµÏÎ­ÎºÏÎ¹Î²","Î±Î¾Î¹ÏÎ¼Î±ÏÎ¹ÎºÏÏ","ÎºÏÏÎ¹Îµ","ÎºÏÏÎ¯Î±","Î¬ÏÏÎ¿Î½ÏÎ±Ï","ÎºÏÏÎ¬","ÏÎ±ÏÎ­ÏÎ±Ï","Î¼Î·ÏÎ­ÏÎ±","Î±Î´ÎµÎ»ÏÏÏ","Î±Î´ÎµÎ»ÏÎ®","Î±Î¹Î´ÎµÏÎ¹Î¼ÏÏÎ±ÏÎ¿Ï","Î¸ÎµÎ¯Î±","Î¸ÎµÎ¯Î¿Ï","Î³Î¹Î±Î³Î¹Î¬","Î³Î¹Î±Î³Î¹Î¬","ÏÎ±ÏÏÎ¿ÏÏ","ÏÎ±ÏÏÎ¿ÏÏ","ÎµÎ¾Î¬Î´ÎµÎ»ÏÎ¿Ï"],"suffixes":["ÎºÎ±ÏÏÏÎµÏÎ¿Ï","Î±ÏÏÎ±Î¹ÏÏÎµÏÎ¿Ï","Î¼Î¿ÏÏÎºÎµÏÏ","ÏÏÎ½ÏÎ±Î¾Î¹Î¿ÏÏÎ¿Ï"]};
ilib.data.name_en = {"prefixes":["rep","representative","senator","congressman","congresswoman","president","vice president","vice-president","mp","member of parliament","chief","justice","chief justice","judge","minister","prime minister","governor general","lieutenant governor","speaker of the house of commons","speaker of the house","speaker of the senate","supreme court justice","secretary of state","mayor","justice of the peace","emporer","chairman","chairwoman","alderman","general secretary","ambassador","minister","cardinal","bishop","archbishop","rabbi","grand rabbi","mulah","mullah","canon","cantor","pastor","ps","monsignor","mgsr","pope","chef","master","coach","professor","prof","nobel laureate","king","queen","prince","princess","crown prince","crown princess","marquess","marchioness","earl","countess","count","archduke","duke","duchess","baron","baroness","viscount","private","private first class","corporal","sargeant","staff sargeant","sargeant first class","master sargeant","first sargeant","sargeant major","command sargeant major","sargeant major of the army","pv1","pv2","pfc","spc","cpl","sgt","ssg","sfc","msg","1sg","sgm","csm","sma","warrant officer","chief warrant officer","second lieutenant","first lieutenant","captain","major","lieutenant colonel","colonel","brigadier general","major general","lieutenant general","general","2lt","1lt","cpt","maj","ltc","col","bg","mg","ltg","gen","general of the army","fleet admiral","admiral","vice admiral","rear admiral","commander","lieutenant commander","lieutenant","lieutenant (junior grade)","ensign","fadm","adm","vadm","radm","rdml","capt","cdr","lcdr","lt","ltjg","ens","petty officer","petty officer first class","petty officer second class","petty officer third class","petty officer 1st class","petty officer 2nd class","petty officer 3rd class","po","po1","po2","po3","chief petty officer","senior chief petty officer","master chief petty officer","cpo","scpo","mcpo","command master chief petty officer","fleet master chief petty officer","force master chief petty officer","cmdcm","fltcm","forcm","master chief petty officer of the navy","mcpon","sergeant major of the marine corps","master gunnery sergeant","gunnery sergeant","lance corporal","sgtmaj","mgysgt","1stsgt","msgt","gysgt","ssgt","sgt","cpl","lcpl","pfc","pvt","airman basic","airman","airman first class","senior airman","technical sergeant","master sergeant","senior master sergeant","chief master sergeant","command chief master sergeant","chief master sergeant of the air force","ab","amn","a1c","sra","tsgt","msgt","smsgt","cmsgt","ccm","cmsaf","field marshal","brigadier","officer cadet","fm","lt gen","maj gen","brig","col","lt col","maj","capt","lt","2lt","ocdt","admiral of the fleet","marshal","marshal of the air force","air marshal","commodore","air commodore","group captain","lieutenant colonel","lt colonel","wing commander","lt commander","commandant","squadron leader","flight lieutenant","sub-lieutenant","flying officer","ensign","second lieutenant","2nd lieutenant","pilot officer","midshipman","warrant officer","leading seaman","seaman","aircraftman","midshipwoman","leading seawoman","seawoman","aircraftwoman","vice-admiral","vadm","lieutenant-general","lgen","rear-admiral","radm","major-general","mgen","brigadier-general","bgen","lieutenant-colonel","lcol","naval cadet","ncdt","able seaman","ab","ordinary seaman","os","pte","master bombardier","trooper","bombardier","sapper","signalman","craftsman","guardsman","rifleman","fusilier","chief of police","police commissioner","superintendent","sheriff","deputy chief of police","deputy commissioner","deputy superintendent","undersheriff","deputy sheriff","inspector","deputy inspector","detective","investigator","officer","deputy sheriff","constable","police constable","chief superintendent","assistant chief constable","deputy chief constable","chief constable","assistant commissioner","deputy commissioner","detective constable","staff inspector","staff superintendent","station duty officer","auxiliary sergeant","senior constable","cadet","probationary constable","recruit","sir","lady","lord","dame","his royal highness","hrh","his honour","his honor","maestro","his lordship","his majesty","his worship","the right worshipful","the worshipful","the honourable","the right honourable","the honorable","the right honorable","the hon","the most noble","the most honourable","the most honorable","the most hon","the rt hon","the right honourable and learned","the right honourable and gallant","the much honoured","the right honorable and learned","the right honorable and gallant","the much honored","the much hon","her royal highness","her honour","her honor","her majesty","her worship","his excellency","her excellency","his serene highness","her serene highness","his most reverend excellency","her most reverend excellency","his holiness","hh","his all holiness","hah","his beatitude","his eminence","he","his beatitude and eminence","father","mother","brother","br","sister","reverend","rev","the most reverend","the most rev","his grace","the right reverend","the rt rev","the most reverend and right honourable","the most reverend and right honorable","the most rev and rt hon","the right reverend and right honourable monsignor","the right reverend and right honorable monsignor","the rt rev and rt hon mgr","the right reverend and right honourable","the right reverend and right honorable","the very reverend","the very rev","the reverend monsignor","the rev msgr","the venerable","venerable","ven","his imperial majesty","his imperial and royal majesty","his apostolic majesty","his catholic majesty","his most faithful majesty","his imperial highness","his imperial and royal highness","his royal highness","his grand ducal highness","his highness","his ducal serene highness","his serene highness","his illustrious highness","his highborn","his grace","his high well-born","his excellency","his high excellency","her imperial majesty","her imperial and royal majesty","her apostolic majesty","her catholic majesty","her most faithful majesty","her imperial highness","her imperial and royal highness","her royal highness","her grand ducal highness","her highness","her ducal serene highness","her serene highness","her illustrious highness","her highborn","her grace","her high well-born","her excellency","her high excellency","him","hi&rm","ham","hcm","hfm","hih","hi&rh","hrh","hgdh","hh","hdsh","hsh","hillh","he","the","and","or","aunt","uncle","grandma","grandpa","granma","grampa","cousin"],"suffixes":["junior","jr","senior","sr","i","iii","iii","iv","v","vi","vii","viii","ix","x","2nd","3rd","4th","5th","6th","7th","8th","9th","10th","esquire","esq","jd","phd","md","ddm","dds","dmv","bvsc","ah","bsc","ba","ret","retired"]};
ilib.data.name_es = {"conjunctions":{"and1":"y","and2":"e","or1":"o","or2":"u"},"prefixes":["presidente","vicepresidente","profesor","prof","licenciado","licenc","ingeniero","ing","arquitecto","arq","cardenal","monseÃ±or","madre","padre","hermana","hermano","madrina","padrino","mamÃ¡","papÃ¡","tÃ­a","tÃ­o","abuela","abuelo","abuelita","abuelito","primo","prima","nono","nona","capitÃ¡n","general","coronel","mayor","almirante","general","comandante","teniente","teniente coronel","teniente general","detective","ministro","alcalde","alcaldesa","embajador","embajadora","don","doÃ±a","el seÃ±or","la seÃ±ora","la seÃ±orita","el sr","la sra","la srta","reverendo","reverenda","su excelencia","su santidad","el presidente","su excelencia","excelentÃ­simo seÃ±or","excelentÃ­sima seÃ±ora","seÃ±or ministro","seÃ±ora ministra","seÃ±or alcalde","seÃ±ora alcaldesa","su eminencia","honorable seÃ±or","honorable seÃ±ora","la","el","los","las","y","e","o","u"],"suffixes":["sr","senior","jr","junior","hijo","padre","ii","iii","iv","v","vi","vii","viii","ix","x"]};
ilib.data.name_et = {"sortByHeadWord":true,"conjunctions":{"and1":"ja","and2":"ja","or1":"vÃµi","or2":"vÃµi"},"prefixes":["hr","prl","pr","president","asepresident","peaminister","linnapea","kuberner","eesistuja","koosoleku juhataja","minister","rabi","mulah","pastor","peakokk","treener","professor","prof","kuningas","kuninganna","prints","printsess","Ã¼ldine","admiral","erivolinik","juhataja","Å¡erif","inspektor","detektiiv","ohvitser","sÃ¶Ã¶r","daam","lord","vanaeit","isa","ema","vend","Ãµde","kÃµrgeauline","tÃ¤di","onu","vanaemake","vanaema","vanaisake","vanaisa","Granma","Grampa","sugulane"],"suffixes":["juunior","jr","vanem","sr","i","iii","iii","iv","v","vi","vii","viii","ix","x","phd","md","ligunema","pensionile"]};
ilib.data.name_fa = {"conjunctions":{"and1":"ï»­","and2":"ï»­","or1":"Ûïº","or2":"Ûïº"},"prefixes":["ïºï»ïº","Ø®Ø§ÙÙ","Ø¢ÙØ§Û","Ú©ïºïº®ïº¸ï»§ïºïº³Û ïºïº®ïº·ïº©","ïº¥ïºï»¨ï»£","ïº®ïºï»´ïº³ ïºï»¤ï»«ï»­ïº­","ï»¢ï»ïºï»®ï»§ ïº®ïºÛïº± ïºï»¤ï»«ï»­ïº­","ï»¦ïº¨ïº´ïº ï»­ïº¯Ûïº­","ïº¶ï»«ïº­ïº©ïºïº­","ï»ïº®ï»£ïºï»§ïº©ïºïº­","ïº®ïºÛïº±","ïº®ïºÛïº±","ï»­ïº¯Ûïº­","ïº¥ïºïº§ïºï»£","Ú©ïºµÛïºµ","ïºïº·Ù¾ïº¯","ï»¡ïº®ïºÛ","ïºïº´ïºïºïº©","ïºïº´ïºïºïº©","Ù¾ïºïºªïº·ïºï»«","ï»¢ï»Ú©ï»©","ïºµïºï»«ïº¯ïºïºªï»«","ïºµïºï»«ïº¯ïºïºªï»« ïº¥ïºï»¨ï»£","ï»ï»£ï»®ï»£Û","ïº©ïº­Ûïºïº³ïºï»»ïº­","Ú©ï»¡Ûïº±ïº­","ïº±ïº­Ù¾ïº®ïº´ïº","Ú©ï»¼ï»¨ïºïº­","ïºïºïº¯ïº®ïº³","Ú©ïºïº­ïºÚ¯ïºï»«","ïºï»ïº³ïº­","ïºï»ïº","ïºïºï»§ï»­Û","Ù¾ïº­ï»­ïº­ïº©Ú¯ïºïº­","ïº¥ïºï»¨ï»£","Ù¾ïº©ïº­","ï»¡ïºïº©ïº­","ïºïº­ïºïº©ïº­","ïº¥ï»­ïºï»«ïº­","Ú©ïºµÛïºµ","ï»ï»¤ï»«","ï»ï»£ï»­","ï»¡ïºïº©ïº­ ïºïº¯ïº­Ú¯","ï»¡ïºïº©ïº­ ïºïº¯ïº­Ú¯","Ù¾ïº©ïº­ ïºïº¯ïº­Ú¯","Ù¾ïº©ïº®ïºïº¯ïº­Ú¯","Ú¯ïº­ïºï»¨ï»£ïº","Ù¾ïº±ïº­ ï»ï»£ï»­Û"],"suffixes":["ïººï»ïºïº­","ïºï»¼ïºï»§","ï»ïºïºïº­","ïº®ï»³ïºï»","ïºï»§ïº","ïºïºï» ïºïº","ïºïºï» ïºïº","ïº­ïºïºï»ïº","ïºï» ïº³ïºïºªïº³","ïºï» ïº³ïºïºï»","ïºï» ïºïºï»¤ï»§","ïºï» ïºïºïº´ï»","ïºªï»ïºï»­ïº­ïºï»«","ïºïº®ïº ï»"]};
ilib.data.name_fi = {"sortByHeadWord":true,"conjunctions":{"and1":"ja","and2":"ja","or1":"tai","or2":"tai"},"prefixes":["herra","neiti","rouva","presidentti","varatoimitusjohtaja","pÃ¤Ã¤ministeri","pormestari","kuvernÃ¶Ã¶ri","puheenjohtaja","puheenjohtaja","ministeri","pastori","kokki","valmentaja","professori","prof","kuningas","kuningatar","prinssi","prinsessa","yleinen","amiraali","komissaari","komisario","seriffi","tarkastaja","etsivÃ¤","upseeri","herra","rouva","isÃ¤","Ã¤iti","veli","sisko","kunnianarvoisa","tÃ¤ti","setÃ¤","mummo","isoÃ¤iti","ukki","isoisÃ¤","serkku","ja","tai"],"suffixes":["nuorempi","vanhempi","elÃ¤kkeellÃ¤"]};
ilib.data.name_fr = {"prefixes":["baron","baronne","bey","calife","cheikh","cheykha","comte","comtesse","cousin","cousine","docteur","dom","dr","duc","duchesse","Ã©mir","Ã©mira","frÃ¨re","grand-mÃ¨re","grand-oncle","grand-pÃ¨re","grand-tante","hadjib","lady","lord","madame la prÃ©sidente","malik","mamy","marquis","marquise","marraine","mÃ¨re","monsieur le prÃ©sident","neveu","niÃ¨ce","nizam","oncle","padishah","papy","parrain","pÃ¨re","pervane","petite-niÃ¨ce","petit-neveu","pr","prÃ©sident","prÃ©sidente","professeur","professeure","rÃ¢ja","rani","rÃ©vÃ©rend pÃ¨re","rÃ©vÃ©rend","rÃ©vÃ©rende","rÃ©vÃ©rende mÃ¨re","sa","sai","sar","sas","se","shah","sir","sm","sm","smi","sÅur","sultan","sultane","tante","veuve","vicomte","vicomtesse","vizir","et","m","maÃ®tres","maÃ®tre","majestÃ©","mes","mesdames","mesdemoiselles","messieurs","mgr","mlles","mm","mme","mmes","monseigneur","ou","son","sa","saintetÃ©","altesse","royale","sÃ©rÃ©nissime","Ã©minence","excellence"],"auxillaries":["la","le","les","des","du","de"],"suffixes":["docteur en philosophie","docteur en mÃ©decine","docteur en linguistique","docteur en physique","docteur en chimie","docteur en mathÃ©matiques","docteur en droit","docteur en chirurgie dentaire","docteur en pharmacie","docteur en mÃ©decine vÃ©tÃ©rinaire","dep","dem","del","dec","ded","decd","demv"]};
ilib.data.name_ga = {"sortByHeadWord":true,"conjunctions":{"and1":"agus","and2":"agus","or1":"nÃ³","or2":"nÃ³"},"prefixes":["an tuasal","uachtarÃ¡n","leas-UachtarÃ¡n","prÃ­omh-aire","mÃ©ara","gobharnÃ³ir","chathaoirleach","dhearbhaigh cathaoirleach","aire","raibÃ­","sagart","cÃ³caire","cÃ³iste","ollamh","prof","rÃ­","banrÃ­on","Prionsa","banphrionsa","ginearÃ¡lta","aimirÃ©al","coimisinÃ©ir","ceannfort","sirriam","cigire","bleachtaireachta","oifigeach","a dhuine uasail","bhean","tiarna","DÃ¡ma","athair","mÃ¡thair","dearthÃ¡ir","deirfiÃºr","tUrramach","aintÃ­n","uncail","seanmhÃ¡thair","seanathair","col ceathrar","agus","nÃ³"],"suffixes":["sÃ³isearach","sinsearach","scor"]};
ilib.data.name_he = {"conjunctions":{"and1":"× -","and2":"× -","or1":"××","or2":"××"},"prefixes":["××¨","×××¨×ª","×× '","× ×©××","×¡×× × ×©××","×¨××© ××××©××","×¨××© ××¢××¨","×××©×","×××©× ×¨××©","×××¨","×©×¨","×¨×","××××","××××¨","×©×£","××××","×¤×¨××¤×¡××¨","×¤×¨××¤","××××","×××××","× ×¡××","× ×¡×××","××××","×××××¨×","× ×¦××","××¤×§×","×©×¨××£","××¤×§×","×××©","×§×¦××","×××× ×","×××¨×ª","××××","××××¨×","××","×××","××","××××ª","××××¨","××××","×××","×¡××ª×","×¡××ª×","×¡××","×¡××","×¡××ª×","×¡××","×× ××× ×©×"],"suffixes":["××××¨","×'×× ×××¨","××××¨","×××§×××¨","×××©×¨××ª","××©×¢××¨"]};
ilib.data.name_hi = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"conjunctions":{"and1":"à¤à¤°","and2":"à¤à¤°","or1":"à¤¯à¤¾","or2":"à¤¯à¤¾"},"prefixes":["à¤¶à¥à¤°à¥","à¤¸à¥à¤¶à¥à¤°à¥","à¤¶à¥à¤°à¥à¤®à¤¤à¥","à¤°à¤¾à¤·à¥à¤à¥à¤°à¤ªà¤¤à¤¿","à¤à¤ª à¤°à¤¾à¤·à¥à¤à¥à¤°à¤ªà¤¤à¤¿ ","à¤ªà¥à¤°à¤§à¤¾à¤¨ à¤®à¤à¤¤à¥à¤°à¥","à¤®à¤¹à¤¾à¤ªà¤¾à¤²à¤¿à¤à¤¾à¤§à¥à¤¯à¤à¥à¤·","à¤°à¤¾à¤à¥à¤¯à¤ªà¤¾à¤²","à¤à¤§à¥à¤¯à¤à¥à¤·","à¤à¤§à¥à¤¯à¤à¥à¤·à¤¿à¤£à¥","à¤®à¤à¤¤à¥à¤°à¥","à¤¯à¤¹à¥à¤¦à¥ à¤à¤à¤¾à¤°à¥à¤¯","à¤ªà¤¾à¤¦à¤°à¥","à¤®à¤¹à¤¾à¤°à¤¾à¤","à¤ªà¥à¤°à¤¶à¤¿à¤à¥à¤·à¤","à¤ªà¥à¤°à¤¾à¤§à¥à¤¯à¤¾à¤ªà¤","à¤ªà¥à¤°à¥à¤«à¥à¤¸à¤°","à¤°à¤¾à¤à¤¾","à¤°à¤¾à¤¨à¥","à¤°à¤¾à¤-à¤à¥à¤®à¤¾à¤°","à¤°à¤¾à¤-à¤à¤¨à¥à¤¯à¤¾","à¤¸à¥à¤¨à¤¾à¤ªà¤¤à¤¿","à¤¨à¥-à¤¸à¥à¤¨à¤¾à¤§à¥à¤¯à¤à¥à¤·","à¤à¤¯à¥à¤à¥à¤¤","à¤à¤§à¥à¤à¥à¤·à¤","à¤à¤¼à¤¿à¤²à¥ à¤à¤¾ à¤ªà¥à¤°à¤§à¤¾à¤¨ à¤¹à¤¾à¤à¤¿à¤®","à¤à¤à¤¸à¥à¤ªà¥à¤à¥à¤à¤°","à¤à¤¾à¤¸à¥à¤¸à¥","à¤à¤§à¤¿à¤à¤¾à¤°à¥","à¤¶à¥à¤°à¥à¤®à¤¾à¤¨","à¤®à¤¹à¤¿à¤²à¤¾","à¤¸à¥à¤µà¤¾à¤®à¥","à¤®à¤¹à¤¿à¤²à¤¾","à¤ªà¤¿à¤¤à¤¾","à¤®à¤¾à¤","à¤­à¤¾à¤","à¤¬à¤¹à¤¨","à¤à¤¦à¤°à¤£à¥à¤¯","à¤à¤¾à¤à¥","à¤à¤¾à¤à¤¾","à¤¦à¤¾à¤¦à¥","à¤¦à¤¾à¤¦à¤¾","à¤à¤à¥à¤°à¤¾ à¤­à¤¾à¤"],"suffixes":["à¤à¤¨à¤¿à¤·à¥à¤ ","à¤à¥à¤¨à¤¿à¤¯à¤°","à¤µà¤°à¤¿à¤·à¥à¤ ","à¤ªà¥à¤à¤à¤¡à¥","à¤ªà¥à¤°à¤¬à¤à¤§ à¤¨à¤¿à¤¦à¥à¤¶à¤","à¤à¥à¤²à¤¾ à¤à¤°à¤¨à¤¾","à¤¸à¥à¤µà¤¾à¤¨à¤¿à¤µà¥à¤¤à¥à¤¤"]};
ilib.data.name_hr = {"sortByHeadWord":true,"conjunctions":{"and1":"i","and2":"i","or1":"ili","or2":"ili"},"prefixes":["g","gospoÄa","gospoÄa","predsjednik","zamjenik predsjednika","premijer","gradonaÄelnik","guverner","predsjednik","predsjedavajuÄa","ministar","rabin","kuhar","trener","profesor","kralj","kraljica","knez","princeza","opÄi","povjerenik","domar","Å¡erif","inspektor","detektiv","Äasnik","gospodine","dama","gospodar","dama","otac","majka","brat","sestra","veleÄasni","tetka","ujak","baka","baka","deda","djed","roÄak"],"suffixes":["mlaÄi","viÅ¡i","moÄiti","mirovini"]};
ilib.data.name_hu = {"order":"fgm","useSpaces":true,"format":"{prefix} {familyName} {givenName} {middleName} {suffix}","sortByHeadWord":true,"conjunctions":{"and1":"Ã©s","and2":"Ã©s","or1":"vagy","or2":"vagy"},"prefixes":["Ãºr","kisasszony","asszony","alelnÃ¶ke","miniszterelnÃ¶k","polgÃ¡rmester","kormÃ¡nyzÃ³","elnÃ¶k","elnÃ¶knÅ","miniszter","rabbi","mulah","lelkÃ©sz","sÃ©f","edzÅ","egyetemi tanÃ¡r","prof","kirÃ¡ly","kirÃ¡lynÅ","herceg","hercegnÅ","Ã¡ltalÃ¡nos","admirÃ¡lis","biztos","felÃ¼gyelÅ","seriff","ellenÅr","nyomozÃ³","tiszt","Ãºr","hÃ¶lgy","lord","hÃ¶lgy","apa","anya","testvÃ©r","lÃ¡nytestvÃ©r","tisztelendÅ","nagynÃ©ni","nagybÃ¡csi","nagymama","nagymama","nagypapa","nagyapa","Granma","Grampa","unokatestvÃ©r"],"suffixes":["fiatalabb","jr","idÅsebb","sr","i","iii","iii","iv","v","vi","vii","viii","ix","x","phd","md","Ã¡ztat","visszavonult"]};
ilib.data.name_id = {"format":"{prefix} {givenName} {middleName} {suffix}","sortByHeadWord":false,"conjunctions":{"and1":"dan","and2":"dan","or1":"atau","or2":"atau"},"prefixes":["bapak","ibu","presiden","wakil presiden","perdana menteri","walikota","gubernur","ketua","ketua","melayani","pendeta Yahudi","mu","pendeta","koki","melatih","profesor","raja","ratu","pangeran","puteri","umum","laksamana","komisaris","pengawas","kepala polisi daerah","inspektur","detektif","petugas","tuan","wanita","raja","nyonya","ayah","ibu","saudara","saudara","pendeta","bibi","paman","nenek","nenek","kakek","kakek","granma","sepupu"],"suffixes":["muda","lebih tua","mundur"]};
ilib.data.name_it = {"conjunctions":{"and1":"e","and2":"ed","or1":"o","or2":"o"},"auxillaries":{"di":1,"de":1,"da":1,"della":1,"dalla":1,"la":1,"lo":1,"li":1,"del":1,"degli":1,"dei":1,"lu":1,"dal":1},"prefixes":["ingegnere","ing","geometra","avvocato","notaio","dottore","dott","ragioniere","architetto","dottoressa","maestro","prof","professor","professore","professoressa","fra","frate","fratello","suor","suora","sorella","don","padre","monsignore","cavaliere","commendatore","onorevole","colonnello","generale","tenente","maresciallo","madre","zio","zia","nonna","nonno","signor","signore","sig","signora","sigra","signorina","signa","sgna"],"suffixes":[]};
ilib.data.name_ja = {"format":"{prefix}{familyName}{middleName}{givenName}{suffix}","nameStyle":"asian","conjunctions":{"and1":"ä¸","and2":"ä¸","or1":"ããã¨ã","or2":"ããã¨ã"},"suffixes":["ãã","ç·è£","å¯å¤§çµ±é ","ç·ç","å¸é·","ç¥äº","ä¸»å¸­","ä¸»å¸­","ã©ã","ç§å¸«","ã·ã§ã","æå°è","ææ","ç","å¥³ç","çå¤ªå­","ããªã³ã»ã¹","æç£","ç®¡çè","ä¿å®å®","ç£å¯","å½¹å¡","å¿","å¥³æ§","é ä¸»","ãã¤ã ","ç¶è¦ª","æ¯è¦ª","å¼","ã·ã¹ã¿ã¼","ç§å¸«","åæ¯","åç¶","ãã°ãã¡ãã","ãã°ããã","ãããã¡ãã","ããããã","ãã¨ã","å¹´ä¸","ä¸ç´","ãã¡","ã«","ãã","ãã","ã","ãã","ãªãª","ã¯ã¡","ããã","ããã"],"knownFamilyNames":{"ä½è¤":"SatÅ","é´æ¨":"Suzuki","é«æ©":"Takahashi","ç°ä¸­":"Tanaka","æ¸¡è¾º":"Watanabe","ä¼è¤":"ItÅ","ä¸­æ":"Nakamura","å°æ":"Kobayashi","å±±æ¬":"Yamamoto","å è¤":"KatÅ","åç°":"Yoshida","å±±ç°":"Yamada","ä½ãæ¨":"Sasaki","å±±å£":"Yamaguchi","æ¾æ¬":"Matsumoto","äºä¸":"Inoue","æ¨æ":"Kimura","æ¸æ°´":"Shimizu","æ":"Hayashi","æè¤":"SaitÅ","æè¤":"SaitÅ","å±±å´":"Yamazaki Yamasaki","ä¸­å³¶":"Nakajima Nakashima","æ£®":"Mori","é¿é¨":"Abe","æ± ç°":"Ikeda","æ©æ¬":"Hashimoto","ç³å·":"Ishikawa","å±±ä¸":"Yamashita","å°å·":"Ogawa","ç³äº":"Ishii","é·è°·å·":"Hasegawa","å¾è¤":"GotÅ","å²¡ç°":"Okada","è¿è¤":"KondÅ","åç°":"Maeda","è¤ç°":"Fujita","é è¤":"EndÅ","éæ¨":"Aoki","åæ¬":"Sakamoto","æä¸":"Murakami","å¤ªç°":"Åta","éå­":"Kaneko","è¤äº":"Fujii","ç¦ç°":"Fukuda","è¥¿æ":"Nishimura","ä¸æµ¦":"Miura","ç«¹å":"Takeuchi","ä¸­å·":"Nakagawa","å²¡æ¬":"Okamoto","æ¾ç°":"Matsuda","åç°":"Harada","ä¸­é":"Nakano","å°é":"Ono","ç°æ":"Tamura","è¤å":"Fujiwara Fujihara","ä¸­å±±":"Nakayama","ç³ç°":"Ishida","å°å³¶":"Kojima","åç°":"Wada","æ£®ç°":"Morita","åç°":"Uchida","æ´ç°":"Shibata","éäº":"Sakai","å":"Hara","é«æ¨":"Takagi Takaki","æ¨ªå±±":"Yokoyama","å®è¤":"AndÅ","å®®å´":"Miyazaki Miyasaki","ä¸ç°":"Ueda Ueta","å³¶ç°":"Shimada","å·¥è¤":"KudÅ","å¤§é":"Åno","å®®æ¬":"Miyamoto","æå±±":"Sugiyama","ä»äº":"Imai","ä¸¸å±±":"Maruyama","å¢ç°":"Masuda","é«ç°":"Takada Takata","æç°":"Murata","å¹³é":"Hirano","å¤§å¡":"Åtsuka","èå":"Sugawara Sugahara","æ­¦ç°":"Takeda Taketa","æ°äº":"Arai","å°å±±":"Koyama Oyama","éå£":"Noguchi","æ¡äº":"Sakurai","åè":"Chiba","å²©å´":"Iwasaki","ä½é":"Sano","è°·å£":"Taniguchi","ä¸é":"Ueno","æ¾äº":"Matsui","æ²³é":"KÅno Kawano","å¸å·":"Ichikawa","æ¸¡é¨":"Watanabe Watabe","éæ":"Nomura","èå°":"Kikuchi","æ¨ä¸":"Kinoshita"}};
ilib.data.name_kk = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"conjunctions":{"and1":"Ð¶ÓÐ½Ðµ","and2":"Ð¶ÓÐ½Ðµ","or1":"Ð½ÐµÐ¼ÐµÑÐµ","or2":"Ð½ÐµÐ¼ÐµÑÐµ"},"prefixes":["Ð´Ð¾ÐºÑÐ¾Ñ","ÐºÑÑÑ","Ò¯Ð»ÐºÐµÐ½","ÒÑÐ»ÑÐ¼ Ð´Ð¾ÐºÑÐ¾ÑÑ","Ð¼ÐµÐ´Ð¸ÑÐ¸Ð½Ð° ÒÑÐ»ÑÐ¼Ð´Ð°ÑÑÐ½ÑÒ£ Ð´Ð¾ÐºÑÐ¾ÑÑ","ÑÑÐ¾Ð¼Ð°ÑÐ¾Ð»Ð¾Ð³Ð¸Ñ ÒÑÐ»ÑÐ¼Ð´Ð°ÑÑÐ½ÑÒ£ Ð´Ð¾ÐºÑÐ¾ÑÑ"],"suffixes":["Ð¼ÑÑÐ·Ð°","ÑÐ°Ð½ÑÐ¼","ÑÐ°Ð½ÑÐ¼","Ð¼ÑÑÐ·Ð°","ÑÐ°Ð½ÑÐ¼","ÑÐ°Ð½ÑÐ¼","ÑÐ°Ð½ÑÐ¼","2-ÑÑ","3-ÑÑ","4-ÑÑ","5-ÑÑ","6-ÑÑ","7-ÑÑ","8-ÑÑ","9-ÑÑ","10-ÑÑ","Ð¼ÑÑÐ·Ð°"]};
ilib.data.name_kn = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"à²®à²¤à³à²¤à³","and2":"à²®à²¤à³à²¤à³","or1":"à²à²¥à²µà²¾","or2":"à²à²¥à²µà²¾"},"prefixes":["à²µà³à³à²¦à³à²¯à²°à³","à²¡à²¾","à²¶à³à²°à²¿à³","à²¶à³à²°à²¿à³à²®à²¤à²¿","à²®à²¿à²¸à³à²à²°à³","à²®à³à³à²¡à²®à³","à²à²¨à³à²¯à³"],"suffixes":["à²à²¿à²°à²¿à²¯","à²¹à²¿à²°à²¿à²¯"]};
ilib.data.name_ko = {"useSpaces":false,"format":"{prefix}{familyName}{middleName}{givenName}{suffix}","nameStyle":"asian","sortByHeadWord":false,"noCompoundFamilyNames":true,"conjunctions":{"and1":"ê·¸ë¦¬ê³ ","and2":"ê·¸ë¦¬ê³ ","or1":"ëë","or2":"ëë"},"prefixes":["ë¯¸ì¤í°"],"suffixes":["ì¨","êµ°","ì","ë","ì£¼ëì´","ìì","ë°ì¬","ì ë°°","íë°°","ê·í","ê°í","ì í","íí","ëë¦¬","ëì¼ë¦¬","ì ìë","ë¶ì¸","ëíµë ¹","ë¶ì¬ì¥","ì´ë¦¬","ìì¥","ì§ì¬","íì¥","ëí","ì¥ê´","ëª©ì¬ë","ìë¦¬ì¬","ì½ì¹","êµì","ì","ì¬ì","ìì","ê³µì£¼","ì ë","ê°ëê´","êµì¡ê°","ë³´ìê´","ê´ë¦¬ì","íì¬","ì¥êµ","ì ìë","ë ì´ë","ìë²ì§","ì´ë¨¸ë","ëì","ì¬ëì","ëª©ì¬","ì´ëª¨","ì¼ì´","í ë¨¸ë","í ë¨¸ë ","í ìë²ì§","í ìë²ì§","ì¬ì´"],"knownFamilyNames":{"ì¦":"ChÅ­p","ì¦":"ChÅ­ng","ë§ì ":"MangjÅl","ìë´":"Sobong","ë":"Nu","ë£¨":"Ru","êµ":"Kyo","êµ°":"Kun","ì ":"ChÅ","ê°ì ":"KangjÅn","ì¼":"Sam","ì´ê¸":"ÅgÅ­m","ì¥ê³¡":"Changgok","ë´":"Tam","ë¬":"Myo","ì¤":"Chun","ë":"Nan","ë":"Ran","ì­":"Sip","ê°":"Kae","ë¹":"Pi","ë":"Noe","ë¢°":"Roe","í":"Hak","í":"Hu","ë":"Ton","ì ":"Ae","ì½":"YÅp","í¬":"P'o","ê³¡":"Kok","í":"T'an","í":"Hwan","ì´":"Un","ë§":"Man","ì":"Cha","ë¬µ":"Muk","ì¼":"Ya","ì":"Yo","ë¯¸":"Mi","ì":"Su","ëë°©":"Tubongbanua","ë§¤":"Mae","ê·¼":"KÅ­n","ê¶":"KwÅk","í":"P'il","ì":"YÅng","í":"P'an","í´":"Hae","ë­":"Nang","ë":"Rang","ì´":"Ch'o","ë´":"Nae","ì­":"SÅp","í¥":"HÅ­ng","ì ":"ChÅm","ê¶":"Kung","í":"P'ung","ë":"Tae","í":"P'yÅng","ì":"A","ë¹":"Ping","ëê³ ":"Tokko","í":"Hwa","ì¢":"Chong","ì¹":"Ong","ë¹":"Tang","ì°½":"Ch'ang","ì":"Sun","ë¨":"Tan","ê²¬":"KyÅn","ìë¬¸":"SÅmun","ì":"Sang","ê°":"Kan","í½":"P'aeng","ì¢":"Chwa","ê°":"Kal","ì¹":"SÅ­ng","ë²":"PÅm","ì ì°":"SÅnu","ì":"Si","ì¬ê³µ":"Sagong","ì ê°":"Chegal","ì¨":"On","ë¹":"Pin","ë":"Tong","ì":"Å¬m","ë":"Tu","ê°":"Kam","í¸":"Ho","ê³":"Kye","í¼":"P'i","í":"HyÅng","í":"T'ae","ëª©":"Mok","ë³µ":"Pok","ê°":"Ka","í©ë³´":"Hwangbo","ë¶":"Pu","ì¬":"Sa","ë´":"Pong","ì":"Ye","ì©":"Yong","ë£¡":"Ryong","í¸":"P'yÅn","ì":"Å¬n","ê²½":"KyÅng","ì´":"Å","ë¨ê¶":"Namgung","êµ­":"Kuk","í":"T'ak","ëª¨":"Mo","ë§¹":"Maeng","ì¸":"In","ì¡":"Yuk","ë¥":"Ryuk","ì¥":"Ok","ì":"Wang","ê¸":"KÅ­m","ë°":"Pan","ê¸°":"Ki","ëª":"MyÅng","í":"P'yo","ì ":"Che","ì":"Wi","ê¸¸":"Kil","ì°":"YÅn","ë ¨":"RyÅn","ë§":"Ma","ì ":"SÅn","ì¤":"SÅl","ì":"So","ì":"SÅk","ë":"To","ì¶":"Ch'u","ì¼":"YÅm","ë ´":"RyÅm","ì¬":"YÅ","ë ¤":"RyÅ","í¨":"Ham","í":"HyÅn","ê³µ":"Kong","ì":"Im","ì²":"Ch'Ån","ì±":"Ch'ae","ë°©":"Pang","ì":"WÅn","ë³":"PyÅn","ì":"Åm","ì§":"Chi","ë¯¼":"Min","ì§":"Chin","ë":"Na","ë¼":"Ra","ì°":"U","ì°¨":"Ch'a","ì±":"SÅng","ê³½":"Kwak","êµ¬":"Ku","í":"Ha","ì£¼":"Chu","ì¬":"Sim","ë¨":"Nam","ë¸":"No","ë¡":"Ro","í":"HÅ","ë°±":"Paek","ë°°":"Pae","ì":"Son","ë¬¸":"Mun","ê³ ":"Ko","ì ":"Yu","ë¥":"Ryu","ì":"Yang","ë":"Ryang","í":"Hong","ë¦¼":"Rim","ì":"An","ì¡":"Song","í©":"Hwang","ê¶":"KwÅn","ì ":"ChÅn","ì":"SÅ","ì¤":"O","í":"Han","ì ":"Sin","ì¥":"Chang","ì¤":"Yun","ê°":"Kang","ì¡°":"Cho","ìµ":"Ch'oe","ì ":"ChÅng","ë°":"Pak","ì´":"Yi","ë¦¬":"Ri","ê¹":"Kim"}};
ilib.data.name_ku = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"Ù","and2":"Ù","or1":"ÛØ§Ù","or2":"ÛØ§Ù"},"prefixes":["Ø¯Ú©ØªÛØ±","Ø¯.","Ø¨ÛÚÛØ²","Ø®Ø§ØªÙÙ","Ø®Ø§ÙÙ","Ø¨ÛÚÛØ²","Ø®Ø§ØªÙÙ","Ø®Ø§ÙÙ","Ø®Ø§ÙÙ"],"suffixes":["Ú©ÙÚ","Ú©ÙÚ","Ø¨Ø§ÙÚ©","Ø¨Ø§ÙÚ©","Ø¯ÙÙÛÙ","Ø³ÛÙÛÙ","ÚÙØ§Ø±ÛÙ","Ù¾ÛÙØ¬ÛÙ","Ø´ÛØ´ÛÙ","Ø­ÛÙØªÛÙ","ÙÛØ´ØªÛÙ","ÙÛÛÛÙ","Ø¯ÛÛÛÙ","Ø¨ÛÚÛØ²","Ø¯Ú©ØªÛØ±Ø§","ÙØ§Ø³ØªÛØ±","Ù¾Ø²ÛØ´Ú©Û Ø¯Ø¯Ø§Ù","Ù¾Ø²ÛØ´Ú©Û ÙÛØ´ØªÛØ±Ú¯ÛØ±Û Ø¯Ø¯Ø§Ù"]};
ilib.data.name_lt = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"ir","and2":"ir","or1":"arba","or2":"arba"},"prefixes":["ponas","ponia","ponia","prezidentas","viceprezidentas","ministras pirmininkas","meras","virÅ¡ininkas","pirmininkas","pirmininkÄ","ministras","rabinas","pastorius","virÄjas","treneris","profesorius","doc","karalius","karalienÄ","princas","princesÄ","bendras","admirolas","komisaras","komendantas","Å¡erifas","inspektorius","detektyvas","pareigÅ«nas","ponas","ponia","valdovas","dama","tÄvas","motina","brolis","sesuo","Å¡ventasis","teta","dÄdÄ","senelÄ","senelÄ","senelis","senelis","pusbrolis","ir","arba"],"suffixes":["jaunesnysis","vyresnysis","daktaro","pamerkti","pensininkas"]};
ilib.data.name_lv = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"un","and2":"un","or1":"vai","or2":"vai"},"prefixes":["kungs","kundze","priekÅ¡sÄdÄtÄjs","viceprezidents","premjerministrs","mÄrs","gubernators","priekÅ¡sÄdÄtÄjs","priekÅ¡sÄdÄtÄja","ministrs","rabÄ«ns","mÄcÄ«tÄjs","Å¡efpavÄrs","treneris","profesors","karalis","karaliene","princis","princese","vispÄrÄjs","admirÄlis","pilnvarotais","vadÄ«tÄjs","Å¡erifs","inspektors","detektÄ«vs","virsnieks","kungs","dÄma","kungs","dÄma","tÄvs","mÄte","brÄlis","mÄsa","godÄjams","tante","tÄvocis","vecmÄmiÅa","vecmÄmiÅa","vectÄvs","brÄlÄns","un","vai"],"suffixes":["jaunÄkais","vecÄkais","pÅ«t","pensijÄ"]};
ilib.data.name_mk = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"Ð¸","and2":"Ð¸","or1":"Ð¸Ð»Ð¸","or2":"Ð¸Ð»Ð¸"},"prefixes":["Ð³-Ð´Ð¸Ð½","Ð³-ÑÐ°","Ð¿ÑÐµÑÑÐµÐ´Ð°ÑÐµÐ»","Ð¿ÑÐµÑÑÐµÐ´Ð°ÑÐµÐ»ÐºÐ°","ÐÐ¸Ð½Ð¸ÑÑÐµÑÐ¾Ñ","ÑÐ°Ð±Ð¸Ð½","Ð¿Ð°ÑÑÐ¾Ñ","Ð³Ð¾ÑÐ²Ð°Ñ","ÑÑÐµÐ½ÐµÑ","Ð¿ÑÐ¾ÑÐµÑÐ¾Ñ","Ð¿ÑÐ¾Ñ","ÐºÑÐ°Ð»","ÐºÑÐ°Ð»Ð¸ÑÐ°","Ð¿ÑÐ¸Ð½Ñ","Ð¿ÑÐ¸Ð½ÑÐµÐ·Ð°","Ð¾Ð¿ÑÑÐ¾","Ð°Ð´Ð¼Ð¸ÑÐ°Ð»","kÐ¾Ð¼ÐµÑÐ°ÑÐ¾Ñ","Ð½Ð°Ð´Ð·Ð¾ÑÐ½Ð¸Ðº","ÑÐµÑÐ¸ÑÐ¾Ñ","Ð¸Ð½ÑÐ¿ÐµÐºÑÐ¾Ñ","Ð´ÐµÑÐµÐºÑÐ¸Ð²","Ð¾ÑÐ¸ÑÐµÑ","Ð³Ð¾ÑÐ¿Ð¾Ð´Ð¸Ð½Ðµ","Ð´Ð°Ð¼Ð°","Ð³Ð¾ÑÐ¿Ð¾Ð´Ð°Ñ","ÐÐ°Ð¼Ðµ","ÑÐ°ÑÐºÐ¾","Ð¼Ð°ÑÐºÐ°","Ð±ÑÐ°Ñ","ÑÐµÑÑÑÐ°","Ð¿ÑÐµÑÐµÑÐ½Ð¸Ð¾Ñ","ÑÐµÑÐºÐ°","ÑÐ¸ÑÐºÐ¾","Ð±Ð°Ð±Ð°","Ð´ÐµÐ´Ð¾","Ð±ÑÐ°ÑÑÑÐµÐ´","Ð¸","Ð¸Ð»Ð¸"],"suffixes":["Ð¿Ð¾Ð¼Ð»Ð°Ð´Ð¸","Ð²Ð¸ÑÐ¾ÐºÐ¸","Ð´-Ñ","Ð¸Ð·Ð³Ð½Ð¸Ð²Ð°Ð¼","Ð¿ÐµÐ½Ð·Ð¸Ð¾Ð½Ð¸ÑÐ°ÑÐµ"]};
ilib.data.name_ml = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"à´à´¨àµâà´¡àµ","and2":"à´à´¨àµâà´¡àµ","or1":"à´à´°àµâ","or2":"à´à´°àµâ"},"prefixes":["à´¡àµà´àµà´à´°àµâ","à´®à´¿à´¸àµà´±àµà´±à´°àµâ","à´®à´¾à´¡à´","à´®à´à´®àµà´¯à´¿à´¸àµà´³àµ","à´®à´¿à´¸àµà´¸àµ"],"suffixes":["à´àµà´¨à´¿à´¯à´°àµâ","à´¸àµà´¨à´¿à´¯à´°àµâ"]};
ilib.data.name_mn = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"Ð±Ð°","and2":"Ð±Ð°","or1":"Ð±ÑÑÑ","or2":"Ð±ÑÑÑ"},"prefixes":["Ð½Ð¾ÑÐ½","ÑÐ°ÑÐ°Ð³ÑÐ°Ð¹","ÑÑ"],"suffixes":["2-Ñ","3-Ñ","4-Ñ","5-Ñ","6-Ñ","7-Ñ","8-Ñ","9-Ñ","Ð´Ð¾ÐºÑÐ¾Ñ","Ð±Ð°Ð³Ð°","Ð°ÑÐ¼Ð°Ð´","ÑÐ°Ð°Ð½","ÐµÑÓ©Ð½ÑÐ¸Ð¹Ð»Ó©Ð³Ñ","ÐµÑÓ©Ð½ÑÐ¸Ð¹ ÑÐ°Ð¹Ð´"]};
ilib.data.name_mr = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"conjunctions":{"and1":"à¤à¤£à¤¿","and2":"à¤à¤£à¤¿","or1":"à¤à¤¿à¤à¤µà¤¾","or2":"à¤à¤¿à¤à¤µà¤¾"},"prefixes":["à¤¡à¥à¤à¥à¤à¤°","à¤¶à¥à¤°à¥à¤¯à¥à¤¤","à¤®à¤¿à¤¸à¥à¤¸","à¤®à¤¿à¤¸","à¤®à¤¿à¤¸à¥à¤à¤°","à¤®à¥à¤¡à¤®","à¤à¥à¤à¤£à¥"],"suffixes":["à¤à¤¨à¤¿à¤·à¥à¤ ","à¤à¥à¤¯à¥à¤·à¥à¤ "]};
ilib.data.name_ms = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"conjunctions":{"and1":"dan","and2":"dan","or1":"atau","or2":"atau"},"prefixes":["encik","cik","puan","presiden","naib presiden","perdana Menteri","datuk Bandar","gabenor","pengerusi","pengerusi","menteri","jurulatih","profesor","raja","putera","puteri","umum","laksamana","pesuruhjaya","penguasa","inspektor","detektif","pegawai","tuan","wanita","tuan","dame","bapa","ibu","saudara","kakak","terhormat","makcik","bapa saudara","nenek","datuk","sepupu","dan","atau"],"suffixes":["bersara"]};
ilib.data.name_nb = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"og","and2":"og","or1":"eller","or2":"eller"},"prefixes":["fru","herr","frÃ¸ken","president","vice president","statsminister","ordfÃ¸rer","guvernÃ¸r","formann","kokk","trener","konge","dronning","prince","prinsesse","generell","admiral","kommisjonÃ¦r","superintendent","sheriff","inspektÃ¸r","detektiv","offiser","herre","dame","far","mor","bror","sÃ¸ster","reverend","tante","onkel","bestemor","bestemor","bestefar","fetter","og","eller"],"suffixes":["pensjonert"]};
ilib.data.name_nl = {"sortByHeadWord":true,"conjunctions":{"and1":"en","and2":"en","or1":"of","or2":"of"},"auxillaries":{"van":1,"van de":1,"van der":1,"van den":1,"van het":1,"'t":1,"`t":1,"olde":1,"oude":1,"van `t":1,"van 't":1,"ten":1,"te":1,"ter":1,"op het":1,"op de":1,"op `t":1,"op 't":1,"de":1,"den":1,"het":1,"in de":1,"in den":1,"in het":1,"vande":1,"vander":1},"prefixes":["president","drs","ds","mr","ir","ing","prof","hc","professor","jhr","meester","moeder","vader","zus","broer","peetmoeder","peetvader","tante","oom","oma","opa","neef","nicht","achterneef","achterneef","zwager","schoonzus","overgrootmoeder","overgrootvader","betovergrootmoeder","betovergrootvader","oudoom","oudtante","zoon","dochter","pleegzoon","pleegdochter","kapitein","generaal","majoor","luitenant","sergeant","kolonel","korporaal","sergeant-majoor","vaandrig","adjudant","admiraal","veldmaarschalk","broeder","vader","zuster","graaf","jonkheer","baron","juffrouw","hertog","dhr","mw","mvw","mevr","mijnheer","eerwaarde dame","de weleerwaarde heer","de heer","professor","excellentie","de weleerwaarde zeergeleerde","excellentie","de hoogedelgestrenge","de weledelgestrenge","koninklijke hoogheid","majesteit","hoogheid","de hooggeboren","de hoogwelgeboren","paus","dominee","kapelaan","pastoor","imam","kardinaal","bisschop","aartsbisschop","rabbijn"],"suffixes":["ba","bacc","lic","ma","msc","bcs","ba","llb","m","b","ad","jr","sr"]};
ilib.data.name_pa = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"à¨à©°à¨¡","and2":"à¨à©°à¨¡","or1":"à¨à¨°","or2":"à¨à¨°"},"prefixes":["à¨¡à¨¾à¨à©à¨à¨°","à¨¦à¨°","à¨®à¨°","à¨®à¨°à©à¨¸","à¨®à¨¸","à¨®à¨¿à¨¸à¨à¨° ","à¨®à©à¨¡à¨®","à¨®à¨¿à¨¸ ","à¨®à¨¿à¨¸ "],"suffixes":["à¨¸à©à¨¨à¨¿à¨à¨°"]};
ilib.data.name_pl = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"i","and2":"i","or1":"lub","or2":"lub"},"prefixes":["pan","panna","pani","prezydent","wiceprezes","premier","burmistrz","gubernator","przewodniczÄcy","przewodniczÄca","szef kuchni","trener","profesor","krÃ³l","krÃ³lowa","ksiÄÅ¼Ä","ksiÄÅ¼niczka","ogÃ³lny","admiraÅ","komisarz","superintendent","szeryf","inspektor","detektyw","oficer","pan","pani","lord","paniusia","ojciec","matka","brat","siostra","wielebny","ciotka","wujek","babcia","babcia","dziadzio","dziadek","kuzyn","i","lub"],"suffixes":["emeryturÄ"]};
ilib.data.name_pt = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"e","and2":"e","or1":"ou","or2":"ou"},"prefixes":["Senhor","Senhora","presidente","vice-presidente","primeiro ministro","prefeito","governador","presidente","presidenta","ministro","rabino","treinador","rei","rainha","prÃ­ncipe","princesa","geral","almirante","comissÃ¡rio","superintendente","xerife","inspetor","detetive","oficial","senhor","senhora","senhor","dama","pai","mÃ£e","irmÃ£o","irmÃ£","reverendo","tia","tio","avÃ³","avÃ³","avÃ´","avÃ´","VovÃ´","primo","e","ou"],"suffixes":["aposentados"]};
ilib.data.name_ro = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"Èi","and2":"Èi","or1":"sau","or2":"sau"},"prefixes":["dl","domniÈoarÄ","d-na","preÈedintele","vice-presedinte","prim-ministru","primar","guvernator","preÈedinte","preÈedintÄ","ministru","rabin","bucÄtar-Èef","antrenor","profesor","rege","reginÄ","prinÈ","prinÈesÄ","general","amiral","comisar","administrator","Èerif","inspector","detectiv","ofiÈer","domn","doamnÄ","lord","doamnÄ","tatÄ","mamÄ","frate","sorÄ","preot","mÄtuÈÄ","unchi","bunicÄ","bunic","vÄr","Èi","sau"],"suffixes":["doctorand","putrezi","retras"]};
ilib.data.name_ru = {"format":"{prefix} {givenName} {middleName} {familyName}{suffix}","sortByHeadWord":false,"conjunctions":{"and1":"Ð¸","and2":"Ð¸","or1":"Ð¸Ð»Ð¸","or2":"Ð¸Ð»Ð¸"},"prefixes":["Ð³-Ð½","Ð³-Ð¶Ð°","Ð³Ð¾ÑÐ¿Ð¾Ð´Ð¸Ð½","Ð¿ÑÐ¾Ð¼Ð°ÑÐ¸","Ð´Ð¾ÐºÑÐ¾Ñ","Ð´Ð¾Ðº","Ð¿ÑÐµÐ·Ð¸Ð´ÐµÐ½Ñ","bÐ¸ÑÐµ-Ð¿ÑÐµÐ·Ð¸Ð´ÐµÐ½Ñ","Ð¿ÑÐµÐ¼ÑÐµÑ-Ð¼Ð¸Ð½Ð¸ÑÑÑ","Ð¼ÑÑ","Ð³ÑÐ±ÐµÑÐ½Ð°ÑÐ¾Ñ","Ð¿ÑÐµÐ´ÑÐµÐ´Ð°ÑÐµÐ»Ñ","Ð¿ÑÐµÐ´ÑÐµÐ´Ð°ÑÐµÐ»ÑÐ½Ð¸ÑÐ°","Ð¼Ð¸Ð½Ð¸ÑÑÑ","ÑÐ°Ð²Ð²Ð¸Ð½","Ð¼ÑÐ»Ð°Ñ","Ð¿Ð°ÑÑÐ¾Ñ","ÑÐµÑ-Ð¿Ð¾Ð²Ð°Ñ","ÑÑÐµÐ½ÐµÑ","Ð¿ÑÐ¾ÑÐµÑÑÐ¾Ñ","ÐºÐ¾ÑÐ¾Ð»Ñ","ÐºÐ¾ÑÐ¾Ð»ÐµÐ²Ð°","Ð¿ÑÐ¸Ð½Ñ","Ð¿ÑÐ¸Ð½ÑÐµÑÑÐ°","Ð¾Ð±ÑÐ¸Ð¹","Ð°Ð´Ð¼Ð¸ÑÐ°Ð»","ÐºÐ¾Ð¼Ð¸ÑÑÐ°Ñ","Ð½Ð°ÑÐ°Ð»ÑÐ½Ð¸Ðº","ÑÐµÑÐ¸Ñ","Ð¸Ð½ÑÐ¿ÐµÐºÑÐ¾Ñ","Ð´ÐµÑÐµÐºÑÐ¸Ð²","Ð¾ÑÐ¸ÑÐµÑ","ÑÑÑ","Ð»ÐµÐ´Ð¸","Ð³Ð¾ÑÐ¿Ð¾Ð´Ð¸Ð½","Ð´Ð°Ð¼Ð°","Ð¾ÑÐµÑ","Ð¼Ð°ÑÑ","Ð±ÑÐ°Ñ","ÑÐµÑÑÑÐ°","Ð¿ÑÐµÐ¿Ð¾Ð´Ð¾Ð±Ð½ÑÐ¹","ÑÐµÑÑ","Ð´ÑÐ´Ñ","Ð±Ð°Ð±ÑÑÐºÐ°","Ð±Ð°Ð±ÑÑÐºÐ°","Ð´ÐµÐ´ÑÑÐºÐ°","Ð´ÐµÐ´","ÐÑÐ°Ð½Ð¼Ð°","Ð´ÐµÐ´ÑÑÐºÐ°","Ð´Ð²Ð¾ÑÑÐ¾Ð´Ð½ÑÐ¹ Ð±ÑÐ°Ñ"],"suffixes":["Ð¼Ð»Ð°Ð´ÑÐ¸Ð¹","ÑÑÐ°ÑÑÐ¸Ð¹","ÐÑÑÐ¸Ð»ÐµÐ½Ð´","Ð¾ÑÑÑÐ°Ð²ÐºÑ"]};
ilib.data.name_sk = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"a","and2":"a","or1":"alebo","or2":"alebo"},"prefixes":["pÃ¡n","pani","pani","prezident","viceprezident","ministerskÃ½ predseda","starosta","guvernÃ©r","predseda","predsednÃ­Äka","minister","rabÃ­n","mÅ«laá¸¥","pastor","Å¡Ã©fkuchÃ¡r","trÃ©ner","profesor","krÃ¡Ä¾","krÃ¡Ä¾ovnÃ¡","princ","princeznÃ¡","vÅ¡eobecnÃ½","admirÃ¡l","komisÃ¡r","sprÃ¡vca","Å¡erif","inÅ¡pektor","detektÃ­vne","dÃ´stojnÃ­k","pane","dÃ¡ma","pÃ¡n","dÃ¡ma","otec","matka","brat","sestra","ctihodnÃ½","teta","strÃ½ko","babiÄka","babiÄka","dedko","dedko","dedko","bratranec","a","alebo"],"suffixes":["dÃ´chodku"]};
ilib.data.name_sl = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"in","and2":"in","or1":"ali","or2":"ali"},"prefixes":["g","ga","predsednik","podpredsednik","predsednik vlade","Å¾upan","guverner","predsednik","Predsednica","rabin","kuhar","trener","profesor","kralj","kraljica","princ","princeska","sploÅ¡ni","komisar","superintendent","Å¡erif","inÅ¡pektor","detektiv","Äastnik","gospod","lady","gospodar","dame","oÄe","mati","brat","sestra","preÄastiti","teta","stric","babica","babica","dedek","dedek","bratranec","in","ali"],"suffixes":["viÅ¡ji","upokojil"]};
ilib.data.name_sq = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"dhe","and2":"dhe","or1":"ose","or2":"ose"},"prefixes":["z","zoti","znj","zonja","president","zÃ«vendÃ«spresident","Kryeministri","kryetar bashkie","guvernator","kryetar","kryetare","ministÃ«r","rabin","kuzhinier","trajner","profesor","mbret","mbretÃ«reshÃ«","princ","princeshÃ«","i pÃ«rgjithshÃ«m","pÃ«rfaqÃ«sues","inspektor","sherif","inspektor","detektiv","oficer","zotÃ«ri","zonjÃ«","plakushÃ«","baba","nÃ«nÃ«","vÃ«lla","motÃ«r","Reverend","hallÃ«","ungji","gjyshe","gjyshe","gjysh","gjysh","kushÃ«ri","dhe","ose"],"suffixes":["i ri","njom","pension"]};
ilib.data.name_sr = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"Ð¸","and2":"Ð¸","or1":"Ð¸Ð»Ð¸","or2":"Ð¸Ð»Ð¸"},"prefixes":["Ð³Ð¾ÑÐ¿Ð¾Ð´Ð¸Ð½","Ð³Ð¾ÑÐ¿Ð¾ÑÐ°","Ð³Ð¾ÑÐ¿Ð¾ÑÐ°","Ð¿ÑÐµÐ´ÑÐµÐ´Ð½Ð¸Ðº","Ð·Ð°Ð¼ÐµÐ½Ð¸Ðº Ð¿ÑÐµÐ´ÑÐµÐ´Ð½Ð¸ÐºÐ°","Ð¿ÑÐµÐ¼Ð¸ÑÐµÑ","Ð³ÑÐ°Ð´Ð¾Ð½Ð°ÑÐµÐ»Ð½Ð¸Ðº","Ð³ÑÐ²ÐµÑÐ½ÐµÑ","Ð¿ÑÐµÐ´ÑÐµÐ´Ð½Ð¸Ðº","Ð¿ÑÐµÐ´ÑÐµÐ´Ð°Ð²Ð°ÑÑÑÐ°","Ð¼Ð¸Ð½Ð¸ÑÑÐ°Ñ","ÑÐ°Ð±Ð¸Ð½","Ð¼ÑÐ»Ð°Ñ","Ð¿Ð°ÑÑÐ¾Ñ","Ð³Ð»Ð°Ð²Ð½Ð¸ ÐºÑÐ²Ð°Ñ","ÑÑÐµÐ½ÐµÑ","Ð¿ÑÐ¾ÑÐµÑÐ¾Ñ","Ð¿ÑÐ¾Ñ","ÐºÑÐ°Ñ","ÐºÑÐ°ÑÐ¸ÑÐ°","Ð¿ÑÐ¸Ð½Ñ","Ð¿ÑÐ¸Ð½ÑÐµÐ·Ð°","Ð¾Ð¿ÑÑÐ¸","Ð°Ð´Ð¼Ð¸ÑÐ°Ð»","ÐºÐ¾Ð¼ÐµÑÐ°Ñ","ÑÐ¿ÑÐ°Ð²Ð½Ð¸Ðº","ÑÐµÑÐ¸Ñ","Ð¸Ð½ÑÐ¿ÐµÐºÑÐ¾Ñ","Ð´ÐµÑÐµÐºÑÐ¸Ð²","Ð¾ÑÐ¸ÑÐ¸Ñ","Ð³Ð¾ÑÐ¿Ð¾Ð´Ð¸Ð½Ðµ","Ð´Ð°Ð¼Ð°","Ð»Ð¾ÑÐ´","Ð´Ð°Ð¼Ð°","Ð¾ÑÐ°Ñ","Ð¼Ð°ÑÐºÐ°","Ð±ÑÐ°Ñ","ÑÐµÑÑÑÐ°","ÑÐ²ÐµÑÑÐµÐ½Ð¸Ðº","ÑÐµÑÐºÐ°","ÑÑÐ°Ðº","Ð±Ð°ÐºÐ°","Ð±Ð°ÐºÐ°","Ð´ÐµÐ´Ð°","Ð´ÐµÐ´Ð°","ÐÑÐ°Ð½Ð¼Ð°","ÐÐµÐ´Ð°","ÑÐ¾ÑÐ°Ðº","Ð¸","Ð¸Ð»Ð¸"],"suffixes":["Ð¼Ð»Ð°ÑÐ¸","Ð²Ð¸ÑÐ¸","ÐÐ¥Ð","Ð¼Ð¾ÑÐ¸ÑÐ¸","Ð¿ÐµÐ½Ð·Ð¸ÑÐ¸"]};
ilib.data.name_sv = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"och","and2":"och","or1":"eller","or2":"eller"},"prefixes":["herr","fru","frÃ¶ken","president","vice president","premiÃ¤rminister","borgmÃ¤stare","guvernÃ¶r","ordfÃ¶rande","ordfÃ¶rande","minister","rabbin","kock","trÃ¤nare","kung","drottning","prince","princess","allmÃ¤n","amiral","commissioner","superintendent","sheriff","inspektÃ¶r","detektiv","officer","dame","far","mor","bror","syster","reverend","faster","farbror","farmor","mormor","morfar","morfar","kusin"],"suffixes":["pension"]};
ilib.data.name_ta = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"conjunctions":{"and1":"à®®à®±à¯à®±à¯à®®à¯","and2":"à®®à®±à¯à®±à¯à®®à¯","or1":"à®à®²à¯à®²à®¤à¯","or2":"à®à®²à¯à®²à®¤à¯"},"prefixes":["à®µà¯à®¤à¯à®¤à®¿à®¯à®°à¯","à®¤à®¿à®°à¯","à®¤à®¿à®°à¯à®®à®¤à®¿","à®à®®à¯à®à®¸à¯","à®¤à®¿à®°à¯ (à®µà®¾à®³à®°à¯) à®à®© à®ªà¯à®¾à®°à¯à®³à¯à®ªà® à®à¯à®à®¿à®¯à®¤à¯","à®®à¯à®à®®à¯","à®®à®¿à®¸à¯"],"suffixes":["à®à®³à¯à®¯à¯à®¾à®°à¯","à®®à¯à®¤à¯à®¤","à®¨à®¾à®©à¯","à®à®¸à¯à®à¯"]};
ilib.data.name_te = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"à°®à°°à°¿à°¯à±","and2":"à°®à°°à°¿à°¯à±","or1":"à°²à±à°¦à°¾","or2":"à°²à±à°¦à°¾"},"prefixes":["à°¡à°¾à°à±à°à°°à±","à°®à°¿à°¸à±à°à°°à±","à°®à±à°¡à°®à±","à°®à°¿à°¸à±","à°®à°¿à°¸à±"],"suffixes":["à°à±à°¨à°¿à°¯à°°à±","à°¸à±à°¨à°¿à°¯à°°à±"]};
ilib.data.name_th = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"ve","and2":"ve","or1":"veya","or2":"veya"},"prefixes":["à¸à¸²à¸¢","à¸à¸²à¸à¸ªà¸²à¸§","à¸à¸²à¸","à¸à¸£à¸°à¸à¸²à¸","à¸£à¸­à¸à¸à¸£à¸°à¸à¸²à¸","à¸à¸²à¸¢à¸à¸¯","à¸à¸²à¸¢à¸à¹à¸à¸¨à¸¡à¸à¸à¸£à¸µ","à¸à¸¹à¹à¸§à¹à¸²à¸£à¸²à¸à¸à¸²à¸£","à¸à¸£à¸°à¸à¸²à¸","à¸à¸²à¸¢à¸´à¸à¸²","à¸£à¸±à¸à¸¡à¸à¸à¸£à¸µ","à¸­à¸²à¸à¸²à¸£à¸¢à¹à¹à¸à¸¨à¸²à¸ªà¸à¸²à¸¢à¸´à¸§","à¸à¸²à¸à¸«à¸¥à¸§à¸","à¸à¹à¸­à¸à¸£à¸±à¸§","à¹à¸à¹à¸","à¸¨à¸²à¸ªà¸à¸£à¸²à¸à¸²à¸£à¸¢à¹","à¸¨à¸²à¸ªà¸à¸£à¸²à¸à¸²à¸£à¸¢à¹","à¸à¸£à¸°à¸¡à¸«à¸²à¸à¸©à¸±à¸à¸£à¸´à¸¢à¹","à¸à¸£à¸°à¸£à¸²à¸à¸´à¸à¸µ","à¹à¸à¹à¸²à¸à¸²à¸¢","à¹à¸à¹à¸²à¸«à¸à¸´à¸","à¸à¸±à¹à¸§à¹à¸","à¸à¸¥à¹à¸£à¸·à¸­à¹à¸­à¸","à¸à¸£à¸£à¸¡à¸²à¸à¸´à¸à¸²à¸£","à¸à¸¹à¹à¸à¸³à¸à¸±à¸à¸à¸²à¸£","à¹à¸à¹à¸²à¸à¸à¸±à¸à¸à¸²à¸à¸¡à¸à¸à¸¥","à¸à¸²à¸¢à¸à¸£à¸§à¸","à¸à¸±à¸à¸ªà¸·à¸","à¹à¸à¹à¸²à¸«à¸à¹à¸²à¸à¸µà¹","à¸à¸¸à¸à¸à¸²à¸¢","à¸ªà¸¸à¸ à¸²à¸à¸ªà¸à¸£à¸µ","à¹à¸à¹à¸²","à¹à¸¡à¹à¸à¹à¸²à¸","à¸à¹à¸­","à¹à¸¡à¹","à¸à¸µà¹à¸à¸²à¸¢","à¸à¹à¸­à¸à¸ªà¸²à¸§","à¸à¹à¸²à¸à¸±à¸à¸à¸·à¸­","à¸à¹à¸²","à¸¥à¸¸à¸","à¸¢à¸²à¸¢","à¸¢à¸²à¸¢","à¸à¸¸à¸à¸à¸¹à¹","à¸à¸¸à¸à¸à¸¹à¹","à¸à¹à¸­à¹à¸à¹à¸²","à¸¥à¸¹à¸à¸à¸µà¹à¸¥à¸¹à¸à¸à¹à¸­à¸"],"suffixes":["à¸­à¸à¸¸","à¸à¸¹à¹à¸à¸µà¸¢à¸£à¹","à¸£à¸°à¸à¸±à¸à¸­à¸²à¸§à¸¸à¹à¸ª","à¸à¸£à¸´à¸à¸à¸²à¹à¸­à¸","Ã§Ã¼rÃ¼mek","à¹à¸à¸©à¸µà¸¢à¸à¸­à¸²à¸¢à¸¸à¸£à¸²à¸à¸à¸²à¸£"]};
ilib.data.name_tr = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"ve","and2":"ve","or1":"veya","or2":"veya"},"prefixes":["bay","bayan","baÅkan","baÅkan YardÄ±mcÄ±sÄ±","baÅbakan","belediye baÅkanÄ±","vali","baÅkan","kadÄ±n baÅkan","bakan","haham","papaz","Åef","koÃ§","profesÃ¶r","kral","kraliÃ§e","prens","prenses","genel","amiral","komiser","baÅkomiser","Åerif","mÃ¼fettiÅ","dedektif","subay","bayÄ±m","bayan","kadÄ±n","baba","anne","kardeÅ","muhterem","teyze","amca","bÃ¼yÃ¼kanne","dede","nine","kuzen","ve","veya"],"suffixes":["genÃ§","kÄ±demli","doktoralÄ±","Ã§Ã¼rÃ¼mek","emekli"]};
ilib.data.name_uk = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortByHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"Ñ","and2":"Ñ","or1":"Ð°Ð±Ð¾","or2":"Ð°Ð±Ð¾"},"prefixes":["Ð³-Ð½","Ð³Ð¾ÑÐ¿Ð¾Ð´Ð¸Ð½","Ð³-Ð¶Ð°","Ð³Ð¾ÑÐ¿Ð¾Ð¶Ð°","Ð¿ÑÐµÐ·Ð¸Ð´ÐµÐ½Ñ","Ð²ÑÑÐµ-Ð¿ÑÐµÐ·Ð¸Ð´ÐµÐ½Ñ","Ð¿ÑÐµÐ¼'ÑÑ-Ð¼ÑÐ½ÑÑÑÑ","Ð¼ÐµÑ","Ð³ÑÐ±ÐµÑÐ½Ð°ÑÐ¾Ñ","Ð³Ð¾Ð»Ð¾Ð²Ð°","Ð³Ð¾Ð»Ð¾Ð²ÑÑÑÐ¸Ð¹","Ð¼ÑÐ½ÑÑÑÑ","ÑÐ°Ð±Ð¸Ð½","Ð¼ÑÐ»Ð°Ñ","Ð¿Ð°ÑÑÐ¾Ñ","ÑÐµÑ-ÐºÑÑÐ°Ñ","ÑÑÐµÐ½ÐµÑ","Ð¿ÑÐ¾ÑÐµÑÐ¾Ñ","ÐºÐ¾ÑÐ¾Ð»Ñ","ÐºÐ¾ÑÐ¾Ð»ÐµÐ²Ð°","Ð¿ÑÐ¸Ð½Ñ","Ð¿ÑÐ¸Ð½ÑÐµÑÐ°","Ð·Ð°Ð³Ð°Ð»ÑÐ½Ð¸Ð¹","Ð°Ð´Ð¼ÑÑÐ°Ð»","ÐºÐ¾Ð¼ÑÑÐ°Ñ","Ð½Ð°ÑÐ°Ð»ÑÐ½Ð¸Ðº","ÑÐµÑÐ¸Ñ","ÑÐ½ÑÐ¿ÐµÐºÑÐ¾Ñ","Ð´ÐµÑÐµÐºÑÐ¸Ð²","Ð¾ÑÑÑÐµÑ","ÑÐµÑ","Ð»ÐµÐ´Ñ","Ð¿Ð°Ð½","Ð´Ð°Ð¼Ð°","Ð±Ð°ÑÑÐºÐ¾","Ð¼Ð°ÑÐ¸","Ð±ÑÐ°Ñ","ÑÐµÑÑÑÐ°","Ð¿ÑÐµÐ¿Ð¾Ð´Ð¾Ð±Ð½Ð¸Ð¹","ÑÑÑÐºÐ°","Ð´ÑÐ´ÑÐºÐ¾","Ð±Ð°Ð±ÑÑÑ","Ð´ÑÐ´ÑÑÑ","Ð´ÑÐ´","ÐÑÐ°Ð½Ð¼Ð°","Ð´ÑÐ´ÑÑÑ","Ð´Ð²Ð¾ÑÑÑÐ´Ð½Ð¸Ð¹ Ð±ÑÐ°Ñ"],"suffixes":["Ð¼Ð¾Ð»Ð¾Ð´ÑÐ¸Ð¹","ÑÑÐ°ÑÑÐ¸Ð¹","mÐµÑÑÐ»ÐµÐ½Ð´","Ð²ÑÐ´ÑÑÐ°Ð²ÐºÑ"]};
ilib.data.name_ur = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"Ø§ÙØ±","and2":"Ø§ÙØ±","or1":"ÛØ§","or2":"ÛØ§"},"prefixes":["ÚØ§Ú©Ù¹Ø±","ÚØ§Ú©Ù¹Ø±","ÙØ³Ù¹Ø±","ÙØ³Ø²","Ø§ÛÙ Ø§ÛØ³","ÙØ³Ù¹Ø±","ÙÛÚÙ","ÛØ§Ø¯ Ø¢ØªÛ ÛÛ"],"suffixes":["Ø¬ÙÙÛØ¦Ø±","Ø³ÛÙØ¦Ø±","ÙÛÚº","Ø¨ÙÙØ§Ø¨ÙÛ","Ù¾Û Ø§ÛÚ ÚÛ","Ø§ÛÙ ÚÛ"]};
ilib.data.name_uz_Cyrl = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"Ð²Ð°","and2":"Ò³Ð°Ð¼Ð´Ð°","or1":"ÑÐºÐ¸","or2":"ÑÐºÐ¸"},"prefixes":["Ð´Ð¾ÐºÑÐ¾Ñ","Ð´Ð¾Ðº","Ð¶Ð°Ð½Ð¾Ð±","ÑÐ¾Ð½Ð¸Ð¼"],"suffixes":["ÐºÐ¸ÑÐ¸Ðº","ÐºÐ°ÑÑÐ°","2-ÑÐ¸","3-ÑÐ¸","4-ÑÐ¸","5-ÑÐ¸","6-ÑÐ¸","7-ÑÐ¸","8-ÑÐ¸","9-ÑÐ¸","10-ÑÐ¸","Ð´Ð¾ÐºÑÐ¾Ñ","Ð¼Ð°Ð³Ð¸ÑÑÑ","ddm","dds"]};
ilib.data.name_uz_Latn = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","conjunctions":{"and1":"va","and2":"hamda","or1":"yoki","or2":"yoki"},"prefixes":["doktor","dok","janob","xonim"],"suffixes":["kichik","katta","2-chi","3-chi","4-chi","5-chi","6-chi","7-chi","8-chi","9-chi","10-chi","doktor","magistr","ddm","dds"]};
ilib.data.name_vi = {"format":"{prefix} {givenName} {middleName} {familyName} {suffix}","sortbyHeadWord":false,"nameStyle":"western","conjunctions":{"and1":"vÃ ","and2":"vÃ ","or1":"hoÄÌ£c","or2":"hoÄÌ£c"},"prefixes":["Ã´ng","bÃ ","bÃ ","chá»§ tá»ch","phÃ³ chá»§ tá»ch","thá»§ tÆ°á»ng","thiÌ£ trÆ°Æ¡Ìng","Thá»ng Äá»c","chá»§ tá»ch","chuÌ tiÌ£ch ÄaÍn baÍ","bá» trÆ°Æ¡Ìng","phaÍp sÆ°","mulah","Má»¥c sÆ°","Äáº§u báº¿p","HLV","giÃ¡o sÆ°","prof","vua","ná»¯ hoÃ ng","vua","cÃ´ng chÃºa","chung","thuyÃªÍn trÆ°Æ¡Ìng","uÌy viÃªn","giÃ¡m Äá»c","cáº£nh sÃ¡t trÆ°á»ng","viÃªn thanh tra","thÃ¡m tá»­","viÃªn","thÆ°a Ã´ng","phá»¥ ná»¯","chÃºa","phu nhÃ¢n","cha","meÌ£","em trai","chá»","tÃ´n troÌ£ng","cÃ´","chÃº","bÃ ","bÃ ","Ã´ng ná»i","Ã´ng ná»i","anh em há»"],"suffixes":["em","cao cáº¥p","Tiáº¿n Sá»¹","nghá» hÆ°u"]};
ilib.data.name_zh = {"format":"{prefix}{familyName}{middleName}{givenName}{suffix}","nameStyle":"asian","conjunctions":{"and1":"ä¸","and2":"ä¸","or1":"æ","or2":"æ"},"prefixes":["é¦å¸­æ§è¡å®","é¦å¸­å·è¡å®","é¦å¸­è´¢å¡å®","é¦å¸­è²¡åå®","é¦å¸­ææ¯å®","é¦å¸­æè¡å®","é¦å¸­è¿è¥å®","é¦å¸­çéå®","å¤ç¥å¥³","å å¥","å å¼","å å§","å å¦¹","è¡¨å¥","è¡¨å¼","è¡¨å§","è¡¨å¦¹","å¨å®¶","ä¸å®¶","å§¥ç·","å§¥çº","å¤å©","åç¶","å©¶å©¶","èåª½","å¬¸å¬¸","èè","èå¦","å§¨ä¸","å§¨ç¶","å§å¦","å§åª½","å§ç¶","å§ä¸","å¿å­","åå­","å¥³å¿","å¥³å","å­å­","å­«å­","å­å¥³","å­«å¥³","å¦¹å©¿","å«å«","å¼åª³","ä¾å­","ä¾å¥³","å¤ç¥","è","å°","å","ä¸","è","å"],"suffixes":["é¦å¸­æ§è¡å®","é¦å¸­è´¢å¡å®","é¦å¸­ææ¯å®","é¦å¸­è¿è¥å®","é¦å¸­å·è¡å®","é¦å¸­è²¡åå®","é¦å¸­æè¡å®","é¦å¸­çéå®","æ»å·¥ç¨å¸","ç¸½å·¥ç¨å¸«","é«ç´ç£å¯","æ ¼æçæ¥","æ ¼æçªå ±","å·¥ç¨å¸","æ»ç»ç","å¤ç¥å¥³","å·¥ç¨å¸«","ç¸½ç¶ç","å¸ä»¤å","ç¸½ç£å¯","ç¸½è­¦å¸","è²´å©¦äºº","è´µå¦äºº","å§¥ç·","å§¥çº","å§¨ç¶","å§ç¶","å­å­","å­«å­","å­å¥³","å­«å¥³","å¤å©","åç¶","å©¶å©¶","èåª½","å¬¸å¬¸","èè","èå¦","å§¨ä¸","å§å¦","å§åª½","å§ä¸","å¿å­","åå­","å¥³å¿","å¥³å","å¦¹å©¿","å«å«","å¼åª³","ä¾å­","ä¾å¥³","å¤ç¥","èå¸","èå¸«","æ ¡é¿","æ ¡é·","åå£«","ææ","å¾å¸","å¾å¸«","æ³å®","å»ç","æ¤å£«","ä¼è®¡","ç»ç","èæ¿","èæ»","é¨é¿","å¸é¿","å±é¿","å¤é¿","åé¿","ç§é¿","è¯¾é¿","ç»é¿","é«ç","è­·å£«","æè¨","ç¶ç","èé","èç¸½","é¨é·","å¸é·","å±é·","èé·","çµé·","å©ç","æ»è£","ç­é¿","æé¿","è¥é¿","æé¿","å¢é¿","å¸é¿","åé¿","æ¿å§","ä¸å°","ä¸­å°","å¤§å°","å¤§æ ¡","ä¸­æ ¡","ä¸æ ¡","ä¸å°","ä¸­å°","å°å°","åå¸","ç¸½è£","ä¸»å¸­","ç­é·","è­¦å¡","è­¦é·","ç£å¯","è­¦å¸","åç","å¤ªå¤ª","å¤«å¦","å¤«å©¦","å¤«äºº","å¥³å£«","å°å§","å¥å¥","å¼å¼","å§å§","å¦¹å¦¹","ç·ç·","çºçº","å¥¶å¥¶","åå","é¿å§¨","ä¼¯ç¶","ä¼¯æ¯","å å¥","å å¼","å å§","å å¦¹","è¡¨å¥","è¡¨å¼","è¡¨å§","è¡¨å¦¹","èå¸«","åª½åª½","ä¸å¸","å¦å¦","ç¸ç¸","åå­","å¥³å","ç¥ç¶","ç¥æ¯","å¤å¬","å¬¸å¬¸","èåª½","å§åª½","å§ªå­","å§ªå¥³","è¡¨å","è¡¨å¬¸","å¥¹","å·¥","æ»","ç¸½","ç"],"knownFamilyNames":{"æ":"Ãi","è¾":"Ãi","å®":"Än","æ":"Ão","ç½":"BÃ¡i1","ç¾":"BÇi2","ç¾é":"BÇilÇ","ç­":"BÄn","å":"BÄo1","ä¿":"BÇo2","é²":"BÃ o3","é®":"BÃ o4","æ´":"BÃ o5","å·´":"BÄ","è´":"BÃ¨i1","è²":"BÃ¨i2","è³":"BÄn","æ¯":"BÃ¬1","ç¢":"BÃ¬2","è¾¹":"BiÄn1","é":"BiÄn2","å":"BiÃ n3","å¥":"BiÃ©","é´":"BÇng","ä¼¯":"BÃ³1","è":"BÃ³2","æ":"BÃ²3","å":"BÅ­1","æ­¥":"BÃ¹2","è¡":"CÃ i","è¼":"CÄng","æ¹":"CÃ¡o","æ¾":"CÃ©ng","å²":"CÃ©n","æ´":"ChÃ¡i","å":"ChÃ¡n1","å®":"ChÃ¡n2","å¸¸":"ChÃ¡ng1","æ":"ChÄng2","ç":"ChÃ ng3","é¿å­":"ChÃ¡ngsÅ«n1","é·å­«":"ChÃ¡ngsÅ«n2","å®äº":"ChÃ¡nyÃº","æ":"ChÃ¡o1","å·¢":"ChÃ¡o2","æ¥":"ChÃ¡","è½¦":"ChÄ1","è»":"ChÄ2","æ²":"ChÃ©n1","é":"ChÃ©n2","é³":"ChÃ©n3","æ":"ChÃ©ng1","ç¨":"ChÃ©ng2","ç":"ChÃ©ng3","æ± ":"ChÃ­1","è¿":"ChÃ­2","é":"ChÄ«3","å":"ChÅng","ä»":"ChÃ³u","è¤":"ChÇ1","æ¥":"ChÇ2","å²":"ChÇ3","æ·³äº":"ChÃºnyÃº","è¤å¸":"ChÇshÄ«","ä¸":"CÃ³ng1","å¾":"CÅng2","å´":"CuÄ«","æ´":"DÃ i","å":"DÇng1","é»¨":"DÇng2","æ¾¹å°":"DÃ ntÃ¡i1","æ¾¹èº":"DÃ ntÃ¡i2","ç³":"DÃ n","è¾¾å¥":"DÃ¡xÄ«","ç¬ª":"DÃ¡","é":"DÃ¨ng1","é§":"DÃ¨ng2","ç":"DÃ­1","ç¿":"DÃ­2","å":"DiÄo","ä¸":"DÄ«ng","ç¬¬äº":"DÃ¬wÇ","é¸":"DÇ","æ±":"DÅng1","è£":"DÇng2","ä¸æ¹":"DÅngfÄng1","æ±æ¹":"DÅngfÄng2","ä¸å®«":"DÅnggÅng","ä¸é­":"DÅngguÅ1","æ±é­":"DÅngguÅ2","ä¸é":"DÅnglÇ","æ±é":"DÅngmÃ©n","çª¦":"DÃ²u1","ç«":"DÃ²u2","é½":"DÅu","ç£":"DÅ«1","å µ":"DÇ2","æ":"DÃ¹3","æ®µå¹²":"DuÃ ngÄn","ç«¯æ¨":"DuÄnmÃ¹","æ®µ":"DuÃ n","ç¬å­¤":"DÃºgÅ«","ä½´":"Ãr","é":"Ã","æ¨":"FÃ¡n1","è":"FÃ n2","æ¹":"FÄng1","æ¿":"FÃ¡ng2","æ³":"FÇ","è´¹":"FÃ¨i1","è²»":"FÃ¨i2","å°":"FÄng1","è±":"FÄng2","é":"FÄng3","å¯":"FÃ©ng4","é¦®":"FÃ©ng5","å¤":"FÃ¨ng6","é³³":"FÃ¨ng7","ä¼":"FÃº1","æ¶":"FÃº2","ç¬¦":"FÃº3","ç¦":"FÃº4","ä»":"FÃ¹5","å¯":"FÃ¹6","å":"FÃ¹7","ç":"GÃ i1","è":"GÃ i2","å¹²":"GÄn1","ç":"GÄn2","é«":"GÄo1","é":"GÃ o2","æ":"GÄ1","è":"GÃ©2","è¿":"GÄng","å¬":"GÅng1","å¼":"GÅng2","å®«":"GÅng3","å®®":"GÅng4","é¾":"GÅng5","é¾":"GÅng6","å·©":"GÇng7","é":"GÇng8","å¬ä¼¯":"GÅngbÃ³","å¬ä¹":"GÅngchÃ©ng","å¬æ·":"GÅnghÃ¹","å¬å":"GÅngjiÄn","å¬è¯":"GÅngliÃ¡ng","å¬é¨":"GÅngmÃ©n","å¬ä¸":"GÅngshÃ ng","å¬å±±":"GÅngshÄn","å¬å­":"GÅngsÅ«n1","å¬å­«":"GÅngsÅ«n2","å¬è¥¿":"GÅngxÄ«1","å¬ç":"GÅngxÄ«2","å¬ç¾":"GÅngyÃ¡ng","å¬å¶":"GÅngyÄ","å¬ä»ª":"GÅngyÃ­","å¬ç":"GÅngyÃ¹","å¬ä»²":"GÅngzhÃ²ng","å¬ç¥":"GÅngzÇ","è²¢":"GÃ²ng","å¾":"GÅu1","ç·±":"GÅu2","è":"GÇu3","å¤":"GÇ1","è°·":"GÇ2","è´¾":"GÇ3","æ»":"GÇ4","è³":"GÇ5","é¡¾":"GÃ¹6","é¡§":"GÃ¹7","å³":"GuÄn1","å®":"GuÄn2","é":"GuÄn3","å»£":"GuÇng","è´¯ä¸":"GuÃ nqiÅ«","ç®¡":"GuÇn","æ­¸":"GuÄ«1","æ¡":"GuÃ¬2","è°·æ¢":"GÇliÃ¡ng1","ç©ç²±":"GÇliÃ¡ng2","é­":"GuÅ1","å":"GuÃ³2","è¾":"GÅ«","æµ·":"HÇi","é©":"HÃ¡n1","é":"HÃ¡n2","æ­":"HÃ¡ng","é":"HÇo","å":"HÄ","ä½":"HÃ©1","å":"HÃ©2","è´º":"HÃ¨3","è³":"HÃ¨4","èµ«è¿":"HÃ¨liÃ¡n1","èµ«é£":"HÃ¨liÃ¡n2","è¡¡":"HÃ©ng","å¼":"HÃ³ng1","ç´":"HÃ³ng2","æ´ª":"HÃ³ng3","ä¾¯":"HÃ³u1","å":"HÃ²u2","å¾":"HÃ²u3","è¡":"HÃº1","æ":"HÃ¹2","å":"HuÃ¡1","è¯":"HuÃ¡2","æ·":"HuÃ¡i","æ¡":"HuÃ¡n1","å®¦":"HuÃ n2","çç«":"HuÃ¡ngfÇ","é»":"HuÃ¡ng","è±":"HuÄ","æ ":"HuÃ¬","é":"HuÃ²","å¼å»¶":"HÅ«yÃ¡n","å§¬":"JÄ«01","åµ":"JÄ«02","å":"JÃ­03","æ±²":"JÃ­04","ç±":"JÃ­05","è®¡":"JÃ¬06","çºª":"JÃ¬07","ç´":"JÃ¬08","è¨":"JÃ¬09","å­£":"JÃ¬10","è":"JÃ¬11","æ¨":"JÃ¬12","å":"JÃ¬13","å®¶":"JiÄ1","é":"JiÃ¡2","å¤¹è°·":"JiÄgÇ1","å¤¾è°·":"JiÄgÇ2","ç®":"JiÇn1","ç°¡":"JiÇn2","æ±":"JiÄng1","å§":"JiÄng2","è":"JiÇng3","è£":"JiÇng4","ç¦":"JiÄo","æ­":"JiÄ1","è§£":"JiÄ2","å³å¢¨":"JÃ­mÃ²","æ":"JÃ¬n1","æ":"JÃ¬n2","é³":"JÃ¬n3","è":"JÄ«ng1","è":"JÄ«ng2","ç¶":"JÄ«ng3","äº":"JÇng4","æ¯":"JÇng5","é":"JÄ«n","é ":"JÅ«1","ç¿":"JÃ¹2","å±":"JÅ«","åº·":"KÄng1","äº¢":"KÃ ng2","é":"KÃ n","æ¯":"KÄ","ç©º":"KÅng1","å­":"KÇng2","å¯":"KÃ²u","è¯":"KuÇi","å¡":"KuÄng1","æ³":"KuÃ ng2","å¤":"KuÃ­","è":"La1","è":"La2","æ¥":"LÃ¡i1","èµ":"LÃ i2","è³´":"LÃ i3","é":"LÃ¡ng","å°":"LÃ¡n","å":"LÃ¡o","ä¹":"LÃ¨1","æ¨":"LÃ¨2","é·":"LÃ©i","å·":"LÄng","ä¹æ­£":"LÃ¨zhÄng1","æ¨æ­£":"LÃ¨zhÄng2","é»":"LÃ­1","æ":"LÇ2","å©":"LÃ¬3","æ ":"LÃ¬4","å²":"LÃ¬5","é":"LÃ¬6","è¿":"LiÃ¡n1","é£":"LiÃ¡n2","å»":"LiÃ¡n3","æ¢ä¸":"LiÃ¡ngqiÅ«","æ¢":"LiÃ¡ng","ç»":"LiÃ n","å»":"LiÃ o","æ":"LÃ­n1","èº":"LÃ¬n2","ä»¤ç":"LÃ¬nghÃº","å":"LÃ­ng","å":"LiÃº1","å":"LiÃº2","æ³":"LiÇ3","é":"LiÃ¹4","é¸":"LiÃ¹5","é¾":"LÃ³ng1","é¾":"LÃ³ng2","é":"LÅng3","å¨":"LÃ³u1","å©":"LÃ³u2","å¢":"LÃº01","è¦":"LÃº02","ç§":"LÃº03","é²":"LÇ04","é­¯":"LÇ05","ç¥¿":"lÃ¹06","é¯":"LÃ¹07","è·¯":"LÃ¹08","å":"LÇ09","å":"LÇ10","æ ¾":"LuÃ¡n1","æ¬":"LuÃ¡n2","ç½":"LuÅ1","éª":"LuÃ²1","ç¾":"LuÃ³2","é§±":"LuÃ²2","é¾ä¸":"LÇqiÅ«1","é­ä¸":"LÇqiÅ«2","éº»":"MÃ¡1","é©¬":"MÇ2","é¦¬":"MÇ3","éº¦":"MÃ i","æ»¿":"MÇn","æ¯":"MÃ¡o1","è":"MÃ¡o2","æ¢":"MÃ©i","è":"MÄng1","å­":"MÃ¨ng2","ç³":"MÃ­1","ç±³":"MÇ2","å®":"MÃ¬3","è":"MiÃ¡o1","ç¼ª":"MiÃ o2","ç¹":"MiÃ o3","ä¹":"MiÄ","éµ":"MÇn1","é":"MÇn2","æ":"MÃ­ng","è«":"MÃ²1","å¢¨":"MÃ²2","ç":"MÃ³u","æ¨":"MÃ¹1","ç§":"MÃ¹2","æ":"MÃ¹3","ç©":"MÃ¹4","æå®¹":"MÃ¹rÃ³ng","åå®«":"NÃ¡ngÅng1","åå®®":"NÃ¡ngÅng2","åé¨":"NÃ¡nmÃ©n1","åé":"NÃ¡nmÃ©n2","åè£":"NÃ¡nrÃ³ng","é":"NÃ¡o","é£":"NÇ","è½":"NÃ©ng","å¹´":"NiÃ¡n","è":"NiÃ¨1","è¶":"NiÃ¨2","å®":"NÃ­ng1","å¯§":"NÃ­ng2","ç":"NiÃº1","é":"NiÇ2","åª":"NÃ­","è¾²":"NÃ³ng","æ¬§":"Åu1","æ­":"Åu2","æ¬§é³":"ÅuyÃ¡ng1","æ­é½":"ÅuyÃ¡ng2","åº":"PÃ¡ng1","é":"PÃ¡ng2","é¾":"PÃ¡ng3","æ½":"PÄn","è£´":"PÃ©i","å½­":"PÃ©ng1","è¬":"PÃ©ng2","å¹³":"PÃ­ng","ç®":"PÃ­","æ¿®":"PÃº1","è²":"PÃº2","æµ¦":"PÇ3","æ¿®é³":"PÃºyÃ¡ng1","æ¿®é½":"PÃºyÃ¡ng2","ç¥":"QÃ­1","é½":"QÃ­2","é½":"QÃ­3","é±":"QiÃ¡n1","é¢":"QiÃ¡n2","å¼º":"QiÃ¡ng1","å¼·":"QiÃ¡ng2","ä¹":"QiÃ¡o1","å¬":"QiÃ¡o2","è­":"QiÃ¡o3","æ¼é":"QÄ«diÄo","äºå®":"QÃ­guÄn","æ¬½":"QÄ«n1","ç§¦":"QÃ­n2","ç´":"QÃ­n3","ä¸":"QiÅ«1","é±":"QiÅ«2","ç§":"QiÅ«3","è£":"QiÃº4","æ":"QÄ«","æ²":"QÅ«1","å±":"QÅ«2","ç©":"QÃº3","éº´":"QÃº4","å¨":"QuÃ¡n1","æ¬":"QuÃ¡n2","é":"QuÄ","å£¤é©·":"RÇngsÃ¬1","å£¤é§":"RÇngsÃ¬2","å":"RÇn","é¥":"RÃ¡o","ä»»":"RÃ¨n","æ":"RÃ³ng1","å®¹":"RÃ³ng2","æ¦®":"RÃ³ng3","è":"RÃ³ng4","è¹":"RÃº1","æ±":"RÇ2","é®":"RuÇn","è®":"RuÃ¬","æ¡":"SÄng","å":"ShÄng1","è³":"ShÇng2","å°":"ShÃ ng3","ä¸å®":"ShÃ ngguÄn","å±±":"ShÄn","é¶":"ShÃ¡o1","éµ":"ShÃ o2","æ²":"ShÄ","ä½":"ShÃ©1","å":"ShÃ¨2","ç³":"ShÄn1","è":"ShÄn2","æ":"ShÃ¨n3","ç³å± ":"ShÄntÃº","å¸«":"ShÄ«1","æ½":"ShÄ«2","æ¶":"ShÃ­3","æ":"ShÃ­4","å²":"ShÇ5","å£½":"ShÃ²u","æ®³":"ShÅ«1","è":"ShÅ«2","æ":"ShÃ¹3","å¸¥":"ShuÃ i","é":"ShuÄng","æ°´":"ShuÇ","å¸ç©º":"SÄ«kÅng","å¸å¯":"SÄ«kÃ²u","å¸é©¬":"SÄ«mÇ1","å¸é¦¬":"SÄ«mÇ2","å¸å¾":"SÄ«tÃº","å¸":"SÄ«","æ¾":"SÅng1","å®":"SÃ²ng2","è":"SÅ«1","è":"SÅ«2","é":"SuÃ­","å­":"SÅ«n1","å­«":"SÅ«n2","ç´¢":"SuÇ","å®¿":"SÃ¹","ææ":"TÃ bÃ¡1","æè·":"TÃ bÃ¡2","å°":"TÃ¡i1","é°":"TÃ¡i2","å¤ªå²":"TÃ ishÇ2","å¤ªå":"TÃ ishÅ«1","è°":"TÃ¡n1","è¦":"TÃ¡n2","è«":"TÃ¡n3","è°­":"TÃ¡n4","è­":"TÃ¡n5","æ±¤":"TÄng1","æ¹¯":"TÄng2","å":"TÃ¡ng3","é¶":"TÃ¡o","è¾":"TÃ©ng1","æ»":"TÃ©ng2","ç°":"TiÃ¡n","é":"TÅng1","ä½":"TÃ³ng2","ç«¥":"TÃ³ng3","é":"TÇu","æ¶":"TÃº1","å± ":"TÃº2","ä¸":"WÃ n1","è¬":"WÃ n2","æ±ª":"WÄng1","ç":"WÃ¡ng2","ä¸ä¿":"WÃ nsÃ¬","å±":"WÄi1","é¦":"WÃ©i2","é":"WÃ©i3","é":"WÄi4","å«":"WÃ¨i5","ä½":"WÃ¨i6","è¡":"WÃ¨i7","è":"WÃ¨i8","é­":"WÃ¨i9","å°è¿":"WÃ¨ichÃ­1","å°é²":"WÃ¨ichÃ­2","å¾®ç":"WÄishÄng","æº«":"WÄn1","æ¸©":"WÄn2","æ":"WÃ©n3","è":"WÃ©n4","ç¿":"WÄng","é»äºº":"WÃ©nrÃ©n1","èäºº":"WÃ©nrÃ©n2","æ²":"WÃ²","å·«":"WÅ«1","ç":"WÅ«2","é¬":"WÅ«3","é":"WÅ«4","æ¯":"WÃº5","å´":"WÃº6","å³":"WÃº7","ä¼":"WÇ8","æ­¦":"WÇ9","å·«é©¬":"WÅ«mÇ1","å·«é¦¬":"WÅ«mÇ2","ä¹ ":"XÃ­1","å¥":"XÄ«1","å¸­":"XÃ­2","é¤":"XÃ¬2","ç¿":"XÃ­3","è¢­":"XÃ­4","å¤ä¾¯":"XiÃ hÃ³u","å¼":"XiÇn1","å¸":"XiÃ¡n2","ç¸":"XiÄng1","å":"XiÃ ng2","é¡¹":"XiÃ ng3","é ":"XiÃ ng4","é²äº":"XiÄnyÃº1","é®®äº":"XiÄnyÃº2","è§":"XiÄo1","è­":"XiÄo2","è§è":"XiÄoxiÃ o","å¤":"XiÃ ","è°¢":"XiÃ¨1","è¬":"XiÃ¨2","è¥¿é¨":"XÄ«mÃ©n1","è¥¿é":"XÄ«mÃ©n2","å":"XÃ­ng1","é¢":"XÃ­ng2","å§":"XÃ¬ng3","å¹¸":"XÃ¬ng4","è¾":"XÄ«n","ç":"XiÃ³ng","è¥":"XÅ«1","é ":"XÅ«2","è®¸":"XÇ3","è¨±":"XÇ4","è½©è¾":"XuÄnyuÃ¡n1","è»è½":"XuÄnyuÃ¡n2","å®£":"XuÄn","è":"XuÄ","è":"XÃºn","å¾":"XÃº","æ®·":"YÄn01","ç":"YÄn02","é¢":"YÄn03","è¨":"YÃ¡n04","ä¸¥":"YÃ¡n05","é":"YÃ¡n06","é":"YÃ¡n07","é»":"YÃ¡n08","é¢":"YÃ¡n09","é¡":"YÃ¡n10","å´":"YÃ¡n11","æ":"YÃ n12","ç¾":"YÃ¡ng1","é³":"YÃ¡ng2","æ¬":"YÃ¡ng3","æ¨":"YÃ¡ng4","é½":"YÃ¡ng5","æ¥":"YÃ¡ng6","ä»°":"YÇng7","é¤":"YÇng8","ç¾è":"YÃ¡ngshÃ©","å§":"YÃ¡o","å¶":"YÃ¨1","è":"YÃ¨2","è¡£":"YÄ«1","ä¼":"YÄ«2","æ":"YÃ¬3","ç¾¿":"YÃ¬4","ç":"YÃ¬5","é°":"YÄ«n1","é¶":"YÃ­n2","å°¹":"YÇn3","å°":"YÃ¬n4","åº":"YÄ«ng1","æ":"YÄ«ng2","é":"YÅng","å°¤":"YÃ³u1","æ¸¸":"YÃ³u2","æ":"YÇu3","äº":"YÃº01","ä½":"YÃº02","ä¿":"YÃº03","é­":"YÃº04","è":"YÃº05","å®":"YÇ06","ç¦¹":"YÇ07","åº¾":"YÇ08","é":"YÃ¹09","å»":"YÃ¹10","é¬±":"YÃ¹11","å":"YuÃ¡n1","å":"YuÃ¡n2","è¢":"YuÃ¡n3","è":"YuÃ n4","å²³":"YuÃ¨1","è¶":"YuÃ¨2","äº":"YÃºn1","é²":"YÃºn2","å®æ":"YÇwÃ©n","æ¼":"YÅ«","å®°ç¶":"ZÇifÃ¹","å®°":"ZÇi","è§":"ZÄng","æ":"ZÄn","æ¹":"ZhÃ n1","è©¹":"ZhÄn2","å¼ ":"ZhÄng1","å¼µ":"ZhÄng2","ç« ":"ZhÄng3","ä»":"ZhÇng4","èµµ":"ZhÃ o1","è¶":"ZhÃ o2","é":"ZhÃ¨ng1","é­":"ZhÃ¨ng2","ç":"ZhÄn","æ¯":"ZhÄ«1","æ¤":"ZhÃ­2","é":"ZhÅng1","çµ":"ZhÅng2","é¾":"ZhÅng3","ä»²":"ZhÃ²ng4","ä»²é¿":"ZhÃ²ngchÃ¡ng","éç¦»":"ZhÅnglÃ­1","éé¢":"ZhÅnglÃ­2","ä»²å­":"ZhÃ²ngsÅ«n1","ä»²å­«":"ZhÃ²ngsÅ«n2","å¨":"ZhÅu","æ±":"ZhÅ«1","ç«º":"ZhÃº1","ç¥":"ZhÃ¹2","è«¸":"ZhÅ«2","åº":"ZhuÄng1","è":"ZhuÄng2","é¢å­":"ZhuÄnsÅ«n1","é¡å­«":"ZhuÄnsÅ«n2","è¯¸è":"ZhÅ«gÃ©1","è«¸è":"ZhÅ«gÃ©2","å":"ZhuÃ³","å­è½¦":"ZÇchÄ1","å­è»":"ZÇchÄ2","å­æ¡":"ZÇsÄng","å­ä¹¦":"ZÇshÅ«","è¨¾":"ZÄ«","å®æ¿":"ZÅngzhÃ¨ng","å®":"ZÅng","é¹":"ZÅu1","é":"ZÅu2","å·¦":"ZuÇ3","å·¦ä¸":"ZuÇqiÅ«","ç¥":"ZÇ"}};
ilib.data.name_zh_Hant = {"format":"{prefix}{familyName}{middleName}{givenName}{suffix}","nameStyle":"asian","conjunctions":{"and1":"è","and2":"è","or1":"æ","or2":"æ"},"prefixes":["é¦å¸­å·è¡å®","é¦å¸­è²¡åå®","é¦å¸­æè¡å®","é¦å¸­éçå®","é¦å¸­çéå®","å¤ç¥å¥³","å å¥","å å¼","å å§","å å¦¹","è¡¨å¥","è¡¨å¼","è¡¨å§","è¡¨å¦¹","å¨å®¶","ä¸å®¶","å§¥çº","å§¥çº","å¤å©","åç¶","å¬¸å¬¸","èåª½","å¬¸å¬¸","èè","èåª½","å§¨ä¸","å§¨ç¶","å§åª½","å§åª½","å§ç¶","å§ä¸","åå­","åå­","å¥³å","å¥³å","å­«å­","å­«å­","å­«å¥³","å­«å¥³","å¦¹å©¿","å«å«","å¼åª³","ä¾å­","ä¾å¥³","å¤ç¥","è","å°","å","è","è","å"],"suffixes":["é¦å¸­å·è¡å®","é¦å¸­è²¡åå®","é¦å¸­æè¡å®","é¦å¸­éçå®","é¦å¸­å·è¡å®","é¦å¸­è²¡åå®","é¦å¸­æè¡å®","é¦å¸­çéå®","ç¸½å·¥ç¨å¸«","ç¸½å·¥ç¨å¸«","é«ç´ç£å¯","æ ¼æçªå ±","æ ¼æçªå ±","å·¥ç¨å¸«","ç¸½ç¶ç","å¤ç¥å¥³","å·¥ç¨å¸«","ç¸½ç¶ç","å¸ä»¤å¡","ç¸½ç£å¯","ç¸½è­¦å¸","è²´å©¦äºº","è²´å©¦äºº","å§¥çº","å§¥çº","å§¨ç¶","å§ç¶","å­«å­","å­«å­","å­«å¥³","å­«å¥³","å¤å©","åç¶","å¬¸å¬¸","èåª½","å¬¸å¬¸","èè","èåª½","å§¨ä¸","å§åª½","å§åª½","å§ä¸","åå­","åå­","å¥³å","å¥³å","å¦¹å©¿","å«å«","å¼åª³","ä¾å­","ä¾å¥³","å¤ç¥","èå¸«","èå¸«","æ ¡é·","æ ¡é·","åå£«","ææ","å¾å¸«","å¾å¸«","æ³å®","é«ç","è­·å£«","æè¨","ç¶ç","èé","èç¸½","é¨é·","å¸é·","å±é·","èé·","å»³é·","ç§é·","èª²é·","çµé·","é«ç","è­·å£«","æè¨","ç¶ç","èé","èç¸½","é¨é·","å¸é·","å±é·","èé·","çµé·","å©ç","ç¸½è£","ç­é·","æé·","çé·","æé·","åé·","å¸«é·","è»é·","æ¿å§","ä¸å°","ä¸­å°","å¤§å°","å¤§æ ¡","ä¸­æ ¡","ä¸æ ¡","ä¸å°","ä¸­å°","å°å°","åå¸¥","ç¸½è£","ä¸»å¸­","ç­é·","è­¦å¡","è­¦é·","ç£å¯","è­¦å¸","åç","å¤ªå¤ª","å¤«å©¦","å¤«å©¦","å¤«äºº","å¥³å£«","å°å§","å¥å¥","å¼å¼","å§å§","å¦¹å¦¹","çºçº","çºçº","å¥¶å¥¶","åå","é¿å§¨","ä¼¯ç¶","ä¼¯æ¯","å å¥","å å¼","å å§","å å¦¹","è¡¨å¥","è¡¨å¼","è¡¨å§","è¡¨å¦¹","èå¸«","åª½åª½","ä¸å¸","åª½åª½","ç¸ç¸","åå­","å¥³å","ç¥ç¶","ç¥æ¯","å¤å¬","å¬¸å¬¸","èåª½","å§åª½","å§ªå­","å§ªå¥³","è¡¨å","è¡¨å¬¸","å¥¹","å·¥","ç¸½","ç¸½","ç"],"knownFamilyNames":{"æ":"Ãi","è¾":"Ãi","å®":"Än","æ":"Ão","ç½":"BÃ¡i1","ç¾":"BÇi2","ç¾é":"BÇilÇ","ç­":"BÄn","å":"BÄo1","ä¿":"BÇo2","é²":"BÃ o3","é®":"BÃ o4","æ´":"BÃ o5","å·´":"BÄ","è´":"BÃ¨i1","è²":"BÃ¨i2","è³":"BÄn","æ¯":"BÃ¬1","ç¢":"BÃ¬2","è¾¹":"BiÄn1","é":"BiÄn2","å":"BiÃ n3","å¥":"BiÃ©","é´":"BÇng","ä¼¯":"BÃ³1","è":"BÃ³2","æ":"BÃ²3","å":"BÅ­1","æ­¥":"BÃ¹2","è¡":"CÃ i","è¼":"CÄng","æ¹":"CÃ¡o","æ¾":"CÃ©ng","å²":"CÃ©n","æ´":"ChÃ¡i","å":"ChÃ¡n1","å®":"ChÃ¡n2","å¸¸":"ChÃ¡ng1","æ":"ChÄng2","ç":"ChÃ ng3","é¿å­":"ChÃ¡ngsÅ«n1","é·å­«":"ChÃ¡ngsÅ«n2","å®äº":"ChÃ¡nyÃº","æ":"ChÃ¡o1","å·¢":"ChÃ¡o2","æ¥":"ChÃ¡","è½¦":"ChÄ1","è»":"ChÄ2","æ²":"ChÃ©n1","é":"ChÃ©n2","é³":"ChÃ©n3","æ":"ChÃ©ng1","ç¨":"ChÃ©ng2","ç":"ChÃ©ng3","æ± ":"ChÃ­1","è¿":"ChÃ­2","é":"ChÄ«3","å":"ChÅng","ä»":"ChÃ³u","è¤":"ChÇ1","æ¥":"ChÇ2","å²":"ChÇ3","æ·³äº":"ChÃºnyÃº","è¤å¸":"ChÇshÄ«","ä¸":"CÃ³ng1","å¾":"CÅng2","å´":"CuÄ«","æ´":"DÃ i","å":"DÇng1","é»¨":"DÇng2","æ¾¹å°":"DÃ ntÃ¡i1","æ¾¹èº":"DÃ ntÃ¡i2","ç³":"DÃ n","è¾¾å¥":"DÃ¡xÄ«","ç¬ª":"DÃ¡","é":"DÃ¨ng1","é§":"DÃ¨ng2","ç":"DÃ­1","ç¿":"DÃ­2","å":"DiÄo","ä¸":"DÄ«ng","ç¬¬äº":"DÃ¬wÇ","é¸":"DÇ","æ±":"DÅng1","è£":"DÇng2","ä¸æ¹":"DÅngfÄng1","æ±æ¹":"DÅngfÄng2","ä¸å®«":"DÅnggÅng","ä¸é­":"DÅngguÅ1","æ±é­":"DÅngguÅ2","ä¸é":"DÅnglÇ","æ±é":"DÅngmÃ©n","çª¦":"DÃ²u1","ç«":"DÃ²u2","é½":"DÅu","ç£":"DÅ«1","å µ":"DÇ2","æ":"DÃ¹3","æ®µå¹²":"DuÃ ngÄn","ç«¯æ¨":"DuÄnmÃ¹","æ®µ":"DuÃ n","ç¬å­¤":"DÃºgÅ«","ä½´":"Ãr","é":"Ã","æ¨":"FÃ¡n1","è":"FÃ n2","æ¹":"FÄng1","æ¿":"FÃ¡ng2","æ³":"FÇ","è´¹":"FÃ¨i1","è²»":"FÃ¨i2","å°":"FÄng1","è±":"FÄng2","é":"FÄng3","å¯":"FÃ©ng4","é¦®":"FÃ©ng5","å¤":"FÃ¨ng6","é³³":"FÃ¨ng7","ä¼":"FÃº1","æ¶":"FÃº2","ç¬¦":"FÃº3","ç¦":"FÃº4","ä»":"FÃ¹5","å¯":"FÃ¹6","å":"FÃ¹7","ç":"GÃ i1","è":"GÃ i2","å¹²":"GÄn1","ç":"GÄn2","é«":"GÄo1","é":"GÃ o2","æ":"GÄ1","è":"GÃ©2","è¿":"GÄng","å¬":"GÅng1","å¼":"GÅng2","å®«":"GÅng3","å®®":"GÅng4","é¾":"GÅng5","é¾":"GÅng6","å·©":"GÇng7","é":"GÇng8","å¬ä¼¯":"GÅngbÃ³","å¬ä¹":"GÅngchÃ©ng","å¬æ·":"GÅnghÃ¹","å¬å":"GÅngjiÄn","å¬è¯":"GÅngliÃ¡ng","å¬é¨":"GÅngmÃ©n","å¬ä¸":"GÅngshÃ ng","å¬å±±":"GÅngshÄn","å¬å­":"GÅngsÅ«n1","å¬å­«":"GÅngsÅ«n2","å¬è¥¿":"GÅngxÄ«1","å¬ç":"GÅngxÄ«2","å¬ç¾":"GÅngyÃ¡ng","å¬å¶":"GÅngyÄ","å¬ä»ª":"GÅngyÃ­","å¬ç":"GÅngyÃ¹","å¬ä»²":"GÅngzhÃ²ng","å¬ç¥":"GÅngzÇ","è²¢":"GÃ²ng","å¾":"GÅu1","ç·±":"GÅu2","è":"GÇu3","å¤":"GÇ1","è°·":"GÇ2","è´¾":"GÇ3","æ»":"GÇ4","è³":"GÇ5","é¡¾":"GÃ¹6","é¡§":"GÃ¹7","å³":"GuÄn1","å®":"GuÄn2","é":"GuÄn3","å»£":"GuÇng","è´¯ä¸":"GuÃ nqiÅ«","ç®¡":"GuÇn","æ­¸":"GuÄ«1","æ¡":"GuÃ¬2","è°·æ¢":"GÇliÃ¡ng1","ç©ç²±":"GÇliÃ¡ng2","é­":"GuÅ1","å":"GuÃ³2","è¾":"GÅ«","æµ·":"HÇi","é©":"HÃ¡n1","é":"HÃ¡n2","æ­":"HÃ¡ng","é":"HÇo","å":"HÄ","ä½":"HÃ©1","å":"HÃ©2","è´º":"HÃ¨3","è³":"HÃ¨4","èµ«è¿":"HÃ¨liÃ¡n1","èµ«é£":"HÃ¨liÃ¡n2","è¡¡":"HÃ©ng","å¼":"HÃ³ng1","ç´":"HÃ³ng2","æ´ª":"HÃ³ng3","ä¾¯":"HÃ³u1","å":"HÃ²u2","å¾":"HÃ²u3","è¡":"HÃº1","æ":"HÃ¹2","å":"HuÃ¡1","è¯":"HuÃ¡2","æ·":"HuÃ¡i","æ¡":"HuÃ¡n1","å®¦":"HuÃ n2","çç«":"HuÃ¡ngfÇ","é»":"HuÃ¡ng","è±":"HuÄ","æ ":"HuÃ¬","é":"HuÃ²","å¼å»¶":"HÅ«yÃ¡n","å§¬":"JÄ«01","åµ":"JÄ«02","å":"JÃ­03","æ±²":"JÃ­04","ç±":"JÃ­05","è®¡":"JÃ¬06","çºª":"JÃ¬07","ç´":"JÃ¬08","è¨":"JÃ¬09","å­£":"JÃ¬10","è":"JÃ¬11","æ¨":"JÃ¬12","å":"JÃ¬13","å®¶":"JiÄ1","é":"JiÃ¡2","å¤¹è°·":"JiÄgÇ1","å¤¾è°·":"JiÄgÇ2","ç®":"JiÇn1","ç°¡":"JiÇn2","æ±":"JiÄng1","å§":"JiÄng2","è":"JiÇng3","è£":"JiÇng4","ç¦":"JiÄo","æ­":"JiÄ1","è§£":"JiÄ2","å³å¢¨":"JÃ­mÃ²","æ":"JÃ¬n1","æ":"JÃ¬n2","é³":"JÃ¬n3","è":"JÄ«ng1","è":"JÄ«ng2","ç¶":"JÄ«ng3","äº":"JÇng4","æ¯":"JÇng5","é":"JÄ«n","é ":"JÅ«1","ç¿":"JÃ¹2","å±":"JÅ«","åº·":"KÄng1","äº¢":"KÃ ng2","é":"KÃ n","æ¯":"KÄ","ç©º":"KÅng1","å­":"KÇng2","å¯":"KÃ²u","è¯":"KuÇi","å¡":"KuÄng1","æ³":"KuÃ ng2","å¤":"KuÃ­","è":"La1","è":"La2","æ¥":"LÃ¡i1","èµ":"LÃ i2","è³´":"LÃ i3","é":"LÃ¡ng","å°":"LÃ¡n","å":"LÃ¡o","ä¹":"LÃ¨1","æ¨":"LÃ¨2","é·":"LÃ©i","å·":"LÄng","ä¹æ­£":"LÃ¨zhÄng1","æ¨æ­£":"LÃ¨zhÄng2","é»":"LÃ­1","æ":"LÇ2","å©":"LÃ¬3","æ ":"LÃ¬4","å²":"LÃ¬5","é":"LÃ¬6","è¿":"LiÃ¡n1","é£":"LiÃ¡n2","å»":"LiÃ¡n3","æ¢ä¸":"LiÃ¡ngqiÅ«","æ¢":"LiÃ¡ng","ç»":"LiÃ n","å»":"LiÃ o","æ":"LÃ­n1","èº":"LÃ¬n2","ä»¤ç":"LÃ¬nghÃº","å":"LÃ­ng","å":"LiÃº1","å":"LiÃº2","æ³":"LiÇ3","é":"LiÃ¹4","é¸":"LiÃ¹5","é¾":"LÃ³ng1","é¾":"LÃ³ng2","é":"LÅng3","å¨":"LÃ³u1","å©":"LÃ³u2","å¢":"LÃº01","è¦":"LÃº02","ç§":"LÃº03","é²":"LÇ04","é­¯":"LÇ05","ç¥¿":"lÃ¹06","é¯":"LÃ¹07","è·¯":"LÃ¹08","å":"LÇ09","å":"LÇ10","æ ¾":"LuÃ¡n1","æ¬":"LuÃ¡n2","ç½":"LuÅ1","éª":"LuÃ²1","ç¾":"LuÃ³2","é§±":"LuÃ²2","é¾ä¸":"LÇqiÅ«1","é­ä¸":"LÇqiÅ«2","éº»":"MÃ¡1","é©¬":"MÇ2","é¦¬":"MÇ3","éº¦":"MÃ i","æ»¿":"MÇn","æ¯":"MÃ¡o1","è":"MÃ¡o2","æ¢":"MÃ©i","è":"MÄng1","å­":"MÃ¨ng2","ç³":"MÃ­1","ç±³":"MÇ2","å®":"MÃ¬3","è":"MiÃ¡o1","ç¼ª":"MiÃ o2","ç¹":"MiÃ o3","ä¹":"MiÄ","éµ":"MÇn1","é":"MÇn2","æ":"MÃ­ng","è«":"MÃ²1","å¢¨":"MÃ²2","ç":"MÃ³u","æ¨":"MÃ¹1","ç§":"MÃ¹2","æ":"MÃ¹3","ç©":"MÃ¹4","æå®¹":"MÃ¹rÃ³ng","åå®«":"NÃ¡ngÅng1","åå®®":"NÃ¡ngÅng2","åé¨":"NÃ¡nmÃ©n1","åé":"NÃ¡nmÃ©n2","åè£":"NÃ¡nrÃ³ng","é":"NÃ¡o","é£":"NÇ","è½":"NÃ©ng","å¹´":"NiÃ¡n","è":"NiÃ¨1","è¶":"NiÃ¨2","å®":"NÃ­ng1","å¯§":"NÃ­ng2","ç":"NiÃº1","é":"NiÇ2","åª":"NÃ­","è¾²":"NÃ³ng","æ¬§":"Åu1","æ­":"Åu2","æ¬§é³":"ÅuyÃ¡ng1","æ­é½":"ÅuyÃ¡ng2","åº":"PÃ¡ng1","é":"PÃ¡ng2","é¾":"PÃ¡ng3","æ½":"PÄn","è£´":"PÃ©i","å½­":"PÃ©ng1","è¬":"PÃ©ng2","å¹³":"PÃ­ng","ç®":"PÃ­","æ¿®":"PÃº1","è²":"PÃº2","æµ¦":"PÇ3","æ¿®é³":"PÃºyÃ¡ng1","æ¿®é½":"PÃºyÃ¡ng2","ç¥":"QÃ­1","é½":"QÃ­2","é½":"QÃ­3","é±":"QiÃ¡n1","é¢":"QiÃ¡n2","å¼º":"QiÃ¡ng1","å¼·":"QiÃ¡ng2","ä¹":"QiÃ¡o1","å¬":"QiÃ¡o2","è­":"QiÃ¡o3","æ¼é":"QÄ«diÄo","äºå®":"QÃ­guÄn","æ¬½":"QÄ«n1","ç§¦":"QÃ­n2","ç´":"QÃ­n3","ä¸":"QiÅ«1","é±":"QiÅ«2","ç§":"QiÅ«3","è£":"QiÃº4","æ":"QÄ«","æ²":"QÅ«1","å±":"QÅ«2","ç©":"QÃº3","éº´":"QÃº4","å¨":"QuÃ¡n1","æ¬":"QuÃ¡n2","é":"QuÄ","å£¤é©·":"RÇngsÃ¬1","å£¤é§":"RÇngsÃ¬2","å":"RÇn","é¥":"RÃ¡o","ä»»":"RÃ¨n","æ":"RÃ³ng1","å®¹":"RÃ³ng2","æ¦®":"RÃ³ng3","è":"RÃ³ng4","è¹":"RÃº1","æ±":"RÇ2","é®":"RuÇn","è®":"RuÃ¬","æ¡":"SÄng","å":"ShÄng1","è³":"ShÇng2","å°":"ShÃ ng3","ä¸å®":"ShÃ ngguÄn","å±±":"ShÄn","é¶":"ShÃ¡o1","éµ":"ShÃ o2","æ²":"ShÄ","ä½":"ShÃ©1","å":"ShÃ¨2","ç³":"ShÄn1","è":"ShÄn2","æ":"ShÃ¨n3","ç³å± ":"ShÄntÃº","å¸«":"ShÄ«1","æ½":"ShÄ«2","æ¶":"ShÃ­3","æ":"ShÃ­4","å²":"ShÇ5","å£½":"ShÃ²u","æ®³":"ShÅ«1","è":"ShÅ«2","æ":"ShÃ¹3","å¸¥":"ShuÃ i","é":"ShuÄng","æ°´":"ShuÇ","å¸ç©º":"SÄ«kÅng","å¸å¯":"SÄ«kÃ²u","å¸é©¬":"SÄ«mÇ1","å¸é¦¬":"SÄ«mÇ2","å¸å¾":"SÄ«tÃº","å¸":"SÄ«","æ¾":"SÅng1","å®":"SÃ²ng2","è":"SÅ«1","è":"SÅ«2","é":"SuÃ­","å­":"SÅ«n1","å­«":"SÅ«n2","ç´¢":"SuÇ","å®¿":"SÃ¹","ææ":"TÃ bÃ¡1","æè·":"TÃ bÃ¡2","å°":"TÃ¡i1","é°":"TÃ¡i2","å¤ªå²":"TÃ ishÇ2","å¤ªå":"TÃ ishÅ«1","è°":"TÃ¡n1","è¦":"TÃ¡n2","è«":"TÃ¡n3","è°­":"TÃ¡n4","è­":"TÃ¡n5","æ±¤":"TÄng1","æ¹¯":"TÄng2","å":"TÃ¡ng3","é¶":"TÃ¡o","è¾":"TÃ©ng1","æ»":"TÃ©ng2","ç°":"TiÃ¡n","é":"TÅng1","ä½":"TÃ³ng2","ç«¥":"TÃ³ng3","é":"TÇu","æ¶":"TÃº1","å± ":"TÃº2","ä¸":"WÃ n1","è¬":"WÃ n2","æ±ª":"WÄng1","ç":"WÃ¡ng2","ä¸ä¿":"WÃ nsÃ¬","å±":"WÄi1","é¦":"WÃ©i2","é":"WÃ©i3","é":"WÄi4","å«":"WÃ¨i5","ä½":"WÃ¨i6","è¡":"WÃ¨i7","è":"WÃ¨i8","é­":"WÃ¨i9","å°è¿":"WÃ¨ichÃ­1","å°é²":"WÃ¨ichÃ­2","å¾®ç":"WÄishÄng","æº«":"WÄn1","æ¸©":"WÄn2","æ":"WÃ©n3","è":"WÃ©n4","ç¿":"WÄng","é»äºº":"WÃ©nrÃ©n1","èäºº":"WÃ©nrÃ©n2","æ²":"WÃ²","å·«":"WÅ«1","ç":"WÅ«2","é¬":"WÅ«3","é":"WÅ«4","æ¯":"WÃº5","å´":"WÃº6","å³":"WÃº7","ä¼":"WÇ8","æ­¦":"WÇ9","å·«é©¬":"WÅ«mÇ1","å·«é¦¬":"WÅ«mÇ2","ä¹ ":"XÃ­1","å¥":"XÄ«1","å¸­":"XÃ­2","é¤":"XÃ¬2","ç¿":"XÃ­3","è¢­":"XÃ­4","å¤ä¾¯":"XiÃ hÃ³u","å¼":"XiÇn1","å¸":"XiÃ¡n2","ç¸":"XiÄng1","å":"XiÃ ng2","é¡¹":"XiÃ ng3","é ":"XiÃ ng4","é²äº":"XiÄnyÃº1","é®®äº":"XiÄnyÃº2","è§":"XiÄo1","è­":"XiÄo2","è§è":"XiÄoxiÃ o","å¤":"XiÃ ","è°¢":"XiÃ¨1","è¬":"XiÃ¨2","è¥¿é¨":"XÄ«mÃ©n1","è¥¿é":"XÄ«mÃ©n2","å":"XÃ­ng1","é¢":"XÃ­ng2","å§":"XÃ¬ng3","å¹¸":"XÃ¬ng4","è¾":"XÄ«n","ç":"XiÃ³ng","è¥":"XÅ«1","é ":"XÅ«2","è®¸":"XÇ3","è¨±":"XÇ4","è½©è¾":"XuÄnyuÃ¡n1","è»è½":"XuÄnyuÃ¡n2","å®£":"XuÄn","è":"XuÄ","è":"XÃºn","å¾":"XÃº","æ®·":"YÄn01","ç":"YÄn02","é¢":"YÄn03","è¨":"YÃ¡n04","ä¸¥":"YÃ¡n05","é":"YÃ¡n06","é":"YÃ¡n07","é»":"YÃ¡n08","é¢":"YÃ¡n09","é¡":"YÃ¡n10","å´":"YÃ¡n11","æ":"YÃ n12","ç¾":"YÃ¡ng1","é³":"YÃ¡ng2","æ¬":"YÃ¡ng3","æ¨":"YÃ¡ng4","é½":"YÃ¡ng5","æ¥":"YÃ¡ng6","ä»°":"YÇng7","é¤":"YÇng8","ç¾è":"YÃ¡ngshÃ©","å§":"YÃ¡o","å¶":"YÃ¨1","è":"YÃ¨2","è¡£":"YÄ«1","ä¼":"YÄ«2","æ":"YÃ¬3","ç¾¿":"YÃ¬4","ç":"YÃ¬5","é°":"YÄ«n1","é¶":"YÃ­n2","å°¹":"YÇn3","å°":"YÃ¬n4","åº":"YÄ«ng1","æ":"YÄ«ng2","é":"YÅng","å°¤":"YÃ³u1","æ¸¸":"YÃ³u2","æ":"YÇu3","äº":"YÃº01","ä½":"YÃº02","ä¿":"YÃº03","é­":"YÃº04","è":"YÃº05","å®":"YÇ06","ç¦¹":"YÇ07","åº¾":"YÇ08","é":"YÃ¹09","å»":"YÃ¹10","é¬±":"YÃ¹11","å":"YuÃ¡n1","å":"YuÃ¡n2","è¢":"YuÃ¡n3","è":"YuÃ n4","å²³":"YuÃ¨1","è¶":"YuÃ¨2","äº":"YÃºn1","é²":"YÃºn2","å®æ":"YÇwÃ©n","æ¼":"YÅ«","å®°ç¶":"ZÇifÃ¹","å®°":"ZÇi","è§":"ZÄng","æ":"ZÄn","æ¹":"ZhÃ n1","è©¹":"ZhÄn2","å¼ ":"ZhÄng1","å¼µ":"ZhÄng2","ç« ":"ZhÄng3","ä»":"ZhÇng4","èµµ":"ZhÃ o1","è¶":"ZhÃ o2","é":"ZhÃ¨ng1","é­":"ZhÃ¨ng2","ç":"ZhÄn","æ¯":"ZhÄ«1","æ¤":"ZhÃ­2","é":"ZhÅng1","çµ":"ZhÅng2","é¾":"ZhÅng3","ä»²":"ZhÃ²ng4","ä»²é¿":"ZhÃ²ngchÃ¡ng","éç¦»":"ZhÅnglÃ­1","éé¢":"ZhÅnglÃ­2","ä»²å­":"ZhÃ²ngsÅ«n1","ä»²å­«":"ZhÃ²ngsÅ«n2","å¨":"ZhÅu","æ±":"ZhÅ«1","ç«º":"ZhÃº1","ç¥":"ZhÃ¹2","è«¸":"ZhÅ«2","åº":"ZhuÄng1","è":"ZhuÄng2","é¢å­":"ZhuÄnsÅ«n1","é¡å­«":"ZhuÄnsÅ«n2","è¯¸è":"ZhÅ«gÃ©1","è«¸è":"ZhÅ«gÃ©2","å":"ZhuÃ³","å­è½¦":"ZÇchÄ1","å­è»":"ZÇchÄ2","å­æ¡":"ZÇsÄng","å­ä¹¦":"ZÇshÅ«","è¨¾":"ZÄ«","å®æ¿":"ZÅngzhÃ¨ng","å®":"ZÅng","é¹":"ZÅu1","é":"ZÅu2","å·¦":"ZuÇ3","å·¦ä¸":"ZuÇqiÅ«","ç¥":"ZÇ"}};
ilib.data.name_zxx = {"prefixes":["rep","representative","senator","congressman","congresswoman","president","vice president","vice-president","mp","member of parliament","chief","justice","chief justice","judge","minister","prime minister","governor general","lieutenant governor","speaker of the house of commons","speaker of the house","speaker of the senate","supreme court justice","secretary of state","mayor","justice of the peace","emporer","chairman","chairwoman","alderman","general secretary","ambassador","minister","cardinal","bishop","archbishop","rabbi","grand rabbi","mulah","mullah","canon","cantor","pastor","ps","monsignor","mgsr","pope","chef","master","coach","professor","prof","nobel laureate","king","queen","prince","princess","crown prince","crown princess","marquess","marchioness","earl","countess","count","archduke","duke","duchess","baron","baroness","viscount","private","private first class","corporal","sargeant","staff sargeant","sargeant first class","master sargeant","first sargeant","sargeant major","command sargeant major","sargeant major of the army","pv1","pv2","pfc","spc","cpl","sgt","ssg","sfc","msg","1sg","sgm","csm","sma","warrant officer","chief warrant officer","second lieutenant","first lieutenant","captain","major","lieutenant colonel","colonel","brigadier general","major general","lieutenant general","general","2lt","1lt","cpt","maj","ltc","col","bg","mg","ltg","gen","general of the army","fleet admiral","admiral","vice admiral","rear admiral","commander","lieutenant commander","lieutenant","lieutenant (junior grade)","ensign","fadm","adm","vadm","radm","rdml","capt","cdr","lcdr","lt","ltjg","ens","petty officer","petty officer first class","petty officer second class","petty officer third class","petty officer 1st class","petty officer 2nd class","petty officer 3rd class","po","po1","po2","po3","chief petty officer","senior chief petty officer","master chief petty officer","cpo","scpo","mcpo","command master chief petty officer","fleet master chief petty officer","force master chief petty officer","cmdcm","fltcm","forcm","master chief petty officer of the navy","mcpon","sergeant major of the marine corps","master gunnery sergeant","gunnery sergeant","lance corporal","sgtmaj","mgysgt","1stsgt","msgt","gysgt","ssgt","sgt","cpl","lcpl","pfc","pvt","airman basic","airman","airman first class","senior airman","technical sergeant","master sergeant","senior master sergeant","chief master sergeant","command chief master sergeant","chief master sergeant of the air force","ab","amn","a1c","sra","tsgt","msgt","smsgt","cmsgt","ccm","cmsaf","field marshal","brigadier","officer cadet","fm","lt gen","maj gen","brig","col","lt col","maj","capt","lt","2lt","ocdt","admiral of the fleet","marshal","marshal of the air force","air marshal","commodore","air commodore","group captain","lieutenant colonel","lt colonel","wing commander","lt commander","commandant","squadron leader","flight lieutenant","sub-lieutenant","flying officer","ensign","second lieutenant","2nd lieutenant","pilot officer","midshipman","warrant officer","leading seaman","seaman","aircraftman","midshipwoman","leading seawoman","seawoman","aircraftwoman","vice-admiral","vadm","lieutenant-general","lgen","rear-admiral","radm","major-general","mgen","brigadier-general","bgen","lieutenant-colonel","lcol","naval cadet","ncdt","able seaman","ab","ordinary seaman","os","pte","master bombardier","trooper","bombardier","sapper","signalman","craftsman","guardsman","rifleman","fusilier","chief of police","police commissioner","superintendent","sheriff","deputy chief of police","deputy commissioner","deputy superintendent","undersheriff","deputy sheriff","inspector","deputy inspector","detective","investigator","officer","deputy sheriff","constable","police constable","chief superintendent","assistant chief constable","deputy chief constable","chief constable","assistant commissioner","deputy commissioner","detective constable","staff inspector","staff superintendent","station duty officer","auxiliary sergeant","senior constable","cadet","probationary constable","recruit","sir","lady","lord","dame","his royal highness","hrh","his honour","his honor","maestro","his lordship","his majesty","his worship","the right worshipful","the worshipful","the honourable","the right honourable","the honorable","the right honorable","the hon","the most noble","the most honourable","the most honorable","the most hon","the rt hon","the right honourable and learned","the right honourable and gallant","the much honoured","the right honorable and learned","the right honorable and gallant","the much honored","the much hon","her royal highness","her honour","her honor","her majesty","her worship","his excellency","her excellency","his serene highness","her serene highness","his most reverend excellency","her most reverend excellency","his holiness","hh","his all holiness","hah","his beatitude","his eminence","he","his beatitude and eminence","father","mother","brother","br","sister","reverend","rev","the most reverend","the most rev","his grace","the right reverend","the rt rev","the most reverend and right honourable","the most reverend and right honorable","the most rev and rt hon","the right reverend and right honourable monsignor","the right reverend and right honorable monsignor","the rt rev and rt hon mgr","the right reverend and right honourable","the right reverend and right honorable","the very reverend","the very rev","the reverend monsignor","the rev msgr","the venerable","venerable","ven","his imperial majesty","his imperial and royal majesty","his apostolic majesty","his catholic majesty","his most faithful majesty","his imperial highness","his imperial and royal highness","his royal highness","his grand ducal highness","his highness","his ducal serene highness","his serene highness","his illustrious highness","his highborn","his grace","his high well-born","his excellency","his high excellency","her imperial majesty","her imperial and royal majesty","her apostolic majesty","her catholic majesty","her most faithful majesty","her imperial highness","her imperial and royal highness","her royal highness","her grand ducal highness","her highness","her ducal serene highness","her serene highness","her illustrious highness","her highborn","her grace","her high well-born","her excellency","her high excellency","him","hi&rm","ham","hcm","hfm","hih","hi&rh","hrh","hgdh","hh","hdsh","hsh","hillh","he","the","and","or","aunt","uncle","grandma","grandpa","granma","grampa","cousin"],"suffixes":["junior","jr","senior","sr","i","iii","iii","iv","v","vi","vii","viii","ix","x","2nd","3rd","4th","5th","6th","7th","8th","9th","10th","esquire","esq","jd","phd","md","ddm","dds","dmv","bvsc","ah","bsc","ba","ret","retired"]};
/*
 * nameprs.js - Person name parser
 *
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
ilibglobal.js 
locale.js
util/utils.js 
ctype.isalpha.js 
ctype.isideo.js 
ctype.ispunct.js 
ctype.isspace.js
util/jsutils.js 
*/

// !data name

// notes:
// icelandic given names: http://en.wiktionary.org/wiki/Appendix:Icelandic_given_names
// danish approved given names: http://www.familiestyrelsen.dk/samliv/navne/
// http://www.mentalfloss.com/blogs/archives/59277
// other countries with first name restrictions: Norway, China, New Zealand, Japan, Sweden, Germany, Hungary

/**
 * @class
 * A class to parse names of people. Different locales have different conventions when it
 * comes to naming people.<p>
 *
 * The options can contain any of the following properties:
 *
 * <ul>
 * <li><i>locale</i> - use the rules and conventions of the given locale in order to parse
 * the name
 * <li><i>style</i> - explicitly use the named style to parse the name. Valid values so
 * far are "western" and "asian". If this property is not specified, then the style will
 * be gleaned from the name itself. This class will count the total number of Latin or Asian
 * characters. If the majority of the characters are in one style, that style will be
 * used to parse the whole name.
 * <li><i>order</i> - explicitly use the given order for names. In some locales, such
 * as Russian, names may be written equally validly as "givenName familyName" or "familyName
 * givenName". This option tells the parser which order to prefer, and overrides the
 * default order for the locale. Valid values are "gf" (given-family) or "fg" (family-given).
 * <li><i>useSpaces</i> - explicitly specifies whether to use spaces or not between the given name , middle name
 * and family name.
 * <li>onLoad - a callback function to call when the name info is fully
 * loaded and the name has been parsed. When the onLoad option is given, the name object
 * will attempt to load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 *
 * <li>sync - tell whether to load any missing locale data synchronously or
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 *
 * When the parser has completed its parsing, it fills in the fields listed below.<p>
 *
 * For names that include auxilliary words, such as the family name "van der Heijden", all
 * of the auxilliary words ("van der") will be included in the field.<p>
 *
 * For names in Spanish locales, it is assumed that the family name is doubled. That is,
 * a person may have a paternal family name followed by a maternal family name. All
 * family names will be listed in the familyName field as normal, separated by spaces.
 * When formatting the short version of such names, only the paternal family name will
 * be used.
 *
 * Depends directive: !depends nameprs.js
 *
 * @constructor
 * @param {string|ilib.Name=} name the name to parse
 * @param {Object=} options Options governing the construction of this name instance
 */
ilib.Name = function (name, options) {
    var sync = true;

    if (typeof (name) === 'object') {
        // copy constructor
        /**
         * The prefixes for this name
         * @type string
         */
        this.prefix = name.prefix;
        /**
         * The given (personal) name in this name.
         * @type string
         */
        this.givenName = name.givenName;
        /**
         * The middle names used in this name. If there are multiple middle names, they all
         * appear in this field separated by spaces.
         * @type string
         */
        this.middleName = name.middleName;
        /**
         * The family names in this name. If there are multiple family names, they all
         * appear in this field separated by spaces.
         * @type string
         */
        this.familyName = name.familyName;
        /**
         * The suffixes for this name. If there are multiple suffixes, they all
         * appear in this field separated by spaces.
         * @type string
         */
        this.suffix = name.suffix;

        // private properties
        this.locale = name.locale;
        this.style = name.style;
        this.order = name.order;
        this.useSpaces = name.useSpaces;
        return;
    }

    this.loadParams = {};

    if (options) {
        if (options.locale) {
            this.locale = (typeof (options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
        }

        if (options.style && (options.style === "asian" || options.style === "western")) {
            this.style = options.style;
        }

        if (options.order && (options.order === "gmf" || options.order === "fmg" || options.order === "fgm")) {
            this.order = options.order;
        }

        if (typeof (options.sync) !== 'undefined') {
            sync = (options.sync == true);
        }

        if (typeof (options.loadParams) !== 'undefined') {
            this.loadParams = options.loadParams;
        }
    }

    if (!ilib.Name.cache) {
        ilib.Name.cache = {};
    }

	this.locale = this.locale || new ilib.Locale();
	
	ilib.CType.isAlpha._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
		ilib.CType.isIdeo._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
			ilib.CType.isPunct._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
				ilib.CType.isSpace._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
					ilib.loadData({
						object: ilib.Name, 
						locale: this.locale, 
						name: "name.json", 
						sync: sync, 
						loadParams: this.loadParams, 
						callback: ilib.bind(this, function (info) {
							if (!info) {
								info = ilib.Name.defaultInfo;
								var spec = this.locale.getSpec().replace(/-/g, "_");
								ilib.Name.cache[spec] = info;
							}
							/** 
							 * @type {{
							 *   nameStyle:string,
							 *   order:string,
							 *   prefixes:Array.<string>,
							 *   suffixes:Array.<string>,
							 *   auxillaries:Array.<string>,
							 *   knownFamilyNames:Array.<string>,
							 *   noCompoundFamilyNames:boolean,
							 *   sortByHeadWord:boolean
							 * }} */
							this.info = info;
							this._init(name);
							if (options && typeof(options.onLoad) === 'function') {
								options.onLoad(this);
							}
						})
					});					
				}));
			}));
		}));
	}));
};

ilib.Name.defaultInfo = ilib.data.name ||  {
	"components": {
		"short": {
			"g": 1,
			"f": 1
		},
		"medium": {
			"g": 1,
			"m": 1,
			"f": 1
		},
		"long": {
			"p": 1,
			"g": 1,
			"m": 1,
			"f": 1
		},
		"full": {
			"p": 1,
			"g": 1,
			"m": 1,
			"f": 1,
			"s": 1
		}
	},
	"format": "{prefix} {givenName} {middleName} {familyName}{suffix}",
	"sortByHeadWord": false,
	"nameStyle": "western",
	"conjunctions": {
		"and1": "and",
		"and2": "and",
		"or1": "or",
		"or2": "or"
	},
	"auxillaries": {
		"von": 1,
		"von der": 1,
		"von den": 1,
		"van": 1,
		"van der": 1,
        "van de": 1,
        "van den": 1,
        "de": 1,
        "di": 1,
	    "de": 1,
		"la": 1,
		"lo": 1,
        "des": 1,
        "le": 1,
        "les": 1,
		"du": 1,
        "de la": 1,
        "del": 1,
        "de los": 1,
        "de las": 1
	},
	"prefixes": [
		"doctor",
		"dr",
		"mr",
		"mrs",
		"ms",
		"mister",
		"madame",
		"madamoiselle",
		"miss",
		"monsieur",
		"seÃ±or",
        "seÃ±ora",
        "seÃ±orita"
	],
	"suffixes": [
		",",
		"junior",
		"jr",
		"senior",
		"sr",
		"i",
		"ii",
		"iii",
		"esq",
		"phd",
		"md"
	]
};

/**
 * Return true if the given character is in the range of the Han, Hangul, or kana
 * scripts.
 * @static
 * @protected
 */
ilib.Name._isAsianChar = function(c) {
	return ilib.CType.isIdeo(c) ||
		ilib.CType.withinRange(c, "hangul") ||
		ilib.CType.withinRange(c, "hiragana") ||
		ilib.CType.withinRange(c, "katakana");
};


/**
 * @static
 * @protected
 */
ilib.Name._isAsianName = function (name) {
    // the idea is to count the number of asian chars and the number
    // of latin chars. If one is greater than the other, choose
    // that style.
    var asian = 0,
        latin = 0,
        i;

    if (name && name.length > 0) {
        for (i = 0; i < name.length; i++) {
        	var c = name.charAt(i);
             
            if (ilib.Name._isAsianChar(c)) {
                asian++;
            } else if (ilib.CType.isAlpha(c)) {
                latin++;
            }
        }

        return latin < asian;
    }

    return false;
};

/**
 * Return true if any Latin letters are found in the string. Return
 * false if all the characters are non-Latin.
 * @static
 * @protected
 */
ilib.Name._isEuroName = function (name) {
    var c,
        n = new ilib.String(name),
        it = n.charIterator();

    while (it.hasNext()) {
        c = it.next();

        if (!ilib.Name._isAsianChar(c) && !ilib.CType.isPunct(c) && !ilib.CType.isSpace(c)) {
            return true;
        }
    }

    return false;
};

ilib.Name.prototype = {
    /**
     * @protected
     */
    _init: function (name) {
        var parts, prefixArray, prefix, prefixLower,
            suffixArray, suffix, suffixLower,
            asianName, i, info, hpSuffix;

        if (name) {
            // for DFISH-12905, pick off the part that the LDAP server automatically adds to our names in HP emails
            i = name.search(/\s*[,\(\[\{<]/);
            if (i !== -1) {
                hpSuffix = name.substring(i);
                hpSuffix = hpSuffix.replace(/\s+/g, ' '); // compress multiple whitespaces
                suffixArray = hpSuffix.split(" ");
                var conjunctionIndex = this._findLastConjunction(suffixArray);
                if (conjunctionIndex > -1) {
                    // it's got conjunctions in it, so this is not really a suffix
                    hpSuffix = undefined;
                } else {
                    name = name.substring(0, i);
                }
            }

            if (this.info.nameStyle === "asian" || this.info.order === "fmg" || this.info.order === "fgm") {
                asianName = !ilib.Name._isEuroName(name);
                info = asianName ? this.info : ilib.data.name;
            } else {
                asianName = ilib.Name._isAsianName(name);
                info = asianName ? ilib.data.name : this.info;
            }

            if (asianName) {
                // all-asian names
                if (this.useSpaces == false) {
                    name = name.replace(/\s+/g, ''); // eliminate all whitespaces
                }
                parts = name.trim().split('');
            }
            //} 
            else {
                name = name.replace(/, /g, ' , ');
                name = name.replace(/\s+/g, ' '); // compress multiple whitespaces
                parts = name.trim().split(' ');
            }

            // check for prefixes
            if (parts.length > 1) {
                for (i = parts.length; i > 0; i--) {
                    prefixArray = parts.slice(0, i);
                    prefix = prefixArray.join(asianName ? '' : ' ');
                    prefixLower = prefix.toLowerCase();
                    prefixLower = prefixLower.replace(/[,\.]/g, ''); // ignore commas and periods
                    if (this.info.prefixes &&
                        (this.info.prefixes.indexOf(prefixLower) > -1 || this._isConjunction(prefixLower))) {
                        if (this.prefix) {
                            if (!asianName) {
                                this.prefix += ' ';
                            }
                            this.prefix += prefix;
                        } else {
                            this.prefix = prefix;
                        }
                        parts = parts.slice(i);
                        i = parts.length;
                    }
                }
            }
            // check for suffixes
            if (parts.length > 1) {
                for (i = parts.length; i > 0; i--) {
                    suffixArray = parts.slice(-i);
                    suffix = suffixArray.join(asianName ? '' : ' ');
                    suffixLower = suffix.toLowerCase();
                    suffixLower = suffixLower.replace(/[\.]/g, ''); // ignore periods
                    if (this.info.suffixes && this.info.suffixes.indexOf(suffixLower) > -1) {
                        if (this.suffix) {
                            if (!asianName && !ilib.CType.isPunct(this.suffix.charAt(0))) {
                                this.suffix = ' ' + this.suffix;
                            }
                            this.suffix = suffix + this.suffix;
                        } else {
                            this.suffix = suffix;
                        }
                        parts = parts.slice(0, parts.length - i);
                        i = parts.length;
                    }
                }
            }

            if (hpSuffix) {
                this.suffix = (this.suffix && this.suffix + hpSuffix) || hpSuffix;
            }

            // adjoin auxillary words to their headwords
            if (parts.length > 1 && !asianName) {
                parts = this._joinAuxillaries(parts, asianName);
            }

            if (asianName) {
                this._parseAsianName(parts);
            } else {
                this._parseWesternName(parts);
            }

            this._joinNameArrays();
        }
    },

    /**
	 * @return {number} 
	 *
	_findSequence: function(parts, hash, isAsian) {
		var sequence, sequenceLower, sequenceArray, aux = [], i, ret = {};
		
		if (parts.length > 0 && hash) {
			//console.info("_findSequence: finding sequences");
			for (var start = 0; start < parts.length-1; start++) {
				for ( i = parts.length; i > start; i-- ) {
					sequenceArray = parts.slice(start, i);
					sequence = sequenceArray.join(isAsian ? '' : ' ');
					sequenceLower = sequence.toLowerCase();
					sequenceLower = sequenceLower.replace(/[,\.]/g, '');  // ignore commas and periods
					
					//console.info("_findSequence: checking sequence: '" + sequenceLower + "'");
					
					if ( sequenceLower in hash ) {
						ret.match = sequenceArray;
						ret.start = start;
						ret.end = i;
						return ret;
						//console.info("_findSequence: Found sequence '" + sequence + "' New parts list is " + JSON.stringify(parts));
					}
				}
			}
		}
	
		return undefined;
	},
	*/

    /**
     * @protected
     * @param {Array} parts
     * @param {Array} names
     * @param {boolean} isAsian
     * @param {boolean=} noCompoundPrefix
     */
    _findPrefix: function (parts, names, isAsian, noCompoundPrefix) {
        var i, prefix, prefixLower, prefixArray, aux = [];

        if (parts.length > 0 && names) {
            for (i = parts.length; i > 0; i--) {
                prefixArray = parts.slice(0, i);
                prefix = prefixArray.join(isAsian ? '' : ' ');
                prefixLower = prefix.toLowerCase();
                prefixLower = prefixLower.replace(/[,\.]/g, ''); // ignore commas and periods

                if (prefixLower in names) {
                    aux = aux.concat(isAsian ? prefix : prefixArray);
                    if (noCompoundPrefix) {
                    	// don't need to parse further. Just return it as is.
                    	return aux;
                    }
                    parts = parts.slice(i);
                    i = parts.length + 1;
                }
            }
        }

        return aux;
    },

    /**
     * @protected
     */
    _findSuffix: function (parts, names, isAsian) {
        var i, j, seq = "";

        for (i = 0; i < names.length; i++) {
            if (parts.length >= names[i].length) {
                j = 0;
                while (j < names[i].length && parts[parts.length - j] === names[i][names[i].length - j]) {
                    j++;
                }
                if (j >= names[i].length) {
                    seq = parts.slice(parts.length - j).join(isAsian ? "" : " ") + (isAsian ? "" : " ") + seq;
                    parts = parts.slice(0, parts.length - j);
                    i = -1; // restart the search
                }
            }
        }

        this.suffix = seq;
        return parts;
    },

    /**
     * @protected
     * Tell whether or not the given word is a conjunction in this language.
     * @param {string} word the word to test
     * @return {boolean} true if the word is a conjunction
     */
    _isConjunction: function _isConjunction(word) {
        return (this.info.conjunctions.and1 === word ||
            this.info.conjunctions.and2 === word ||
            this.info.conjunctions.or1 === word ||
            this.info.conjunctions.or2 === word ||
            ("&" === word) ||
            ("+" === word));
    },

    /**
     * Find the last instance of 'and' in the name
     * @protected
     * @param {Array.<string>} parts
     * @return {number}
     */
    _findLastConjunction: function _findLastConjunction(parts) {
        var conjunctionIndex = -1,
            index, part;

        for (index = 0; index < parts.length; index++) {
            part = parts[index];
            if (typeof (part) === 'string') {
                part = part.toLowerCase();
                // also recognize English
                if ("and" === part || "or" === part || "&" === part || "+" === part) {
                    conjunctionIndex = index;
                }
                if (this._isConjunction(part)) {
                    conjunctionIndex = index;
                }
            }
        }
        return conjunctionIndex;
    },

    /**
     * @protected
     * @param {Array.<string>} parts the current array of name parts
     * @param {boolean} isAsian true if the name is being parsed as an Asian name
     * @return {Array.<string>} the remaining parts after the prefixes have been removed
     */
    _extractPrefixes: function (parts, isAsian) {
        var i = this._findPrefix(parts, this.info.prefixes, isAsian);
        if (i > 0) {
            this.prefix = parts.slice(0, i).join(isAsian ? "" : " ");
            return parts.slice(i);
        }
        // prefixes not found, so just return the array unmodified
        return parts;
    },

    /**
     * @protected
     * @param {Array.<string>} parts the current array of name parts
     * @param {boolean} isAsian true if the name is being parsed as an Asian name
     * @return {Array.<string>} the remaining parts after the suffices have been removed
     */
    _extractSuffixes: function (parts, isAsian) {
        var i = this._findSuffix(parts, this.info.suffixes, isAsian);
        if (i > 0) {
            this.suffix = parts.slice(i).join(isAsian ? "" : " ");
            return parts.slice(0, i);
        }
        // suffices not found, so just return the array unmodified
        return parts;
    },

    /**
     * Adjoin auxillary words to their head words.
     * @protected
     * @param {Array.<string>} parts the current array of name parts
     * @param {boolean} isAsian true if the name is being parsed as an Asian name
     * @return {Array.<string>} the parts after the auxillary words have been plucked onto their head word
     */
    _joinAuxillaries: function (parts, isAsian) {
        var start, i, prefixArray, prefix, prefixLower;

        if (this.info.auxillaries && (parts.length > 2 || this.prefix)) {
            for (start = 0; start < parts.length - 1; start++) {
                for (i = parts.length; i > start; i--) {
                    prefixArray = parts.slice(start, i);
                    prefix = prefixArray.join(' ');
                    prefixLower = prefix.toLowerCase();
                    prefixLower = prefixLower.replace(/[,\.]/g, ''); // ignore commas and periods

                    if (prefixLower in this.info.auxillaries) {
                        parts.splice(start, i + 1 - start, prefixArray.concat(parts[i]));
                        i = start;
                    }
                }
            }
        }

        return parts;
    },

    /**
     * Recursively join an array or string into a long string.
     * @protected
     */
    _joinArrayOrString: function _joinArrayOrString(part) {
        var i;
        if (typeof (part) === 'object') {
            for (i = 0; i < part.length; i++) {
                part[i] = this._joinArrayOrString(part[i]);
            }
            var ret = "";
            part.forEach(function (segment) {
                if (ret.length > 0 && !ilib.CType.isPunct(segment.charAt(0))) {
                    ret += ' ';
                }
                ret += segment;
            });

            return ret;
        }

        return part;
    },

    /**
     * @protected
     */
    _joinNameArrays: function _joinNameArrays() {
        var prop;
        for (prop in this) {

            if (this[prop] !== undefined && typeof (this[prop]) === 'object' && this[prop] instanceof Array) {

                this[prop] = this._joinArrayOrString(this[prop]);
            }
        }
    },

    /**
     * @protected
     */
    _parseAsianName: function (parts) {
        var familyNameArray = this._findPrefix(parts, this.info.knownFamilyNames, true, this.info.noCompoundFamilyNames);

        if (familyNameArray && familyNameArray.length > 0) {
            this.familyName = familyNameArray.join('');

            this.givenName = parts.slice(this.familyName.length).join('');

        } else if (this.suffix || this.prefix) {
            this.familyName = parts.join('');

        } else {
            this.givenName = parts.join('');

        }
    },

    /**
     * @protected
     */
    _parseSpanishName: function (parts) {
        var conjunctionIndex;

        if (parts.length === 1) {
            if (this.prefix || typeof (parts[0]) === 'object') {
                this.familyName = parts[0];
            } else {
                this.givenName = parts[0];
            }
        } else if (parts.length === 2) {
            // we do G F
            this.givenName = parts[0];
            this.familyName = parts[1];
        } else if (parts.length === 3) {
            conjunctionIndex = this._findLastConjunction(parts);
            // if there's an 'and' in the middle spot, put everything in the first name
            if (conjunctionIndex === 1) {
                this.givenName = parts;
            } else {
                // else, do G F F
                this.givenName = parts[0];
                this.familyName = parts.slice(1);
            }
        } else if (parts.length > 3) {
            //there are at least 4 parts to this name

            conjunctionIndex = this._findLastConjunction(parts);
            ////console.log("@@@@@@@@@@@@@@@@"+conjunctionIndex)
            if (conjunctionIndex > 0) {
                // if there's a conjunction that's not the first token, put everything up to and 
                // including the token after it into the first name, the last 2 tokens into
                // the family name (if they exist) and everything else in to the middle name
                // 0 1 2 3 4 5
                // G A G
                // G A G F
                // G G A G
                // G A G F F
                // G G A G F
                // G G G A G
                // G A G M F F
                // G G A G F F
                // G G G A G F
                // G G G G A G
                this.givenName = parts.splice(0, conjunctionIndex + 2);
                if (parts.length > 1) {
                    this.familyName = parts.splice(parts.length - 2, 2);
                    if (parts.length > 0) {
                        this.middleName = parts;
                    }
                } else if (parts.length === 1) {
                    this.familyName = parts[0];
                }
            } else {
                this.givenName = parts.splice(0, 1);
                this.familyName = parts.splice(parts.length - 2, 2);
                this.middleName = parts;
            }
        }
    },

    /**
     * @protected
     */
    _parseIndonesianName: function (parts) {
        var conjunctionIndex;

        if (parts.length === 1) {
            //if (this.prefix || typeof(parts[0]) === 'object') {
            //this.familyName = parts[0];
            //} else {
            this.givenName = parts[0];
            //}
            //} else if (parts.length === 2) {
            // we do G F
            //this.givenName = parts[0];
            //this.familyName = parts[1];
        } else if (parts.length >= 2) {
            //there are at least 3 parts to this name

            conjunctionIndex = this._findLastConjunction(parts);
            if (conjunctionIndex > 0) {
                // if there's a conjunction that's not the first token, put everything up to and 
                // including the token after it into the first name, the last 2 tokens into
                // the family name (if they exist) and everything else in to the middle name
                // 0 1 2 3 4 5
                // G A G
                // G A G F
                // G G A G
                // G A G F F
                // G G A G F
                // G G G A G
                // G A G M F F
                // G G A G F F
                // G G G A G F
                // G G G G A G
                this.givenName = parts.splice(0, conjunctionIndex + 2);
                if (parts.length > 1) {
                    //this.familyName = parts.splice(parts.length-2, 2);
                    //if ( parts.length > 0 ) {
                    this.middleName = parts;
                }
                //} else if (parts.length === 1) {
                //	this.familyName = parts[0];
                //}
            } else {
                this.givenName = parts.splice(0, 1);
                //this.familyName = parts.splice(parts.length-2, 2);
                this.middleName = parts;
            }
        }
    },
    
    /**
     * @protected
     */
    _parseGenericWesternName: function (parts) {
        /* Western names are parsed as follows, and rules are applied in this 
         * order:
         *
         * G
         * G F
         * G M F
         * G M M F
         * P F
         * P G F
         */
        var conjunctionIndex;

        if (parts.length === 1) {
            if (this.prefix || typeof (parts[0]) === 'object') {
                // already has a prefix, so assume it goes with the family name like "Dr. Roberts" or
                // it is a name with auxillaries, which is almost always a family name
                this.familyName = parts[0];
            } else {
                this.givenName = parts[0];
            }
        } else if (parts.length === 2) {
            // we do G F
            if (this.info.order == 'fgm') {
                this.givenName = parts[1];
                this.familyName = parts[0];
            } else if (this.info.order == "gmf" || typeof (this.info.order) == 'undefined') {
                this.givenName = parts[0];
                this.familyName = parts[1];
            }
        } else if (parts.length >= 3) {
            //find the first instance of 'and' in the name
            conjunctionIndex = this._findLastConjunction(parts);

            if (conjunctionIndex > 0) {
                // if there's a conjunction that's not the first token, put everything up to and 
                // including the token after it into the first name, the last token into
                // the family name (if it exists) and everything else in to the middle name
                // 0 1 2 3 4 5
                // G A G M M F
                // G G A G M F
                // G G G A G F
                // G G G G A G
                //if(this.order == "gmf") {
                this.givenName = parts.slice(0, conjunctionIndex + 2);

                if (conjunctionIndex + 1 < parts.length - 1) {
                    this.familyName = parts.splice(parts.length - 1, 1);
                    ////console.log(this.familyName);
                    if (conjunctionIndex + 2 < parts.length - 1) {
                        this.middleName = parts.slice(conjunctionIndex + 2, parts.length - conjunctionIndex - 3);
                    }
                } else if (this.order == "fgm") {
                    this.familyName = parts.slice(0, conjunctionIndex + 2);
                    if (conjunctionIndex + 1 < parts.length - 1) {
                        this.middleName = parts.splice(parts.length - 1, 1);
                        if (conjunctionIndex + 2 < parts.length - 1) {
                            this.givenName = parts.slice(conjunctionIndex + 2, parts.length - conjunctionIndex - 3);
                        }
                    }
                }
            } else {
                this.givenName = parts[0];

                this.middleName = parts.slice(1, parts.length - 1);

                this.familyName = parts[parts.length - 1];
            }
        }
    },
    
    /**
     * @protected
     */
    _parseWesternName: function (parts) {

        if (this.locale.getLanguage() === "es" || this.locale.getLanguage() === "pt") {
            // in spain and mexico and portugal, we parse names differently than in the rest of the world 
            // because of the double family names
            this._parseSpanishName(parts);
        } else if (this.locale.getLanguage() === "ru") {
            /*
             * In Russian, names can be given equally validly as given-family
             * or family-given. Use the value of the "order" property of the
             * constructor options to give the default when the order is ambiguous.
             */
            // TODO: this._parseRussianName(parts);
        	this._parseGenericWesternName(parts); // for now, just do western names
        } else if (this.locale.getLanguage() === "id") {
            // in indonesia, we parse names differently than in the rest of the world 
            // because names don't have family names usually.
            this._parseIndonesianName(parts);
        } else {
        	this._parseGenericWesternName(parts);
        }
    },

    /**
     * When sorting names with auxiliary words (like "van der" or "de los"), determine
     * which is the "head word" and return a string that can be easily sorted by head
     * word. In English, names are always sorted by initial characters. In places like
     * the Netherlands or Germany, family names are sorted by the head word of a list
     * of names rather than the first element of that name.
     * @return {string|undefined} a string containing the family name[s] to be used for sorting
     * in the current locale, or undefined if there is no family name in this object
     */
    getSortFamilyName: function () {
        var name,
            auxillaries,
            auxString,
            parts,
            i;

        // no name to sort by
        if (!this.familyName) {
            return undefined;
        }

        // first break the name into parts
        if (this.info) {
            if (this.info.sortByHeadWord) {
                if (typeof (this.familyName) === 'string') {
                    name = this.familyName.replace(/\s+/g, ' '); // compress multiple whitespaces
                    parts = name.trim().split(' ');
                } else {
                    // already split
                    parts = /** @type Array */ this.familyName;
                }

                auxillaries = this._findPrefix(parts, this.info.auxillaries, false);
                if (auxillaries && auxillaries.length > 0) {
                    if (typeof (this.familyName) === 'string') {
                        auxString = auxillaries.join(' ');
                        name = this.familyName.substring(auxString.length + 1) + ', ' + auxString;
                    } else {
                        name = parts.slice(auxillaries.length).join(' ') +
                            ', ' +
                            parts.slice(0, auxillaries.length).join(' ');
                    }
                }
            } else if (this.info.knownFamilyNames && this.familyName) {
                parts = this.familyName.split('');
                var familyNameArray = this._findPrefix(parts, this.info.knownFamilyNames, true, this.info.noCompoundFamilyNames);
                name = "";
                for (i = 0; i < familyNameArray.length; i++) {
                    name += (this.info.knownFamilyNames[familyNameArray[i]] || "");
                }
            }
        }

        return name || this.familyName;
    },

    getHeadFamilyName: function () {},

    /** 
     * @protected
     * Return a shallow copy of the current instance.
     */
    clone: function () {
        var other = new ilib.Name();
        ilib.shallowCopy(this, other);
        return other;
    }
};

/*
 * namefmt.js - Format person names for display
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
ilibglobal.js
locale.js
strings.js
nameprs.js
ctype.ispunct.js
*/

// !data name

/**
 * @class
 * Creates a formatter that can format person name instances (ilib.Name) for display to
 * a user. The options may contain the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - Use the conventions of the given locale to construct the name format. 
 * <li><i>style</i> - Format the name with the given style. The value of this property
 * should be one of the following strings: 
 *   <ul>
 *     <li><i>short</i> - Format a short name with just the given and family names.
 *     <li><i>medium</i> - Format a medium-length name with the given, middle, and family names.
 *     <li><i>long</i> - Format a long name with all names available in the given name object, including
 *     prefixes and suffixes.
 *   </ul>
 * <li><i>components</i> - Format the name with the given components in the correct
 * order for those components. Components are encoded as a string of letters representing
 * the desired components:
 *   <ul>
 *     <li><i>p</i> - prefixes
 *     <li><i>g</i> - given name
 *     <li><i>m</i> - middle names
 *     <li><i>f</i> - family name
 *     <li><i>s</i> - suffixes
 *   </ul>
 * <p>
 * 
 * For example, the string "pf" would mean to only format any prefixes and family names 
 * together and leave out all the other parts of the name.<p>
 * 
 * The components can be listed in any order in the string. The <i>components</i> option 
 * overrides the <i>style</i> option if both are specified.
 *
 * <li>onLoad - a callback function to call when the locale info object is fully 
 * loaded. When the onLoad option is given, the localeinfo object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Formatting names is a locale-dependent function, as the order of the components 
 * depends on the locale. The following explains some of the details:<p>
 * 
 * <ul>
 * <li>In Western countries, the given name comes first, followed by a space, followed 
 * by the family name. In Asian countries, the family name comes first, followed immediately
 * by the given name with no space. But, that format is only used with Asian names written
 * in ideographic characters. In Asian countries, especially ones where both an Asian and 
 * a Western language are used (Hong Kong, Singapore, etc.), the convention is often to 
 * follow the language of the name. That is, Asian names are written in Asian style, and 
 * Western names are written in Western style. This class follows that convention as
 * well. 
 * <li>In other Asian countries, Asian names
 * written in Latin script are written with Asian ordering. eg. "Xu Ping-an" instead
 * of the more Western order "Ping-an Xu", as the order is thought to go with the style
 * that is appropriate for the name rather than the style for the language being written.
 * <li>In some Spanish speaking countries, people often take both their maternal and
 * paternal last names as their own family name. When formatting a short or medium style
 * of that family name, only the paternal name is used. In the long style, all the names
 * are used. eg. "Juan Julio Raul Lopez Ortiz" took the name "Lopez" from his father and 
 * the name "Ortiz" from his mother. His family name would be "Lopez Ortiz". The formatted
 * short style of his name would be simply "Juan Lopez" which only uses his paternal
 * family name of "Lopez".
 * <li>In many Western languages, it is common to use auxillary words in family names. For
 * example, the family name of "Ludwig von Beethoven" in German is "von Beethoven", not 
 * "Beethoven". This class ensures that the family name is formatted correctly with 
 * all auxillary words.   
 * </ul>
 * 
 * Depends directive: !depends namefmt.js
 * 
 * @constructor
 * @param {Object} options A set of options that govern how the formatter will behave
 */
ilib.NameFmt = function(options) {
	var sync = true;
	
	this.style = "short";
	this.loadParams = {};
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (options.style) {
			this.style = options.style;
		}
		
		if (options.components) {
			this.components = options.components;
		}
		
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			this.loadParams = options.loadParams;
		}
	}
	
	// set up defaults in case we need them
	this.defaultEuroTemplate = new ilib.String("{prefix} {givenName} {middleName} {familyName}{suffix}");
	this.defaultAsianTemplate = new ilib.String("{prefix}{familyName}{givenName}{middleName}{suffix}");
	this.useFirstFamilyName = false;

	switch (this.style) {
		default:
		case "s":
		case "short":
			this.style = "short";
			break;
		case "m":
		case "medium":
			this.style = "medium";
			break;
		case "l":
		case "long":
			this.style = "long";
			break;
		case "f":
		case "full":
			this.style = "full";
			break;
	}

	if (!ilib.Name.cache) {
		ilib.Name.cache = {};
	}

	this.locale = this.locale || new ilib.Locale();
	
	ilib.CType.isPunct._init(sync, this.loadParams, /** @type {function()|undefined} */ ilib.bind(this, function() {
		ilib.loadData({
			object: ilib.Name, 
			locale: this.locale, 
			name: "name.json", 
			sync: sync, 
			loadParams: this.loadParams, 
			callback: ilib.bind(this, function (info) {
				if (!info) {
					info = ilib.Name.defaultInfo;
					var spec = this.locale.getSpec().replace(/-/g, "_");
					ilib.Name.cache[spec] = info;
				}
				this.info = info;
				this._init();
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			})
		});
	}));
};

ilib.NameFmt.prototype = {
	/**                          
	 * @protected
	 */
	_init: function() {
		if (this.components) {
			var valids = {"p":1,"g":1,"m":1,"f":1,"s":1},
				arr = this.components.split("");
			this.comps = {};
			for (var i = 0; i < arr.length; i++) {
				if (valids[arr[i].toLowerCase()]) {
					this.comps[arr[i].toLowerCase()] = true;
				}
			}
		} else {
			this.comps = this.info.components[this.style];
		}

		this.template = new ilib.String(this.info.format);
		
		if (this.locale.language === "es" && (this.style !== "long" && this.style !== "full")) {
			this.useFirstFamilyName = true;	// in spanish, they have 2 family names, the maternal and paternal
		}

		this.isAsianLocale = (this.info.nameStyle === "asian");
	},

	/**
	 * adjoin auxillary words to their head words
	 * @protected
	 */
	_adjoinAuxillaries: function (parts, namePrefix) {
		var start, i, prefixArray, prefix, prefixLower;
		
		//console.info("_adjoinAuxillaries: finding and adjoining aux words in " + parts.join(' '));
		
		if ( this.info.auxillaries && (parts.length > 2 || namePrefix) ) {
			for ( start = 0; start < parts.length-1; start++ ) {
				for ( i = parts.length; i > start; i-- ) {
					prefixArray = parts.slice(start, i);
					prefix = prefixArray.join(' ');
					prefixLower = prefix.toLowerCase();
					prefixLower = prefixLower.replace(/[,\.]/g, '');  // ignore commas and periods
					
					//console.info("_adjoinAuxillaries: checking aux prefix: '" + prefixLower + "' which is " + start + " to " + i);
					
					if ( prefixLower in this.info.auxillaries ) {
						//console.info("Found! Old parts list is " + JSON.stringify(parts));
						parts.splice(start, i+1-start, prefixArray.concat(parts[i]));
						//console.info("_adjoinAuxillaries: Found! New parts list is " + JSON.stringify(parts));
						i = start;
					}
				}
			}
		}
		
		//console.info("_adjoinAuxillaries: done. Result is " + JSON.stringify(parts));

		return parts;
	},

	/**
	 * Return the locale for this formatter instance.
	 * @return {ilib.Locale} the locale instance for this formatter
	 */
	getLocale: function () {
		return this.locale;
	},
	
	/**
	 * Return the style of names returned by this formatter
	 * @return {string} the style of names returned by this formatter
	 */
	getStyle: function () {
		return this.style;
	},
	
	/**
	 * Return the list of components used to format names in this formatter
	 * @return {string} the list of components
	 */
	getComponents: function () {
		return this.components;
	},
	
	/**
	 * Format the name for display in the current locale with the options set up
	 * in the constructor of this formatter instance.<p>
	 * 
	 * If the name does not contain all the parts required for the style, those parts
	 * will be left blank.<p>
	 * 
	 * There are two basic styles of formatting: European, and Asian. If this formatter object
	 * is set for European style, but an Asian name is passed to the format method, then this
	 * method will format the Asian name with a generic Asian template. Similarly, if the
	 * formatter is set for an Asian style, and a European name is passed to the format method,
	 * the formatter will use a generic European template.<p>
	 * 
	 * This means it is always safe to format any name with a formatter for any locale. You should
	 * always get something at least reasonable as output.<p>
	 * 
	 * @param {ilib.Name} name the name to format
	 * @return {string|undefined} the name formatted according to the style of this formatter instance
	 */
	format: function(name) {
		var formatted, temp, modified, isAsianName;
		
		if (!name || typeof(name) !== 'object') {
			return undefined;
		}
		
		if ((!name.givenName || ilib.Name._isEuroName(name.givenName)) &&
				 (!name.middleName || ilib.Name._isEuroName(name.middleName)) &&
				 (!name.familyName || ilib.Name._isEuroName(name.familyName))) {
			isAsianName = false;	// this is a euro name, even if the locale is asian
			modified = name.clone();
			
			// handle the case where there is no space if there is punctuation in the suffix like ", Phd". 
			// Otherwise, put a space in to transform "PhD" to " PhD"
			/*
			console.log("suffix is " + modified.suffix);
			if ( modified.suffix ) {
				console.log("first char is " + modified.suffix.charAt(0));
				console.log("isPunct(modified.suffix.charAt(0)) is " + ilib.CType.isPunct(modified.suffix.charAt(0)));
			}
			*/
			if (modified.suffix && ilib.CType.isPunct(modified.suffix.charAt(0)) === false) {
				modified.suffix = ' ' + modified.suffix; 
			}
			
			if (this.useFirstFamilyName && name.familyName) {
				var familyNameParts = modified.familyName.trim().split(' ');
				if (familyNameParts.length > 1) {
					familyNameParts = this._adjoinAuxillaries(familyNameParts, name.prefix);
				}	//in spain and mexico, we parse names differently than in the rest of the world
	
				modified.familyName = familyNameParts[0];
			}
		
			modified._joinNameArrays();
		} else {
			isAsianName = true;
			modified = name;
		}
		
		if (!this.template || isAsianName !== this.isAsianLocale) {
			temp = isAsianName ? this.defaultAsianTemplate : this.defaultEuroTemplate;
		} else {
			temp = this.template;
		}
		
		var parts = {
			prefix: this.comps["p"] && modified.prefix || "",
			givenName: this.comps["g"] && modified.givenName || "",
			middleName: this.comps["m"] && modified.middleName || "",
			familyName: this.comps["f"] && modified.familyName || "",
			suffix: this.comps["s"] && modified.suffix || ""
		};
		
		formatted = temp.format(parts);
		return formatted.replace(/\s+/g, ' ').trim();
	}
};

ilib.data.address = {};
ilib.data.address_DJ = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zØ¬Ø«ØªØ¨Ø£Ø±Ø°Ø¯Ø®Ø­Ø¶ØµØ´Ø³Ø²ÙØºØ¹Ø¸Ø·ÙÙÙÙÙÙÙÙÙØ¯ÙØ¯ÙØ¯ÙØ¯ÙØ¯ÙØ¯ÙÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»]+)$","matchGroup":0}]};
ilib.data.address_ZA = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"[0-9]{4}","matchGroup":0},{"name":"locality","line":"last","pattern":"[A-za-z]+$","matchGroup":0}]};
ilib.data.address_CM = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"[A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-' ]+"}]};
ilib.data.address_GH = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-z\\.\\-']+)? ?[A-z\\.\\-']+)$","matchGroup":1}]};
ilib.data.address_ET = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"(([A-z]+)? ?[A-z]+)$","matchGroup":1},{"name":"postalCode","line":"last","pattern":"([0-9]{4})$","matchGroup":0}]};
ilib.data.address_AE = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{5})$"},{"name":"locality","line":"last","pattern":"[A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙ\\.\\']+"}]};
ilib.data.address_BH = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{3,4})$"},{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙØ§ÙÙÙØ§ÙØ©Ù\\.\\-']+)$"}]};
ilib.data.address_DZ = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø§ÙØ¬Ø²Ø§Ø¦Ø±Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙ\\.\\-\\s'ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»]+)$"},{"name":"postalCode","line":"last","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{5})$"}]};
ilib.data.address_EG = {"formats":{"default":"{streetAddress}\n{locality}\n{region}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}\n{region}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{5})$"},{"name":"region","line":"last","pattern":["Ø§ÙØ§Ø³ÙÙØ¯Ø±ÙØ©","Ø£Ø³ÙØ§Ù","Ø£Ø³ÙÙØ·","Ø§ÙØ¨Ø­ÙØ±Ø©","Ø¨ÙÙ Ø³ÙÙÙ","Ø§ÙÙØ§ÙØ±Ø©","Ø§ÙØ¯ÙÙÙÙØ©","Ø¯ÙÙØ§Ø·","Ø§ÙÙÙÙÙ","Ø§ÙØºØ±Ø¨ÙØ©","Ø§ÙØ¬ÙØ²Ø©","Ø§ÙØ¥Ø³ÙØ§Ø¹ÙÙÙØ©","Ø§ÙÙØ§Ù Ø§ÙØ´ÙØ®","ÙØ·Ø±ÙØ­","Ø§ÙÙÙÙØ§","Ø§ÙÙÙÙÙÙØ©","Ø§ÙÙØ§Ø¯Ù Ø§ÙØ¬Ø¯ÙØ¯","Ø´ÙØ§Ù Ø³ÙÙØ§Ø¡","Ø¨ÙØ±Ø³Ø¹ÙØ¯","Ø§ÙÙÙÙÙØ¨ÙØ©","ÙÙØ§","Ø§ÙØ¨Ø­Ø± Ø§ÙØ£Ø­ÙØ±","Ø§ÙØ´Ø±ÙÙØ©","Ø³ÙÙØ§Ø¬","Ø¬ÙÙØ¨ Ø³ÙÙØ§Ø¡","Ø§ÙØ³ÙÙØ³","Ø§ÙØ£ÙØµØ±","Ø­ÙÙØ§Ù"]},{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø­ÙØ¯Ø¹Ø±Ø§Ø¨ÙØ¢Ù Ø§ÙÙÙÙØ¯Ø³ÙÙØ²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙ\\.\\-\\s']+)$"}]};
ilib.data.address_IQ = {"formats":{"default":"{streetAddress}\n{locality}, {region}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}, {region}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{5})$"},{"name":"region","line":"last","pattern":["Ø§ÙØ£ÙØ¨Ø§Ø±","Ø§ÙØ¨ØµØ±Ø©","Ø§ÙÙØ«ÙÙ","Ø§ÙÙØ¬Ù","Ø§ÙÙØ§Ø¯Ø³ÙØ©","Ø¢Ù Ø§ÙØ³ÙÙÙØ§ÙÙØ©","Ø¢Ù ØªÙÙÙ","Ø£Ø±Ø¨ÙÙ","Ø¨Ø§Ø¨Ù","Ø¨ØºØ¯Ø§Ø¯","Ø¯ÙÙÙ","Ø¯ÙØ§ÙÙ","ÙØ±Ø¨ÙØ§Ø¡","ÙÙØ³Ø§Ù","Ø§ÙÙÙØµÙ Ù","ØµÙØ§Ø­ Ø§ÙØ¯ÙÙ","Ø°Ù ÙØ§Ø±","ÙØ§Ø³Ø·"]},{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø­ÙØ¯Ø¹Ø±Ø§Ø¨ÙØ¢Ù Ø§ÙÙÙÙØ¯Ø³ÙÙØ²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙ\\.\\-\\s']+)$"}]};
ilib.data.address_JO = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{5})$"},{"name":"locality","line":"startAtLast","pattern":"([A-z ÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØº ÙÙÙ ÙÙÙÙÙÙÙÙÙÙÙÙÙ ÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§ Ø¨ Øª Ø« Ø¬ Ø­ Ø® Ø¯ Ø° Ø± Ø² Ø³ Ø´ Øµ Ø¶ Ø· Ø¸ Ø¹ Ù Ù Ù Ù\\.\\-\\s']+)$"}]};
ilib.data.address_KW = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø§ÙÙÙÙØªØ³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙ\\.\\-\\s']+)$"},{"name":"postalCode","line":"last","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{5})$"}]};
ilib.data.address_LB = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{4}( [0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{4})?)$","matchGroup":0},{"name":"locality","line":"startAtLast","pattern":"([A-z ÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØº ÙÙÙ ÙÙÙÙÙÙÙÙÙÙÙÙÙ ÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§ Ø¨ Øª Ø« Ø¬ Ø­ Ø® Ø¯ Ø° Ø± Ø² Ø³ Ø´ Øµ Ø¶ Ø· Ø¸ Ø¹ Ù Ù Ù ÙÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\s-']+)$","matchGroup":0}]};
ilib.data.address_LY = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙ\\.\\-\\s']+)$","matchGroup":0}]};
ilib.data.address_MA = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙØ®Ø±ÙØ¨ÙØ©Ù\\.\\-\\s']+)$"},{"name":"postalCode","line":"startAtLast","pattern":"(([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{5}))$"}]};
ilib.data.address_MR = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙ\\.\\-\\s']+)$"}]};
ilib.data.address_OM = {"formats":{"default":"{streetAddress}\n{postalCode}\n{locality}\n{country}","nocountry":"{streetAddress}\n{postalCode}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§ïºï» ïº·ïº«ïºï»ï»´ïºï»ï»¨ïºïºï» ï»¤ïº´ï»ïºïºØ¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙ\\.\\-\\s']+)$"},{"name":"postalCode","line":"last","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{3})$"}]};
ilib.data.address_QA = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zïºï»ïº©ï»®ïº£ïºÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙ\\.\\-\\s']+)$"}]};
ilib.data.address_SA = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{5}( â [0-9Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{4})?)$"},{"name":"locality","line":"last","pattern":"[A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙÙØ© Ø§ÙÙÙØ±ÙØ©Ù\\.\\-\\s']+"}]};
ilib.data.address_SD = {"formats":{"default":"{streetAddress}\n{postalCode}\n{locality}\n{country}","nocountry":"{streetAddress}\n{postalCode}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»ÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙïºï» ïº§ïº®ï»ï»®ï»£Ù\\.\\-\\s']+)$"},{"name":"postalCode","line":"last","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{5})$"}]};
ilib.data.address_SY = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙïºªï»¤ïº¸ï»Ù\\.\\-\\s']+)$"},{"name":"postalCode","line":"last","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{4})$"}]};
ilib.data.address_TN = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²ï»ï»´ï»§ ïº©ïº­ïºï»¬ï»£Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙ\\.\\-\\s']+)$"},{"name":"postalCode","line":"last","pattern":"([0-9Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Û´ÛµÛ¶]{4})$"}]};
ilib.data.address_YE = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ§ÙØ¨ÙÙØªÙÙØ«ÙÙØ¬ÙÙØ­ÙÙØ®ÙÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙÙØ´ÙÙØµÙÙØ¶ÙÙØ·ÙÙØ¸ÙÙØ¹ÙØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙØ§ÙØ¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯ÙØ°ÙØ±ÙØ²ÙØ³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ØºÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙï»ïºªï»§ÙÙØ§Ø¨ÙØªÙØ«ÙØ¬ÙØ­ÙØ®ÙØ¯Ø°Ø±Ø²Ø³ÙØ´ÙØµÙØ¶ÙØ·ÙØ¸ÙØ¹ÙÙÙÙÙÙÙÙÙØ§Ø¨ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹ÙÙÙÙ\\.\\-\\s']+)$"}]};
ilib.data.address_TZ = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"[A-z\\.\\-' ]+"}]};
ilib.data.address_IN = {"formats":{"default":"{streetAddress}\n{locality}\n{region}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}\n{region}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"([0-9à¥¦à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à«¦à«§à«¨à«©à«ªà««à«¬à«­à«®à«¯à³¦à³§à³¨à³©à³ªà³«à³¬à³­à³®à³¯àµ¦àµ§àµ¨àµ©àµªàµ«àµ¬àµ­àµ®àµ¯ à©¦à©§à©¨à©©à©ªà©«à©¬à©­à©®à©¯  à¯§à¯¨à¯©à¯ªà¯«à¯¬à¯­à¯®à¯¯à¯°à¯±à¯²à¯³à¯´à¯µà¯¶à¯·à¯¸à¯¹à¯º à§¦à§§à§¨à§©à§ªà§«à§¬à§­à§®à§¯à§²à§³à§´à§µà§¶à§·à§¸Ù âÙ¡âÙ¢âÙ£âÙ¤âÙ¥âÙ¦âÙ§âÙ¨âÙ©âà±¦à±§à±¨à±©à±ªà±«à±¬à±­à±®à±¯ ]{6})$"},{"name":"region","line":"last","pattern":["Andaman and Nicobar","Andhra Pradesh","Arunachal Pradesh","Assam","Bihar","Chandigarh","Chhattisgarh","Dadra and Nagar Haveli","Daman and Diu","New Delhi","Goa","Gujarat","Haryana","Himachal Pradesh","Jammu and Kashmir","Jharkhand","Karnataka","Kerala","Lakshadweep","Madhya Pradesh","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Puducherry","Punjab","Rajasthan","Sikkim","Tamil Nadu","Tripura","Uttar Pradesh","Uttarakhand","West Bengal","à¤à¤à¤¡à¤®à¤¾à¤¨ à¤à¤° à¤¨à¤¿à¤à¥à¤¬à¤¾à¤°","à¤à¤à¤§à¥à¤° à¤ªà¥à¤°à¤¦à¥à¤¶","à¤à¤°à¥à¤£à¤¾à¤à¤² à¤ªà¥à¤°à¤¦à¥à¤¶","à¤à¤¸à¤®","à¤¬à¤¿à¤¹à¤¾à¤°","à¤à¤à¤¡à¥à¤à¤¢à¤¼","à¤à¤¤à¥à¤¤à¥à¤¸à¤à¤¢à¤¼","à¤¦à¤¾à¤¦à¤°à¤¾ à¤à¤° à¤¨à¤à¤° ââà¤¹à¤µà¥à¤²à¥","à¤¦à¤®à¤¨ à¤à¤° à¤¦à¥à¤µ","à¤¨à¤ à¤¦à¤¿à¤²à¥à¤²à¥","à¤à¥à¤µà¤¾","à¤à¥à¤à¤°à¤¾à¤¤","à¤¹à¤°à¤¿à¤¯à¤¾à¤£à¤¾","à¤¹à¤¿à¤®à¤¾à¤à¤² à¤ªà¥à¤°à¤¦à¥à¤¶","à¤à¤®à¥à¤®à¥ à¤à¤° à¤à¤¶à¥à¤®à¥à¤°","à¤à¤¾à¤°à¤à¤à¤¡","à¤à¤°à¥à¤¨à¤¾à¤à¤","à¤à¥à¤°à¤²","à¤²à¤à¥à¤·à¤¦à¥à¤µà¥à¤ª","à¤®à¤§à¥à¤¯ à¤ªà¥à¤°à¤¦à¥à¤¶","à¤®à¤¹à¤¾à¤°à¤¾à¤·à¥à¤à¥à¤°","à¤®à¤£à¤¿à¤ªà¥à¤°","à¤®à¥à¤à¤¾à¤²à¤¯","à¤®à¤¿à¤à¥à¤°à¤®","à¤¨à¤¾à¤à¤¾à¤²à¥à¤à¤¡","à¤à¤¡à¤¿à¤¶à¤¾","à¤ªà¥à¤¡à¥à¤à¥à¤°à¥","à¤ªà¤à¤à¤¾à¤¬","à¤°à¤¾à¤à¤¸à¥à¤¥à¤¾à¤¨","à¤¸à¤¿à¤à¥à¤à¤¿à¤®","à¤¤à¤®à¤¿à¤²à¤¨à¤¾à¤¡à¥","à¤¤à¥à¤°à¤¿à¤ªà¥à¤°à¤¾","à¤à¤¤à¥à¤¤à¤° à¤ªà¥à¤°à¤¦à¥à¤¶","à¤à¤¤à¥à¤¤à¤°à¤¾à¤à¤à¤¡","à¤ªà¤¶à¥à¤à¤¿à¤® à¤¬à¤à¤à¤¾à¤²","à°à°à°§à±à°°à°ªà±à°°à°¦à±à°¶à±","à°à°°à±à°£à°¾à°à°²à± à°ªà±à°°à°¦à±à°¶à±","à°à°¸à±à°¸à°¾à°","à°¬à±à°¹à°¾à°°à±","à°à°¤à±à°¤à±à°¸à±à°à°¢à±","à°à±à°µà°¾","à°à±à°à°°à°¾à°¤à±","à°¹à°°à±à°¯à°¾à°¨à°¾","à°¹à°¿à°®à°¾à°à°²à± à°ªà±à°°à°¦à±à°¶à±","à°à°®à±à°®à± à°®à°°à°¿à°¯à± à°à°¾à°¶à±à°®à±à°°à±","à°à°¾à°°à±à°à°à°¡à±","à°à°°à±à°£à°¾à°à°","à°à±à°°à°³","à°®à°§à±à°¯ à°ªà±à°°à°¦à±à°¶à±","à°®à°¹à°¾à°°à°¾à°·à±à°à±à°°","à°®à°£à°¿à°ªà±à°°à±","à°®à±à°à°¾à°²à°¯","à°®à°¿à°à±à°°à°","à°¨à°¾à°à°¾à°²à°¾à°à°¡à±","à°à°°à°¿à°·à°¾","à°ªà°à°à°¾à°¬à±","à°°à°¾à°à°¸à±à°¥à°¾à°¨à±","à°¸à°¿à°à±à°à°¿à°","à°¤à°®à°¿à°³à°¨à°¾à°¡à±","à°¤à±à°°à°¿à°ªà±à°°","à°à°¤à±à°¤à°° à°ªà±à°°à°¦à±à°¶à±","à°à°¤à±à°¤à°°à°¾à°à°à°¡à±","à°µà±à°¸à±à°à± à°¬à±à°à°à°¾à°²à±","à¦à¦¨à§à¦§à§à¦° à¦ªà§à¦°à¦¦à§à¦¶","à¦à¦°à§à¦£à¦¾à¦à¦² à¦ªà§à¦°à¦¦à§à¦¶","à¦à¦¸à¦®","à¦¬à¦¿à¦¹à¦¾à¦°","à¦à¦¤à§à¦¤à¦¿à¦¸à¦à¦¡à¦¼","à¦à§à¦¯à¦¼à¦¾","à¦à§à¦à¦°à¦¾à¦¤","à¦¹à¦°à¦¿à¦¯à¦¼à¦¾à¦¨à¦¾","à¦¹à¦¿à¦®à¦¾à¦à¦² à¦ªà§à¦°à¦¦à§à¦¶","à¦à¦®à§à¦®à§ à¦ à¦à¦¾à¦¶à§à¦®à§à¦°","à¦à¦¾à¦¡à¦¼à¦à¦¨à§à¦¡","à¦à¦°à§à¦¨à¦¾à¦à¦","à¦à§à¦°à¦²","à¦®à¦§à§à¦¯ à¦ªà§à¦°à¦¦à§à¦¶","à¦®à¦¹à¦¾à¦°à¦¾à¦·à§à¦à§à¦°","à¦®à¦£à¦¿à¦ªà§à¦°","à¦®à§à¦à¦¾à¦²à¦¯à¦¼","à¦®à¦¿à¦à§à¦°à¦¾à¦®","à¦¨à¦¾à¦à¦¾à¦²à§à¦¯à¦¾à¦¨à§à¦¡","à¦à¦¡à¦¿à¦¶à¦¾","à¦ªà¦¾à¦à§à¦à¦¾à¦¬","à¦°à¦¾à¦à¦¸à§à¦¥à¦¾à¦¨","à¦¸à¦¿à¦à¦¿à¦®","à¦¤à¦¾à¦®à¦¿à¦²à¦¨à¦¾à¦¡à§","à¦¤à§à¦°à¦¿à¦ªà§à¦°à¦¾","à¦à¦¤à§à¦¤à¦°à¦ªà§à¦°à¦¦à§à¦¶","à¦à¦¤à§à¦¤à¦°à¦¾à¦à¦¨à§à¦¡à§","à¦ªà¦¶à§à¦à¦¿à¦® à¦¬à¦à§à¦","àªàªàª§à«àª° àªªà«àª°àª¦à«àª¶","àªàª°à«àª£àª¾àªàª² àªªà«àª°àª¦à«àª¶","àªàª¸àª¾àª®","àª¬àª¿àª¹àª¾àª°","àªàª¤à«àª¤à«àª¸àªàª¢","àªà«àªµàª¾","àªà«àªàª°àª¾àª¤","àª¹àª°àª¿àª¯àª¾àª£àª¾","àª¹àª¿àª®àª¾àªàª² àªªà«àª°àª¦à«àª¶","àªàª®à«àª®à« àªàª¨à« àªàª¾àª¶à«àª®à«àª°","àªàª¾àª°àªàªàª¡","àªàª°à«àª£àª¾àªàª","àªà«àª°àª²","àª®àª§à«àª¯ àªªà«àª°àª¦à«àª¶","àª®àª¹àª¾àª°àª¾àª·à«àªà«àª°","àª®àª£àª¿àªªà«àª°","àª®à«àªàª¾àª²àª¯","àª®àª¿àªà«àª°àª®","àª¨àª¾àªàª¾àª²à«àª¨à«àª¡","Odisha","àªªàªàªàª¾àª¬","àª°àª¾àªàª¸à«àª¥àª¾àª¨","àª¸àª¿àªà«àªàª¿àª®","àª¤àª®àª¿àª³àª¨àª¾àª¡à«","àª¤à«àª°àª¿àªªà«àª°àª¾","àªàª¤à«àª¤àª° àªªà«àª°àª¦à«àª¶","àªàª¤à«àª¤àª°àª¾àªàªàª¡","àªªàª¶à«àªàª¿àª® àª¬àªàªàª¾àª³","à²à²à²§à³à²° à²ªà³à²°à²¦à³à³à²¶","à²à²°à³à²£à²¾à²à²² à²ªà³à²°à²¦à³à³à²¶","à²à²¸à³à²¸à²¾à²","à²¬à²¿à²¹à²¾à²°","à²à²¤à³à²¤à²¿à³à²¸à³ à²à²¡à³","à²à³à³à³à²µà²¾","à²à³à²à²°à²¾à²¤à³","à²¹à²°à²¿à²¯à²¾à²£","à²¹à²¿à²®à²¾à²à²² à²ªà³à²°à²¦à³à³à²¶","à²à²®à³à²®à³ à²®à²¤à³à²¤à³ à²à²¾à²¶à³à²®à²¿à³à²°","à²à²¾à²°à³à²à²à²¡à³","à²à²°à³à²¨à²¾à²à²","à²à³à³à²°à²³","à²®à²§à³à²¯ à²ªà³à²°à²¦à³à³à²¶","à²®à²¹à²¾à²°à²¾à²·à³à²à³à²°","à²®à²£à²¿à²ªà³à²°","à²®à³à³à²à²¾à²²à²¯","à²®à²¿à²à³à³à³à²°à²¾à²®à³","à²¨à²¾à²à²¾à²²à³à²¯à²¾à²à²¡à³","à²à²°à²¿à²¸à³à²¸à²¾","à²ªà²à²à²¾à²¬à³","à²°à²¾à²à²¸à³à²¥à²¾à²¨","à²¸à²¿à²à³à²à²¿à²","à²¤à²®à²¿à²³à³à²¨à²¾à²¡à³","à²¤à³à²°à²¿à²ªà³à²°","à²à²¤à³à²¤à²° à²ªà³à²°à²¦à³à³à²¶","à²à²¤à³à²¤à²°à²¾à²à²à²¡à³","à²ªà²¶à³à²à²¿à²® à²¬à²à²à²¾à²³","à´à´¨àµà´§àµà´°à´ªàµà´°à´¦àµà´¶àµ","à´à´°àµà´£à´¾à´à´²àµâà´ªàµà´°à´¦àµà´¶àµ","à´à´¸àµà´¸à´¾à´","à´¬àµà´¹à´¾à´°àµâ","à´à´¤àµà´¤àµà´¸àµà´à´¡àµ","à´àµà´µ","à´àµà´à´±à´¾à´¤àµà´¤àµ","à´¹à´°à´¿à´¯à´¾à´¨","à´¹à´¿à´®à´¾à´à´²àµâà´ªàµà´°à´¦àµà´¶àµ","à´à´®àµà´®àµà´à´¾à´¶àµà´®àµà´°àµâ","à´à´¾à´°àµâà´à´£àµà´¡àµ","à´à´°àµâà´£à´¾à´à´","à´àµà´°à´³","à´®à´¦àµà´§àµà´¯à´ªàµà´°à´¦àµà´¶àµ","à´®à´¹à´¾à´°à´¾à´·àµà´àµà´°","à´®à´£à´¿à´ªàµà´ªàµà´°àµâ","à´®àµà´à´¾à´²à´¯","à´®à´¿à´¸àµà´±à´¾à´","à´¨à´¾à´à´¾à´²à´¾à´¨àµâà´¡àµ","à´à´¡àµà´·","à´ªà´àµà´à´¾à´¬àµ","à´°à´¾à´à´¸àµà´¥à´¾à´¨àµâ","à´¸à´¿à´àµà´à´¿à´","à´¤à´®à´¿à´´àµà´¨à´¾à´àµ","à´¤àµà´°à´¿à´ªàµà´°","à´à´¤àµà´¤à´°àµâ à´ªàµà´°à´¦àµà´¶àµ","à´à´¤àµà´¤à´°à´à´£àµà´àµ","à´µàµà´¸àµà´±àµà´±àµ à´¬à´à´à´¾à´³àµâ","à¤à¤à¤§à¥à¤° à¤ªà¥à¤°à¤¦à¥à¤¶","à¤à¤°à¥à¤£à¤¾à¤à¤² à¤ªà¥à¤°à¤¦à¥à¤¶","à¤à¤¸à¤¾à¤®","à¤¬à¤¿à¤¹à¤¾à¤°","à¤à¤¤à¥à¤¤à¥à¤¸à¤à¤¢","à¤à¥à¤µà¤¾","à¤à¥à¤à¤°à¤¾à¤¤","à¤¹à¤°à¤¿à¤¯à¤¾à¤£à¤¾","à¤¹à¤¿à¤®à¤¾à¤à¤² à¤ªà¥à¤°à¤¦à¥à¤¶","à¤à¤®à¥à¤®à¥ à¤à¤£à¤¿ à¤à¤¾à¤¶à¥à¤®à¥à¤°","à¤à¤¾à¤°à¤à¤à¤¡","à¤à¤°à¥à¤¨à¤¾à¤à¤","à¤à¥à¤°à¤³","à¤®à¤§à¥à¤¯ à¤ªà¥à¤°à¤¦à¥à¤¶","à¤®à¤¹à¤¾à¤°à¤¾à¤·à¥à¤à¥à¤°","à¤®à¤£à¤¿à¤ªà¥à¤°","à¤®à¥à¤à¤¾à¤²à¤¯","à¤®à¤¿à¤à¥à¤°à¤®","à¤¨à¤¾à¤à¤¾à¤²à¤à¤¡","à¤à¤°à¤¿à¤¸à¤¾","à¤ªà¤à¤à¤¾à¤¬","à¤°à¤¾à¤à¤¸à¥à¤¥à¤¾à¤¨","à¤¸à¤¿à¤à¥à¤à¤¿à¤®","à¤¤à¤¾à¤®à¤¿à¤³à¤¨à¤¾à¤¡à¥","à¤¤à¥à¤°à¤¿à¤ªà¥à¤°à¤¾","à¤à¤¤à¥à¤¤à¤° à¤ªà¥à¤°à¤¦à¥à¤¶","à¤à¤¤à¥à¤¤à¤°à¤¾à¤à¤à¤¡","à¤ªà¤¶à¥à¤à¤¿à¤® à¤¬à¤à¤à¤¾à¤²","à®à®¨à¯à®¤à®¿à®° à®ªà®¿à®°à®¤à¯à®à®®à¯","à®à®°à¯à®£à®¾à®à¯à®à®² à®ªà®¿à®°à®¤à¯à®à®®à¯","à®à®à®¾à®®à¯","à®ªà¯à®à®¾à®°à¯","à®à®à¯à®à¯à®¸à¯à®à®°à¯","à®à¯à®¾à®µà®¾","à®à¯à®à®°à®¾à®¤à¯","à®¹à®°à®¿à®¯à®¾à®©à®¾","à®¹à®¿à®®à®¾à®à¯à®à®² à®ªà®¿à®°à®¤à¯à®à®®à¯","à®à®®à¯à®®à¯ à®®à®±à¯à®±à¯à®®à¯ à®à®¾à®·à¯à®®à¯à®°à¯","à®à®¾à®°à¯à®à¯à®à®£à¯à®à¯","à®à®°à¯à®¨à®¾à®à®à®¾","à®à¯à®°à®³à®¾","à®®à®¤à¯à®¤à®¿à®¯ à®ªà®¿à®°à®¤à¯à®à®®à¯","à®®à®à®¾à®°à®¾à®·à¯à®à®¿à®°à®¾","à®®à®£à®¿à®ªà¯à®ªà¯à®°à¯","à®®à¯à®à®¾à®²à®¯à®¾","à®®à®¿à®à¯à®¾à®°à®®à¯","à®¨à®¾à®à®¾à®²à®¾à®¨à¯à®¤à¯","à®ªà®à¯à®à®¾à®ªà¯","à®°à®¾à®à®¸à¯à®¤à®¾à®©à¯","à®à®¿à®à¯à®à®¿à®®à¯","à®¤à®®à®¿à®´à¯à®¨à®¾à®à¯","à®¤à®¿à®°à®¿à®ªà¯à®°à®¾","à®à®¤à¯à®¤à®° à®ªà®¿à®°à®¤à¯à®à®®à¯","à®à®¤à¯à®¤à®°à®à®£à¯à®à¯","à®®à¯à®±à¯à®à¯ à®µà®à¯à®à®¾à®³à®®à¯","Ø¢ÙØ¯Ú¾Ø±Ø§ Ù¾Ø±Ø¯ÛØ´","Ø§Ø±ÙÙØ§ÚÙ Ù¾Ø±Ø¯ÛØ´","Ø¢Ø³Ø§Ù","Ø¨ÛØ§Ø±","ÚÚ¾ØªÛØ³ Ú¯ÚÚ¾","Ú¯ÙØ§","Ú¯Ø¬Ø±Ø§Øª","ÛØ±ÛØ§ÙÛ","ÛÙØ§ÚÙ Ù¾Ø±Ø¯ÛØ´","Ø¬ÙÙÚº Ù Ú©Ø´ÙÛØ±","Ø¬Ú¾Ø§Ø±Ú©Ú¾ÙÚ","Ú©Ø±ÙØ§Ù¹Ú©","Ú©ÛØ±Ù","ÙØ¯Ú¾ÛÛ Ù¾Ø±Ø¯ÛØ´","ÙÛØ§Ø±Ø§Ø´Ù¹Ø±","ÙÙÛ Ù¾ÙØ±","ÙÛÚ¯Ú¾Ø§ÙÛÛ","ÙÛØ²ÙØ±Ù","ÙØ§Ú¯Ø§ÙÛÙÚ","Ø§ÚÛØ³Û","Ù¾ÙØ¬Ø§Ø¨","Ø±Ø§Ø¬Ø³ØªÚ¾Ø§Ù","Ø³Ú©Ú©Ù","ØªØ§ÙÙ ÙØ§ÚÙ","ØªØ±ÛÙ¾ÙØ±Û","Ø§ØªØ± Ù¾Ø±Ø¯ÛØ´","Ø§ØªØ±Ø§Ú©Ú¾ÙÚ","ÙØºØ±Ø¨Û Ø¨ÙÚ¯Ø§Ù"]},{"name":"locality","line":"startAtLast","pattern":"([A-zà¤à¤à¤à¤à¤à¤à¤à¤à¤à¤à¤£à¤¢à¤¡à¤ à¤à¤¤à¤¥à¤¦à¤§à¤¨à¤®à¤­à¤¬à¤«à¤ªà¥à¥à¥à¥à¥à¥à¥à¤¯à¤°à¤²à¤³à¤µà¤¹à¤¶à¤·à¤¸à¤à¤à¤à¤à¤à¤à¤à¥ à¤à¥¡à¤à¤à¤à¤à¥à¤½à¥¥à¥¤à¤à¤à¤à¤à¤¾à¤¿à¥à¥à¥à¥à¥à¥¢à¥£à¥à¥à¥à¥à¥à¥à¤à¤à¤à¤¼à¥à¥à¥à¥à²à²à²à²à²à²à²à²à²à²à²à²à²à³ à²à²à²à²à²à²à²à²à²à²à²à² à²¡à²¢à²£à²¤à²¥à²¦à²§à²¨à²ªà²«à²¬à²­à²®à²¯à²°à²±à²²à²³à²µà²¶à²·à²¸à²¹à³à²à²à²à²à²à²¾à²à²¿à²à³à²à³à²à³à²à³à²à³à²à³à²à³à²à³à²à³à²à³à²à³à²à³à²à³à²à³à³¦à³§à³¨à³©à³ªà³«à³¬à³­à³®à³¯à°à°à°à°à°à°à°à°à°à°à°à°à°à°à± à±¡à°à°à°à°à°à°à°à°à°à°à°à° à°¡à°¢à°£à°¤à°¥à°¦à°§à°¨à°ªà°«à°¬à°­à°®à°¯à°°à°±à°²à°³à°µà°¶à°·à°¸à°¹à°à°à°à°à°à°à°à°¾à°à°¿à°à±à°à±à°à±à°à±à°à±à°à±à°à±à°à±à°à±à°à±à°à±à°à±à°à±à°à±à±¦à±§à±¨à±©à±ªà±«à±¬à±­à±®à±¯à®à®à®à®à®à®à®à®à®à®à®à®à®à®à®à®à®à®à®£à®¤à®¨à®©à®ªà®®à®¯à®°à®±à®²à®³à®´à®µà®¸à®¹à®à®à®à®à®à®¾à®à®¿à®à¯à®à¯à®à¯à®à¯à®à¯à®à¯à®à¯à®à¯à®à¯à®à¯à®à¯à¯§à¯¨à¯©à¯ªà¯«à¯¬à¯­à¯®à¯¯à¯°à¯±à¯²à¯³à¯´à¯µà¯¶à¯·à¯¸à¯¹à¯ºà´à´à´à´à´à´à´à´à´à´à´à´à´à´àµ àµ¡à´à´à´à´à´à´à´à´à´à´à´à´ à´¡à´¢à´£à´¤à´¥à´¦à´§à´¨à´ªà´«à´¬à´­à´®à´¯à´°à´±à´²à´³à´´à´µà´¶à´·à´¸à´¹à´à´à´à´à´à´¾à´à´¿à´àµà´àµà´àµà´àµà´àµà´àµà´àµà´àµà´àµà´àµà´àµà´àµàµ¦àµ§àµ¨àµ©àµªàµ«àµ¬àµ­àµ®àµ¯à¦à¦à¦à¦à¦à¦à¦à§ à¦à§¡à¦à¦à¦à¦à¦à¦à¦à¦à¦à¦à¦à¦à¦à¦à¦à¦ à¦¡à¦¢à¦£à¦¤à¦¥à¦¦à¦§à¦¨à¦ªà¦«à¦¬à¦­à¦®à¦¯à¦°à¦²à¦¶à¦·à¦¸à¦¹à§à§à§à§°à§±à¦à¦à¦à¦à¦à¦à¦à¦¼à¦à¦¾à¦à¦¿à¦à§à¦à§à¦à§à¦à§à¦à§à¦à§à¦à§à¦à§à¦à§à¦à§à¦à§à§¦à§§à§¨à§©à§ªà§«à§¬à§­à§®à§¯à§²à§³à§´à§µà§¶à§·à§¸à§¹à§ºàªàªàªàªàªàªàªà« àªàªàªàªàªàªàªàªàªàªàªàªàªàªàªàªàªàª àª¡àª¢àª£àª¤àª¥àª¦àª§àª¨àªªàª«àª¬àª­àª®àª¯àª°àª²àª³àªµàª¶àª·àª¸àª¹àªàªàªàªàªàªàªàª¼àªàª½àªàª¾àªàª¿àªà«àªà«àªà«àªà«àªà«àªà«àªà«àªà«àªà«àªà«àªà«àªà«à«à«±à«¦à«§à«¨à«©à«ªà««à«¬à«­à«®à«¯à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨à¨ à¨¡à¨¢à¨£à¨¤à¨¥à¨¦à¨§à¨¨à¨ªà¨«à¨¬à¨­à¨®à¨¯à¨°à¨²à¨³à¨µà¨¶à¨¸à¨¹à©à©à©à©à©à©²à©³à¨à¨à¨à¨¼à¨à¨¾à¨à¨¿à¨à©à¨à©à¨à©à¨à©à¨à©à¨à©à¨à©à¨à©à¨à©°à¨à©±à©´â¬à©¦à©§à©¨à©©à©ªà©«à©¬à©­à©®à©¯ÛØ§ÛØ³Ø³ÛØ¢Ø¦ÛØ¢Ø¦ÛÚ©Ø±ÛÚ©Ù¹Ø±Ø³ÛÙ¹ÛØ§ÛÚ©ÙØ¹ÛØ§Ø±ÛÛ·Ø¨Ù¹Ú©ÙÚØ¬ÙØ«ÙØ§Ø¦ÛÙÙØ¯Ø§Ø±ÛÚºØ§Ø³ØªØ¹ÙØ§ÙÚ©Ø±ØªÛÛÙØ¦ÛØ¢Ø³Ú©ÛÚ©ÛÙÙØ§Ø¦ÙØ¯Ú¯ÛÚ©Ø±ØªØ§ÛÛÛÚ©ÙÚÚ©ÛÙÛÙÛÙ\\.\\-'\\s]+)$"}]};
ilib.data.address_AZ = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"[AÃBCÃDEFGÄHIÄ°JKLMNOÃPRSÅTUÃVYZabcÃ§defgÄhÄ±ijklmnoÃ¶prsÅtuÃ¼vyz]+","matchGroup":0},{"name":"postalCode","line":"last","pattern":"[0-9]{4}","matchGroup":0}]};
ilib.data.address_BY = {"formats":{"default":"{streetAddress}\n{postalCode}, {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode}, {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([ÐÐ°ÐÐ±ÐÐ²ÐÐ³ÒÒÐÐ´ÐÐµÐÑÐÐ¶ÐÐ·ÐÐ¸ÐÑÐÑÐÐ¹ÐÐºÐÐ»ÐÐ¼ÐÐ½ÐÐ¾ÐÐ¿Ð ÑÐ¡ÑÐ¢ÑÐ£ÑÐ¤ÑÐ¥ÑÐ¦ÑÐ§ÑÐ¨ÑÐ©ÑÐ¬ÑÐ®ÑÐ¯Ñ\\.\\-'\\s]+)$"},{"name":"postalCode","line":"last","pattern":"([0-9]{6})$"}]};
ilib.data.address_ZM = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","pattern":"(([A-z\\.\\-']+)? ?[A-z\\.\\-']+)$","matchGroup":1},{"name":"postalCode","line":"last","pattern":"([0-9]{5})$"}]};
ilib.data.address_BG = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"[A-Za-zÐÐ°ÐÐ±ÐÐ²ÐÐ³ÐÐ´ÐÐµÐÐ¶ÐÐ·ÐÐ¸ÐÐ¹ÐÐºÐÐ»ÐÐ¼ÐÐ½ÐÐ¾ÐÐ¿Ð ÑÐ¡ÑÐ¢ÑÐ£ÑÐ¤ÑÐ¥ÑÐ¦ÑÐ§ÑÐ¨ÑÐ©ÑÐªÑÐ¬ÑÐ®ÑÐ¯Ñ\\.\\-]+"},{"name":"postalCode","line":"last","pattern":"([0-9]{4})"}]};
ilib.data.address_ML = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+)$","matchGroup":1}]};
ilib.data.address_FR = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-' ]+)([Cc][Ee][Dd][Ee][Xx]\\s+[0-9]+)?$","matchGroup":1},{"name":"postalCode","line":"startAtLast","pattern":"([0-9]{5}(\\s+[Cc][Ee][Dd][Ee][Xx]\\s+[0-9]+)?)","matchGroup":0}]};
ilib.data.address_BA = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"[A-Za-zÃÃÃÃÃÃ¡Ã©Ã­Ã³Ãº\\.\\-]+"},{"name":"postalCode","line":"last","pattern":"([0-9]{5})"}]};
ilib.data.address_ME = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÐÐ°ÐÐ±ÐÐ²ÐÐ³ÐÐ´ÐÐµÐÑÐÐ¶ÐÐ·ÐÐ¸ÐÐ¹ÐÐºÐÐ»ÐÐ¼ÐÐ½ÐÐ¾ÐÐ¿Ð ÑÐ¡ÑÐ¢ÑÐ£ÑÐ¤ÑÐ¥ÑÐ¦ÑÐ§ÑÐ¨ÑÐ©ÑÐªÑÐ«ÑÐ¬ÑÐ­ÑÐ®ÑÐ¯ÑA-Za-zÄÄÄÄÄÄÅ Å¡Å½ÃÃÃÃÃÃ¡Ã©Ã­Ã³Ãº\\.\\-']+)$"},{"name":"postalCode","line":"last","pattern":"([0-9]{5})$"}]};
ilib.data.address_CZ = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"[A-Za-zÃÄÄÃÄÃÅÃÅÅ Å¤ÃÅ®ÃÅ½Ã¡ÄÄÃ©ÄÃ­ÅÃ³ÅÅ¡Å¥ÃºÅ¯Ã½Å¾\\.']+(\\s[A-Za-zÃÄÄÃÄÃÅÃÅÅ Å¤ÃÅ®ÃÅ½Ã¡ÄÄÃ©ÄÃ­ÅÃ³ÅÅ¡Å¥ÃºÅ¯Ã½Å¾\\.']+)*(\\s+[0-9]+)?$"},{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{3}\\s[0-9]{2}"}]};
ilib.data.address_DK = {"formats":{"default":"{streetAddress}\n{postalCode} {locality} {postOffice}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality} {postOffice}"},"startAt":"end","fields":[{"name":"postOffice","line":"startAtLast","pattern":"((DK-)?[0-9]+\\s+)?[A-Za-zÃÃÃÃÃÃÃ¦Ã¥Ã¸Ã©Ã²Ã³Ã´\\-\\s]+\\s+([A-Z]\\.?)$","matchGroup":3},{"name":"locality","line":"startAtLast","pattern":"((DK-)?[0-9]+\\s+)?([A-Za-zÃÃÃÃÃÃÃ¦Ã¥Ã¸Ã©Ã²Ã³Ã´\\-\\s]+)$","matchGroup":3},{"name":"postalCode","line":"last","pattern":"(DK-)?[0-9]{4,5}","matchGroup":0}]};
ilib.data.address_AT = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","pattern":"([0-9]{5}\\s+)?([A-zÃÃ¤Ã¶Ã¼ÃÃÃ\\.\\-'\\/ ]+)$","line":"startAtLast","matchGroup":2},{"name":"postalCode","line":"last","pattern":"(A-)?[0-9]{4}"}]};
ilib.data.address_CH = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"[A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¤Ã¨Ã©Ã«Ã¬Ã­Ã²Ã³Ã¶Ã¹ÃºÃ¼Ã¿Å¸ÃÃÃÃÃ¢Ã§ÃªÃ®Ã¯Ã´Ã»\\.\\-']+","matchGroup":0},{"name":"postalCode","line":"last","pattern":"[0-9]{4}"}]};
ilib.data.address_DE = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","pattern":"([0-9]{5}\\s+)?([A-zÃÃ¤Ã¶Ã¼ÃÃÃ\\.\\-'\\/ ]+)$","line":"startAtLast","matchGroup":2},{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{5}"}]};
ilib.data.address_GR = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"[A-za-zÎÎÎÎÎÎÎ Î£Î£Î¤Î¦Î§Î¨Î©Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏÏ-\\s']+"},{"name":"postalCode","line":"last","pattern":"^[0-9]{3} [0-9]{2}$"}]};
ilib.data.address_AU = {"formats":{"default":"{streetAddress}\n{locality} {region} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {region} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{4}"},{"name":"region","line":"last","pattern":["new south wales","nsw","queensland","qld","western australia","west australia","wa","southern australia","south australia","sa","tasmania","tas","victoria","vic","australian capital territory","capital territory","act","northern territory","nt","jervis bay territory","jervis bay","jbt","ashmore and cartier islands","ashmore & cartier islands","cartier island","ashmore island","australian antarctic territory","christmas island","cx","cocos and keeling islands","cocos & keeling islands","cocos (keeling) islands","cocos islands","keeling islands","cc","coral sea islands","willis island","heard island and mcdonald islands","heard island & mcdonald islands","heard island","mcdonald islands","hm","norfolk island","nf"]},{"name":"locality","line":"last","pattern":"[A-z\\.\\-']+(\\s+[A-z\\.\\-']+)?$","matchGroup":0}]};
ilib.data.address_CA = {"formats":{"default":"{streetAddress}\n{locality}, {region} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}, {region} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[A-Za-z][0-9][A-Za-z]\\s+[0-9][A-Za-z][0-9]"},{"name":"region","line":"last","pattern":["new foundland","terre-neuve-et-labrador","terre neuve et labrador","nfld","nl","nova scotia","nouvelle-Ã©cosse","nouvelle Ã©cosse","nouvelle-ecosse","nouvelle ecosse","ns","new brunswick","nouveau-brunswick","nb","prince edward island","Ã®le-du-prince-Ã©douard","Ã®le du prince Ã©douard","ile-du-prince-edouard","ile du prince edouard","pei","pe","quÃ©bec","quebec","quÃ©","que","qc","ontario","ont","on","manitoba","man","mb","saskatchewan","sask","sk","alberta","alb","ab","british columbia","colombie-britannique","colombie britannique","bc","nunavut","nun","nu","north west territories","northwest territories","territoires du nord-ouest","territoires du nordouest","nwt","nt","yukon territory","territoire-yukon","territoire yukon","yukon","yuk","yt"]},{"name":"locality","line":"last","pattern":"[\\wÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+$","matchGroup":0}]};
ilib.data.address_GB = {"formats":{"default":"{streetAddress}\n{locality}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"([A-Za-z]{1,2}[0-9]{1,2}[ABCDEFGHJKMNPRSTUVWXYabcdefghjkmnprstuvwxy]?\\s+[0-9][A-Za-z]{2}|GIR 0AA|SAN TA1)","matchGroup":0},{"name":"locality","line":"last","pattern":"[A-z\\.\\-']+$"}]};
ilib.data.address_GM = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-z\\.\\-']+)? ?[A-z\\.\\-']+)$","matchGroup":1}]};
ilib.data.address_HK = {"multiformat":true,"formats":{"default":{"asian":"{country}{locality}{streetAddress}","latin":"{streetAddress}\n{locality}\n{country}"},"nocountry":{"asian":"{locality}{streetAddress}{postalCode}","latin":"{streetAddress}\n{locality}"}},"startAt":{"latin":"end","asian":"beginning"},"fields":{"latin":[{"name":"locality","line":"last","pattern":["victoria city","victoria harbour","victoria","kowloon","jiÇlÃ³ng","jiulong","causeway bay","tsuen wan","quÃ¡nwÄn qÅ«","quanwan qu","sha tin","ma on shan","tuen mun","tÃºnmÃ©n xÄ«n shÃ¬zhÃ¨n","tunmen xin shizhen","tÃºnmÃ©n","tunmen","tai po","tai gu","dÃ pÇ xÄ«n shÃ¬zhÃ¨n","dapu xin shizhen","dÃ pÇ","dapu","yuen long","yuÃ¡nlÇng","yuanlang","fanling-sheung shui","shÃ ngshuÇ xÄ«n shÃ¬zhÃ¨n","shangshui xin shizhen","shÃ ngshuÇ","shangshui","tseung kwan o","jiangjun'ao xin shizhen","jiangjun'ao","tin shui wai","north lantau","tung chung","tai ho","aberdeen","cheung chau","discovery bay","jardine's lookout","kennedy town","kwun tong","guÄntÃ¡ng","guantang","lei yue mun","ma wan","mui wo","mÃ©iwÅ","meiwo","silvermine bay","peng chau","sai kung","xÄ«gÃ²ng shÃ¬","xigong shi","xÄ«gÃ²ng","xigong","sha tau kok","shek o","sok kwu wan","stanley","tai o","yuen long town","yuÃ¡nlÇng shÃ¬zhÅngxÄ«n","yuanlang shizhongxin","yuÃ¡nlÇng","yuanlang","yung shue wan","banyan bay","hong kong","xiÄnggÇng","xianggang","quarry bay"]}],"asian":[{"name":"locality","line":"startAtFirst","pattern":"(^\\S{1,5}[å¸é®éå]|hong kong|xiÄnggÇng|xianggang)"}]}};
ilib.data.address_IE = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}\n{region}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}\n{region}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"(D?[0-9]{1,2}W?)$","matchGroup":1},{"name":"region","line":"startAtLast","pattern":"(([Cc]ounty|[Cc]ontae|[Cc]o)[\\-\\.:;]?\\s+([A-zÃÃÃÃÃÃ¡Ã©Ã­Ã³Ãº\\.\\-' ]+))$","matchGroup":0},{"name":"locality","line":"last","pattern":"[A-zÃÃÃÃÃÃ¡Ã©Ã­Ã³Ãº\\.\\-']+$"}]};
ilib.data.address_KE = {"formats":{"default":"{streetAddress}\n{locality}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"([0-9]{5})$"},{"name":"locality","line":"last","pattern":"(([A-z\\.\\-']+)? ?[A-z\\.\\-']+)$","matchGroup":1}]};
ilib.data.address_LK = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"([0-9]{5})$"},{"name":"locality","line":"last","pattern":"(([A-Za-z\\.\\-]+)? ?[A-Za-z\\.\\-]+)$","matchGroup":0}]};
ilib.data.address_LR = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-z\\.\\-\\s']+)[0-9]*)"},{"name":"postalCode","line":"last","pattern":"[0-9]{4}"}]};
ilib.data.address_MW = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-z\\.\\-\\s']+)[0-9]*)"}]};
ilib.data.address_MY = {"multiformat":true,"formats":{"default":{"latin":"{streetAddress}\n{locality} {postalCode}\n{region}\n{country}","asian":"{country}{postalCode}{locality}{streetAddress}"},"nocountry":{"asian":"{postalCode}{locality}{streetAddress}","latin":"{streetAddress}\n{locality} {postalCode}\n{region}"}},"startAt":{"latin":"end","asian":"beginning"},"fields":{"latin":[{"name":"region","line":"startAtLast","pattern":["Johor","Kedah","Kelantan","Kuala Lumpur","Labuan","Melaka","Negeri Sembilan","Pahang","Perak","Perlis","Pulau Pinang","Putrajaya","Sabah","Sarawak","Selangor","Terengganu"]},{"name":"locality","line":"last","pattern":"[A-Za-z.-\\s]+"},{"name":"postalCode","line":"last","pattern":"[0-9]{5}"}],"asian":[{"name":"postalCode","line":"startAtLast","pattern":"^[0-9]{6}"},{"name":"locality","line":"startAtFirst","pattern":"^æ°å å¡","matchGroup":0}]}};
ilib.data.address_NG = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}\n{region}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}\n{region}"},"startAt":"end","fields":[{"name":"region","line":"last","pattern":["Abia","Adamawa","Akwa","Anambra","Bauchi","Bayelsa","Benue","Borno","Cross River","Delta","Ebonyi","Edo","Ekiti","Enugu","Federal Capital Territory","Gombe","Imo","Jigawa","Kaduna","Kano","Katsina","Kebbi","Kogi","Kwara","Lagos","Nassarawa","Niger","Ogun","Ondo","Osun","Oyo","Plateau","Rivers","Sokoto","Taraba","Yobe","Zamfara"]},{"name":"postalCode","line":"last","pattern":"([0-9]{6})$"},{"name":"locality","line":"last","pattern":"([A-z\\.\\-']+)$"}]};
ilib.data.address_NZ = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{4}"},{"name":"locality","line":"last","pattern":"[A-z\\.\\-']+$","matchGroup":0}]};
ilib.data.address_PH = {"formats":{"default":"{streetAddress}\n{postalCode} {locality} {region}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality} {region}"},"startAt":"end","fields":[{"name":"region","line":"last","pattern":["Abra","Agusan del Norte","Agusan del Sur","Aklan","Albay","Antique","Apayao","Aurora","Basilan","Bataan","Batanes","Batangas","Benguet","Biliran","Bohol","Bukidnon","Bulacan","Cagayan","Camarines Norte","Camarines Sur","Camiguin","Capiz","Catanduanes","Cavite","Cebu","Compostela Valley","Cotabato","Davao del Norte","Davao del Sur","Davao Oriental","Dinagat Islands","Eastern Samar","Guimaras","Ifugao","Ilocos Norte","Ilocos Sur","Iloilo","Isabela","Kalinga","La Union","Laguna","Lanao del Norte[20]","Lanao del Sur","Leyte","Maguindanao[23]","Marinduque","Masbate","Misamis Occidental","Misamis Oriental","Mountain Province","Negros Occidental","Negros Oriental","Northern Samar","Nueva Ecija","Nueva Vizcaya","Occidental Mindoro","Oriental Mindoro","Palawan","Pampanga","Pangasinan","Quezon","Quirino","Rizal","Romblon","Samar","Sarangani","Siquijor","Sorsogon","South Cotabato","Southern Leyte","Sultan Kudarat","Sulu","Surigao del Norte","Surigao del Sur","Tarlac","Tawi-Tawi","Zambales","Zamboanga del Norte","Zamboanga del Sur","Zamboanga Sibugay","Metro Manila"]},{"name":"locality","line":"last","pattern":"(([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\-]+)? ?[A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\-]+)$","matchGroup":1},{"name":"postalCode","line":"last","pattern":"([0-9]{4})$"}]};
ilib.data.address_PK = {"formats":{"default":"{streetAddress}\n{locality} {postalCode} \n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{5}"},{"name":"locality","line":"last","pattern":"[A-z\\.\\-\\s' ']+"}]};
ilib.data.address_PR = {"formats":{"default":"{streetAddress}\n{locality}, {region} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}, {region} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{5}(-[0-9]{4})?","matchGroup":0},{"name":"region","line":"last","pattern":["alabama","ala.","ala","al","alaska","alas.","alas","ak","american samoa","samoa americano","am. samoa","am samoa","as","arizona","ariz.","ariz","az","arkansas","ark.","ark","ar","california","cal.","cal","ca","colorado","col.","col","co","connecticut","conn.","conn","ct","delaware","del.","del","de","district of columbia","district columbia","d of columbia","distrito de columbia","distrito columbia","dc","federated states of micronesia","estados federados de micronesia","fsm","micronesia","fm","florida","flor.","flor","flo.","flo","fl","georgia","ga","guam","gu","hawaii","hawai'i","haw.","haw","hi","idaho","id","illinois","ill.","ill","il","indiana","ind.","ind","in","iowa","ia","kansas","kan.","kan","ks","kentucky","kent.","ken.","ken","ky","louisiana","lou.","lou","la","maine","me","marshall islands","mar. islands","marshalls","islas marshalls","islas marshall","mh","maryland","mar.","mar","md","massachusetts","mass.","mass","mas.","mas","ma","michigan","mich.","mich","mi","minnesota","minn.","minn","mn","mississippi","miss.","miss","mis.","mis","ms","missouri","mo","montana","mont.","mont","mon.","mon","mt","nebraska","neb.","neb","ne","nevada","nev.","nev","nv","new hampshire","nuevo hampshire","nh","new jersey","nuevo jersey","nj","new mexico","nuevo mÃ©xico","nuevo mexico","nm","new york","nueva york","ny","north carolina","carolina del norte","n. carolina","n carolina","nc","north dakota","dakota del norte","n. dakota","n dakota","nd","northern mariana islands","islas marianas del norte","n. mariana islands","n mariana islands","marianas","nmi","mp","ohio","oh","oklahoma","okla.","okla","okl.","ok","oregon","ore.","or","palau","pw","pennsylvania","pensilvania","penn.","penn","pen.","pen","pa","puerto rico","pr","rhode island","ri","south carolina","carolina del sur","s. carolina","s carolina","sc","south dakota","dakota del sur","s. dakota","s dakota","sd","tennessee","tenn.","tenn","ten.","ten","tn","texas","tejas","tex.","tex","tej.","tej","tx","utah","ut","vermont","ver.","ver","vt","us virgin islands","islas vÃ­rgenes de eeuu","islas virgenes de eeuu","virgin islands","islas vÃ­rgenes","islas virgenes","virgins","vi","virginia","virg.","virg","vir.","va","washington","wash","wa","west virginia","virginia occidental","w. virginia","w virginia","w. virg.","w virg","wv","wisconsin","wisc.","wisc","wis.","wis","wi","wyoming","wyom.","wyom","wy","armed forces africa","las fuerzas armadas africa","fuerzas armadas africa","af africa","ae","armed forces americas","las fuerzas armadas americas","fuerzas armadas americas","af americas","aa","armed forces canada","las fuerzas armadas canadÃ¡","fuerzas armadas canadÃ¡","las fuerzas armadas canada","fuerzas armadas canada","af canada","ae","armed forces europe","las fuerzas armadas europa","fuerzas armadas europa","af europe","ae","armed forces middle east","las fuerzas armadas oriente medio","fuerzas armadas oriente medio","af middle east","ae","armed forces pacific","las fuerzas armadas del pacÃ­fico","fuerzas armadas del pacÃ­fico","las fuerzas armadas del pacifico","fuerzas armadas del pacifico","af pacific","ap"]},{"name":"locality","line":"last","pattern":"([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-\\']+\\s*){1,2}$","matchGroup":0}]};
ilib.data.address_RW = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-']+)? ?[A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-']+)$","matchGroup":1}]};
ilib.data.address_SG = {"multiformat":true,"formats":{"default":{"latin":"{streetAddress}\n{locality} {postalCode}\n{country}","asian":"{country}{postalCode}{locality}{streetAddress}"},"nocountry":{"asian":"{postalCode}{locality}{streetAddress}","latin":"{streetAddress}\n{locality} {postalCode}"}},"startAt":{"latin":"end","asian":"beginning"},"fields":{"latin":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{6}"},{"name":"locality","line":"last","pattern":"[Ss][Ii][Nn][Gg][Aa][Pp][Oo][Rr][Ee]$"}],"asian":[{"name":"postalCode","line":"startAtLast","pattern":"^[0-9]{6}"},{"name":"locality","line":"startAtFirst","pattern":"^æ°å å¡","matchGroup":0}]}};
ilib.data.address_SL = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"[A-z\\.\\-' ]+"}]};
ilib.data.address_UG = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-z\\.\\-']+)? ?[A-z\\.\\-']+)$","matchGroup":1}]};
ilib.data.address_US = {"formats":{"default":"{streetAddress}\n{locality} {region} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {region} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{5}(-[0-9]{4})?","matchGroup":0},{"name":"region","line":"last","pattern":["alabama","ala.","ala","al","alaska","alas.","alas","ak","american samoa","am. samoa","am samoa","as","arizona","ariz.","ariz","az","arkansas","ark.","ark","ar","california","cal.","cal","ca","colorado","col.","col","co","connecticut","conn.","conn","ct","delaware","del.","del","de","district of columbia","district columbia","d of columbia","dc","federated states of micronesia","fsm","micronesia","fm","florida","flor.","flor","flo.","flo","fl","georgia","ga","guam","gu","hawaii","hawai'i","haw.","haw","hi","idaho","id","illinois","ill.","ill","il","indiana","ind.","ind","in","iowa","ia","kansas","kan.","kan","ks","kentucky","kent.","ken.","ken","ky","louisiana","lou.","lou","la","maine","me","marshall islands","mar. islands","marshalls","mh","maryland","mar.","mar","md","massachusetts","mass.","mass","mas.","mas","ma","michigan","mich.","mich","mi","minnesota","minn.","minn","mn","mississippi","miss.","miss","mis.","mis","ms","missouri","mo","montana","mont.","mont","mon.","mon","mt","nebraska","neb.","neb","ne","nevada","nev.","nev","nv","new hampshire","nh","new jersey","nj","new mexico","nm","new york","ny","north carolina","n. carolina","n carolina","nc","north dakota","n. dakota","n dakota","nd","northern mariana islands","n. mariana islands","n mariana islands","marianas","nmi","mp","ohio","oh","oklahoma","okla.","okla","okl.","ok","oregon","ore.","or","palau","pw","pennsylvania","penn.","penn","pen.","pen","pa","puerto rico","pr","rhode island","ri","south carolina","s. carolina","s carolina","sc","south dakota","s. dakota","s dakota","sd","tennessee","tenn.","tenn","ten.","ten","tn","texas","tex.","tex","tx","utah","ut","vermont","ver.","ver","vt","us virgin islands","virgin islands","virgins","vi","virginia","virg.","virg","vir.","va","washington","wash","wa","west virginia","w. virginia","w virginia","w. virg.","w virg","wv","wisconsin","wisc.","wisc","wis.","wis","wi","wyoming","wyom.","wyom","wy","armed forces africa","af africa","ae","armed forces americas","af americas","aa","armed forces canada","af canada","ae","armed forces europe","af europe","ae","armed forces middle east","af middle east","ae","armed forces pacific","af pacific","ap"]},{"name":"locality","line":"last","pattern":"([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-\\']+\\s*){1,2}$","matchGroup":0}]};
ilib.data.address_AR = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"(([A-zÃÃÃÃÃÃ¡Ã©Ã­Ã³Ãº\\.\\-']+\\s+)?[A-zÃÃÃÃÃÃ¡Ã©Ã­Ã³Ãº\\.\\-']+)$","matchGroup":1},{"name":"postalCode","line":"last","pattern":"[A-Z][0-9]{4}[A-Z]{3}"}]};
ilib.data.address_CO = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"[A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»â\\.\\-' ]+","matchGroup":0}]};
ilib.data.address_CR = {"formats":{"default":"{streetAddress}\n{region}, {locality}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{region}, {locality}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"([0-9]{5})$","matchGroup":0},{"name":"locality","line":"startAtLast","pattern":"(([A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»']+)? ?[A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»']+)$","matchGroup":1},{"name":"region","line":"startAtLast","pattern":["Alajuela","Cartago","Guanacaste","Heredia","LimÃ³n","Puntarenas","San JosÃ©","San Rafael"]}]};
ilib.data.address_DO = {"formats":{"default":"{streetAddress}\n{locality}\n{postalCode} {region}\n{country}","nocountry":"{streetAddress}\n{locality}\n{postalCode} {region}"},"startAt":"end","fields":[{"name":"region","line":"startAtLast","pattern":["azua","baoruco","barahona","dajabÃ³n","distrito nacional","duarte","elÃ­as piÃ±a","elias pina","el seibo","espaillat","hato mayor","hermanas mirabal","independencia","la altagracia","altagracia","la romana","romana","la vega","vega","marÃ­a trinidad sÃ¡nchez","marÃ­a trinidad sanchez","monseÃ±or nouel","monsenor nouel","monte cristi","monte plata","pedernales","peravia","puerto plata","samanÃ¡","samana","sÃ¡nchez ramÃ­rez","sanchez ramirez","san cristÃ³bal","san cristobal","san josÃ© de ocoa","san jose de ocoa","san juan","san pedro de macorÃ­s","san pedro de macoris","santiago rodrÃ­guez","santiago rodriguez","santiago","santo domingo","valverde"]},{"name":"postalCode","line":"last","pattern":"([0-9]{5})$","matchGroup":0},{"name":"locality","line":"startAtLast","pattern":"([A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»']+\\s*){1,2}$","matchGroup":1}]};
ilib.data.address_EC = {"formats":{"default":"{streetAddress}\n{postalCode}\n{locality}\n{country}","nocountry":"{streetAddress}\n{postalCode}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-Z][0-9]{4}[A-Z])?\\s*([A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»'\\-\\s]+)$","matchGroup":2},{"name":"postalCode","line":"startAtLast","pattern":"([A-Z][0-9]{4}[A-Z])\\s*$","matchGroup":1}]};
ilib.data.address_ES = {"formats":{"default":"{streetAddress}\n{postalCode} - {locality} {region}\n{country}","nocountry":"{streetAddress}\n{postalCode} - {locality} {region}"},"startAt":"end","fields":[{"name":"region","line":"last","pattern":["andalusia","andalucÃ­a","andalucia","aragon","aragÃ³n","asturias principality of asturias","principado de asturias","principÃ¡u d'asturies","principau d'asturies","asturias","asturies","balearic islands","islas baleares","baleares","illes balears","basque country","euskadi","paÃ­s vasco","pais vasco","comunidad autÃ³noma vasca","comunidad autonoma vasca","euskal autonomi erkidegoa","canary islands","islas canarias","canarias","cantabria","castile-la mancha","castilla-la mancha","castilla la mancha","la mancha","castile and leÃ³n","castile and leon","castilla y leÃ³n","castilla y leon","catalonia","cataluÃ±a","catalunya","extremadura","galicia","galiza","la rioja","rioja","community of madrid ","comunidad madrid","madrid","region of murcia","regiÃ³n de murcia","region de murcia","murcia","foral community of navarre","comunidad foral de navarra","nafarroako foru komunitatea","navarre","navarra","nafarroako","valencian community","comunidad valenciana","comunitat valenciana","la coruÃ±a","la coruna","a coruÃ±a","a coruna","Ã¡lava","alava","araba","albacete","alicante","alacant","almerÃ­a","almeria","asturias","avila","badajoz","barcelona","biscay","bizkaia","vizcaya","burgos","cÃ¡ceres","caceres","cÃ¡diz","cadiz","cantabria","castellÃ³n","castellon","castellÃ³","castello","ciudad real","cÃ³rdoba","cordoba","cuenca","gipuzkoa","guipÃºzcoa","guipuzcoa","girona","gerona","granada","guadalajara","huelva","huesca","jaÃ©n","jaen","las palmas","leÃ³n","leon","lleida","lÃ©rida","lerida","lugo","mÃ¡laga","malaga","murcia","navarre","nafarroa","navarra","ourense","orense","palencia","pontevedra","salamanca","santa cruz","sta. cruz","sta cruz","segovia","seville","sevilla","soria","tarragona","teruel","toledo","valÃ¨ncia","valencia","valladolid","zamora","zaragoza"]},{"name":"locality","line":"last","pattern":"([0-9]{5}\\s*-?\\s+)?([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼][A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-' ]*)$","matchGroup":2},{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{5}\\s*-?"}]};
ilib.data.address_GQ = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼ÃÃÃÃÃÃÃÃÃÃ¢Ã§ÃªÃ«Ã®Ã¯Ã´Ã»ÃÃÃ£Ãµ\\.\\']+)? ?[A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼ÃÃÃÃÃÃÃÃÃÃ¢Ã§ÃªÃ«Ã®Ã¯Ã´Ã»\\.\\']+)$","matchGroup":1}]};
ilib.data.address_GT = {"formats":{"default":"{streetAddress}\n{postalCode}-{locality}\n{country}","nocountry":"{streetAddress}\n{postalCode}-{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\']+)? ?[A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\']+)$","matchGroup":1},{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{5}\\s*-?"}]};
ilib.data.address_HN = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}, {region}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}, {region}"},"startAt":"end","fields":[{"name":"region","line":"last","pattern":["Francisco Morazan","Cortes","Yoro","Atlantida","Comayagua","Choluteca","Olancho","Santa Barbara","El Paraiso","Copan","Colon","Valle","Ocotepeque","La Paz","Intibuca","Lempira","Gracias a Dios","Islas de la Bahia"]},{"name":"locality","line":"last","pattern":"(([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-']+)? ?[A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-']+)$","matchGroup":1},{"name":"postalCode","line":"last","pattern":"((CM)?([0-9]{4}))"}]};
ilib.data.address_MX = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}, {region}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}, {region}"},"startAt":"end","fields":[{"name":"region","line":"startAtLast","pattern":["aguascalientes","ags","morelos","mor","baja california","b. c.","b.c.","bc","nayarit","nay","baja california sur","b. c. s.","b.c.s.","bcs","nuevo leÃ³n","nuevo leon","n. l.","n.l.","nl","campeche","cam","oaxaca","oax","coahuila","coah","puebla","pue","colima","col","querÃ©taro","queretaro","qro","chiapas","chis","quintana roo","q. roo","q roo","chihuahua","chih","san luis potosÃ­","san luis potosi","s. l. p.","s.l.p.","slp","distrito federal","d. f.","d.f.","df","sinaloa","sin","durango","dgo","sonora","son","guanajuato","gto","tabasco","tab","guerrero","gro","tamaulipas","tamps","hidalgo","hgo","tlaxcala","tlax","jalisco","jal","veracruz","ver","mexico","mex","yucatÃ¡n","yucatan","yuc","michoacÃ¡n","michoacan","mich","zacatecas","zac"]},{"name":"locality","line":"last","pattern":"(([Cc]\\.?[Pp]\\.?\\s+)?[0-9]{5}\\s+)?([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-' ]+)$","matchGroup":3},{"name":"postalCode","line":"startAtLast","pattern":"(([Cc]\\.?[Pp]\\.?\\s+)?[0-9]{5})","matchGroup":0}]};
ilib.data.address_SV = {"formats":{"default":"{streetAddress}\n{postalCode} - {locality}\n{region}\n{country}","nocountry":"{streetAddress}\n{postalCode} - {locality}\n{region}"},"startAt":"end","fields":[{"name":"region","line":"startAtLast","pattern":["Cabanas","Chalatenango","Cuscatlan","La Libertad","La Paz","Ahuachapan","La Union","Morazan","San Miguel","San Salvador","San Vicente","Santa Ana","Sonsonate","Usulutan"]},{"name":"locality","line":"startAtLast","pattern":"(([A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»']+)? ?[A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»']+)$","matchGroup":1},{"name":"postalCode","line":"last","pattern":"((CP )[0-9]{4} -)$","matchGroup":0}]};
ilib.data.address_UY = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-']+)? ?[A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-']+)$","matchGroup":1},{"name":"postalCode","line":"last","pattern":"([0-9]{5})$"}]};
ilib.data.address_VE = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}, {region}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}, {region}"},"startAt":"end","fields":[{"name":"region","line":"last","pattern":["Amazonas","Anzoategui","Apure","Aragua","Barinas","Bolivar","Carabobo","Cojedes","Delta Amacuro","D.A.","Distrito Federal","D.F.","Falcon","Guarico","Lara","Merida","Miranda","Monagas","Nueva Esparta","N.E.","Portuguesa","Sucre","Tachira","Trujillo","Vargas","Yaracuy","Zulia"]},{"name":"postalCode","line":"last","pattern":"([0-9]{4})$"},{"name":"locality","line":"last","pattern":"(([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-']+)? ?[A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-']+)$","matchGroup":1}]};
ilib.data.address_EE = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"(([ABCDEFGHIJKLMNOPQRSÅ ZÅ½TUVWÃÃÃÃXYabcdefghijklmnopqrsÅ¡zÅ¾tuvwÃµÃ¤Ã¶Ã¼xy']+)? ?[ABCDEFGHIJKLMNOPQRSÅ ZÅ½TUVWÃÃÃÃXYabcdefghijklmnopqrsÅ¡zÅ¾tuvwÃµÃ¤Ã¶Ã¼xy']+)$","matchGroup":1},{"name":"postalCode","line":"last","pattern":"([0-9]{5})$","matchGroup":0}]};
ilib.data.address_AF = {"formats":{"default":"{streetAddress}\n{region}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{region}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"([0-9Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹]{4})$"},{"name":"region","line":"startAtLast","pattern":["ïºïºªïº¨ïº·ïºï»§","ïºïºïºªï»Ûïº±","ïºï»ï»¼ï»§","ïºï» ïº§","ïºïºï»£Ûïºï»§","ïº©ïºÛÚ©ï»¥ïº©Û","ï»ïº®ïº£","ï»ïºïº­Ûïºïº","ï»ïº°ï»§Û","ï»ï»­ïº­","ï»ªï» ï»¤ï»§ïº©","ï»©ïº­ïºïº","ïºï»­ïº°ïºïºï»§","Ú©ïºïºï»","ï»ï»§ïºªï»«ïºïº­","Ú©ïºÙ¾Ûïº±ïº","ïº¥ï»®ïº´ïº","Ú©ï»¥ïº­","Ú©ï»¥ïº©ïº¯","ï»ï»ï»£ïºï»§","ï»ï»­Ú¯ïº­","ï»¡Ûïº©ïºï»§ ï»­ïº­ïº©Ú©","ï»¦ï»§Ú¯ïº®ï»«ïºïº­","ï»¥Ûï»¡ïº­ï»­ïº¯","ï»¥ï»­ïº®ïº´ïºïºï»§","Ù¾Ú©ïºÛïº","Ù¾Ú©ïºÛÚ©ïº","Ù¾ï»¦ïº ïº·Ûïº­","Ù¾ïº­ï»­ïºï»§","ïº²ï»¤ï»§Ú¯ïºï»§","Ú©Ø§Ø¨Ù"]}]};
ilib.data.address_IR = {"formats":{"default":"{streetAddress}\n{locality}\n{region}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}\n{region}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"([0-9Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹]{10})$"},{"name":"region","line":"startAtLast","pattern":["Ø§ÙØ¨Ø±Ø²","Ø§Ø±Ø¯Ø¨ÛÙ","Ø¢Ø°Ø±Ø¨Ø§ÛØ¬Ø§ÙØ Ø´Ø±Ù","Ø¢Ø°Ø±Ø¨Ø§ÛØ¬Ø§ÙØ ØºØ±Ø¨","Ø¨ÙØ´ÙØ±","ÚÙØ§Ø± ÙØ­Ø§Ù Ù Ø¨Ø®ØªÛØ§Ø±Û","ÙØ§Ø±Ø³","Ú¯ÛÙØ§Ù","Ú¯ÙØ³ØªØ§Ù","ÙÙØ¯Ø§Ù","ÙØ±ÙØ²Ú¯Ø§Ù","Ø§ÛÙØ§Ù","Ø§ØµÙÙØ§Ù","Ú©Ø±ÙØ§Ù","Ú©Ø±ÙØ§ÙØ´Ø§Ù","Ø®Ø±Ø§Ø³Ø§Ù Ø´ÙØ§ÙÛ","Ø®Ø±Ø§Ø³Ø§Ù Ø±Ø¶ÙÛ","Ø®Ø±Ø§Ø³Ø§Ù Ø¬ÙÙØ¨Û","Ø®ÙØ²Ø³ØªØ§Ù","Ú©ÙÚ¯ÛÙÙÛÙ Ù Ø¨ÙÛØ± Ø§Ø­ÙØ¯","Ú©Ø±Ø¯Ø³ØªØ§Ù","ÙØ±Ø³ØªØ§Ù","ÙØ±Ú©Ø²Û","ÙØ§Ø²ÙØ¯Ø±Ø§Ù","ÙØ²ÙÛÙ","ÙÙ","Ø³ÙÙØ§Ù","Ø³ÛØ³ØªØ§ÙÙØ¨ÙÙÚØ³ØªØ§Ù","ØªÙØ±Ø§Ù","ÛØ²Ø¯","Ø²ÙØ¬Ø§Ù"]},{"name":"locality","line":"startAtLast","pattern":"([A-zÙØ±ÙÙÚ¯ïº¡ÚïºïºïºÙ¾ïºïºïº¸ïº³Úïº¯ïº­ïº«ïºªïº¨ï»ï»ï»ï»ï»ï»ï»ïº»Ûï»©ï»®ï»¨ï»¤ï»]+)$"}]};
ilib.data.address_SN = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+)? ?[A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+)$","matchGroup":1},{"name":"postalCode","line":"last","pattern":"([0-9]{5}$)"}]};
ilib.data.address_FI = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"[ABCDEFGHIJKLMNOPQRSTUVXYZÃÃÃ\\s.'\"]+"},{"name":"postalCode","line":"last","pattern":"(FI-)?[0-9]{5}"}]};
ilib.data.address_BE = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"[A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¤Ã¨Ã©Ã«Ã¬Ã­Ã²Ã³Ã¶Ã¹ÃºÃ¼Ã¿Å¸ÃÃÃÃÃ¢Ã§ÃªÃ®Ã¯Ã´Ã»\\.\\-']+","matchGroup":0},{"name":"postalCode","line":"last","pattern":"[0-9]{4}"}]};
ilib.data.address_BF = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"[A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+(\\s+[A-Za-z0-9ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+)?(\\s+[0-9]{2})?$","matchGroup":0}]};
ilib.data.address_BJ = {"formats":{"default":"{postalCode} {streetAddress}\n{locality}\n{country}","nocountry":"{postalCode} {streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtFirst","pattern":"(^[0-9]{2})"},{"name":"locality","line":"startAtLast","pattern":"([A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+( [A-Za-z0-9ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+)?)$"}]};
ilib.data.address_CD = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"([A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»]+ [0-9]{1})"}]};
ilib.data.address_CF = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"[A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-' ]+"}]};
ilib.data.address_CG = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã±Ã²Ã³Ã¹ÃºÃ¼\\.\\-']+)$"}]};
ilib.data.address_CI = {"formats":{"default":"{streetAddress} {locality}\n{country}","nocountry":"{streetAddress} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»]+)(\\s[0-9]{2})?)$"}]};
ilib.data.address_GA = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-' ]+)([Cc][Ee][Dd][Ee][Xx]\\s+[0-9]+)?$","matchGroup":1}]};
ilib.data.address_GN = {"formats":{"default":"{streetAddress} {region}\n{country}","nocountry":"{streetAddress} {region}"},"startAt":"end","fields":[{"name":"region","line":"last","pattern":["Conakry","Basse-GuinÃ©e","Moyenne-GuinÃ©e","Haute-GuinÃ©e","GuinÃ©e forestiÃ¨re"]}]};
ilib.data.address_LU = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-Za-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã¤Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¶Ã¹ÃºÃ»Ã¼Ã\\.\\-' ]+)$","matchGroup":0},{"name":"postalCode","line":"last","pattern":"((L-)?[0-9]{4})$","matchGroup":0}]};
ilib.data.address_TG = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+)? ?[A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+)$","matchGroup":1}]};
ilib.data.address_IL = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"(ISL-)?[0-9]{5}"},{"name":"locality","line":"last","pattern":"[ABCDEFGHIJKLMNOPQRSTUVXYZa-z×Ö¼××××××××××Ö¼×××××× ××¡×¢×¤Ö¼×¤×£×¦×¥×§×¨×©××©××ªÖ¼×ª\\s-.\"]+"}]};
ilib.data.address_HR = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([A-Za-zÄÄÄÄÄÄÅ Å¡Å½ \\.\\s\\-]+)"},{"name":"postalCode","line":"last","pattern":"((HR-)?[0-9]{5})"}]};
ilib.data.address_HU = {"formats":{"default":"{locality}\n{streetAddress}\n{postalCode}\n{country}","nocountry":"{locality}\n{streetAddress}\n{postalCode}"},"startAt":"beginning","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{4}"},{"name":"locality","line":"startAtFirst","pattern":"[AÃBCCSDDZDZSEÃFGGYHIÃJKLLYMNNYOÃÃÅPQRSSZTTYUÃÃÃVWXYZZSaÃ¡bccsddzdzseÃ©fggyhiÃ­jkllymnnyoÃ³Ã¶ÅpqrsszttyuÃºÃ¼Ã»vwxyzzs//.-/s']+"}]};
ilib.data.address_ID = {"formats":{"default":"{streetAddress}\n{locality} {postalCode}\n{region}\n{country}","nocountry":"{streetAddress}\n{locality} {postalCode}\n{region}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{5}"},{"name":"region","line":"last","pattern":["Jakarta","North Sulawesi","Riau","Yogyakarta","East Kalimantan","Riau Islands","Central Kalimantan","North Sumatra","West Sumatra","Bangka Belitung","Bengkulu","South Sumatra","Jambi","Central Java","West Java","Bali","Nanggroe Aceh Darussalam","East Java","Maluku","Lampung","South Sulawesi","Central Sulawesi","Banten","Gorontalo","South East Sulawesi","South Kalimantan","West Sulawesi","North Maluku","West Kalimantan","West Papua","East Nusa Tenggara","West Nusa Tenggara","Papua"]},{"name":"locality","line":"last","pattern":"(([A-Za-z]+)? [A-Za-z]+)$","matchGroup":1}]};
ilib.data.address_IT = {"formats":{"default":"{streetAddress}\n{postalCode} {locality} {region}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality} {region}"},"startAt":"end","fields":[{"name":"region","line":"startAtLast","pattern":["rm","(rm)","scv","(scv)","vt","(vt)","ri","(ri)","fr","(fr)","lt","(lt)","tr","(tr)","pg","(pg)","ss","(ss)","ot","(ot)","nu","(nu)","og","(og)","ca","(ca)","or","(or)","ci","(ci)","md","(md)","vs","(vs)","to","(to)","ao","(ao)","cn","(cn)","vc","(vc)","bi","(bi)","at","(at)","al","(al)","ge","(ge)","sv","(sv)","im","(im)","sp","(sp)","mi","(mi)","va","(va)","co","(co)","so","(so)","lc","(lc)","bg","(bg)","bs","(bs)","cr","(cr)","lo","(lo)","pv","(pv)","no","(no)","vb","(vb)","pc","(pc)","ve","(ve)","tv","(tv)","bl","(bl)","ud","(ud)","pn","(pn)","ts","(ts)","go","(go)","pd","(pd)","vi","(vi)","vr","(vr)","tn","(tn)","bz","(bz)","bo","(bo)","mo","(mo)","re","(re)","pr","(pr)","fe","(fe)","ro","(ro)","mn","(mn)","fc","(fc)","rn","(rn)","rsm","(rsm)","ra","(ra)","fi","(fi)","pt","(pt)","ar","(ar)","si","(si)","ms","(ms)","lu","(lu)","pi","(pi)","li","(li)","gr","(gr)","po","(po)","an","(an)","pu","(pu)","mc","(mc)","ap","(ap)","te","(te)","pe","(pe)","ch","(ch)","aq","(aq)","ba","(ba)","fg","(fg)","br","(br)","le","(le)","ta","(ta)","mt","(mt)","na","(na)","ce","(ce)","bn","(bn)","av","(av)","sa","(sa)","pz","(pz)","cb","(cb)","is","(is)","cs","(cs)","cz","(cz)","kr","(kr)","rc","(rc)","vv","(vv)","pa","(pa)","tp","(tp)","ag","(ag)","cl","(cl)","en","(en)","ct","(ct)","sr","(sr)","rg","(rg)","me","(me)"]},{"name":"locality","line":"last","pattern":"((I-|IT-)?[0-9]{5}\\s+)?([A-zÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã²Ã³Ã¹Ãº\\.\\-' ]+)$","matchGroup":3},{"name":"postalCode","line":"startAtLast","pattern":"(I-|IT-)?([0-9]{5})","matchGroup":0}]};
ilib.data.address_JP = {"multiformat":true,"formats":{"default":{"latin":"{streetAddress}\n{locality}, {region} {postalCode}\n{country}","asian":"{country}{postalCode}\n{region}{locality}{streetAddress}"},"asian":{"asian":"{postalCode}\n{region}{locality}{streetAddress}","latin":"{streetAddress}\n{locality} {region} {postalCode}"}},"startAt":{"latin":"end","asian":"beginning"},"fields":{"latin":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{6}$"},{"name":"region","line":"last","pattern":["Hokkaido","Aomori","Iwate","Miyagi","Akita","Yamagata","Fukushima","Ibaraki","Tochigi","Gunma","Saitama","Chiba","TÅkyÅ","Kanagawa","Niigata","Toyama","Ishikawa","Fukui","Yamanashi","Nagano","Gifu","Shizuoka","Aichi","Toyama","Ishikawa","Fukui","Yamanashi","Nagano","Gifu","Shizuoka","Aichi","Mie","Shiga","KyÅto","Åsaka","HyÅgo","Nara","Wakayama","Tottori","Shimane","Okayama","Hiroshima","Yamaguchi","Fukuoka","Saga","Nagasaki","Kumamoto","Åita","Miyazaki","Kagoshima","Okinawa"]},{"name":"locality","line":"last","pattern":"[A-zÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã²Ã³Ã¹ÃºÄÄÄÄÇÇÄÄÄÄÄÄÄªÄ«Ä¬Ä­ÇÇÅÅÅÅÇÇÅªÅ«Å¬Å­ÇÇ\\-']+$"}],"asian":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{6}$"},{"name":"region","line":"startAtFirst","pattern":"^\\S{2}ç(\\w{2}å¿)?","matchGroup":0},{"name":"locality","line":"startAtFirst","pattern":"^(\\S{1,5}[å¸é®é])","matchGroup":0}]}};
ilib.data.address_KZ = {"formats":{"default":"{streetAddress}\n{locality}\n{region}\n{country}\n{postalCode}","nocountry":"{streetAddress}\n{locality}\n{region}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"[0-9]{6}"},{"name":"region","line":"last","pattern":["ÐÒÐ¼Ð¾Ð»Ð° Ð¾Ð±Ð»ÑÑÑ","ÐÒÑÓ©Ð±Ðµ Ð¾Ð±Ð»ÑÑÑ","ÐÐ»Ð¼Ð°ÑÑ ÒÐ°Ð»Ð°ÑÑ","ÐÐ»Ð¼Ð°ÑÑ Ð¾Ð±Ð»ÑÑÑ","ÐÑÑÐ°Ð½Ð° ÒÐ°Ð»Ð°ÑÑ","ÐÑÑÑÐ°Ñ Ð¾Ð±Ð»ÑÑÑ","ÐÐ°Ð¹ÒÐ¾Ò£ÑÑ ÒÐ°Ð»Ð°ÑÑ","Ð¨ÑÒÑÑ ÒÐ°Ð·Ð°ÒÑÑÐ°Ð½ Ð¾Ð±Ð»ÑÑÑ","ÐÐ°Ð¼Ð±ÑÐ» Ð¾Ð±Ð»ÑÑÑ","ÒÐ°ÑÐ°ÒÐ°Ð½Ð´Ñ Ð¾Ð±Ð»ÑÑÑ","ÒÐ¾ÑÑÐ°Ð½Ð°Ð¹ Ð¾Ð±Ð»ÑÑÑ","ÒÑÐ·ÑÐ»Ð¾ÑÐ´Ð° Ð¾Ð±Ð»ÑÑÑ","ÐÐ°Ò£ÒÑÑÑÐ°Ñ Ð¾Ð±Ð»ÑÑÑ","Ð¡Ð¾Ð»ÑÒ¯ÑÑÑÐº ÒÐ°Ð·Ð°ÒÑÑÐ°Ð½ Ð¾Ð±Ð»ÑÑÑ","ÐÐ°Ð²Ð»Ð¾Ð´Ð°Ñ Ð¾Ð±Ð»ÑÑÑ","ÐÒ£ÑÒ¯ÑÑÑÐº ÒÐ°Ð·Ð°ÒÑÑÐ°Ð½ Ð¾Ð±Ð»ÑÑÑ","ÐÐ°ÑÑÑ ÒÐ°Ð·Ð°ÒÑÑÐ°Ð½ Ð¾Ð±Ð»ÑÑÑ","ÐÐºÐ¼Ð¾Ð»Ð¸Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐºÑÑÐ±Ð¸Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð³Ð¾ÑÐ¾Ð´ ÐÐ»Ð¼Ð°ÑÑ","ÐÐ»Ð¼Ð°ÑÐ¸Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð³Ð¾ÑÐ¾Ð´ ÐÑÑÐ°Ð½Ð°","ÐÑÑÑÐ°ÑÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð³Ð¾ÑÐ¾Ð´ ÐÐ°Ð¹ÐºÐ¾Ð½ÑÑ","ÐÐ¾ÑÑÐ¾ÑÐ½Ð¾-ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ°Ð¼Ð±ÑÐ»ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ°ÑÐ°Ð³Ð°Ð½Ð´Ð¸Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ¾ÑÑÐ°Ð½Ð°Ð¹ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÐ·ÑÐ»Ð¾ÑÐ´Ð¸Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ°Ð½Ð³ÑÑÑÐ°ÑÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¡ÐµÐ²ÐµÑÐ¾-ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ°Ð²Ð»Ð¾Ð´Ð°ÑÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð®Ð¶Ð½Ð¾-ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ°Ð¿Ð°Ð´Ð½Ð¾-ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Akmola","Aktobe","Almaty","Almaty Province","Astana","Atyrau","Baikonur","East Kazakhstan","Jambyl","Karagandy","Kostanay","Kyzylorda","Mangystau","North Kazakhstan","Pavlodar","South Kazakhstan","West Kazakhstan"]},{"name":"locality","line":"last","pattern":"[ÐÐ°ÓÓÓÓÓÓÓÓÓÓÐÐ±ÐÐ²ÐÐ³ÒÒÐÑÒÒÓ¶Ó·ÒÒÐÐ´ÐÑÐÐµÐÑÐÑÓÓÒ¼Ò½Ò¾Ò¿ÐÑÐÐ¶ÓÓÒÒÓÓÐÐ·ÒÒÓÓÓ Ó¡ÐÑÐÐ¸ÐÑÓ¤Ó¥Ó¢Ó£ÐÑÐÑÓÓÐÐ¹ÒÒÐÑÐÐºÒÒÒÒÒ Ò¡ÓÓÒÒÐÐ»ÓÓÐÑÐÐ¼ÓÓÐÐ½ÓÓÒ¢Ò£ÓÓÒ¤Ò¥ÐÑÐÐ¾Ó¦Ó§Ó¨Ó©ÓªÓ«Ò¨Ò©ÐÐ¿Ò¦Ò§Ð ÑÒÒÐ¡ÑÒªÒ«Ð¢ÑÒ¬Ò­ÐÑÐÑÐ£ÑÐÑÓ²Ó³Ó°Ó±Ó®Ó¯Ò®Ò¯Ò°Ò±Ð¤ÑÐ¥ÑÒ²Ò³ÒºÒ»Ð¦ÑÒ´ÒµÐ§ÑÓ´ÓµÒ¶Ò·ÓÓÒ¸Ò¹ÐÑÐ¨ÑÐ©ÑÐªÑÐ«ÑÓ¸Ó¹Ð¬ÑÒÒÐ­ÑÓ¬Ó­Ð®ÑÐ¯Ñ\\.\\-\\s']+"}]};
ilib.data.address_KR = {"multiformat":true,"joinString":{"latin":", ","asian":" "},"formats":{"default":{"latin":"{streetAddress}\n{locality} {region} {postalCode}\n{country}","asian":"{country}\n{postalCode} {region} {locality} {streetAddress}"},"nocountry":{"asian":"{postalCode} {region} {locality} {streetAddress}","latin":"{streetAddress}\n{locality} {region} {postalCode}"}},"startAt":{"latin":"end","asian":"beginning"},"fields":{"latin":[{"name":"region","line":"last","pattern":["north chungcheong-do","n. chungcheong-do","n chungcheong-do","south chungcheong-do","s. chungcheong-do","s chungcheong-do","gangwon-do","gyeonggi-do","north gyeongsang-do","n. gyeongsang-do","n gyeongsang-do","south gyeongsang-do","s. gyeongsang-do","s gyeongsang-do","jeju-do","north jeolla-do","n. jeolla-do","n jeolla-do","south jeolla-do","s. jeolla-do","s jeolla-do","north chungcheong do","n. chungcheong do","n chungcheong do","south chungcheong do","s. chungcheong do","s chungcheong do","gangwon do","gyeonggi do","north gyeongsang do","n. gyeongsang do","n gyeongsang do","south gyeongsang do","s. gyeongsang do","s gyeongsang do","jeju do","north jeolla do","n. jeolla do","n jeolla do","south jeolla do","s. jeolla do","s jeolla do","north chungcheong","n. chungcheong","n chungcheong","south chungcheong","s. chungcheong","s chungcheong","gangwon","gyeonggi","north gyeongsang","n. gyeongsang","n gyeongsang","south gyeongsang","s. gyeongsang","s gyeongsang","jeju","north jeolla","n. jeolla","n jeolla","south jeolla","s. jeolla","s jeolla"]},{"name":"postalCode","line":"startAtLast","pattern":"\\(?[0-9]{3}-[0-9]{3}\\)?$"},{"name":"locality","line":"last","pattern":"([0-9]{3}-[0-9]{3})?\\s*([A-zÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã²Ã³Ã¹ÃºÄÄÄÄÇÇÄÄÄÄÄÄÄªÄ«Ä¬Ä­ÇÇÅÅÅÅÇÇÅªÅ«Å¬Å­ÇÇ\\-']+)$","matchGroup":2}],"asian":[{"name":"postalCode","line":"startAtFirst","pattern":"\\(?[0-9]{3}-[0-9]{3}\\)?"},{"name":"region","line":"first","pattern":"[\\u1100-\\u11FF\\uAC00-\\uD7AF\\.\\-']+ë"},{"name":"locality","line":"startAtFirst","pattern":"[\\u1100-\\u11FF\\uAC00-\\uD7AF\\.\\-']+"}]}};
ilib.data.address_LT = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"[AÄBCÄDEÄÄFGHIÄ®YJKLMNOPRSÅ TUÅ²ÅªVZÅ½aÄbcÄdeÄÄfghiÄ¯yjklmnoprsÅ¡tuÅ³Å«vzÅ¾\\.\\-\\s']+"},{"name":"postalCode","line":"last","pattern":"[0-9]{5}"}]};
ilib.data.address_LV = {"formats":{"default":"{streetAddress}\n{locality}, {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}, {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"((LV-)?[0-9]{4})"},{"name":"locality","line":"last","pattern":"[A-zÄÄÄÄÄÄÄ¢Ä£ÄªÄ«Ä¶Ä·Ä»Ä¼ÅÅÅÅÅ Å¡ÅªÅ«Å½Å¾\\.\\-\\s']+"}]};
ilib.data.address_MK = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"[ÐÐ°ÐÐ±ÐÐ²ÐÐ³ÒÒÐÐ´ÐÐµÐÑÐÐ¶ÐÐ·ÐÐ¸ÐÑÐÑÑÐÐ¹ÐÐºÐÐ»ÐÐ¼ÐÐ½ÐÐ¾ÐÐ¿Ð ÑÐ¡ÑÐ¢ÑÐ£ÑÐ¤ÑÐ¥ÑÐ¦ÑÐ§ÑÐ¨ÑÐ©ÑÐ¬ÑÐ®ÑÐ¯Ñ\\.\\-\\s']+"},{"name":"postalCode","line":"last","pattern":"[0-9]{4}"}]};
ilib.data.address_CN = {"multiformat":true,"formats":{"default":{"latin":"{streetAddress}\n{locality}, {region} {postalCode}\n{country}","asian":"{country}{postalCode}\n{region}{locality}{streetAddress}"},"asian":{"asian":"{postalCode}\n{region}{locality}{streetAddress}","latin":"{streetAddress}\n{locality} {region} {postalCode}"}},"startAt":{"latin":"end","asian":"beginning"},"fields":{"latin":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{6}$"},{"name":"region","line":"last","pattern":["heilongjiang","hÄilÃ³ngjiÄng","heilungkiang","jilin","jÃ­lÃ­n","kirin","liaoning","liÃ¡onÃ­ng","fengtien","qinghai","qÄ«nghÇi","tsinghai","gansu","gÄnsÃ¹","kansu","shaanxi","shÇnxÄ«","shensi","shanxi","shÄnxÄ«","shansi","hebei","hÃ©bÄi","hopeh","sichuan","sÃ¬chuÄn","szechuan","hubei","hÃºbÄi","hupeh","hena","hÃ©nÃ¡n","honan","shandong","shÄndÅng","shantung","anhui","ÄnhuÄ«","anhwei","jiangsu","jiÄngsÅ«","kiangsu","yunnan","yÃºnnÃ¡n","yunnan","guizhou","gÃ¹izhÅu","kweichow","hunan","hÃºnÃ¡n","hunan","jiangxi","jiÄngxÄ«","kiangsi","zhejiang","zhÃ¨jiÄng","chekiang","hainan","hÇinÃ¡n","hainan","guangdong","guÇngdÅng","kwangtung","fujian","fÃºjiÃ n","fukien","taiwan","tÃ¡iwÄn","taiwan","xÄ«njiÄng wÃ©iwÃº'Är zÃ¬zhÃ¬qÅ«","xinjiang weiwuer zizhiqu","xÄ«njiÄng wÃ©iwÃº'Är","xinjiang weiwuer","nÃ¨imÄnggÇ zÃ¬zhÃ¬qÅ«","neimenggu zizhiqu","nÃ¨imÄnggÇ","neimenggu","xÄ«zÃ ng zÃ¬zhÃ¬qÅ«","xizang zizhiqu","xÄ«zÃ ng","xizang","nÃ­ngxiÃ  huÃ­zÃº zÃ¬zhÃ¬qÅ«","ningxia huizu zizhiqu","nÃ­ngxiÃ  huÃ­zÃº","ningxia hui","guÇngxÄ« zhuÃ ngzÃº zÃ¬zhÃ¬qÅ«","guangxi zhuang zizhiqu","guÇngxÄ« zhuÃ ngzÃº","guangxi zhuang","hong kong","xiÄnggÇng","xianggang","hongkong","macau","Ã omÃ©n","aomen"]},{"name":"locality","line":"last","pattern":"[A-zÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã²Ã³Ã¹ÃºÄÄÄÄÇÇÄÄÄÄÄÄÄªÄ«Ä¬Ä­ÇÇÅÅÅÅÇÇÅªÅ«Å¬Å­ÇÇ\\-']+$"}],"asian":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{6}$"},{"name":"region","line":"startAtFirst","pattern":"^\\S{2}ç(\\w{2}å¿)?","matchGroup":0},{"name":"locality","line":"startAtFirst","pattern":"^(\\S{1,5}[å¸é®é])","matchGroup":0}]}};
ilib.data.address_NO = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"(NO-)?[0-9]{4}"},{"name":"locality","line":"last","pattern":"[AÃBDÃEÃFGHIÃJKLMNOÃPRSTUÃVXYÃÃÃÃaÃ¡bdÃ°eÃ©fghiÃ­jklmnoÃ³prstuÃºvxyÃ½Ã¾Ã¦Ã¶0-9//.-/s']+"}]};
ilib.data.address_NL = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","pattern":"([0-9]{4} [A-Z]{2}\\s+)?([A-zÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¤Ã¨Ã©Ã«Ã¬Ã­Ã²Ã³Ã¶Ã¹ÃºÃ¼Ã¿Å¸ÃÃÃÃÃ¢Ã§ÃªÃ®Ã¯Ã´Ã»\\.\\-']+?)$","line":"startAtLast","matchGroup":2},{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{4}\\s+[A-Z]{2}"}]};
ilib.data.address_RU = {"formats":{"default":"{streetAddress}\n{locality}\n{region}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}\n{region}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"([0-9]{6})$"},{"name":"region","line":"last","pattern":["ÐÐ¾ÑÐºÐ²Ð°","Ð¢ÑÐ¼ÐµÐ½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¥Ð°Ð½ÑÑ-ÐÐ°Ð½ÑÐ¸Ð¹ÑÐºÐ¸Ð¹ Ð°Ð²ÑÐ¾Ð½Ð¾Ð¼Ð½ÑÐ¹ Ð¾ÐºÑÑÐ³","ÐÐ¾ÑÐºÐ¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¡Ð°Ð½ÐºÑ-ÐÐµÑÐµÑÐ±ÑÑÐ³","Ð¡Ð²ÐµÑÐ´Ð»Ð¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¢Ð°ÑÐ°ÑÑÑÐ°Ð½","ÐÑÐ°ÑÐ½Ð¾Ð´Ð°ÑÑÐºÐ¸Ð¹ ÐºÑÐ°Ð¹","ÐÐ°ÑÐºÐ¾ÑÑÐ¾ÑÑÐ°Ð½","ÐÑÐ°ÑÐ½Ð¾ÑÑÑÐºÐ¸Ð¹ ÐºÑÐ°Ð¹","Ð¯Ð¼Ð°Ð»Ð¾-ÐÐµÐ½ÐµÑÐºÐ¸Ð¹ Ð°Ð²ÑÐ¾Ð½Ð¾Ð¼Ð½ÑÐ¹ Ð¾ÐºÑÑÐ³","Ð¡Ð°Ð¼Ð°ÑÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð§ÐµÐ»ÑÐ±Ð¸Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐµÑÐ¼ÑÐºÐ¸Ð¹ ÐºÑÐ°Ð¹","ÐÐ¸Ð¶ÐµÐ³Ð¾ÑÐ¾Ð´ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð Ð¾ÑÑÐ¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐµÐ¼ÐµÑÐ¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ¾Ð²Ð¾ÑÐ¸Ð±Ð¸ÑÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÐºÑÑÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ¾Ð»Ð³Ð¾Ð³ÑÐ°Ð´ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÐµÐ½Ð±ÑÑÐ³ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐµÐ½Ð¸Ð½Ð³ÑÐ°Ð´ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ¼ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¡Ð°ÑÐ°Ð»Ð¸Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¡Ð°ÑÐ°ÑÐ¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÐ¸Ð¼Ð¾ÑÑÐºÐ¸Ð¹ ÐºÑÐ°Ð¹","ÐÐµÐ»Ð³Ð¾ÑÐ¾Ð´ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¯ÐºÑÑÐ¸Ñ","ÐÐ¾Ð»Ð¾Ð³Ð¾Ð´ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÑÐ°Ð½Ð³ÐµÐ»ÑÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ° ÐÐ¾Ð¼Ð¸","Ð¥Ð°Ð±Ð°ÑÐ¾Ð²ÑÐºÐ¸Ð¹ ÐºÑÐ°Ð¹","ÐÐ»ÑÐ°Ð¹ÑÐºÐ¸Ð¹ ÐºÑÐ°Ð¹","ÐÐµÐ»Ð³Ð¾ÑÐ¾Ð´ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ¾ÑÐ¾Ð½ÐµÐ¶ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¢Ð¾Ð¼ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¡ÑÐ°Ð²ÑÐ¾Ð¿Ð¾Ð»ÑÑÐºÐ¸Ð¹ ÐºÑÐ°Ð¹","ÐÐ¸Ð¿ÐµÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¢ÑÐ»ÑÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÑÐ¼Ð°Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð£Ð´Ð¼ÑÑÑÐ¸Ñ","ÐÐ°Ð³ÐµÑÑÐ°Ð½","Ð¢Ð²ÐµÑÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð£Ð»ÑÑÐ½Ð¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ°Ð»Ð¸Ð½Ð¸Ð½Ð³ÑÐ°Ð´ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÑÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð§ÑÐ²Ð°ÑÐ¸Ñ","ÐÐ°Ð»ÑÐ¶ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð£Ð»ÑÑÐ½Ð¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ¸ÑÐ¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð ÑÐ·Ð°Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÑÑÐ°ÑÐ°Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐµÐ½Ð·ÐµÐ½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ°Ð±Ð°Ð¹ÐºÐ°Ð»ÑÑÐºÐ¸Ð¹ ÐºÑÐ°Ð¹","ÐÐ¼ÑÑÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÑÐ½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÑÑÑÐ¸Ñ","Ð¢Ð°Ð¼Ð±Ð¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¡Ð¼Ð¾Ð»ÐµÐ½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ°ÑÐµÐ»Ð¸Ñ","ÐÐ¾Ð²Ð³Ð¾ÑÐ¾Ð´ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÑÐ³Ð°Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÑÐ»Ð¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ¾ÑÐ´Ð¾Ð²Ð¸Ñ","ÐÐµÐ½ÐµÑÐºÐ¸Ð¹ Ð°Ð²ÑÐ¾Ð½Ð¾Ð¼Ð½ÑÐ¹ Ð¾ÐºÑÑÐ³","ÐÐ²Ð°Ð½Ð¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ¾ÑÑÑÐ¾Ð¼ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ°Ð¼ÑÐ°ÑÑÐºÐ¸Ð¹ ÐºÑÐ°Ð¹","Ð¥Ð°ÐºÐ°ÑÐ¸Ñ","ÐÑÐºÐ¾Ð²ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ°ÑÐ¸Ð¹ Ð­Ð»","Ð§ÐµÑÐ½Ñ","ÐÐ°Ð±Ð°ÑÐ´Ð¸Ð½Ð¾-ÐÐ°Ð»ÐºÐ°ÑÐ¸Ñ","Ð¡ÐµÐ²ÐµÑÐ½Ð°Ñ ÐÑÐµÑÐ¸Ñ","ÐÐ°Ð³Ð°Ð´Ð°Ð½ÑÐºÐ°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","ÐÐ´ÑÐ³ÐµÑ","ÐÐ°ÑÐ°ÑÐ°ÐµÐ²Ð¾-Ð§ÐµÑÐºÐµÑÐ¸Ñ","Ð§ÑÐºÐ¾ÑÑÐºÐ¸Ð¹ Ð°Ð²ÑÐ¾Ð½Ð¾Ð¼Ð½ÑÐ¹ Ð¾ÐºÑÑÐ³","ÐÐ²ÑÐµÐ¹ÑÐºÐ°Ñ Ð°Ð²ÑÐ¾Ð½Ð¾Ð¼Ð½Ð°Ñ Ð¾Ð±Ð»Ð°ÑÑÑ","Ð¢ÑÐ²Ð°","ÐÐ°Ð»Ð¼ÑÐºÐ¸Ñ","ÐÐ½Ð³ÑÑÐµÑÐ¸Ñ","Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ° ÐÐ»ÑÐ°Ð¹"]},{"name":"locality","line":"startAtLast","pattern":"([A-zÐÐ°ÐÐ±ÐÐ²ÐÐ³ÐÐ´ÐÐµÐÑÐÐ¶ÐÐ·ÐÐ¸ÐÐ¹ÐÐºÐÐ»ÐÐ¼ÐÐ½ÐÐ¾ÐÐ¿Ð ÑÐ¡ÑÐ¢ÑÐ£ÑÐ¤ÑÐ¥ÑÐ¦ÑÐ§ÑÐ¨ÑÐ©ÑÐªÑÐ«ÑÐ¬ÑÐ­ÑÐ®ÑÐ¯Ñ]+( [A-zÐÐ°ÐÐ±ÐÐ²ÐÐ³ÐÐ´ÐÐµÐÑÐÐ¶ÐÐ·ÐÐ¸ÐÐ¹ÐÐºÐÐ»ÐÐ¼ÐÐ½ÐÐ¾ÐÐ¿Ð ÑÐ¡ÑÐ¢ÑÐ£ÑÐ¤ÑÐ¥ÑÐ¦ÑÐ§ÑÐ¨ÑÐ©ÑÐªÑÐ«ÑÐ¬ÑÐ­ÑÐ®ÑÐ¯Ñ//-]+)?)$"}]};
ilib.data.address_PL = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([AÄBCÄDEÄFGHIJKLÅMNÅOÃPRSÅTUWYZÅ¹Å»aÄbcÄdeÄfghijklÅmnÅoÃ³prsÅtuwyzÅºÅ¼\\.\\-']+)? ?[AÄBCÄDEÄFGHIJKLÅMNÅOÃPRSÅTUWYZÅ¹Å»aÄbcÄdeÄfghijklÅmnÅoÃ³prsÅtuwyzÅºÅ¼\\.\\-']+)$","matchGroup":1},{"name":"postalCode","line":"last","pattern":"([0-9]{2}-[0-9]{3})"}]};
ilib.data.address_AO = {"formats":{"default":"{streetAddress}\n{locality}\n{country}","nocountry":"{streetAddress}\n{locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"[A-za-zÃÃZÃÃÃJXÃÃKÃWYÃÃÃÃÃ£Ã©zÃ¡Ã§ÃªjxÃ­Ã³kÃºwyÃµÃ Ã¢Ã´0-9'\"]+"}]};
ilib.data.address_BR = {"formats":{"default":"{streetAddress}\n{locality}-{region}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}-{region}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]{5}-[0-9]{3}"},{"name":"region","line":"last","pattern":["Acre","AC","Alagoas","AL","AmapÃ¡","AP","Amazonas","AM","Bahia","BA","CearÃ¡","CE","GoiÃ¡s","GO","EspÃ­rito Santo","ES","MaranhÃ£o","MA","Mato Grosso","MT","Mato Grosso do Sul","MS","Minas Gerais","MG","ParÃ¡","PA","ParaÃ­ba","PB","ParanÃ¡","PR","Pernambuco","PE","PiauÃ­","PI","Rio de Janeiro","RJ","Rio Grande do Norte","RN","Rio Grande do Sul","RS","RondÃ´nia","RO","RondÃ´nia","RO","Roraima","RR","SÃ£o Paulo","SP","Santa Catarina","SC","Sergipe","SE","Tocantins","TO"]},{"name":"locality","line":"last","pattern":"(([A-za-zÃÃZÃÃÃJXÃÃKÃWYÃÃÃÃÃ£Ã©zÃ¡Ã§ÃªjxÃ­Ã³kÃºwyÃµÃ Ã¢Ã´.']+)? ?[A-za-zÃÃZÃÃÃJXÃÃKÃWYÃÃÃÃÃ£Ã©zÃ¡Ã§ÃªjxÃ­Ã³kÃºwyÃµÃ Ã¢Ã´.']+( -)?)$","matchGroup":1}]};
ilib.data.address_CV = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{region}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}\n{region}"},"startAt":"end","fields":[{"name":"region","line":"last","pattern":["Boa Vista","Brava","Maio","Mosteiros","PaÃºl","Porto Novo","Praia","Ribeira Grande","Sal","Santa Catarina","Santa Cruz","SÃ£o Domingos","SÃ£o Filipe","SÃ£o Miguel","SÃ£o Nicolau","SÃ£o Vicente","Tarrafal","Santiago"]},{"name":"locality","line":"last","pattern":"([A-za-zÃÃZÃÃÃJXÃÃKÃWYÃÃÃÃÃ£Ã©zÃ¡Ã§ÃªjxÃ­Ã³kÃºwyÃµÃ Ã¢Ã´\\s.'\"]+)"},{"name":"postalCode","line":"last","pattern":"([0-9]{4})"}]};
ilib.data.address_PT = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"(([A-za-zÃÃZÃÃÃJXÃÃKÃWYÃÃÃÃÃ£Ã©zÃ¡Ã§ÃªjxÃ­Ã³kÃºwyÃµÃ Ã¢Ã´\\.\\-']+)? ?[A-za-zÃÃZÃÃÃJXÃÃKÃWYÃÃÃÃÃ£Ã©zÃ¡Ã§ÃªjxÃ­Ã³kÃºwyÃµÃ Ã¢Ã´\\.\\-']+)$","matchGroup":1},{"name":"postalCode","line":"startAtLast","pattern":"([0-9]{4}-[0-9]{3})"}]};
ilib.data.address_RO = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"last","pattern":"[A-zÄÄÃÃ¢ÃÃ®ÈÈÅÅÈÈÅ¢Å£\\.\\-\\s' ']+"},{"name":"postalCode","line":"last","pattern":"[0-9]{6}"}]};
ilib.data.address_RS = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{region}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}\n{region}"},"startAt":"end","fields":[{"name":"region","line":"last","pattern":["Vojvodina","Kosovo","Central Serbia","Vojvodina","Kosovo"]},{"name":"locality","line":"last","pattern":"[A-z\\.\\-'\\s]+"},{"name":"postalCode","line":"last","pattern":"[0-9]{5}"}]};
ilib.data.address_KG = {"formats":{"default":"{postalCode} {locality}\n{streetAddress}\n{country}","nocountry":"{postalCode} {locality}\n{streetAddress}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtFirst","pattern":"[0-9]{6}"},{"name":"locality","line":"first","pattern":"[ÐÐ°ÐÐ±ÐÐ²ÐÐ³ÒÒÐÐ´ÐÐµÐÑÐÐ¶ÐÐ·ÐÐ¸ÐÑÐÑÑÐÐ¹ÐÐºÐÐ»ÐÐ¼ÐÐ½ÐÐ¾ÐÐ¿Ð ÑÐ¡ÑÐ¢ÑÐ£ÑÐ¤ÑÐ¥ÑÐ¦ÑÐ§ÑÐ¨ÑÐ©ÑÐ¬ÑÐ®ÑÐ¯Ñ\\.\\-\\s']+"}]};
ilib.data.address_SK = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"(([BbCcÄÄDdÄÄFfGgHhJjKkLlÄ¹ÄºÄ½Ä¾MmNnÅÅPpQqRrÅÅSsÅ Å¡TtÅ¤Å¥VvWwXxZzÅ½Å¾AaÃÃ¡ÃÃ¤EeÃÃ©IiÃÃ­OoÃÃ³ÃÃ´UuÃÃºYyÃÃ½-])?[BbCcÄÄDdÄÄFfGgHhJjKkLlÄ¹ÄºÄ½Ä¾MmNnÅÅPpQqRrÅÅSsÅ Å¡TtÅ¤Å¥VvWwXxZzÅ½Å¾AaÃÃ¡ÃÃ¤EeÃÃ©IiÃÃ­OoÃÃ³ÃÃ´UuÃÃºYyÃÃ½-\\s']+([0-9])?)$","matchGroup":1},{"name":"postalCode","line":"last","pattern":"([0-9]{3} [0-9]{2})$"}]};
ilib.data.address_SI = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"[AaBbCcÄÄDdEeFfGgHhIiJjKkLlMmNnOoPpRrSsÅ Å¡TtUuVvZzÅ½Å¾-\\s']+"},{"name":"postalCode","line":"last","pattern":"(\\d{4})$"}]};
ilib.data.address_AL = {"formats":{"default":"{streetAddress}\n{postalCode}-{locality}\n{country}","nocountry":"{streetAddress}\n{postalCode}-{locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"[AaBbTstsChchDdDhdhÃÃ©EeFfGgGhghHhIiJjKkLlLlllMmNnGngnOoPpCcRrRrrrSsShshTtThthUuVvZzZhzhYyXxXhxh\\.\\-\\s']+"},{"name":"postalCode","line":"last","pattern":"[0-9]{4}"}]};
ilib.data.address_SE = {"formats":{"default":"{streetAddress}\n{postalCode} {locality}\n{country}","nocountry":"{streetAddress}\n{postalCode} {locality}"},"startAt":"end","fields":[{"name":"locality","line":"startAtLast","pattern":"([ABCDEFGHIJKLMNOPQRSTUVWXYZÃÃÃabcdefghijklmnopqrstuvwxyzÃ¥Ã¤Ã¶\\.\\-']+)","matchGroup":0},{"name":"postalCode","line":"last","pattern":"([0-9]{3} [0-9]{2})$","matchGroup":0}]};
ilib.data.address_TH = {"formats":{"default":"{streetAddress}\n{locality} {region} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {region} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"([0-9]{5})$","matchGroup":0},{"name":"region","line":"last","pattern":["Angthong","Ayutthaya","Bangkok","Cha Am","Chachoengsao","Chainat","Chonburi","Hua Hin","Kanchanaburi","Lopburi","Nakhonnayok","Nakhonpathom","Nonthaburi","Pathumthani","Prachin Buri","Prachuap Khiri Khan","Ratchaburi","Sakaeo","Samutprakan","Samutsakhon","Samutsongkhram","Saraburi","Singburi","Suphanburi","Chumphon","Koh Phangan","Koh Tao","Koh Phi Phi","Koh Samui","Krabi","Railey Beach","Koh Lanta","Nakornsrithamarat","Narathiwat","Pattani","Phang Nga","Khao Lak","Phattalung","Phuket","Ranong","Satun","Songkhla","Hat Yai","Suratthani","Trang","Yala","Chanthaburi","Chon Buri","Koh Chang, Trat","Pattaya","Phetchaburi","Rayong","Chiang Mai","Chiang Rai","Kamphaeng Phet","Lampang","Lamphun","Mae Hong Son","Nan","Nakhonsawan","Petchaboon","Phayao","Phichit","Phitsanulok","Phrae","Sukhothai","Tak","Uthai Thani","Uttaradit","Amnat Charoen","Buengkan","Buriram","Chaiyaphum","Kalasin","Khonkaen","Loei","Mahasarakham","Mukdahan","Nakhonphanom","Nakhonratchasima","Nongbualamphu","Nongkhai","Roiet","Sakhonnakhon","Sisaket","Surin","Ubonratchathani","Udonthani","Yasothon","à¸­à¹à¸²à¸à¸à¸­à¸","à¸­à¸¢à¸¸à¸à¸¢à¸²","à¸à¸£à¸¸à¸à¹à¸à¸à¸¯","à¸à¸°à¸­à¸³","à¸à¸°à¹à¸à¸´à¸à¹à¸à¸£à¸²","à¸à¸±à¸à¸«à¸§à¸±à¸à¸à¸±à¸¢à¸à¸²à¸","à¸à¸¥à¸à¸¸à¸£à¸µ","à¸«à¸±à¸§à¸«à¸´à¸","à¸à¸²à¸à¸à¸à¸à¸¸à¸£à¸µ","à¸à¸±à¸à¸«à¸§à¸±à¸à¸¥à¸à¸à¸¸à¸£à¸µ","à¸à¸±à¸à¸«à¸§à¸±à¸à¸à¸à¸£à¸à¸²à¸¢à¸","à¸à¸à¸£à¸à¸à¸¡","à¸à¸à¸à¸à¸¸à¸£à¸µ","à¸à¸±à¸à¸«à¸§à¸±à¸à¸à¸à¸¸à¸¡à¸à¸²à¸à¸µ","à¸à¸£à¸²à¸à¸µà¸à¸à¸¸à¸£à¸µ","à¸à¸£à¸°à¸à¸§à¸à¸à¸µà¸£à¸µà¸à¸±à¸à¸à¹","à¸£à¸²à¸à¸à¸¸à¸£à¸µ","à¸ªà¸£à¸°à¹à¸à¹à¸§","à¸ªà¸¡à¸¸à¸à¸£à¸à¸£à¸²à¸à¸²à¸£","à¸ªà¸¡à¸¸à¸à¸£à¸ªà¸²à¸à¸£","à¸ªà¸¡à¸¸à¸à¸£à¸ªà¸à¸à¸£à¸²à¸¡","à¸à¸±à¸à¸«à¸§à¸±à¸à¸ªà¸£à¸°à¸à¸¸à¸£à¸µ","à¸ªà¸´à¸à¸«à¹à¸à¸¸à¸£à¸µ","à¸ªà¸¸à¸à¸£à¸£à¸à¸à¸¸à¸£à¸µ","à¸à¸¸à¸¡à¸à¸£","à¹à¸à¸²à¸°à¸à¸°à¸à¸±à¸","à¹à¸à¸²à¸°à¹à¸à¹à¸²","à¹à¸à¸²à¸°à¸à¸µ à¸à¸µ","à¹à¸à¸²à¸°à¸ªà¸¡à¸¸à¸¢","à¸à¸£à¸°à¸à¸µà¹","à¸«à¸²à¸ à¹à¸£à¹à¹à¸¥à¸¢à¹","à¹à¸à¸²à¸°à¸¥à¸±à¸à¸à¸²","à¸à¸à¸£à¸¨à¸£à¸µà¸à¸£à¸£à¸¡à¸£à¸²à¸","à¸à¸±à¸à¸«à¸§à¸±à¸à¸à¸£à¸²à¸à¸´à¸§à¸²à¸ª","à¸à¸±à¸à¸«à¸§à¸±à¸à¸à¸±à¸à¸à¸²à¸à¸µ","à¸à¸±à¸à¸à¸² à¸à¸±à¸à¸à¸²","à¹à¸à¸²à¸«à¸¥à¸±à¸","à¸à¸±à¸à¸¥à¸¸à¸","à¸à¸±à¸à¸«à¸§à¸±à¸à¸ à¸¹à¹à¸à¹à¸","à¸£à¸°à¸à¸­à¸","à¸ªà¸à¸¹à¸¥","à¸ªà¸à¸à¸¥à¸²","à¸«à¸²à¸à¹à¸«à¸à¹","à¸ªà¸¸à¸£à¸²à¸©à¸à¸£à¹à¸à¸²à¸à¸µ","à¸à¸£à¸±à¸","à¸¢à¸°à¸¥à¸²","à¸à¸±à¸à¸à¸à¸¸à¸£à¸µ","à¸à¸¥à¸à¸¸à¸£à¸µ","à¹à¸à¸²à¸°à¸à¹à¸²à¸  à¸à¸£à¸²à¸","à¸à¸±à¸à¸¢à¸²","à¹à¸à¸à¸£à¸à¸¸à¸£à¸µ","à¸£à¸°à¸¢à¸­à¸","à¹à¸à¸µà¸¢à¸à¹à¸«à¸¡à¹","à¹à¸à¸µà¸¢à¸à¸£à¸²à¸¢","à¸à¸³à¹à¸à¸à¹à¸à¸à¸£","à¸¥à¸³à¸à¸²à¸","à¸¥à¸³à¸à¸¹à¸","à¹à¸¡à¹à¸®à¹à¸­à¸à¸ªà¸­à¸","à¸à¹à¸²à¸","à¸à¸à¸£à¸ªà¸§à¸£à¸£à¸à¹","à¹à¸à¸à¸£à¸à¸¹à¸£à¸à¹","à¸à¸°à¹à¸¢à¸²","à¸à¸´à¸à¸´à¸à¸£","à¸à¸´à¸©à¸à¸¸à¹à¸¥à¸","à¹à¸à¸£à¹","à¸ªà¸¸à¹à¸à¸à¸±à¸¢","à¸à¸²à¸","à¸­à¸¸à¸à¸±à¸¢à¸à¸²à¸à¸µ","à¸­à¸¸à¸à¸£à¸à¸´à¸à¸à¹","à¸­à¸³à¸à¸²à¸à¹à¸à¸£à¸´à¸","à¸à¸¶à¸à¸à¸²à¸¬","à¸à¸¸à¸£à¸µà¸£à¸±à¸¡à¸¢à¹","à¸à¸±à¸¢à¸ à¸¹à¸¡à¸´","à¸à¸²à¸¬à¸ªà¸´à¸à¸à¸¸à¹","à¸à¸­à¸à¹à¸à¹à¸","à¹à¸¥à¸¢","à¸¡à¸«à¸²à¸ªà¸²à¸£à¸à¸²à¸¡","à¸¡à¸¸à¸à¸à¸²à¸«à¸²à¸£","à¸à¸à¸£à¸à¸à¸¡","à¸à¸à¸£à¸£à¸²à¸à¸ªà¸µà¸¡à¸²","à¸«à¸à¸­à¸à¸à¸±à¸§à¸¥à¸³à¸ à¸¹","à¸«à¸à¸­à¸à¸à¸²à¸¢","à¸£à¹à¸­à¸¢à¹à¸­à¹à¸","à¸ªà¸à¸¥à¸à¸à¸£","à¸¨à¸£à¸µà¸ªà¸£à¸°à¹à¸à¸¨","à¸ªà¸¸à¸£à¸´à¸à¸à¸£à¹","à¸­à¸¸à¸à¸¥à¸£à¸²à¸à¸à¸²à¸à¸µ","à¸à¸±à¸à¸«à¸§à¸±à¸à¸­à¸¸à¸à¸£à¸à¸²à¸à¸µ","à¸¢à¹à¸ªà¸à¸£"]},{"name":"locality","line":"last","pattern":"(([A-Za-z-à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¥à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸® à¸°âà¸±âà¹ à¸²âà¸´âÌâÌâà¹âà¸¸âà¸¹à¹ à¹ à¹ à¹ à¸­à¸¢à¸§à¸¤à¸¤à¹à¸¦à¸¦à¹])? ?[A-Za-z-à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¥à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸® à¸°âà¸±âà¹ à¸²âà¸´âÌâÌâà¹âà¸¸âà¸¹à¹ à¹ à¹ à¹ à¸­à¸¢à¸§à¸¤à¸¤à¹à¸¦à¸¦à¹à¸­à¸³à¹à¸ à¸­à¹à¸¡à¸·]+)$","matchGroup":1}]};
ilib.data.address_TR = {"formats":{"default":"{streetAddress}\n{locality} {region} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {region} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"([0-9]{5})$","matchGroup":0},{"name":"region","line":"last","pattern":["Adana","Adiyaman","Afyonkarahisar","Agri","Aksaray","Amasya","Ankara","Antalya","Ardahan","Artvin","Aydin","Balikesir","Bartin","Batman","Bayburt","Bilecik","BingÃ¶l","Bitlis","Bolu","Burdur","Bursa","Ãanakkale","Ãankiri","Ãorum","Denizli","Diyarbakir","DÃ¼zce","Edirne","Elazig","Erzincan","Erzurum","Eskisehir","Gaziantep","Giresun","GÃ¼mÃ¼shane","Hakkari","Hatay","Igdir","Isparta","Istanbul","Izmir","Kahramanmaras","KarabÃ¼k","Karaman","Kars","Kastamonu","Kayseri","Kilis","Kirikkale","Kirklareli","Kirsehir","Kocaeli","Konya","KÃ¼tahya","Malatya","Manisa","Mardin","Mersin","Mugla","Mus","Nevsehir","Nigde","Ordu","Osmaniye","Rize","Sakarya","Samsun","Sanliurfa","Siirt","Sinop","Sirnak","Sivas","Tekirdag","Tokat","Trabzon","Tunceli","Usak","Van","Yalova","Yozgat","Zonguldak"]},{"name":"locality","line":"last","pattern":"(([ABCÃDEFGÄHIÄ°JKLMNOÃPRSÅTUÃVYZabcÃ§defgÄhÄ±ijklmnoÃ¶prsÅtuÃ¼vyz-]+)?[ABCÃDEFGÄHIÄ°JKLMNOÃPRSÅTUÃVYZabcÃ§defgÄhÄ±ijklmnoÃ¶prsÅtuÃ¼vyz-]+)$","matchGroup":0}]};
ilib.data.address_UA = {"formats":{"default":"{streetAddress}\n{locality}\n{postalCode}\n{country}","nocountry":"{streetAddress}\n{locality}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"[0-9]{5}"},{"name":"locality","line":"last","pattern":"[ÐÐ°ÐÐ±ÐÐ²ÐÐ³ÒÒÐÐ´ÐÐµÐÑÐÐ¶ÐÐ·ÐÐ¸ÐÑÐÑÐÐ¹ÐÐºÐÐ»ÐÐ¼ÐÐ½ÐÐ¾ÐÐ¿Ð ÑÐ¡ÑÐ¢ÑÐ£ÑÐ¤ÑÐ¥ÑÐ¦ÑÐ§ÑÐ¨ÑÐ©ÑÐ¬ÑÐ®ÑÐ¯Ñ\\.\\-'\\s]+"}]};
ilib.data.address_UZ = {"formats":{"default":"{streetAddress}\n{locality}\n{region}\n{country}\n{postalCode}","nocountry":"{streetAddress}\n{locality}\n{region}\n{postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"^([0-9{5})$","matchGroup":0},{"name":"region","line":"last","pattern":["Andijan","Bukhara","Fergana","Jizzakh","Xorazm","Namangan","Navoiy","Qashqadaryo","Karakalpakstan","Samarqand","Sirdaryo","Surxondaryo","Tashkent"]},{"name":"locality","line":"last","pattern":"[A-z\\.\\-'\\s]+"}]};
ilib.data.address_VN = {"formats":{"default":"{streetAddress}, {locality}, {region}, {postalCode}\n{country}","nocountry":"{streetAddress}, {locality}, {region}, {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"last","pattern":"([0-9]{6})$"},{"name":"region","line":"last","pattern":["An Giang","Báº¯c Giang","Báº¯c Káº¡n","Báº¡c LiÃªu","Báº¯c Ninh","BÃ  Rá»aâVÅ©ng TÃ u","Báº¿n Tre","BÃ¬nh Äá»nh","BÃ¬nh DÆ°Æ¡ng","BÃ¬nh PhÆ°á»c","BÃ¬nh Thuáº­n","CÃ  Mau","Cáº§n ThÆ¡ ","Cao Báº±ng","Da Nang ","Äáº¯k Láº¯k","Äáº¯k NÃ´ng","Äiá»n BiÃªn","Äá»ng Nai","Äá»ng ThÃ¡p","Gia Lai","HÃ  Giang","HÃ  Nam","HÃ  TÄ©nh","Háº£i DÆ°Æ¡ng","Hai Phong","Hanoi","Háº­u Giang","HÃ²a BÃ¬nh","Ho Chi Minh City","HÆ°ng YÃªn","KhÃ¡nh HÃ²a","KiÃªn Giang","Kon Tum","Lai ChÃ¢u","LÃ¢m Äá»ng","Láº¡ng SÆ¡n","LÃ o Cai","Long An","Nam Äá»nh","Nghá» An","Ninh BÃ¬nh","Ninh Thuáº­n","PhÃº Thá»","PhÃº YÃªn","Quáº£ng BÃ¬nh","Quáº£ng Nam","Quáº£ng NgÃ£i","Quáº£ng Ninh","Quáº£ng Trá»","SÃ³c TrÄng","SÆ¡n La","TÃ¢y Ninh","ThÃ¡i BÃ¬nh","ThÃ¡i NguyÃªn","Thanh HÃ³a","Thá»«a ThiÃªnâHuáº¿","Tiá»n Giang","TrÃ  Vinh","TuyÃªn Quang","VÄ©nh Long","VÄ©nh PhÃºc","YÃªn BÃ¡i"]},{"name":"locality","line":"last","pattern":"(([0-9AaÄÄáº­ÃÃ¢BbCcDdÄÄEeÃÃªGgHhIiKkLlMmNnOoÃÃ´Æ Æ¡PpQqRrSsTtUuÆ¯Æ°VvXxYy\\.\\-']+)? ? ([0-9AaÄÄÃÃ¢BbCcDdÄÄEeÃÃªGgHhIiKkLlMmNnOoÃÃ´Æ Æ¡PpQqRrSsTtUuÆ¯Æ°VvXxYy\\.\\-']+)? ?[0-9AaÄÄÃÃ¢BbCcDdÄÄEeÃÃªGgHhIiKkLlMmNnOoÃÃ´Æ Æ¡PpQqRrSsTtUuÆ¯Æ°VvXxYy\\.\\-']+)$"}]};
ilib.data.address_TW = {"multiformat":true,"formats":{"default":{"asian":"{country}\n{region}{locality}{streetAddress}{postalCode}","latin":"{streetAddress}\n{locality}, {region}, {postalCode}\n{country}"},"nocountry":{"asian":"{region}{locality}{streetAddress}{postalCode}","latin":"{streetAddress}\n{locality}, {region}, {postalCode}"}},"startAt":{"latin":"end","asian":"beginning"},"fields":{"latin":[{"name":"postalCode","line":"startAtLast","pattern":"(^[0-9]{3,5}|\\s+[0-9]{3,5})"},{"name":"region","line":"last","pattern":["Taiwan Province","TÃ¡iwÄn ShÄng","Taiwan Sheng","Taiwan","TÃ¡iwÄn","Fujian Province","FÃºjiÃ n ShÄng","Fujian Sheng","Fujian","FÃºjiÃ n"]},{"name":"locality","line":"last","pattern":"([Nn][Ee][Ww]\\s+)?[A-zÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¨Ã©Ã¬Ã­Ã²Ã³Ã¹ÃºÄÄÄÄÇÇÄÄÄÄÄÄÄªÄ«Ä¬Ä­ÇÇÅÅÅÅÇÇÅªÅ«Å¬Å­ÇÇ\\-']+(\\s+[Cc][Ii][Tt][Yy])?$","matchGroup":0}],"asian":[{"name":"postalCode","line":"startAtLast","pattern":"\\s*[0-9]{3,5}\\s*"},{"name":"region","line":"startAtFirst","pattern":"^\\S{2}ç(\\w{2}ç¸£)?"},{"name":"locality","line":"startAtFirst","pattern":"^\\S{1,5}[å¸é®é]"}]}};
ilib.data.address_XX = {"formats":{"default":"{streetAddress}\n{locality} {region} {postalCode}\n{country}","nocountry":"{streetAddress}\n{locality} {region} {postalCode}"},"startAt":"end","fields":[{"name":"postalCode","line":"startAtLast","pattern":"[0-9]+$"},{"name":"locality","line":"last","pattern":"[\\wÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã²Ã³Ã´Ã¹ÃºÃ»\\.\\-']+$"}]};
ilib.data.countries = {"afghanistan":"AF","aland islands":"AX","Ã¥land islands":"AX","albania":"AL","algeria":"DZ","american samoa":"AS","andorra":"AD","angola":"AO","anguilla":"AI","antigua and barbuda":"AG","antigua & barbuda":"AG","antigua":"AG","barbuda":"AG","argentina":"AR","armenia":"AM","aruba":"AW","australia":"AU","austria":"AT","azerbaijan":"AZ","bahamas":"BS","the bahamas":"BS","bahrain":"BH","bangladesh":"BD","barbados":"BB","belarus":"BY","belgium":"BE","belize":"BZ","benin":"BJ","bermuda":"BM","bhutan":"BT","bolivia, plurinational state of":"BO","plurinational state of bolivia":"BO","bolivia":"BO","bosnia and herzegovina":"BA","bosnia & herzegovina":"BA","bosnia":"BA","herzegovina":"BA","botswana":"BW","bouvet island":"BV","brazil":"BR","british indian ocean territory":"IO","brunei darussalam":"BN","brunei":"BN","bulgaria":"BG","burkina faso":"BF","burundi":"BI","cambodia":"KH","cameroon":"CM","canada":"CA","cape verde":"CV","cape verde islands":"CV","cayman islands":"KY","caymans":"KY","central african republic":"CF","c.a.r.":"CF","car":"CF","chad":"TD","chile":"CL","people's republic of china":"CN","republic of china":"TW","p. r. of china":"CN","p. r. china":"CN","p.r. of china":"CN","pr china":"CN","R.O.C.":"TW","ROC":"TW","prc":"CN","china":"CN","christmas island":"CX","cocos (keeling) islands":"CC","cocos islands":"CC","cocos and keeling islands":"CC","cocos & keeling islands":"CC","colombia":"CO","comoros":"KM","congo":"CD","congo, the democratic republic of the":"CD","congo, democratic republic of the":"CD","the democratic republic of the congo":"CD","democratic republic of the congo":"CD","drc":"CD","cook islands":"CK","costa rica":"CR","cote d'ivoire":"CI","cÃ´te d'ivoire":"CI","ivory coast":"CI","croatia":"HR","cuba":"CU","cyprus":"CY","the czech republic":"CZ","czech republic":"CZ","denmark":"DK","djibouti":"DJ","dominica":"DM","dominican republic":"DO","d.r.":"DO","dr":"DO","ecuador":"EC","egypt":"EG","el salvador":"SV","equatorial guinea":"GQ","eritrea":"ER","estonia":"EE","ethiopia":"ET","falkland islands":"FK","falklands":"FK","malvinas":"FK","faroe islands":"FO","faroes":"FO","fiji":"FJ","finland":"FI","france":"FR","french guiana":"GF","french polynesia":"PF","polynesia":"PF","french southern territories":"TF","gabon":"GA","gabonese republic":"GA","gambia":"GM","republic of the gambia":"GM","georgia":"GE","germany":"DE","ghana":"GH","gibraltar":"GI","greece":"GR","greenland":"GL","grenada":"GD","guadeloupe":"GP","guam":"GU","guatemala":"GT","guernsey":"GG","guinea":"GN","guinea-bissau":"GW","republic of guinea-bissau":"GW","guyana":"GY","cooperative republic of guyana":"GY","haiti":"HT","heard island and mcdonald islands":"HM","heard island & mcdonald islands":"HM","heard and mcdonald islands":"HM","heard island":"HM","mcdonald islands":"HM","holy see":"VA","vatican city state":"VA","vatican city":"VA","vatican":"VA","honduras":"HN","hong kong":"HK","hungary":"HU","iceland":"IS","india":"IN","indonesia":"ID","iran, islamic republic of":"IR","islamic republic of iran":"IR","iran":"IR","iraq":"IQ","republic of ireland":"IE","ireland":"IE","Ã©ire":"IE","isle of man":"IM","israel":"IL","italy":"IT","jamaica":"JM","japan":"JP","jersey":"JE","jordan":"JO","kazakhstan":"KZ","kenya":"KE","republic of kenya":"KE","kiribati":"KI","korea, democratic people's republic of":"KP","democratic people's republic of korea":"KP","dprk":"KP","north korea":"KP","korea, republic of":"KR","republic of korea":"KR","south korea":"KR","korea":"KR","kuwait":"KW","kyrgyzstan":"KG","lao people's democratic republic":"LA","laos":"LA","latvia":"LV","lebanon":"LB","lesotho":"LS","liberia":"LR","libyan arab jamahiriya":"LY","libya":"LY","liechtenstein":"LI","lithuania":"LT","luxembourg":"LU","macao":"MO","macedonia, the former yugoslav republic of":"MK","macedonia, former yugoslav republic of":"MK","the former yugoslav republic of macedonia":"MK","former yugoslav republic of macedonia":"MK","f.y.r.o.m.":"MK","fyrom":"MK","macedonia":"MK","madagascar":"MG","malawi":"MW","malaysia":"MY","maldives":"MV","mali":"ML","republic of mali":"ML","malta":"MT","marshall islands":"MH","marshalls":"MH","martinique":"MQ","mauritania":"MR","mauritius":"MU","mayotte":"YT","mexico":"MX","micronesia, federated states of":"FM","federated states of micronesia":"FM","micronesia":"FM","moldova, republic of":"MD","republic of moldova":"MD","moldova":"MD","monaco":"MC","mongolia":"MN","montenegro":"ME","montserrat":"MS","morocco":"MA","mozambique":"MZ","myanmar":"MM","namibia":"NA","nauru":"NR","nepal":"NP","holland":"NL","netherlands antilles":"AN","the netherlands":"NL","netherlands":"NL","new caledonia":"NC","new zealand":"NZ","nicaragua":"NI","niger":"NE","nigeria":"NG","norfolk island":"NF","northern mariana islands":"MP","marianas":"MP","norway":"NO","oman":"OM","pakistan":"PK","palau":"PW","palestinian territory, occupied":"PS","occupied palestinian territory":"PS","palestinian territory":"PS","palestinian authority":"PS","palestine":"PS","panama":"PA","papua new guinea":"PG","png":"PG","paraguay":"PY","peru":"PE","the philippines":"PH","philippines":"PH","pitcairn":"PN","poland":"PL","portugal":"PT","puerto rico":"PR","qatar":"QA","reunion":"RE","rÃ©union":"RE","romania":"RO","russian federation":"RU","russia":"RU","rwanda":"RW","saint barthÃ©lemy":"BL","saint barthelemy":"BL","saint barts":"BL","st. barthÃ©lemy":"BL","st. barthelemy":"BL","st. barts":"BL","st barthÃ©lemy":"BL","st barthelemy":"BL","st barts":"BL","saint helena, ascension and tristan da cunha":"SH","saint helena, ascension & tristan da cunha":"SH","saint helena":"SH","st. helena, ascension and tristan da cunha":"SH","st. helena, ascension & tristan da cunha":"SH","st. helena":"SH","st helena, ascension and tristan da cunha":"SH","st helena, ascension & tristan da cunha":"SH","st helena":"SH","ascension":"SH","tristan da cunha":"SH","saint kitts and nevis":"KN","saint kitts & nevis":"KN","saint kitts":"KN","st. kitts and nevis":"KN","st. kitts & nevis":"KN","st. kitts":"KN","st kitts and nevis":"KN","st kitts & nevis":"KN","st kitts":"KN","nevis":"KN","saint lucia":"LC","st. lucia":"LC","st lucia":"LC","saint martin":"MF","st. martin":"MF","st martin":"MF","saint pierre and miquelon":"PM","saint pierre & miquelon":"PM","saint pierre":"PM","st. pierre and miquelon":"PM","st. pierre & miquelon":"PM","st. pierre":"PM","st pierre and miquelon":"PM","st pierre & miquelon":"PM","st pierre":"PM","miquelon":"PM","saint vincent and the grenadines":"VC","saint vincent & the grenadines":"VC","saint vincent":"VC","st. vincent and the grenadines":"VC","st. vincent & the grenadines":"VC","st. vincent":"VC","st vincent and the grenadines":"VC","st vincent & the grenadines":"VC","st vincent":"VC","the grenadines":"VC","grenadines":"VC","samoa":"WS","san marino":"SM","sao tome and principe":"ST","sao tome & principe":"ST","sao tome":"ST","principe":"ST","saudi arabia":"SA","arabia":"SA","senegal":"SN","sÃ©nÃ©gal":"SN","serbia":"RS","seychelles":"SC","sierra leone":"SL","the republic of singapore":"SG","republic of singapore":"SG","singapore":"SG","slovakia":"SK","slovenia":"SI","solomon islands":"SB","solomons":"SB","somalia":"SO","south africa":"ZA","south georgia and the south sandwich islands":"GS","south georgia & the south sandwich islands":"GS","south georgia":"GS","the south sandwich islands":"GS","south sandwich islands":"GS","spain":"ES","sri lanka":"LK","the sudan":"SD","sudan":"SD","suriname":"SR","svalbard and jan mayen":"SJ","svalbard & jan mayen":"SJ","svalbard":"SJ","jan mayen":"SJ","swaziland":"SZ","sweden":"SE","switzerland":"CH","syrian arab republic":"SY","syria":"SY","taiwan":"TW","tajikistan":"TJ","tanzania, united republic of":"TZ","united republic of tanzania":"TZ","tanzania":"TZ","thailand":"TH","timor-leste":"TL","east timor":"TL","togo":"TG","tokelau":"TK","tonga":"TO","trinidad and tobago":"TT","trinidad & tobago":"TT","trinidad":"TT","tobago":"TT","tunisia":"TN","turkey":"TR","turkmenistan":"TM","turks and caicos islands":"TC","turks & caicos islands":"TC","turks islands":"TC","turk islands":"TC","caicos islands":"TC","caico islands":"TC","tuvalu":"TV","uganda":"UG","ukraine":"UA","united arab emirates":"AE","u.a.e.":"AE","uae":"AE","dubai":"AE","united kingdom":"GB","u.k.":"GB","uk":"GB","great britain":"GB","g.b.":"GB","gb":"GB","england":"GB","scotland":"GB","wales":"GB","united states":"US","united states of america":"US","u.s.a.":"US","usa":"US","united states minor outlying islands":"UM","uruguay":"UY","uzbekistan":"UZ","vanuatu":"VU","venezuela, bolivarian republic of":"VE","bolivarian republic of venezuela":"VE","venezuela":"VE","viet nam":"VN","vietnam":"VN","british virgin islands":"VG","virgin islands, british":"VG","bvis":"VG","b.v.i.":"VG","bvi":"VG","virgin islands, us":"VI","the us virgin islands":"VI","us virgin islands":"VI","virgin islands":"VI","usvi":"VI","wallis and futuna":"WF","wallis & futuna":"WF","wallis":"WF","futuna":"WF","western sahara":"EH","yemen":"YE","zambia":"ZM","zimbabwe":"ZW"};
ilib.data.nativecountries = {"Ø§ÙØºØ§ÙØ³ØªØ§Ù":"AF","Ã¥landsÃ¸erne":"AX","shqipÃ«ri":"AL","algÃ©rie":"DZ","Ø§ÙØ¬Ø²Ø§Ø¦Ø±":"DZ","principat d'andorra":"AD","repÃºblica de angola":"AO","repubilika ya ngola":"AO","ÕÕ¡ÕµÕ¡Õ½Õ¿Õ¡Õ¶":"AM","Ã¶sterreich":"AT","azÉrbaycan":"AZ","Ø§ÙØ¨Ø­Ø±ÙÙ":"BH","à¦¬à¦¾à¦à¦²à¦¾à¦¦à§à¦¶":"BD","à¦à¦£à¦ªà§à¦°à¦à¦¾à¦¤à¦¨à§à¦¤à§à¦°à§ à¦¬à¦¾à¦à¦²à¦¾à¦¦à§à¦¶":"BD","gÃ´noprojatontri bangladesh":"BD","Ð±ÐµÐ»Ð°ÑÑÑÑ":"BY","belgiÃ«":"BE","la belgique":"BE","belgique":"BE","rÃ©publique du bÃ©nin":"BJ","bÃ©nin":"BJ","à½ à½à¾²à½´à½à¼à½¡à½´à½£à¼":"BT","bulivya mamallaqta":"BO","estado plurinacional de bolivia":"BO","wuliwya suyu":"BO","bosna i hercegovina":"BA","Ð±Ð¾ÑÐ½Ð° Ð¸ ÑÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°":"BA","lefatshe la botswana":"BW","bouvetÃ¸ya":"BV","brasil":"BR","negara brunei darussalam":"BN","Ð±ÑÐ»Ð³Ð°ÑÐ¸Ñ":"BG","republika y'u burundi":"BI","rÃ©publique du burundi":"BI","áááááá¶áá¶áá¶ááááááááá»áá¶":"KH","preÄh rÃ©achÃ©anachÃ¢k kÃ¢mpÅ­chÃ©a":"KH","kÃ¢mpÅ­chÃ©a":"KH","cameroun":"CM","cabo verde":"CV","islas de cabo verde":"CV","rÃ©publique centrafricaine":"CF","kÃ¶dÃ¶rÃ¶sÃªse tÃ® bÃªafrÃ®ka":"CF","rÃ©publique du tchad":"TD","tchad":"TD","Ø¬ÙÙÙØ±ÙØ© ØªØ´Ø§Ø¯":"TD","Ç§umhÅ«riyyat tÅ¡Äd":"TD","tÅ¡Äd":"TD","ä¸­åäººæ°å±åå½ä¸­å½":"CN","å±ååçä¸­å":"TW","å°ç£ç":"TW","ä¸­å½":"CN","union des comores":"KM","udzima wa komori":"KM","Ø§ÙØ§ØªØ­Ø§Ø¯ Ø§ÙÙÙØ±Ù":"KM","al-ittiá¸¥Äd al-qumurÄ«/qamarÄ«":"KM","rÃ©publique du congo":"CG","repubilika ya kongo":"CG","republiki ya kongÃ³":"CG","kongo":"CG","kongÃ³":"CG","rÃ©publique dÃ©mocratique du congo":"CD","kÅ«ki 'Äirani":"CK","cote-d'ivoire":"CI","cÃ´te-d'ivoire":"CI","hrvatska":"HR","ÎºÏÏÏÎ¹Î±ÎºÎ® Î´Î·Î¼Î¿ÎºÏÎ±ÏÎ¯Î±":"CY","kypriakÃ­ dimokratÃ­a":"CY","kÄ±brÄ±s cumhuriyeti":"CY","ÄeskÃ¡ republika":"CZ","danmark":"DK","Ø¬ÙÙÙØ±ÙØ© Ø¬ÙØ¨ÙØªÙ":"DJ","jumhÅ«riyyat jÄ«bÅ«tÄ«":"DJ","rÃ©publique de djibouti":"DJ","jamhuuriyadda jabuuti":"DJ","gabuutih ummuuno":"DJ","jÄ«bÅ«tÄ«":"DJ","djibouti":"DJ","jabuuti":"DJ","gabuutih":"DJ","Commonwealth de la Dominique":"DM","Dominique":"DM","repÃºblica dominicana":"DO","ÙØµØ±":"EG","repÃºblica de guinea ecuatorial":"GQ","rÃ©publique de guinÃ©e Ã©quatoriale":"GQ","guinea ecuatorial":"GQ","guinÃ©e Ã©quatoriale":"GQ","ááá¨ á¤á­áµá«":"ER","hagere ertra":"ER","Ø¯ÙÙØ© Ø¥Ø±ØªØ±ÙØ§":"ER","dawlat iritrÄ«ya":"ER","eesti":"EE","á¨á¢áµá®áµá« áá´á«áá á²áá­á«á²á«á áªáá¥áá­":"ET","ye-Ä«tyÅá¹á¹yÄ fÄdÄralÄwÄ« dÄ«mÅkrÄsÄ«yÄwÄ« rÄ«peblÄ«k":"ET","á¨á¢áµá®áµá«":"ET","ye-Ä«tyÅá¹á¹yÄ":"ET","malvinas":"FK","fÃ¦rÃ¸erne":"FO","matanitu ko viti":"FJ","fijÄ« ripablik":"FJ","à¤«à¤¼à¤¿à¤à¥ à¤à¤£à¤°à¤¾à¤à¥à¤¯":"FJ","suomi":"FI","guyane franÃ§aise":"GF","polynÃ©sie franÃ§aise":"PF","terres australes franÃ§aises":"TF","rÃ©publique gabonaise":"GA","á¡áá¥áá áááááá¡":"GE","deutschland":"DE","ÎµÎ»Î»Î¬Î´Î±":"GR","grÃ¸nland":"GL","rÃ©publique de guinÃ©e":"GN","repÃºblica da guinÃ©-bissau":"GW","haÃ¯ti":"HT","ayiti":"HT","santa sede":"VA","cittÃ  del vaticano":"VA","vaticano":"VA","é¦æ¸¯ç":"HK","magyarorszÃ¡g":"HU","Ã­sland":"IS","à¤­à¤¾à¤°à¤¤":"IN","Ø¬ÙÙÙØ±Û Ø§Ø³ÙØ§ÙÛ Ø§ÛØ±Ø§Ù":"IR","Ø§ÛØ±Ø§Ù":"IR","Ø§ÙØ¹Ø±Ø§Ù":"IQ","Ã©ire":"IE","××©×¨××":"IL","italia":"IT","æ¥æ¬":"JP","Ø§ÙØ£Ø±Ø¯Ù":"JO","ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½":"KZ","jamhuri ya kenya":"KE","ribaberiki kiribati":"KI","ì¡°ì  ë¯¼ì£¼ì£¼ì ì¸ë¯¼ ê³µíêµ­":"KP","ë¶í":"KP","ëíë¯¼êµ­":"KR","íêµ­":"KR","Ø§ÙÙÙÙØª":"KW","ÐºÑÑÐ³ÑÐ· ÑÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ":"KG","kÄ±rgÄ±z respublikasÄ±":"KG","ÐºÑÑÐ³ÑÐ·ÑÐºÐ°Ñ ÑÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"KG","kyrgyzskaya respublika":"KG","àºªàº²àºàº²àº¥àº°àºàº°àº¥àº±àº àºàº°àºàº²àºàº´àºàº°à»àº àºàº°àºàº²àºàº»àºàº¥àº²àº§":"LA","sathalanalat paxathipatai paxaxon lao":"LA","latvija":"LV","ÙØ¨ÙØ§Ù":"LB","muso oa lesotho":"LS","ÙÙØ¨ÙØ§":"LY","lietuva":"LT","luxemburg":"LU","macau":"MO","æ¾³é¨":"MO","æ¾³é":"MO","Ð¿Ð¾ÑÐ°Ð½ÐµÑÐ½Ð° ÑÑÐ³Ð¾ÑÐ»Ð¾Ð²ÐµÐ½ÑÐºÐ° ÑÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ° Ð¼Ð°ÐºÐµÐ´Ð¾Ð½Ð¸ÑÐ°":"MK","Ð¼Ð°ÐºÐµÐ´Ð¾Ð½Ð¸ÑÐ°":"MK","repoblikan'i madagasikara":"MG","rÃ©publique de madagascar":"MG","chalo cha malawi":"MW","dziko la malaÅµi":"MW","malaÅµi":"MW","ÞÞ¨ÞÞ¬ÞÞ¨ÞÞ§ÞÞ°ÞÞ­ÞÞ¬ ÞÞªÞÞ°ÞÞ«ÞÞ¨ÞÞ°ÞÞ§":"MV","dhivehi raa'jeyge jumhooriyya":"MV","rÃ©publique du mali":"ML","mali ka fasojamana":"ML","Ø§ÙØ¬ÙÙÙØ±ÙØ© Ø§ÙØ¥Ø³ÙØ§ÙÙØ© Ø§ÙÙÙØ±ÙØªØ§ÙÙØ©":"MR","al-Ç§umhÅ«riyyah al-Ê¾islÄmiyyah al-mÅ«rÄ«tÄniyyah":"MR","rÃ©publique islamique de mauritanie":"MR","republik bu lislaamu bu gÃ nnaar":"MR","republik moris":"MU","rÃ©publique de maurice":"MU","mÃ©xico":"MX","republica moldova":"MD","mongÎ³ol ulus":"MN","Ð¼Ð¾Ð½Ð³Ð¾Ð» ÑÐ»Ñ":"MN","mongol uls":"MN","crna gora":"ME","ÑÑÐ½Ð° Ð³Ð¾ÑÐ°":"ME","ÙØºØ±Ø¨Ù":"MA","repÃºblica de moÃ§ambique":"MZ","moÃ§ambique":"MZ","pyidaunzu thanmÄda myÄma nainngandaw":"MM","burma":"MM","republiek van namibiÃ«":"NA","republik namibia":"NA","namibiÃ«":"NA","ripublik naoero":"NR","à¤¸à¤à¥à¤à¥à¤¯ à¤²à¥à¤à¤¤à¤¾à¤¨à¥à¤¤à¥à¤°à¤¿à¤ à¤à¤£à¤¤à¤¨à¥à¤¤à¥à¤° à¤¨à¥à¤ªà¤¾à¤²":"NP","sanghiya loktÄntrik ganatantra nepÄl":"NP","nepÄl":"NP","nederland":"NL","nouvelle-calÃ©donie":"NC","la calÃ©donie":"NC","calÃ©donie":"NC","aotearoa":"NZ","jamhuriyar nijar":"NE","nijar":"NE","jamhuriyar tarayyar najeriya":"NG","njÃ­ká»tÃ¡ á»chÃ­chÃ¬iwÃº nÃ á»jÃ­rÃ­Ã ":"NG","Ã papá»Ì olÃ³mÃ¬nira iláº¹Ì nÃ Ã¬jÃ­rÃ­Ã ":"NG","nÃ á»jÃ­rÃ­Ã ":"NG","nÃ Ã¬jÃ­rÃ­Ã ":"NG","norge":"NO","Ø³ÙØ·ÙØ© Ø¹ÙØ§Ù":"OM","Ù¾Ø§Ú©Ø³ØªØ§Ù":"PK","beluu Är a belau":"PW","belau":"PW","panamÃ¡":"PA","independen stet bilong papua niugini":"PG","papua niugini":"PG","perÃº":"PE","las filipinas":"PH","filipinas":"PH","polska":"PL","ÙØ·Ø±":"QA","romÃ¢nia":"RO","ÑÑÑÑÐºÐ¸Ð¹ Ð¤ÐµÐ´ÐµÑÐ°ÑÐ¸Ð¸":"RU","ÑÐ¾ÑÑÐ¸Ñ":"RU","repubulika y'u rwanda":"RW","rÃ©publique du rwanda":"RW","saint-barthÃ©lemy":"BL","saint barth":"BL","saint-martin":"MF","sint maarten":"MF","saint-pierre-et-miquelon":"PM","malo sa'oloto tuto'atasi o samoa":"WS","san marino":"SM","sao tome and principe":"ST","sao tome & principe":"ST","sao tome":"ST","principe":"ST","Ø§ÙØ³Ø¹ÙØ¯ÙØ© Ø¬Ø²ÙØ±Ù Ø§ÙØ¹Ø±Ø¨":"SA","arabia":"SA","senegal":"SN","sÃ©nÃ©gal":"SN","serbia":"RS","seychelles":"SC","sierra leone":"SL","æ°å å¡å±åå½":"SG","æ°å å¡ç":"SG","slovensko":"SK","slovenija":"SI","solomon islands":"SB","solomons":"SB","somalia":"SO","suid-afrika":"ZA","espaÃ±a":"ES","sri lanka":"LK","the sudan":"SD","sudan":"SD","suriname":"SR","svalbard and jan mayen":"SJ","svalbard & jan mayen":"SJ","svalbard":"SJ","jan mayen":"SJ","swaziland":"SZ","sverige":"SE","die schweiz":"CH","schweiz":"CH","la suisse":"CH","suisse":"CH","svizzera":"CH","Ø³ÙØ±ÙØ§":"SY","taiwan, province of china":"TW","taiwan":"TW","tajikistan":"TJ","tanzania, united republic of":"TZ","united republic of tanzania":"TZ","tanzania":"TZ","à¸à¸£à¸°à¹à¸à¸¨à¹à¸à¸¢":"TH","timor-leste":"TL","east timor":"TL","togo":"TG","tokelau":"TK","tonga":"TO","trinidad and tobago":"TT","trinidad & tobago":"TT","trinidad":"TT","tobago":"TT","ØªÙÙØ³":"TN","tÃ¼rkiye":"TR","turkmenistan":"TM","tuvalu":"TV","uganda":"UG","ÑÐºÑÐ°ÑÐ½Ð°":"UA","Ø§ÙØ§ÙØ§Ø±Ø§Øª Ø§ÙØ¹Ø±Ø¨ÙØ© Ø§ÙÙØªØ­Ø¯Ø©":"AE","Ø¯Ø¨Ù":"AE","albain":"GB","cymru":"GB","uruguay":"UY","uzbekistan":"UZ","vanuatu":"VU","viá»t nam":"VN","western sahara":"EH","ÙÙÙÙ":"YE","zambia":"ZM","zimbabwe":"ZW"};
ilib.data.ctrynames_af = {"AsiÃ«":"142","Sentraal-AsiÃ«":"143","Wes-AsiÃ«":"145","Europa":"150","Oos-Europa":"151","Noord-Europa":"154","Wes-Europa":"155","Latyns Amerika":"419","WÃªreld":"001","Afrika":"002","Noord-Amerika":"003","Suid-Amerika":"005","OseaniÃ«":"009","Wes-Afrika":"011","Sentraal-Amerika":"013","Oos-Afrika":"014","Noord-Afrika":"015","Midde-Afrika":"017","Suider-Afrika":"018","Amerikas":"019","Noordelike Amerika":"021","Karibbies":"029","Oos-AsiÃ«":"030","Suid-AsiÃ«":"034","Suidoos-AsiÃ«":"035","Suid-Europa":"039","AustralasiÃ«":"053","MelanesiÃ«":"054","Mikronesiese streek":"057","PolinesiÃ«":"061","Ascension-eiland":"AC","Andorra":"AD","Verenigde Arabiese Emirate":"AE","Afganistan":"AF","Antigua en Barbuda":"AG","Anguilla":"AI","AlbaniÃ«":"AL","ArmeniÃ«":"AM","Nederlands-Antille":"AN","Angola":"AO","Antarktika":"AQ","ArgentiniÃ«":"AR","Amerikaans Samoa":"AS","Oostenryk":"AT","AustraliÃ«":"AU","Aruba":"AW","Ãland-eilande":"AX","Aserbeidjan":"AZ","BosniÃ« en Herzegowina":"BA","Barbados":"BB","Bangladesj":"BD","BelgiÃ«":"BE","Boerkina Fasso":"BF","Bulgarye":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","Sint BarthÃ©lemy":"BL","Bermuda":"BM","Broenei":"BN","BoliviÃ«":"BO","Karibiese Nederland":"BQ","BrasiliÃ«":"BR","Bahamas":"BS","Bhoetan":"BT","Bouveteiland":"BV","Botswana":"BW","Wit-Rusland":"BY","Belize":"BZ","Kanada":"CA","Cocos- [Keeling] eilande":"CC","Demokratiese Republiek van die Kongo":"CD","Sentraal-Afrikaanse Republiek":"CF","Kongo":"CG","Switserland":"CH","Ivoorkus":"CI","Cookeilande":"CK","Chili":"CL","Kameroen":"CM","Sjina":"CN","KolombiÃ«":"CO","Clipperton-eiland":"CP","Costa Rica":"CR","Kuba":"CU","Kaap Verde":"CV","CuraÃ§ao":"CW","Kerseiland":"CX","Ciprus":"CY","Tjeggiese Republiek":"CZ","Duitsland":"DE","Diego Garcia":"DG","Djiboeti":"DJ","Denemarke":"DK","Dominika":"DM","Dominikaanse Republiek":"DO","AlgeriÃ«":"DZ","Ceuta en Melilla":"EA","Ecuador":"EC","Estland":"EE","Egipte":"EG","Wes-Sahara":"EH","Eritrea":"ER","Spanje":"ES","EthiopiÃ«":"ET","Europese Unie":"EU","Finland":"FI","Fidji":"FJ","Falklandeilande":"FK","MikronesiÃ«":"FM","FaroÃ«reilande":"FO","Frankryk":"FR","Gaboen":"GA","Groot-Brittanje":"GB","Grenada":"GD","GeorgiÃ«":"GE","Frans-Guyana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","Groenland":"GL","GambiÃ«":"GM","Guinee":"GN","Guadeloupe":"GP","Ekwatoriaal-Guinee":"GQ","Griekeland":"GR","Suid-GeorgiÃ« en die Suid-Sandwich-eilande":"GS","Guatemala":"GT","Guam":"GU","Guinee-Bissau":"GW","Guyana":"GY","Hongkong":"HK","Heard-eiland en McDonald-eilande":"HM","Honduras":"HN","KroasiÃ«":"HR","HaÃ¯ti":"HT","Hongarye":"HU","Kanarie-eilande":"IC","IndonesiÃ«":"ID","Ierland":"IE","Israel":"IL","Eiland Man":"IM","IndiÃ«":"IN","Britse Indiese Oseaan Gebied":"IO","Irak":"IQ","Iran":"IR","Ysland":"IS","ItaliÃ«":"IT","Jersey":"JE","Jamaika":"JM","JordaniÃ«":"JO","Japan":"JP","Kenia":"KE","KirgisiÃ«":"KG","Kambodja":"KH","Kiribati":"KI","Comore":"KM","Saint Kitts en Nevis":"KN","Noord-Korea":"KP","Suid-Korea":"KR","Koeweit":"KW","Kaaimanseilande":"KY","Kasakstan":"KZ","Laos":"LA","Libanon":"LB","Sint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","LiberiÃ«":"LR","Lesotho":"LS","Litaue":"LT","Luxemburg":"LU","Letland":"LV","LibiÃ«":"LY","Marokko":"MA","Monaco":"MC","Moldova":"MD","Montenegro":"ME","Sint Martin":"MF","Madagaskar":"MG","Marshall-eilande":"MH","MacedoniÃ«":"MK","Mali":"ML","Mianmar":"MM","MongoliÃ«":"MN","Macau SAR China":"MO","Noordelike Marianaeilande":"MP","Martinique":"MQ","MouritaniÃ«":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maledive":"MV","Malawi":"MW","Meksiko":"MX","MaleisiÃ«":"MY","Mosambiek":"MZ","NamibiÃ«":"NA","Nieu-KaledoniÃ«":"NC","Niger":"NE","Norfolk-eiland":"NF","NigeriÃ«":"NG","Nicaragua":"NI","Nederland":"NL","NoorweÃ«":"NO","Nepal":"NP","Naoeroe":"NR","Niue":"NU","Nieu-Seeland":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Frans-PolinesiÃ«":"PF","Papoea Nieu-Guinee":"PG","Filippyne":"PH","Pakistan":"PK","Pole":"PL","Sint-Pierre en Miquelon":"PM","Pitcairn":"PN","Puerto Rico":"PR","Palestina":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Katar":"QA","Omliggende OseaniÃ«":"QO","RÃ©union":"RE","RoemeniÃ«":"RO","SerwiÃ«":"RS","Rusland":"RU","Rwanda":"RW","Saoedi-ArabiÃ«":"SA","Solomon Eilande":"SB","Seychelle":"SC","Soedan":"SD","Swede":"SE","Singapoer":"SG","Sint Helena":"SH","SloweniÃ«":"SI","Svalbard en Jan Mayen":"SJ","Slowakye":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","SomaliÃ«":"SO","Suriname":"SR","Suid-Soedan":"SS","Sao Tome en Principe":"ST","Salvador":"SV","Sint Maarten":"SX","SiriÃ«":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Turks en Caicos Eilande":"TC","Tsjaad":"TD","Franse Suidelike Gebiede":"TF","Togo":"TG","Thailand":"TH","Tadjikistan":"TJ","Tokelau":"TK","Oos-Timor":"TL","TurkmeniÃ«":"TM","TunisiÃ«":"TN","Tonga":"TO","Turkye":"TR","Trinidad en Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","TanzaniÃ«":"TZ","Oekraine":"UA","Uganda":"UG","VS klein omliggende eilande":"UM","Verenigde State van Amerika":"US","Uruguay":"UY","Oesbekistan":"UZ","Vatikaan":"VA","Saint Vincent en die Grenadine":"VC","Venezuela":"VE","Britse Maagde-eilande":"VG","V.S. Maagde-eilande":"VI","ViÃ«tnam":"VN","Vanuatu":"VU","Wallis en Futuna":"WF","Samoa":"WS","Jemen":"YE","Mayotte":"YT","Suid-Afrika":"ZA","ZambiÃ«":"ZM","Zimbabwe":"ZW","Onbekend gebied":"ZZ"};
ilib.data.ctrynames_agq = {"ÃndolÃ ":"AD","YÃ¹naetÉ Alab ÉmelÉÌ":"AE","ÃfÉ¨ÌganÃ¬sÉ¨ÌtÃ¢n":"AF","ÃntigwÃ  Ã  BÃ budÃ ":"AG","ÃÅgwilÃ ":"AI","ÃabÉnÃ¬a":"AL","ÃmÉnyÃ¬a":"AM","NedÃ lÃ¢n AntÃ e":"AN","ÃÅgolÃ ":"AO","ÃdzÉÌntinÃ ":"AR","ÃmÉlekan SamwÃ ":"AS","UsÉ¨tÉ¨ÌlÃ ":"AT","ÃsÉ¨ÌtÉÌlÉlÃ¬a":"AU","ÃlubÃ ":"AW","ÃzÉ¨bÉÌdzÃ¢n":"AZ","BosÉ¨nyÃ¬a Ã  HÉÌzÉÌgÃ²vinÃ ":"BA","BÃ badÃ²s":"BB","BaÅgÉ¨ÌlÃ dÉÌ":"BD","BÉÉdzwÃ¹m":"BE","BÃ¹kinÃ  FasÃ²":"BF","BÃ¹ugÉlÃ¬a":"BG","BÃ laen":"BH","BÃ¹lundÃ¬":"BI","BÉÌnÉ¨ÌÅ":"BJ","BÉÌmudÃ ":"BM","BÉ¨ÌlunÃ¨":"BN","BÃ²levÃ ":"BO","BÉ¨ÌlÃ zÃ®i":"BR","BÃ hamÃ s":"BS","MbutÃ n":"BT","BÃ²tÉ¨ÌswÇnÃ ":"BW","BÉlÃ lÃ»s":"BY","BÉÌlezÉ¨Ì":"BZ","KanadÃ ":"CA","DÉÌmÃ¹kÃ latÃ¬ LÃ¨kpubÃ¨lÃ¨ Ã¨ KuÅgÃ¹":"CD","SÉnta AfÉ¨lekan LÃ¨kpobÃ¨lÃ¨":"CF","KuÅgÃ¹":"CG","SuezÃ lÃ¢n":"CH","Ku DÉ¨ÌvÃ»a":"CI","ChwÉ¨la ÅÌ KÃ»Ê":"CK","ChilÃ¨":"CL","KÃ mÃ lÃ»Å":"CM","ChaenÃ ":"CN","KÃ²lombÃ¬a":"CO","KÃ²sÉ¨ÌtÃ  LekÃ ":"CR","KuuwbÃ ":"CU","ChwÉ¨la ÅÌ KÉÌb VÉÌÉ":"CV","SaekpÃ¹lÃ¹":"CY","ChÉÌ LÃ¨kpubÃ¨lÃ¨":"CZ","DzamanÃ¨":"DE","DzÃ¬buwtÃ¬":"DJ","DÉnÉ¨mÃ ":"DK","DÃ²menekÃ ":"DM","DÃ²menekÃ  LÃ¨kpubÃ¨lÃ¨":"DO","ÃadzÉlÃ¬a":"DZ","EkwadÃ²":"EC","ÃsÉ¨ÌtonyÃ¬a":"EE","EdzÃ¬":"EG","ÃletÉ¨ÌlÃ ":"ER","SÉ¨ÌkpÉÌn":"ES","ÃtyÇpÃ¬a":"ET","FÉ¨nlÃ n":"FI","Fidzi":"FJ","ChwÉ¨lÃ  fÉ¨ FakÉ¨lÃ n":"FK","MaekÃ²lÃ²neshÃ¬a":"FM","FÃ lÃ¢ÅnsÃ¬":"FR","GÃ bÃ»n":"GA","YÃ¹naetÉ KiÅdÉÌm":"GB","GÉ¨ÌlÉnadÃ ":"GD","DzÉÉdzÃ¬a":"GE","GÃ yanÃ  Ã¨ FÃ lÃ¢ÅnsÃ¬":"GF","GaanÃ ":"GH","DzibÉ¨ÌlatÃ ":"GI","GÉ¨ÌlenlÃ¢n":"GL","GambÃ¬a":"GM","GinÃ¨":"GN","GwadalukpÉÌ":"GP","ÃkwÉÌtolia GinÃ¨":"GQ","GÉ¨ÌlÃªs":"GR","GwÃ tÉ¨ÌmalÃ ":"GT","Gwam":"GU","GinÃ¨ BÃ¬sawÃ¹":"GW","GÃ¹yanÃ ":"GY","HÉndulÃ s":"HN","KÃ²wÉshÃ¬a":"HR","HÇetÃ¬":"HT","HÉÅgÃ lÃ¨":"HU","ÃndÃ²neshÃ¬a":"ID","AelÉ¨ÌlÃ¢n":"IE","EzÉ¨ÌlÉÌ":"IL","EndÃ¬a":"IN","DÉ¨ÅÃ² kÉ¨ dzughÃ¹nstÃ²Ê kÉ¨ EndÃ¬a kÉ¨ BÉ¨ÌletÃ¬ kÃ²":"IO","ÃlÃ¢kÉ¨Ì":"IQ","ÃlÃ¢n":"IR","AesÉ¨ÌlÃ¢n":"IS","EtalÃ¨":"IT","DzÃ mÉkÃ ":"JM","DzodÃ n":"JO","DzÃ kpÃ¢n":"JP","KÉ¨nyÃ ":"KE","KÃ¬dzisÉ¨ÌtÃ¢n":"KG","KÃ mbodÃ¬a":"KH","KÃ¨lÃ¨bati":"KI","KomolÃ²s":"KM","SÉÌn KÃ® Ã  NevÃ¬":"KN","KÃ¹ulÃ®a, EkÃ¹w":"KP","KÃ¹ulÃ®a, EmÃ m":"KR","KÃ¹wÉÌ":"KW","ChwÉ¨lÃ  ÅÌ KaemÃ n":"KY","KÃ zasÉ¨ÌtÃ¢n":"KZ","LÃ wos":"LA","LÉbanÃ¨":"LB","SÉÌn LushÃ¬a":"LC","LetÉ¨nshÉ¨Ìn":"LI","SÉ¨Ìle LaÅkÃ ":"LK","LÃ ebÉlÃ¬a":"LR","LÉÌsotÃ¹":"LS","LÃ¨twÇnyÃ¬a":"LT","LuzÉ¨mbÃ¹Ê":"LU","LÃ tÉ¨va":"LV","LebÃ¬a":"LY","MÃ²lokÃ²":"MA","MÃ¹naku":"MC","MÃ²odovÃ ":"MD","MÃ dÃ gasÉ¨kÃ ":"MG","ChwÉ¨lÃ  fÉ¨ MashÃ ":"MH","MÉ¨ÌsÉ¨ÌdonyÃ¬a":"MK","MalÃ¨":"ML","MÇanmÃ ":"MM","MÃ¹ÅgolÃ¬a":"MN","ChwÉ¨lÃ  mÌ MÃ lÇanÃ  mÉ¨Ì EkÃ¹w mÃ²":"MP","MÃ tÃ¬nekÃ¬":"MQ","MÃ¹lÃ¨tanyÃ¬a":"MR","MÃ¹ÅtselÃ ":"MS","MaatÃ ":"MT","MÃ¹leshwÉ¨Ìs":"MU","MÃ divÃ¨":"MV","MÃ lawÃ¬":"MW","MÉkÉ¨zikÃ¹":"MX","MÃ lÉshÃ¬a":"MY","MÃ¹zÃ mbÃ®":"MZ","NÃ mibÃ¬a":"NA","KÃ lÃ¨donyÃ¬a Ã fÅ«ghÅ«":"NC","NaedzÃ ":"NE","ChwÉ¨lÃ  fÉ¨ NufÃ²Ê":"NF","GÉ¨ÌanyÉ¨":"NG","NikÃ lagwÃ ":"NI","NedÃ lÃ¢n":"NL","NoowÉÌÉ":"NO","NÉkpÃ¢a":"NP","NÃ wulÃ¹":"NR","Niyu":"NU","ZÃ¬lÃ¢n Ã fÅ«ghÅ«":"NZ","UmÃ n":"OM","KpanÃ ma":"PA","KpÉlÃ»":"PE","KpoleneshÃ¬a Ã¨ FÃ lÃ¢ÅnsÃ¬":"PF","Kpakpua GinÃ¨ Ã fÅ«ghÅ«":"PG","FelÃ¨kpÃ®":"PH","KpakÃ¬sÉ¨ÌtÃ¢n":"PK","KpulÃ n":"PL","SÉÌn KpiyÉÌ Ã  MikelÉÅ":"PM","KpitÉ¨ÌkalÃ¨":"PN","KpÇto Leko":"PR","AdzÉ¨mÄ kÉ¨ ÅgÃ¹Å kÉ¨ PalÉsÉ¨tÉ¨nyia Ã  kÉ¨ GazÃ  kÃ²":"PS","KputuwgÃ ":"PT","KpÃ lawÃ¹":"PW","KpalÃ gwÉÌ":"PY","KatÃ ":"QA","LÃ¨yunyÉÌÅ":"RE","LÃ¹manyÃ¬a":"RO","LoshÃ¬a":"RU","LÃ¹wandÃ ":"RW","Sawudi Alabi":"SA","ChwÉ¨lÃ  fÉ¨ SolomwÉ¨Ìn":"SB","SÉchÉÌlÉÌs":"SC","SÃ¹dÃ¢n":"SD","SuedÉ¨Ìn":"SE","SiÅgÃ kpÃ´o":"SG","SÉÌn ÃlenÃ ":"SH","SÉ¨ÌlÃ²vÉ¨nyÃ¬a":"SI","SÉ¨ÌlÃ²vÉ¨kÉ¨Ìa":"SK","SilÃ¬a lÃ»Å":"SL","SÃ n MÃ lenÃ¹":"SM","SÉÌnÉÌgÃ¢a":"SN","SÃ²malÃ¬a":"SO","SulÃ¨namÃ¨":"SR","Sawo TÉÌme Ã  KpÃ¨lÃ¨nsikpÉÌ":"ST","EsÃ vadÃ²":"SV","SilÃ®a":"SY","ShÇazÃ¬lÃ¢n":"SZ","ChwÉ¨la n TÉ¨tÃª Ã  KaekÃ¹s":"TC","ChÃ¢":"TD","TugÃ¹":"TG","TaelÃ n":"TH","TÃ dzikÃ¬sÉ¨ÌtÃ¢n":"TJ","TuwkelawÃ¹":"TK","Ãs TaemÃ²":"TL","TekÉ¨mÃ¨nÃ¨sÉ¨ÌtÃ¢n":"TM","TÃ¹neshÃ¬a":"TN","TuÅgÃ ":"TO","TeekÃ¬":"TR","TÃ¨lenedÃ  Ã  TÃ²bagÃ¹":"TT","TuwvalÃ¹w":"TV","TaewÃ n":"TW","TÃ anzanyÃ¬a":"TZ","YÃ¹kÉÌlÉÌ":"UA","YÃ¹gandÃ ":"UG","USA":"US","YulÃ¹gwÉÌ":"UY","YÃ¹zÉ¨ÌbÉkÃ¬sÉ¨ÌtÃ¢n":"UZ","VatikÃ n SÉ¨ÌtÉÌ":"VA","SÉÌn VinsÉ¨Ìn Ã  GÉ¨lenadi Ã tÄ":"VC","VÉÌnÉÌzÇÉÉlÃ ":"VE","ChwÉ¨lÃ  mÌ VidzinyÃ¬a mÌ BÉ¨ÌletÃ¬ mÃ²":"VG","U. S. ChwÉ¨lÃ  fÉ¨ MbuÊmbu":"VI","VÃ¬yÉnÃ m":"VN","VÃ nÇatÃ¹w":"VU","Wales Ã  FÃ¹wtuwnÃ ":"WF","SÃ mowÃ ":"WS","YÉmÉÌn":"YE","MÃ yotÃ¬":"YT","AfÉ¨lekÃ  ghÉ¨ EmÃ m ghÃ²":"ZA","ZambÃ¬a":"ZM","ZÃ¬mbagbÉÌ":"ZW"};
ilib.data.ctrynames_ak = {"Andora":"AD","United Arab Emirates":"AE","Afganistan":"AF","Antigua ne Baabuda":"AG","Anguila":"AI","Albenia":"AL","Aamenia":"AM","NÉdÉland Antelez":"AN","Angola":"AO","AgyÉntina":"AR","AmÉrika Samoa":"AS","Æstria":"AT","Æstrelia":"AU","Aruba":"AW","Azebaegyan":"AZ","Bosnia ne HÉzegovina":"BA","Baabados":"BB","BangladÉhye":"BD","BÉlgyium":"BE","BÉkina Faso":"BF","BÉlgeria":"BG","Baren":"BH","Burundi":"BI","BÉnin":"BJ","BÉmuda":"BM","Brunae":"BN","Bolivia":"BO","Brazil":"BR","Bahama":"BS","Butan":"BT","BÉtswana":"BW","BÉlarus":"BY","Beliz":"BZ","Kanada":"CA","Kongo (Zair)":"CD","Afrika Finimfin Man":"CF","Kongo":"CG","Swetzaland":"CH","La CÃ´te d'Ivoire":"CI","Kook NsupÉw":"CK","Kyili":"CL","KamÉrun":"CM","Kyaena":"CN","Kolombia":"CO","KÉsta Rika":"CR","Kuba":"CU","KepvÉdfo Islands":"CV","SaeprÉs":"CY","KyÉk KurokÉse":"CZ","Gyaaman":"DE","Gyibuti":"DJ","DÉnmak":"DK","DÉmeneka":"DM","DÉmeneka KurokÉse":"DO","Ælgyeria":"DZ","IkuwadÉ":"EC","Æstonia":"EE","Nisrim":"EG","Æritrea":"ER","Spain":"ES","Ithiopia":"ET","Finland":"FI","Figyi":"FJ","FÉlkman Aeland":"FK","Maekronehyia":"FM","FrÉnkyeman":"FR","GabÉn":"GA","Ahendiman Nkabom":"GB","Grenada":"GD","GyÉgyea":"GE","FrÉnkye Gayana":"GF","Gaana":"GH","Gyebralta":"GI","Greenman":"GL","Gambia":"GM","Gini":"GN","Guwadelup":"GP","Gini Ikuweta":"GQ","Greekman":"GR","Guwatemala":"GT","Guam":"GU","Gini Bisaw":"GW","Gayana":"GY","HÉnduras":"HN","Krowehyia":"HR","Heiti":"HT","Hangari":"HU","IndÉnehyia":"ID","Aereland":"IE","Israel":"IL","India":"IN","Britenfo HÉn Man WÉ India Po No Mu":"IO","Irak":"IQ","Iran":"IR","Aesland":"IS","Itali":"IT","Gyameka":"JM","GyÉdan":"JO","Gyapan":"JP","KÉnya":"KE","KÉÉgestan":"KG","Kambodia":"KH","Kiribati":"KI","KÉmÉrÉs":"KM","Saint Kitts ne NÉves":"KN","Etifi Koria":"KP","Anaafo Koria":"KR","Kuwete":"KW","Kemanfo Islands":"KY","Kazakstan":"KZ","Laos":"LA","LÉbanÉn":"LB","Saint Lucia":"LC","Lektenstaen":"LI","Sri Lanka":"LK","Laeberia":"LR","LÉsutu":"LS","Lituwenia":"LT","LaksembÉg":"LU","Latvia":"LV","Libya":"LY","Moroko":"MA","MÉnako":"MC","MÉldova":"MD","Madagaska":"MG","Marshall Islands":"MH","Masedonia":"MK","Mali":"ML","Miyanma":"MM","MÉngolia":"MN","Northern Mariana Islands":"MP","Matinik":"MQ","MÉretenia":"MR","Mantserat":"MS","MÉlta":"MT","MÉrehyeÉs":"MU","Maldives":"MV","Malawi":"MW","MÉksiko":"MX","Malehyia":"MY","Mozambik":"MZ","Namibia":"NA","Kaledonia Foforo":"NC","NigyÉ":"NE","NÉfolk Aeland":"NF","Naegyeria":"NG","Nekaraguwa":"NI","NÉdÉland":"NL","NÉÉwe":"NO","NÉpÉl":"NP","Naworu":"NR","Niyu":"NU","Ziland Foforo":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","FrÉnkye PÉlenehyia":"PF","Papua Guinea Foforo":"PG","Philippines":"PH","Pakistan":"PK","Poland":"PL","Saint Pierre ne Miquelon":"PM","Pitcairn":"PN","PuÉto Riko":"PR","Palestaen West Bank ne Gaza":"PS","PÉtugal":"PT","Palau":"PW","Paraguay":"PY","Kata":"QA","ReyuniÉn":"RE","Romenia":"RO","RÉhyea":"RU","Rwanda":"RW","Saudi Arabia":"SA","Solomon Islands":"SB","SeyhyÉl":"SC","Sudan":"SD","Sweden":"SE","SingapÉ":"SG","Saint Helena":"SH","Slovinia":"SI","Slovakia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Suriname":"SR","SÃ£o TomÃ© and PrÃ­ncipe":"ST","Æl SalvadÉ":"SV","Siria":"SY","Swaziland":"SZ","Turks ne Caicos Islands":"TC","Kyad":"TD","Togo":"TG","Taeland":"TH","Tajikistan":"TJ","Tokelau":"TK","TimÉ Boka":"TL","TÉkmÉnistan":"TM","Tunihyia":"TN","Tonga":"TO","TÉÉki":"TR","Trinidad ne Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ukren":"UA","Uganda":"UG","AmÉrika":"US","Yurugwae":"UY","UzbÉkistan":"UZ","Vatican Man":"VA","Saint Vincent ne Grenadines":"VC","Venezuela":"VE","Britainfo Virgin Islands":"VG","AmÉrika Virgin Islands":"VI","ViÉtnam":"VN","Vanuatu":"VU","Wallis ne Futuna":"WF","Samoa":"WS","YÉmen":"YE","MayÉte":"YT","Afrika Anaafo":"ZA","Zambia":"ZM","Zembabwe":"ZW"};
ilib.data.ctrynames_am = {"á¥á²á«":"142","áá«á¨ááá á¥á²á«":"143","ááµá«áá á¥á²á«":"145","á áá®á":"150","ááá«á£á á áá®á":"151","á°ááá á áá®á":"154","ááµá«áá á áá®á":"155","áá²á á ááªá«":"419","ááá":"001","á ááªá«":"002","á°áá á ááªá«":"003","á°á¡á¥ á ááªá«":"005","á¦á½áá ":"009","ááµá«áá á ááªá«":"011","áá«á¨ááá á ááªá«":"013","ááá«á£á á ááªá«":"014","á°ááá á ááªá«":"015","áá«á¨ááá á ááªá«":"017","á°á¡á£á á ááªá«":"018","á ááªá«":"019","á°ááá á ááªá«":"021","á«áªá¢á«á":"029","ááá«á£á á¥á²á«":"030","á°á¡á£á á¥á²á«":"034","ááá«á£á á°á¡á¥ á¥á²á«":"035","á°á¡á£á á áá®á":"039","á ááµáµá«áá«":"053","áááá¥á«":"054","á¨áá­á­á®áá¥á«á á­áá":"057","áááá¥á«":"061","á á´áá½á á°á´áµ":"AC","á áá¶á«":"AD","á¨á°á£á á©áµ á á¨á¥ á¤áá¬áµáµ":"AE","á ááááµá³á":"AF","á áá²á á¥á á£á©á³":"AG","á ááá¢á":"AI","á áá£áá«":"AL","á á­ááá«":"AM","ááá­áááµáµ á áá²ááµ":"AN","á ááá":"AO","á áá³á­á­á²á«":"AQ","á á­ááá²á":"AR","á¨á ááªá« á³áá ":"AS","á¦áµáµáªá«":"AT","á ááµáµá¬áá«":"AU","á á©á£":"AW","á¨á áááµ á°á´á¶á½":"AX","á áá­á£áá":"AZ","á¦áµáá« á¥á áá­áááªáá«":"BA","á£á­á¤á¶áµ":"BB","á£áááá²á½":"BD","á¤ááá":"BE","á¡á­áªá áá¶":"BF","á¡áááªá«":"BG","á£áá¬á":"BH","á¥á©áá²":"BI","á¤áá":"BJ","áá±áµ á á­á´áá":"BL","á¤á­áá³":"BM","á¥á©á":"BN","á¦ááªá«":"BO","á¨á«áªá¢á«á ááá­áááµáµ":"BQ","á¥á«áá":"BR","á£áááµ":"BS","á¡áá³á":"BT","á¡á¬áµ á°á´áµ":"BV","á¦áµáµáá":"BW","á¤áá©áµ":"BY","á¤áá":"BZ","á«áá³":"CA","á®á®áµ[á¬ááá] á°á´á¶á½":"CC","á®áá":"CD","á¨áá«á¨ááá á ááªá« áªáá¥áá­":"CF","á®áá á¥á«ááªá":"CG","áµááá­áááµ":"CH","á®áµ á²á¯á­":"CI","á©á­ á°á´á¶á½":"CK","áºá":"CL","á«áá©á":"CM","á»á­á":"CN","á®ááá¢á«":"CO","á­ááá­á¶á á°á´áµ":"CP","á®áµá³ áªá«":"CR","á©á£":"CU","á¬á á¬á­á´":"CV","á©á«á³á":"CW","á¨áá á°á´áµ":"CX","á³á­áá¨áµ":"CY","á¼á­ áªáá¥áá­":"CZ","áá­áá":"DE","á²á¬á áá­áºá«":"DG","áá¡á²":"DJ","á´ááá­á­":"DK","á¶ááá«":"DM","á¶ááá­ áªáá¥áá­":"DO","á áááªá«":"DZ","á´á¡á³á ááá":"EA","á¢á³á¶á­":"EC","á¤áµá¶áá«":"EE","áá¥á½":"EG","ááá«á£á á³áá«":"EH","á¤á­áµá«":"ER","áµáá":"ES","á¢áµá®áµá«":"ET","á¨á áá®á áá¥á¨áµ":"EU","áááááµ":"FI","áá":"FJ","á¨ááá­áááµ á°á´á¶á½":"FK","áá­á®áá¢á«":"FM","á¨áá® á°á´á¶á½":"FO","áá¨áá³á­":"FR","áá¦á":"GA","á¥áááá":"GB","áá¬áá³":"GD","áá­áá«":"GE","á¨áá¨áá³á­ ááá á":"GF","áá­áá²":"GG","áá":"GH","áá¥á«áá³á­":"GI","ááªááááµ":"GL","ááá¢á«":"GM","áá":"GN","ááá°áá":"GP","á¢á³á¶áªá«á áá":"GQ","ááªá­":"GR","á°á¡á¥ áá­áá« á¥á á¨á°á¡á¥ á³ááµáá½ á°á´á¶á½":"GS","ááá²áá":"GT","ááá":"GU","áá á¢á³á¦":"GW","áá«á":"GY","ááá á®áá SAR á»á­á":"HK","á½á­áµ á°á´á¶á½á áá­á¶áááµ á°á´á¶á½":"HM","ááá±á«áµ":"HN","á­á®á¤á½á«":"HR","áá­á²":"HT","ááááª":"HU","á¨á«ááª á°á´á¶á½":"IC","á¢áá¶áá¢á«":"ID","á á¨á­áááµ":"IE","á¥áµá«á¤á":"IL","á á­á á¦á áá":"IM","áááµ":"IN","á¨á¥áªá³áá« áááµ ááá«ááµ áááµ":"IO","á¢á«á":"IQ","á¢á«á":"IR","á á­áµáááµ":"IS","á£áá«á":"IT","áá­á²":"JE","ááá­á«":"JM","áá­á³á":"JO","ááá":"JP","á¬áá«":"KE","áªá­ááµá³á":"KG","á«áá¦á²á«":"KH","áªáªá£á²":"KI","á®áá®áµ":"KM","áá±áµ áªáµáµ á¥á ááªáµ":"KN","á°áá á®áªá«":"KP","á°á¡á¥ á®áªá«":"KR","á­ááµ":"KW","á«á­áá á°á´á¶á½":"KY","á«ááªáµá³á":"KZ","áá¦áµ":"LA","áá£ááµ":"LB","á´ááµ ááºá«":"LC","áá½á°ááµá³á­á":"LI","á²áªááá«":"LK","áá­á¤áªá«":"LR","áá¶á¶":"LS","áá±ááá«":"LT","áá­á°áá á­á":"LU","ááµáªá«":"LV","áá¢á«":"LY","áá®á®":"MA","ááá®":"MC","ááá¶á«":"MD","ááá°ááá®":"ME","á´ááµ áá­á²á":"MF","áá³ááµá«á­":"MG","áá­á»á á á­áááµ":"MH","áá¨á¶áá«":"MK","áá":"ML","áá­ááá­[á á­á]":"MM","ááááá«":"MN","áá«á¡SAR á»á­á":"MO","á¨á°ááá ááªá«á á°á´á¶á½":"MP","áá­á²áá­":"MQ","ááªá´áá«":"MR","áááµá´á«áµ":"MS","ááá³":"MT","áá©á¸áµ":"MU","ááá²á­áµ":"MV","ááá":"MW","áá­á²á®":"MX","ááá¢á«":"MY","áááá¢á­":"MZ","ááá¢á«":"NA","áá á«áá¶áá«":"NC","ááá­":"NE","áá­ááá­ á°á´áµ":"NF","áá­ááªá«":"NG","áá«á«á":"NI","ááá­áááµ":"NL","áá­á":"NO","ááá":"NP","áá¡á©":"NR","áá¡á­":"NU","áá ááááµ":"NZ","á¦áá":"OM","ááá":"PA","áá©":"PE","á¨áá¨áá³á­ áááá¢á«":"PF","ááá áá áá":"PG","áááááµ":"PH","ááªáµá³á":"PK","ááááµ":"PL","áá±áµ áá¬á­ á¥á áá©á¤áá":"PM","ááµá«á¢á­á á á­áµáááµ":"PN","áá­á³ áªá®":"PR","á¨áááµá¤á áááµ":"PS","áá­á±áá":"PT","ááá":"PW","áá«áá­":"PY","á³á³á­":"QA","á ááµáá­áá á¦á½áá«":"QO","áªá©áá¨á":"RE","á®ááá«":"RO","á°á­á¥á«":"RS","á«áºá«":"RU","á©ááá³":"RW","á³ááµá á¨á¢á«":"SA","á°ááá á°á´áµ":"SB","á²á¼ááµ":"SC","á±á³á":"SD","áµááµá":"SE","á²áááá­":"SG","á´ááµ ááá":"SH","áµáá¬áá«":"SI","áµá«áá£á­áµ á¥á áá áá¨á":"SJ","áµáá«áªá«":"SK","á´á«áá®á":"SL","á³á ááªá":"SM","á´ááá":"SN","á±áá":"SO","á±áªáá":"SR","á°á¡á¥ á±á³á":"SS","á³á¦ á¶á á¥á ááªáá²á":"ST","á¤á á³áá«á¶á­":"SV","á²ááµ áá­á°á":"SX","á²áªá«":"SY","á±áááááµ":"SZ","áµáªáµá³á á² á©áá":"TA","á¨á±á­á®á½á á¨á«á¢á®áµ á°á´á¶á½":"TC","á»áµ":"TD","á¨áá¨áá³á­ á°á¡á£á ááá¶á½":"TF","á¶á":"TG","á³á­áááµ":"TH","á³ááªáµá³á":"TJ","á¶á­áá":"TK","ááµá«á ááµáµ":"TL","á±á­á­áááµá³á":"TM","á±ááá«":"TN","á¶áá":"TO","á±á­á­":"TR","áµáªáá³áµ á¥á á¶á¤á":"TT","á±á«á":"TV","á³á­áá":"TW","á³áááá«":"TZ","á©á­á¬á":"UA","á©ááá³":"UG","á¨á© á¤áµ á á¨á áá­ á«á á°á´á¶á½":"UM","á©áá­áµáµ áµá´áµáµ":"US","á¡á«áá­":"UY","á©áá áªáµá³á":"UZ","á«á²á«á á¨á°á":"VA","áá±áµ áªáá´ááµ á¥á áá¬áá²ááµ":"VC","á¬áááá":"VE","á¨á¥áááá áµááá á°á´á¶á½":"VG","á¨á ááªá« á¨á­áá á°á´á¶á½":"VI","á¬áµáá":"VN","á«áá á±":"VU","áááµ á¥á áá±á á°á´á¶á½":"WF","á³áá ":"WS","á¨áá":"YE","áá­á¦á´":"YT","á°á¡á¥ á ááªá«":"ZA","ááá¢á«":"ZM","ááá§á¤":"ZW","á«áá³áá á­áá":"ZZ"};
ilib.data.ctrynames_ar = {"Ø¢Ø³ÙØ§":"142","ÙØ³Ø· Ø¢Ø³ÙØ§":"143","ØºØ±Ø¨ Ø¢Ø³ÙØ§":"145","Ø£ÙØ±ÙØ¨Ø§":"150","Ø´Ø±Ù Ø£ÙØ±ÙØ¨Ø§":"151","Ø´ÙØ§Ù Ø£ÙØ±ÙØ¨Ø§":"154","ØºØ±Ø¨ Ø£ÙØ±ÙØ¨Ø§":"155","Ø£ÙØ±ÙÙØ§ Ø§ÙÙØ§ØªÙÙÙØ©":"419","Ø§ÙØ¹Ø§ÙÙ":"001","Ø£ÙØ±ÙÙÙØ§":"002","Ø£ÙØ±ÙÙØ§ Ø§ÙØ´ÙØ§ÙÙØ©":"003","Ø£ÙØ±ÙÙØ§ Ø§ÙØ¬ÙÙØ¨ÙØ©":"005","Ø£ÙÙÙØ§ÙÙØ³ÙØ§":"009","ØºØ±Ø¨ Ø£ÙØ±ÙÙÙØ§":"011","Ø£ÙØ±ÙÙØ§ Ø§ÙÙØ³Ø·Ù":"013","Ø´Ø±Ù Ø£ÙØ±ÙÙÙØ§":"014","Ø´ÙØ§Ù Ø£ÙØ±ÙÙÙØ§":"015","ÙØ³Ø· Ø£ÙØ±ÙÙÙØ§":"017","Ø£ÙØ±ÙÙÙØ§ Ø§ÙØ¬ÙÙØ¨ÙØ©":"018","Ø§ÙØ£ÙØ±ÙÙØªÙÙ":"019","Ø´ÙØ§Ù Ø£ÙØ±ÙÙØ§":"021","Ø§ÙÙØ§Ø±ÙØ¨Ù":"029","Ø´Ø±Ù Ø¢Ø³ÙØ§":"030","Ø¬ÙÙØ¨ Ø¢Ø³ÙØ§":"034","Ø¬ÙÙØ¨ Ø´Ø±Ù Ø¢Ø³ÙØ§":"035","Ø¬ÙÙØ¨ Ø£ÙØ±ÙØ¨Ø§":"039","Ø£Ø³ØªØ±Ø§ÙØ§Ø³ÙØ§":"053","ÙÙÙØ§ÙÙØ²ÙØ§":"054","Ø§ÙØ¬Ø²Ø± Ø§ÙÙÙÙØ±ÙÙÙØ²ÙØ©":"057","Ø¨ÙÙÙÙÙØ²ÙØ§":"061","Ø¬Ø²ÙØ±Ø© Ø£Ø³ÙÙØ´ÙÙÙ":"AC","Ø£ÙØ¯ÙØ±Ø§":"AD","Ø§ÙØ¥ÙØ§Ø±Ø§Øª Ø§ÙØ¹Ø±Ø¨ÙØ© Ø§ÙÙØªØ­Ø¯Ø©":"AE","Ø£ÙØºØ§ÙØ³ØªØ§Ù":"AF","Ø£ÙØªÙØºÙØ§ ÙØ¨Ø±Ø¨ÙØ¯Ø§":"AG","Ø£ÙØºÙÙÙØ§":"AI","Ø£ÙØ¨Ø§ÙÙØ§":"AL","Ø£Ø±ÙÙÙÙØ§":"AM","Ø¬Ø²Ø± Ø§ÙØ£ÙØªÙÙ Ø§ÙÙÙÙÙØ¯ÙØ©":"AN","Ø£ÙØºÙÙØ§":"AO","Ø£ÙØªØ§Ø±ÙØªÙÙØ§":"AQ","Ø§ÙØ£Ø±Ø¬ÙØªÙÙ":"AR","Ø³Ø§ÙÙØ§ Ø§ÙØ£ÙØ±ÙÙÙØ©":"AS","Ø§ÙÙÙØ³Ø§":"AT","Ø£Ø³ØªØ±Ø§ÙÙØ§":"AU","Ø¢Ø±ÙØ¨Ø§":"AW","Ø¬Ø²Ø± Ø£ÙÙØ§Ù":"AX","Ø£Ø°Ø±Ø¨ÙØ¬Ø§Ù":"AZ","Ø§ÙØ¨ÙØ³ÙØ© ÙØ§ÙÙØ±Ø³Ù":"BA","Ø¨Ø±Ø¨Ø§Ø¯ÙØ³":"BB","Ø¨ÙØ¬ÙØ§Ø¯ÙØ´":"BD","Ø¨ÙØ¬ÙÙØ§":"BE","Ø¨ÙØ±ÙÙÙØ§ ÙØ§Ø³Ù":"BF","Ø¨ÙØºØ§Ø±ÙØ§":"BG","Ø§ÙØ¨Ø­Ø±ÙÙ":"BH","Ø¨ÙØ±ÙÙØ¯Ù":"BI","Ø¨ÙÙÙ":"BJ","Ø³Ø§Ù Ø¨Ø§Ø±ØªÙÙÙÙ":"BL","Ø¨Ø±ÙÙØ¯Ø§":"BM","Ø¨Ø±ÙÙØ§Ù":"BN","Ø¨ÙÙÙÙÙØ§":"BO","ÙÙÙÙØ¯Ø§ Ø§ÙÙØ§Ø±ÙØ¨ÙØ©":"BQ","Ø§ÙØ¨Ø±Ø§Ø²ÙÙ":"BR","Ø§ÙØ¨Ø§ÙØ§ÙØ§":"BS","Ø¨ÙØªØ§Ù":"BT","Ø¬Ø²ÙØ±Ø© Ø¨ÙÙÙÙ":"BV","Ø¨ØªØ³ÙØ§ÙØ§":"BW","Ø±ÙØ³ÙØ§ Ø§ÙØ¨ÙØ¶Ø§Ø¡":"BY","Ø¨ÙÙØ²":"BZ","ÙÙØ¯Ø§":"CA","Ø¬Ø²Ø± ÙÙÙÙØ³":"CC","Ø§ÙÙÙÙØºÙ - ÙÙÙØ´Ø§Ø³Ø§":"CD","Ø¬ÙÙÙØ±ÙØ© Ø£ÙØ±ÙÙÙØ§ Ø§ÙÙØ³Ø·Ù":"CF","Ø§ÙÙÙÙØºÙ - Ø¨Ø±Ø§Ø²Ø§ÙÙÙ":"CG","Ø³ÙÙØ³Ø±Ø§":"CH","Ø³Ø§Ø­Ù Ø§ÙØ¹Ø§Ø¬":"CI","Ø¬Ø²Ø± ÙÙÙ":"CK","Ø´ÙÙÙ":"CL","Ø§ÙÙØ§ÙÙØ±ÙÙ":"CM","Ø§ÙØµÙÙ":"CN","ÙÙÙÙÙØ¨ÙØ§":"CO","Ø¬Ø²ÙØ±Ø© ÙÙÙØ¨ÙØ±ØªÙÙ":"CP","ÙÙØ³ØªØ§Ø±ÙÙØ§":"CR","ÙÙØ¨Ø§":"CU","Ø§ÙØ±Ø£Ø³ Ø§ÙØ£Ø®Ø¶Ø±":"CV","ÙÙØ±Ø§Ø³Ø§Ù":"CW","Ø¬Ø²ÙØ±Ø© Ø§ÙÙØ±ÙØ³ÙØ§Ø³":"CX","ÙØ¨Ø±Øµ":"CY","Ø¬ÙÙÙØ±ÙØ© Ø§ÙØªØ´ÙÙ":"CZ","Ø£ÙÙØ§ÙÙØ§":"DE","Ø¯ÙÙØºÙ ØºØ§Ø±Ø³ÙØ§":"DG","Ø¬ÙØ¨ÙØªÙ":"DJ","Ø§ÙØ¯Ø§ÙÙØ±Ù":"DK","Ø¯ÙÙÙÙÙÙØ§":"DM","Ø¬ÙÙÙØ±ÙØ© Ø§ÙØ¯ÙÙÙÙÙÙ":"DO","Ø§ÙØ¬Ø²Ø§Ø¦Ø±":"DZ","Ø³ÙÙØªØ§ ÙÙÙÙÙÙØ§":"EA","Ø§ÙØ¥ÙÙØ§Ø¯ÙØ±":"EC","Ø£Ø³ØªÙÙÙØ§":"EE","ÙØµØ±":"EG","Ø§ÙØµØ­Ø±Ø§Ø¡ Ø§ÙØºØ±Ø¨ÙØ©":"EH","Ø£Ø±ÙØªØ±ÙØ§":"ER","Ø¥Ø³Ø¨Ø§ÙÙØ§":"ES","Ø¥Ø«ÙÙØ¨ÙØ§":"ET","Ø§ÙØ§ØªØ­Ø§Ø¯ Ø§ÙØ£ÙØ±ÙØ¨Ù":"EU","ÙÙÙÙØ¯Ø§":"FI","ÙÙØ¬Ù":"FJ","Ø¬Ø²Ø± ÙÙÙÙØ§ÙØ¯":"FK","ÙÙÙØ±ÙÙÙØ²ÙØ§":"FM","Ø¬Ø²Ø± ÙØ§Ø±Ù":"FO","ÙØ±ÙØ³Ø§":"FR","Ø§ÙØ¬Ø§Ø¨ÙÙ":"GA","Ø§ÙÙÙÙÙØ© Ø§ÙÙØªØ­Ø¯Ø©":"GB","ØºØ±ÙÙØ§Ø¯Ø§":"GD","Ø¬ÙØ±Ø¬ÙØ§":"GE","ØºÙÙØ§ÙØ§ Ø§ÙÙØ±ÙØ³ÙØ©":"GF","ØºÙØ±ÙØ²Ù":"GG","ØºØ§ÙØ§":"GH","Ø¬Ø¨Ù Ø·Ø§Ø±Ù":"GI","ØºØ±ÙÙÙØ§ÙØ¯":"GL","ØºØ§ÙØ¨ÙØ§":"GM","ØºÙÙÙØ§":"GN","Ø¬ÙØ§Ø¯ÙÙØ¨":"GP","ØºÙÙÙØ§ Ø§ÙØ¥Ø³ØªÙØ§Ø¦ÙØ©":"GQ","Ø§ÙÙÙÙØ§Ù":"GR","Ø¬ÙØ±Ø¬ÙØ§ Ø§ÙØ¬ÙÙØ¨ÙØ© ÙØ¬Ø²Ø± Ø³Ø§ÙØ¯ÙÙØªØ´ Ø§ÙØ¬ÙÙØ¨ÙØ©":"GS","ØºÙØ§ØªÙÙØ§ÙØ§":"GT","ØºÙØ§Ù":"GU","ØºÙÙÙØ§ Ø¨ÙØ³Ø§Ù":"GW","ØºÙØ§ÙØ§":"GY","ÙÙÙØº ÙÙÙØº Ø§ÙØµÙÙÙØ©":"HK","Ø¬Ø²ÙØ±Ø© ÙÙØ±Ø¯ ÙØ¬Ø²Ø± ÙØ§ÙØ¯ÙÙØ§ÙØ¯":"HM","ÙÙØ¯ÙØ±Ø§Ø³":"HN","ÙØ±ÙØ§ØªÙØ§":"HR","ÙØ§ÙØªÙ":"HT","ÙÙØºØ§Ø±ÙØ§":"HU","Ø¬Ø²Ø± Ø§ÙÙÙØ§Ø±Ù":"IC","Ø£ÙØ¯ÙÙÙØ³ÙØ§":"ID","Ø£ÙØ±ÙÙØ¯Ø§":"IE","Ø¥Ø³Ø±Ø§Ø¦ÙÙ":"IL","Ø¬Ø²ÙØ±Ø© ÙØ§Ù":"IM","Ø§ÙÙÙØ¯":"IN","Ø§ÙØ¥ÙÙÙÙ Ø§ÙØ¨Ø±ÙØ·Ø§ÙÙ ÙÙ Ø§ÙÙØ­ÙØ· Ø§ÙÙÙØ¯Ù":"IO","Ø§ÙØ¹Ø±Ø§Ù":"IQ","Ø¥ÙØ±Ø§Ù":"IR","Ø£ÙØ³ÙÙØ¯Ø§":"IS","Ø¥ÙØ·Ø§ÙÙØ§":"IT","Ø¬ÙØ±Ø³Ù":"JE","Ø¬Ø§ÙØ§ÙÙØ§":"JM","Ø§ÙØ£Ø±Ø¯Ù":"JO","Ø§ÙÙØ§Ø¨Ø§Ù":"JP","ÙÙÙÙØ§":"KE","ÙØ±ØºÙØ²Ø³ØªØ§Ù":"KG","ÙÙØ¨ÙØ¯ÙØ§":"KH","ÙÙØ±ÙØ¨Ø§ØªÙ":"KI","Ø¬Ø²Ø± Ø§ÙÙÙØ±":"KM","Ø³Ø§ÙØª ÙÙØªØ³ ÙÙÙÙÙØ³":"KN","ÙÙØ±ÙØ§ Ø§ÙØ´ÙØ§ÙÙØ©":"KP","ÙÙØ±ÙØ§ Ø§ÙØ¬ÙÙØ¨ÙØ©":"KR","Ø§ÙÙÙÙØª":"KW","Ø¬Ø²Ø± Ø§ÙÙØ§ÙÙÙ":"KY","ÙØ§Ø²Ø§Ø®Ø³ØªØ§Ù":"KZ","ÙØ§ÙØ³":"LA","ÙØ¨ÙØ§Ù":"LB","Ø³Ø§ÙØª ÙÙØ³ÙØ§":"LC","ÙÙØ®ØªÙØ´ØªØ§ÙÙ":"LI","Ø³Ø±ÙÙØ§ÙÙØ§":"LK","ÙÙØ¨ÙØ±ÙØ§":"LR","ÙÙØ³ÙØªÙ":"LS","ÙÙØªÙØ§ÙÙØ§":"LT","ÙÙÙØ³ÙØ¨ÙØ±Øº":"LU","ÙØ§ØªÙÙØ§":"LV","ÙÙØ¨ÙØ§":"LY","Ø§ÙÙØºØ±Ø¨":"MA","ÙÙÙØ§ÙÙ":"MC","ÙÙÙØ¯Ø§ÙÙØ§":"MD","Ø§ÙØ¬Ø¨Ù Ø§ÙØ£Ø³ÙØ¯":"ME","Ø³Ø§ÙØª ÙØ§Ø±ØªÙ":"MF","ÙØ¯ØºØ´ÙØ±":"MG","Ø¬Ø²Ø± Ø§ÙÙØ§Ø±Ø´Ø§Ù":"MH","ÙÙØ¯ÙÙÙØ§":"MK","ÙØ§ÙÙ":"ML","ÙÙØ§ÙÙØ§Ø± -Ø¨ÙØ±ÙØ§":"MM","ÙÙØºÙÙÙØ§":"MN","ÙÙØ§Ù Ø§ÙØµÙÙÙØ© [ÙÙØ·ÙØ© Ø¥Ø¯Ø§Ø±ÙØ© Ø®Ø§ØµØ©]":"MO","Ø¬Ø²Ø± ÙØ§Ø±ÙØ§ÙØ§ Ø§ÙØ´ÙØ§ÙÙØ©":"MP","ÙØ§Ø±ØªÙÙÙÙ":"MQ","ÙÙØ±ÙØªØ§ÙÙØ§":"MR","ÙÙÙØªØ³Ø±Ø§Øª":"MS","ÙØ§ÙØ·Ø§":"MT","ÙÙØ±ÙØ´ÙÙØ³":"MU","Ø¬Ø²Ø± Ø§ÙÙØ§ÙØ¯ÙÙ":"MV","ÙÙØ§ÙÙ":"MW","Ø§ÙÙÙØ³ÙÙ":"MX","ÙØ§ÙÙØ²ÙØ§":"MY","ÙÙØ²ÙØ¨ÙÙ":"MZ","ÙØ§ÙÙØ¨ÙØ§":"NA","ÙØ§ÙÙØ¯ÙÙÙØ§ Ø§ÙØ¬Ø¯ÙØ¯Ø©":"NC","Ø§ÙÙÙØ¬Ø±":"NE","Ø¬Ø²ÙØ±Ø© ÙÙØ±ÙÙÙ":"NF","ÙÙØ¬ÙØ±ÙØ§":"NG","ÙÙÙØ§Ø±Ø§ØºÙØ§":"NI","ÙÙÙÙØ¯Ø§":"NL","Ø§ÙÙØ±ÙÙØ¬":"NO","ÙÙØ¨Ø§Ù":"NP","ÙØ§ÙØ±Ù":"NR","ÙÙÙÙ":"NU","ÙÙÙØ²ÙÙØ§ÙØ¯Ø§":"NZ","Ø¹ÙÙØ§Ù":"OM","Ø¨ÙÙØ§":"PA","Ø¨ÙØ±Ù":"PE","Ø¨ÙÙÙÙÙØ²ÙØ§ Ø§ÙÙØ±ÙØ³ÙØ©":"PF","Ø¨Ø§Ø¨ÙØ§ ØºÙÙÙØ§ Ø§ÙØ¬Ø¯ÙØ¯Ø©":"PG","Ø§ÙÙÙÙØ¨ÙÙ":"PH","Ø¨Ø§ÙØ³ØªØ§Ù":"PK","Ø¨ÙÙÙØ¯Ø§":"PL","Ø³Ø§ÙØª Ø¨ÙÙØ± ÙÙÙÙÙÙÙÙ":"PM","Ø¬Ø²Ø± Ø¨ÙØªÙÙØ±Ù":"PN","Ø¨ÙØ±ØªÙØ±ÙÙÙ":"PR","ÙÙØ³Ø·ÙÙ":"PS","Ø§ÙØ¨Ø±ØªØºØ§Ù":"PT","Ø¨Ø§ÙØ§Ù":"PW","Ø¨Ø§Ø±Ø§ØºÙØ§Ù":"PY","ÙØ·Ø±":"QA","Ø£ÙÙÙØ§ÙÙØ³ÙØ§ Ø§ÙÙØ§Ø¦ÙØ©":"QO","Ø±ÙÙÙÙÙÙ":"RE","Ø±ÙÙØ§ÙÙØ§":"RO","ØµØ±Ø¨ÙØ§":"RS","Ø±ÙØ³ÙØ§":"RU","Ø±ÙØ§ÙØ¯Ø§":"RW","Ø§ÙÙÙÙÙØ© Ø§ÙØ¹Ø±Ø¨ÙØ© Ø§ÙØ³Ø¹ÙØ¯ÙØ©":"SA","Ø¬Ø²Ø± Ø³ÙÙÙØ§Ù":"SB","Ø³ÙØ´Ù":"SC","Ø§ÙØ³ÙØ¯Ø§Ù":"SD","Ø§ÙØ³ÙÙØ¯":"SE","Ø³ÙØºØ§ÙÙØ±Ø©":"SG","Ø³Ø§ÙØª ÙÙÙÙØ§":"SH","Ø³ÙÙÙÙÙÙØ§":"SI","Ø³ÙØ§ÙØ¨Ø§Ø±Ø¯ ÙØ¬Ø§Ù ÙØ§ÙØ§Ù":"SJ","Ø³ÙÙÙØ§ÙÙØ§":"SK","Ø³ÙØ±Ø§ÙÙÙÙ":"SL","Ø³Ø§Ù ÙØ§Ø±ÙÙÙ":"SM","Ø§ÙØ³ÙØºØ§Ù":"SN","Ø§ÙØµÙÙØ§Ù":"SO","Ø³ÙØ±ÙÙØ§Ù":"SR","Ø¬ÙÙØ¨ Ø§ÙØ³ÙØ¯Ø§Ù":"SS","Ø³Ø§Ù ØªÙÙÙ ÙØ¨Ø±ÙÙØ³ÙØ¨Ù":"ST","Ø§ÙØ³ÙÙØ§Ø¯ÙØ±":"SV","Ø³ÙÙØª ÙØ§Ø±ØªÙ":"SX","Ø³ÙØ±ÙØ§":"SY","Ø³ÙØ§Ø²ÙÙØ§ÙØ¯":"SZ","ØªØ±ÙØ³ØªØ§Ù Ø¯Ù ÙÙÙÙØ§":"TA","Ø¬Ø²Ø± Ø§ÙØªØ±Ù ÙØ¬Ø§ÙÙÙØ³":"TC","ØªØ´Ø§Ø¯":"TD","Ø§ÙÙÙØ§Ø·Ø¹Ø§Øª Ø§ÙØ¬ÙÙØ¨ÙØ© Ø§ÙÙØ±ÙØ³ÙØ©":"TF","ØªÙØ¬Ù":"TG","ØªØ§ÙÙÙØ¯":"TH","Ø·Ø§Ø¬ÙØ³ØªØ§Ù":"TJ","ØªÙÙÙÙÙ":"TK","ØªÙÙÙØ± Ø§ÙØ´Ø±ÙÙØ©":"TL","ØªØ±ÙÙØ§ÙØ³ØªØ§Ù":"TM","ØªÙÙØ³":"TN","ØªÙÙØºØ§":"TO","ØªØ±ÙÙØ§":"TR","ØªØ±ÙÙÙØ¯Ø§Ø¯ ÙØªÙØ¨Ø§ØºÙ":"TT","ØªÙÙØ§ÙÙ":"TV","ØªØ§ÙÙØ§Ù":"TW","ØªØ§ÙØ²Ø§ÙÙØ§":"TZ","Ø£ÙÙØ±Ø§ÙÙØ§":"UA","Ø£ÙØºÙØ¯Ø§":"UG","Ø¬Ø²Ø± Ø§ÙÙÙØ§ÙØ§Øª Ø§ÙÙØªØ­Ø¯Ø© Ø§ÙØ¨Ø¹ÙØ¯Ø© Ø§ÙØµØºÙØ±Ø©":"UM","Ø§ÙÙÙØ§ÙØ§Øª Ø§ÙÙØªØ­Ø¯Ø©":"US","Ø£ÙØ±ØºÙØ§Ù":"UY","Ø£ÙØ²Ø¨ÙØ³ØªØ§Ù":"UZ","Ø§ÙÙØ§ØªÙÙØ§Ù":"VA","Ø³Ø§ÙØª ÙÙØ³ÙØª ÙØºØ±ÙØ§Ø¯ÙÙ":"VC","ÙÙØ²ÙÙÙØ§":"VE","Ø¬Ø²Ø± ÙØ±Ø¬ÙÙ Ø§ÙØ¨Ø±ÙØ·Ø§ÙÙØ©":"VG","Ø¬Ø²Ø± ÙØ±Ø¬ÙÙ Ø§ÙØ£ÙØ±ÙÙÙØ©":"VI","ÙÙØªÙØ§Ù":"VN","ÙØ§ÙÙØ§ØªÙ":"VU","Ø¬Ø²Ø± ÙØ§ÙØ³ ÙÙÙØªÙÙØ§":"WF","Ø³Ø§ÙÙØ§":"WS","Ø§ÙÙÙÙ":"YE","ÙØ§ÙÙØª":"YT","Ø¬ÙÙØ¨ Ø£ÙØ±ÙÙÙØ§":"ZA","Ø²Ø§ÙØ¨ÙØ§":"ZM","Ø²ÙÙØ¨Ø§Ø¨ÙÙ":"ZW","ÙÙØ·ÙØ© ØºÙØ± ÙØ¹Ø±ÙÙØ©":"ZZ"};
ilib.data.ctrynames_asa = {"Andora":"AD","Falme dha Kiarabu":"AE","Afuganistani":"AF","Antigua na Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Antili za Uholandhi":"AN","Angola":"AO","Ajentina":"AR","Thamoa ya Marekani":"AS","Authtria":"AT","Authtralia":"AU","Aruba":"AW","Adhabajani":"AZ","Bothnia na Hedhegovina":"BA","Babadothi":"BB","Bangladeshi":"BD","Ubelgiji":"BE","Bukinafatho":"BF","Bulgaria":"BG","Bahareni":"BH","Burundi":"BI","Benini":"BJ","Bermuda":"BM","Brunei":"BN","Brazili":"BR","Bahama":"BS","Butani":"BT","Botthwana":"BW","Belaruthi":"BY","Belidhe":"BZ","Kanada":"CA","Jamhuri ya Kidemokrathia ya Kongo":"CD","Jamhuri ya Afrika ya Kati":"CF","Kongo":"CG","Uthwithi":"CH","Kodivaa":"CI","Vithiwa vya Cook":"CK","Chile":"CL","Kameruni":"CM","China":"CN","Kolombia":"CO","Kothtarika":"CR","Kuba":"CU","Kepuvede":"CV","Kuprothi":"CY","Jamhuri ya Cheki":"CZ","Ujerumani":"DE","Jibuti":"DJ","Denmaki":"DK","Dominika":"DM","Jamhuri ya Dominika":"DO","Aljeria":"DZ","Ekwado":"EC","Ethtonia":"EE","Mithri":"EG","Eritrea":"ER","Hithpania":"ES","Uhabeshi":"ET","Ufini":"FI","Fiji":"FJ","Vithiwa vya Falkland":"FK","Mikronethia":"FM","Ufarantha":"FR","Gaboni":"GA","Uingeredha":"GB","Grenada":"GD","Jojia":"GE","Gwiyana ya Ufarantha":"GF","Ghana":"GH","Jibralta":"GI","Grinlandi":"GL","Gambia":"GM","Gine":"GN","Gwadelupe":"GP","Ginekweta":"GQ","Ugiriki":"GR","Gwatemala":"GT","Gwam":"GU","Ginebisau":"GW","Guyana":"GY","Hondurathi":"HN","Korathia":"HR","Haiti":"HT","Hungaria":"HU","Indonethia":"ID","Ayalandi":"IE","Ithraeli":"IL","India":"IN","Ieneo la Uingeredha katika Bahari Hindi":"IO","Iraki":"IQ","Uajemi":"IR","Aithlandi":"IS","Italia":"IT","Jamaika":"JM","Yordani":"JO","Japani":"JP","Kenya":"KE","Kirigizithtani":"KG","Kambodia":"KH","Kiribati":"KI","Komoro":"KM","Thantakitdhi na Nevith":"KN","Korea Kathkazini":"KP","Korea Kuthini":"KR","Kuwaiti":"KW","Vithiwa vya Kayman":"KY","Kazakithtani":"KZ","Laothi":"LA","Lebanoni":"LB","Thantaluthia":"LC","Lishenteni":"LI","Thirilanka":"LK","Liberia":"LR","Lethoto":"LS","Litwania":"LT","Lathembagi":"LU","Lativia":"LV","Libya":"LY","Moroko":"MA","Monako":"MC","Moldova":"MD","Bukini":"MG","Vithiwa vya Marshal":"MH","Mathedonia":"MK","Mali":"ML","Myama":"MM","Mongolia":"MN","Vithiwa vya Mariana vya Kathkazini":"MP","Martiniki":"MQ","Moritania":"MR","Monttherrati":"MS","Malta":"MT","Morithi":"MU","Modivu":"MV","Malawi":"MW","Mekthiko":"MX","Malethia":"MY","Mthumbiji":"MZ","Namibia":"NA","Nyukaledonia":"NC","Nijeri":"NE","Kithiwa cha Norfok":"NF","Nijeria":"NG","Nikaragwa":"NI","Uholandhi":"NL","Norwe":"NO","Nepali":"NP","Nauru":"NR","Niue":"NU","Nyudhilandi":"NZ","Omani":"OM","Panama":"PA","Peru":"PE","Polinesia ya Ufarantha":"PF","Papua":"PG","Filipino":"PH","Pakithtani":"PK","Polandi":"PL","Thantapieri na Mikeloni":"PM","Pitkairni":"PN","Pwetoriko":"PR","Palestina":"PS","Ureno":"PT","Palau":"PW","Paragwai":"PY","Katari":"QA","Riyunioni":"RE","Romania":"RO","Uruthi":"RU","Rwanda":"RW","Thaudi":"SA","Vithiwa vya Tholomon":"SB","Shelisheli":"SC","Thudani":"SD","Uthwidi":"SE","Thingapoo":"SG","Thantahelena":"SH","Thlovenia":"SI","Tholvakia":"SK","Thiera Leoni":"SL","Thamarino":"SM","Thenegali":"SN","Thomalia":"SO","Thurinamu":"SR","Thao Tome na Principe":"ST","Elsavado":"SV","Thiria":"SY","Uthwadhi":"SZ","Vithiwa vya Turki na Kaiko":"TC","Chadi":"TD","Togo":"TG","Tailandi":"TH","Tajikithtani":"TJ","Tokelau":"TK","Timori ya Mashariki":"TL","Turukimenithtani":"TM","Tunithia":"TN","Tonga":"TO","Uturuki":"TR","Trinidad na Tobago":"TT","Tuvalu":"TV","Taiwani":"TW","Tadhania":"TZ","Uganda":"UG","Marekani":"US","Urugwai":"UY","Udhibekithtani":"UZ","Vatikani":"VA","Thantavithenti na Grenadini":"VC","Venezuela":"VE","Vithiwa vya Virgin vya Uingeredha":"VG","Vithiwa vya Virgin vya Marekani":"VI","Vietinamu":"VN","Vanuatu":"VU","Walith na Futuna":"WF","Thamoa":"WS","Yemeni":"YE","Mayotte":"YT","Afrika Kuthini":"ZA","Dhambia":"ZM","Dhimbabwe":"ZW"};
ilib.data.ctrynames_as = {"à¦à§à¦¨à§à§°à§à¦à¦¡":false,"à¦à¦£à§à¦à¦¿à¦à§à§±à¦¾ à¦à§°à§ à¦¬à¦¾à§°à§à¦®à§à¦¡à¦¾":"AG","à¦à§°à§±":"SA","à¦¬à¦à¦¨à¦¿à§à¦¾ à¦à§°à§ à¦¹à¦¾à§°à§à¦à§à¦à§à¦­à¦¿à¦¨à¦¾":"BA","BVI":"VG","à¦à§à¦ª à¦­à¦¾à§°à§à¦¡à§ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"CV","à¦âà¦âà¦ à¦à§°à§ à¦à¦¿à¦²à¦¿à¦ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"CC","à¦âà¦âà¦ (à¦à¦¿à¦²à¦¿à¦) à¦¦à§à¦ªà¦ªà§à¦à§à¦":"CC","à¦à¦à¦à§, à¦à¦£à§°à¦¾à¦à§à¦¯ à§°à¦¿à¦ªà¦¾à¦¬à§à¦²à¦¿à¦":"CD","à¦à¦à¦à§ à¦à¦£à¦¤à¦¾à¦¨à§à¦¤à§à§°à¦¿à¦ à¦ªà§à§°à¦à¦¾à¦¤à¦¨à§à¦¤à§à§°":"CD","DPRK":"KP","à¦¡à§à¦¬à¦¾à¦":"AE","à¦à¦·à§à¦ à¦à¦¾à¦à¦®âà§°":"TL","à¦à¦à¦²à§à¦£à§à¦¡":"GB","à¦«à¦à¦²à§à¦£à§à¦¡à¦":"FK","à¦¹à§à§à§à§° à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦ à¦à§°à§ à¦®à§à¦à¦¡à¦¨à¦¾à¦²à§à¦¡ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"HM","à¦ªà§à¦²à§à¦·à§à¦à¦¾à¦à¦¨à§° à¦¦à¦à¦²à§à¦à§à¦¤ à¦à¦à§à¦à¦²":"PS","P. R. à¦à§à¦¨":"CN","à¦à§à¦¨à§° P. R":"CN","à¦ªà§à¦²à§à¦·à§à¦à¦¾à¦à¦¨ à¦à¦à§à¦à¦²":"PS","à¦à§à¦¨à§° à¦ªà§à§°à¦à¦¾à¦¤à¦¾à¦¨à§à¦¤à§à§°à¦¿à¦ à¦¨à¦¾à¦à§°à¦¿à¦":"CN","à¦ªâà¦²à¦¿à¦¨à§à¦à¦¿à§à¦¾":"061","PR à¦à§à¦¨":"CN","PRC":"CN","à¦à¦£à§°à¦¾à¦à§à¦¯ à¦à§à¦¨":"TW","à¦à¦£à§°à¦¾à¦à§à¦¯ à¦à§à¦¾à§°à¦²à§à¦£à§à¦¡":"IE","à¦à¦£à§°à¦¾à¦à§à¦¯ à¦à¦¿à¦à§à¦à¦¾à¦ªà§à§°":"SG","à¦à§à¦à¦£à§à¦ à¦¬à¦¾à§°à§à¦à¦":"BL","à¦à§à¦à¦£à§à¦ à¦¹à§à¦²à§à¦¨à¦¾, à¦à¦à§à¦¨à¦à¦¨ à¦à§°à§ à¦à§à§°à§à¦·à§à¦à¦¨ à¦¡à¦¾ à¦à§à¦¨à¦¹à¦¾":"SH","à¦à§à¦à¦£à§à¦ à¦à§à¦à¦ à¦à§°à§ à¦¨à§à¦­à¦¿à¦à¦":"KN","à¦à§à¦à¦£à§à¦  à¦ªà§à§à§à§°à¦¾ à¦à§°à§ à¦®à¦¿à¦à§à¦à¦²à¦¿à¦¨":"PM","à¦à§à¦à¦£à§à¦  à¦­à¦¿à¦¨à¦à§à¦£à§à¦ à¦à§°à§ à¦à§à§°à§à¦£à§à¦¡à¦¾à¦à¦¨à¦":"VC","à¦à¦¾à¦ à¦à§à¦® à¦à§°à§ à¦ªà§à§°à¦¿à¦¨à§à¦¸à¦¿à¦ªà¦¿":"ST","à¦¸à§à¦à¦à¦²à§à¦£à§à¦¡":"GB","à¦âà¦²âà¦®âà¦¨":"SB","à¦¦à¦à§à¦·à¦¿à¦£ à¦à§°à§à¦à¦¿à§à¦¾ à¦à§°à§ à¦¦à¦à§à¦·à¦¿à¦£ à¦à§à¦£à§à¦¡à¦à¦à¦ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"GS","à¦à§à¦à¦£à§à¦  à¦¬à¦¾à§°à§à¦¥à§à¦²à§à¦®à§":"BL","à¦à§à¦à¦£à§à¦  à¦¬à¦¾à§°à§à¦à¦":"BL","à¦à§à¦à¦£à§à¦  à¦¹à§à¦²à§à¦¨à¦¾":"SH","à¦à§à¦à¦£à§à¦  à¦¹à§à¦²à§à¦¨à¦¾, à¦à¦à§à¦¨à¦à¦¨ à¦à§°à§ à¦à§à§°à¦¿à¦à§à¦à¦£à§à¦ à¦à¦¨ à¦¡à¦¾ à¦à§à¦¨à¦¹à¦¾":"SH","à¦à§à¦à¦£à§à¦  à¦à§à¦à¦":"KN","à¦à§à¦à¦£à§à¦  à¦à§à¦à¦ à¦à§°à§ à¦¨à§à¦­à¦¿à¦":"KN","à¦à§à¦à¦£à§à¦  à¦²à§à¦à¦¿à§à¦¾":"LC","à¦à§à¦à¦£à§à¦  à¦®à¦¾à§°à§à¦à¦¿à¦¨":"MF","à¦à§à¦à¦£à§à¦  à¦ªà§à§à§à§°":"PM","à¦à§à¦à¦£à§à¦  à¦ªà§à§à§à§° à¦à§°à§ à¦®à¦¿à¦à¦¿à¦à¦²à¦¨":"PM","à¦à§à¦à¦£à§à¦  à¦­à¦¿à¦¨à¦à§à¦£à§à¦":"VC","à¦à§à¦à¦£à§à¦  à¦­à¦¿à¦¨à¦à§à¦£à§à¦ à¦à§°à§ à¦¦à§à¦¯ à¦à§à¦£à§à¦¡à¦¿à¦":"VC","à¦¸à§à¦«à¦¾à¦²à¦¬à¦¾à§°à§à¦¡ à¦à§°à§ à¦à¦¾à¦¨ à¦®à¦¾à§à§à¦¨":"SJ","à¦à§à¦¨à§à¦à¦¾à¦²":"SN","à¦¬à§à§°à¦¹à§à¦®à¦¦à§à¦¶":"BS","à¦à§à¦ à¦à¦£à§°à¦¾à¦à§à¦¯":"CZ","à¦¦à§à¦¯ à¦à§à¦£à§à¦¡à¦¿à¦":"VC","à¦¨à§à¦¡à¦¾à§°à¦²à§à¦£à§à¦¡":"NL","à¦«à¦¿à¦²à¦¿à¦ªà¦¾à¦à¦¨":"PH","à¦à¦¿à¦à§à¦à¦¾à¦ªà§à§° à¦à¦£à§°à¦¾à¦à§à¦¯":"SG","à¦¦à¦à§à¦·à¦¿à¦£ à¦à§à¦£à§à¦¡à¦à¦à¦ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"GS","à¦à§à¦¡à¦¾à¦¨":"SD","à¦à¦®à§à§°à¦¿à¦à¦¾à¦¨ à¦­à¦¾à§°à§à¦à¦¿à¦¨ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"VI","à¦à§à§°à¦¿à¦¨à¦¿à¦¡à¦¾à¦¡ à¦à¦£à§à¦¡ à¦âà¦¬à§à¦â":"TT","à¦à¦¾à§°à§à¦à¦ à¦à§°à§ à¦à¦¾à¦à¦âà¦ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"TC","à¦­à§à¦à¦¿à¦à¦¾à¦¨ à¦à¦¿à¦à¦¿":"VA","à¦­à§à¦à¦¿à¦à¦¾à¦¨ à¦à¦¿à¦à¦¿ à¦à§à¦à¦£à§à¦ à¦à¦":"VA","à¦­à¦¾à§°à§à¦à¦¿à¦¨ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"VI","à§±à§à¦²à¦":"GB","à§±à§à¦²à¦¿à¦ à¦à§°à§ à¦«à§à¦à§à¦¨à¦¾":"WF","à¦à§°à§":"IE","à¦à¦à§à¦à¦¨ à¦¦à§à¦¬à§à¦ª":"AC","à¦à¦£à§à¦¡âà§°à§":"AD","à¦¸à¦à¦¯à§à¦à§à¦¤ à¦à§°à§± à§°à¦¾à¦·à§à¦à§à§°à¦¸à¦®à§à¦¹":"AE","à¦à¦«à¦à¦¾à¦¨à¦¿à¦¸à§à¦¤à¦¾à¦¨":"AF","à¦à¦£à§à¦à¦¿à¦à§à§±à¦¾ à¦à§°à§ à¦¬à¦¾à§°à¦¬à§à¦¡à¦¾":"AG","à¦à¦à¦à§à¦à¦²à¦¾":"AI","à¦à¦²à¦¬à¦¾à¦¨à¦¿à§à¦¾":"AL","à¦à§°à§à¦®à§à¦¨à¦¿à§à¦¾":"AM","à¦¨à§à¦¡à¦¾à§°à¦²à§à¦£à§à¦¡à¦ à¦à¦£à§à¦à¦¿à¦²à§à¦":"AN","à¦à¦à¦à§à¦²à¦¾":"AO","à¦à¦£à§à¦à¦¾à§°à§à¦à¦à¦¿à¦à¦¾":"AQ","à¦à§°à§à¦à§à¦£à§à¦à¦¿à¦¨à¦¾":"AR","à¦à¦®à§à§°à¦¿à¦à¦¾à¦¨ à¦à¦¾à¦®âà§±à¦¾":"AS","à¦à¦·à§à¦à§à§°à¦¿à§à¦¾":"AT","à¦à¦·à§à¦à§à§°à§à¦²à¦¿à§à¦¾":"AU","à¦à§°à§à§±à¦¾":"AW","à¦à¦²à¦¾à¦£à§à¦¡à¦¾ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"AX","à¦à¦à§à§°à¦¬à¦¾à¦à¦à¦¾à¦¨":"AZ","à¦¬'à¦à¦¨à¦¿à§à¦¾ à¦à§°à§ à¦¹à¦¾à§°à§à¦à§à¦'à¦­à¦¿à¦¨à¦¾":"BA","à¦¬à¦¾à§°à§à¦¬à§à¦¡'à¦":"BB","à¦¬à¦¾à¦à¦²à¦¾à¦¦à§à¦¶":"BD","à¦¬à§à¦²à¦à¦¿à§à¦¾à¦®":"BE","à¦¬à§à§°à¦à¦¿à¦¨à¦¾ à¦«à¦¾à¦'":"BF","à¦¬à§à¦²à¦à§à§°à¦¿à§à¦¾":"BG","à¦¬à¦¾à¦¹à§°à§à¦à¦¨":"BH","à¦¬à§à§°à§à¦£à§à¦¡à¦¿":"BI","à¦¬à§à¦¨à¦¿à¦¨":"BJ","à¦¬à¦¾à§°à§à¦®à§à¦¡à¦¾":"BM","à¦¬à§à§°à§à¦¨à§à¦":"BN","à¦¬'à¦²à¦¿à¦­à¦¿à§à¦¾":"BO","à¦à§à§°à¦¿à¦¬à¦¿à§à¦¾à¦¨ à¦¨à§à¦¡à¦¾à§°à¦²à§à¦£à§à¦¡":"BQ","à¦¬à§à§°à¦¾à¦à¦¿à¦²":"BR","à¦¬à¦¾à¦¹à¦¾à¦®à¦¾à¦":"BS","à¦­à§à¦à¦¾à¦¨":"BT","à¦¬à¦à¦­à§à¦ à¦¦à§à¦¬à§à¦ª":"BV","à¦¬à¦à§à¦à§±à¦¾à¦¨à¦¾":"BW","à¦¬à§à¦²à¦¾à§°à¦¾à¦":"BY","à¦¬à§à¦²à¦¿à¦":"BZ","à¦à¦¾à¦¨à¦¾à¦¡à¦¾":"CA","Cocos [Keeling] Islands":"CC","à¦à¦à§à¦à§ - à¦à¦¿à¦¨à¦à¦¹à¦¾à¦à¦¾":"CD","à¦à§à¦¨à§à¦¦à§à§°à§à§ à¦à¦«à§à§°à¦¿à¦à¦¾à¦¨ à¦ªà§à§°à¦à¦¾à¦¤à¦¨à§à¦¤à§à§°":"CF","à¦à¦à§à¦à§ - à¦¬à§à§°à¦¾à¦à¦¾à¦²à¦¿à¦­à¦¿à¦²":"CG","à¦à§à¦à¦à¦¾à§°à¦²à§à¦£à§à¦¡":"SZ","à¦âà¦ à¦¡à¦¿-à¦à¦à¦­à§°à¦¿à§à¦¾":"CI","à¦à§à¦ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"CK","à¦à¦¿à¦²":"CL","à¦à§à¦®à§à§°à§à¦¨":"CM","à¦à§à¦¨":"CN","à¦à¦²à¦®à§à¦¬à¦¿à§à¦¾":"CO","à¦à§à¦²à¦¿à¦ªà¦¾à§°à§à¦à¦¨ à¦¦à§à¦¬à§à¦ª":"CP","à¦'à¦·à§à¦à¦¾ à§°à¦¿à¦à¦¾":"CR","à¦à¦¿à¦à¦¬à¦¾":"CU","à¦à§à¦ª à¦­à¦¾à§°à§à¦¡à§":"CV","à¦à§à§°à¦¾à¦à¦¾à¦":"CW","à¦à§à§°à¦¿à¦·à§à¦à¦®à¦¾à¦ à¦à¦à¦²à§à¦£à§à¦¡":"CX","à¦à¦¾à¦à¦ªà§à§°à¦¾à¦":"CY","à¦à§à¦ à¦ªà§à§°à¦à¦¾à¦¤à¦¨à§à¦¤à§à§°":"CZ","à¦à¦¾à§°à§à¦®à¦¾à¦¨à§":"DE","à¦¡à¦¿à§à§à¦âà¦à¦¾à§°à§à¦à¦¿à§à¦¾":"DG","à¦à¦¿à¦¬à§à¦à¦¿":"DJ","à¦¡à§à¦¨à¦®à¦¾à§°à§à¦":"DK","à¦¡'à¦®à¦¿à¦¨à¦¿à¦à¦¾":"DM","à¦¡'à¦®à¦¿à¦¨à¦¿à¦à¦¾à¦¨ à§°à¦¿à¦ªà¦¾à¦¬à§à¦²à¦¿à¦":"DO","âà¦à¦²à¦à§à§°à¦¿à§à¦¾":"DZ","à¦à§à¦à¦à¦¾ à¦à§°à§ à¦®à§à¦²à¦¿à¦²à§à¦²à¦¾":"EA","à¦à¦à§à§±à§à¦¡à§°":"EC","à¦à¦·à§à¦à§à¦¨à¦¿à§à¦¾":"EE","à¦à¦à¦¿à¦ªà§à¦¤":"EG","à§±à§à¦·à§à¦à¦¾à§°à§à¦£ à¦à¦¾à¦¹à¦¾à§°à¦¾":"EH","à¦à§°à¦¿à¦à§à§°à¦¿à§à¦¾":"ER","à¦¸à§à¦ªà§à¦à¦¨":"ES","à¦à¦¥à¦¿à¦'à¦ªà¦¿à§à¦¾":"ET","à¦à¦à§°à§à¦ªà¦¿à§à¦¾à¦¨ à¦à¦à¦¨à¦¿à§à¦¨":"EU","à¦«à¦¿à¦¨à¦²à§à¦£à§à¦¡":"FI","à¦«à¦¿à¦à¦¿":"FJ","à¦«à¦à¦²à§à¦£à§à¦¡ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"FK","à¦®à¦¾à¦à¦à§à§°âà¦¨à§à¦à¦¿à§à¦¾":"FM","à¦«à¦¾à§°â à¦¦à§à¦ªà¦ªà§à¦à§à¦":"FO","à¦«à§°à¦¾à¦à§":"FR","à¦à§à¦¬à¦¨":"GA","à¦à¦à¦¨à¦¾à¦à¦à§à¦¡ à¦à¦¿à¦à¦¡à¦®":"GB","à¦à§à§°à§à¦¨à§à¦¡à¦¾":"GD","à¦à§°à§à¦à¦¿à§à¦¾":"GE","à¦«à§à§°à¦¾à¦¨à§à¦¸ à¦à§à§à¦¾à¦¨à¦¾":"GF","à¦à§à§±à¦¾à§°à§à¦£à¦à§":"GG","à¦à¦¾à¦¨à¦¾":"GH","à¦à¦¿à¦¬à§à§°à§à¦²à¦à¦¾à§°":"GI","à¦à§à§°à§à¦¨à¦²à§à¦£à§à¦¡":"GL","à¦à¦¾à¦®à§à¦¬à¦¿à§à¦¾":"GM","à¦à§à§à¦¾à¦¨à¦¾":"GN","à¦à§à§±à¦¾à¦¡à§à¦²à§à¦ª":"GP","à¦à¦à§à§±à¦¾à¦'à§°à¦¿à§à§à¦² à¦à¦¿à¦¨à¦¿à§à¦¾":"GQ","à¦à§à§°à§à¦":"GR","à¦¦à¦à§à¦·à¦¿à¦£ à¦à§°à§à¦à¦¿à§à¦¾ à¦à§°à§ à¦¦à§à¦¯ à¦¦à¦à§à¦·à¦¿à¦£ à¦à§à¦£à§à¦¡à¦à¦à¦ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"GS","à¦à§à§±à§à¦à¦®à¦¾à¦²à¦¾":"GT","à¦à§à§±à¦¾à¦®":"GU","à¦à§à§à¦¾à¦¨à¦¾-à¦¬à¦¿à¦à§à¦à¦¾à¦":"GW","à¦à§à§±à¦¾à¦¨à¦¾":"GY","à¦¹à¦ à¦à¦ SAR à¦à§à¦¨":"HK","à¦¹à§à§à§à§°à§à¦¡ à¦¦à§à¦¬à§à¦ª à¦à§°à§ à¦®à§à¦à¦¡âà¦¨à¦¾à¦²à§à¦¡ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"HM","à¦¹à¦£à§à¦¡à§à§°à¦¾à¦":"HN","à¦à§à§°'à§±à§à¦à¦¿à§à¦¾":"HR","à¦¹à¦¾à¦à¦à¦¿":"HT","à¦¹à¦¾à¦à¦à§à§°à§":"HU","à¦à§à¦¨à¦¾à§°à§ à¦¦à§à¦¬à§à¦ªà¦¸à¦®à§à¦¹":"IC","à¦à¦£à§à¦¦à§à¦¨à§à¦à¦¿à§à¦¾":"ID","à¦à§à¦¾à§°à¦²à§à¦£à§à¦¡":"IE","à¦à¦à§°à¦¾à¦à¦²":"IL","à¦à¦à¦à¦² à¦à§± à¦®à§à¦¨":"IM","à¦­à¦¾à§°à¦¤":"IN","à¦à¦£à§à¦¡à§-à¦¬à§à§°à¦¿à¦à¦¿à¦ à¦­à§à¦®à¦§à§à¦¯à¦¸à¦¾à¦à§°à§à§ à¦à¦à§à¦à¦²":"IO","à¦à§°à¦¾à¦":"IQ","à¦à§°à¦¾à¦¨":"IR","à¦à¦à¦à¦²à§à¦£à§à¦¡":"IS","à¦à¦¤à¦¾à¦²à¦¿":"IT","à¦à¦¾à§°à§à¦à§":"JE","à¦à¦¾à¦®à¦¾à¦à¦à¦¾":"JM","à¦à§°à§à¦¡à¦¾à¦¨":"JO","à¦à¦¾à¦ªà¦¾à¦¨":"JP","à¦à§à¦¨à¦¿à§à¦¾":"KE","à¦à¦¿à§°à¦à§à¦¸à§à¦¤à¦¾à¦¨":"KG","à¦'à¦®à§à¦¬à§à¦¡à¦¿à§à¦¾":"KH","à¦à¦¿à§°à¦¿à¦¬à¦¾à¦à¦¿":"KI","à¦à§à¦®à§à§°à¦":"KM","à¦à§à¦à¦£à§à¦  à¦à§à¦à¦ à¦à§°à§ à¦¨à§à¦­à§à¦":"KN","à¦à¦¤à§à¦¤à§° à¦à§à§°à¦¿à§à¦¾":"KP","à¦¦à¦à§à¦·à¦¿à¦£ à¦à§à§°à¦¿à§à¦¾":"KR","à¦à§à§±à§à¦":"KW","à¦à§à¦®à§à¦¨ à¦à¦à¦²à§à¦£à§à¦¡à¦":"KY","à¦à¦¾à¦à¦¾à¦à¦¾à¦¸à§à¦¤à¦¾à¦¨":"KZ","à¦²à¦¾à¦à¦":"LA","à¦²à§à¦¬à¦¾à¦¨à¦¨":"LB","à¦à§à¦£à§à¦ à¦²à§à¦à¦¿à§à¦¾":"LC","à¦²à§à¦à¦à¦à§à¦¨à¦·à§à¦à§à¦à¦¨":"LI","à¦¶à§à§°à§à¦²à¦à¦à¦¾":"LK","à¦²à¦¿à¦¬à§à§°à¦¿à§à¦¾":"LR","à¦²à§à¦à§à¦¥à§":"LS","à¦²à¦¿à¦¥à§à§±à¦¾à¦¨à¦¿à§à¦¾":"LT","à¦²à¦¾à¦à§à¦¸à§à¦®à¦¬à¦¾à§°à§à¦":"LU","à¦²à¦¾à¦à¦­à¦¿à§à¦¾":"LV","à¦²à¦¿à¦¬à¦¿à§à¦¾":"LY","à¦®'à§°à§à¦à§à¦à§":"MA","à¦®à§à¦¨à¦¾à¦à§":"MC","à¦®à§à¦²à¦¡à§à¦­à¦¾":"MD","à¦®'à¦£à§à¦à§à¦¨à§à¦à§à§°à§":"ME","à¦®à¦¾à¦¡à¦¾à¦à¦¾à¦¸à§à¦à¦¾à§°":"MG","à¦®à¦¾à§°à§à¦¶à¦¾à¦² à¦à¦à¦²à§à¦£à§à¦¡":"MH","à¦®à§à¦à¦¿à¦¡à¦¨à¦¿à§à¦¾":"MK","à¦®à¦¾à¦²à¦¿":"ML","Myanmar [Burma]":"MM","à¦®à¦à¦à§à¦²à¦¿à§à¦¾":"MN","à¦®à¦¾à¦à¦¾à¦ SAR à¦à§à¦¨":"MO","à¦à¦¤à§à¦¤à§° à¦®à¦¾à§°à¦¿à§à¦¾à¦¨à¦¾ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"MP","à¦®à¦¾à§°à§à¦à¦¿à¦¨à¦¿à¦":"MQ","à¦®'à§°à¦¿à¦à¦¿à§à¦¾à¦¨à¦¾":"MR","à¦®à¦£à§à¦à¦à§à§°à¦¾à¦":"MS","à¦®à¦¾à¦²à§à¦à¦¾":"MT","à¦®à§°à¦¿à¦à¦¾à¦":"MU","à¦®à¦¾à¦²à¦¡à¦¿à¦­à¦":"MV","à¦®à¦¾à¦²à¦¾à§±à¦¿":"MW","à¦®à§à¦à§à¦¸à¦¿à¦à§":"MX","à¦®à¦¾à¦²à§à¦à¦¿à§à¦¾":"MY","à¦®à§à¦à¦¾à¦®à§à¦¬à¦¿à¦":"MZ","à¦¨à¦¾à¦®à¦¿à¦¬à¦¿à§à¦¾":"NA","à¦¨à¦¿à¦ à¦à§à¦²à§à¦£à§à¦¡à§à¦¨à¦¿à§à¦¾":"NC","à¦¨à¦¾à¦à¦à¦¾à§°":"NE","à¦¨à§°à¦«à¦ à¦¦à§à¦¬à§à¦ª":"NF","à¦¨à¦¾à¦à¦à§à§°à¦¿à§à¦¾":"NG","à¦¨à¦¿à¦à¦¾à§°à¦¾à¦à§à§±à¦¾":"NI","à¦¨à§à¦¦à¦¾à§°à¦²à§à¦£à§à¦¡à¦":"NL","à¦¨'à§°à§±à§":"NO","à¦¨à§à¦ªà¦¾à¦²":"NP","à¦¨à¦¾à¦à§°à§":"NR","à¦¨à¦¿à¦":"NU","à¦¨à¦¿à¦à¦à¦¿à¦²à§à¦£à§à¦¡":"NZ","à¦à¦®à¦¾à¦¨":"OM","à¦ªà¦¾à¦¨à¦¾à¦®à¦¾":"PA","à¦ªà§à§°à§":"PE","à¦«à§°à¦¾à¦à§ à¦ª'à¦²à¦¿à¦¨à§à¦à¦¿à§à¦¾":"PF","à¦ªà¦¾à¦ªà§à§±à¦¾ à¦¨à¦¿à¦ à¦à¦¿à¦¨à¦¿à§à¦¾":"PG","à¦«à¦¿à¦²à¦¿à¦ªà¦¾à¦à¦¨à¦":"PH","à¦ªà¦¾à¦à¦¿à¦¸à§à¦¤à¦¾à¦¨":"PK","à¦ªà§à¦²à§à¦£à§à¦¡":"PL","à¦ªà¦¿à¦à¦à§à¦à§°à§à¦£ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"PN","à¦ªà§à§°à§à¦à§ à§°à¦¿à¦à§":"PR","à¦ªà§°à§à¦à§à¦à¦¾à¦²":"PT","à¦ªà¦¾à¦²à¦¾à¦":"PW","à¦ªà§à§°à¦¾à¦à§à§±à§":"PY","à¦à¦¾à¦à¦¾à§°":"QA","à¦à¦à¦à¦²à¦¾à¦à¦¨ à¦­à§à¦®à¦§à§à¦¯à¦¸à¦¾à¦à§°":"QO","à§°à¦¿à¦à¦à¦¨à¦¿à§à¦¨":"RE","à§°à§à¦®à¦¾à¦¨à¦¿à§à¦¾":"RO","à¦à¦¾à§°à§à¦¬à¦¿à§à¦¾":"RS","à§°à¦¾à¦à¦¿à§à¦¾":"RU","à§°à¦¾à§±à¦¾à¦£à§à¦¡à¦¾":"RW","à¦à§à¦¦à¦¿ à¦à§°à§±":"SA","à¦à¦²à§à¦®à¦¨ à¦à¦à¦²à§à¦£à§à¦¡":"SB","à¦à§à¦à¦à§à¦²à¦¿à¦":"SC","à¦à§à¦¡à¦¾à¦¨":"SD","à¦à§à¦à¦¡à§à¦¨":"SE","à¦à¦¿à¦à¦à¦¾à¦ªà§à§°":"SG","à¦¶à§à¦²à§à¦­à§à¦¨à¦¿à§à¦¾":"SI","à¦¶à§à¦²à§à¦­à¦¾à¦à¦¿à§à¦¾":"SK","à¦à¦¿à§à§à§°à¦¾ à¦²à¦¿à¦'à¦¨":"SL","à¦à¦¾à¦¨ à¦®à¦¾à§°à¦¿à¦¨à§":"SM","à¦à§à¦¨à§à¦à¦¾à¦²":"SN","à¦à§à¦®à¦¾à¦²à¦¿à§à¦¾":"SO","à¦à§à§°à¦¿à¦¨à¦¾à¦®":"SR","à¦¦à¦à§à¦·à¦¿à¦£ à¦à§à¦¡à¦¾à¦¨":"SS","à¦à¦¾à¦ à¦à¦® à¦à§°à§ à¦ªà§à§°à¦¿à¦¨à§à¦¸à¦¿à¦ªà¦¿":"ST","El à¦¸à§à¦²à§à¦­à§à¦¡'à§°":"SV","à¦à¦¿à¦£à§à¦ à¦®à¦¾à§°à§à¦à¦¿à¦¨":"SX","à¦à¦¿à§°à¦¿à§à¦¾":"SY","à¦à§à§°à¦¿à¦à§à¦à¦£à§à¦ à¦à¦¨ à¦¡à¦¾ à¦à§à¦¨à¦¹à¦¾":"TA","à¦à§à§°à§à¦à¦ à¦à§°à§ à¦à¦¾à¦à¦à§à¦ à¦¦à§à¦¬à§à¦ª":"TC","à¦à¦¾à¦¡":"TD","à¦«à§à§°à¦¾à¦¨à§à¦¸ à¦¦à¦à§à¦·à¦¿à¦£à§° à¦¦à§à¦¶à¦¸à¦®à§à¦¹":"TF","à¦'à¦à§":"TG","à¦¥à¦¾à¦à¦²à§à¦£à§à¦¡":"TH","à¦¤à¦¾à¦à¦¿à¦à¦¿à¦¸à§à¦¤à¦¾à¦¨":"TJ","à¦âà¦à§à¦²à¦¾à¦":"TK","à¦à¦¾à¦à¦®à§à§°-à¦²à§à¦·à§à¦à§":"TL","à¦¤à§à§°à§à¦à¦®à§à¦¨à¦¿à¦¸à§à¦¤à¦¾à¦¨":"TM","à¦à§à¦¨à¦¿à¦à¦¿à§à¦¾":"TN","à¦à¦à¦à¦¾":"TO","à¦¤à§à§°à§à¦à§":"TR","à¦¤à§à§°à¦¿à¦¨à¦¿à¦¦à¦¾à¦¦ à¦à¦£à§à¦¡ à¦'à¦¬à§à¦à§":"TT","à¦à§à¦­à¦¾à¦²à§":"TV","à¦à¦¾à¦à§±à¦¾à¦¨":"TW","à¦à¦¾à¦à§à¦à¦¾à¦¨à¦¿à§à¦¾":"TZ","à¦à¦à¦à§à§°à§à¦à¦¨":"UA","à¦à¦à¦à¦¾à¦£à§à¦¡à¦¾":"UG","U.S à¦®à¦¾à¦à¦¨à§° à¦à¦à¦à¦²à¦¾à¦à¦ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"UM","à¦¯à§à¦à§à¦¤à§°à¦¾à¦·à§à¦à§à§°":"US","à¦à§°à§à¦à§à§±à§":"UY","à¦à¦à¦¬à§à¦à¦¿à¦¸à§à¦¤à¦¾à¦¨":"UZ","à¦à§à¦£à§à¦ à¦­à¦¿à¦¨à¦à§à¦£à§à¦ à¦à§°à§ à¦¦à§à¦¯ à¦à§à§°à§à¦¨à¦¾à¦¡à¦¾à¦à¦¨à¦":"VC","à¦­à§à¦¨à¦¿à¦à§à§±à§à¦²à¦¾":"VE","à¦¬à§à§°à¦¿à¦à¦¿à¦ à¦­à¦¾à§°à§à¦à¦¿à¦¨ à¦à¦à¦²à§à¦£à§à¦¡":"VG","U.S. à¦­à¦¾à§°à§à¦à¦¿à¦¨ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"VI","à¦­à¦¿à§à§à¦à¦¨à¦¾à¦®":"VN","à¦­à¦¾à¦¨à§à§±à¦¾à¦à§":"VU","à§±à¦¾à¦²à¦¿à¦ à¦à§°à§ à¦«à§à¦à§à¦¨à¦¾":"WF","à¦à¦¾à¦®à§à§±à¦¾":"WS","à§à§à¦®à§à¦¨":"YE","à¦®à§à§'à¦à§":"YT","à¦¦à¦à§à¦·à¦¿à¦£ à¦à¦«à§à§°à¦¿à¦à¦¾":"018","à¦à¦¾à¦®à§à¦¬à¦¿à§à¦¾":"ZM","à¦à¦¿à¦®à§à¦¬à¦¾à¦¬à§à§±à§":"ZW","à¦à¦à§à¦à¦¾à¦¤ à¦à¦à§à¦à¦²":"ZZ","à¦à¦à¦¿à§à¦¾":"142","à¦®à¦§à§à¦¯ à¦à¦à¦¿à§à¦¾":"143","à¦ªà¦¶à§à¦à¦¿à¦® à¦à¦à¦¿à§à¦¾":"145","à¦à¦à§°à§à¦ª":"150","à¦ªà§à§± à¦à¦à§°à§à¦ª":"151","à¦à¦¤à§à¦¤à§° à¦à¦à§°à§à¦ª":"154","à¦ªà¦¶à§à¦à¦¿à¦® à¦à¦à§°à§à¦ª":"155","à¦²à§à¦à¦¿à¦¨ à¦à¦®à§à§°à¦¿à¦à¦¾":"419","à¦¬à¦¿à¦¶à§à¦¬":"001","à¦à¦«à§à§°à¦¿à¦à¦¾":"002","à¦à¦¤à§à¦¤à§° à¦à¦®à§à§°à¦¿à¦à¦¾":"021","à¦¦à¦à§à¦·à¦¿à¦£ à¦à¦®à§à§°à¦¿à¦à¦¾":"005","à¦­à§à¦®à¦§à§à¦¯à¦¸à¦¾à¦à§°à§à§":"009","à¦ªà¦¶à§à¦à¦¿à¦® à¦à¦«à§à§°à¦¿à¦à¦¾":"011","à¦®à¦§à§à¦¯ à¦à¦«à§à§°à¦¿à¦à¦¾":"017","à¦ªà§à§± à¦à¦«à§à§°à¦¿à¦à¦¾":"014","à¦à¦¤à§à¦¤à§° à¦à¦«à§à§°à¦¿à¦à¦¾":"015","à¦à¦®à§à§°à¦¿à¦à¦¾à¦":"019","à¦à§à§°à¦¿à¦¬à¦¿à§à¦¾à¦¨":"029","à¦ªà§à§± à¦à¦à¦¿à§à¦¾":"030","à¦¦à¦à§à¦·à¦¿à¦£ à¦à¦à¦¿à§à¦¾":"034","à¦¦à¦à§à¦·à¦¿à¦£-à¦ªà§à§± à¦à¦à¦¿à§à¦¾":"035","à¦¦à¦à§à¦·à¦¿à¦£ à¦à¦à§°à§à¦ª":"039","à¦à¦·à§à¦à§à§°à§à¦²à¦¾à¦à¦¿à§à¦¾":"053","à¦®à§à¦²à¦¾à¦¨à¦à¦¿à§à¦¾":"054","à¦®à¦¾à¦à¦à§à§°âà¦¨à§à¦à¦¿à§à¦¾à¦¨ à¦à¦à§à¦à¦²":"057","U.S. à¦à¦à¦à¦²à¦¾à¦à¦ à¦¦à§à¦ªà¦ªà§à¦à§à¦":"UM"};
ilib.data.ctrynames_az = {"Aziya":"142","Orta Aziya":"143","QÉrb Asiya":"145","Avropa":"150","ÅÉrq Avropa":"151","Åimal Avropa":"154","QÉrb Avropa":"155","LatÄ±n AmerikasÄ±":"419","DÃ¼nya":"001","Afrika":"002","Åimal Amerika":"003","CÉnub Amerika":"005","Okeyaniya":"009","QÉrb afrika":"011","Orta Amerika":"013","ÅÉrq Afrika":"014","Åimal Afrika":"015","Orta Afrika":"017","Amerikalar":"019","KariyÄ±plar":"029","ÅÉrq Asiya":"030","CÉnub Asiya":"034","CÉnub ÅÉrq Asiya":"035","CÉnub Avropa":"039","Avstraliya vÉ Yeni Zelandiya":"053","Melanesya":"054","Mikronesiya reqionu":"057","Polineziya":"061","Andorra":"AD","BirlÉÅmiÅ ÆrÉb EmiratlarÄ±":"AE","ÆfqÉnistan":"AF","Antiqua vÉ Barbuda":"AG","Anquila":"AI","Albaniya":"AL","ErmÉnistan":"AM","Hollandiya antilleri":"AN","Angola":"AO","Antarktika":"AQ","Arqentina":"AR","Amerika SamoasÄ±":"AS","Avstriya":"AT","Avstraliya":"AU","Aruba":"AW","Aland AdalarÄ±":"AX","AzÉrbaycan":"AZ","Bosniya vÉ Herzokovina":"BA","Barbados":"BB","BanqladeÅ":"BD","BelÃ§ika":"BE","Burkina Faso":"BF","Bolqariya":"BG","Bahreyn":"BH","Burundi":"BI","Benin":"BJ","Seynt Bartelemey":"BL","Bermuda":"BM","Bruney":"BN","Boliviya":"BO","Braziliya":"BR","Bahamalar":"BS","Butan":"BT","Bove AdasÄ±":"BV","Botsvana":"BW","Belarus":"BY","Beliz":"BZ","Kanada":"CA","Kokos AdalarÄ±":"CC","Konqo - KinÅasa":"CD","Orta Afrika respublikasÄ±":"CF","Konqo - Brazavil":"CG","isveÃ§riya":"CH","Ä°vori Sahili":"CI","Kuk AdalarÄ±":"CK","Ãile":"CL","Kamerun":"CM","Ãin":"CN","Kolumbiya":"CO","Kosta Rika":"CR","Kuba":"CU","Kape Verde":"CV","Ãristmas AdasÄ±":"CX","Kipr":"CY","Ãex respublikasÄ±":"CZ","Almaniya":"DE","Ciboti":"DJ","Danemarka":"DK","Dominika":"DM","Dominik RespublikasÄ±":"DO","CezayÄ±r":"DZ","Ekvador":"EC","Estoniya":"EE","Misir":"EG","QÉrb Sahara":"EH","Eritreya":"ER","Ä°spaniya":"ES","Efiopiya":"ET","Avropa BirlÉÅliyi":"EU","Finlandiya":"FI","Fici":"FJ","Folkland AdalarÄ±":"FK","Mikronesiya":"FM","Faro AdalarÄ±":"FO","Fransa":"FR","Qabon":"GA","BirlÉÅmiÅ KrallÄ±q":"GB","Qrenada":"GD","GÃ¼rcÃ¼stan":"GE","FransÄ±z QuyanasÄ±":"GF","GÃ¶rnsey":"GG","Qana":"GH","Gibraltar":"GI","Qrinland":"GL","Qambiya":"GM","Qvineya":"GN","Qvadalup":"GP","Ekvator Qineya":"GQ","YunanÄ±stan":"GR","CÉnub GÃ¼rcÃ¼stan vÉ CÉnub SandvilÃ§ AdalarÄ±":"GS","Qvatemala":"GT","Quam":"GU","Qvineya-Bisau":"GW","Quyana":"GY","Honk Konq Ã§ina":"HK","HÃ¶rd vÉ Makdonald AdalarÄ±":"HM","Qonduras":"HN","Xorvatiya":"HR","Haiti":"HT","Macaristan":"HU","Ä°ndoneziya":"ID","Ä°rlandiya":"IE","Ä°zrail":"IL","Man AdasÄ±":"IM","Hindistan":"IN","Britaniya-Hindistan Okeanik territoriyasÄ±":"IO","Ä°rak":"IQ","Ä°ran":"IR","Ä°slandiya":"IS","Ä°taliya":"IT","CÃ¶rsi":"JE","Yamayka":"JM","ÃrdÃ¼n":"JO","Yaponiya":"JP","Kenya":"KE","KÄ±rqÄ±zstan":"KG","Kambodiya":"KH","Kiribati":"KI","Komoros":"KM","Seynt Kits vÉ Nevis":"KN","Åimal Koreya":"KP","CÉnub Koreya":"KR","Kuveyt":"KW","Kayman AdalarÄ±":"KY","Kazaxstan":"KZ","Laos":"LA","Lebanon":"LB","Seynt Lusiya":"LC","LixtenÅteyn":"LI","Åri Lanka":"LK","Liberiya":"LR","Lesoto":"LS","Litva":"LT","LÃ¼ksemburq":"LU","Latviya":"LV","Libya":"LY","Morokko":"MA","Monako":"MC","Moldova":"MD","Monteneqro":"ME","Seynt Martin":"MF","Madaqaskar":"MG","MarÅal AdalarÄ±":"MH","Masedoniya":"MK","Mali":"ML","Myanmar":"MM","Monqoliya":"MN","Makao Ãina":"MO","Åimal Mariana AdalarÄ±":"MP","Martiniqu":"MQ","Mavritaniya":"MR","Montserat":"MS","Malta":"MT","Mavritis":"MU","Maldiv":"MV","Malavi":"MW","Meksika":"MX","Malaysiya":"MY","Mazambik":"MZ","Namibiya":"NA","Yeni Kaledoniya":"NC","nijer":"NE","Norfolk AdasÄ±":"NF","Nijeriya":"NG","Nikaraqua":"NI","Hollandiya":"NL","Norvec":"NO","Nepal":"NP","Nauru":"NR","Niye":"NU","Yeni Zelandiya":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","FransÄ±z Polineziya":"PF","Papua Yeni Qvineya":"PG","Filipin":"PH","Pakistan":"PK","PolÅa":"PL","Seynt Piyer vÉ Mikelon":"PM","Pitkarn":"PN","Puerto Riko":"PR","FÉlÉstin BÃ¶lqÃ¼sÃ¼":"PS","Portuqal":"PT","Palav":"PW","Paraqvay":"PY","Qatar":"QA","Uzak Okeyaniya":"QO","Reyunion":"RE","Romaniya":"RO","Serbiya":"RS","Rusiya":"RU","Rvanda":"RW","Saudi ÆrÉbistan":"SA","Solomon AdalarÄ±":"SB","SeyÃ§els":"SC","sudan":"SD","isveÃ§":"SE","Sinqapur":"SG","Seynt Elena":"SH","Sloveniya":"SI","svalbard vÉ yan mayen":"SJ","Slovakiya":"SK","Siyera Leon":"SL","San Marino":"SM","Seneqal":"SN","Somaliya":"SO","surinamÉ":"SR","Sao Tom vÉ Prinsip":"ST","El Salvador":"SV","siriya":"SY","svazilÉnd":"SZ","TÃ¼rk vÉ Kaykos AdalarÄ±":"TC","Ãad":"TD","FransÄ±z CÉnub teritoriyasÄ±":"TF","Toqo":"TG","tayland":"TH","tacikistan":"TJ","Tokelau":"TK","ÅÉrq Timor":"TL","TÃ¼rkmÉnistan":"TM","Tunisiya":"TN","Tonqa":"TO","TÃ¼rkiya":"TR","Trinidan vÉ Tobaqo":"TT","Tuvalu":"TV","tayvan":"TW","tanzaniya":"TZ","Ukraina":"UA","Uqanda":"UG","BirlÉÅmiÅ ÅtatlarÄ±n uzaq adalarÄ±":"UM","Amerika BirlÉÅmiÅ ÅtatlarÄ±":"US","Uruqvay":"UY","ÃzbÉkistan":"UZ","Vatikan":"VA","Seynt Vinsent vÉ Qrenada":"VC","Venesuela":"VE","Britaniya Virgin AdalarÄ±":"VG","ABÅ Virqin AdalarÄ±":"VI","Vyetnam":"VN","Vanuatu":"VU","Valis vÉ Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayot":"YT","CÉnub Afrika":"ZA","Zambiya":"ZM","Zimbabve":"ZW","bilinmir":"ZZ"};
ilib.data.ctrynames_bas = {"ÃÅdÉÌr":"AD","ÃdnÃ  i BilÉÌÅ bi ArÄbÃ¬Ã ":"AE","ÃfgÃ nÃ¬stÃ¢Å":"AF","ÃÅtigÃ  ÉÉ BÃ rbudÃ ":"AG","ÃÅgiyÃ ":"AI","ÃlbanÃ¬Ã ":"AL","ÃrmenÃ¬Ã ":"AM","ÃÅtÃ®y Ç¹lÉÌndi":"AN","ÃÅgolÃ ":"AO","ÃrgÃ ÅtinÃ ":"AR","ÃstrÇk":"AT","ÃstralÃ¬Ã ":"AU","ÃrubÃ ":"AW","ÃzÉÌrbajÃ Å":"AZ","BÃ²hniÃ  ÆrzÃ¨gÃ²vinÃ ":"BA","BÃ rbadÃ²":"BB","BÃ ÅglÃ dÉÌs":"BD","BÉlgyÃ¹m":"BE","BÃ¹rkÃ¬nÃ  FasÃ²":"BF","BÃ¹lgarÃ¬Ã ":"BG","BÃ raÃ¬n":"BH","BÃ¹rundÃ¬":"BI","BÃ¨nÉÌÅ":"BJ","BÉÌrmudÃ ":"BM","Brunei":"BN","BÃ²livÃ¬Ã ":"BO","BrÃ sÃ®l":"BR","BÃ hamÃ s":"BS","BÃ¹tÃ¢n":"BT","BÃ²dsÃ¹anÃ ":"BW","BÃ¨larÃ¹s":"BY","BÃ¨lÃ®s":"BZ","KÃ nadÃ ":"CA","KÃ²Ågo Ã¬kÉÅi":"CD","ÅÌÉm AfrÄ«kÃ ":"CF","KÃ²Ågo":"CG","SÃ¹wÃ®s":"CH","MÃ Å mi NjÉÌk":"CI","BÃ¬Ã²n bi Kook":"CK","KÃ¬lÃ®":"CL","KÃ mÉÌrÃ»n":"CM","KinÃ ":"CN","KÉÌlÉmbÃ¬Ã ":"CO","KÃ²stÃ  RikÃ ":"CR","KubÃ ":"CU","KabwÉá·r":"CV","KiprÃ²":"CY","JamÃ¢n":"DE","JÃ¬butÃ¬":"DJ","DÃ nmÃ¢rk":"DK","DÃ²mnÃ®k":"DM","DÃ²mnikÃ ":"DO","ÃlgerÃ¬Ã ":"DZ","ÃkwÃ torÃ¬Ã ":"EC","ÃstonÃ¬Ã ":"EE","ÃgÃ®ptÃ²":"EG","ÃrÃ¬trÄÃ ":"ER","PÃ nya":"ES","ÃtÃ¬opÃ¬Ã ":"ET","FÃ¬nlÃ¢nd":"FI","Fiji":"FJ","BÃ¬Ã²n bi Falkland":"FK","MÃ¬krÃ²nesÃ¬Ã ":"FM","PÃ¹lÃ si / FÉÌlÉÌnsi /":"FR","GÃ bÉÌÅ":"GA","ÃdnÃ  i LÉÌÅ":"GB","GrÃ¨nadÃ ":"GD","GÃ¨ÉrgÃ¬Ã ":"GE","GÃ¹yanÃ  PÃ¹lÃ si":"GF","GanÃ ":"GH","GÃ¬lbrÃ tÃ¢r":"GI","GrÇnlÃ nd":"GL","GÃ mbiÃ ":"GM","GÃ¬nÃª":"GN","GwÃ dÃ¨lÃ»p":"GP","GÃ¬ne ÃkwÃ torÃ¬Ã ":"GQ","GrÇkyÃ ":"GR","GwÃ tÃ¨malÃ ":"GT","GÃ¹Ã¢m":"GU","GÃ¬ne BÃ¬sÃ Ã´":"GW","GÃ¹yanÃ ":"GY","ÆÌÅdurÃ s":"HN","KrÃ²asÃ¬Ã ":"HR","ÃitÃ¬":"HT","ÆÌÅgriÃ¬":"HU","IndÃ²nÃ¨siÃ ":"ID","ÃrlÃ¢nd":"IE","IsrÃ ÉÌl":"IL","IndÃ¬Ã ":"IN","BÃ¬tÃ¨k bi ÅgisÃ¬ i TÅ«yÉ ÄªndÃ¬Ã ":"IO","ÃrÃ¢k":"IQ","ÃrÃ¢Å":"IR","ÃslandÃ¬Ã ":"IS","ÃtalÃ¬Ã ":"IT","JÃ mÃ ikÃ ":"JM","YÉÌrdaniÃ ":"JO","KenÃ¬Ã ":"KE","KÃ¬rgÃ¬zÃ¬stÃ Å":"KG","KÃ mbodÃ¬Ã ":"KH","KÃ¬rÃ¬batÃ¬":"KI","KÉÌmÉÌr":"KM","NÃ»mpubi KÃ®ts nÃ¬ NevÃ¬s":"KN","KÉÌre Ã¬ ÅÌÉmbÉk":"KP","KÉÌre Ã¬ ÅÌwÉÌlmbÉk":"KR","KÃ²wÃªt":"KW","BÃ¬Ã²n bi KaymÃ n":"KY","KÃ zÃ kstÃ¢Å":"KZ","LÃ Ã´s":"LA","LÃ¨banÃ²n":"LB","NÃ»mpubi LusÃ¬":"LC","LigstÉntÃ n":"LI","SrÃ¬laÅkÃ ":"LK","LÃ¬berÃ¬Ã ":"LR","LesÃ²tÃ²":"LS","LÃ¬tÃ¹anÃ¬Ã ":"LT","LÃ¹gsÃ mbÃ»r":"LU","LÃ dviÃ ":"LV","LibÃ¬Ã ":"LY","MÃ rokÃ²":"MA","MÃ²nakÃ²":"MC","MoldavÃ¬Ã ":"MD","MÃ dÃ gÃ skÃ¢r":"MG","BÃ¬Ã²n bi MarcÃ l":"MH","MÃ sÃ¨donÃ¬Ã ":"MK","MÃ li":"ML","MyÃ nmÃ¢r":"MM","MÃ²ÅgolÃ¬Ã ":"MN","BÃ¬Ã²n bi MarÃ¬anÃ  ÅÌÉmbÉk":"MP","MÃ rtÃ¬nÃ®k":"MQ","MÃ²rÃ¬tanÃ¬Ã ":"MR","MÉÌÅserÃ t":"MS","MaltÃ ":"MT","MÃ²rÃ®s":"MU","MÃ ldÃ®f":"MV","MÃ lÃ wi":"MW","MÉÌgsÃ®k":"MX","MÃ lÉÌsÃ¬Ã ":"MY","MÃ²sÃ mbÃ®k":"MZ","NÃ mibÃ¬Ã ":"NA","KÃ lÃ¨donÃ¬Ã  YÉÌndÉ":"NC","NÃ¬jÉÌr":"NE","Ãn i NÉrfÉÌk":"NF","NÃ¬gerÃ¬Ã ":"NG","NÃ¬kÃ ragwÃ ":"NI","Ç¸lÉndi":"NL","NÉÌrvegÃ¬Ã ":"NO","NÃ¨pÃ¢l":"NP","NerÃ¹":"NR","NÃ¬uÉÌ":"NU","SÃ¬lÃ¢nd YÉÌndÉ":"NZ","ÃmÃ¢n":"OM","PÃ nÃ ma":"PA","PÃ¨rÃ»":"PE","PÃ²lÃ¬nesÃ¬Ã  PÃ¹lÃ si":"PF","GÃ¬ne Ã¬ PÃ pu":"PG","FÃ¬lÃ¬pÃ®n":"PH","PÃ kÃ¬stÃ¢n":"PK","PÃ²lÃ nd":"PL","NÃ»mpubi PetrÃ² nÃ¬ MikÃ¨lÃ´n":"PM","PÃ¬dkaÃ¬rn":"PN","PÉÌrtÃ² RikÃ²":"PR","PÃ lÉÌhtinÃ  HyÉÌÅg nÃ¬ GazÃ ":"PS","PÉÌtÉkÃ¬":"PT","PÃ laÃ¹":"PW","PÃ rÃ gwÃª":"PY","KÃ tÃ¢r":"QA","RÃ¨unyÉÌÅ":"RE","RÃ¹manÃ¬Ã ":"RO","RuslÃ nd":"RU","RÃ¹andÃ ":"RW","SÃ udi ÃrabÃ¬Ã ":"SA","BÃ¬Ã²n bi SalÅmÃ²":"SB","SÃ¨sÉÌl":"SC","SÃ¹dÃ¢Å":"SD","SwedÉÌn":"SE","SÃ¬ÅgÃ pÃ»r":"SG","NÃ»mpubi ÆlÄnÃ ":"SH","SlÃ²vanÃ¬Ã ":"SI","SlÃ²vakÃ¬Ã ":"SK","SiÃ¨ra LÃ¨ÉÌn":"SL","NÃ»mpubi MÄatÃ¬n":"SM","SÃ¨nÃ¨gÃ¢l":"SN","SÃ²malÃ¬Ã ":"SO","SÃ¹rinÃ¢m":"SR","SÃ o TÃ²me ÉÉ PrÉÌÅcipÃ¨":"ST","SÃ lvÃ dÉÌr":"SV","SirÃ¬Ã ":"SY","SwÃ zÃ¬lÃ¢nd":"SZ","BÃ¬Ã²n bi TÃ»rks nÃ¬ KalkÃ²s":"TC","CÃ¢d":"TD","TÃ²go":"TG","TaylÃ nd":"TH","TÃ jÃ¬kÃ¬staÅ":"TJ","TÃ²kÃ¨laÃ²":"TK","TÃ¬mÉÌr lÃ¬kÃ²l":"TL","TÃ¹rgmÃ¨nÃ¬stÃ¢n":"TM","TÃ¹nisÃ¬Ã ":"TN","TÉÅgÃ ":"TO","TÃ¹rkÃ¢y":"TR","TrÃ¬nidÃ d ÉÉ TÃ²bagÃ²":"TT","TÃ¹vÃ lÃ¹":"TV","TÃ ywÃ¢n":"TW","TÃ nzÃ niÃ ":"TZ","ÃkrÉÌn":"UA","ÃgandÃ ":"UG","ÃdnÃ  i BilÉÌÅ bi AmerkÃ ":"US","ÃrÃ¹gwÃªy":"UY","ÃzbÃ¨kÃ¬stÃ¢n":"UZ","VÃ tÃ¬kÃ¢Å":"VA","NÃ»mpubi VÉÌÅsÃ¢Å nÃ¬ grÃ¨nÃ dÃ®n":"VC","VÃ¨nÃ¨zÃ¹elÃ ":"VE","BÃ¬Ã²n bi kÉnji bi ÅgisÃ¬":"VG","BÃ¬Ã²n bi kÉnji bi U.S.":"VI","VÃ¬ÉÌdnÃ¢m":"VN","VÃ nÃ¹atÃ¹":"VU","WÃ lÃ®s nÃ¬ FÃ¹tunÃ ":"WF","SÃ moÃ ":"WS","YÃ¨mÉÌn":"YE","MÃ yÉÌt":"YT","ÃfrÇkÃ  SÉÌ":"ZA","ZÃ mbiÃ ":"ZM","ZÃ¬mbÃ bwÃª":"ZW"};
ilib.data.ctrynames_be = {"ÐÐ·ÑÑ":"142","Ð¦ÑÐ½ÑÑÐ°Ð»ÑÐ½Ð°Ñ ÐÐ·ÑÑ":"143","ÐÐ°ÑÐ¾Ð´Ð½ÑÑ ÐÐ·ÑÑ":"145","ÐÑÑÐ¾Ð¿Ð°":"150","Ð£ÑÑÐ¾Ð´Ð½ÑÑ ÐÑÑÐ¾Ð¿Ð°":"151","ÐÐ°ÑÐ½Ð¾ÑÐ½Ð°Ñ ÐÑÑÐ¾Ð¿Ð°":"154","ÐÐ°ÑÐ¾Ð´Ð½ÑÑ ÐÑÑÐ¾Ð¿Ð°":"155","Ð¡Ð²ÐµÑ":"001","ÐÑÑÑÐºÐ°":"002","ÐÐ°ÑÐ½Ð¾ÑÐ½Ð°Ñ ÐÐ¼ÑÑÑÐºÐ°":"003","ÐÐ°ÑÐ´Ð½ÑÐ²Ð°Ñ ÐÐ¼ÑÑÑÐºÐ°":"005","ÐÐºÑÑÐ½ÑÑ":"009","ÐÐ°ÑÐ¾Ð´Ð½ÑÑ ÐÑÑÑÐºÐ°":"011","Ð¦ÑÐ½ÑÑÐ°Ð»ÑÐ½Ð°Ñ ÐÐ¼ÑÑÑÐºÐ°":"013","Ð£ÑÑÐ¾Ð´Ð½ÑÑ ÐÑÑÑÐºÐ°":"014","ÐÐ°ÑÐ½Ð¾ÑÐ½Ð°Ñ ÐÑÑÑÐºÐ°":"015","Ð¦ÑÐ½ÑÑÐ°Ð»ÑÐ½Ð°Ñ ÐÑÑÑÐºÐ°":"017","ÐÐ°ÑÐ´Ð½ÑÐ²Ð°Ñ ÐÑÑÑÐºÐ°":"018","ÐÐ°ÑÐ½Ð¾ÑÐ½Ð°Ñ Ñ ÐÐ°ÑÐ´Ð½ÑÐ²Ð°Ñ ÐÐ¼ÐµÑÑÐºÑ":"019","ÐÐ¨Ð Ñ ÐÐ°Ð½Ð°Ð´Ð°":"021","ÐÐ°ÑÑÐ±ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ":"029","Ð£ÑÑÐ¾Ð´Ð½ÑÑ ÐÐ·ÑÑ":"030","ÐÐ°ÑÐ´Ð½ÑÐ²Ð°Ñ ÐÐ·ÑÑ":"034","ÐÐ°ÑÐ´Ð½ÑÐ²Ð°-Ð£ÑÑÐ¾Ð´Ð½ÑÑ ÐÐ·ÑÑ":"035","ÐÐ°ÑÐ´Ð½ÑÐ²Ð°Ñ ÐÑÑÐ¾Ð¿Ð°":"039","ÐÑÑÑÑÐ°Ð»ÑÑ Ñ ÐÐ¾Ð²Ð°Ñ ÐÑÐ»Ð°Ð½Ð´ÑÑ":"053","ÐÐ°Ð»ÑÐ½ÐµÐ·ÑÑ":"061","ÐÐ½Ð´Ð¾ÑÐ°":"AD","ÐÐ±'ÑÐ´Ð½Ð°Ð½ÑÑ ÐÑÐ°Ð±ÑÐºÑÑ Ð­Ð¼ÑÑÐ°ÑÑ":"AE","ÐÑÐ³Ð°Ð½ÑÑÑÐ°Ð½":"AF","ÐÐ½ÑÑÐ³ÑÐ° Ñ ÐÐ°ÑÐ±ÑÐ´Ð°":"AG","ÐÐ½Ð³ÑÑÐ»Ð»Ñ":"AI","ÐÐ»Ð±Ð°Ð½ÑÑ":"AL","ÐÑÐ¼ÐµÐ½ÑÑ":"AM","ÐÑÐ´ÑÑÐ»Ð°Ð½Ð´ÑÐºÑÑ ÐÐ½ÑÑÐ»Ñ":"AN","ÐÐ½Ð³Ð¾Ð»Ð°":"AO","ÐÐ½ÑÐ°ÑÐºÑÑÐºÐ°":"AQ","ÐÑÐ³ÐµÐ½ÑÑÐ½Ð°":"AR","ÐÐ¼ÐµÑÑÐºÐ°Ð½ÑÐºÐ°Ðµ Ð¡Ð°Ð¼Ð¾Ð°":"AS","ÐÑÑÑÑÑÑ":"AT","ÐÑÑÑÑÐ°Ð»ÑÑ":"AU","ÐÑÑÐ±Ð°":"AW","ÐÐ»Ð°Ð½Ð´ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ":"AX","ÐÐ·ÐµÑÐ±Ð°Ð¹Ð´Ð¶Ð°Ð½":"AZ","ÐÐ¾ÑÐ½ÑÑ Ñ ÐÐµÑÑÐ°Ð³Ð°Ð²ÑÐ½Ð°":"BA","ÐÐ°ÑÐ±Ð°Ð´Ð°Ñ":"BB","ÐÐ°Ð½Ð³Ð»Ð°Ð´ÑÑ":"BD","ÐÐµÐ»ÑÐ³ÑÑ":"BE","ÐÑÑÐºÑÐ½Ð°-Ð¤Ð°ÑÐ¾":"BF","ÐÐ°Ð»Ð³Ð°ÑÑÑ":"BG","ÐÐ°ÑÑÑÐ¹Ð½":"BH","ÐÑÑÑÐ½Ð´Ð·Ñ":"BI","ÐÐµÐ½ÑÐ½":"BJ","ÐÐµÑÐ¼ÑÐ´ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ":"BM","ÐÑÑÐ½ÐµÐ¹-ÐÐ°ÑÑÑÐ°Ð»Ð°Ð¼":"BN","ÐÐ°Ð»ÑÐ²ÑÑ":"BO","ÐÑÐ°Ð·ÑÐ»ÑÑ":"BR","ÐÐ°Ð³Ð°Ð¼ÑÐºÑÑ ÐÑÑÑÐ°Ð²Ñ":"BS","ÐÑÑÐ°Ð½":"BT","ÐÑÐ²Ñ Ð²Ð¾ÑÑÑÐ°Ñ":"BV","ÐÐ°ÑÑÐ²Ð°Ð½Ð°":"BW","ÐÐµÐ»Ð°ÑÑÑÑ":"BY","ÐÐµÐ»ÑÐ·":"BZ","ÐÐ°Ð½Ð°Ð´Ð°":"CA","ÐÐ°ÐºÐ¾ÑÐ°Ð²ÑÑ Ð°ÑÑÑÐ°Ð²Ñ":"CC","ÐÐ¾Ð½Ð³Ð°, ÐÑÐ¼Ð°ÐºÑÐ°ÑÑÑÐ½Ð°Ñ Ð ÑÑÐ¿ÑÐ±Ð»ÑÐºÐ°":"CD","Ð¦ÑÐ½ÑÑÐ°Ð»ÑÐ½Ð°-ÐÑÑÑÐºÐ°Ð½ÑÐºÐ°Ñ Ð ÑÑÐ¿ÑÐ±Ð»ÑÐºÐ°":"CF","ÐÐ¾Ð½Ð³Ð°":"CG","Ð¨Ð²ÐµÐ¹ÑÐ°ÑÑÑ":"CH","ÐÑÐºÐ° Ð°ÑÑÑÐ°Ð²Ñ":"CK","Ð§ÑÐ»Ñ":"CL","ÐÐ°Ð¼ÐµÑÑÐ½":"CM","ÐÑÑÐ°Ð¹":"CN","ÐÐ°Ð»ÑÐ¼Ð±ÑÑ":"CO","ÐÐ¾ÑÑÐ°-Ð ÑÐºÐ°":"CR","ÐÑÐ±Ð°":"CU","ÐÐ°Ð±Ð°-ÐÐµÑÐ´Ñ":"CV","ÐÐ°Ð»ÑÐ´Ð°Ñ Ð²Ð¾ÑÑÑÐ°Ñ":"CX","ÐÑÐ¿Ñ":"CY","Ð§ÑÑÑÑ":"CZ","ÐÐµÑÐ¼Ð°Ð½ÑÑ":"DE","ÐÐ¶ÑÐ±ÑÑÑ":"DJ","ÐÐ°Ð½ÑÑ":"DK","ÐÐ°Ð¼ÑÐ½ÑÐºÐ°":"DM","ÐÐ°Ð¼ÑÐ½ÑÐºÐ°Ð½ÑÐºÐ°Ñ Ð ÑÑÐ¿ÑÐ±Ð»ÑÐºÐ°":"DO","ÐÐ»Ð¶ÑÑ":"DZ","Ð­ÐºÐ²Ð°Ð´Ð¾Ñ":"EC","Ð­ÑÑÐ¾Ð½ÑÑ":"EE","ÐÐ³ÑÐ¿ÐµÑ":"EG","ÐÐ°ÑÐ¾Ð´Ð½ÑÑ Ð¡Ð°ÑÐ°ÑÐ°":"EH","Ð­ÑÑÑÑÑÑ":"ER","ÐÑÐ¿Ð°Ð½ÑÑ":"ES","Ð­ÑÑÐ¾Ð¿ÑÑ":"ET","ÐÑÑÐ°Ð¿ÐµÐ¹ÑÐºÑ ÐÐ²ÑÐ·":"EU","Ð¤ÑÐ½Ð»ÑÐ½Ð´ÑÑ":"FI","Ð¤ÑÐ´Ð¶Ñ":"FJ","Ð¤Ð¾Ð»ÐºÐ»ÑÐ½Ð´ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ":"FK","ÐÑÐºÑÐ°Ð½ÐµÐ·ÑÑ":"FM","Ð¤ÑÐ°Ð½ÑÑÑ":"FR","ÐÐ°Ð±Ð¾Ð½":"GA","ÐÐµÐ»ÑÐºÐ°Ð±ÑÑÑÐ°Ð½ÑÑ":"GB","ÐÑÑÐ½Ð°Ð´Ð°":"GD","ÐÑÑÐ·ÑÑ":"GE","Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ°Ñ ÐÐ²ÑÑÐ½Ð°":"GF","ÐÐ°Ð½Ð°":"GH","ÐÑÐ±ÑÐ°Ð»ÑÐ°Ñ":"GI","ÐÑÑÐ½Ð»Ð°Ð½Ð´ÑÑ":"GL","ÐÐ°Ð¼Ð±ÑÑ":"GM","ÐÐ²ÑÐ½ÐµÑ":"GN","ÐÐ²Ð°Ð´ÑÐ»ÑÐ¿Ð°":"GP","Ð­ÐºÐ²Ð°ÑÐ°ÑÑÑÐ»ÑÐ½Ð°Ñ ÐÐ²ÑÐ½ÐµÑ":"GQ","ÐÑÑÑÑÑ":"GR","ÐÐ°ÑÐ´Ð½ÑÐ²Ð°Ñ ÐÐ¶Ð¾ÑÐ´Ð¶ÑÑ Ñ ÐÐ°ÑÐ´Ð½ÑÐ²ÑÑ Ð¡Ð°Ð½Ð´Ð²ÑÑÐ°Ð²Ñ Ð°ÑÑÑÐ°Ð²Ñ":"GS","ÐÐ²Ð°ÑÑÐ¼Ð°Ð»Ð°":"GT","ÐÐ²ÑÐ½ÐµÑ-ÐÑÑÐ°Ñ":"GW","ÐÐ°ÑÐ½Ð°":"GY","ÐÐ¾Ð½-ÐÐ¾Ð½Ð³, ÐÑÑÐ°Ð¹ (Ð¡ÐÐ )":"HK","ÐÑÑÐ´Ð° Ð²Ð¾ÑÑÑÐ°Ñ Ñ ÐÐ°ÐºÐÐ¾Ð½Ð°Ð»Ð´Ð° Ð°ÑÑÑÐ°Ð²Ñ":"HM","ÐÐ°Ð½Ð´ÑÑÐ°Ñ":"HN","Ð¥Ð°ÑÐ²Ð°ÑÑÑ":"HR","ÐÐ°ÑÑÑ":"HT","ÐÐµÐ½Ð³ÑÑÑ":"HU","ÐÐ½Ð´Ð°Ð½ÐµÐ·ÑÑ":"ID","ÐÑÐ»Ð°Ð½Ð´ÑÑ":"IE","ÐÐ·ÑÐ°ÑÐ»Ñ":"IL","ÐÐ½Ð´ÑÑ":"IN","ÐÑÑÑÐ°Ð½ÑÐºÐ°Ñ ÑÑÑÑÑÐ¾ÑÑÑ ÐÐ½Ð´ÑÐ¹ÑÐºÐ°Ð³Ð° Ð°ÐºÑÑÐ½Ñ":"IO","ÐÑÐ°Ðº":"IQ","ÐÑÐ°Ð½, ÐÑÐ»Ð°Ð¼ÑÐºÐ°Ñ Ð ÑÑÐ¿ÑÐ±Ð»ÑÐºÐ°":"IR","ÐÑÐ»Ð°Ð½Ð´ÑÑ":"IS","ÐÑÐ°Ð»ÑÑ":"IT","Ð¯Ð¼Ð°Ð¹ÐºÐ°":"JM","ÐÐ°ÑÐ´Ð°Ð½ÑÑ":"JO","Ð¯Ð¿Ð¾Ð½ÑÑ":"JP","ÐÐµÐ½ÑÑ":"KE","ÐÑÑÐ³ÑÐ·ÑÑÐ°Ð½":"KG","ÐÐ°Ð¼Ð±Ð¾Ð´Ð¶Ð°":"KH","ÐÑÑÑÐ±Ð°ÑÑ":"KI","ÐÐ°Ð¼Ð¾ÑÑÐºÑÑ ÐÑÑÑÐ°Ð²Ñ":"KM","Ð¡ÑÐ½Ñ-ÐÑÑÑ Ñ ÐÑÐ²ÑÑ":"KN","ÐÐ°ÑÐ½Ð¾ÑÐ½Ð°Ñ ÐÐ°ÑÑÑ":"KP","ÐÐ°ÑÐ´Ð½ÑÐ²Ð°Ñ ÐÐ°ÑÑÑ":"KR","ÐÑÐ²ÐµÐ¹Ñ":"KW","ÐÐ°Ð¹Ð¼Ð°Ð½Ð°Ð²Ñ Ð°ÑÑÑÐ°Ð²Ñ":"KY","ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½":"KZ","ÐÐ°Ð¾ÑÐºÐ°Ñ ÐÐ°ÑÐ¾Ð´Ð½Ð°-ÐÑÐ¼Ð°ÐºÑÐ°ÑÑÑÐ½Ð°Ñ Ð ÑÑÐ¿ÑÐ±Ð»ÑÐºÐ°":"LA","ÐÑÐ²Ð°Ð½":"LB","Ð¡ÑÐ½Ñ-ÐÑÑÑÑ":"LC","ÐÑÑÑÑÐ½ÑÑÑÐ¹Ð½":"LI","Ð¨ÑÑ-ÐÐ°Ð½ÐºÐ°":"LK","ÐÑÐ±ÐµÑÑÑ":"LR","ÐÐµÑÐ¾ÑÐ°":"LS","ÐÑÑÐ²Ð°":"LT","ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³":"LU","ÐÐ°ÑÐ²ÑÑ":"LV","ÐÑÐ²ÑÐ¹ÑÐºÐ°Ñ ÐÑÐ°Ð±ÑÐºÐ°Ñ ÐÐ¶Ð°Ð¼Ð°ÑÑÑÑÑ":"LY","ÐÐ°ÑÐ¾ÐºÐ°":"MA","ÐÐ°Ð½Ð°ÐºÐ°":"MC","ÐÐ°Ð»Ð´Ð¾Ð²Ð°":"MD","Ð§Ð°ÑÐ½Ð°Ð³Ð¾ÑÑÑ":"ME","ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ":"MG","ÐÐ°ÑÑÐ°Ð»Ð°Ð²Ñ ÐÑÑÑÐ°Ð²Ñ":"MH","ÐÐ°ÐºÐµÐ´Ð¾Ð½ÑÑ, ÐÐ®Ð ":"MK","ÐÐ°Ð»Ñ":"ML","Ð'ÑÐ½Ð¼Ð°":"MM","ÐÐ°Ð½Ð³Ð¾Ð»ÑÑ":"MN","ÐÐ°ÐºÐ°Ð¾, ÐÑÑÐ°Ð¹ (Ð¡ÐÐ )":"MO","ÐÐ°ÑÐ½Ð¾ÑÐ½ÑÑ ÐÐ°ÑÑÑÐ½ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ":"MP","ÐÐ°ÑÑÑÐ½ÑÐºÐ°":"MQ","ÐÐ°ÑÑÑÑÐ°Ð½ÑÑ":"MR","ÐÐ¾Ð½ÑÑÑÐ°Ñ":"MS","ÐÐ°Ð»ÑÑÐ°":"MT","ÐÐ°ÑÑÑÐºÑÐ¹":"MU","ÐÐ°Ð»ÑÐ´ÑÑÑÐºÑÑ ÐÑÑÑÐ°Ð²Ñ":"MV","ÐÐ°Ð»Ð°Ð²Ñ":"MW","ÐÐµÐºÑÑÐºÐ°":"MX","ÐÐ°Ð»Ð°Ð¹Ð·ÑÑ":"MY","ÐÐ°Ð·Ð°Ð¼Ð±ÑÐº":"MZ","ÐÐ°Ð¼ÑÐ±ÑÑ":"NA","ÐÐ¾Ð²Ð°Ñ ÐÐ°Ð»ÐµÐ´Ð¾Ð½ÑÑ":"NC","ÐÑÐ³ÐµÑ":"NE","ÐÐ¾ÑÑÐ°Ð»ÐºÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ":"NF","ÐÑÐ³ÐµÑÑÑ":"NG","ÐÑÐºÐ°ÑÐ°Ð³ÑÐ°":"NI","ÐÑÐ´ÑÑÐ»Ð°Ð½Ð´Ñ":"NL","ÐÐ°ÑÐ²ÐµÐ³ÑÑ":"NO","ÐÐµÐ¿Ð°Ð»":"NP","ÐÐ°ÑÑÑ":"NR","ÐÑÑÑ":"NU","ÐÐ¾Ð²Ð°Ñ ÐÐµÐ»Ð°Ð½Ð´ÑÑ":"NZ","ÐÐ¼Ð°Ð½":"OM","ÐÐ°Ð½Ð°Ð¼Ð°":"PA","ÐÐµÑÑ":"PE","Ð¤ÑÐ°Ð½ÑÐ·ÑÐºÐ°Ñ ÐÐ°Ð»ÑÐ½ÑÐ·ÑÑ":"PF","ÐÐ°Ð¿ÑÐ°-ÐÐ¾Ð²Ð°Ñ ÐÐ²ÑÐ½ÐµÑ":"PG","Ð¤ÑÐ»ÑÐ¿ÑÐ½Ñ":"PH","ÐÐ°ÐºÑÑÑÐ°Ð½":"PK","ÐÐ¾Ð»ÑÑÑÐ°":"PL","ÐÐ°Ð»ÐµÑÑÑÐ½ÑÐºÑÑ ÑÑÑÑÑÐ¾ÑÑÑ":"PS","ÐÐ°ÑÑÑÐ³Ð°Ð»ÑÑ":"PT","ÐÐ°Ð»Ð°Ñ":"PW","ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹":"PY","ÐÐ°ÑÐ°Ñ":"QA","ÐÐ¾Ð½ÐºÐ°Ð²Ð°Ñ ÐÐºÑÑÐ½ÑÑ":"QO","Ð ÑÑÐ½ÑÑÐ½":"RE","Ð ÑÐ¼ÑÐ½ÑÑ":"RO","Ð¡ÐµÑÐ±ÑÑ":"RS","Ð Ð°ÑÑÑ":"RU","Ð ÑÐ°Ð½Ð´Ð°":"RW","Ð¡Ð°ÑÐ´Ð°ÑÑÐºÐ°Ñ ÐÑÐ°Ð²ÑÑ":"SA","Ð¡Ð°Ð»Ð°Ð¼Ð¾Ð½Ð°Ð²Ñ ÐÑÑÑÐ°Ð²Ñ":"SB","Ð¡ÐµÐ¹ÑÑÐ»ÑÑÐºÑÑ ÐÑÑÑÐ°Ð²Ñ":"SC","Ð¡ÑÐ´Ð°Ð½":"SD","Ð¨Ð²ÐµÑÑÑ":"SE","Ð¡ÑÐ½Ð³Ð°Ð¿ÑÑ":"SG","Ð¡Ð²ÑÑÐ¾Ð¹ ÐÐ»ÐµÐ½Ñ, ÐÐ¾ÑÑÑÐ°Ñ":"SH","Ð¡Ð»Ð°Ð²ÐµÐ½ÑÑ":"SI","Ð¡Ð²Ð°Ð»ÑÐ±Ð°ÑÐ´ (ÐÐ°ÑÐ½Ð¾ÑÐ½Ð°-Ð£ÑÑÐ¾Ð´Ð½ÑÑ ÐÑÐ¼Ð»Ñ) Ñ Ð¯Ð½-ÐÐ°ÐµÐ½":"SJ","Ð¡Ð»Ð°Ð²Ð°ÐºÑÑ":"SK","Ð¡ÑÐµÑÐ°-ÐÐµÐ¾Ð½Ñ":"SL","Ð¡ÐµÐ½ÐµÐ³Ð°Ð»":"SN","Ð¡Ð°Ð¼Ð°Ð»Ñ":"SO","Ð¡ÑÑÑÐ½Ð°Ð¼":"SR","Ð¡Ð°Ð½-Ð¢Ð¾Ð¼Ñ Ñ ÐÑÑÐ½ÑÑÐ¿Ñ":"ST","Ð¡Ð°Ð»ÑÐ²Ð°Ð´Ð¾Ñ":"SV","Ð¡ÑÑÑÐ¹ÑÐºÐ°Ñ ÐÑÐ°Ð±ÑÐºÐ°Ñ Ð ÑÑÐ¿ÑÐ±Ð»ÑÐºÐ°":"SY","Ð¡Ð²Ð°Ð·ÑÐ»ÐµÐ½Ð´":"SZ","Ð¢ÑÑÐºÑ Ñ ÐÐ°Ð¹ÐºÐ°Ñ Ð°ÑÑÑÐ°Ð²Ñ":"TC","Ð§Ð°Ð´":"TD","Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÑÑ ÐÐ°ÑÐ´Ð½ÑÐ²ÑÑ ÑÑÑÑÑÐ¾ÑÑÑ":"TF","Ð¢Ð¾Ð³Ð°":"TG","Ð¢Ð°Ð¹Ð»Ð°Ð½Ð´":"TH","Ð¢Ð°Ð´Ð¶ÑÐºÑÑÑÐ°Ð½":"TJ","Ð¢Ð°ÐºÐµÐ»Ð°Ñ":"TK","Ð£ÑÑÐ¾Ð´Ð½Ñ Ð¢ÑÐ¼Ð¾Ñ":"TL","Ð¢ÑÑÐºÐ¼ÐµÐ½ÑÑÑÐ°Ð½":"TM","Ð¢ÑÐ½ÑÑ":"TN","Ð¢Ð°Ð½Ð³ÑÐ¹ÑÐºÐ°Ñ":"TO","Ð¢ÑÑÑÑÑ":"TR","Ð¢ÑÑÐ½ÑÐ´Ð°Ð´ Ñ Ð¢Ð°Ð±Ð°Ð³Ð°":"TT","Ð¢ÑÐ²Ð°Ð»Ñ":"TV","Ð¢Ð°Ð¹Ð²Ð°Ð½Ñ":"TW","Ð¢Ð°Ð½Ð·Ð°Ð½ÑÑ, ÐÐ±'ÑÐ´Ð½Ð°Ð½Ð°Ñ Ð ÑÑÐ¿ÑÐ±Ð»ÑÐºÐ°":"TZ","Ð£ÐºÑÐ°ÑÐ½Ð°":"UA","Ð£Ð³Ð°Ð½Ð´Ð°":"UG","ÐÐ»ÑÑÐ°Ð½ÑÑ Ð¨ÑÐ°ÑÑ":"US","Ð£ÑÑÐ³Ð²Ð°Ð¹":"UY","Ð£Ð·Ð±ÐµÐºÑÑÑÐ°Ð½":"UZ","ÐÐ°ÑÑÐºÐ°Ð½":"VA","Ð¡ÑÐ½Ñ-ÐÑÐ½ÑÑÐ½Ñ Ñ ÐÑÑÐ½Ð°Ð´ÑÐ½Ñ":"VC","ÐÐµÐ½ÐµÑÑÑÐ»Ð°":"VE","ÐÑÑÐ³ÑÐ½ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ":"VG","ÐÑÑÐ³ÑÐ½ÑÐºÑÑ Ð°ÑÑÑÐ°Ð²Ñ, ÐÐ¨Ð":"VI","Ð'ÐµÑÐ½Ð°Ð¼":"VN","ÐÐ°Ð½ÑÐ°ÑÑ":"VU","Ð£Ð¾Ð»ÑÑ Ñ Ð¤ÑÑÑÐ½Ð°":"WF","Ð¡Ð°Ð¼Ð¾Ð° (ÐÐ°ÑÐ¾Ð´Ð½ÑÐµ)":"WS","ÐÐ¼ÐµÐ½":"YE","ÐÐ°ÑÐ´Ð½ÑÐ²Ð°-ÐÑÑÑÐºÐ°Ð½ÑÐºÐ°Ñ Ð ÑÑÐ¿ÑÐ±Ð»ÑÐºÐ°":"ZA","ÐÐ°Ð¼Ð±ÑÑ":"ZM","ÐÑÐ¼Ð±Ð°Ð±Ð²Ñ":"ZW","ÐÐµÐ²ÑÐ´Ð¾Ð¼Ñ ÑÑÐ³ÑÑÐ½":"ZZ"};
ilib.data.ctrynames_bg = {"ÐÐ·Ð¸Ñ":"142","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÐ·Ð¸Ñ":"143","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÐ·Ð¸Ñ":"145","ÐÐ²ÑÐ¾Ð¿Ð°":"150","ÐÐ·ÑÐ¾ÑÐ½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"151","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"154","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"155","ÐÐ°ÑÐ¸Ð½ÑÐºÐ° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"419","ÐÐµÐ¼ÑÑÐ°":"001","ÐÑÑÐ¸ÐºÐ°":"002","Ð¡ÐµÐ²ÐµÑÐ½Ð¾Ð°Ð¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¸ ÐºÐ¾Ð½ÑÐ¸Ð½ÐµÐ½Ñ":"003","Ð®Ð¶Ð½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"005","ÐÐºÐµÐ°Ð½Ð¸Ñ":"009","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÑÐ¸ÑÐºÐ°":"011","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"013","ÐÐ·ÑÐ¾ÑÐ½Ð° ÐÑÑÐ¸ÐºÐ°":"014","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÑÑÐ¸ÐºÐ°":"015","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"017","Ð®Ð¶Ð½Ð¾Ð°ÑÑÐ¸ÐºÐ°Ð½ÑÐºÐ¸ ÑÐµÐ³Ð¸Ð¾Ð½":"018","ÐÐ¼ÐµÑÐ¸ÐºÐ°":"019","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"021","ÐÐ°ÑÐ¸Ð±ÑÐºÐ¸ Ð¾-Ð²Ð¸":"029","ÐÐ·ÑÐ¾ÑÐ½Ð° ÐÐ·Ð¸Ñ":"030","Ð®Ð¶Ð½Ð° ÐÐ·Ð¸Ñ":"034","Ð®Ð³Ð¾Ð¸Ð·ÑÐ¾ÑÐ½Ð° ÐÐ·Ð¸Ñ":"035","Ð®Ð¶Ð½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"039","ÐÐ²ÑÑÑÐ°Ð»Ð¸Ñ Ð¸ ÐÐ¾Ð²Ð° ÐÐµÐ»Ð°Ð½Ð´Ð¸Ñ":"053","ÐÐµÐ»Ð°Ð½ÐµÐ·Ð¸Ñ":"054","ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸Ñ":"057","ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸Ñ":"061","ÐÑÑÑÐ¾Ð² ÐÑÐ·Ð½ÐµÑÐµÐ½Ð¸Ðµ":"AC","ÐÐ½Ð´Ð¾ÑÐ°":"AD","ÐÐ±ÐµÐ´Ð¸Ð½ÐµÐ½Ð¸ Ð°ÑÐ°Ð±ÑÐºÐ¸ ÐµÐ¼Ð¸ÑÑÑÐ²Ð°":"AE","ÐÑÐ³Ð°Ð½Ð¸ÑÑÐ°Ð½":"AF","ÐÐ½ÑÐ¸Ð³ÑÐ° Ð¸ ÐÐ°ÑÐ±ÑÐ´Ð°":"AG","ÐÐ½Ð³ÑÐ¸Ð»Ð°":"AI","ÐÐ»Ð±Ð°Ð½Ð¸Ñ":"AL","ÐÑÐ¼ÐµÐ½Ð¸Ñ":"AM","Ð¥Ð¾Ð»Ð°Ð½Ð´ÑÐºÐ¸ ÐÐ½ÑÐ¸Ð»Ð¸":"AN","ÐÐ½Ð³Ð¾Ð»Ð°":"AO","ÐÐ½ÑÐ°ÑÐºÑÐ¸ÐºÐ°":"AQ","ÐÑÐ¶ÐµÐ½ÑÐ¸Ð½Ð°":"AR","ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¾ Ð¡Ð°Ð¼Ð¾Ð°":"AS","ÐÐ²ÑÑÑÐ¸Ñ":"AT","ÐÐ²ÑÑÑÐ°Ð»Ð¸Ñ":"AU","ÐÑÑÐ±Ð°":"AW","ÐÐ»Ð°Ð½Ð´ÑÐºÐ¸ Ð¾-Ð²Ð¸":"AX","ÐÐ·ÐµÑÐ±Ð°Ð¹Ð´Ð¶Ð°Ð½":"AZ","ÐÐ¾ÑÐ½Ð° Ð¸ Ð¥ÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°":"BA","ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ":"BB","ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ":"BD","ÐÐµÐ»Ð³Ð¸Ñ":"BE","ÐÑÑÐºÐ¸Ð½Ð° Ð¤Ð°ÑÐ¾":"BF","ÐÑÐ»Ð³Ð°ÑÐ¸Ñ":"BG","ÐÐ°ÑÑÐµÐ¹Ð½":"BH","ÐÑÑÑÐ½Ð´Ð¸":"BI","ÐÐµÐ½Ð¸Ð½":"BJ","Ð¡ÐµÐ¹Ð½Ñ ÐÐ°ÑÑÐ¾Ð»Ð¾Ð¼ÐµÐ¹":"BL","ÐÐµÑÐ¼ÑÐ´Ð°":"BM","ÐÑÑÐ½ÐµÐ¹ ÐÐ°ÑÑÑÐ°Ð»Ð°Ð¼":"BN","ÐÐ¾Ð»Ð¸Ð²Ð¸Ñ":"BO","ÐÐ°ÑÐ¸Ð±ÑÐºÐ° ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´Ð¸Ñ":"BQ","ÐÑÐ°Ð·Ð¸Ð»Ð¸Ñ":"BR","ÐÐ°ÑÐ°Ð¼Ð¸":"BS","ÐÑÑÐ°Ð½":"BT","ÐÑÑÑÐ¾Ð² ÐÑÐ²Ðµ":"BV","ÐÐ¾ÑÑÑÐ°Ð½Ð°":"BW","ÐÐµÐ»Ð°ÑÑÑ":"BY","ÐÐµÐ»Ð¸Ð·":"BZ","ÐÐ°Ð½Ð°Ð´Ð°":"CA","ÐÐ¾ÐºÐ¾ÑÐ¾Ð²Ð¸ [ÐÐ¸Ð¹Ð»Ð¸Ð½Ð³] Ð¾ÑÑÑÐ¾Ð²Ð¸":"CC","ÐÐµÐ¼Ð¾ÐºÑÐ°ÑÐ¸ÑÐ½Ð° ÑÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ° ÐÐ¾Ð½Ð³Ð¾":"CD","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð¾Ð°ÑÑÐ¸ÐºÐ°Ð½ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"CF","ÐÐ¾Ð½Ð³Ð¾":"CG","Ð¨Ð²ÐµÐ¹ÑÐ°ÑÐ¸Ñ":"CH","ÐÑÑÐ³ Ð½Ð° ÑÐ»Ð¾Ð½Ð¾Ð²Ð°ÑÐ° ÐºÐ¾ÑÑ":"CI","ÐÑÑÑÐ¾Ð²Ð¸ ÐÑÐº":"CK","Ð§Ð¸Ð»Ð¸":"CL","ÐÐ°Ð¼ÐµÑÑÐ½":"CM","ÐÐ¸ÑÐ°Ð¹":"CN","ÐÐ¾Ð»ÑÐ¼Ð±Ð¸Ñ":"CO","ÐÑÑÑÐ¾Ð² ÐÐ»Ð¸Ð¿ÐµÑÑÐ¾Ð½":"CP","ÐÐ¾ÑÑÐ° Ð Ð¸ÐºÐ°":"CR","ÐÑÐ±Ð°":"CU","ÐÐ°Ð±Ð¾ ÐÐµÑÐ´Ðµ":"CV","ÐÑÑÐ°ÑÐ°Ð¾":"CW","ÐÑÑÑÐ¾Ð² ÐÑÐ¸ÑÑÐ¼Ð°Ñ":"CX","ÐÐ¸Ð¿ÑÑ":"CY","Ð§ÐµÑÐºÐ° ÑÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"CZ","ÐÐµÑÐ¼Ð°Ð½Ð¸Ñ":"DE","ÐÐ¸ÐµÐ³Ð¾ ÐÐ°ÑÑÐ¸Ñ":"DG","ÐÐ¶Ð¸Ð±ÑÑÐ¸":"DJ","ÐÐ°Ð½Ð¸Ñ":"DK","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°":"DM","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ÑÐºÐ° ÑÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"DO","ÐÐ»Ð¶Ð¸Ñ":"DZ","Ð¡ÐµÑÑÐ° Ð¸ ÐÐµÐ»Ð¸Ñ":"EA","ÐÐºÐ²Ð°Ð´Ð¾Ñ":"EC","ÐÑÑÐ¾Ð½Ð¸Ñ":"EE","ÐÐ³Ð¸Ð¿ÐµÑ":"EG","ÐÐ°Ð¿Ð°Ð´Ð½Ð° Ð¡Ð°ÑÐ°ÑÐ°":"EH","ÐÑÐ¸ÑÑÐµÑ":"ER","ÐÑÐ¿Ð°Ð½Ð¸Ñ":"ES","ÐÑÐ¸Ð¾Ð¿Ð¸Ñ":"ET","ÐÐ²ÑÐ¾Ð¿ÐµÐ¹ÑÐºÐ¸ ÑÑÑÐ·":"EU","Ð¤Ð¸Ð½Ð»Ð°Ð½Ð´Ð¸Ñ":"FI","Ð¤Ð¸Ð´Ð¶Ð¸":"FJ","Ð¤Ð¾Ð»ÐºÐ»ÐµÐ½Ð´ÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"FK","ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸Ñ, ÐÐ±ÐµÐ´Ð¸Ð½ÐµÐ½Ð¸ Ð©Ð°ÑÐ¸":"FM","Ð¤Ð°ÑÑÐ¾ÑÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"FO","Ð¤ÑÐ°Ð½ÑÐ¸Ñ":"FR","ÐÐ°Ð±Ð¾Ð½":"GA","ÐÐ±ÐµÐ´Ð¸Ð½ÐµÐ½Ð¾ ÐºÑÐ°Ð»ÑÑÐ²Ð¾":"GB","ÐÑÐµÐ½Ð°Ð´Ð°":"GD","ÐÑÑÐ·Ð¸Ñ":"GE","Ð¤ÑÐµÐ½ÑÐºÐ° ÐÐ²Ð¸Ð°Ð½Ð°":"GF","Ð¾. ÐÑÑÐ½Ð·Ð¸":"GG","ÐÐ°Ð½Ð°":"GH","ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ":"GI","ÐÑÐµÐ½Ð»Ð°Ð½Ð´Ð¸Ñ":"GL","ÐÐ°Ð¼Ð±Ð¸Ñ":"GM","ÐÐ²Ð¸Ð½ÐµÑ":"GN","ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿Ð°":"GP","ÐÐºÐ²Ð°ÑÐ¾ÑÐ¸Ð°Ð»Ð½Ð° ÐÐ²Ð¸Ð½ÐµÑ":"GQ","ÐÑÑÑÐ¸Ñ":"GR","Ð®Ð¶Ð½Ð° ÐÐ¶Ð¾ÑÐ´Ð¶Ð¸Ñ Ð¸ Ð®Ð¶Ð½Ð¸ Ð¡Ð°Ð½Ð´Ð²Ð¸ÑÐµÐ²Ð¸ ÐÑÑÑÐ¾Ð²Ð¸":"GS","ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°":"GT","ÐÑÐ°Ð¼":"GU","ÐÐ²Ð¸Ð½ÐµÑ-ÐÐ¸ÑÐ°Ñ":"GW","ÐÐ²Ð¸Ð°Ð½Ð°":"GY","Ð¥Ð¾Ð½Ð³-ÐÐ¾Ð½Ð³ Ð.Ð.Ð . Ð½Ð° ÐÐ¸ÑÐ°Ð¹":"HK","ÐÑÑÑÐ¾Ð² Ð¥ÑÑÐ´ Ð¸ ÐÑÑÑÐ¾Ð²Ð¸ ÐÐ°ÐºÐ´Ð¾Ð½Ð°Ð»Ð´":"HM","Ð¥Ð¾Ð½Ð´ÑÑÐ°Ñ":"HN","Ð¥ÑÑÐ²Ð°ÑÑÐºÐ°":"HR","Ð¥Ð°Ð¸ÑÐ¸":"HT","Ð£Ð½Ð³Ð°ÑÐ¸Ñ":"HU","ÐÐ°Ð½Ð°ÑÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"IC","ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸Ñ":"ID","ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ":"IE","ÐÐ·ÑÐ°ÐµÐ»":"IL","ÐÑÑÑÐ¾Ð²Ð¸ ÐÐ°Ð½":"IM","ÐÐ½Ð´Ð¸Ñ":"IN","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ¸ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸Ð¸ Ð² ÐÐ½Ð´Ð¸Ð¹ÑÐºÐ¸Ñ Ð¾ÐºÐµÐ°Ð½":"IO","ÐÑÐ°Ðº":"IQ","ÐÑÐ°Ð½, ÐÑÐ»ÑÐ¼ÑÐºÐ° ÑÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"IR","ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ":"IS","ÐÑÐ°Ð»Ð¸Ñ":"IT","Ð¾. ÐÐ¶ÑÑÐ·Ð¸":"JE","Ð¯Ð¼Ð°Ð¹ÐºÐ°":"JM","ÐÐ¾ÑÐ´Ð°Ð½Ð¸Ñ":"JO","Ð¯Ð¿Ð¾Ð½Ð¸Ñ":"JP","ÐÐµÐ½Ð¸Ñ":"KE","ÐÐ¸ÑÐ³Ð¸Ð·ÑÑÐ°Ð½":"KG","ÐÐ°Ð¼Ð±Ð¾Ð´Ð¶Ð°":"KH","ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸":"KI","ÐÐ¾Ð¼Ð¾ÑÐ¸":"KM","Ð¡ÐµÐ¹Ð½Ñ ÐÐ¸ÑÑ Ð¸ ÐÐµÐ²Ð¸Ñ":"KN","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ¾ÑÐµÑ":"KP","ÐÐ¾ÑÐµÑ, Ð®Ð¶Ð½Ð°":"KR","ÐÑÐ²ÐµÐ¹Ñ":"KW","ÐÐ°Ð¹Ð¼Ð°Ð½Ð¾Ð²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"KY","ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½":"KZ","ÐÐ°ÑÐ¾Ð´Ð½Ð° Ð´ÐµÐ¼Ð¾ÐºÑÐ°ÑÐ¸ÑÐ½Ð° ÑÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ° ÐÐ°Ð¾Ñ":"LA","ÐÐ¸Ð²Ð°Ð½":"LB","Ð¡ÐµÐ¹Ð½Ñ ÐÑÑÐ¸Ñ":"LC","ÐÐ¸ÑÑÐµÐ½ÑÐ°Ð¹Ð½":"LI","Ð¨ÑÐ¸ ÐÐ°Ð½ÐºÐ°":"LK","ÐÐ¸Ð±ÐµÑÐ¸Ñ":"LR","ÐÐµÑÐ¾ÑÐ¾":"LS","ÐÐ¸ÑÐ²Ð°":"LT","ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³":"LU","ÐÐ°ÑÐ²Ð¸Ñ":"LV","ÐÐ¸Ð±Ð¸Ð¹ÑÐºÐ° Ð°ÑÐ°Ð±ÑÐºÐ° Ð´Ð¶Ð°Ð¼Ð°ÑÐ¸ÑÐ¸Ñ":"LY","ÐÐ°ÑÐ¾ÐºÐ¾":"MA","ÐÐ¾Ð½Ð°ÐºÐ¾":"MC","ÐÐ¾Ð»Ð´Ð¾Ð²Ð°, Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"MD","Ð§ÐµÑÐ½Ð° Ð³Ð¾ÑÐ°":"ME","Ð¡ÐµÐ¹Ð½Ñ ÐÐ°ÑÑÐ¸Ð½":"MF","ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ":"MG","ÐÐ°ÑÑÐ°Ð»Ð¾Ð²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"MH","ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸Ñ":"MK","ÐÐ°Ð»Ð¸":"ML","ÐÐ¸Ð°Ð½Ð¼Ð°Ñ [ÐÐ¸ÑÐ¼Ð°]":"MM","ÐÐ¾Ð½Ð³Ð¾Ð»Ð¸Ñ":"MN","ÐÐ°ÐºÐ°Ð¾ Ð.Ð.Ð . Ð½Ð° ÐÐ¸ÑÐ°Ð¹":"MO","Ð¡ÐµÐ²ÐµÑÐ½Ð¸ ÐÐ°ÑÐ¸Ð°Ð½ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸":"MP","ÐÐ°ÑÑÐ¸Ð½Ð¸ÐºÐ°":"MQ","ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½Ð¸Ñ":"MR","ÐÐ¾Ð½ÑÐµÑÐ°Ñ":"MS","ÐÐ°Ð»ÑÐ°":"MT","ÐÐ°Ð²ÑÐ¸ÑÐ¸Ð¹":"MU","ÐÐ°Ð»Ð´Ð¸Ð²Ð¸":"MV","ÐÐ°Ð»Ð°Ð²Ð¸":"MW","ÐÐµÐºÑÐ¸ÐºÐ¾":"MX","ÐÐ°Ð»Ð°Ð¹Ð·Ð¸Ñ":"MY","ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº":"MZ","ÐÐ°Ð¼Ð¸Ð±Ð¸Ñ":"NA","ÐÐ¾Ð²Ð° ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸Ñ":"NC","ÐÐ¸Ð³ÐµÑ":"NE","ÐÑÑÑÐ¾Ð² ÐÐ¾ÑÑÐ¾Ð»Ðº":"NF","ÐÐ¸Ð³ÐµÑÐ¸Ñ":"NG","ÐÐ¸ÐºÐ°ÑÐ°Ð³ÑÐ°":"NI","Ð¥Ð¾Ð»Ð°Ð½Ð´Ð¸Ñ":"NL","ÐÐ¾ÑÐ²ÐµÐ³Ð¸Ñ":"NO","ÐÐµÐ¿Ð°Ð»":"NP","ÐÐ°ÑÑÑ":"NR","ÐÐ¸ÑÐµ":"NU","ÐÐ¾Ð²Ð° ÐÐµÐ»Ð°Ð½Ð´Ð¸Ñ":"NZ","ÐÐ¼Ð°Ð½":"OM","ÐÐ°Ð½Ð°Ð¼Ð°":"PA","ÐÐµÑÑ":"PE","Ð¤ÑÐµÐ½ÑÐºÐ° ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸Ñ":"PF","ÐÐ°Ð¿ÑÐ° ÐÐ¾Ð²Ð° ÐÐ²Ð¸Ð½ÐµÑ":"PG","Ð¤Ð¸Ð»Ð¸Ð¿Ð¸Ð½Ð¸":"PH","ÐÐ°ÐºÐ¸ÑÑÐ°Ð½":"PK","ÐÐ¾Ð»ÑÐ°":"PL","Ð¡ÐµÐ½ ÐÐ¸ÐµÑ Ð¸ ÐÐ¸Ð³ÐµÐ»Ð¾Ð½":"PM","ÐÐ¸ÑÐºÐ°Ð¹ÑÐ½":"PN","ÐÑÐµÑÑÐ¾ Ð Ð¸ÐºÐ¾":"PR","ÐÐ°Ð»ÐµÑÑÐ¸Ð½ÑÐºÐ¸ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸Ð¸":"PS","ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸Ñ":"PT","ÐÐ°Ð»Ð°Ñ":"PW","ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹":"PY","ÐÐ°ÑÐ°Ñ":"QA","ÐÐºÐµÐ°Ð½Ð¸Ñ [QO]":"QO","Ð ÐµÑÐ½Ð¸ÑÐ½":"RE","Ð ÑÐ¼ÑÐ½Ð¸Ñ":"RO","Ð¡ÑÑÐ±Ð¸Ñ":"RS","Ð ÑÑÐºÐ° ÑÐµÐ´ÐµÑÐ°ÑÐ¸Ñ":"RU","Ð ÑÐ°Ð½Ð´Ð°":"RW","Ð¡Ð°ÑÐ´Ð¸ÑÑÐºÐ° ÐÑÐ°Ð±Ð¸Ñ":"SA","Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½Ð¾Ð²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"SB","Ð¡ÐµÐ¹ÑÐµÐ»Ð¸":"SC","Ð¡ÑÐ´Ð°Ð½":"SD","Ð¨Ð²ÐµÑÐ¸Ñ":"SE","Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ":"SG","Ð¡Ð²ÐµÑÐ° ÐÐ»ÐµÐ½Ð°":"SH","Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸Ñ":"SI","Ð¡Ð²Ð°Ð»Ð±Ð°ÑÐ´ Ð¸ Ð¯Ð½ ÐÐ°Ð¹ÐµÐ½":"SJ","Ð¡Ð»Ð¾Ð²Ð°ÐºÐ¸Ñ":"SK","Ð¡Ð¸ÐµÑÐ° ÐÐµÐ¾Ð½Ðµ":"SL","Ð¡Ð°Ð½ ÐÐ°ÑÐ¸Ð½Ð¾":"SM","Ð¡ÐµÐ½ÐµÐ³Ð°Ð»":"SN","Ð¡Ð¾Ð¼Ð°Ð»Ð¸Ñ":"SO","Ð¡ÑÑÐ¸Ð½Ð°Ð¼":"SR","Ð®Ð¶ÐµÐ½ Ð¡ÑÐ´Ð°Ð½":"SS","Ð¡Ð°Ð¾ Ð¢Ð¾Ð¼Ðµ Ð¸ ÐÑÐ¸Ð½ÑÐ¸Ð¿Ðµ":"ST","ÐÐ» Ð¡Ð°Ð»Ð²Ð°Ð´Ð¾Ñ":"SV","Ð¡Ð¸Ð½Ñ ÐÐ°ÑÑÐµÐ½":"SX","Ð¡Ð¸ÑÐ¸Ð¹ÑÐºÐ° Ð°ÑÐ°Ð±ÑÐºÐ° ÑÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"SY","Ð¡ÑÐ°Ð·Ð¸Ð»ÐµÐ½Ð´":"SZ","Ð¢ÑÐ¸ÑÑÐ°Ð½ Ð´Ð° ÐÑÐ½Ñ":"TA","ÐÑÑÑÐ¾Ð²Ð¸ Ð¢ÑÑÐºÑ Ð¸ ÐÐ°Ð¹ÐºÐ¾Ñ":"TC","Ð§Ð°Ð´":"TD","Ð¤ÑÐµÐ½ÑÐºÐ¸ ÑÐ¶Ð½Ð¸ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸Ð¸":"TF","Ð¢Ð¾Ð³Ð¾":"TG","Ð¢Ð°Ð¹Ð»Ð°Ð½Ð´":"TH","Ð¢Ð°Ð´Ð¶Ð¸ÐºÐ¸ÑÑÐ°Ð½":"TJ","Ð¢Ð¾ÐºÐµÐ»Ð°Ñ":"TK","ÐÐ·ÑÐ¾ÑÐµÐ½ Ð¢Ð¸Ð¼Ð¾Ñ":"TL","Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸ÑÑÐ°Ð½":"TM","Ð¢ÑÐ½Ð¸Ñ":"TN","Ð¢Ð¾Ð½Ð³Ð°":"TO","Ð¢ÑÑÑÐ¸Ñ":"TR","Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¸ Ð¢Ð¾Ð±Ð°Ð³Ð¾":"TT","Ð¢ÑÐ²Ð°Ð»Ñ":"TV","Ð¢Ð°Ð¹Ð²Ð°Ð½":"TW","Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸Ñ":"TZ","Ð£ÐºÑÐ°Ð¹Ð½Ð°":"UA","Ð£Ð³Ð°Ð½Ð´Ð°":"UG","Ð¡ÐÐ© - Ð²ÑÐ½ÑÐ½Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"UM","Ð¡ÐÐ©":"US","Ð£ÑÑÐ³Ð²Ð°Ð¹":"UY","Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½":"UZ","Ð¡Ð²ÐµÑÐµÐ½Ð¾ Ð¼Ð¾ÑÐµ [ÐÐ°ÑÐ¸ÐºÐ°Ð½ÑÐºÐ° Ð´ÑÑÐ¶Ð°Ð²Ð°]":"VA","Ð¡ÐµÐ¹Ð½Ñ ÐÐ¸Ð½ÑÑÐ½Ñ Ð¸ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ð¸":"VC","ÐÐµÐ½ÐµÑÑÐµÐ»Ð°":"VE","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ¸ ÐÐ¸ÑÐ´Ð¶Ð¸Ð½ÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð½Ð¸":"VG","Ð¡ÐÐ©, ÐÐ¸ÑÐ´Ð¶Ð¸Ð½ÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"VI","ÐÐ¸ÐµÑÐ½Ð°Ð¼":"VN","ÐÐ°Ð½ÑÐ°ÑÑ":"VU","Ð£Ð¾Ð»Ð¸Ñ Ð¸ Ð¤ÑÑÑÐ½Ð°":"WF","Ð¡Ð°Ð¼Ð¾Ð°":"WS","ÐÐµÐ¼ÐµÐ½":"YE","ÐÐµÐ¹Ð¾Ñ":"YT","Ð®Ð¶Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"ZA","ÐÐ°Ð¼Ð±Ð¸Ñ":"ZM","ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ":"ZW","ÐÐµÐ¿Ð¾Ð·Ð½Ð°ÑÐ° Ð¸Ð»Ð¸ Ð½ÐµÑÑÑÐµÑÑÐ²ÑÐ²Ð°ÑÐ° Ð¾Ð±Ð»Ð°ÑÑ":"ZZ"};
ilib.data.ctrynames_bm = {"AndÉr":"AD","Arabu mara kafoli":"AE","AfiganistaÅ":"AF","Antiga-ni-Barbuda":"AG","Angiya":"AI","Alibani":"AL","Arimeni":"AM","Peyiba ka Antiyi":"AN","Angola":"AO","Arizantin":"AR","Samowa amerikani":"AS","Otirisi":"AT","Ositirali":"AU","Aruba":"AW","AzÉrbayjaÅ":"AZ","Bozni-Ærizigovini":"BA","Barbadi":"BB","BÉngiladÉsi":"BD","BÉliziki":"BE","Burukina Faso":"BF","Buligari":"BG","Bareyini":"BH","Burundi":"BI","BenÉn":"BJ","Bermudi":"BM","BurinÉyi":"BN","Bolivi":"BO","Berezili":"BR","Bahamasi":"BS","ButaÅ":"BT","BÉtisiwana":"BW","Belarusi":"BY","Belizi":"BZ","Kanada":"CA","Kongo ka republiki demÉkratiki":"CD","Santarafiriki":"CF","Kongo":"CG","Suwisi":"CH","Kodiwari":"CI","Kuki Gun":"CK","Sili":"CL","Kameruni":"CM","Siniwajamana":"CN","Kolombi":"CO","KÉsitarika":"CR","Kuba":"CU","CapivÉrdi":"CV","Cipri":"CY","Ceki republiki":"CZ","AlimaÉ²i":"DE","Jibuti":"DJ","Danemarki":"DK","DÉminiki":"DM","DÉmimiki republiki":"DO","Alizeri":"DZ","EkwatÉr":"EC","Esetoni":"EE","Eziputi":"EG","Eritere":"ER","EsipaÉ²i":"ES","Etiopi":"ET","Finilandi":"FI","Fiji":"FJ","Maluwini Gun":"FK","Mikironesi":"FM","Faransi":"FR","GabÉÅ":"GA","AngilÉtÉri":"GB","Granadi":"GD","ZeyÉrzi":"GE","Faransi ka gwiyani":"GF","Gana":"GH","Zibralitari":"GI","GÉrÉhenelandi":"GL","Ganbi":"GM","Gine":"GN","Gwadelup":"GP","Gine ekwatÉri":"GQ","GÉrÉsi":"GR","Gwatemala":"GT","Gwam":"GU","Gine Bisawo":"GW","Gwiyana":"GY","HÉndirasi":"HN","Kroasi":"HR","Ayiti":"HT","HÉngri":"HU","Ændonezi":"ID","Irilandi":"IE","Isirayeli":"IL","Ændujamana":"IN","AngilÉ ka Éndu dugukolo":"IO","Iraki":"IQ","IraÅ":"IR","Isilandi":"IS","Itali":"IT","Zamayiki":"JM","ZÉrdani":"JO","ZapÉn":"JP","Keniya":"KE","KirigizisitaÅ":"KG","Kamboji":"KH","Kiribati":"KI","KomÉri":"KM","KristÉfo-Senu-ni-ÆevÉs":"KN","KÉÉ²Éka Kore":"KP","Worodugu Kore":"KR","KowÉti":"KW","Bama Gun":"KY","KazakistaÅ":"KZ","Layosi":"LA","LibaÅ":"LB","Lusi-Senu":"LC","LisÉnsitayini":"LI","Sirilanka":"LK","Liberiya":"LR","Lesoto":"LS","Lituyani":"LT","Likisanburu":"LU","Letoni":"LV","Libi":"LY","MarÉku":"MA","Monako":"MC","Molidavi":"MD","Madagasikari":"MG","Marisali Gun":"MH","MacedÉni":"MK","Mali":"ML","Myanimari":"MM","MoÅoli":"MN","KÉÉ²Éka Mariyani Gun":"MP","Maritiniki":"MQ","MÉritani":"MR","MoÅsera":"MS","Malti":"MT","Morisi":"MU","Maldivi":"MV","Malawi":"MW","Meksiki":"MX","MalÉzi":"MY","Mozanbiki":"MZ","Namibi":"NA","Kaledoni Koura":"NC","NizÉri":"NE","NÉrofoliki Gun":"NF","Nizeriya":"NG","Nikaragwa":"NI","Peyiba":"NL","NÉriwÉzi":"NO","Nepali":"NP","Nawuru":"NR","Nyuwe":"NU","Zelandi Koura":"NZ","OmaÅ":"OM","Panama":"PA","Peru":"PE","Faransi ka polinezi":"PF","Papuwasi-Gine-Koura":"PG","Filipini":"PH","PakisitaÅ":"PK","PoloÉ²i":"PL","PiyÉri-Senu-ni-MikelÉÅ":"PM","Pitikarini":"PN","PÉrotoriko":"PR","Palesitini":"PS","PÉritigali":"PT","Palawu":"PW","Paraguwayi":"PY","Katari":"QA","ReyuÉ²ÉÅ":"RE","Rumani":"RO","Irisi":"RU","Ruwanda":"RW","Arabiya Sawudiya":"SA","Salomo Gun":"SB","SesÉli":"SC","SudaÅ":"SD","SuwÉdi":"SE","SÉngapuri":"SG","ÆlÉni Senu":"SH","Sloveni":"SI","Slowaki":"SK","Siyera LewÉni":"SL","Marini-Senu":"SM","Senegali":"SN","Somali":"SO","Surinami":"SR","Sawo Tome-ni-Prinicipe":"ST","SalivadÉr":"SV","Siri":"SY","Swazilandi":"SZ","Turiki Gun ni Kayiki":"TC","Cadi":"TD","Togo":"TG","Tayilandi":"TH","Tajikisitani":"TJ","Tokelo":"TK","KÉrÉn TimÉr":"TL","Turikimenisitani":"TM","Tunizi":"TN","Tonga":"TO","Turiki":"TR","Trinite-ni-Tobago":"TT","Tuvalu":"TV","Tayiwani":"TW","Tanzani":"TZ","UkÉrÉni":"UA","Uganda":"UG","Ameriki":"US","Urugwayi":"UY","Uzebekisitani":"UZ","VatikaÅ":"VA","VinisÉn-Senu-ni-Grenadini":"VC","Venezuwela":"VE","AngilÉ ka Sungurunnin Gun":"VG","Ameriki ka Sungurunnin Gun":"VI","WiyÉtinamu":"VN","Vanuwatu":"VU","Walisi-ni-Futuna":"WF","Samowa":"WS","YemÉni":"YE","Mayoti":"YT","Worodugu Afriki":"ZA","Zanbi":"ZM","Zimbabuwe":"ZW"};
ilib.data.ctrynames_bn = {"à¦à¦¶à¦¿à¦¯à¦¼à¦¾":"142","à¦®à¦§à§à¦¯ à¦à¦¶à¦¿à¦¯à¦¼à¦¾":"143","à¦ªà¦¶à§à¦à¦¿à¦®à¦¾à¦à§à¦à¦²à§à¦¯à¦¼ à¦à¦¶à¦¿à¦¯à¦¼à¦¾":"145","à¦à¦à¦°à§à¦ª":"150","à¦ªà§à¦°à§à¦¬ à¦à¦à¦°à§à¦ª":"151","à¦à¦¤à§à¦¤à¦°à¦¾à¦à§à¦à¦²à§à¦¯à¦¼ à¦à¦à¦°à§à¦ª":"154","à¦ªà¦¶à§à¦à¦¿à¦®à¦¾à¦à§à¦à¦²à§à¦¯à¦¼ à¦à¦à¦°à§à¦ª":"155","à¦²à§à¦¯à¦¾à¦à¦¿à¦¨ à¦à¦®à§à¦°à¦¿à¦à¦¾ à¦à¦¬à¦ à¦à§à¦¯à¦¾à¦°à¦¾à¦¬à¦¿à¦¯à¦¼à¦¾à¦¨":"419","à¦ªà§à¦¥à¦¿à¦¬à§":"001","à¦à¦«à§à¦°à¦¿à¦à¦¾":"002","à¦à¦¤à§à¦¤à¦° à¦à¦®à§à¦°à¦¿à¦":"003","à¦¦à¦à§à¦·à¦¿à¦¨ à¦à¦®à§à¦°à¦¿à¦à¦¾":"005","à¦à¦¸à¦¾à¦¨à¦¿à¦¯à¦¼à¦¾":"009","à¦ªà¦¶à§à¦à¦¿à¦®à¦¾à¦à§à¦à¦²à§à¦¯à¦¼ à¦à¦«à§à¦°à¦¿à¦à¦¾":"011","à¦®à¦§à§à¦¯ à¦à¦®à§à¦°à¦¿à¦à¦¾":"013","à¦ªà§à¦°à§à¦¬ à¦à¦«à§à¦°à¦¿à¦à¦¾":"014","à¦à¦¤à§à¦¤à¦° à¦à¦«à§à¦°à¦¿à¦à¦¾":"015","à¦®à¦§à§à¦¯ à¦à¦«à§à¦°à¦¿à¦à¦¾":"017","à¦¦à¦à§à¦·à¦¿à¦£à¦¾à¦à§à¦à¦²à§à¦¯à¦¼ à¦à¦«à§à¦°à¦¿à¦à¦¾":"018","à¦à¦®à§à¦°à¦¿à¦à¦¾à¦¸":"019","à¦à¦¤à§à¦¤à¦°à¦¾à¦à§à¦à¦²à§à¦¯à¦¼ à¦à¦®à§à¦°à¦¿à¦à¦¾":"021","à¦à§à¦¯à¦¾à¦°à¦¾à¦¬à¦¿à¦¯à¦¼à¦¾à¦¨":"029","à¦ªà§à¦°à§à¦¬ à¦à¦¶à¦¿à¦¯à¦¼à¦¾":"030","à¦¦à¦à§à¦·à¦¿à¦£à¦¾à¦à§à¦à¦²à§à¦¯à¦¼ à¦à¦¶à¦¿à¦¯à¦¼à¦¾":"034","à¦¦à¦à§à¦·à¦¿à¦¨ à¦ªà§à¦°à§à¦¬ à¦à¦¶à¦¿à¦¯à¦¼à¦¾":"035","à¦¦à¦à§à¦·à¦¿à¦£à¦¾à¦à§à¦à¦²à§à¦¯à¦¼ à¦à¦à¦°à§à¦ª":"039","à¦à¦¸à§à¦à§à¦°à§à¦²à¦¿à¦¯à¦¼à¦¾ à¦à¦¬à¦ à¦¨à¦¿à¦à¦à¦¿à¦²à§à¦¯à¦¾à¦¨à§à¦¡":"053","à¦®à§à¦¯à¦¾à¦²à§à¦¨à§à¦¶à¦¿à¦¯à¦¼à¦¾":"054","à¦®à§à¦¯à¦¾à¦²à§à¦¨à¦¿à¦¶à¦¾ à¦à¦à§à¦à¦²":"057","à¦ªà¦²à¦¿à¦¨à§à¦¶à¦¿à¦¯à¦¼à¦¾":"061","à¦à§à¦¯à¦¾à¦¸à¦¸à§à¦¨à¦¶à¦¨ à¦à¦à¦²à§à¦¯à¦¾à¦¨à§à¦¡":"AC","à¦à§à¦¯à¦¾à¦¨à§à¦¡à§à¦°à¦¾":"AD","à¦¸à¦à¦¯à§à¦à§à¦¤ à¦à¦°à¦¬ à¦à¦®à¦¿à¦°à¦¾à¦¤":"AE","à¦à¦«à¦à¦¾à¦¨à¦¿à¦¸à§à¦¤à¦¾à¦¨":"AF","à¦à¦¨à§à¦à¦¿à¦à§à¦¯à¦¼à¦¾ à¦ à¦¬à¦¾à¦°à¦¬à§à¦¡à¦¾":"AG","à¦à§à¦¯à¦¾à¦à§à¦à§à¦à¦²à¦¾":"AI","à¦à¦²à¦¬à§à¦¯à¦¾à¦¨à¦¿à¦¯à¦¼à¦¾":"AL","à¦à¦°à§à¦®à§à¦¨à¦¿à¦¯à¦¼à¦¾":"AM","à¦¨à§à¦¦à¦¾à¦°à¦²à§à¦¯à¦¾à¦¨à§à¦¡à¦¸ à¦à§à¦¯à¦¾à¦¨à§à¦à¦¿à¦²à¦¿à¦¸":"AN","à¦à§à¦¯à¦¾à¦à§à¦à§à¦²à¦¾":"AO","à¦à¦¨à§à¦à¦¾à¦°à§à¦à¦à¦¿à¦à¦¾":"AQ","à¦à¦°à§à¦à§à¦£à§à¦à¦¾à¦à¦¨à¦¾":"AR","à¦à¦®à§à¦°à¦¿à¦à¦¾à¦¨ à¦¸à¦¾à¦®à§à¦¯à¦¼à¦¾":"AS","à¦à¦¸à§à¦à§à¦°à¦¿à¦¯à¦¼à¦¾":"AT","à¦à¦¸à§à¦à§à¦°à§à¦²à¦¿à¦¯à¦¼à¦¾":"AU","à¦à¦°à§à¦¬à¦¾":"AW","à¦à¦²à¦¾à¦¨à§à¦¡ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"AX","à¦à¦à¦¾à¦°à¦¬à¦¾à¦à¦à¦¾à¦¨":"AZ","à¦¬à¦¸à¦¨à¦¿à¦¯à¦¼à¦¾ à¦ à¦¹à¦¾à¦°à§à¦à§à¦à§à¦­à¦¿à¦¨à¦¾":"BA","à¦¬à¦¾à¦°à¦¬à¦¾à¦¦à§à¦¸":"BB","à¦¬à¦¾à¦à¦²à¦¾à¦¦à§à¦¶":"BD","à¦¬à§à¦²à¦à¦¿à¦¯à¦¼à¦¾à¦®":"BE","à¦¬à§à¦°à¦à¦¿à¦¨à¦¾ à¦«à¦¾à¦¸à§":"BF","à¦¬à§à¦²à¦à§à¦°à¦¿à¦¯à¦¼à¦¾":"BG","à¦¬à¦¾à¦¹à¦°à¦¾à¦à¦¨":"BH","à¦¬à§à¦°à§à¦¨à§à¦¡à¦¿":"BI","à¦¬à§à¦¨à¦¿à¦¨":"BJ","à¦¸à§à¦¨à§à¦ à¦¬à¦¾à¦°à¦¥à§à¦²à¦¿à¦®à¦¿":"BL","à¦¬à¦¾à¦°à¦®à§à¦¡à¦¾":"BM","à¦¬à§à¦°à§à¦¨à§à¦":"BN","à¦¬à§à¦²à¦¿à¦­à¦¿à¦¯à¦¼à¦¾":"BO","à¦à§à¦¯à¦¾à¦°à¦¿à¦¬à¦¿à¦¯à¦¼à¦¾à¦¨ à¦¨à§à¦¦à¦¾à¦°à¦²à§à¦¯à¦¾à¦¨à§à¦¡à¦¸":"BQ","à¦¬à§à¦°à¦¾à¦à¦¿à¦²":"BR","à¦¬à¦¾à¦¹à¦¾à¦®à¦¾ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"BS","à¦­à§à¦à¦¾à¦¨":"BT","à¦¬à§à¦­à§à¦ à¦¦à§à¦¬à§à¦ª":"BV","à¦¬à¦¤à¦¸à§à¦¯à¦¼à¦¾à¦¨à¦¾":"BW","à¦¬à§à¦²à§à¦°à§à¦¶à¦¿à¦¯à¦¼à¦¾":"BY","à¦¬à§à¦²à¦¿à¦¯":"BZ","à¦à¦¾à¦¨à¦¾à¦¡à¦¾":"CA","à¦à§à¦à§à¦¸ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"CC","à¦à¦à§à¦à§ - à¦à¦¿à¦¨à¦¸à¦¾à¦¸à¦¾":"CD","à¦®à¦§à§à¦¯ à¦à¦«à§à¦°à¦¿à¦à¦¾à¦¨ à¦ªà§à¦°à¦à¦¾à¦¤à¦¨à§à¦¤à§à¦°":"CF","à¦à¦à§à¦à§":"CG","à¦¸à§à¦à¦à¦¾à¦°à¦²à§à¦¯à¦¾à¦¨à§à¦¡":"CH","à¦à¦à¦­à¦°à¦¿ à¦à§à¦¸à§à¦":"CI","à¦à§à¦ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"CK","à¦à¦¿à¦²à¦¿":"CL","à¦à§à¦¯à¦¾à¦®à§à¦°à§à¦¨":"CM","à¦à§à¦¨":"CN","à¦à§à¦²à§à¦®à§à¦¬à¦¿à¦¯à¦¼à¦¾":"CO","à¦à§à¦²à¦¿à¦ªà¦¾à¦°à¦à¦¨ à¦à¦à¦²à§à¦¯à¦¾à¦¨à§à¦¡":"CP","à¦à§à¦¸à§à¦à¦¾à¦°à¦¿à¦à¦¾":"CR","à¦à¦¿à¦à¦¬à¦¾":"CU","à¦à§à¦ªà¦­à¦¾à¦°à§à¦¦à§":"CV","à¦à§à¦°à¦¾à¦¸à¦¾à¦":"CW","à¦à§à¦°à¦¿à¦¸à¦®à¦¾à¦¸ à¦¦à§à¦¬à§à¦ª":"CX","à¦¸à¦¾à¦à¦ªà§à¦°à¦¾à¦¸":"CY","à¦à§à¦ à¦ªà§à¦°à¦à¦¾à¦¤à¦¨à§à¦¤à§à¦°":"CZ","à¦à¦¾à¦°à§à¦®à¦¾à¦¨à¦¿":"DE","à¦¦à¦¿à¦¯à¦¼à§à¦à§ à¦à¦¾à¦°à§à¦¸à¦¿à¦¯à¦¼à¦¾":"DG","à¦à¦¿à¦¬à§à¦¤à¦¿":"DJ","à¦¡à§à¦¨à¦®à¦¾à¦°à§à¦":"DK","à¦¡à§à¦®à¦¿à¦¨à¦¿à¦à¦¾":"DM","à¦¡à§à¦®à§à¦¨à¦¿à¦à¦¾à¦¨ à¦ªà§à¦°à¦à¦¾à¦¤à¦¨à§à¦¤à§à¦°":"DO","à¦à¦²à¦à¦¿à¦°à¦¿à¦¯à¦¼à¦¾":"DZ","à¦à§à¦à¦à¦¾ à¦à¦¬à¦ à¦®à§à¦²à¦¿à¦²à¦¾":"EA","à¦à¦à§à¦¯à¦¼à§à¦¡à¦°":"EC","à¦à¦¸à§à¦¤à§à¦¨à¦¿à¦¯à¦¼à¦¾":"EE","à¦®à¦¿à¦¶à¦°":"EG","à¦ªà¦¶à§à¦à¦¿à¦®à§ à¦¸à¦¾à¦¹à¦¾à¦°à¦¾":"EH","à¦à¦°à¦¿à¦¤à§à¦°à¦¿à¦¯à¦¼à¦¾":"ER","à¦¸à§à¦ªà§à¦¨":"ES","à¦à¦«à¦¿à¦à¦ªà¦¿à¦¯à¦¼à¦¾":"ET","à¦à¦à¦°à§à¦ªà§à¦¯à¦¼ à¦à¦à¦¨à¦¿à¦¯à¦¼à¦¨":"EU","à¦«à¦¿à¦¨à¦²à§à¦¯à¦¾à¦¨à§à¦¡":"FI","à¦«à¦¿à¦à¦¿":"FJ","à¦«à¦à¦²à§à¦¯à¦¾à¦¨à§à¦¡ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"FK","à¦®à¦¾à¦à¦à§à¦°à§à¦¨à§à¦¶à¦¿à¦¯à¦¼à¦¾":"FM","à¦«à§à¦¯à¦¾à¦°à¦ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"FO","à¦«à§à¦°à¦¾à¦¨à§à¦¸":"FR","à¦à§à¦¯à¦¾à¦¬à¦¨":"GA","à¦¯à§à¦à§à¦¤à¦°à¦¾à¦à§à¦¯":"GB","à¦à§à¦°à§à¦¨à¦¾à¦¡à¦¾":"GD","à¦à¦°à§à¦à¦¿à¦¯à¦¼à¦¾":"GE","à¦«à¦°à¦¾à¦¸à§ à¦à¦¾à¦¯à¦¼à¦¾à¦¨à¦¾":"GF","à¦à§à¦°à¦¾à¦à§à¦à¦¿":"GG","à¦à¦¾à¦¨à¦¾":"GH","à¦à¦¿à¦¬à§à¦°à¦¾à¦²à§à¦à¦¾à¦°":"GI","à¦à§à¦°à§à¦¨à¦²à§à¦¯à¦¾à¦¨à§à¦¡":"GL","à¦à¦¾à¦®à§à¦¬à¦¿à¦¯à¦¼à¦¾":"GM","à¦à¦¿à¦¨à¦¿":"GN","à¦à§à¦¯à¦¼à¦¾à¦¦à§à¦²à§à¦ª":"GP","à¦¨à¦¿à¦°à¦à§à¦·à§à¦¯à¦¼ à¦à¦¿à¦¨à¦¿":"GQ","à¦à§à¦°à§à¦¸à§":"GR","à¦¦à¦à§à¦·à¦¿à¦£ à¦à¦°à§à¦à¦¿à¦¯à¦¼à¦¾ à¦ à¦¦à¦à§à¦·à¦¿à¦£ à¦¸à§à¦¯à¦¾à¦¨à§à¦¡à¦à¦à¦ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦":"GS","à¦à§à¦¯à¦¼à¦¾à¦à¦¿à¦®à¦¾à¦²à¦¾":"GT","à¦à§à¦¯à¦¼à¦¾à¦®":"GU","à¦à¦¿à¦¨à¦¿-à¦¬à¦¿à¦¸à¦¾à¦":"GW","à¦à¦¿à¦¯à¦¼à¦¾à¦¨à¦¾":"GY","à¦¹à¦à¦à¦ à¦à¦¸à¦à¦à¦° à¦à§à¦¨à¦¾":"HK","à¦¹à¦¾à¦°à§à¦¡ à¦¦à§à¦¬à§à¦ª à¦à¦¬à¦ à¦®à§à¦¯à¦¾à¦à¦¡à§à¦¨à¦¾à¦²à§à¦¡ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"HM","à¦¹à¦£à§à¦¡à§à¦°à¦¾à¦¸":"HN","à¦à§à¦°à§à¦¯à¦¼à§à¦¶à¦¿à¦¯à¦¼à¦¾":"HR","à¦¹à¦¾à¦à¦¤à¦¿":"HT","à¦¹à¦¾à¦à§à¦à§à¦°à¦¿":"HU","à¦à§à¦¯à¦¾à¦¨à¦¾à¦°à¦¿ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"IC","à¦à¦¨à§à¦¦à§à¦¨à§à¦¶à¦¿à¦¯à¦¼à¦¾":"ID","à¦à¦¯à¦¼à¦¾à¦°à§à¦²à¦£à§à¦¡":"IE","à¦à¦¸à§à¦°à¦¾à¦¯à¦¼à§à¦²":"IL","à¦à¦à¦² à¦à¦« à¦®à§à¦¯à¦¾à¦¨":"IM","à¦­à¦¾à¦°à¦¤":"IN","à¦¬à§à¦°à¦¿à¦à¦¿à¦¶ à¦­à¦¾à¦°à¦¤ à¦®à¦¹à¦¾à¦¸à¦¾à¦à¦°à§à¦¯à¦¼ à¦à¦à§à¦à¦²":"IO","à¦à¦°à¦¾à¦":"IQ","à¦à¦°à¦¾à¦¨":"IR","à¦à¦à¦¸à¦²à¦£à§à¦¡":"IS","à¦à¦¤à¦¾à¦²à§":"IT","à¦à¦¾à¦°à§à¦¸à¦¿":"JE","à¦à§à¦¯à¦¾à¦®à§à¦à¦¾":"JM","à¦à¦°à§à¦¡à¦¨":"JO","à¦à¦¾à¦ªà¦¾à¦¨":"JP","à¦à§à¦¨à¦¿à¦¯à¦¼à¦¾":"KE","à¦à¦¿à¦°à§à¦à¦¿à¦à¦¿à¦¯à¦¼à¦¾":"KG","à¦à¦¾à¦®à§à¦¬à§à¦":"KH","à¦à¦¿à¦°à¦¿à¦¬à¦¾à¦¤à¦¿":"KI","à¦à¦®à§à¦°à§à¦¸":"KM","à¦¸à§à¦¨à§à¦ à¦à¦¿à¦à¦¸ à¦ à¦¨à§à¦­à¦¿à¦¸":"KN","à¦à¦¤à§à¦¤à¦° à¦à§à¦°à¦¿à¦¯à¦¼à¦¾":"KP","à¦¦à¦à§à¦·à¦¿à¦£ à¦à§à¦°à¦¿à¦¯à¦¼à¦¾":"KR","à¦à§à¦¯à¦¼à§à¦¤":"KW","à¦à§à¦®à§à¦¯à¦¾à¦¨ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"KY","à¦à¦¾à¦à¦¾à¦à¦¸à§à¦¥à¦¾à¦¨":"KZ","à¦²à¦¾à¦à¦¸":"LA","à¦²à§à¦¬à¦¾à¦¨à¦¨":"LB","à¦¸à§à¦¨à§à¦ à¦²à§à¦¸à¦¿à¦¯à¦¼à¦¾":"LC","à¦²à¦¿à¦à§à¦¨à¦¸à§à¦à§à¦à¦¨":"LI","à¦¶à§à¦°à§à¦²à¦à§à¦à¦¾":"LK","à¦²à¦¾à¦à¦¬à§à¦°à¦¿à¦¯à¦¼à¦¾":"LR","à¦²à§à¦¸à§à¦¥à§":"LS","à¦²à¦¿à¦¤à§à¦­à¦¾":"LT","à¦²à¦¾à¦à§à¦¸à§à¦®à¦¬à¦¾à¦°à§à¦":"LU","à¦²à¦¾à¦¤à§à¦­à¦¿à¦¯à¦¼à¦¾":"LV","à¦²à¦¿à¦¬à¦¿à¦¯à¦¼à¦¾":"LY","à¦®à§à¦°à¦à§à¦à§":"MA","à¦®à§à¦¨à¦¾à¦à§":"MC","à¦®à§à¦²à§à¦¦à¦¾à¦­à¦¿à¦¯à¦¼à¦¾":"MD","à¦®à¦¨à§à¦à¦¿à¦¨à¦¿à¦à§à¦°à§":"ME","à¦¸à§à¦¨à§à¦ à¦®à¦¾à¦°à§à¦à¦¿à¦¨":"MF","à¦®à¦¾à¦¦à¦¾à¦à¦¾à¦¸à§à¦à¦¾à¦°":"MG","à¦®à¦¾à¦°à§à¦¶à¦¾à¦² à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"MH","à¦®à§à¦¯à¦¾à¦¸à¦¾à¦¡à§à¦¨à¦¿à¦¯à¦¼à¦¾":"MK","à¦®à¦¾à¦²à¦¿":"ML","à¦®à¦¾à¦¯à¦¼à¦¾à¦¨à¦®à¦¾à¦°":"MM","à¦®à¦à§à¦à§à¦²à¦¿à¦¯à¦¼à¦¾":"MN","à¦®à§à¦¯à¦¾à¦à¦¾à¦ à¦à¦¸à¦à¦à¦° à¦à§à¦¨à¦¾":"MO","à¦à¦¤à§à¦¤à¦°à¦¾à¦à§à¦à¦²à§à¦¯à¦¼ à¦®à¦¾à¦°à¦¿à¦¯à¦¼à¦¾à¦¨à¦¾ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"MP","à¦®à¦¾à¦°à§à¦à¦¿à¦¨à¦¿à¦":"MQ","à¦®à¦°à¦¿à¦¤à¦¾à¦¨à¦¿à¦¯à¦¼à¦¾":"MR","à¦®à¦¨à§à¦à¦¸à§à¦°à¦¾à¦":"MS","à¦®à¦¾à¦²à§à¦à¦¾":"MT","à¦®à¦°à¦¿à¦¶à¦¾à¦¸":"MU","à¦®à¦¾à¦²à¦¦à§à¦¬à§à¦ª":"MV","à¦®à¦¾à¦²à¦¾à¦à¦":"MW","à¦®à¦à§à¦¸à¦¿à¦à§":"MX","à¦®à¦¾à¦²à§à¦¯à¦¾à¦¶à¦¿à¦¯à¦¼à¦¾":"MY","à¦®à§à¦à¦¾à¦®à§à¦¬à¦¿à¦":"MZ","à¦¨à¦¾à¦®à¦¿à¦¬à¦¿à¦¯à¦¼à¦¾":"NA","à¦¨à¦¿à¦ à¦à§à¦¯à¦¾à¦²à§à¦¡à§à¦¨à¦¿à¦¯à¦¼à¦¾":"NC","à¦¨à¦¾à¦à¦à¦¾à¦°":"NE","à¦¨à¦¿à¦°à¦«à§à¦ à¦¦à§à¦¬à§à¦ª":"NF","à¦¨à¦¾à¦à¦à§à¦°à¦¿à¦¯à¦¼à¦¾":"NG","à¦¨à¦¿à¦à¦¾à¦°à¦¾à¦à§à¦¯à¦¼à¦¾":"NI","à¦¨à§à¦¦à¦¾à¦°à¦²à§à¦¯à¦¾à¦¨à§à¦¡à¦¸":"NL","à¦¨à¦°à¦à¦¯à¦¼à§":"NO","à¦¨à§à¦ªà¦¾à¦²":"NP","à¦¨à¦¾à¦à¦°à§":"NR","à¦¨à¦¿à¦à¦¯à¦¼à§":"NU","à¦¨à¦¿à¦ à¦à¦¿à¦²à¦£à§à¦¡":"NZ","à¦à¦®à¦¾à¦¨":"OM","à¦ªà¦¾à¦¨à¦¾à¦®à¦¾":"PA","à¦ªà¦¿à¦°à§":"PE","à¦«à¦°à¦¾à¦¸à§ à¦ªà¦²à¦¿à¦¨à§à¦¶à¦¿à¦¯à¦¼à¦¾":"PF","à¦ªà¦¾à¦ªà§à¦¯à¦¼à¦¾ à¦¨à¦¿à¦ à¦à¦¿à¦¨à¦¿":"PG","à¦«à¦¿à¦²à¦¿à¦ªà¦¾à¦à¦¨":"PH","à¦ªà¦¾à¦à¦¿à¦¸à§à¦¤à¦¾à¦¨":"PK","à¦ªà§à¦²à§à¦¯à¦¾à¦£à§à¦¡":"PL","à¦¸à§à¦¨à§à¦ à¦ªà¦¿à¦¯à¦¼à§à¦° à¦ à¦®à¦¿à¦à§à¦¯à¦¼à§à¦²à¦¨":"PM","à¦ªà¦¿à¦à¦à§à¦¯à¦¼à¦¾à¦°à§à¦¨":"PN","à¦ªà§à¦¯à¦¼à§à¦°à§à¦à§à¦°à¦¿à¦à§":"PR","à¦«à¦¿à¦²à¦¿à¦¸à§à¦¤à¦¿à¦¨ à¦à¦à§à¦à¦²":"PS","à¦ªà¦°à§à¦¤à§à¦à¦¾à¦²":"PT","à¦ªà¦¾à¦²à¦¾à¦":"PW","à¦ªà§à¦¯à¦¾à¦°à¦¾à¦à§à¦¯à¦¼à§":"PY","à¦à¦¾à¦¤à¦¾à¦°":"QA","à¦à¦à¦à¦²à¦¾à¦à¦¨à¦¿à¦ à¦à¦¸à¦¾à¦¨à¦¿à¦¯à¦¼à¦¾":"QO","à¦°à¦¿à¦à¦à¦¨à¦¿à¦¯à¦¼à¦¨":"RE","à¦°à§à¦®à¦¾à¦¨à¦¿à¦¯à¦¼à¦¾":"RO","à¦¸à¦¾à¦°à¦¬à¦¿à¦¯à¦¼à¦¾":"RS","à¦°à¦¾à¦¶à¦¿à¦¯à¦¼à¦¾":"RU","à¦°à§à¦¯à¦¼à¦¾à¦¨à§à¦¡à¦¾":"RW","à¦¸à¦¾à¦à¦¦à¦¿ à¦à¦°à¦¬":"SA","à¦¸à¦²à§à¦®à¦¨ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"SB","à¦¸à¦¿à¦¸à¦¿à¦²à¦¿":"SC","à¦¸à§à¦¦à¦¾à¦¨":"SD","à¦¸à§à¦à¦¡à§à¦¨":"SE","à¦¸à¦¿à¦à§à¦à¦¾à¦ªà§à¦°":"SG","à¦¸à§à¦¨à§à¦ à¦¹à§à¦²à§à¦¨à¦¾":"SH","à¦¸à§à¦²à§à¦­à¦¾à¦¨à¦¿à¦¯à¦¼à¦¾":"SI","à¦¸à§à¦¬à¦¾à¦²à¦¬à¦¾à¦°à§à¦¡ à¦ à¦à¦¾à¦¨ à¦®à§à¦¯à¦¼à§à¦¨":"SJ","à¦¶à§à¦²à§à¦­à¦¾à¦à¦¿à¦¯à¦¼à¦¾":"SK","à¦¸à¦¿à¦¯à¦¼à§à¦°à¦¾à¦²à¦¿à¦à¦¨":"SL","à¦¸à¦¾à¦¨ à¦®à¦¾à¦°à¦¿à¦¨à§":"SM","à¦¸à§à¦¨à§à¦à¦¾à¦²":"SN","à¦¸à§à¦®à¦¾à¦²à¦¿":"SO","à¦¸à§à¦°à¦¿à¦¨à¦¾à¦®":"SR","à¦¦à¦à§à¦·à¦¿à¦¨ à¦¸à§à¦¦à¦¾à¦¨":"SS","à¦¸à¦¾à¦à¦à§à¦®à¦¾ à¦ à¦ªà§à¦°à¦¿à¦¨à§à¦¸à¦¿à¦ªà¦¿":"ST","à¦à¦² à¦¸à¦¾à¦²à¦­à§à¦¦à¦°":"SV","à¦¸à¦¿à¦¨à§à¦ à¦®à¦¾à¦°à§à¦à§à¦¨":"SX","à¦¸à¦¿à¦°à¦¿à¦¯à¦¼à¦¾":"SY","à¦¸à§à¦¯à¦¼à¦¾à¦à¦¿à¦²à§à¦¯à¦¾à¦¨à§à¦¡":"SZ","à¦à§à¦°à¦¿à¦¸à§à¦à¦¾à¦¨ à¦¡à¦¾ à¦à§à¦¨à¦¾":"TA","à¦¤à§à¦°à§à¦à¦¸ à¦ à¦à¦¾à¦à¦à§à¦¸ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"TC","à¦à¦¾à¦¦":"TD","à¦«à¦°à¦¾à¦¸à§ à¦¦à¦à§à¦·à¦¿à¦£à¦¾à¦à§à¦à¦²":"TF","à¦à§à¦à§":"TG","à¦¥à¦¾à¦":"TH","à¦¤à¦¾à¦à¦¿à¦à¦¸à§à¦¥à¦¾à¦¨":"TJ","à¦à§à¦à§à¦²à¦¾à¦":"TK","à¦ªà§à¦°à§à¦¬-à¦¤à¦¿à¦®à§à¦°":"TL","à¦¤à§à¦°à§à¦à¦®à§à¦¨à¦¿à¦¯à¦¼à¦¾":"TM","à¦à¦¿à¦à¦¨à¦¿à¦¸à§":"TN","à¦à§à¦à§à¦à¦¾":"TO","à¦¤à§à¦°à¦¸à§à¦":"TR","à¦¤à§à¦°à¦¿à¦¨à¦¿à¦¨à¦¾à¦¦ à¦ à¦à§à¦¬à§à¦¯à¦¾à¦à§":"TT","à¦à§à¦­à¦¾à¦²à§":"TV","à¦¤à¦¾à¦à¦à¦¯à¦¼à¦¾à¦¨":"TW","à¦¤à¦¾à¦à§à¦à¦¾à¦¨à¦¿à¦¯à¦¼à¦¾":"TZ","à¦à¦à¦à§à¦°à§à¦à¦¨":"UA","à¦à¦à¦¾à¦¨à§à¦¡à¦¾":"UG","à¦¯à§à¦à§à¦¤à¦°à¦¾à¦·à§à¦à§à¦°à§à¦° à¦à§à¦·à§à¦¦à§à¦° à¦ à¦ªà¦¾à¦°à§à¦¶à§à¦¬à¦¬à¦°à§à¦¤à§ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"UM","à¦®à¦¾à¦°à§à¦à¦¿à¦¨ à¦¯à§à¦à§à¦¤à¦°à¦¾à¦·à§à¦à§à¦°":"US","à¦à¦°à§à¦à§à¦¯à¦¼à§":"UY","à¦à¦à§à¦¬à§à¦à¦¿à¦¸à§à¦¥à¦¾à¦¨":"UZ","à¦­à§à¦¯à¦¾à¦à¦¿à¦à¦¾à¦¨ à¦¸à¦¿à¦à¦¿":"VA","à¦¸à§à¦¨à§à¦ à¦­à¦¿à¦¨à¦¸à§à¦¨à§à¦ à¦ à¦¦à§à¦¯à¦¾ à¦à§à¦°à§à¦¨à¦¾à¦¡à¦¿à¦¨à¦¸":"VC","à¦­à§à¦¨à§à¦à§à¦¯à¦¼à§à¦²à¦¾":"VE","à¦¬à§à¦°à¦¿à¦à¦¿à¦¶ à¦­à¦¾à¦°à§à¦à¦¿à¦¨ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"VG","à¦®à¦¾à¦°à§à¦à¦¿à¦¨ à¦­à¦¾à¦°à§à¦à¦¿à¦¨ à¦¦à§à¦¬à§à¦ªà¦ªà§à¦à§à¦":"VI","à¦­à¦¿à¦¯à¦¼à§à¦¤à¦¨à¦¾à¦®":"VN","à¦­à¦¾à¦¨à§à¦¯à¦¼à¦¾à¦à§":"VU","à¦à¦¯à¦¼à¦¾à¦²à¦¿à¦¸ à¦ à¦«à§à¦à§à¦¨à¦¾":"WF","à¦¸à¦¾à¦®à§à¦¯à¦¼à¦¾":"WS","à¦à¦®à§à¦¨":"YE","à¦®à¦¾à¦¯à¦¼à§à¦¤à§à¦¤à§":"YT","à¦¦à¦à§à¦·à¦¿à¦£ à¦à¦«à§à¦°à¦¿à¦à¦¾":"ZA","à¦à¦¾à¦®à§à¦¬à¦¿à¦¯à¦¼à¦¾":"ZM","à¦à¦¿à¦®à§à¦¬à¦¾à¦¬à§à¦¯à¦¼à§":"ZW","à¦à¦à¦¾à¦¨à¦¾ à¦à¦¥à¦¬à¦¾ à¦­à§à¦² à¦¸à§à¦¥à¦¾à¦¨":"ZZ"};
ilib.data.ctrynames_br = {"Azia":"142","Azia ar CÊ¼hreiz":"143","Azia ar CÊ¼hornÃ´g":"145","Europa":"150","Europa ar Reter":"151","Europa an Norzh":"154","Europa ar CÊ¼hornÃ´g":"155","Amerika Latin":"419","Bed":"001","Afrika":"002","Norzhamerika":"003","Suamerika":"005","Oseania":"009","Afrika ar CÊ¼hornÃ´g":"011","Kreizamerika":"013","Afrika ar Reter":"014","Afrika an Norzh":"015","Afrika ar CÊ¼hreiz":"017","Afrika ar Su":"018","AmerikaoÃ¹":"019","Amerika an Norzh":"021","Karib":"029","Azia ar Reter":"030","Azia ar Su":"034","Azia ar Gevred":"035","Europa ar Su":"039","Aostralazia":"053","Melanezia":"054","Rannved Mikronezia":"057","Polinezia":"061","Enez Ascension":"AC","Andorra":"AD","EmirelezhioÃ¹ Arab Unanet":"AE","Afghanistan":"AF","Antigua ha Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Antilhez Nederlandat":"AN","Angola":"AO","Antarktika":"AQ","ArcÊ¼hantina":"AR","Samoa Amerikan":"AS","Aostria":"AT","Aostralia":"AU","Aruba":"AW","Inizi Ãland":"AX","Azerbaidjan":"AZ","Bosnia ha Herzegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgia":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","Saint BarthÃ©lemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Antilhez nederlandat":"BQ","Brazil":"BR","Bahamas":"BS","Bhoutan":"BT","Enez Bouvet":"BV","Botswana":"BW","Belarus":"BY","Belize":"BZ","Kanada":"CA","Inizi Kokoz":"CC","Kongo - Kinshasa":"CD","Republik Kreizafrikan":"CF","Kongo - Brazzaville":"CG","Suis":"CH","Aod an Olifant":"CI","Inizi Cook":"CK","Chile":"CL","Kameroun":"CM","Sina":"CN","Kolombia":"CO","Enez Clipperton":"CP","Costa Rica":"CR","Kuba":"CU","Kab Glas":"CV","CuraÃ§ao":"CW","Enez Christmas":"CX","Kiprenez":"CY","Republik Tchek":"CZ","Alamagn":"DE","Diego Garcia":"DG","Djibouti":"DJ","Danmark":"DK","Dominica":"DM","Republik Dominikan":"DO","Aljeria":"DZ","Ceuta ha Melilla":"EA","Ecuador":"EC","Estonia":"EE","Egipt":"EG","Sahara ar CÊ¼hornÃ´g":"EH","Eritrea":"ER","Spagn":"ES","Etiopia":"ET","Unaniezh Europa":"EU","Finland":"FI","Fidji":"FJ","Inizi Falkland":"FK","Mikronezia":"FM","Inizi Faero":"FO","FraÃ±s":"FR","Gabon":"GA","Rouantelezh-Unanet":"GB","Grenada":"GD","Jorjia":"GE","Gwiana cÊ¼hall":"GF","Gwernenez":"GG","Ghana":"GH","Jibraltar":"GI","Greunland":"GL","Gambia":"GM","Ginea":"GN","Gwadeloup":"GP","Ginea ar CÊ¼heheder":"GQ","Gres":"GR","Inizi Georgia ar Su hag Inizi Sandwich ar Su":"GS","Guatemala":"GT","Guam":"GU","Ginea-Bissau":"GW","Guyana":"GY","Hong Kong RMD Sina":"HK","Inizi Heard ha McDonald":"HM","Honduras":"HN","Kroatia":"HR","Haiti":"HT","Hungaria":"HU","Inizi Kanariez":"IC","Indonezia":"ID","Iwerzhon":"IE","Israel":"IL","Enez Vanav":"IM","India":"IN","Tiriad breizhveurat Meurvor Indez":"IO","Iraq":"IQ","Iran":"IR","Island":"IS","Italia":"IT","Jerzenez":"JE","Jamaika":"JM","Jordania":"JO","Japan":"JP","Kenya":"KE","Kyrgyzstan":"KG","Kambodja":"KH","Kiribati":"KI","Komorez":"KM","Saint Kitts ha Nevis":"KN","Korea an Norzh":"KP","Korea ar Su":"KR","Koweit":"KW","Inizi Cayman":"KY","Kazakstan":"KZ","Laos":"LA","Liban":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Lituania":"LT","Luksembourg":"LU","Latvia":"LV","Libia":"LY","Maroko":"MA","Monaco":"MC","Moldova":"MD","Montenegro":"ME","Saint Martin":"MF","Madagaskar":"MG","Inizi Marshall":"MH","Makedonia":"MK","Mali":"ML","Myanmar [Birmania]":"MM","Mongolia":"MN","Macau RMD Sina":"MO","Inizi Mariana an Norzh":"MP","Martinik":"MQ","Maouritania":"MR","Montserrat":"MS","Malta":"MT","Moris":"MU","Maldivez":"MV","Malawi":"MW","MecÊ¼hiko":"MX","Malaysia":"MY","Mozambik":"MZ","Namibia":"NA","Kaledonia Nevez":"NC","Niger":"NE","Enez Norfolk":"NF","Nigeria":"NG","Nicaragua":"NI","IzelvroioÃ¹":"NL","Norvegia":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Zeland-Nevez":"NZ","Oman":"OM","PanamÃ¡":"PA","Perou":"PE","Polinezia cÊ¼hall":"PF","Papoua Ginea-Nevez":"PG","Filipinez":"PH","Pakistan":"PK","Polonia":"PL","Sant-PÃªr-ha-Mikelon":"PM","Enez Pitcairn":"PN","Puerto Rico":"PR","TiriadoÃ¹ Palestina":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Oseania diabell":"QO","ReÃ¼nion":"RE","Roumania":"RO","Serbia":"RS","Rusia":"RU","Rwanda":"RW","Arabia Saoudat":"SA","Salomon":"SB","Sechelez":"SC","Soudan":"SD","Sveden":"SE","Singapour":"SG","Saint Helena":"SH","Slovenia":"SI","Svalbard":"SJ","Slovakia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Surinam":"SR","Su Soudan":"SS","SÃ£o TomÃ© ha PrÃ­ncipe":"ST","Salvador":"SV","Sint Maarten":"SX","Siria":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Inizi Turks ha Caicos":"TC","Tchad":"TD","DouaroÃ¹ aostral FraÃ±s":"TF","Togo":"TG","Thailand":"TH","Tadjikistan":"TJ","Tokelau":"TK","Timor-Leste":"TL","Turkmenistan":"TM","Tunizia":"TN","Tonga":"TO","Turkia":"TR","Trinidad ha Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ukraina":"UA","Ouganda":"UG","Inizi diabell ar StadoÃ¹-Unanet":"UM","StadoÃ¹-Unanet":"US","Uruguay":"UY","Ouzbekistan":"UZ","Vatikan":"VA","Sant Visant hag ar Grenadinez":"VC","Venezuela":"VE","Inizi GwercÊ¼h Breizh-Veur":"VG","Inizi GwercÊ¼h ar StadoÃ¹-Unanet":"VI","ViÃªt Nam":"VN","Vanuatu":"VU","Wallis ha Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","Suafrika":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Rannved dianav":"ZZ"};
ilib.data.ctrynames_bs = {"Azija":"142","Centralna Azija":"143","Zapadna Azija":"145","Evropa":"150","IstoÄna Evropa":"151","Severna Evropa":"154","Zapadna Evropa":"155","Latinska Amerika":"419","Svet":"001","Afrika":"002","SevernoameriÄki kontinent":"003","JuÅ¾na Amerika":"005","Okeanija":"009","Zapadna Afrika":"011","Centralna Amerika":"013","IstoÄna Afrika":"014","Severna Afrika":"015","Centralna Afrika":"017","JuÅ¾na Afrika":"018","Amerike":"019","Severna Amerika":"021","Karibi":"029","IstoÄna Azija":"030","JuÅ¾na Azija":"034","JugoistoÄna Azija":"035","JuÅ¾na Evropa":"039","Australija i Novi Zeland":"053","Melanezija":"054","Micronezija":"057","Polinezija":"061","Andora":"AD","Ujedinjeni Arapski Emirati":"AE","Avganistan":"AF","Antigva i Barbuda":"AG","Angvila":"AI","Albanija":"AL","Armenija":"AM","Holandski Antili":"AN","Angola":"AO","Antarktika":"AQ","Argentina":"AR","AmeriÄka Samoa":"AS","Austrija":"AT","Australija":"AU","Aruba":"AW","Alandska ostrva":"AX","AzerbejdÅ¾an":"AZ","Bosna i Hercegovina":"BA","Barbados":"BB","BangladeÅ¡":"BD","Belgija":"BE","Burkina Faso":"BF","Bugarska":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","Sv. Bartolomej":"BL","Bermuda":"BM","Brunej":"BN","Bolivija":"BO","Brazil":"BR","Bahami":"BS","Butan":"BT","Buve Ostrva":"BV","Bocvana":"BW","Belorusija":"BY","Belise":"BZ","Kanada":"CA","Kokos (Keling) Ostrva":"CC","Demokratska Republika Kongo":"CD","Centralno AfriÄka Republika":"CF","Kongo":"CG","Å vajcarska":"CH","Obala SlonovaÄe":"CI","Kukova Ostrva":"CK","Äile":"CL","Kamerun":"CM","Kina":"CN","Kolumbija":"CO","Kostarika":"CR","Kuba":"CU","Kape Verde":"CV","BoÅ¾iÄna Ostrva":"CX","Kipar":"CY","ÄeÅ¡ka":"CZ","NemaÄka":"DE","DÅ¾ibuti":"DJ","Danska":"DK","Dominika":"DM","Dominikanska Republika":"DO","AlÅ¾ir":"DZ","Ekvador":"EC","Estonija":"EE","Egipat":"EG","Zapadna Sahara":"EH","Eritreja":"ER","Å panija":"ES","Etiopija":"ET","Evropska unija":"EU","Finska":"FI","FidÅ¾i":"FJ","Folklandska Ostrva":"FK","Mikronezija":"FM","Farska Ostrva":"FO","Francuska":"FR","Gabon":"GA","Velika Britanija":"GB","Grenada":"GD","Gruzija":"GE","Francuska Gvajana":"GF","Gurnsi":"GG","Gana":"GH","Gibraltar":"GI","Grenland":"GL","Gambija":"GM","Gvineja":"GN","Gvadelupe":"GP","Ekvatorijalna Gvineja":"GQ","GrÄka":"GR","JuÅ¾na DÅ¾ordÅ¾ija i JuÅ¾na SendviÄ Ostrva":"GS","Gvatemala":"GT","Guam":"GU","Gvineja-Bisao":"GW","Gvajana":"GY","Hong Kong (S. A. R. Kina)":"HK","Herd i Mekdonald Ostrva":"HM","Honduras":"HN","Hrvatska":"HR","Haiti":"HT","MaÄarska":"HU","Indonezija":"ID","Irska":"IE","Izrael":"IL","Ostrvo Man":"IM","Indija":"IN","Britansko Indijska Okeanska Teritorija":"IO","Irak":"IQ","Iran":"IR","Island":"IS","Italija":"IT","DÅ¾ersi":"JE","Jamajka":"JM","Jordan":"JO","Japan":"JP","Kenija":"KE","Kirgizstan":"KG","KambodÅ¾a":"KH","Kiribati":"KI","Komorska Ostrva":"KM","Sent Kits i Nevis":"KN","Severna Koreja":"KP","JuÅ¾na Koreja":"KR","Kuvajt":"KW","Kajmanska Ostrva":"KY","Kazahstan":"KZ","Laos":"LA","Liban":"LB","Sent Lucija":"LC","LihtenÅ¡tajn":"LI","Å ri Lanka":"LK","Liberija":"LR","Lesoto":"LS","Litvanija":"LT","Luksemburg":"LU","Letonija":"LV","Libija":"LY","Maroko":"MA","Monako":"MC","Moldavija":"MD","Crna Gora":"ME","Sv. Martin":"MF","Madagaskar":"MG","MarÅ¡alska Ostrva":"MH","Makedonija":"MK","Mali":"ML","Mijanmar":"MM","Mongolija":"MN","Makao (S. A. R. Kina)":"MO","Severna Marijanska Ostrva":"MP","Martinik":"MQ","Mauritanija":"MR","Monserat":"MS","Malta":"MT","Mauricius":"MU","Maldivi":"MV","Malavi":"MW","Meksiko":"MX","Malezija":"MY","Mozambik":"MZ","Namibija":"NA","Nova Kaledonija":"NC","Niger":"NE","Norfolk Ostrvo":"NF","Nigerija":"NG","Nikaragva":"NI","Holandija":"NL","NorveÅ¡ka":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Novi Zeland":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Francuska Polinezija":"PF","Papua Nova Gvineja":"PG","Filipini":"PH","Pakistan":"PK","Poljska":"PL","Sen Pjer i Mikelon":"PM","Pitcairn":"PN","Porto Riko":"PR","Palestinska Teritorija":"PS","Portugal":"PT","Palau":"PW","Paragvaj":"PY","Katar":"QA","Ostala okeanija":"QO","Rejunion":"RE","Rumunija":"RO","Srbija":"RS","Rusija":"RU","Ruanda":"RW","Saudijska Arabija":"SA","Solomonska Ostrva":"SB","SejÅ¡eli":"SC","Sudan":"SD","Å vedska":"SE","Singapur":"SG","Sveta Jelena":"SH","Slovenija":"SI","Svalbard i Janmajen Ostrva":"SJ","SlovaÄka":"SK","Sijera Leone":"SL","San Marino":"SM","Senegal":"SN","Somalija":"SO","Surinam":"SR","Sao Tome i Principe":"ST","Salvador":"SV","Sirija":"SY","Svazilend":"SZ","Turks i Kajkos Ostrva":"TC","Äad":"TD","Francuske JuÅ¾ne Teritorije":"TF","Togo":"TG","Tajland":"TH","TadÅ¾ikistan":"TJ","Tokelau":"TK","Timor Leste":"TL","Turkmenistan":"TM","Tunis":"TN","Tonga":"TO","Turska":"TR","Trinidad i Tobago":"TT","Tuvalu":"TV","Tajvan":"TW","Tanzanija":"TZ","Ukrajina":"UA","Uganda":"UG","Manja Udaljena Ostrva SAD":"UM","Sjedinjene AmeriÄke DrÅ¾ave":"US","Urugvaj":"UY","Uzbekistan":"UZ","Vatikan":"VA","Sent Vinsent i Grenadini":"VC","Venecuela":"VE","Britanska DeviÄanska Ostrva":"VG","S.A.D. DeviÄanska Ostrva":"VI","Vijetnam":"VN","Vanuatu":"VU","Valis i Futuna Ostrva":"WF","Samoa":"WS","Jemen":"YE","Majote":"YT","JuÅ¾noafriÄka Republika":"ZA","Zambija":"ZM","Zimbabve":"ZW","Nepoznata ili nevaÅ¾eÄa oblast":"ZZ"};
ilib.data.ctrynames_bs_Cyrl_BA = {"ÐÐ·Ð¸ÑÐ°":"142","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÐ·Ð¸ÑÐ°":"143","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÐ·Ð¸ÑÐ°":"145","ÐÐ²ÑÐ¾Ð¿Ð°":"150","ÐÑÑÐ¾ÑÐ½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"151","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"154","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"155","ÐÐ°ÑÐ¸Ð½ÑÐºÐ° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"419","Ð¡Ð²ÐµÑ":"001","ÐÑÑÐ¸ÐºÐ°":"002","Ð¡ÐµÐ²ÐµÑÐ½Ð¾Ð°Ð¼ÐµÑÐ¸ÑÐºÐ¸ ÐºÐ¾Ð½ÑÐ¸Ð½ÐµÐ½Ñ":"003","ÐÑÐ¶Ð½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"005","ÐÐºÐµÐ°Ð½Ð¸ÑÐ°":"009","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"011","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"013","ÐÑÑÐ¾ÑÐ½Ð° ÐÑÑÐ¸ÐºÐ°":"014","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÑÑÐ¸ÐºÐ°":"015","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"017","ÐÑÐ¶Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"018","ÐÐ¼ÐµÑÐ¸ÐºÐµ":"019","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"021","ÐÐ°ÑÐ¸Ð±Ð¸":"029","ÐÑÑÐ¾ÑÐ½Ð° ÐÐ·Ð¸ÑÐ°":"030","ÐÑÐ¶Ð½Ð° ÐÐ·Ð¸ÑÐ°":"034","ÐÑÐ³Ð¾Ð¸ÑÑÐ¾ÑÐ½Ð° ÐÐ·Ð¸ÑÐ°":"035","ÐÑÐ¶Ð½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"039","ÐÑÑÑÑÐ°Ð»Ð¸ÑÐ° Ð¸ ÐÐ¾Ð²Ð¸ ÐÐµÐ»Ð°Ð½Ð´":"053","ÐÐµÐ»Ð°Ð½ÐµÐ·Ð¸ÑÐ°":"054","ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸ÑÑÐºÐ¸ ÑÐµÐ³Ð¸Ð¾Ð½":"057","ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸ÑÐ°":"061","ÐÑÑÑÐ²Ð¾ ÐÑÐµÐ½ÑÐ¸Ð¾Ð½":"AC","ÐÐ½Ð´Ð¾ÑÐ°":"AD","Ð£ÑÐµÐ´Ð¸ÑÐµÐ½Ð¸ ÐÑÐ°Ð¿ÑÐºÐ¸ ÐÐ¼Ð¸ÑÐ°ÑÐ¸":"AE","ÐÐ²Ð³Ð°Ð½Ð¸ÑÑÐ°Ð½":"AF","ÐÐ½ÑÐ¸Ð³Ð²Ðµ Ð¸ ÐÐ°ÑÐ±ÑÐ´Ð°":"AG","ÐÐ½Ð³Ð²Ð¸Ð»Ð°":"AI","ÐÐ»Ð±Ð°Ð½Ð¸ÑÐ°":"AL","ÐÑÐ¼ÐµÐ½Ð¸ÑÐ°":"AM","Ð¥Ð¾Ð»Ð°Ð½Ð´ÑÐºÐ¸ ÐÐ½ÑÐ¸Ð»Ð¸":"AN","ÐÐ½Ð³Ð¾Ð»Ð°":"AO","ÐÐ½ÑÐ°ÑÐºÑÐ¸Ðº":"AQ","ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°":"AR","ÐÐ¼ÐµÑÐ¸ÑÐºÐ° Ð¡Ð°Ð¼Ð¾Ð°":"AS","ÐÑÑÑÑÐ¸ÑÐ°":"AT","ÐÑÑÑÑÐ°Ð»Ð¸ÑÐ°":"AU","ÐÑÑÐ±Ð°":"AW","ÐÐ»Ð°Ð½Ð´ÑÐºÐ° Ð¾ÑÑÑÐ²Ð°":"AX","ÐÐ·ÐµÑÐ±ÐµÑÑÐ°Ð½":"AZ","ÐÐ¾ÑÐ½Ð° Ð¸ Ð¥ÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°":"BA","ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ":"BB","ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ":"BD","ÐÐµÐ»Ð³Ð¸ÑÐ°":"BE","ÐÑÑÐºÐ¸Ð½Ð° Ð¤Ð°ÑÐ¾":"BF","ÐÑÐ³Ð°ÑÑÐºÐ°":"BG","ÐÐ°ÑÑÐµÐ¸Ð½":"BH","ÐÑÑÑÐ½Ð´Ð¸":"BI","ÐÐµÐ½Ð¸Ð½":"BJ","Ð¡Ð²ÐµÑÐ¸ ÐÐ°ÑÑÐ¾Ð»Ð¾Ð¼ÐµÑ":"BL","ÐÐµÑÐ¼ÑÐ´Ð°":"BM","ÐÑÑÐ½ÐµÑ":"BN","ÐÐ¾Ð»Ð¸Ð²Ð¸ÑÐ°":"BO","ÐÑÐ°Ð·Ð¸Ð»":"BR","ÐÐ°ÑÐ°Ð¼Ð¸":"BS","ÐÑÑÐ°Ð½":"BT","ÐÑÐ²Ðµ ÐÑÑÑÐ²Ð°":"BV","ÐÐ¾ÑÐ²Ð°Ð½Ð°":"BW","ÐÐµÐ»Ð¾ÑÑÑÐ¸ÑÐ°":"BY","ÐÐµÐ»Ð¸Ð·Ðµ":"BZ","ÐÐ°Ð½Ð°Ð´Ð°":"CA","ÐÐ¾ÐºÐ¾Ñ (ÐÐµÐ»Ð¸Ð½Ð³) ÐÑÑÑÐ²Ð°":"CC","ÐÐ¾Ð½Ð³Ð¾ - ÐÐ¸Ð½ÑÐ°ÑÐ°":"CD","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð¾ ÐÑÑÐ¸ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"CF","ÐÐ¾Ð½Ð³Ð¾ - ÐÑÐ°Ð·Ð°Ð²Ð¸Ð»":"CG","Ð¨Ð²Ð°ÑÑÐ°ÑÑÐºÐ°":"CH","ÐÐ±Ð°Ð»Ð° Ð¡Ð»Ð¾Ð½Ð¾Ð²Ð°ÑÐµ":"CI","ÐÑÐºÐ¾Ð²Ð° ÐÑÑÑÐ²Ð°":"CK","Ð§Ð¸Ð»Ðµ":"CL","ÐÐ°Ð¼ÐµÑÑÐ½":"CM","ÐÐ¸Ð½Ð°":"CN","ÐÐ¾Ð»ÑÐ¼Ð±Ð¸ÑÐ°":"CO","ÐÑÑÑÐ²Ð¾ ÐÐ»Ð¸Ð¿ÐµÑÑÐ¾Ð½":"CP","ÐÐ¾ÑÑÐ°ÑÐ¸ÐºÐ°":"CR","ÐÑÐ±Ð°":"CU","ÐÐ°Ð¿Ðµ ÐÐµÑÐ´Ðµ":"CV","ÐÐ¾Ð¶Ð¸ÑÐ½Ð° Ð¾ÑÑÑÐ²Ð°":"CX","ÐÐ¸Ð¿Ð°Ñ":"CY","Ð§ÐµÑÐºÐ°":"CZ","ÐÐµÐ¼Ð°ÑÐºÐ°":"DE","ÐÐ¸ÑÐµÐ³Ð¾ ÐÐ°ÑÑÐ¸ÑÐ°":"DG","ÐÐ¸Ð±ÑÑÐ¸":"DJ","ÐÐ°Ð½ÑÐºÐ°":"DK","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°":"DM","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"DO","ÐÐ»Ð¶Ð¸Ñ":"DZ","Ð¡ÐµÑÑÐ° Ð¸ ÐÐµÐ»Ð¸ÑÐ°":"EA","ÐÐºÐ²Ð°Ð´Ð¾Ñ":"EC","ÐÑÑÐ¾Ð½Ð¸ÑÐ°":"EE","ÐÐ³Ð¸Ð¿Ð°Ñ":"EG","ÐÐ°Ð¿Ð°Ð´Ð½Ð° Ð¡Ð°ÑÐ°ÑÐ°":"EH","ÐÑÐ¸ÑÑÐµÑÐ°":"ER","Ð¨Ð¿Ð°Ð½Ð¸ÑÐ°":"ES","ÐÑÐ¸Ð¾Ð¿Ð¸ÑÐ°":"ET","ÐÐ²ÑÐ¾Ð¿ÑÐºÐ° Ð£Ð½Ð¸ÑÐ°":"EU","Ð¤Ð¸Ð½ÑÐºÐ°":"FI","Ð¤Ð¸ÑÐ¸":"FJ","Ð¤Ð¾ÐºÐ»Ð°Ð½Ð´ÑÐºÐ° Ð¾ÑÑÑÐ²Ð°":"FK","ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸ÑÐ°":"FM","Ð¤Ð°ÑÑÐºÐ° ÐÑÑÑÐ²Ð°":"FO","Ð¤ÑÐ°Ð½ÑÑÑÐºÐ°":"FR","ÐÐ°Ð±Ð¾Ð½":"GA","ÐÐµÐ»Ð¸ÐºÐ° ÐÑÐ¸ÑÐ°Ð½Ð¸ÑÐ°":"GB","ÐÑÐµÐ½Ð°Ð´Ð°":"GD","ÐÑÑÐ·Ð¸ÑÐ°":"GE","Ð¤ÑÐ°Ð½ÑÑÑÐºÐ° ÐÐ²Ð°ÑÐ°Ð½Ð°":"GF","ÐÑÑÐ½ÑÐ¸":"GG","ÐÐ°Ð½Ð°":"GH","ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ":"GI","ÐÑÐµÐ½Ð»Ð°Ð½Ð´":"GL","ÐÐ°Ð¼Ð±Ð¸ÑÐ°":"GM","ÐÐ²Ð¸Ð½ÐµÑÐ°":"GN","ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿Ðµ":"GP","ÐÐºÐ²Ð°ÑÐ¾ÑÐ¸ÑÐ°Ð»Ð½Ð° ÐÐ²Ð¸Ð½ÐµÑÐ°":"GQ","ÐÑÑÐºÐ°":"GR","ÐÑÐ¶Ð½Ð° ÐÐ¾ÑÑÐ¸ÑÐ° Ð¸ ÐÑÐ¶Ð½Ð° Ð¡ÐµÐ½Ð´Ð²Ð¸Ñ ÐÑÑÑÐ²Ð°":"GS","ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°":"GT","ÐÑÐ°Ð¼":"GU","ÐÐ²Ð¸Ð½ÐµÑÐ°-ÐÐ¸ÑÐ°Ð¾":"GW","ÐÐ²Ð°ÑÐ°Ð½Ð°":"GY","Ð¥Ð¾Ð½Ð³ ÐÐ¾Ð½Ð³ Ð¡. Ð. Ð . ÐÐ¸Ð½Ð°":"HK","Ð¥ÐµÑÐ´ Ð¸ ÐÐµÐºÐ´Ð¾Ð½Ð°Ð»Ð´ ÐÑÑÑÐ²Ð°":"HM","Ð¥Ð¾Ð½Ð´ÑÑÐ°Ñ":"HN","Ð¥ÑÐ²Ð°ÑÑÐºÐ°":"HR","Ð¥Ð°Ð¸ÑÐ¸":"HT","ÐÐ°ÑÐ°ÑÑÐºÐ°":"HU","ÐÐ°Ð½Ð°ÑÑÐºÐ° Ð¾ÑÑÑÐ²Ð°":"IC","ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸ÑÐ°":"ID","ÐÑÑÐºÐ°":"IE","ÐÐ·ÑÐ°ÐµÐ»":"IL","ÐÑÑÑÐ²Ð¾ ÐÐ°Ð½":"IM","ÐÐ½Ð´Ð¸ÑÐ°":"IN","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ° ÑÐµÑÐ¸ÑÐ¾ÑÐ¸ÑÐ° Ñ ÐÐ½Ð´Ð¸ÑÑÐºÐ¾Ð¼ Ð¾ÐºÐµÐ°Ð½Ñ":"IO","ÐÑÐ°Ðº":"IQ","ÐÑÐ°Ð½":"IR","ÐÑÐ»Ð°Ð½Ð´":"IS","ÐÑÐ°Ð»Ð¸ÑÐ°":"IT","ÐÐµÑÑÐ¸":"JE","ÐÐ°Ð¼Ð°ÑÐºÐ°":"JM","ÐÐ¾ÑÐ´Ð°Ð½":"JO","ÐÐ°Ð¿Ð°Ð½":"JP","ÐÐµÐ½Ð¸ÑÐ°":"KE","ÐÐ¸ÑÐ³Ð¸Ð·ÑÑÐ°Ð½":"KG","ÐÐ°Ð¼Ð±Ð¾ÑÐ°":"KH","ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸":"KI","ÐÐ¾Ð¼Ð¾ÑÑÐºÐ° ÐÑÑÑÐ²Ð°":"KM","Ð¡ÐµÐ½Ñ ÐÐ¸ÑÑ Ð¸ ÐÐµÐ²Ð¸Ñ":"KN","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ¾ÑÐµÑÐ°":"KP","ÐÑÐ¶Ð½Ð° ÐÐ¾ÑÐµÑÐ°":"KR","ÐÑÐ²Ð°ÑÑ":"KW","ÐÐ°ÑÐ¼Ð°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°":"KY","ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½":"KZ","ÐÐ°Ð¾Ñ":"LA","ÐÐ¸Ð±Ð°Ð½":"LB","Ð¡ÐµÐ½Ñ ÐÑÑÐ¸ÑÐ°":"LC","ÐÐ¸ÑÑÐµÐ½ÑÑÐ°ÑÐ½":"LI","Ð¨ÑÐ¸ ÐÐ°Ð½ÐºÐ°":"LK","ÐÐ¸Ð±ÐµÑÐ¸ÑÐ°":"LR","ÐÐµÑÐ¾ÑÐ¾":"LS","ÐÐ¸ÑÐ²Ð°Ð½Ð¸ÑÐ°":"LT","ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³":"LU","ÐÐµÑÐ¾Ð½Ð¸ÑÐ°":"LV","ÐÐ¸Ð±Ð¸ÑÐ°":"LY","ÐÐ°ÑÐ¾ÐºÐ¾":"MA","ÐÐ¾Ð½Ð°ÐºÐ¾":"MC","ÐÐ¾Ð»Ð´Ð°Ð²Ð¸ÑÐ°":"MD","Ð¦ÑÐ½Ð° ÐÐ¾ÑÐ°":"ME","Ð¡ÐµÐ½Ñ ÐÐ°ÑÑÐ¸Ð½":"MF","ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ":"MG","ÐÐ°ÑÑÐ°Ð»ÑÐºÐ° ÐÑÑÑÐ²Ð°":"MH","ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸ÑÐ°":"MK","ÐÐ°Ð»Ð¸":"ML","ÐÐ¸ÑÐ°Ð½Ð¼Ð°Ñ [ÐÑÑÐ¼Ð°]":"MM","ÐÐ¾Ð½Ð³Ð¾Ð»Ð¸ÑÐ°":"MN","ÐÐ°ÐºÐ°Ð¾ Ð¡. Ð. Ð . ÐÐ¸Ð½Ð°":"MO","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ°ÑÐ¸ÑÐ°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°":"MP","ÐÐ°ÑÑÐ¸Ð½Ð¸Ðº":"MQ","ÐÐ°ÑÑÐ¸ÑÐ°Ð½Ð¸ÑÐ°":"MR","ÐÐ¾Ð½ÑÐµÑÐ°Ñ":"MS","ÐÐ°Ð»ÑÐ°":"MT","ÐÐ°ÑÑÐ¸ÑÐ¸ÑÑÑ":"MU","ÐÐ°Ð»Ð´Ð¸Ð²Ð¸":"MV","ÐÐ°Ð»Ð°Ð²Ð¸":"MW","ÐÐµÐºÑÐ¸ÐºÐ¾":"MX","ÐÐ°Ð»ÐµÐ·Ð¸ÑÐ°":"MY","ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº":"MZ","ÐÐ°Ð¼Ð¸Ð±Ð¸ÑÐ°":"NA","ÐÐ¾Ð²Ð° ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸ÑÐ°":"NC","ÐÐ¸Ð³ÐµÑ":"NE","ÐÐ¾ÑÑÐ¾Ð»Ðº ÐÑÑÑÐ²Ð¾":"NF","ÐÐ¸Ð³ÐµÑÐ¸ÑÐ°":"NG","ÐÐ¸ÐºÐ°ÑÐ°Ð³Ð²Ð°":"NI","Ð¥Ð¾Ð»Ð°Ð½Ð´Ð¸ÑÐ°":"NL","ÐÐ¾ÑÐ²ÐµÑÐºÐ°":"NO","ÐÐµÐ¿Ð°Ð»":"NP","ÐÐ°ÑÑÑ":"NR","ÐÐ¸ÑÐµ":"NU","ÐÐ¾Ð²Ð¸ ÐÐµÐ»Ð°Ð½Ð´":"NZ","ÐÐ¼Ð°Ð½":"OM","ÐÐ°Ð½Ð°Ð¼Ð°":"PA","ÐÐµÑÑ":"PE","Ð¤ÑÐ°Ð½ÑÑÑÐºÐ° ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸ÑÐ°":"PF","ÐÐ°Ð¿ÑÐ° ÐÐ¾Ð²Ð° ÐÐ²Ð¸Ð½ÐµÑÐ°":"PG","Ð¤Ð¸Ð»Ð¸Ð¿Ð¸Ð½Ð¸":"PH","ÐÐ°ÐºÐ¸ÑÑÐ°Ð½":"PK","ÐÐ¾ÑÑÐºÐ°":"PL","Ð¡ÐµÐ½ ÐÑÐµÑ Ð¸ ÐÐ¸ÐºÐµÐ»Ð¾Ð½":"PM","ÐÐ¸ÑÐºÐµÑÐ½":"PN","ÐÐ¾ÑÑÐ¾ Ð Ð¸ÐºÐ¾":"PR","ÐÐ°Ð»ÐµÑÑÐ¸Ð½ÑÐºÐµ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸ÑÐµ":"PS","ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸ÑÐ°":"PT","ÐÐ°Ð»Ð°Ñ":"PW","ÐÐ°ÑÐ°Ð³Ð²Ð°Ñ":"PY","ÐÐ°ÑÐ°Ñ":"QA","ÐÑÑÐ°Ð»Ð° Ð¾ÐºÐµÐ°Ð½Ð¸ÑÐ°":"QO","Ð ÐµÐ¸Ð½Ð¸Ð¾Ð½":"RE","Ð ÑÐ¼ÑÐ½Ð¸ÑÐ°":"RO","Ð¡ÑÐ±Ð¸ÑÐ°":"RS","Ð ÑÑÐ¸ÑÐ°":"RU","Ð ÑÐ°Ð½Ð´Ð°":"RW","Ð¡Ð°ÑÐ´Ð¸ÑÑÐºÐ° ÐÑÐ°Ð±Ð¸ÑÐ°":"SA","Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°":"SB","Ð¡ÐµÑÑÐµÐ»Ð¸":"SC","Ð¡ÑÐ´Ð°Ð½":"SD","Ð¨Ð²ÐµÐ´ÑÐºÐ°":"SE","Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ":"SG","Ð¡Ð²ÐµÑÐ° ÐÐµÐ»ÐµÐ½Ð°":"SH","Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸ÑÐ°":"SI","Ð¡Ð²Ð°Ð»Ð±Ð°ÑÐ´ Ð¸ ÐÐ°Ð½Ð¼Ð°ÑÐµÐ½ ÐÑÑÑÐ²Ð°":"SJ","Ð¡Ð»Ð¾Ð²Ð°ÑÐºÐ°":"SK","Ð¡Ð¸ÑÐµÑÐ° ÐÐµÐ¾Ð½Ðµ":"SL","Ð¡Ð°Ð½ ÐÐ°ÑÐ¸Ð½Ð¾":"SM","Ð¡ÐµÐ½ÐµÐ³Ð°Ð»":"SN","Ð¡Ð¾Ð¼Ð°Ð»Ð¸ÑÐ°":"SO","Ð¡ÑÑÐ¸Ð½Ð°Ð¼":"SR","Ð¡Ð°Ð¾ Ð¢Ð¾Ð¼Ðµ Ð¸ ÐÑÐ¸Ð½ÑÐ¸Ð¿Ðµ":"ST","Ð¡Ð°Ð»Ð²Ð°Ð´Ð¾Ñ":"SV","Ð¡Ð¸ÑÐ¸ÑÐ°":"SY","Ð¡Ð²Ð°Ð·Ð¸Ð»ÐµÐ½Ð´":"SZ","Ð¢ÑÐ¸ÑÑÐ°Ð½ Ð´Ð° ÐÑÑÐ°":"TA","Ð¢ÑÑÐºÑ Ð¸ ÐÐ°ÑÐºÐ¾Ñ ÐÑÑÑÐ²Ð°":"TC","Ð§Ð°Ð´":"TD","Ð¤ÑÐ°Ð½ÑÑÑÐºÐµ ÐÑÐ¶Ð½Ðµ Ð¢ÐµÑÐ¸ÑÐ¾ÑÐ¸ÑÐµ":"TF","Ð¢Ð¾Ð³Ð¾":"TG","Ð¢Ð°ÑÐ»Ð°Ð½Ð´":"TH","Ð¢Ð°ÑÐ¸ÐºÐ¸ÑÑÐ°Ð½":"TJ","Ð¢Ð¾ÐºÐµÐ»Ð°Ñ":"TK","ÐÑÑÐ¾ÑÐ½Ð¸ Ð¢Ð¸Ð¼Ð¾Ñ":"TL","Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸ÑÑÐ°Ð½":"TM","Ð¢ÑÐ½Ð¸Ñ":"TN","Ð¢Ð¾Ð½Ð³Ð°":"TO","Ð¢ÑÑÑÐºÐ°":"TR","Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¸ Ð¢Ð¾Ð±Ð°Ð³Ð¾":"TT","Ð¢ÑÐ²Ð°Ð»Ñ":"TV","Ð¢Ð°ÑÐ²Ð°Ð½":"TW","Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸ÑÐ°":"TZ","Ð£ÐºÑÐ°ÑÐ¸Ð½Ð°":"UA","Ð£Ð³Ð°Ð½Ð´Ð°":"UG","ÐÐ°ÑÐ° ÑÐ´Ð°ÑÐµÐ½Ð° Ð¾ÑÑÑÐ²Ð° Ð¡ÐÐ":"UM","Ð¡ÑÐµÐ´Ð¸ÑÐµÐ½Ðµ ÐÐ¼ÐµÑÐ¸ÑÐºÐµ ÐÑÐ¶Ð°Ð²Ðµ":"US","Ð£ÑÑÐ³Ð²Ð°Ñ":"UY","Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½":"UZ","ÐÐ°ÑÐ¸ÐºÐ°Ð½":"VA","Ð¡ÐµÐ½Ñ ÐÐ¸Ð½ÑÐµÐ½Ñ Ð¸ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ð¸":"VC","ÐÐµÐ½ÐµÑÑÐµÐ»Ð°":"VE","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ° ÐÐµÐ²Ð¸ÑÐ°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°":"VG","Ð¡.Ð.Ð. ÐÐµÐ²Ð¸ÑÐ°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°":"VI","ÐÐ¸ÑÐµÑÐ½Ð°Ð¼":"VN","ÐÐ°Ð½ÑÐ°ÑÑ":"VU","ÐÐ°Ð»Ð¸Ñ Ð¸ Ð¤ÑÑÑÐ½Ð° ÐÑÑÑÐ²Ð°":"WF","Ð¡Ð°Ð¼Ð¾Ð°":"WS","ÐÐµÐ¼ÐµÐ½":"YE","ÐÐ°ÑÐ¾ÑÐµ":"YT","ÐÑÐ¶Ð½Ð¾Ð°ÑÑÐ¸ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"ZA","ÐÐ°Ð¼Ð±Ð¸ÑÐ°":"ZM","ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ":"ZW","ÐÐµÐ¿Ð¾Ð·Ð½Ð°ÑÐ° Ð¸Ð»Ð¸ Ð½ÐµÐ²Ð°Ð¶ÐµÑÐ° Ð¾Ð±Ð»Ð°ÑÑ":"ZZ"};
ilib.data.ctrynames_ca = {"Ãsia":"142","Ãsia Central":"143","Ãsia Occidental":"145","Europa":"150","Europa Oriental":"151","Europa septentrional":"154","Europa Occidental":"155","AmÃ¨rica Llatina":"419","MÃ³n":"001","Ãfrica":"002","AmÃ¨rica del Nord":"003","AmÃ¨rica del Sud":"005","Oceania":"009","Ãfrica Occidental":"011","AmÃ¨rica Central":"013","Ãfrica Oriental":"014","Ãfrica septentrional":"015","Ãfrica Central":"017","Ãfrica meridional":"018","AmÃ¨rica":"019","AmÃ¨rica septentrional":"021","Carib":"029","Ãsia Oriental":"030","Ãsia meridional":"034","Ãsia Sud-oriental":"035","Europa meridional":"039","AustrÃ lia i Nova Zelanda":"053","MelanÃ¨sia":"054","RegiÃ³ de la MicronÃ¨sia":"057","PolinÃ¨sia":"061","Illa de l'AscensiÃ³":"AC","Andorra":"AD","UniÃ³ dels Emirats Ãrabs":"AE","Afganistan":"AF","Antigua i Barbuda":"AG","Anguilla":"AI","AlbÃ nia":"AL","ArmÃ¨nia":"AM","Antilles Neerlandeses":"AN","Angola":"AO","AntÃ rtida":"AQ","Argentina":"AR","Samoa Americana":"AS","Ãustria":"AT","AustrÃ lia":"AU","Aruba":"AW","Illes Ãland":"AX","Azerbaidjan":"AZ","BÃ²snia i Hercegovina":"BA","Barbados":"BB","Bangla Desh":"BD","BÃ¨lgica":"BE","Burkina Faso":"BF","BulgÃ ria":"BG","Bahrain":"BH","Burundi":"BI","BenÃ­n":"BJ","Saint BarthÃ©lemy":"BL","Bermudes":"BM","Brunei":"BN","BolÃ­via":"BO","Carib NeerlandÃ¨s":"BQ","Brasil":"BR","Bahames":"BS","Bhutan":"BT","Illa Bouvet":"BV","Botswana":"BW","BielorÃºssia":"BY","Belize":"BZ","CanadÃ ":"CA","Illes Cocos":"CC","Congo - Kinshasa":"CD","RepÃºblica Centreafricana":"CF","Congo - Brazzaville":"CG","SuÃ¯ssa":"CH","Costa dâIvori":"CI","Illes Cook":"CK","Xile":"CL","Camerun":"CM","Xina":"CN","ColÃ²mbia":"CO","Illa Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","Cap Verd":"CV","CuraÃ§ao":"CW","Illa Christmas":"CX","Xipre":"CY","RepÃºblica Txeca":"CZ","Alemanya":"DE","Diego Garcia":"DG","Djibouti":"DJ","Dinamarca":"DK","Dominica":"DM","RepÃºblica Dominicana":"DO","AlgÃ¨ria":"DZ","Ceuta i Melilla":"EA","Equador":"EC","EstÃ²nia":"EE","Egipte":"EG","SÃ hara Occidental":"EH","Eritrea":"ER","Espanya":"ES","EtiÃ²pia":"ET","UniÃ³ Europea":"EU","FinlÃ ndia":"FI","Fiji":"FJ","Illes Malvines":"FK","MicronÃ¨sia":"FM","Illes FÃ¨roe":"FO","FranÃ§a":"FR","Gabon":"GA","Regne Unit":"GB","Grenada":"GD","GeÃ²rgia":"GE","Guaiana Francesa":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","GrenlÃ ndia":"GL","GÃ mbia":"GM","Guinea":"GN","Guadeloupe":"GP","Guinea Equatorial":"GQ","GrÃ¨cia":"GR","Illes GeÃ²rgia del Sud i Sandwich del Sud":"GS","Guatemala":"GT","Guam":"GU","Guinea Bissau":"GW","Guyana":"GY","RegiÃ³ adm. especial xinesa de Hong Kong":"HK","Illa Heard i Illes McDonald":"HM","Hondures":"HN","CroÃ cia":"HR","HaitÃ­":"HT","Hongria":"HU","Illes CanÃ ries":"IC","IndonÃ¨sia":"ID","Irlanda":"IE","Israel":"IL","Illa de Man":"IM","Ãndia":"IN","Territori BritÃ nic de l'OceÃ  Ãndic":"IO","Iraq":"IQ","Iran":"IR","IslÃ ndia":"IS","ItÃ lia":"IT","Jersey":"JE","Jamaica":"JM","JordÃ nia":"JO","JapÃ³":"JP","Kenya":"KE","Kirguizistan":"KG","Cambodja":"KH","Kiribati":"KI","Comores":"KM","Saint Christopher i Nevis":"KN","Corea del Nord":"KP","Corea del Sud":"KR","Kuwait":"KW","Illes Caiman":"KY","Kazakhstan":"KZ","Laos":"LA","LÃ­ban":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","LibÃ¨ria":"LR","Lesotho":"LS","LituÃ nia":"LT","Luxemburg":"LU","LetÃ²nia":"LV","LÃ­bia":"LY","Marroc":"MA","MÃ²naco":"MC","MoldÃ via":"MD","Montenegro":"ME","Saint Martin":"MF","Madagascar":"MG","Illes Marshall":"MH","MacedÃ²nia":"MK","Mali":"ML","Myanmar [BirmÃ nia]":"MM","MongÃ²lia":"MN","RegiÃ³ administrativa especial xinesa de Macau":"MO","Illes Mariannes del Nord":"MP","Martinica":"MQ","MauritÃ nia":"MR","Montserrat":"MS","Malta":"MT","Maurici":"MU","Maldives":"MV","Malawi":"MW","MÃ¨xic":"MX","MalÃ isia":"MY","MoÃ§ambic":"MZ","NamÃ­bia":"NA","Nova CaledÃ²nia":"NC","NÃ­ger":"NE","Illa Norfolk":"NF","NigÃ¨ria":"NG","Nicaragua":"NI","PaÃ¯sos Baixos":"NL","Noruega":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Nova Zelanda":"NZ","Oman":"OM","PanamÃ ":"PA","PerÃº":"PE","PolinÃ¨sia Francesa":"PF","Papua Nova Guinea":"PG","Filipines":"PH","Pakistan":"PK","PolÃ²nia":"PL","Saint-Pierre-et-Miquelon":"PM","Illes Pitcairn":"PN","Puerto Rico":"PR","Palestina":"PS","Portugal":"PT","Palau":"PW","Paraguai":"PY","Qatar":"QA","Territoris allunyats d'Oceania":"QO","Illa de la ReuniÃ³":"RE","Romania":"RO","SÃ¨rbia":"RS","RÃºssia":"RU","Rwanda":"RW","ArÃ bia Saudita":"SA","Illes SalomÃ³":"SB","Seychelles":"SC","Sudan":"SD","SuÃ¨cia":"SE","Singapur":"SG","Saint Helena":"SH","EslovÃ¨nia":"SI","Svalbard i Jan Mayen":"SJ","EslovÃ quia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","SomÃ lia":"SO","Surinam":"SR","Sudan del Sud":"SS","SÃ£o TomÃ© i PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","SÃ­ria":"SY","SwazilÃ ndia":"SZ","TristÃ£o da Cunha":"TA","Illes Turks i Caicos":"TC","Txad":"TD","Territoris Francesos del Sud":"TF","Togo":"TG","TailÃ ndia":"TH","Tadjikistan":"TJ","Tokelau":"TK","Timor Oriental":"TL","Turkmenistan":"TM","TunÃ­sia":"TN","Tonga":"TO","Turquia":"TR","Trinitat i Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","TanzÃ nia":"TZ","UcraÃ¯na":"UA","Uganda":"UG","Illes PerifÃ¨riques Menors dels EUA":"UM","Estats Units":"US","Uruguai":"UY","Uzbekistan":"UZ","VaticÃ ":"VA","Saint Vincent i les Grenadines":"VC","VeneÃ§uela":"VE","Illes Verges BritÃ niques":"VG","Illes Verges Nord-americanes":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis i Futuna":"WF","Samoa":"WS","Iemen":"YE","Mayotte":"YT","RepÃºblica de Sud-Ã frica":"ZA","ZÃ mbia":"ZM","Zimbabwe":"ZW","RegiÃ³ desconeguda":"ZZ"};
ilib.data.ctrynames_cs = {"Asie":"142","StÅednÃ­ Asie":"143","ZÃ¡padnÃ­ Asie":"145","Evropa":"150","VÃ½chodnÃ­ Evropa":"151","SevernÃ­ Evropa":"154","ZÃ¡padnÃ­ Evropa":"155","LatinskÃ¡ Amerika":"419","SvÄt":"001","Afrika":"002","SevernÃ­ Amerika":"003","JiÅ¾nÃ­ Amerika":"005","OceÃ¡nie":"009","ZÃ¡padnÃ­ Afrika":"011","StÅednÃ­ Amerika":"013","VÃ½chodnÃ­ Afrika":"014","SevernÃ­ Afrika":"015","StÅednÃ­ Afrika":"017","JiÅ¾nÃ­ Afrika":"018","Amerika":"019","SevernÃ­ Amerika oblast":"021","Karibik":"029","VÃ½chodnÃ­ Asie":"030","JiÅ¾nÃ­ Asie":"034","JihovÃ½chodnÃ­ Asie":"035","JiÅ¾nÃ­ Evropa":"039","Australasie":"053","MelanÃ©sie":"054","MikronÃ©sie oblast":"057","PolynÃ©sie":"061","Ostrov Ascension":"AC","Andorra":"AD","SpojenÃ© arabskÃ© emirÃ¡ty":"AE","AfghÃ¡nistÃ¡n":"AF","Antigua a Barbuda":"AG","Anguilla":"AI","AlbÃ¡nie":"AL","ArmÃ©nie":"AM","NizozemskÃ© Antily":"AN","Angola":"AO","Antarktida":"AQ","Argentina":"AR","AmerickÃ¡ Samoa":"AS","Rakousko":"AT","AustrÃ¡lie":"AU","Aruba":"AW","Alandy":"AX","ÃzerbÃ¡jdÅ¾Ã¡n":"AZ","Bosna a Hercegovina":"BA","Barbados":"BB","BangladÃ©Å¡":"BD","Belgie":"BE","Burkina Faso":"BF","Bulharsko":"BG","Bahrajn":"BH","Burundi":"BI","Benin":"BJ","SvatÃ½ BartolomÄj":"BL","Bermudy":"BM","Brunej":"BN","BolÃ­vie":"BO","KaribskÃ© Nizozemsko":"BQ","BrazÃ­lie":"BR","Bahamy":"BS","BhÃºtÃ¡n":"BT","BouvetÅ¯v ostrov":"BV","Botswana":"BW","BÄlorusko":"BY","Belize":"BZ","Kanada":"CA","KokosovÃ© ostrovy":"CC","Kongo - Kinshasa":"CD","StÅedoafrickÃ¡ republika":"CF","Kongo - Brazzaville":"CG","Å vÃ½carsko":"CH","PobÅeÅ¾Ã­ slonoviny":"CI","Cookovy ostrovy":"CK","Chile":"CL","Kamerun":"CM","ÄÃ­na":"CN","Kolumbie":"CO","ClippertonÅ¯v ostrov":"CP","Kostarika":"CR","Kuba":"CU","Kapverdy":"CV","CuraÃ§ao":"CW","VÃ¡noÄnÃ­ ostrovy":"CX","Kypr":"CY","ÄeskÃ¡ republika":"CZ","NÄmecko":"DE","Diego GarcÃ­a":"DG","DÅ¾ibutsko":"DJ","DÃ¡nsko":"DK","Dominika":"DM","DominikÃ¡nskÃ¡ republika":"DO","AlÅ¾Ã­rsko":"DZ","Ceuta a Melilla":"EA","EkvÃ¡dor":"EC","Estonsko":"EE","Egypt":"EG","ZÃ¡padnÃ­ Sahara":"EH","Eritrea":"ER","Å panÄlsko":"ES","Etiopie":"ET","EvropskÃ¡ unie":"EU","Finsko":"FI","FidÅ¾i":"FJ","FalklandskÃ© ostrovy":"FK","MikronÃ©sie":"FM","FaerskÃ© ostrovy":"FO","Francie":"FR","Gabon":"GA","VelkÃ¡ BritÃ¡nie":"GB","Grenada":"GD","Gruzie":"GE","FrancouzskÃ¡ Guyana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","GrÃ³nsko":"GL","Gambie":"GM","Guinea":"GN","Guadeloupe":"GP","RovnÃ­kovÃ¡ Guinea":"GQ","Åecko":"GR","JiÅ¾nÃ­ Georgie a JiÅ¾nÃ­ Sandwichovy ostrovy":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Hongkong - ZAO ÄÃ­ny":"HK","HeardÅ¯v ostrov a McDonaldovy ostrovy":"HM","Honduras":"HN","Chorvatsko":"HR","Haiti":"HT","MaÄarsko":"HU","KanÃ¡rskÃ© ostrovy":"IC","IndonÃ©sie":"ID","Irsko":"IE","Izrael":"IL","Ostrov Man":"IM","Indie":"IN","BritskÃ© indickooceÃ¡nskÃ© ÃºzemÃ­":"IO","IrÃ¡k":"IQ","ÃrÃ¡n":"IR","Island":"IS","ItÃ¡lie":"IT","Jersey":"JE","Jamajka":"JM","JordÃ¡nsko":"JO","Japonsko":"JP","KeÅa":"KE","KyrgyzstÃ¡n":"KG","KambodÅ¾a":"KH","Kiribati":"KI","Komory":"KM","SvatÃ½ Kitts a Nevis":"KN","SevernÃ­ Korea":"KP","JiÅ¾nÃ­ Korea":"KR","Kuvajt":"KW","KajmanskÃ© ostrovy":"KY","KazachstÃ¡n":"KZ","Laos":"LA","Libanon":"LB","SvatÃ¡ Lucie":"LC","LichtenÅ¡tejnsko":"LI","SrÃ­ Lanka":"LK","LibÃ©rie":"LR","Lesotho":"LS","Litva":"LT","Lucembursko":"LU","LotyÅ¡sko":"LV","Libye":"LY","Maroko":"MA","Monako":"MC","Moldavsko":"MD","ÄernÃ¡ Hora":"ME","SvatÃ½ Martin":"MF","Madagaskar":"MG","Marshallovy ostrovy":"MH","Makedonie":"MK","Mali":"ML","Myanmar":"MM","Mongolsko":"MN","Macao - ZAO ÄÃ­ny":"MO","SevernÃ­ Mariany":"MP","Martinik":"MQ","MauritÃ¡nie":"MR","Montserrat":"MS","Malta":"MT","Mauricius":"MU","Maledivy":"MV","Malawi":"MW","Mexiko":"MX","Malajsie":"MY","Mosambik":"MZ","Namibie":"NA","NovÃ¡ Kaledonie":"NC","Niger":"NE","Norfolk":"NF","NigÃ©rie":"NG","Nikaragua":"NI","Nizozemsko":"NL","Norsko":"NO","NepÃ¡l":"NP","Nauru":"NR","Niue":"NU","NovÃ½ ZÃ©land":"NZ","OmÃ¡n":"OM","Panama":"PA","Peru":"PE","FrancouzskÃ¡ PolynÃ©sie":"PF","Papua-NovÃ¡ Guinea":"PG","FilipÃ­ny":"PH","PÃ¡kistÃ¡n":"PK","Polsko":"PL","SvatÃ½ Pierre a Miquelon":"PM","Pitcairnovy ostrovy":"PN","Portoriko":"PR","PalestinskÃ¡ ÃºzemÃ­":"PS","Portugalsko":"PT","Palau":"PW","Paraguay":"PY","Katar":"QA","VnÄjÅ¡Ã­ OceÃ¡nie":"QO","RÃ©union":"RE","Rumunsko":"RO","Srbsko":"RS","Rusko":"RU","Rwanda":"RW","SaÃºdskÃ¡ ArÃ¡bie":"SA","Å alamounovy ostrovy":"SB","Seychely":"SC","SÃºdÃ¡n":"SD","Å vÃ©dsko":"SE","Singapur":"SG","SvatÃ¡ Helena":"SH","Slovinsko":"SI","Å picberky a Jan Mayen":"SJ","Slovensko":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","SomÃ¡lsko":"SO","Surinam":"SR","JiÅ¾nÃ­ SÃºdÃ¡n":"SS","SvatÃ½ TomÃ¡Å¡ a PrincÅ¯v ostrov":"ST","Salvador":"SV","Sint Maarten":"SX","SÃ½rie":"SY","Svazijsko":"SZ","Tristan da Cunha":"TA","Ostrovy Turks a Caicos":"TC","Äad":"TD","FrancouzskÃ¡ jiÅ¾nÃ­ teritoria":"TF","Togo":"TG","Thajsko":"TH","TÃ¡dÅ¾ikistÃ¡n":"TJ","Tokelau":"TK","VÃ½chodnÃ­ Timor":"TL","TurkmenistÃ¡n":"TM","Tunisko":"TN","Tonga":"TO","Turecko":"TR","Trinidad a Tobago":"TT","Tuvalu":"TV","Tchaj-wan":"TW","Tanzanie":"TZ","Ukrajina":"UA","Uganda":"UG","MenÅ¡Ã­ odlehlÃ© ostrovy USA":"UM","SpojenÃ© stÃ¡ty":"US","Uruguay":"UY","UzbekistÃ¡n":"UZ","VatikÃ¡n":"VA","SvatÃ½ Vincenc a Grenadiny":"VC","Venezuela":"VE","BritskÃ© PanenskÃ© ostrovy":"VG","AmerickÃ© PanenskÃ© ostrovy":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis a Futuna":"WF","Samoa":"WS","Jemen":"YE","Mayotte":"YT","JihoafrickÃ¡ republika":"ZA","Zambie":"ZM","Zimbabwe":"ZW","NeznÃ¡mÃ¡ oblast":"ZZ"};
ilib.data.ctrynames_da = {"Asien":"142","Centralasien":"143","Vestasien":"145","Europa":"150","Ãsteuropa":"151","Nordeuropa":"154","Vesteuropa":"155","Latinamerika":"419","Verden":"001","Afrika":"002","Nordamerika":"003","Sydamerika":"005","Oceanien":"009","Vestafrika":"011","Mellemamerika":"013","Ãstafrika":"014","Nordafrika":"015","Centralafrika":"017","Det sydlige Afrika":"018","Amerika":"019","Det nordlige Amerika":"021","Caribien":"029","Ãstasien":"030","Sydasien":"034","SydÃ¸stasien":"035","Sydeuropa":"039","Australasien":"053","Melanesien":"054","Mikronesien":"057","Polynesien":"061","AscensionÃ¸en":"AC","Andorra":"AD","Forenede Arabiske Emirater":"AE","Afghanistan":"AF","Antigua og Barbuda":"AG","Anguilla":"AI","Albanien":"AL","Armenien":"AM","Hollandske Antiller":"AN","Angola":"AO","Antarktis":"AQ","Argentina":"AR","Amerikansk Samoa":"AS","Ãstrig":"AT","Australien":"AU","Aruba":"AW","ÃlandsÃ¸erne":"AX","Aserbajdsjan":"AZ","Bosnien-Hercegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgien":"BE","Burkina Faso":"BF","Bulgarien":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","Saint BarthÃ©lemy":"BL","Bermuda":"BM","Brunei Darussalam":"BN","Bolivia":"BO","Nederlandske antiller":"BQ","Brasilien":"BR","Bahamas":"BS","Bhutan":"BT","BouvetÃ¸":"BV","Botswana":"BW","Hviderusland":"BY","Belize":"BZ","Canada":"CA","CocosÃ¸erne":"CC","Congo-Kinshasa":"CD","Centralafrikanske Republik":"CF","Congo â Brazzaville":"CG","Schweiz":"CH","CÃ´te dâIvoire":"CI","CookÃ¸erne":"CK","Chile":"CL","Cameroun":"CM","Kina":"CN","Colombia":"CO","ClippertonÃ¸en":"CP","Costa Rica":"CR","Cuba":"CU","Kap Verde":"CV","Curacao":"CW","JuleÃ¸en":"CX","Cypern":"CY","Tjekkiet":"CZ","Tyskland":"DE","Diego Garcia":"DG","Djibouti":"DJ","Danmark":"DK","Dominica":"DM","Den Dominikanske Republik":"DO","Algeriet":"DZ","Ceuta og Melilla":"EA","Ecuador":"EC","Estland":"EE","Egypten":"EG","Vestsahara":"EH","Eritrea":"ER","Spanien":"ES","Etiopien":"ET","Den EuropÃ¦iske Union":"EU","Finland":"FI","Fiji":"FJ","FalklandsÃ¸erne":"FK","Mikronesiens Forenede Stater":"FM","FÃ¦rÃ¸erne":"FO","Frankrig":"FR","Gabon":"GA","Storbritannien":"GB","Grenada":"GD","Georgien":"GE","Fransk Guyana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","GrÃ¸nland":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Ãkvatorialguinea":"GQ","GrÃ¦kenland":"GR","South Georgia og De Sydlige SandwichÃ¸er":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Hongkong SAR":"HK","Heard- og McDonald-Ã¸erne":"HM","Honduras":"HN","Kroatien":"HR","Haiti":"HT","Ungarn":"HU","Kanariske Ã¸er":"IC","Indonesien":"ID","Irland":"IE","Israel":"IL","Isle of Man":"IM","Indien":"IN","Det Britiske Territorium i Det Indiske Ocean":"IO","Irak":"IQ","Iran":"IR","Island":"IS","Italien":"IT","Jersey":"JE","Jamaica":"JM","Jordan":"JO","Japan":"JP","Kenya":"KE","Kirgisistan":"KG","Cambodja":"KH","Kiribati":"KI","Comorerne":"KM","Saint Kitts og Nevis":"KN","Nordkorea":"KP","Sydkorea":"KR","Kuwait":"KW","CaymanÃ¸erne":"KY","Kasakhstan":"KZ","Laos":"LA","Libanon":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Litauen":"LT","Luxembourg":"LU","Letland":"LV","Libyen":"LY","Marokko":"MA","Monaco":"MC","Moldova":"MD","Montenegro":"ME","Saint Martin":"MF","Madagaskar":"MG","MarshallÃ¸erne":"MH","Makedonien":"MK","Mali":"ML","Myanmar [Burma]":"MM","Mongoliet":"MN","Macao SAR":"MO","Nordmarianerne":"MP","Martinique":"MQ","Mauretanien":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldiverne":"MV","Malawi":"MW","Mexico":"MX","Malaysia":"MY","Mozambique":"MZ","Namibia":"NA","Ny Caledonien":"NC","Niger":"NE","NorfolkÃ¸en":"NF","Nigeria":"NG","Nicaragua":"NI","Holland":"NL","Norge":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","New Zealand":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Fransk Polynesien":"PF","Papua Ny Guinea":"PG","Filippinerne":"PH","Pakistan":"PK","Polen":"PL","Saint Pierre og Miquelon":"PM","Pitcairn":"PN","Puerto Rico":"PR","De palÃ¦stinensiske omrÃ¥der":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Ydre Oceanien":"QO","Reunion":"RE","RumÃ¦nien":"RO","Serbien":"RS","Rusland":"RU","Rwanda":"RW","Saudi-Arabien":"SA","SalomonÃ¸erne":"SB","Seychellerne":"SC","Sudan":"SD","Sverige":"SE","Singapore":"SG","St. Helena":"SH","Slovenien":"SI","Svalbard og Jan Mayen":"SJ","Slovakiet":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Surinam":"SR","Sydsudan":"SS","Sao Tome og Principe":"ST","El Salvador":"SV","Sint Maarten":"SX","Syrien":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Turks- og CaicosÃ¸erne":"TC","Tchad":"TD","Franske Besiddelser i Det Sydlige Indiske Ocean":"TF","Togo":"TG","Thailand":"TH","Tadsjikistan":"TJ","Tokelau":"TK","Timor-Leste":"TL","Turkmenistan":"TM","Tunesien":"TN","Tonga":"TO","Tyrkiet":"TR","Trinidad og Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ukraine":"UA","Uganda":"UG","Amerikanske oversÃ¸iske Ã¸er":"UM","USA":"US","Uruguay":"UY","Usbekistan":"UZ","Vatikanstaten":"VA","St. Vincent og Grenadinerne":"VC","Venezuela":"VE","De britiske jomfruÃ¸er":"VG","De amerikanske jomfruÃ¸er":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis og Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","Sydafrika":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Ukendt omrÃ¥de":"ZZ"};
ilib.data.ctrynames_de = {"generated":false,"albanien":"AL","algerien":"DZ","amerikanisch-samoa":"AS","antigua und barbuda":"AG","argentinien":"AR","armenien":"AM","ascension":"SH","australien":"AU","Ã¶sterreich":"AT","aserbaidschan":"AZ","britische jungferninseln":"VG","bangladesch":"BD","belgien":"BE","bolivien":"BO","bosnien und herzegowina":"BA","botsuana":"BW","brasilien":"BR","britisches territorium im indischen ozean":"IO","bulgarien":"BG","kambodscha":"KH","kamerun":"CM","kap verde":"CV","kaimaninseln":"KY","zentralafrikanische republik":"CF","tschad":"TD","kolumbien":"CO","komoren":"KM","cookinseln":"CK","kroatien":"HR","kuba":"CU","zypern":"CY","tschechische republik":"CZ","cÃ´te dâivoire":"CI","dominikanische republik":"DO","kongo, demokratische volksrepublik":"CD","kongo, demokratische republik":"CD","dÃ¤nemark":"DK","dschibuti":"DJ","osttimor":"TL","Ã¤gypten":"EG","Ã¤quatorialguinea":"GQ","estland":"EE","Ã¤thiopien":"ET","mazedonien, ehemalige jugoslawische republik":"MK","falklandinseln":"FK","fÃ¤rÃ¶er":"FO","mikronesien":"FM","fidschi":"FJ","finnland":"FI","frankreich":"FR","franzÃ¶sisch-guayana":"GF","franzÃ¶sisch-polynesien":"PF","gabun":"GA","deutschland":"DE","griechenland":"GR","grÃ¶nland":"GL","hongkong":"HK","ungarn":"HU","island":"IS","indien":"IN","indonesien":"ID","irak":"IQ","irland":"IE","italien":"IT","jamaika":"JM","jordanien":"JO","kenia":"KE","kirgisistan":"KG","lettland":"LV","libanon":"LB","libyen":"LY","litauen":"LT","luxemburg":"LU","madagaskar":"MG","malediven":"MV","marianen":"MP","marshallinseln":"MH","martinique":"MQ","mauretanien":"MR","mexiko":"MX","moldau":"MD","mongolei":"MN","marokko":"MA","mosambik":"MZ","niederlande":"NL","niederlÃ¤ndische antillen":"AN","neukaledonien":"NC","neuseeland":"NZ","norfolkinseln":"NF","nordkorea":"KP","nÃ¶rdliche marianen":"MP","norwegen":"NO","palÃ¤stinensische autonomiebehÃ¶rde":"PS","papua-neuguinea":"PG","china, volksrepublik":"CN","philippinen":"PH","polen":"PL","katar":"QA","china, republik":"TW","irland, republik":"IE","rumÃ¤nien":"RO","russland":"RU","ruanda":"RW","st. helena":"SH","st. kitts und nevis":"KN","st. lucia":"LC","saint-pierre und miquelon":"PM","saint-vincent":"VC","st. vincent und die grenadinen":"VC","saudi-arabien":"SA","serbien":"RS","seychellen":"SC","singapur":"SG","slowakei":"SK","slowenien":"SI","salomoninseln":"SB","sÃ¼dafrika":"ZA","sÃ¼dkorea":"KR","spanien":"ES","surinam":"SR","swasiland":"SZ","schweden":"SE","schweiz":"CH","syrien":"SY","sÃ£o tomÃ© und prÃ­ncipe":"ST","tadschikistan":"TJ","tansania":"TZ","bahamas":"BS","gambia":"GM","turks- und caicosinseln":"TC","amerikanische jungferninseln":"VI","trinidad und tobago":"TT","tunesien":"TN","tÃ¼rkei":"TR","vae":"AE","vereinigte arabische emirate":"AE","groÃbritannien":"GB","usbekistan":"UZ","vatikanstadt":"VA","wallis und futuna":"WF","jemen":"YE","sambia":"ZM","simbabwe":"ZW","afghanistan":"AF","Ã¥landinseln":"AX","andorra":"AD","angola":"AO","anguilla":"AI","antigua":"AG","arabien":"SA","aruba":"AW","bahrain":"BH","barbados":"BB","barbuda":"AG","belarus":"BY","belize":"BZ","benin":"BJ","bermuda":"BM","bhutan":"BT","bolivarische republik venezuela":"VE","bolivien, plurinationaler staat":"BO","bosnien":"BA","bouvetinsel":"BV","britische territorien im indischen ozean":"IO","brunei":"BN","brunei darussalam":"BN","burkina faso":"BF","burundi":"BI","caicosinseln":"TC","kanada":"CA","chile":"CL","china":"CN","weihnachtsinsel":"CX","kokosinseln (keelinginseln)":"CC","kokos- und keelinginseln":"CC","kokosinseln":"CC","kongo":"CD","costa rica":"CR","demokratische republik kongo":"CD","demokratische volksrepublik korea":"KP","dominica":"DM","kdvr":"KP","dubai":"AE","ecuador":"EC","el salvador":"SV","england":"GB","eritrea":"ER","ehemalige jugoslawische republik mazedonien":"MK","fÃ¶derierte staaten von mikronesien":"FM","franzÃ¶sische sÃ¼d- und antarktisgebiete":"TF","futuna":"WF","georgien":"GE","ghana":"GH","gibraltar":"GI","grenada":"GD","grenadinen":"VC","guadeloupe":"GP","guam":"GU","guatemala":"GT","guernsey":"GG","guinea":"GN","guinea-bissau":"GW","guyana":"GY","haiti":"HT","heard und mcdonaldinseln":"HM","heardinsel":"HM","herzegowina":"BA","holland":"NL","heiliger stuhl":"VA","honduras":"HN","iran":"IR","iran, islamische republik":"IR","islamische republik iran":"IR","isle of man":"IM","israel":"IL","elfenbeinkÃ¼ste":"CI","jan mayen":"SJ","japan":"JP","jersey":"JE","kasachstan":"KZ","kiribati":"KI","korea":"KR","korea, demokatrische volksrepublik":"KP","korea, republik":"KR","kuwait":"KW","laos, demokratische volksrepublik":"LA","laos":"LA","lesotho":"LS","liberia":"LR","libysch-arabische volks-dschamahirija":"LY","liechtenstein":"LI","macau":"MO","mazedonien":"MK","malawi":"MW","malaysia":"MY","mali":"ML","malta":"MT","malwinen":"FK","mauritius":"MU","mayotte":"YT","mcdonaldinseln":"HM","mikronesien, fÃ¶derierte staaten von":"FM","miquelon":"PM","moldau, republik":"MD","monaco":"MC","montenegro":"ME","montserrat":"MS","myanmar":"MM","namibia":"NA","nauru":"NR","nepal":"NP","nevis":"KN","nicaragua":"NI","niger":"NE","nigeria":"NG","palÃ¤stinensische gebiete":"PS","oman":"OM","china, vr":"CN","pakistan":"PK","palau":"PW","palÃ¤stina":"PS","panama":"PA","paraguay":"PY","peru":"PE","pitcairn":"PN","plurinationaler staat bolivien":"BO","polynesien":"PF","portugal":"PT","vrc":"CN","prÃ­ncipe":"ST","puerto rico":"PR","republik korea":"KR","republik moldau":"MD","singapur, republik":"SG","rÃ©union":"RE","russische fÃ¶deration":"RU","st. barthÃ©lemy":"BL","st. barts":"BL","st. helena, ascension und tristan da cunha":"SH","st. kitts":"KN","st. martin":"MF","st. pierre":"PM","st. pierre und miquelon":"PM","st. vincent":"VC","samoa":"WS","san marino":"SM","sÃ£o tomÃ©":"ST","schottland":"GB","senegal":"SN","sierra leone":"SL","salomonen":"SB","somalia":"SO","sÃ¼dgeorgien":"GS","sÃ¼dgeorgien und die sÃ¼dlichen sandwichinseln":"GS","sÃ¼dliche sandwichinseln":"GS","sri lanka":"LK","st. bartholomÃ¤us":"BL","sudan":"SD","svalbard":"SJ","svalbard und jan mayen":"SJ","arabische republik syrien":"SY","taiwan":"TW","tansania, vereinigte republik":"TZ","thailand":"TH","timor-leste":"TL","tobago":"TT","togo":"TG","tokelau":"TK","tonga":"TO","trinidad":"TT","tristan da cunha":"SH","turkmenistan":"TM","turksinseln":"TC","tuvalu":"TV","v.a.e.":"AE","vk":"GB","usa":"US","uganda":"UG","ukraine":"UA","vereinigtes kÃ¶nigreich":"GB","vereinigte republik tansania":"TZ","vereinigte staaten":"US","vereinigte staaten von amerika":"US","uruguay":"UY","vanuatu":"VU","vatikan":"VA","venezuela":"VE","venezuela, bolivarische republik":"VE","vietnam":"VN","jungferninseln":"VI","jungferninseln, britische":"VG","jungferninseln, amerikanische":"VI","wales":"GB","wallis":"WF","westsahara":"EH","Ã©ire":"IE","Ascension":"AC","Andorra":"AD","Vereinigte Arabische Emirate":"AE","Afghanistan":"AF","Antigua und Barbuda":"AG","Anguilla":"AI","Albanien":"AL","Armenien":"AM","NiederlÃ¤ndische Antillen":"AN","Angola":"AO","Antarktis":"AQ","Argentinien":"AR","Amerikanisch-Samoa":"AS","Ãsterreich":"AT","Australien":"AU","Aruba":"AW","Alandinseln":"AX","Aserbaidschan":"AZ","Bosnien und Herzegowina":"BA","Barbados":"BB","Bangladesch":"BD","Belgien":"BE","Burkina Faso":"BF","Bulgarien":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","St. BarthÃ©lemy":"BL","Bermuda":"BM","Brunei Darussalam":"BN","Bolivien":"BO","Karibische Niederlande":"BQ","Brasilien":"BR","Bahamas":"BS","Bhutan":"BT","Bouvetinsel":"BV","Botsuana":"BW","Belarus":"BY","Belize":"BZ","Kanada":"CA","Kokosinseln":"CC","Kongo-Kinshasa":"CD","Zentralafrikanische Republik":"CF","Kongo-Brazzaville":"CG","Schweiz":"CH","CÃ´te dâIvoire":"CI","Cookinseln":"CK","Chile":"CL","Kamerun":"CM","China":"CN","Kolumbien":"CO","Clipperton-Insel":"CP","Costa Rica":"CR","Kuba":"CU","Kap Verde":"CV","CuraÃ§ao":"CW","Weihnachtsinsel":"CX","Zypern":"CY","Tschechische Republik":"CZ","Deutschland":"DE","Diego Garcia":"DG","Dschibuti":"DJ","DÃ¤nemark":"DK","Dominica":"DM","Dominikanische Republik":"DO","Algerien":"DZ","Ceuta und Melilla":"EA","Ecuador":"EC","Estland":"EE","Ãgypten":"EG","Westsahara":"EH","Eritrea":"ER","Spanien":"ES","Ãthiopien":"ET","EuropÃ¤ische Union":"EU","Finnland":"FI","Fidschi":"FJ","Falklandinseln":"FK","Mikronesien":"FM","FÃ¤rÃ¶er":"FO","Frankreich":"FR","Gabun":"GA","Vereinigtes KÃ¶nigreich":"GB","Grenada":"GD","Georgien":"GE","FranzÃ¶sisch-Guayana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","GrÃ¶nland":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Ãquatorialguinea":"GQ","Griechenland":"GR","SÃ¼dgeorgien und die SÃ¼dlichen Sandwichinseln":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Sonderverwaltungszone Hongkong":"HK","Heard- und McDonald-Inseln":"HM","Honduras":"HN","Kroatien":"HR","Haiti":"HT","Ungarn":"HU","Kanarische Inseln":"IC","Indonesien":"ID","Irland":"IE","Israel":"IL","Isle of Man":"IM","Indien":"IN","Britisches Territorium im Indischen Ozean":"IO","Irak":"IQ","Iran":"IR","Island":"IS","Italien":"IT","Jersey":"JE","Jamaika":"JM","Jordanien":"JO","Japan":"JP","Kenia":"KE","Kirgisistan":"KG","Kambodscha":"KH","Kiribati":"KI","Komoren":"KM","St. Kitts und Nevis":"KN","Demokratische Volksrepublik Korea":"KP","Republik Korea":"KR","Kuwait":"KW","Kaimaninseln":"KY","Kasachstan":"KZ","Laos":"LA","Libanon":"LB","St. Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Litauen":"LT","Luxemburg":"LU","Lettland":"LV","Libyen":"LY","Marokko":"MA","Monaco":"MC","Republik Moldau":"MD","Montenegro":"ME","St. Martin":"MF","Madagaskar":"MG","Marshallinseln":"MH","Mazedonien":"MK","Mali":"ML","Myanmar":"MM","Mongolei":"MN","Sonderverwaltungszone Macao":"MO","NÃ¶rdliche Marianen":"MP","Martinique":"MQ","Mauretanien":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Malediven":"MV","Malawi":"MW","Mexiko":"MX","Malaysia":"MY","Mosambik":"MZ","Namibia":"NA","Neukaledonien":"NC","Niger":"NE","Norfolkinsel":"NF","Nigeria":"NG","Nicaragua":"NI","Niederlande":"NL","Norwegen":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Neuseeland":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","FranzÃ¶sisch-Polynesien":"PF","Papua-Neuguinea":"PG","Philippinen":"PH","Pakistan":"PK","Polen":"PL","St. Pierre und Miquelon":"PM","Pitcairninseln":"PN","Puerto Rico":"PR","PalÃ¤stinensische Autonomiegebiete":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Katar":"QA","ÃuÃeres Ozeanien":"QO","RÃ©union":"RE","RumÃ¤nien":"RO","Serbien":"RS","Russische FÃ¶deration":"RU","Ruanda":"RW","Saudi-Arabien":"SA","Salomonen":"SB","Seychellen":"SC","Sudan":"SD","Schweden":"SE","Singapur":"SG","St. Helena":"SH","Slowenien":"SI","Svalbard und Jan Mayen":"SJ","Slowakei":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Suriname":"SR","SÃ¼dsudan":"SS","SÃ£o TomÃ© und PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Syrien":"SY","Swasiland":"SZ","Tristan da Cunha":"TA","Turks- und Caicosinseln":"TC","Tschad":"TD","FranzÃ¶sische SÃ¼d- und Antarktisgebiete":"TF","Togo":"TG","Thailand":"TH","Tadschikistan":"TJ","Tokelau":"TK","Osttimor":"TL","Turkmenistan":"TM","Tunesien":"TN","Tonga":"TO","TÃ¼rkei":"TR","Trinidad und Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tansania":"TZ","Ukraine":"UA","Uganda":"UG","Amerikanisch-Ozeanien":"UM","Vereinigte Staaten":"US","Uruguay":"UY","Usbekistan":"UZ","Vatikanstadt":"VA","St. Vincent und die Grenadinen":"VC","Venezuela":"VE","Britische Jungferninseln":"VG","Amerikanische Jungferninseln":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis und Futuna":"WF","Samoa":"WS","Jemen":"YE","Mayotte":"YT","SÃ¼dafrika":"ZA","Sambia":"ZM","Simbabwe":"ZW","Unbekannte Region":"ZZ","Asien":"142","Zentralasien":"143","Westasien":"145","Europa":"150","Osteuropa":"151","Nordeuropa":"154","Westeuropa":"155","Lateinamerika":"419","Welt":"001","Afrika":"002","Nordamerika":"003","SÃ¼damerika":"005","Ozeanien":"009","Westafrika":"011","Mittelamerika":"013","Ostafrika":"014","Nordafrika":"015","Zentralafrika":"017","SÃ¼dliches Afrika":"018","Amerika":"019","NÃ¶rdliches Amerika":"021","Karibik":"029","Ostasien":"030","SÃ¼dasien":"034","SÃ¼dostasien":"035","SÃ¼deuropa":"039","Australien und Neuseeland":"053","Melanesien":"054","Mikronesisches Inselgebiet":"057","Polynesien":"061"};
ilib.data.ctrynames_de_CH = {"Bangladesh":"BD","Brunei":"BN","Botswana":"BW","Weissrussland":"BY","Kapverden":"CV","Djibouti":"DJ","Grossbritannien":"GB","Marshall-Inseln":"MH","Ãusseres Ozeanien":"QO","Rwanda":"RW","Salomon-Inseln":"SB","Sao TomÃ© und Principe":"ST","Zimbabwe":"ZW"};
ilib.data.ctrynames_el = {"ÎÏÎ¯Î±":"142","ÎÎµÎ½ÏÏÎ¹ÎºÎ® ÎÏÎ¯Î±":"143","ÎÏÏÎ¹ÎºÎ® ÎÏÎ¯Î±":"145","ÎÏÏÏÏÎ·":"150","ÎÎ½Î±ÏÎ¿Î»Î¹ÎºÎ® ÎÏÏÏÏÎ·":"151","ÎÏÏÎµÎ¹Î± ÎÏÏÏÏÎ·":"154","ÎÏÏÎ¹ÎºÎ® ÎÏÏÏÏÎ·":"155","ÎÎ±ÏÎ¹Î½Î¹ÎºÎ® ÎÎ¼ÎµÏÎ¹ÎºÎ®":"419","ÎÏÏÎ¼Î¿Ï":"001","ÎÏÏÎ¹ÎºÎ®":"002","ÎÏÏÎµÎ¹Î± ÎÎ¼ÎµÏÎ¹ÎºÎ®":"003","ÎÏÏÎ¹Î± ÎÎ¼ÎµÏÎ¹ÎºÎ®":"005","Î©ÎºÎµÎ±Î½Î¯Î±":"009","ÎÏÏÎ¹ÎºÎ® ÎÏÏÎ¹ÎºÎ®":"011","ÎÎµÎ½ÏÏÎ¹ÎºÎ® ÎÎ¼ÎµÏÎ¹ÎºÎ®":"013","ÎÎ½Î±ÏÎ¿Î»Î¹ÎºÎ® ÎÏÏÎ¹ÎºÎ®":"014","ÎÏÏÎµÎ¹Î± ÎÏÏÎ¹ÎºÎ®":"015","ÎÎ­ÏÎ· ÎÏÏÎ¹ÎºÎ®":"017","ÎÏÏÎ¹Î¿Ï ÎÏÏÎ¹ÎºÎ®":"018","ÎÎ¼ÎµÏÎ¹ÎºÎ®":"019","ÎÏÏÎµÎ¹Î¿Ï ÎÎ¼ÎµÏÎ¹ÎºÎ®":"021","ÎÎ±ÏÎ±ÏÎ²Î¹ÎºÎ®":"029","ÎÎ½Î±ÏÎ¿Î»Î¹ÎºÎ® ÎÏÎ¯Î±":"030","ÎÏÏÎ¹Î± ÎÏÎ¯Î±":"034","ÎÎ¿ÏÎ¹Î¿Î±Î½Î±ÏÎ¿Î»Î¹ÎºÎ® ÎÏÎ¯Î±":"035","ÎÏÏÎ¹Î± ÎÏÏÏÏÎ·":"039","ÎÏÏÏÏÎ±Î»Î±ÏÎ¯Î±":"053","ÎÎµÎ»Î±Î½Î·ÏÎ¯Î±":"054","Î ÎµÏÎ¹Î¿ÏÎ® ÎÎ¹ÎºÏÎ¿Î½Î·ÏÎ¯Î±Ï":"057","Î Î¿Î»ÏÎ½Î·ÏÎ¯Î±":"061","ÎÎ®ÏÎ¿Ï ÎÏÎµÎ½ÏÎ¹ÏÎ½":"AC","ÎÎ½Î´ÏÏÎ±":"AD","ÎÎ½ÏÎ¼Î­Î½Î± ÎÏÎ±Î²Î¹ÎºÎ¬ ÎÎ¼Î¹ÏÎ¬ÏÎ±":"AE","ÎÏÎ³Î±Î½Î¹ÏÏÎ¬Î½":"AF","ÎÎ½ÏÎ¯Î³ÎºÎ¿ÏÎ± ÎºÎ±Î¹ ÎÏÎ±ÏÎ¼ÏÎ¿ÏÎ½ÏÎ±":"AG","ÎÎ½Î³ÎºÎ¿ÏÎ¯Î»Î±":"AI","ÎÎ»Î²Î±Î½Î¯Î±":"AL","ÎÏÎ¼ÎµÎ½Î¯Î±":"AM","ÎÎ»Î»Î±Î½Î´Î¹ÎºÎ­Ï ÎÎ½ÏÎ¯Î»Î»ÎµÏ":"AN","ÎÎ½Î³ÎºÏÎ»Î±":"AO","ÎÎ½ÏÎ±ÏÎºÏÎ¹ÎºÎ®":"AQ","ÎÏÎ³ÎµÎ½ÏÎ¹Î½Î®":"AR","ÎÎ¼ÎµÏÎ¹ÎºÎ±Î½Î¹ÎºÎ® Î£Î±Î¼ÏÎ±":"AS","ÎÏÏÏÏÎ¯Î±":"AT","ÎÏÏÏÏÎ±Î»Î¯Î±":"AU","ÎÏÎ¿ÏÎ¼ÏÎ±":"AW","ÎÎ·ÏÎ¹Î¬ ÎÎ»Î±Î½Ï":"AX","ÎÎ¶ÎµÏÎ¼ÏÎ±ÏÏÎ¶Î¬Î½":"AZ","ÎÎ¿ÏÎ½Î¯Î± - ÎÏÎ¶ÎµÎ³Î¿Î²Î¯Î½Î·":"BA","ÎÏÎ±ÏÎ¼ÏÎ¬Î½ÏÎ¿Ï":"BB","ÎÏÎ±Î½Î³ÎºÎ»Î±Î½ÏÎ­Ï":"BD","ÎÎ­Î»Î³Î¹Î¿":"BE","ÎÏÎ¿ÏÏÎºÎ¯Î½Î± Î¦Î¬ÏÎ¿":"BF","ÎÎ¿ÏÎ»Î³Î±ÏÎ¯Î±":"BG","ÎÏÎ±ÏÏÎ­Î¹Î½":"BH","ÎÏÎ¿ÏÏÎ¿ÏÎ½ÏÎ¹":"BI","ÎÏÎµÎ½Î¯Î½":"BJ","ÎÎ³Î¹Î¿Ï ÎÎ±ÏÎ¸Î¿Î»Î¿Î¼Î±Î¯Î¿Ï":"BL","ÎÎµÏÎ¼Î¿ÏÎ´ÎµÏ":"BM","ÎÏÏÎ¿ÏÎ½Î­Î¹":"BN","ÎÎ¿Î»Î¹Î²Î¯Î±":"BO","ÎÎ»Î»Î±Î½Î´Î¯Î± ÎÎ±ÏÎ±ÏÎ²Î¹ÎºÎ®Ï":"BQ","ÎÏÎ±Î¶Î¹Î»Î¯Î±":"BR","ÎÏÎ±ÏÎ¬Î¼ÎµÏ":"BS","ÎÏÎ¿ÏÏÎ¬Î½":"BT","ÎÎ®ÏÎ¿Ï ÎÏÎ¿ÏÎ²Î­":"BV","ÎÏÎ¿ÏÏÎ¿ÏÎ¬Î½Î±":"BW","ÎÎµÏÎºÎ¿ÏÏÏÎ¯Î±":"BY","ÎÏÎµÎ»Î¯ÏÎµ":"BZ","ÎÎ±Î½Î±Î´Î¬Ï":"CA","ÎÎ·ÏÎ¹Î¬ ÎÏÎºÎ¿Ï [ÎÎ¯Î»Î¹Î½Î³Îº]":"CC","ÎÎ¿Î½Î³ÎºÏ - ÎÎ¹Î½ÏÎ¬ÏÎ±":"CD","ÎÎµÎ½ÏÏÎ¿Î±ÏÏÎ¹ÎºÎ±Î½Î¹ÎºÎ® ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î±":"CF","ÎÎ¿Î½Î³ÎºÏ - ÎÏÏÎ±Î¶Î±Î²Î¯Î»":"CG","ÎÎ»Î²ÎµÏÎ¯Î±":"CH","ÎÎºÏÎ® ÎÎ»ÎµÏÎ±Î½ÏÎ¿ÏÏÎ¿Ï":"CI","ÎÎ®ÏÎ¿Î¹ ÎÎ¿ÏÎº":"CK","Î§Î¹Î»Î®":"CL","ÎÎ±Î¼ÎµÏÎ¿ÏÎ½":"CM","ÎÎ¯Î½Î±":"CN","ÎÎ¿Î»Î¿Î¼Î²Î¯Î±":"CO","ÎÎ®ÏÎ¿Ï ÎÎ»Î¯ÏÎµÏÏÎ¿Î½":"CP","ÎÏÏÏÎ± Î¡Î¯ÎºÎ±":"CR","ÎÎ¿ÏÎ²Î±":"CU","Î ÏÎ¬ÏÎ¹Î½Î¿ ÎÎºÏÏÏÎ®ÏÎ¹Î¿":"CV","ÎÎ¿ÏÏÎ±ÏÎ¬Î¿":"CW","ÎÎ®ÏÎ¿Ï Î§ÏÎ¹ÏÏÎ¿ÏÎ³Î­Î½Î½ÏÎ½":"CX","ÎÏÏÏÎ¿Ï":"CY","Î¤ÏÎµÏÎ¯Î±":"CZ","ÎÎµÏÎ¼Î±Î½Î¯Î±":"DE","ÎÏÎ¹Î­Î³ÎºÎ¿ ÎÎºÎ±ÏÏÎ¯Î±":"DG","Î¤Î¶Î¹Î¼ÏÎ¿ÏÏÎ¯":"DJ","ÎÎ±Î½Î¯Î±":"DK","ÎÏÎ¿Î¼Î¯Î½Î¹ÎºÎ±":"DM","ÎÎ¿Î¼Î¹Î½Î¹ÎºÎ±Î½Î® ÎÎ·Î¼Î¿ÎºÏÎ±ÏÎ¯Î±":"DO","ÎÎ»Î³ÎµÏÎ¯Î±":"DZ","ÎÎµÎ¿ÏÏÎ± ÎºÎ±Î¹ ÎÎµÎ»Î¯Î»Î±":"EA","ÎÎºÎ¿ÏÎ±Î´ÏÏ":"EC","ÎÏÎ¸Î¿Î½Î¯Î±":"EE","ÎÎ¯Î³ÏÏÏÎ¿Ï":"EG","ÎÏÏÎ¹ÎºÎ® Î£Î±ÏÎ¬ÏÎ±":"EH","ÎÏÏÎ¸ÏÎ±Î¯Î±":"ER","ÎÏÏÎ±Î½Î¯Î±":"ES","ÎÎ¹Î¸Î¹Î¿ÏÎ¯Î±":"ET","ÎÏÏÏÏÎ±ÏÎºÎ® ÎÎ½ÏÏÎ·":"EU","Î¦Î¹Î½Î»Î±Î½Î´Î¯Î±":"FI","Î¦Î¯ÏÎ¶Î¹":"FJ","ÎÎ®ÏÎ¿Î¹ Î¦ÏÎºÎ»Î±Î½Ï":"FK","ÎÎ¹ÎºÏÎ¿Î½Î·ÏÎ¯Î±":"FM","ÎÎ®ÏÎ¿Î¹ Î¦ÎµÏÏÎµ":"FO","ÎÎ±Î»Î»Î¯Î±":"FR","ÎÎºÎ±Î¼ÏÏÎ½":"GA","ÎÎ½ÏÎ¼Î­Î½Î¿ ÎÎ±ÏÎ¯Î»ÎµÎ¹Î¿":"GB","ÎÏÎµÎ½Î¬Î´Î±":"GD","ÎÎµÏÏÎ³Î¯Î±":"GE","ÎÎ±Î»Î»Î¹ÎºÎ® ÎÎ¿ÏÎ¹Î¬Î½Î±":"GF","ÎÎºÎµÏÎ½ÏÎ­Î¹":"GG","ÎÎºÎ¬Î½Î±":"GH","ÎÎ¹Î²ÏÎ±Î»ÏÎ¬Ï":"GI","ÎÏÎ¿Î¹Î»Î±Î½Î´Î¯Î±":"GL","ÎÎºÎ¬Î¼ÏÎ¹Î±":"GM","ÎÎ¿ÏÎ¹Î½Î­Î±":"GN","ÎÎ¿ÏÎ±Î´ÎµÎ»Î¿ÏÏÎ·":"GP","ÎÏÎ·Î¼ÎµÏÎ¹Î½Î® ÎÎ¿ÏÎ¹Î½Î­Î±":"GQ","ÎÎ»Î»Î¬Î´Î±":"GR","ÎÏÏÎ¹Î± ÎÎµÏÏÎ³Î¯Î± ÎºÎ±Î¹ ÎÏÏÎ¹ÎµÏ ÎÎ®ÏÎ¿Î¹ Î£Î¬Î½ÏÎ¿ÏÎ¹ÏÏ":"GS","ÎÎ¿ÏÎ±ÏÎµÎ¼Î¬Î»Î±":"GT","ÎÎºÎ¿ÏÎ¬Î¼":"GU","ÎÎ¿ÏÎ¹Î½Î­Î±-ÎÏÎ¹ÏÎ¬Î¿Ï":"GW","ÎÎ¿ÏÎ¹Î¬Î½Î±":"GY","Î§Î¿Î½Î³Îº ÎÎ¿Î½Î³Îº ÎÎÎ  ÎÎ¯Î½Î±Ï":"HK","ÎÎ®ÏÎ¿Î¹ Î§ÎµÏÎ½Ï ÎºÎ±Î¹ ÎÎ±ÎºÎ½ÏÏÎ½Î±Î»Î½Ï":"HM","ÎÎ½Î´Î¿ÏÏÎ±":"HN","ÎÏÎ¿Î±ÏÎ¯Î±":"HR","ÎÏÏÎ®":"HT","ÎÏÎ³Î³Î±ÏÎ¯Î±":"HU","ÎÎ±Î½Î¬ÏÎ¹Î¿Î¹ ÎÎ®ÏÎ¿Î¹":"IC","ÎÎ½Î´Î¿Î½Î·ÏÎ¯Î±":"ID","ÎÏÎ»Î±Î½Î´Î¯Î±":"IE","ÎÏÏÎ±Î®Î»":"IL","ÎÎ®ÏÎ¿Ï ÎÎ±Î½":"IM","ÎÎ½Î´Î¯Î±":"IN","ÎÏÎµÏÎ±Î½Î¹ÎºÎ¬ ÎÎ´Î¬ÏÎ· ÎÎ½Î´Î¹ÎºÎ¿Ï Î©ÎºÎµÎ±Î½Î¿Ï":"IO","ÎÏÎ¬Îº":"IQ","ÎÏÎ¬Î½":"IR","ÎÏÎ»Î±Î½Î´Î¯Î±":"IS","ÎÏÎ±Î»Î¯Î±":"IT","Î¥ÎµÏÏÎ­Î·":"JE","Î¤Î¶Î±Î¼Î¬Î¹ÎºÎ±":"JM","ÎÎ¿ÏÎ´Î±Î½Î¯Î±":"JO","ÎÎ±ÏÏÎ½Î¯Î±":"JP","ÎÎ­Î½ÏÎ±":"KE","ÎÎ¹ÏÎ³Î¹ÏÏÎ¬Î½":"KG","ÎÎ±Î¼ÏÏÏÎ¶Î·":"KH","ÎÎ¹ÏÎ¹Î¼ÏÎ¬ÏÎ¹":"KI","ÎÎ¿Î¼ÏÏÎ¿Ï":"KM","Î£Î±Î¹Î½Ï ÎÎ¹ÏÏ ÎºÎ±Î¹ ÎÎ­Î²Î¹Ï":"KN","ÎÏÏÎµÎ¹Î± ÎÎ¿ÏÎ­Î±":"KP","ÎÏÏÎ¹Î± ÎÎ¿ÏÎ­Î±":"KR","ÎÎ¿ÏÎ²Î­Î¹Ï":"KW","ÎÎ®ÏÎ¿Î¹ ÎÎ­Î¹Î¼Î±Î½":"KY","ÎÎ±Î¶Î±ÎºÏÏÎ¬Î½":"KZ","ÎÎ¬Î¿Ï":"LA","ÎÎ¯Î²Î±Î½Î¿Ï":"LB","ÎÎ³Î¯Î± ÎÎ¿ÏÎºÎ¯Î±":"LC","ÎÎ¹ÏÏÎµÎ½ÏÏÎ¬Î¹Î½":"LI","Î£ÏÎ¹ ÎÎ¬Î½ÎºÎ±":"LK","ÎÎ¹Î²ÎµÏÎ¯Î±":"LR","ÎÎµÏÏÏÎ¿":"LS","ÎÎ¹Î¸Î¿ÏÎ±Î½Î¯Î±":"LT","ÎÎ¿ÏÎ¾ÎµÎ¼Î²Î¿ÏÏÎ³Î¿":"LU","ÎÎµÏÎ¿Î½Î¯Î±":"LV","ÎÎ¹Î²ÏÎ·":"LY","ÎÎ±ÏÏÎºÎ¿":"MA","ÎÎ¿Î½Î±ÎºÏ":"MC","ÎÎ¿Î»Î´Î±Î²Î¯Î±":"MD","ÎÎ±ÏÏÎ¿Î²Î¿ÏÎ½Î¹Î¿":"ME","ÎÎ³Î¹Î¿Ï ÎÎ±ÏÏÎ¯Î½Î¿Ï (ÎÎ±Î»Î»Î¹ÎºÏ ÏÎ¼Î®Î¼Î±)":"MF","ÎÎ±Î´Î±Î³Î±ÏÎºÎ¬ÏÎ·":"MG","ÎÎ®ÏÎ¿Î¹ ÎÎ¬ÏÏÎ±Î»":"MH","Î ÎÎÎ":"MK","ÎÎ¬Î»Î¹":"ML","ÎÎ¹Î±Î½Î¼Î¬Ï [ÎÏÎ¿ÏÏÎ¼Î±]":"MM","ÎÎ¿Î³Î³Î¿Î»Î¯Î±":"MN","ÎÎ±ÎºÎ¬Î¿ ÎÎÎ  ÎÎ¯Î½Î±Ï":"MO","ÎÏÏÎµÎ¹ÎµÏ ÎÎ±ÏÎ¹Î¬Î½ÎµÏ ÎÎ®ÏÎ¿Î¹":"MP","ÎÎ±ÏÏÎ¹Î½Î¯ÎºÎ±":"MQ","ÎÎ±ÏÏÎ¹ÏÎ±Î½Î¯Î±":"MR","ÎÎ¿Î½ÏÎµÏÎ¬Ï":"MS","ÎÎ¬Î»ÏÎ±":"MT","ÎÎ±ÏÏÎ¯ÎºÎ¹Î¿Ï":"MU","ÎÎ±Î»Î´Î¯Î²ÎµÏ":"MV","ÎÎ±Î»Î¬Î¿ÏÎ¹":"MW","ÎÎµÎ¾Î¹ÎºÏ":"MX","ÎÎ±Î»Î±Î¹ÏÎ¯Î±":"MY","ÎÎ¿Î¶Î±Î¼Î²Î¯ÎºÎ·":"MZ","ÎÎ±Î¼Î¯Î¼ÏÎ¹Î±":"NA","ÎÎ­Î± ÎÎ±Î»Î·Î´Î¿Î½Î¯Î±":"NC","ÎÎ¯Î³Î·ÏÎ±Ï":"NE","ÎÎ®ÏÎ¿Ï ÎÏÏÏÎ¿Î»Îº":"NF","ÎÎ¹Î³Î·ÏÎ¯Î±":"NG","ÎÎ¹ÎºÎ±ÏÎ¬Î³Î¿ÏÎ±":"NI","ÎÎ»Î»Î±Î½Î´Î¯Î±":"NL","ÎÎ¿ÏÎ²Î·Î³Î¯Î±":"NO","ÎÎµÏÎ¬Î»":"NP","ÎÎ±Î¿ÏÏÎ¿Ï":"NR","ÎÎ¹Î¿ÏÎµ":"NU","ÎÎ­Î± ÎÎ·Î»Î±Î½Î´Î¯Î±":"NZ","ÎÎ¼Î¬Î½":"OM","Î Î±Î½Î±Î¼Î¬Ï":"PA","Î ÎµÏÎ¿Ï":"PE","ÎÎ±Î»Î»Î¹ÎºÎ® Î Î¿Î»ÏÎ½Î·ÏÎ¯Î±":"PF","Î Î±ÏÎ¿ÏÎ± ÎÎ­Î± ÎÎ¿ÏÎ¹Î½Î­Î±":"PG","Î¦Î¹Î»Î¹ÏÏÎ¯Î½ÎµÏ":"PH","Î Î±ÎºÎ¹ÏÏÎ¬Î½":"PK","Î Î¿Î»ÏÎ½Î¯Î±":"PL","Î£Î±Î¹Î½Ï Î Î¹Î­Ï ÎºÎ±Î¹ ÎÎ¹ÎºÎµÎ»ÏÎ½":"PM","ÎÎ·ÏÎ¹Î¬ Î Î¯ÏÎºÎµÏÎ½":"PN","Î Î¿ÏÎ­ÏÏÎ¿ Î¡Î¯ÎºÎ¿":"PR","Î Î±Î»Î±Î¹ÏÏÎ¹Î½Î¹Î±ÎºÎ¬ ÎÎ´Î¬ÏÎ·":"PS","Î Î¿ÏÏÎ¿Î³Î±Î»Î¯Î±":"PT","Î Î±Î»Î¬Î¿Ï":"PW","Î Î±ÏÎ±Î³Î¿ÏÎ¬Î·":"PY","ÎÎ±ÏÎ¬Ï":"QA","Î ÎµÏÎ¹ÏÎµÏÎµÎ¹Î±ÎºÎ® Î©ÎºÎµÎ±Î½Î¯Î±":"QO","Î¡ÎµÏÎ½Î¹ÏÎ½":"RE","Î¡Î¿ÏÎ¼Î±Î½Î¯Î±":"RO","Î£ÎµÏÎ²Î¯Î±":"RS","Î¡ÏÏÎ¯Î±":"RU","Î¡Î¿ÏÎ¬Î½ÏÎ±":"RW","Î£Î±Î¿ÏÎ´Î¹ÎºÎ® ÎÏÎ±Î²Î¯Î±":"SA","ÎÎ®ÏÎ¿Î¹ Î£Î¿Î»Î¿Î¼ÏÎ½ÏÎ¿Ï":"SB","Î£ÎµÏÏÎ­Î»Î»ÎµÏ":"SC","Î£Î¿ÏÎ´Î¬Î½":"SD","Î£Î¿ÏÎ·Î´Î¯Î±":"SE","Î£Î¹Î³ÎºÎ±ÏÎ¿ÏÏÎ·":"SG","ÎÎ³Î¯Î± ÎÎ»Î­Î½Î·":"SH","Î£Î»Î¿Î²ÎµÎ½Î¯Î±":"SI","ÎÎ·ÏÎ¹Î¬ Î£Î²Î¬Î»Î¼ÏÎ±ÏÎ½Ï ÎºÎ±Î¹ ÎÎ¹Î±Î½ ÎÎ¬Î³ÎµÎ½":"SJ","Î£Î»Î¿Î²Î±ÎºÎ¯Î±":"SK","Î£Î¹Î­ÏÎ± ÎÎµÏÎ½Îµ":"SL","ÎÎ³Î¹Î¿Ï ÎÎ±ÏÎ¯Î½Î¿Ï":"SM","Î£ÎµÎ½ÎµÎ³Î¬Î»Î·":"SN","Î£Î¿Î¼Î±Î»Î¯Î±":"SO","Î£Î¿ÏÏÎ¹Î½Î¬Î¼":"SR","ÎÏÏÎ¹Î¿ Î£Î¿ÏÎ´Î¬Î½":"SS","Î£Î¬Î¿ Î¤Î¿Î¼Î­ ÎºÎ±Î¹ Î ÏÎ¯Î½ÏÎ¹ÏÎµ":"ST","ÎÎ» Î£Î±Î»Î²Î±Î´ÏÏ":"SV","ÎÎ³Î¹Î¿Ï ÎÎ±ÏÏÎ¯Î½Î¿Ï (ÎÎ»Î»Î±Î½Î´Î¹ÎºÏ ÏÎ¼Î®Î¼Î±)":"SX","Î£ÏÏÎ¯Î±":"SY","ÎÎ¿ÏÎ±Î¶Î·Î»Î¬Î½Î´Î·":"SZ","Î¤ÏÎ¹ÏÏÎ¬Î½ Î½ÏÎ± ÎÎ¿ÏÎ½Î¹Î±":"TA","ÎÎ®ÏÎ¿Î¹ Î¤ÎµÏÎºÏ ÎºÎ±Î¹ ÎÎ¬Î¹ÎºÎ¿Ï":"TC","Î¤ÏÎ±Î½Ï":"TD","ÎÎ±Î»Î»Î¹ÎºÎ¬ ÎÏÏÎ¹Î± ÎÎ´Î¬ÏÎ·":"TF","Î¤ÏÎ³ÎºÎ¿":"TG","Î¤Î±ÏÎ»Î¬Î½Î´Î·":"TH","Î¤Î±ÏÎ¶Î¹ÎºÎ¹ÏÏÎ¬Î½":"TJ","Î¤Î¿ÎºÎµÎ»Î¬Î¿Ï":"TK","Î¤Î¹Î¼ÏÏ-ÎÎ­ÏÏÎµ":"TL","Î¤Î¿ÏÏÎºÎ¼ÎµÎ½Î¹ÏÏÎ¬Î½":"TM","Î¤ÏÎ½Î·ÏÎ¯Î±":"TN","Î¤ÏÎ½Î³ÎºÎ±":"TO","Î¤Î¿ÏÏÎºÎ¯Î±":"TR","Î¤ÏÎ¹Î½Î¹Î½ÏÎ¬Î½Ï ÎºÎ±Î¹ Î¤Î¿Î¼ÏÎ¬Î³ÎºÎ¿":"TT","Î¤Î¿ÏÎ²Î±Î»Î¿Ï":"TV","Î¤Î±ÏÎ²Î¬Î½":"TW","Î¤Î±Î½Î¶Î±Î½Î¯Î±":"TZ","ÎÏÎºÏÎ±Î½Î¯Î±":"UA","ÎÏÎ³ÎºÎ¬Î½ÏÎ±":"UG","ÎÏÎ¿Î¼Î±ÎºÏÏÏÎ¼Î­Î½ÎµÏ ÎÎ·ÏÎ¯Î´ÎµÏ Î.Î .Î.":"UM","ÎÎ½ÏÎ¼Î­Î½ÎµÏ Î Î¿Î»Î¹ÏÎµÎ¯ÎµÏ ÏÎ·Ï ÎÎ¼ÎµÏÎ¹ÎºÎ®Ï":"US","ÎÏÏÎ¿ÏÎ³Î¿ÏÎ¬Î·":"UY","ÎÏÎ¶Î¼ÏÎµÎºÎ¹ÏÏÎ¬Î½":"UZ","ÎÎ±ÏÎ¹ÎºÎ±Î½Ï":"VA","ÎÎ³Î¹Î¿Ï ÎÎ¹ÎºÎ­Î½ÏÎ¹Î¿Ï ÎºÎ±Î¹ ÎÏÎµÎ½Î±Î´Î¯Î½ÎµÏ":"VC","ÎÎµÎ½ÎµÎ¶Î¿ÏÎ­Î»Î±":"VE","ÎÏÎµÏÎ±Î½Î¹ÎºÎ­Ï Î Î±ÏÎ¸Î­Î½Î¿Î¹ ÎÎ®ÏÎ¿Î¹":"VG","ÎÎ¼ÎµÏÎ¹ÎºÎ±Î½Î¹ÎºÎ­Ï Î Î±ÏÎ¸Î­Î½Î¿Î¹ ÎÎ®ÏÎ¿Î¹":"VI","ÎÎ¹ÎµÏÎ½Î¬Î¼":"VN","ÎÎ±Î½Î¿ÏÎ¬ÏÎ¿Ï":"VU","ÎÏÏÎ»Î¹Ï ÎºÎ±Î¹ Î¦Î¿ÏÏÎ¿ÏÎ½Î±":"WF","Î£Î±Î¼ÏÎ±":"WS","Î¥ÎµÎ¼Î­Î½Î·":"YE","ÎÎ±Î³Î¹ÏÏ":"YT","ÎÏÏÎ¹Î± ÎÏÏÎ¹ÎºÎ®":"ZA","ÎÎ¬Î¼ÏÎ¹Î±":"ZM","ÎÎ¹Î¼ÏÎ¬Î¼ÏÎ¿ÏÎµ":"ZW","ÎÎ³Î½ÏÏÏÎ· ÏÎµÏÎ¹Î¿ÏÎ®":"ZZ"};
ilib.data.ctrynames_en = {"generated":false,"Antigua & Barbuda":"AG","Arabia":"SA","Bosnia & Herzegovina":"BA","BVI":"VG","Cape Verde Islands":"CV","Cocos & Keeling Islands":"CC","Cocos (Keeling) Islands":"CC","Congo, Democratic Republic of the":"CD","Democratic Republic of the Congo":"CD","DPRK":"KP","Dubai":"AE","East Timor":"TL","England":"GB","Falklands":"FK","Heard Island & McDonald Islands":"HM","Occupied Palestinian Territory":"PS","P. R. China":"CN","P. R. of China":"CN","P.R. of China":"CN","Palestinian Territory":"PS","People's Republic of China":"CN","Polynesia":"061","PR china":"CN","PRC":"CN","Republic of China":"TW","Republic of Ireland":"IE","Republic of Singapore":"SG","Saint Barts":"BL","Saint Helena, Ascension & Tristan da Cunha":"SH","Saint Kitts & Nevis":"KN","Saint Pierre & Miquelon":"PM","Saint Vincent & the Grenadines":"VC","Sao Tome & Principe":"ST","Scotland":"GB","Solomons":"SB","South Georgia & the South Sandwich Islands":"GS","St Barthelemy":"BL","St BarthÃ©lemy":"BL","St Barts":"BL","St Helena":"SH","St Helena, Ascension & Tristan da Cunha":"SH","St Helena, Ascension and Tristan da Cunha":"SH","St Kitts":"KN","St Kitts & Nevis":"KN","St Kitts and Nevis":"KN","St Lucia":"LC","St Martin":"MF","St Pierre":"PM","St Pierre & Miquelon":"PM","St Pierre and Miquelon":"PM","St Vincent":"VC","St Vincent & the Grenadines":"VC","St Vincent and the Grenadines":"VC","St. Barts":"BL","St. Helena, Ascension & Tristan da Cunha":"SH","St. Kitts & Nevis":"KN","St. Pierre & Miquelon":"PM","St. Vincent & the Grenadines":"VC","Svalbard & Jan Mayen":"SJ","SÃ©nÃ©gal":"SN","The Bahamas":"BS","The Czech Republic":"CZ","The Grenadines":"VC","The Netherlands":"NL","The Philippines":"PH","The Republic of Singapore":"SG","The South Sandwich Islands":"GS","The Sudan":"SD","The US Virgin Islands":"VI","Trinidad & Tobago":"TT","Turks & Caicos Islands":"TC","Vatican City":"VA","Vatican City State":"VA","Virgin Islands":"VI","Wales":"GB","Wallis & Futuna":"WF","Ãire":"IE","Ascension Island":"AC","Andorra":"AD","United Arab Emirates":"AE","Afghanistan":"AF","Antigua and Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Netherlands Antilles":"AN","Angola":"AO","Antarctica":"AQ","Argentina":"AR","American Samoa":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Ãland Islands":"AX","Azerbaijan":"AZ","Bosnia and Herzegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgium":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","Saint BarthÃ©lemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Caribbean Netherlands":"BQ","Brazil":"BR","Bahamas":"BS","Bhutan":"BT","Bouvet Island":"BV","Botswana":"BW","Belarus":"BY","Belize":"BZ","Canada":"CA","Cocos [Keeling] Islands":"CC","Congo - Kinshasa":"CD","Central African Republic":"CF","Congo - Brazzaville":"CG","Switzerland":"CH","CÃ´te dâIvoire":"CI","Cook Islands":"CK","Chile":"CL","Cameroon":"CM","China":"CN","Colombia":"CO","Clipperton Island":"CP","Costa Rica":"CR","Cuba":"CU","Cape Verde":"CV","CuraÃ§ao":"CW","Christmas Island":"CX","Cyprus":"CY","Czech Republic":"CZ","Germany":"DE","Diego Garcia":"DG","Djibouti":"DJ","Denmark":"DK","Dominica":"DM","Dominican Republic":"DO","Algeria":"DZ","Ceuta and Melilla":"EA","Ecuador":"EC","Estonia":"EE","Egypt":"EG","Western Sahara":"EH","Eritrea":"ER","Spain":"ES","Ethiopia":"ET","European Union":"EU","Finland":"FI","Fiji":"FJ","Falkland Islands":"FK","Micronesia":"FM","Faroe Islands":"FO","France":"FR","Gabon":"GA","United Kingdom":"GB","Grenada":"GD","Georgia":"GE","French Guiana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","Greenland":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Equatorial Guinea":"GQ","Greece":"GR","South Georgia and the South Sandwich Islands":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Hong Kong SAR China":"HK","Heard Island and McDonald Islands":"HM","Honduras":"HN","Croatia":"HR","Haiti":"HT","Hungary":"HU","Canary Islands":"IC","Indonesia":"ID","Ireland":"IE","Israel":"IL","Isle of Man":"IM","India":"IN","British Indian Ocean Territory":"IO","Iraq":"IQ","Iran":"IR","Iceland":"IS","Italy":"IT","Jersey":"JE","Jamaica":"JM","Jordan":"JO","Japan":"JP","Kenya":"KE","Kyrgyzstan":"KG","Cambodia":"KH","Kiribati":"KI","Comoros":"KM","Saint Kitts and Nevis":"KN","North Korea":"KP","South Korea":"KR","Kuwait":"KW","Cayman Islands":"KY","Kazakhstan":"KZ","Laos":"LA","Lebanon":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Lithuania":"LT","Luxembourg":"LU","Latvia":"LV","Libya":"LY","Morocco":"MA","Monaco":"MC","Moldova":"MD","Montenegro":"ME","Saint Martin":"MF","Madagascar":"MG","Marshall Islands":"MH","Macedonia":"MK","Mali":"ML","Myanmar [Burma]":"MM","Mongolia":"MN","Macau SAR China":"MO","Northern Mariana Islands":"MP","Martinique":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldives":"MV","Malawi":"MW","Mexico":"MX","Malaysia":"MY","Mozambique":"MZ","Namibia":"NA","New Caledonia":"NC","Niger":"NE","Norfolk Island":"NF","Nigeria":"NG","Nicaragua":"NI","Netherlands":"NL","Norway":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","New Zealand":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","French Polynesia":"PF","Papua New Guinea":"PG","Philippines":"PH","Pakistan":"PK","Poland":"PL","Saint Pierre and Miquelon":"PM","Pitcairn Islands":"PN","Puerto Rico":"PR","Palestinian Territories":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Outlying Oceania":"QO","RÃ©union":"RE","Romania":"RO","Serbia":"RS","Russia":"RU","Rwanda":"RW","Saudi Arabia":"SA","Solomon Islands":"SB","Seychelles":"SC","Sudan":"SD","Sweden":"SE","Singapore":"SG","Saint Helena":"SH","Slovenia":"SI","Svalbard and Jan Mayen":"SJ","Slovakia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Suriname":"SR","South Sudan":"SS","SÃ£o TomÃ© and PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Syria":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Turks and Caicos Islands":"TC","Chad":"TD","French Southern Territories":"TF","Togo":"TG","Thailand":"TH","Tajikistan":"TJ","Tokelau":"TK","Timor-Leste":"TL","Turkmenistan":"TM","Tunisia":"TN","Tonga":"TO","Turkey":"TR","Trinidad and Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ukraine":"UA","Uganda":"UG","U.S. Minor Outlying Islands":"UM","United States":"US","Uruguay":"UY","Uzbekistan":"UZ","Saint Vincent and the Grenadines":"VC","Venezuela":"VE","British Virgin Islands":"VG","U.S. Virgin Islands":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis and Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","South Africa":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Unknown Region":"ZZ","Asia":"142","Central Asia":"143","Western Asia":"145","Europe":"150","Eastern Europe":"151","Northern Europe":"154","Western Europe":"155","Latin America":"419","World":"001","Africa":"002","North America":"003","South America":"005","Oceania":"009","Western Africa":"011","Central America":"013","Eastern Africa":"014","Northern Africa":"015","Middle Africa":"017","Southern Africa":"018","Americas":"019","Northern America":"021","Caribbean":"029","Eastern Asia":"030","Southern Asia":"034","South-Eastern Asia":"035","Southern Europe":"039","Australasia":"053","Melanesia":"054","Micronesian Region":"057","U.S. Outlying Islands":"UM"};
ilib.data.ctrynames_es = {"generated":false,"afganistÃ¡n":"AF","argelia":"DZ","samoa americana":"AS","anguila":"AI","antigua y barbuda":"AG","ascensiÃ³n":"SH","azerbaiyÃ¡n":"AZ","islas vÃ­rgenes britÃ¡nicas":"VG","bahrein":"BH","bielorrusia":"BY","bÃ©lgica":"BE","belice":"BZ","benÃ­n":"BJ","bermudas":"BM","butÃ¡n":"BT","bosnia y herzegovina":"BA","botsuana":"BW","brasil":"BR","territorio britÃ¡nico del ocÃ©ano Ã­ndico":"IO","camboya":"KH","camerÃºn":"CM","cabo verde":"CV","caimÃ¡n":"KY","repÃºblica centroafricana":"CF","comoras":"KM","islas cook":"CK","croacia":"HR","chipre":"CY","repÃºblica checa":"CZ","costa de marfil":"CI","repÃºblica dominicana":"DO","rdc":"CD","repÃºblica democrÃ¡tica del congo":"CD","dinamarca":"DK","yibuti":"DJ","timor oriental":"TL","egipto":"EG","guinea ecuatorial":"GQ","etiopÃ­a":"ET","antigua repÃºblica yugoslava de macedonia":"MK","islas malvinas":"FK","malvinas":"FK","islas feroe":"FO","estados federados de micronesia":"FM","fiyi":"FJ","finlandia":"FI","francia":"FR","guayana francesa":"GF","polinesia francesa":"PF","gabÃ³n":"GA","alemania":"DE","grecia":"GR","groenlandia":"GL","granada":"GD","guadalupe":"GP","haitÃ­":"HT","hungrÃ­a":"HU","islandia":"IS","irÃ¡n":"IR","irak":"IQ","irlanda":"IE","italia":"IT","japÃ³n":"JP","jordania":"JO","kenia":"KE","kirguistÃ¡n":"KG","letonia":"LV","lÃ­bano":"LB","libia":"LY","lituania":"LT","luxemburgo":"LU","malasia":"MY","maldivas":"MV","malÃ­":"ML","islas marshall":"MH","martinica":"MQ","mauricio":"MU","mÃ©xico":"MX","moldavia":"MD","mÃ³naco":"MC","marruecos":"MA","paÃ­ses bajos":"NL","antillas holandesas":"AN","nueva caledonia":"NC","nueva zelanda":"NZ","nÃ­ger":"NE","isla norfolk":"NF","corea del norte":"KP","islas marianas del norte":"MP","noruega":"NO","omÃ¡n":"OM","pakistÃ¡n":"PK","palaos":"PW","autoridad palestina":"PS","panamÃ¡":"PA","papua nueva guinea":"PG","repÃºblica popular china":"CN","perÃº":"PE","filipinas":"PH","polonia":"PL","repÃºblica de china":"TW","repÃºblica de irlanda":"IE","rumania":"RO","rusia":"RU","ruanda":"RW","reuniÃ³n":"RE","santa helena":"SH","san cristÃ³bal y nieves":"KN","santa lucÃ­a":"LC","san pedro y miquelÃ³n":"PM","saint-vincent":"VC","san vicente y las granadinas":"VC","arabia saudita":"SA","sierra leona":"SL","singapur":"SG","eslovaquia":"SK","eslovenia":"SI","islas salomÃ³n":"SB","sudÃ¡frica":"ZA","corea del sur":"KR","espaÃ±a":"ES","santa lucia":"LC","sudÃ¡n":"SD","surinam":"SR","swazilandia":"SZ","suecia":"SE","suiza":"CH","siria":"SY","santo tomÃ© y prÃ­ncipe":"ST","taiwÃ¡n":"TW","tayikistÃ¡n":"TJ","tailandia":"TH","las bahamas":"BS","gambia":"GM","trinidad y tobago":"TT","tÃºnez":"TN","turquÃ­a":"TR","turkmenistÃ¡n":"TM","eau":"AE","ucrania":"UA","emiratos Ã¡rabes unidos":"AE","reino unido":"GB","uzbekistÃ¡n":"UZ","ciudad del vaticano":"VA","wallis y futuna":"WF","islas de Ã¥land":"AX","albania":"AL","andorra":"AD","angola":"AO","antigua":"AG","arabia":"SA","argentina":"AR","armenia":"AM","aruba":"AW","australia":"AU","austria":"AT","ivb":"VG","bahamas":"BS","bangladesh":"BD","barbados":"BB","barbuda":"AG","repÃºblica bolivariana de venezuela":"VE","bolivia":"BO","bolivia, estado plurinacional de":"BO","bosnia":"BA","isla bouvet":"BV","brunei":"BN","brunei darussalam":"BN","bulgaria":"BG","burkina faso":"BF","burundi":"BI","rca":"CF","islas caicos":"TC","canadÃ¡":"CA","islas caimÃ¡n":"KY","chad":"TD","chile":"CL","china":"CN","isla christmas":"CX","islas cocos y keeling":"CC","islas cocos":"CC","colombia":"CO","congo":"CD","congo, repÃºblica democrÃ¡tica del":"CD","costa rica":"CR","cuba":"CU","repÃºblica popular democrÃ¡tica de corea":"KP","dominica":"DM","dprk":"KP","rd":"DO","dubai":"AE","ecuador":"EC","el salvador":"SV","inglaterra":"GB","eritrea":"ER","estonia":"EE","feroe":"FO","tierras australes de francia":"TF","futuna":"WF","georgia":"GE","ghana":"GH","gibraltar":"GI","gran bretaÃ±a":"GB","granadinas":"VC","guam":"GU","guatemala":"GT","guernsey":"GG","guinea":"GN","guinea-bissau":"GW","guyana":"GY","islas heard y mcdonald":"HM","isla heard":"HM","herzegovina":"BA","holanda":"NL","santa sede":"VA","honduras":"HN","hong kong":"HK","india":"IN","indonesia":"ID","irÃ¡n, repÃºblica islÃ¡mica de":"IR","repÃºblica islÃ¡mica de irÃ¡n":"IR","isla de man":"IM","israel":"IL","jamaica":"JM","jan mayen":"SJ","jersey":"JE","kazajistÃ¡n":"KZ","kiribati":"KI","corea":"KR","corea, repÃºblica popular democrÃ¡tica de":"KP","corea, repÃºblica de":"KR","kuwait":"KW","repÃºblica democrÃ¡tica popular lao":"LA","laos":"LA","lesoto":"LS","liberia":"LR","jamahiriya Ã¡rabe libia":"LY","liechtenstein":"LI","macao":"MO","macedonia":"MK","macedonia, antigua repÃºblica yugoslava de":"MK","macedonia, la antigua repÃºblica yugoslava de":"MK","madagascar":"MG","malaui":"MW","mali":"ML","malta":"MT","marianas":"MP","marshalls":"MH","mauritania":"MR","mayotte":"YT","islas mcdonald":"HM","micronesia":"FM","micronesia, estados federados de":"FM","miquelÃ³n":"PM","moldovia":"MD","moldovia, repÃºblica de":"MD","mongolia":"MN","montenegro":"ME","montserrat":"MS","mozambique":"MZ","myanmar":"MM","namibia":"NA","nauru":"NR","nepal":"NP","nieves":"KN","nicaragua":"NI","nigeria":"NG","territorios ocupados palestinos":"PS","r. p. china":"CN","palestine":"PS","territorios palestinos":"PS","paraguay":"PY","pitcairn":"PN","estado plurinacional de bolivia":"BO","png":"PG","polinesia":"PF","portugal":"PT","rp china":"CN","r.p.c.":"CN","prÃ­ncipe":"ST","puerto rico":"PR","qatar":"QA","repÃºblica de corea":"KR","repÃºblica de moldovia":"MD","repÃºblica de singapur":"SG","federaciÃ³n rusa":"RU","saint barthÃ©lemy":"BL","san bartolomÃ©":"BL","santa helena, ascensiÃ³n y tristÃ¡n de acuÃ±a":"SH","san cristobal":"KN","san martÃ­n":"MF","san pedro":"PM","san vicente":"VC","samoa":"WS","san marino":"SM","santo tomÃ©":"ST","escocia":"GB","senegal":"SN","serbia":"RS","seychelles":"SC","somalia":"SO","georgias del sur":"GS","islas georgias del sur y sandwich del sur":"GS","islas sandwich del sur":"GS","sri lanka":"LK","st barthÃ©lemy":"BL","st. barthÃ©lemy":"BL","s bartolomÃ©":"BL","sta. elena":"SH","sta elena, ascensiÃ³n y tristÃ¡n de acuÃ±a":"SH","s. cristÃ³bal":"KN","s cristÃ³bal y nieves":"KN","sta lucÃ­a":"LC","s. martÃ­n":"MF","s. vicente":"VC","s vicente y las granadinas":"VC","s. bartolomÃ©":"BL","svalbard":"SJ","svalbard y jan mayen":"SJ","repÃºblica Ã¡rabe siria":"SY","tanzania":"TZ","tanzania, repÃºblica unida de":"TZ","la repÃºblica democrÃ¡tica del congo":"CD","la antigua repÃºblica yugoslava de macedonia":"MK","las granadinas":"VC","islas sÃ¡ndwich del sur":"GS","islas vÃ­rgenes de ee.uu.":"VI","timor-leste":"TL","tobago":"TT","togo":"TG","tokelau":"TK","tonga":"TO","trinidad":"TT","tristÃ¡n de acuÃ±a":"SH","islas turcas y caicos":"TC","islas turcas":"TC","tuvalu":"TV","r.u.":"GB","ee.uu.":"US","uganda":"UG","ru":"GB","repÃºblica unida de tanzania":"TZ","estados unidos":"US","islas ultramarinas de estados unidos":"UM","estados unidos de amÃ©rica":"US","uruguay":"UY","usvi":"VI","vanuatu":"VU","vaticano":"VA","venezuela":"VE","venezuela, repÃºblica bolivariana de":"VE","vietnam":"VN","islas vÃ­rgenes":"VI","islas vÃ­rgenes, ee.uu.":"VI","gales":"GB","wallis":"WF","sahara occidental":"EH","yemen":"YE","zambia":"ZM","zimbabue":"ZW","Ã©ire":"IE","Isla de la AscensiÃ³n":"AC","Andorra":"AD","Emiratos Ãrabes Unidos":"AE","AfganistÃ¡n":"AF","Antigua y Barbuda":"AG","Anguila":"AI","Albania":"AL","Armenia":"AM","Antillas Neerlandesas":"AN","Angola":"AO","AntÃ¡rtida":"AQ","Argentina":"AR","Samoa Americana":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Islas Ãland":"AX","AzerbaiyÃ¡n":"AZ","Bosnia-Herzegovina":"BA","Barbados":"BB","Bangladesh":"BD","BÃ©lgica":"BE","Burkina Faso":"BF","Bulgaria":"BG","BahrÃ©in":"BH","Burundi":"BI","BenÃ­n":"BJ","San BartolomÃ©":"BL","Bermudas":"BM","BrunÃ©i":"BN","Bolivia":"BO","Caribe neerlandÃ©s":"BQ","Brasil":"BR","Bahamas":"BS","ButÃ¡n":"BT","Isla Bouvet":"BV","Botsuana":"BW","Bielorrusia":"BY","Belice":"BZ","CanadÃ¡":"CA","Islas Cocos":"CC","RepÃºblica DemocrÃ¡tica del Congo":"CD","RepÃºblica Centroafricana":"CF","Congo - Brazzaville":"CG","Suiza":"CH","Costa de Marfil":"CI","Islas Cook":"CK","Chile":"CL","CamerÃºn":"CM","China":"CN","Colombia":"CO","Isla Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","Cabo Verde":"CV","Curazao":"CW","Isla Christmas":"CX","Chipre":"CY","RepÃºblica Checa":"CZ","Alemania":"DE","Diego GarcÃ­a":"DG","Yibuti":"DJ","Dinamarca":"DK","Dominica":"DM","RepÃºblica Dominicana":"DO","Argelia":"DZ","Ceuta y Melilla":"EA","Ecuador":"EC","Estonia":"EE","Egipto":"EG","SÃ¡hara Occidental":"EH","Eritrea":"ER","EspaÃ±a":"ES","EtiopÃ­a":"ET","UniÃ³n Europea":"EU","Finlandia":"FI","Fiyi":"FJ","Islas Malvinas":"FK","Micronesia":"FM","Islas Feroe":"FO","Francia":"FR","GabÃ³n":"GA","Reino Unido":"GB","Granada":"GD","Georgia":"GE","Guayana Francesa":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","Groenlandia":"GL","Gambia":"GM","Guinea":"GN","Guadalupe":"GP","Guinea Ecuatorial":"GQ","Grecia":"GR","Islas Georgia del Sur y Sandwich del Sur":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","RegiÃ³n Administrativa Especial de Hong Kong de la RepÃºblica Popular China":"HK","Islas Heard y McDonald":"HM","Honduras":"HN","Croacia":"HR","HaitÃ­":"HT","HungrÃ­a":"HU","Islas Canarias":"IC","Indonesia":"ID","Irlanda":"IE","Israel":"IL","Isla de Man":"IM","India":"IN","Territorio BritÃ¡nico del OcÃ©ano Ãndico":"IO","Iraq":"IQ","IrÃ¡n":"IR","Islandia":"IS","Italia":"IT","Jersey":"JE","Jamaica":"JM","Jordania":"JO","JapÃ³n":"JP","Kenia":"KE","KirguistÃ¡n":"KG","Camboya":"KH","Kiribati":"KI","Comoras":"KM","San CristÃ³bal y Nieves":"KN","Corea del Norte":"KP","Corea del Sur":"KR","Kuwait":"KW","Islas CaimÃ¡n":"KY","KazajistÃ¡n":"KZ","Laos":"LA","LÃ­bano":"LB","Santa LucÃ­a":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesoto":"LS","Lituania":"LT","Luxemburgo":"LU","Letonia":"LV","Libia":"LY","Marruecos":"MA","MÃ³naco":"MC","Moldavia":"MD","Montenegro":"ME","San MartÃ­n":"MF","Madagascar":"MG","Islas Marshall":"MH","Macedonia":"MK","Mali":"ML","Myanmar [Birmania]":"MM","Mongolia":"MN","RegiÃ³n Administrativa Especial de Macao de la RepÃºblica Popular China":"MO","Islas Marianas del Norte":"MP","Martinica":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauricio":"MU","Maldivas":"MV","Malaui":"MW","MÃ©xico":"MX","Malasia":"MY","Mozambique":"MZ","Namibia":"NA","Nueva Caledonia":"NC","NÃ­ger":"NE","Isla Norfolk":"NF","Nigeria":"NG","Nicaragua":"NI","PaÃ­ses Bajos":"NL","Noruega":"NO","Nepal":"NP","Nauru":"NR","Isla Niue":"NU","Nueva Zelanda":"NZ","OmÃ¡n":"OM","PanamÃ¡":"PA","PerÃº":"PE","Polinesia Francesa":"PF","PapÃºa Nueva Guinea":"PG","Filipinas":"PH","PakistÃ¡n":"PK","Polonia":"PL","San Pedro y MiquelÃ³n":"PM","Islas Pitcairn":"PN","Puerto Rico":"PR","Territorios Palestinos":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Territorios alejados de OceanÃ­a":"QO","ReuniÃ³n":"RE","RumanÃ­a":"RO","Serbia":"RS","Rusia":"RU","Ruanda":"RW","Arabia SaudÃ­":"SA","Islas SalomÃ³n":"SB","Seychelles":"SC","SudÃ¡n":"SD","Suecia":"SE","Singapur":"SG","Santa Elena":"SH","Eslovenia":"SI","Svalbard y Jan Mayen":"SJ","Eslovaquia":"SK","Sierra Leona":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Surinam":"SR","SudÃ¡n del Sur":"SS","Santo TomÃ© y PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Siria":"SY","Suazilandia":"SZ","TristÃ¡n da Cunha":"TA","Islas Turcas y Caicos":"TC","Chad":"TD","Territorios Australes Franceses":"TF","Togo":"TG","Tailandia":"TH","TayikistÃ¡n":"TJ","Tokelau":"TK","Timor Oriental":"TL","TurkmenistÃ¡n":"TM","TÃºnez":"TN","Tonga":"TO","TurquÃ­a":"TR","Trinidad y Tobago":"TT","Tuvalu":"TV","TaiwÃ¡n":"TW","Tanzania":"TZ","Ucrania":"UA","Uganda":"UG","Islas menores alejadas de los Estados Unidos":"UM","Estados Unidos":"US","Uruguay":"UY","UzbekistÃ¡n":"UZ","Ciudad del Vaticano":"VA","San Vicente y las Granadinas":"VC","Venezuela":"VE","Islas VÃ­rgenes BritÃ¡nicas":"VG","Islas VÃ­rgenes de los Estados Unidos":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis y Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","SudÃ¡frica":"ZA","Zambia":"ZM","Zimbabue":"ZW","RegiÃ³n desconocida":"ZZ","Asia":"142","Asia central":"143","Asia occidental":"145","Europa":"150","Europa oriental":"151","Europa septentrional":"154","Europa occidental":"155","LatinoamÃ©rica":"419","Mundo":"001","Ãfrica":"002","AmÃ©rica del Norte":"003","SuramÃ©rica":"005","OceanÃ­a":"009","Ãfrica occidental":"011","CentroamÃ©rica":"013","Ãfrica oriental":"014","Ãfrica septentrional":"015","Ãfrica central":"017","Ãfrica meridional":"018","AmÃ©ricas":"019","NorteamÃ©rica":"021","Caribe":"029","Asia oriental":"030","Asia meridional":"034","Sudeste asiÃ¡tico":"035","Europa meridional":"039","Australasia":"053","Melanesia":"054","Micronesia [057]":"057","Polinesia":"061"};
ilib.data.ctrynames_es_ES = {"generated":false,"costa de marfil":"CI"};
ilib.data.ctrynames_et = {"Aasia":"142","Kesk-Aasia":"143","LÃ¤Ã¤ne-Aasia":"145","Euroopa":"150","Ida-Euroopa":"151","PÃµhja-Euroopa":"154","LÃ¤Ã¤ne-Euroopa":"155","Ladina-Ameerika":"419","maailm":"001","Aafrika":"002","PÃµhja-Ameerika":"003","LÃµuna-Ameerika":"005","Okeaania":"009","LÃ¤Ã¤ne-Aafrika":"011","Kesk-Ameerika":"013","Ida-Aafrika":"014","PÃµhja-Aafrika":"015","Kesk-Aafrika":"017","LÃµuna-Aafrika":"018","Ameerika maailmajagu":"019","Ameerika pÃµhjaosa":"021","Kariibi meri":"029","Ida-Aasia":"030","LÃµuna-Aasia":"034","Kagu-Aasia":"035","LÃµuna-Euroopa":"039","Australaasia":"053","Melaneesia":"054","Mikroneesia":"057","PolÃ¼neesia":"061","Ascensioni saar":"AC","Andorra":"AD","Araabia Ãhendemiraadid":"AE","Afganistan":"AF","Antigua ja Barbuda":"AG","Anguilla":"AI","Albaania":"AL","Armeenia":"AM","Hollandi Antillid":"AN","Angola":"AO","Antarktis":"AQ","Argentina":"AR","Ameerika Samoa":"AS","Austria":"AT","Austraalia":"AU","Aruba":"AW","Ahvenamaa":"AX","AserbaidÅ¾aan":"AZ","Bosnia ja Hertsegoviina":"BA","Barbados":"BB","Bangladesh":"BD","Belgia":"BE","Burkina Faso":"BF","Bulgaaria":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","Saint BarthÃ©lemy":"BL","Bermuda":"BM","Brunei":"BN","Boliivia":"BO","Hollandi Kariibi mere saared":"BQ","Brasiilia":"BR","Bahama":"BS","Bhutan":"BT","Bouvetâ saar":"BV","Botswana":"BW","Valgevene":"BY","Belize":"BZ","Kanada":"CA","Kookossaared":"CC","Kongo DV":"CD","Kesk-Aafrika Vabariik":"CF","Kongo-Brazzaville":"CG","Å veits":"CH","CÃ´te d'Ivoire":"CI","Cooki saared":"CK","TÅ¡iili":"CL","Kamerun":"CM","Hiina":"CN","Colombia":"CO","Clippertoni saar":"CP","Costa Rica":"CR","Kuuba":"CU","Roheneemesaared":"CV","CuraÃ§ao":"CW","JÃµulusaar":"CX","KÃ¼pros":"CY","TÅ¡ehhi":"CZ","Saksamaa":"DE","Diego Garcia":"DG","Djibouti":"DJ","Taani":"DK","Dominica":"DM","Dominikaani Vabariik":"DO","AlÅ¾eeria":"DZ","Ceuta ja Melilla":"EA","Ecuador":"EC","Eesti":"EE","Egiptus":"EG","LÃ¤Ã¤ne-Sahara":"EH","Eritrea":"ER","Hispaania":"ES","Etioopia":"ET","Euroopa Liit":"EU","Soome":"FI","FidÅ¾i":"FJ","Falklandi saared":"FK","Mikroneesia Liiduriigid":"FM","FÃ¤Ã¤ri saared":"FO","Prantsusmaa":"FR","Gabon":"GA","Suurbritannia":"GB","Grenada":"GD","Gruusia":"GE","Prantsuse Guajaana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","GrÃ¶Ã¶nimaa":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Ekvatoriaal-Guinea":"GQ","Kreeka":"GR","LÃµuna-Georgia ja LÃµuna-Sandwichi saared":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Hongkong - Hiina erihalduspiirkond":"HK","Heard ja McDonald saared":"HM","Honduras":"HN","Horvaatia":"HR","Haiti":"HT","Ungari":"HU","Kanaari saared":"IC","Indoneesia":"ID","Iirimaa":"IE","Iisrael":"IL","Mani saar":"IM","India":"IN","Briti India ookeani ala":"IO","Iraak":"IQ","Iraan":"IR","Island":"IS","Itaalia":"IT","Jersey":"JE","Jamaica":"JM","Jordaania":"JO","Jaapan":"JP","Kenya":"KE","KÃµrgÃµzstan":"KG","KambodÅ¾a":"KH","Kiribati":"KI","Komoorid":"KM","Saint Kitts ja Nevis":"KN","PÃµhja-Korea":"KP","LÃµuna-Korea":"KR","Kuveit":"KW","Kaimanisaared":"KY","Kasahstan":"KZ","Laos":"LA","Liibanon":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Libeeria":"LR","Lesotho":"LS","Leedu":"LT","Luksemburg":"LU","LÃ¤ti":"LV","LiibÃ¼a":"LY","Maroko":"MA","Monaco":"MC","Moldova":"MD","Montenegro":"ME","Saint Martin":"MF","Madagaskar":"MG","Marshalli saared":"MH","Makedoonia":"MK","Mali":"ML","Myanmar":"MM","Mongoolia":"MN","Macau - Hiina erihalduspiirkond":"MO","PÃµhja-Mariaanid":"MP","Martinique":"MQ","Mauritaania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldiivid":"MV","Malawi":"MW","Mehhiko":"MX","Malaisia":"MY","Mosambiik":"MZ","Namiibia":"NA","Uus-Kaledoonia":"NC","Niger":"NE","Norfolk":"NF","Nigeeria":"NG","Nicaragua":"NI","Holland":"NL","Norra":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Uus-Meremaa":"NZ","Omaan":"OM","Panama":"PA","Peruu":"PE","Prantsuse PolÃ¼neesia":"PF","Paapua Uus-Guinea":"PG","Filipiinid":"PH","Pakistan":"PK","Poola":"PL","Saint Pierre ja Miquelon":"PM","Pitcairn":"PN","Puerto Rico":"PR","Palestiina ala":"PS","Portugal":"PT","Belau":"PW","Paraguay":"PY","Katar":"QA","Okeaania hajasaared":"QO","RÃ©union":"RE","Rumeenia":"RO","Serbia":"RS","Venemaa":"RU","Rwanda":"RW","Saudi Araabia":"SA","Saalomoni Saared":"SB","SeiÅ¡ellid":"SC","Sudaan":"SD","Rootsi":"SE","Singapur":"SG","Saint Helena":"SH","Sloveenia":"SI","Svalbard ja Jan Mayen":"SJ","Slovakkia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somaalia":"SO","Suriname":"SR","LÃµuna-Sudaan":"SS","SÃ£o TomÃ© ja PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","SÃ¼Ã¼ria":"SY","Svaasimaa":"SZ","Tristan da Cunha":"TA","Turks ja Caicos":"TC","TÅ¡aad":"TD","Prantsuse LÃµunaalad":"TF","Togo":"TG","Tai":"TH","TadÅ¾ikistan":"TJ","Tokelau":"TK","Ida-Timor":"TL","TÃ¼rkmenistan":"TM","Tuneesia":"TN","Tonga":"TO","TÃ¼rgi":"TR","Trinidad ja Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tansaania":"TZ","Ukraina":"UA","Uganda":"UG","Ãhendriikide hajasaared":"UM","Ameerika Ãhendriigid":"US","Uruguay":"UY","Usbekistan":"UZ","Vatikan":"VA","Saint Vincent ja Grenadiinid":"VC","Venezuela":"VE","Briti Neitsisaared":"VG","USA Neitsisaared":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis ja Futuna":"WF","Samoa":"WS","Jeemen":"YE","Mayotte":"YT","LÃµuna-Aafrika Vabariik":"ZA","Sambia":"ZM","Zimbabwe":"ZW"};
ilib.data.ctrynames_fa = {"Ø¢Ø³ÛØ§":"142","Ø¢Ø³ÛØ§Û ÙØ±Ú©Ø²Û":"143","ØºØ±Ø¨ Ø¢Ø³ÛØ§":"145","Ø§Ø±ÙÙ¾Ø§":"150","Ø´Ø±Ù Ø§Ø±ÙÙ¾Ø§":"151","Ø´ÙØ§Ù Ø§Ø±ÙÙ¾Ø§":"154","ØºØ±Ø¨ Ø§Ø±ÙÙ¾Ø§":"155","Ø§ÙØ±ÛÚ©Ø§Û ÙØ§ØªÛÙ":"419","Ø¬ÙØ§Ù":"001","Ø§ÙØ±ÛÙØ§":"002","Ø§ÙØ±ÛÚ©Ø§Û Ø´ÙØ§ÙÛ":"003","Ø§ÙØ±ÛÚ©Ø§Û Ø¬ÙÙØ¨Û":"005","Ø§ÙÛØ§ÙÙØ³ÛÙ":"009","ØºØ±Ø¨ Ø§ÙØ±ÛÙØ§":"011","Ø§ÙØ±ÛÚ©Ø§Û ÙØ±Ú©Ø²Û":"013","Ø´Ø±Ù Ø§ÙØ±ÛÙØ§":"014","Ø´ÙØ§Ù Ø§ÙØ±ÛÙØ§":"015","ÙØ±Ú©Ø² Ø§ÙØ±ÛÙØ§":"017","Ø¬ÙÙØ¨ Ø§ÙØ±ÛÙØ§":"018","Ø§ÙØ±ÛÚ©Ø§":"019","Ø´ÙØ§Ù Ø§ÙØ±ÛÚ©Ø§":"021","Ú©Ø§Ø±Ø§Ø¦ÛØ¨":"029","Ø´Ø±Ù Ø¢Ø³ÛØ§":"030","Ø¬ÙÙØ¨ Ø¢Ø³ÛØ§":"034","Ø¬ÙÙØ¨ Ø´Ø±Ù Ø¢Ø³ÛØ§":"035","Ø¬ÙÙØ¨ Ø§Ø±ÙÙ¾Ø§":"039","Ø§Ø³ØªØ±Ø§ÙØ²Û":"053","ÙÙØ§ÙØ²Û":"054","ÙØ§Ø­ÛÙÙ ÙÛÚ©Ø±ÙÙØ²Û":"057","Ù¾ÙÛâÙØ²Û":"061","Ø¬Ø²Ø§ÛØ± Ø¢Ø³ÙØ³ÛÙÙ":"AC","Ø¢ÙØ¯ÙØ±Ø§":"AD","Ø§ÙØ§Ø±Ø§Øª ÙØªØ­Ø¯ÙÙ Ø¹Ø±Ø¨Û":"AE","Ø§ÙØºØ§ÙØ³ØªØ§Ù":"AF","Ø¢ÙØªÛÚ¯ÙØ§ Ù Ø¨Ø§Ø±Ø¨ÙØ¯Ø§":"AG","Ø¢ÙÚ¯ÛÙ":"AI","Ø¢ÙØ¨Ø§ÙÛ":"AL","Ø§Ø±ÙÙØ³ØªØ§Ù":"AM","Ø¢ÙØªÛÙ ÙÙÙØ¯":"AN","Ø¢ÙÚ¯ÙÙØ§":"AO","Ø¬ÙÙØ¨Ú¯Ø§Ù":"AQ","Ø¢Ø±ÚØ§ÙØªÛÙ":"AR","Ø³Ø§ÙÙØ§Û Ø§ÙØ±ÛÚ©Ø§":"AS","Ø§ØªØ±ÛØ´":"AT","Ø§Ø³ØªØ±Ø§ÙÛØ§":"AU","Ø¢Ø±ÙØ¨Ø§":"AW","Ø¬Ø²Ø§ÛØ± Ø¢ÙØ§ÙØ¯":"AX","Ø¬ÙÙÙØ±Û Ø¢Ø°Ø±Ø¨Ø§ÛØ¬Ø§Ù":"AZ","Ø¨ÙØ³ÙÛ Ù ÙØ±Ø²Ú¯ÙÛÙ":"BA","Ø¨Ø§Ø±Ø¨Ø§Ø¯ÙØ³":"BB","Ø¨ÙÚ¯ÙØ§Ø¯Ø´":"BD","Ø¨ÙÚÛÚ©":"BE","Ø¨ÙØ±Ú©ÛÙØ§ÙØ§Ø³Ù":"BF","Ø¨ÙØºØ§Ø±Ø³ØªØ§Ù":"BG","Ø¨Ø­Ø±ÛÙ":"BH","Ø¨ÙØ±ÙÙØ¯Û":"BI","Ø¨ÙÛÙ":"BJ","Ø³ÙØª Ø¨Ø§Ø±ØªÛÙÙÛ":"BL","Ø¨Ø±ÙÙØ¯Ø§":"BM","Ø¨Ø±ÙÙØ¦Û":"BN","Ø¨ÙÙÛÙÛ":"BO","Ú©Ø§Ø±Ø§Ø¦ÛØ¨ ÙÙÙØ¯":"BQ","Ø¨Ø±Ø²ÛÙ":"BR","Ø¨Ø§ÙØ§ÙØ§":"BS","Ø¨ÙØªØ§Ù":"BT","Ø¬Ø²ÛØ±Ù Ø¨ÙÙØª":"BV","Ø¨ÙØªØ³ÙØ§ÙØ§":"BW","Ø¨ÛÙÙØ±ÙØ³Û":"BY","Ø¨ÙÛØ²":"BZ","Ú©Ø§ÙØ§Ø¯Ø§":"CA","Ø¬Ø²Ø§ÛØ± Ú©ÙÚ©ÙØ³ [Ú©ÛÙÛÙÚ¯]":"CC","Ú©ÙÚ¯Ù - Ú©ÛÙØ´Ø§Ø³Ø§":"CD","Ø¬ÙÙÙØ±Û Ø§ÙØ±ÛÙØ§Û ÙØ±Ú©Ø²Û":"CF","Ú©ÙÚ¯Ù - Ø¨Ø±Ø§Ø²ÙÛÙ":"CG","Ø³ÙØ¦ÛØ³":"CH","Ø³Ø§Ø­Ù Ø¹Ø§Ø¬":"CI","Ø¬Ø²Ø§ÛØ± Ú©ÙÚ©":"CK","Ø´ÛÙÛ":"CL","Ú©Ø§ÙØ±ÙÙ":"CM","ÚÛÙ":"CN","Ú©ÙÙØ¨ÛØ§":"CO","Ø¬Ø²Ø§ÛØ± Ú©ÙÛÙ¾Ø±ØªÙÙ":"CP","Ú©Ø§Ø³ØªØ§Ø±ÛÚ©Ø§":"CR","Ú©ÙØ¨Ø§":"CU","Ú©ÛÙ¾âÙØ±Ø¯":"CV","Ú©ÙØ±Ø§Ú©Ø§Ø¦Ù":"CW","Ø¬Ø²ÛØ±ÙÙ Ú©Ø±ÛØ³ÙØ³":"CX","ÙØ¨Ø±Ø³":"CY","Ø¬ÙÙÙØ±Û ÚÚ©":"CZ","Ø¢ÙÙØ§Ù":"DE","Ø¯ÛÙâÚ¯Ù Ú¯Ø§Ø±Ø³ÛØ§":"DG","Ø¬ÛØ¨ÙØªÛ":"DJ","Ø¯Ø§ÙÙØ§Ø±Ú©":"DK","Ø¯ÙÙÛÙÛÚ©":"DM","Ø¬ÙÙÙØ±Û Ø¯ÙÙÛÙÛÚ©Ù":"DO","Ø§ÙØ¬Ø²Ø§ÛØ±":"DZ","Ø³Ø¨ØªÙ Ù ÙÙÛÙÙ":"EA","Ø§Ú©ÙØ§Ø¯ÙØ±":"EC","Ø§Ø³ØªÙÙÛ":"EE","ÙØµØ±":"EG","ØµØ­Ø±Ø§Û ØºØ±Ø¨Û":"EH","Ø§Ø±ÛØªØ±Ù":"ER","Ø§Ø³Ù¾Ø§ÙÛØ§":"ES","Ø§ØªÛÙÙ¾Û":"ET","Ø§ØªØ­Ø§Ø¯ÛÙÙ Ø§Ø±ÙÙ¾Ø§":"EU","ÙÙÙØ§ÙØ¯":"FI","ÙÛØ¬Û":"FJ","Ø¬Ø²Ø§ÛØ± ÙØ§ÙÚ©ÙÙØ¯":"FK","ÙÛÚ©Ø±ÙÙØ²Û":"FM","Ø¬Ø²Ø§ÛØ± ÙØ§Ø±Ù":"FO","ÙØ±Ø§ÙØ³Ù":"FR","Ú¯Ø§Ø¨ÙÙ":"GA","Ø¨Ø±ÛØªØ§ÙÛØ§":"GB","Ú¯Ø±Ø§ÙØ§Ø¯Ø§":"GD","Ú¯Ø±Ø¬Ø³ØªØ§Ù":"GE","Ú¯ÙÛØ§Ù ÙØ±Ø§ÙØ³Ù":"GF","Ú¯Ø±ÙØ²Û":"GG","ØºÙØ§":"GH","Ø¬Ø¨ÙâØ§ÙØ·Ø§Ø±Ù":"GI","Ú¯Ø±ÛÙÙÙØ¯":"GL","Ú¯Ø§ÙØ¨ÛØ§":"GM","Ú¯ÛÙÙ":"GN","Ú¯ÙØ§Ø¯ÙÙÙ¾":"GP","Ú¯ÛÙÙÙ Ø§Ø³ØªÙØ§ÛÛ":"GQ","ÛÙÙØ§Ù":"GR","Ø¬ÙØ±Ø¬ÛØ§Û Ø¬ÙÙØ¨Û Ù Ø¬Ø²Ø§ÛØ± Ø³Ø§ÙØ¯ÙÛÚ Ø¬ÙÙØ¨Û":"GS","Ú¯ÙØ§ØªÙØ§ÙØ§":"GT","Ú¯ÙØ§Ù":"GU","Ú¯ÛÙÙÙ Ø¨ÛØ³Ø§Ø¦Ù":"GW","Ú¯ÙÛØ§Ù":"GY","ÙÙÚ¯âÚ©ÙÚ¯Ø ÙØ§Ø­ÛÙÙ ÙÛÚÙÙ Ø­Ú©ÙÙØªÛ ÚÛÙ":"HK","Ø¬Ø²ÛØ±ÙÙ ÙØ±Ø¯ Ù Ø¬Ø²Ø§ÛØ± ÙÚ©âØ¯ÙÙØ§ÙØ¯":"HM","ÙÙØ¯ÙØ±Ø§Ø³":"HN","Ú©Ø±ÙØ§Ø³Û":"HR","ÙØ§Ø¦ÛØªÛ":"HT","ÙØ¬Ø§Ø±Ø³ØªØ§Ù":"HU","Ø¬Ø²Ø§ÛØ± ÙÙØ§Ø±Û":"IC","Ø§ÙØ¯ÙÙØ²Û":"ID","Ø§ÛØ±ÙÙØ¯":"IE","Ø§Ø³Ø±Ø§Ø¦ÛÙ":"IL","Ø¬Ø²ÛØ±ÙÙ ÙÙ":"IM","ÙÙØ¯":"IN","ÙØ³ØªØ¹ÙØ±ÙâÙØ§Û Ø¨Ø±ÛØªØ§ÙÛØ§ Ø¯Ø± Ø§ÙÛØ§ÙÙØ³ ÙÙØ¯":"IO","Ø¹Ø±Ø§Ù":"IQ","Ø§ÛØ±Ø§Ù":"IR","Ø§ÛØ³ÙÙØ¯":"IS","Ø§ÛØªØ§ÙÛØ§":"IT","Ø¬Ø±Ø²Û":"JE","Ø¬Ø§ÙØ§Ø¦ÛÚ©Ø§":"JM","Ø§Ø±Ø¯Ù":"JO","ÚØ§Ù¾Ù":"JP","Ú©ÙÛØ§":"KE","ÙØ±ÙÛØ²Ø³ØªØ§Ù":"KG","Ú©Ø§ÙØ¨ÙØ¬":"KH","Ú©Ø±ÛØ¨Ø§ØªÛ":"KI","Ú©ÙÙÙØ±Ù":"KM","Ø³ÙØª Ú©ÛØªØ³ Ù ÙÙÛØ³":"KN","Ú©Ø±ÙÙ Ø´ÙØ§ÙÛ":"KP","Ú©Ø±ÙÙ Ø¬ÙÙØ¨Û":"KR","Ú©ÙÛØª":"KW","Ø¬Ø²Ø§ÛØ± Ú©ÙÛÙÙ":"KY","ÙØ²Ø§ÙØ³ØªØ§Ù":"KZ","ÙØ§Ø¦ÙØ³":"LA","ÙØ¨ÙØ§Ù":"LB","Ø³ÙØª ÙÙØ³ÛØ§":"LC","ÙÛØ®ØªÙâØ§Ø´ØªØ§ÛÙ":"LI","Ø³Ø±ÛâÙØ§ÙÚ©Ø§":"LK","ÙÛØ¨Ø±ÛØ§":"LR","ÙØ³ÙØªÙ":"LS","ÙÛØªÙØ§ÙÛ":"LT","ÙÙÚ©Ø²Ø§ÙØ¨ÙØ±Ú¯":"LU","ÙØªÙÙÛ":"LV","ÙÛØ¨Û":"LY","ÙØ±Ø§Ú©Ø´":"MA","ÙÙÙØ§Ú©Ù":"MC","ÙÙÙØ¯Ø§ÙÛ":"MD","ÙÙÙØªÙâÙÚ¯Ø±Ù":"ME","Ø³ÙØª ÙØ§Ø±ØªÛÙ":"MF","ÙØ§Ø¯Ø§Ú¯Ø§Ø³Ú©Ø§Ø±":"MG","Ø¬Ø²Ø§ÛØ± ÙØ§Ø±Ø´Ø§Ù":"MH","ÙÙØ¯ÙÙÛÙ":"MK","ÙØ§ÙÛ":"ML","ÙÛØ§ÙÙØ§Ø± [Ø¨Ø±ÙÙ]":"MM","ÙØºÙÙØ³ØªØ§Ù":"MN","ÙØ§Ú©Ø§Ø¦ÙØ ÙØ§Ø­ÛÙÙ ÙÛÚÙÙ Ø­Ú©ÙÙØªÛ ÚÛÙ":"MO","Ø¬Ø²Ø§ÛØ± ÙØ§Ø±ÛØ§ÙØ§Û Ø´ÙØ§ÙÛ":"MP","ÙØ§Ø±ØªÛÙÛÚ©":"MQ","ÙÙØ±ÛØªØ§ÙÛ":"MR","ÙÙÙØªâØ³Ø±Ø§Øª":"MS","ÙØ§ÙØª":"MT","ÙÙØ±ÛØ³":"MU","ÙØ§ÙØ¯ÛÙ":"MV","ÙØ§ÙØ§ÙÛ":"MW","ÙÚ©Ø²ÛÚ©":"MX","ÙØ§ÙØ²Û":"MY","ÙÙØ²Ø§ÙØ¨ÛÚ©":"MZ","ÙØ§ÙÛØ¨ÛØ§":"NA","Ú©Ø§ÙØ¯ÙÙÛØ§Û Ø¬Ø¯ÛØ¯":"NC","ÙÛØ¬Ø±":"NE","Ø¬Ø²ÛØ±ÙÙ ÙÙØ±ÙÙÙÚ©":"NF","ÙÛØ¬Ø±ÛÙ":"NG","ÙÛÚ©Ø§Ø±Ø§Ú¯ÙØ¦Ù":"NI","ÙÙÙØ¯":"NL","ÙØ±ÙÚ":"NO","ÙÙ¾Ø§Ù":"NP","ÙØ§Ø¦ÙØ±Ù":"NR","ÙÛÙØ¦Ù":"NU","Ø²ÙØ§ÙØ¯ ÙÙ":"NZ","Ø¹ÙØ§Ù":"OM","Ù¾Ø§ÙØ§ÙØ§":"PA","Ù¾Ø±Ù":"PE","Ù¾ÙÛâÙØ²Û ÙØ±Ø§ÙØ³Ù":"PF","Ù¾Ø§Ù¾ÙØ§ Ú¯ÛÙÙÙ ÙÙ":"PG","ÙÛÙÛÙ¾ÛÙ":"PH","Ù¾Ø§Ú©Ø³ØªØ§Ù":"PK","ÙÙØ³ØªØ§Ù":"PL","Ø³ÙØª Ù¾ÛØ± Ù ÙÛÚ©ÙÙÙ":"PM","Ø¬Ø²Ø§ÛØ± Ù¾ÛØªâÚ©Ø±Ù":"PN","Ù¾ÙØ±ØªÙØ±ÛÚ©Ù":"PR","Ø³Ø±Ø²ÙÛÙâÙØ§Û ÙÙØ³Ø·ÛÙÛ":"PS","Ù¾Ø±ØªØºØ§Ù":"PT","Ù¾Ø§ÙØ§Ø¦Ù":"PW","Ù¾Ø§Ø±Ø§Ú¯ÙØ¦Ù":"PY","ÙØ·Ø±":"QA","Ø¨Ø®Ø´âÙØ§Û Ø¯ÙØ±Ø§ÙØªØ§Ø¯ÙÙ Ø§ÙÛØ§ÙÙØ³ÛÙ":"QO","Ø±ÛÙÙÛÙÙ":"RE","Ø±ÙÙØ§ÙÛ":"RO","ØµØ±Ø¨Ø³ØªØ§Ù":"RS","Ø±ÙØ³ÛÙ":"RU","Ø±ÙØ§ÙØ¯Ø§":"RW","Ø¹Ø±Ø¨Ø³ØªØ§Ù Ø³Ø¹ÙØ¯Û":"SA","Ø¬Ø²Ø§ÛØ± Ø³ÙÛÙØ§Ù":"SB","Ø³ÛØ´Ù":"SC","Ø³ÙØ¯Ø§Ù":"SD","Ø³ÙØ¦Ø¯":"SE","Ø³ÙÚ¯Ø§Ù¾ÙØ±":"SG","Ø³ÙØª ÙÙÙ":"SH","Ø§Ø³ÙÙÙÙÛ":"SI","Ø§Ø³ÙØ§ÙØ¨Ø§Ø±Ø¯ Ù Ø¬Ø§ÙâÙØ§ÛÙ":"SJ","Ø§Ø³ÙÙØ§Ú©Û":"SK","Ø³ÛØ±Ø§ÙØ¦ÙÙ":"SL","Ø³Ø§ÙâÙØ§Ø±ÛÙÙ":"SM","Ø³ÙÚ¯Ø§Ù":"SN","Ø³ÙÙØ§ÙÛ":"SO","Ø³ÙØ±ÛÙØ§Ù":"SR","Ø³ÙØ¯Ø§Ù Ø¬ÙÙØ¨Û":"SS","Ø³Ø§Ø¦ÙØªÙÙÙ Ù Ù¾Ø±ÛÙØ³ÛÙ¾Ù":"ST","Ø§ÙØ³Ø§ÙÙØ§Ø¯ÙØ±":"SV","Ø³ÙØª ÙØ§Ø±ØªÙ":"SX","Ø³ÙØ±ÛÙ":"SY","Ø³ÙØ§Ø²ÛÙÙØ¯":"SZ","ØªØ±ÛØ³ØªØ§Ù Ø¯Ø§ Ú©ÙÙØ§":"TA","Ø¬Ø²Ø§ÛØ± ØªØ±Ú© Ù Ú©Ø§ÛÚ©ÙØ³":"TC","ÚØ§Ø¯":"TD","ÙØ³ØªØ¹ÙØ±ÙâÙØ§Û Ø¬ÙÙØ¨Û ÙØ±Ø§ÙØ³Ù":"TF","ØªÙÚ¯Ù":"TG","ØªØ§ÛÙÙØ¯":"TH","ØªØ§Ø¬ÛÚ©Ø³ØªØ§Ù":"TJ","ØªÙÚ©ÙØ§Ø¦Ù":"TK","ØªÛÙÙØ± ÙØ³ØªÙ":"TL","ØªØ±Ú©ÙÙØ³ØªØ§Ù":"TM","ØªÙÙØ³":"TN","ØªÙÙÚ¯Ø§":"TO","ØªØ±Ú©ÛÙ":"TR","ØªØ±ÛÙÛØ¯Ø§Ø¯ Ù ØªÙØ¨Ø§Ú¯Ù":"TT","ØªÙÙØ§ÙÙ":"TV","ØªØ§ÛÙØ§Ù":"TW","ØªØ§ÙØ²Ø§ÙÛØ§":"TZ","Ø§ÙÚ©Ø±Ø§ÛÙ":"UA","Ø§ÙÚ¯Ø§ÙØ¯Ø§":"UG","Ø¬Ø²Ø§ÛØ± Ø¯ÙØ±Ø§ÙØªØ§Ø¯ÙÙ Ø§ÛØ§ÙØ§Øª ÙØªØ­Ø¯Ù":"UM","Ø§ÛØ§ÙØ§Øª ÙØªØ­Ø¯ÙÙ Ø§ÙØ±ÛÚ©Ø§":"US","Ø§Ø±ÙÚ¯ÙØ¦Ù":"UY","Ø§Ø²Ø¨Ú©Ø³ØªØ§Ù":"UZ","ÙØ§ØªÛÚ©Ø§Ù":"VA","Ø³ÙØª ÙÛÙØ³ÙØª Ù Ú¯Ø±ÙØ§Ø¯ÛÙ":"VC","ÙÙØ²ÙØ¦ÙØ§":"VE","Ø¬Ø²Ø§ÛØ± ÙÛØ±Ø¬ÛÙ Ø¨Ø±ÛØªØ§ÙÛØ§":"VG","Ø¬Ø²Ø§ÛØ± ÙÛØ±Ø¬ÛÙ Ø§ÛØ§ÙØ§Øª ÙØªØ­Ø¯Ù":"VI","ÙÛØªÙØ§Ù":"VN","ÙØ§ÙÙØ§ØªÙ":"VU","ÙØ§ÙÛØ³ Ù ÙÛÙØªÙÙØ§":"WF","Ø³Ø§ÙÙØ§":"WS","ÛÙÙ":"YE","ÙØ§ÛÙØª":"YT","Ø§ÙØ±ÛÙØ§Û Ø¬ÙÙØ¨Û":"ZA","Ø²Ø§ÙØ¨ÛØ§":"ZM","Ø²ÛÙØ¨Ø§Ø¨ÙÙ":"ZW","ÙØ§Ø­ÛÙÙ ÙØ§ÙØ´Ø®Øµ":"ZZ"};
ilib.data.ctrynames_fa_AF = {"Ø§ÙØ¯ÙØ±Ø§":"AD","Ø§ÙØªÛÚ¯ÙØ§ Ù Ø¨Ø§Ø±Ø¨ÙØ¯Ø§":"AG","Ø§ÙØ¨Ø§ÙÛØ§":"AL","Ø§ÙÚ¯ÙÙØ§":"AO","Ø§Ø±Ø¬ÙØªØ§ÛÙ":"AR","Ø¢Ø³ØªØ±Ø§ÙÛØ§":"AU","Ø¨ÙØ³ÙÛØ§ Ù ÙØ±Ø²ÙâÚ¯ÙÛÙØ§":"BA","Ø¨ÙÚ¯ÙÙâØ¯ÛØ´":"BD","Ø¨ÙØ¬ÛÙ":"BE","Ø¨ÙØºØ§Ø±ÛØ§":"BG","Ø¨Ø±ÙÙÛ":"BN","Ø¨ÙÙÛÙÛØ§":"BO","Ø¨Ø±Ø§Ø²ÛÙ":"BR","Ø¨ÙØ§ÙØ§Ø³":"BS","Ø±ÙØ³ÛÙÙ Ø³ÙÛØ¯":"BY","Ø¬ÙÙÙØ±Û Ø¯ÙÙÚ©Ø±Ø§ØªÛÚ© Ú©Ø§ÙÚ¯Ù":"CD","Ø§ÙØ±ÛÙØ§Û ÙØ±Ú©Ø²Û":"CF","Ú©Ø§ÙÚ¯Ù":"CG","Ø³ÙÛØ³":"CH","ÚÙÛ":"CL","Ú©ÙÙÙØ¨ÛØ§":"CO","Ú©Ø§Ø³ØªØ±ÛÚ©Ø§":"CR","Ú©ÛÙØ¨Ø§":"CU","Ø¯ÙÙØ§Ø±Ú©":"DK","Ø§Ø³ØªÙÙÛØ§":"EE","Ø§Ø±ÛØªØ±ÛØ§":"ER","ÙØ³Ù¾Ø§ÙÛÙ":"ES","Ø§ÛØªÙÙ¾ÛØ§":"ET","ÙÙÙÙØ¯":"FI","ÙÛÚ©Ø±ÙÙØ²ÛØ§":"FM","Ú¯Ø±ÛÙØ§Ø¯Ø§":"GD","Ú¯ÛÙÛØ§":"GN","Ú¯ÛÙÛØ§ Ø§Ø³ØªÙØ§ÛÛ":"GQ","Ú¯ÙØ§ØªÛÙØ§ÙØ§":"GT","Ú¯ÛÙÛØ§ Ø¨ÛØ³Ø§Ø¦Ù":"GW","Ú¯ÛØ§ÙØ§":"GY","ÙØ§ÙØ¯ÙØ±Ø§Ø³":"HN","Ú©Ø±ÙØ´ÛØ§":"HR","ÙØ§ÛØªÛ":"HT","Ø§ÙØ¯ÙÙÛØ²ÛØ§":"ID","Ø¢ÛØ±ÙÙØ¯":"IE","Ø¢ÛØ³ÙÙØ¯":"IS","Ø¬Ø§Ù¾Ø§Ù":"JP","Ú©ÛÙÛØ§":"KE","ÙØ±ØºØ²Ø³ØªØ§Ù":"KG","Ú©ÙÙ¾ÙÚÛØ§":"KH","Ú©ÙÙÙØ±":"KM","Ø³ÙØª Ú©ÛØªØ³ Ù ÙÛÙÛØ³":"KN","Ú©ÙØ±ÛØ§Û Ø´ÙØ§ÙÛ":"KP","Ú©ÙØ±ÛØ§Û Ø¬ÙÙØ¨Û":"KR","Ø³Ø±ÛÙØ§ÙÚ©Ø§":"LK","ÙÛØ³ÙØªÙ":"LS","ÙØªÙØ§ÙÛØ§":"LT","ÙØ§ØªÙÛØ§":"LV","ÙÛØ¨ÛØ§":"LY","ÙØ§Ø¯ØºØ§Ø³Ú©Ø±":"MG","ÙÙÚ¯ÙÙÛØ§":"MN","ÙÙØ±ÛØªØ§ÙÛØ§":"MR","ÙØ§ÙØªØ§":"MT","ÙÚ©Ø³ÛÚ©Ù":"MX","ÙØ§ÙÛØ²ÛØ§":"MY","ÙÙØ²ÙØ¨ÛÙ":"MZ","ÙÛØ¬Ø±ÛØ§":"NG","ÙÛÚ©Ø§Ø±Ø§Ú¯ÙØ§":"NI","ÙØ§ÙÙØ¯":"NL","ÙØ§Ø±ÙÛ":"NO","ÙÛÙ¾Ø§Ù":"NP","Ø²ÛÙØ§ÙØ¯ Ø¬Ø¯ÛØ¯":"NZ","Ù¾Ø§ÙØ§ÙÙ":"PA","Ù¾ÛØ±Ù":"PE","Ù¾Ø§Ù¾ÙØ§ ÙÛÙ Ú¯ÛÙÛØ§":"PG","Ù¾ÙÙÙØ¯":"PL","Ù¾Ø±ØªÚ¯Ø§Ù":"PT","Ù¾Ø§Ø±Ø§Ú¯ÙØ§Û":"PY","Ø±ÙÙØ§ÙÛØ§":"RO","Ø±ÙØ¢ÙØ¯Ø§":"RW","Ø¬Ø²Ø§ÛØ± Ø³ÙÙÙÙÙ":"SB","Ø³ÙÛØ¯Ù":"SE","Ø³ÛÙÚ¯Ø§Ù¾ÙØ±":"SG","Ø³ÙÙÙÛØ§":"SI","Ø³ÙÙØ§Ú©ÛØ§":"SK","Ø³ÛØ±Ø§ÙÛÙÙ":"SL","Ø³ÛÙÛÚ¯Ø§Ù":"SN","Ø³ÙÙØ§ÙÛÙ":"SO","Ø³Ø§Ø¦Ù ØªÙÙÙ Ù Ù¾Ø±ÛÙØ³ÛÙ¾":"ST","Ø§ÙØ³ÙÙØ§Ø¯ÙØ±":"SV","ØªØ§Ø¬Ú©Ø³ØªØ§Ù":"TJ","Ø§Ú©Ø±Ø§ÛÙ":"UA","ÛÙØ±ÙÚ¯ÙØ§Û":"UY","Ø³ÙØª ÙÛÙØ³ÙØª Ù Ú¯Ø±ÛÙØ§Ø¯ÛÙ":"VC","ÙÙØ²ÙÛÙØ§":"VE","Ø³Ø§ÙÙØ¢":"WS","Ø²ÛÙØ¨Ø§Ø¨ÙÛ":"ZW"};
ilib.data.ctrynames_ff = {"Anndoora":"AD","Emiraat Araab DenntuÉe":"AE","Afganistaan":"AF","Antiguwaa e Barbudaa":"AG","Anngiyaa":"AI","Albanii":"AL","Armenii":"AM","Antiiye Nederlanndeeje":"AN","Anngolaa":"AO","Arjantiin":"AR","Samowa Amerik":"AS","Otiriis":"AT","Ostaraalii":"AU","Aruuba":"AW","Ajerbayjaan":"AZ","Bosnii Hersegowiin":"BA","Barbadoos":"BB","Banglaadees":"BD","Beljik":"BE","Burkibaa Faaso":"BF","Bulgarii":"BG","Bahreyn":"BH","Burunndi":"BI","Benee":"BJ","Bermudaa":"BM","Burnaay":"BN","Boliwii":"BO","Beresiil":"BR","Bahamaas":"BS","Butaan":"BT","Botswaana":"BW","Belaruus":"BY","Beliise":"BZ","Kanadaa":"CA","Ndenndaandi Demokaraasiire Konngo":"CD","Ndenndaandi Santarafrik":"CF","Konngo":"CG","Suwiis":"CH","Kodduwaar":"CI","DuuÉe Kuuk":"CK","Cilii":"CL","Kameruun":"CM","Siin":"CN","Kolombiya":"CO","Kosta Rikaa":"CR","Kubaa":"CU","DuuÉe Kap Weer":"CV","Siipar":"CY","Ndenndaandi Cek":"CZ","AlmaaÃ±":"DE","Jibutii":"DJ","Danmark":"DK","Dominika":"DM","Ndenndanndi Dominika":"DO","Alaseri":"DZ","Ekuwatoor":"EC","Estoni":"EE","Ejipt":"EG","Eriteree":"ER","EspaaÃ±":"ES","Ecoppi":"ET","Fenland":"FI","Fijji":"FJ","DuuÉe Falkland":"FK","Mikoronesii":"FM","Farayse":"FR","Gaboo":"GA","Laamateeri Rentundi":"GB","Garnaad":"GD","Jeorgii":"GE","Giyaan Farayse":"GF","Ganaa":"GH","Jibraltaar":"GI","Gorwendland":"GL","Gammbi":"GM","Gine":"GN","Gwaadalup":"GP","Ginee Ekuwaatoriyaal":"GQ","Gerees":"GR","Gwaatemalaa":"GT","Guwam":"GU","Gine-Bisaawo":"GW","Giyaan":"GY","Onnduraas":"HN","Korwasii":"HR","Haytii":"HT","Onngiri":"HU","Enndonesii":"ID","Irlannda":"IE","Israa'iila":"IL","Enndo":"IN","Keeriindi britaani to maayo enndo":"IO","Iraak":"IQ","Iraan":"IR","Islannda":"IS","Itali":"IT","Jamayka":"JM","Jordani":"JO","Sapoo":"JP","KeÃ±aa":"KE","Kirgistaan":"KG","Kambodso":"KH","Kiribari":"KI","Komoor":"KM","Sent Kits e Newis":"KN","Koree Rewo":"KP","Koree Worgo":"KR","Kuweyti":"KW","DuuÉe Kaymaa":"KY","Kasakstaan":"KZ","Lawoos":"LA","Libaa":"LB","Sent Lusiyaa":"LC","Lincenstayn":"LI","Siri Lanka":"LK","Liberiyaa":"LR","Lesoto":"LS","Lituaanii":"LT","Liksembuur":"LU","Letonii":"LV","Libi":"LY","Maruk":"MA","Monaakoo":"MC","Moldawii":"MD","Madagaskaar":"MG","DuuÉe Marsaal":"MH","Meceduwaan":"MK","Maali":"ML","Miyamaar":"MM","Monngolii":"MN","DuuÉe Mariyaana Rewo":"MP","Martinik":"MQ","Muritani":"MR","Monseraat":"MS","Malte":"MT","Moriis":"MU","Maldiiwe":"MV","Malaawi":"MW","Meksik":"MX","Malesii":"MY","Mosammbik":"MZ","Namibii":"NA","Nuwel Kaledonii":"NC","Nijeer":"NE","DuuÉe Norfolk":"NF","Nijeriyaa":"NG","Nikaraguwaa":"NI","Nederlannda":"NL","Norwees":"NO","Nepaal":"NP","Nawuru":"NR","Niuwe":"NU","Nuwel Selannda":"NZ","Omaan":"OM","Panamaa":"PA","Peru":"PE","Polinesii Farayse":"PF","Papuwaa Nuwel Gine":"PG","Filipiin":"PH","Pakistaan":"PK","PoloÃ±":"PL","See Piyeer e Mikeloo":"PM","Pitkern":"PN","Porto Rikoo":"PR","Palestiin Sisjordani e Gaasaa":"PS","Purtugaal":"PT","Palawu":"PW","Paraguwaay":"PY","Kataar":"QA","RewiÃ±oo":"RE","Rumanii":"RO","Riisii":"RU","Ruwanndaa":"RW","Arabii Sawdit":"SA","DuuÉe Solomon":"SB","Seysel":"SC","Sudaan":"SD","Suweed":"SE","Sinngapuur":"SG","Sent Helen":"SH","Slowenii":"SI","Slowakii":"SK","Seraa liyon":"SL","See Maree":"SM","Senegaal":"SN","Somalii":"SO","Surinaam":"SR","Sawo Tome e Perensipe":"ST","El Salwador":"SV","Sirii":"SY","Swaasilannda":"SZ","DuuÉe Turke e Keikoos":"TC","Caad":"TD","Togoo":"TG","Taylannda":"TH","Tajikistaan":"TJ","Tokelaaw":"TK","Timoor FuÉnaange":"TL","Turkmenistaan":"TM","Tunisii":"TN","Tonngaa":"TO","Turkii":"TR","Tirnidaad e Tobaago":"TT","Tuwaluu":"TV","Taywaan":"TW","Tansanii":"TZ","Ukereen":"UA","Unganndaa":"UG","Dowlaaji DentuÉi Amerik":"US","Uruguwaay":"UY","Usbekistaan":"UZ","Dowla Waticaan":"VA","See Weesaa e Garnadiin":"VC","Wenesuwelaa":"VE","duuÉe kecce britanii":"VG","DuuÉe Kecce Amerik":"VI","Wiyetnaam":"VN","Wanuwaatuu":"VU","Walis e Futuna":"WF","Samowaa":"WS","Yemen":"YE","Mayoot":"YT","Afrik bÅ Worgo":"ZA","Sammbi":"ZM","Simbaabuwe":"ZW"};
ilib.data.ctrynames_fi = {"Aasia":"142","Keski-Aasia":"143","LÃ¤nsi-Aasia":"145","Eurooppa":"150","ItÃ¤-Eurooppa":"151","Pohjois-Eurooppa":"154","LÃ¤nsi-Eurooppa":"155","Latinalainen Amerikka":"419","maailma":"001","Afrikka":"002","Pohjois-Amerikka":"003","EtelÃ¤-Amerikka":"005","Oseania":"009","LÃ¤nsi-Afrikka":"011","VÃ¤li-Amerikka":"013","ItÃ¤-Afrikka":"014","Pohjois-Afrikka":"015","Keski-Afrikka":"017","etelÃ¤inen Afrikka":"018","Amerikka":"019","pohjoinen Amerikka":"021","Karibia":"029","ItÃ¤-Aasia":"030","EtelÃ¤-Aasia":"034","Kaakkois-Aasia":"035","EtelÃ¤-Eurooppa":"039","Australaasia":"053","Melanesia":"054","Mikronesia":"057","Polynesia":"061","Ascension-saari":"AC","Andorra":"AD","Arabiemiirikunnat":"AE","Afganistan":"AF","Antigua ja Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Alankomaiden Antillit":"AN","Angola":"AO","Antarktis":"AQ","Argentiina":"AR","Amerikan Samoa":"AS","ItÃ¤valta":"AT","Australia":"AU","Aruba":"AW","Ahvenanmaa":"AX","AzerbaidÅ¾an":"AZ","Bosnia ja Hertsegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgia":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","Saint-BarthÃ©lemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Karibian Alankomaat":"BQ","Brasilia":"BR","Bahama":"BS","Bhutan":"BT","Bouvetânsaari":"BV","Botswana":"BW","Valko-VenÃ¤jÃ¤":"BY","Belize":"BZ","Kanada":"CA","Kookossaaret [Keelingsaaret]":"CC","Kongon demokraattinen tasavalta":"CD","Keski-Afrikan tasavalta":"CF","Kongon tasavalta":"CG","Sveitsi":"CH","Norsunluurannikko":"CI","Cookinsaaret":"CK","Chile":"CL","Kamerun":"CM","Kiina":"CN","Kolumbia":"CO","Clippertoninsaari":"CP","Costa Rica":"CR","Kuuba":"CU","Kap Verde":"CV","CuraÃ§ao":"CW","Joulusaari":"CX","Kypros":"CY","TÅ¡ekki":"CZ","Saksa":"DE","Diego Garcia":"DG","Djibouti":"DJ","Tanska":"DK","Dominica":"DM","Dominikaaninen tasavalta":"DO","Algeria":"DZ","Ceuta ja Melilla":"EA","Ecuador":"EC","Viro":"EE","Egypti":"EG","LÃ¤nsi-Sahara":"EH","Eritrea":"ER","Espanja":"ES","Etiopia":"ET","Euroopan unioni":"EU","Suomi":"FI","FidÅ¾i":"FJ","Falklandinsaaret":"FK","Mikronesian liittovaltio":"FM","FÃ¤rsaaret":"FO","Ranska":"FR","Gabon":"GA","Britannia":"GB","Grenada":"GD","Georgia":"GE","Ranskan Guayana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","GrÃ¶nlanti":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","PÃ¤ivÃ¤ntasaajan Guinea":"GQ","Kreikka":"GR","EtelÃ¤-Georgia ja EtelÃ¤iset Sandwichsaaret":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Hongkong â Kiinan e.h.a.":"HK","Heard- ja McDonaldinsaaret":"HM","Honduras":"HN","Kroatia":"HR","Haiti":"HT","Unkari":"HU","Kanariansaaret":"IC","Indonesia":"ID","Irlanti":"IE","Israel":"IL","Mansaari":"IM","Intia":"IN","BrittilÃ¤inen Intian valtameren alue":"IO","Irak":"IQ","Iran":"IR","Islanti":"IS","Italia":"IT","Jersey":"JE","Jamaika":"JM","Jordania":"JO","Japani":"JP","Kenia":"KE","Kirgisia":"KG","KambodÅ¾a":"KH","Kiribati":"KI","Komorit":"KM","Saint Kitts ja Nevis":"KN","Pohjois-Korea":"KP","EtelÃ¤-Korea":"KR","Kuwait":"KW","Caymansaaret":"KY","Kazakstan":"KZ","Laos":"LA","Libanon":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Liettua":"LT","Luxemburg":"LU","Latvia":"LV","Libya":"LY","Marokko":"MA","Monaco":"MC","Moldova":"MD","Montenegro":"ME","Saint-Martin":"MF","Madagaskar":"MG","Marshallinsaaret":"MH","Makedonia":"MK","Mali":"ML","Myanmar [Burma]":"MM","Mongolia":"MN","Macao â Kiinan e.h.a.":"MO","Pohjois-Mariaanit":"MP","Martinique":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Malediivit":"MV","Malawi":"MW","Meksiko":"MX","Malesia":"MY","Mosambik":"MZ","Namibia":"NA","Uusi-Kaledonia":"NC","Niger":"NE","Norfolkinsaari":"NF","Nigeria":"NG","Nicaragua":"NI","Alankomaat":"NL","Norja":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Uusi-Seelanti":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Ranskan Polynesia":"PF","Papua-Uusi-Guinea":"PG","Filippiinit":"PH","Pakistan":"PK","Puola":"PL","Saint-Pierre ja Miquelon":"PM","Pitcairn":"PN","Puerto Rico":"PR","Palestiina":"PS","Portugali":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","ulkomeri":"QO","RÃ©union":"RE","Romania":"RO","Serbia":"RS","VenÃ¤jÃ¤":"RU","Ruanda":"RW","Saudi-Arabia":"SA","Salomonsaaret":"SB","Seychellit":"SC","Sudan":"SD","Ruotsi":"SE","Singapore":"SG","Saint Helena":"SH","Slovenia":"SI","Huippuvuoret ja Jan Mayen":"SJ","Slovakia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Surinam":"SR","EtelÃ¤-Sudan":"SS","SÃ£o TomÃ© ja PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Syyria":"SY","Swazimaa":"SZ","Tristan da Cunha":"TA","Turks- ja Caicossaaret":"TC","TÅ¡ad":"TD","Ranskan ulkopuoliset etelÃ¤iset alueet":"TF","Togo":"TG","Thaimaa":"TH","TadÅ¾ikistan":"TJ","Tokelau":"TK","ItÃ¤-Timor":"TL","Turkmenistan":"TM","Tunisia":"TN","Tonga":"TO","Turkki":"TR","Trinidad ja Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tansania":"TZ","Ukraina":"UA","Uganda":"UG","Yhdysvaltain pienet erillissaaret":"UM","Yhdysvallat":"US","Uruguay":"UY","Uzbekistan":"UZ","Vatikaani":"VA","Saint Vincent ja Grenadiinit":"VC","Venezuela":"VE","BrittilÃ¤iset Neitsytsaaret":"VG","Yhdysvaltain Neitsytsaaret":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis ja Futuna":"WF","Samoa":"WS","Jemen":"YE","Mayotte":"YT","EtelÃ¤-Afrikka":"ZA","Sambia":"ZM","Zimbabwe":"ZW","tuntematon alue":"ZZ"};
ilib.data.ctrynames_fr = {"generated":false,"albanie":"AL","algÃ©rie":"DZ","samoa amÃ©ricaines":"AS","andorre":"AD","antigua-et-barbuda":"AG","argentine":"AR","armÃ©nie":"AM","australie":"AU","autriche":"AT","azerbaÃ¯djan":"AZ","ivb":"VG","bahreÃ¯n":"BH","barbade":"BB","biÃ©lorussie":"BY","belgique":"BE","bÃ©nin":"BJ","bermudes":"BM","bhoutan":"BT","bolivie":"BO","bosnie-herzÃ©govine":"BA","brÃ©sil":"BR","territoire de lâocÃ©an indien britannique":"IO","bulgarie":"BG","cambodge":"KH","cameroun":"CM","cap-vert":"CV","caÃ¯mans":"KY","rÃ©publique dâafrique centrale":"CF","tchad":"TD","chili":"CL","chine":"CN","colombie":"CO","comores":"KM","Ã®les cook":"CK","croatie":"HR","chypre":"CY","rÃ©publique tchÃ¨que":"CZ","cÃ´te dâivoire":"CI","r.d.":"DO","rdc":"CD","rÃ©publique dÃ©mocratique du congo":"CD","danemark":"DK","dominique":"DM","rÃ©publique dominicaine":"DO","timor oriental":"TL","Ã©quateur":"EC","Ã©gypte":"EG","guinÃ©e Ã©quatoriale":"GQ","Ã©rythrÃ©e":"ER","estonie":"EE","Ã©thiopie":"ET","arym":"MK","Ã®les falkland":"FK","falkland":"FK","Ã®les fÃ©roÃ©":"FO","Ã©tats fÃ©dÃ©rÃ©s de micronÃ©sie":"FM","fidji":"FJ","finlande":"FI","ex-rÃ©publique yougoslave de macÃ©doine":"MK","guyane franÃ§aise":"GF","polynÃ©sie franÃ§aise":"PF","gambie":"GM","gÃ©orgie":"GE","allemagne":"DE","grenade":"GD","grÃ¨ce":"GR","groenland":"GL","guadeloupe":"GP","guinÃ©e":"GN","guinÃ©e-bissau":"GW","guyane":"GY","haÃ¯ti":"HT","hongrie":"HU","islande":"IS","inde":"IN","indonÃ©sie":"ID","irak":"IQ","irlande":"IE","israÃ«l":"IL","italie":"IT","jamaÃ¯que":"JM","japon":"JP","jordanie":"JO","koweÃ¯t":"KW","kirghizistan":"KG","lettonie":"LV","liban":"LB","libye":"LY","lituanie":"LT","macao":"MO","malaisie":"MY","malte":"MT","marianne":"MP","Ã®les marshall":"MH","mauritanie":"MR","maurice":"MU","mexique":"MX","micronÃ©sie":"FM","moldavie":"MD","mongolie":"MN","montÃ©nÃ©gro":"ME","maroc":"MA","namibie":"NA","nÃ©pal":"NP","pays-bas":"NL","antilles nÃ©erlandaises":"AN","nouvelle-calÃ©donie":"NC","nouvelle-zÃ©lande":"NZ","Ã®le norfolk":"NF","corÃ©e du nord":"KP","Ã®les marianne du nord":"MP","norvÃ¨ge":"NO","palaos":"PW","autoritÃ© palestinienne":"PS","panamÃ¡":"PA","papouasie-nouvelle-guinÃ©e":"PG","rÃ©publique populaire de chine":"CN","pÃ©rou":"PE","pologne":"PL","porto rico":"PR","rÃ©publique de chine":"TW","rÃ©publique dâirlande":"IE","roumanie":"RO","russie":"RU","sainte-hÃ©lÃ¨ne":"SH","saint-kitts-et-nevis":"KN","sainte-lucie":"LC","saint-vincent":"VC","saint-vincent et les grenadines":"VC","saint-marin":"SM","arabie saoudite":"SA","sÃ©nÃ©gal":"SN","serbie":"RS","singapour":"SG","saint-martin":"MF","slovaquie":"SK","slovÃ©nie":"SI","Ã®les solomon":"SB","somalie":"SO","afrique du sud":"ZA","corÃ©e du sud":"KR","espagne":"ES","ste-lucie":"LC","saint-pierre-et-miquelon":"PM","soudan":"SD","suÃ¨de":"SE","suisse":"CH","syrie":"SY","sao tomÃ©-et-principe":"ST","taÃ¯wan":"TW","tadjikistan":"TJ","tanzanie":"TZ","thaÃ¯lande":"TH","les bahamas":"BS","Ã®les vierges britanniques":"VG","Ã®les turks et caicos":"TC","Ã®les vierges amÃ©ricaines":"VI","trinitÃ©-et-tobago":"TT","tunisie":"TN","turquie":"TR","turkmÃ©nistan":"TM","Ã©au":"AE","ouganda":"UG","Ã©mirats arabes unis":"AE","royaume-uni":"GB","ouzbÃ©kistan":"UZ","vatican":"VA","wallis-et-futuna":"WF","yÃ©men":"YE","zambie":"ZM","afghanistan":"AF","Ã®les aland":"AX","angola":"AO","anguilla":"AI","antigua":"AG","arabie":"SA","aruba":"AW","ascension":"SH","i.v.b.":"VG","bahamas":"BS","bangladesh":"BD","barbuda":"AG","bÃ©larus":"BY","belize":"BZ","bermude":"BM","rÃ©publique bolivarienne du venezuela":"VE","bolivie, Ã©tat plurinational de":"BO","bosnie":"BA","botswana":"BW","Ã®le bouvet":"BV","territoire britannique de lâocÃ©an indien":"IO","brunÃ©i":"BN","brunÃ©i darussalam":"BN","burkina faso":"BF","burundi":"BI","r.c.a.":"CF","Ã®les caicos":"TC","canada":"CA","Ã®les du cap-vert":"CV","rca":"CF","Ã®les caÃ¯mans":"KY","rÃ©publique centrafricaine":"CF","Ã®le christmas":"CX","Ã®les cocos et keeling":"CC","Ã®les cocos (keeling)":"CC","Ã®les cocos":"CC","congo":"CD","congo, rÃ©publique dÃ©mocratique du":"CD","congo, rÃ©publique dÃ©mocratique":"CD","costa rica":"CR","cuba":"CU","rÃ©publique populaire dÃ©mocratique de corÃ©e":"KP","fjibouti":"DJ","rpdc":"KP","rd":"DO","dubaÃ¯":"AE","el salvador":"SV","angleterre":"GB","a.r.y.m.":"MK","malouines":"FK","fÃ©roÃ©":"FO","france":"FR","territoires franÃ§ais de lâantarctique":"TF","futuna":"WF","gabon":"GA","ghana":"GH","gibraltar":"GI","grande-bretagne":"GB","grenadines":"VC","guam":"GU","guatemala":"GT","guernesey":"GG","Ã®les heard et mcdonald":"HM","Ã®le heard":"HM","Ã®le heard et Ã®les mcdonald":"HM","herzÃ©govine":"BA","hollande":"NL","saint-siÃ¨ge":"VA","honduras":"HN","hong kong":"HK","iran":"IR","iran, rÃ©publique islamique":"IR","iraq":"IQ","rÃ©publique islamique dâiran":"IR","Ã®le de man":"IM","jan mayen":"SJ","jersey":"JE","kazakhstan":"KZ","kenya":"KE","kiribati":"KI","corÃ©e":"KR","corÃ©e, rÃ©publique populaire dÃ©mocratique de":"KP","corÃ©e, rÃ©publique de":"KR","rÃ©publique dÃ©mocratique populaire lao":"LA","laos":"LA","lesotho":"LS","libÃ©ria":"LR","jamahiriya arabe libyenne populaire et socialiste":"LY","liechtenstein":"LI","lithuanie":"LT","luxembourg":"LU","macÃ©doine":"MK","macÃ©doine, ex-rÃ©publique yougoslave de":"MK","macÃ©doine, lâex-rÃ©publique yougoslave de":"MK","madagascar":"MG","malawi":"MW","maldives":"MV","mali":"ML","mariannes":"MP","marshalls":"MH","martinique":"MQ","mayotte":"YT","Ã®les mcdonald":"HM","micronÃ©sie, Ã©tats fÃ©dÃ©rÃ©s de":"FM","miquelon":"PM","moldavie, rÃ©publique de":"MD","monaco":"MC","montserrat":"MS","mozambique":"MZ","myanmar":"MM","nauru":"NR","nevis":"KN","nicaragua":"NI","niger":"NE","nigÃ©ria":"NG","Ã®les mariannes du nord":"MP","territoires palestiniens occupÃ©s":"PS","oman":"OM","r. p. chine":"CN","r. p. de chine":"CN","r.p. de chine":"CN","pakistan":"PK","palau":"PW","palestine":"PS","territoires palestiniens":"PS","territoires palestiniens, occupÃ©s":"PS","panama":"PA","paraguay":"PY","philippines":"PH","pitcairn":"PN","Ã©tat plurinational de bolivie":"BO","polynÃ©sie":"PF","portugal":"PT","rp chine":"CN","rpc":"CN","principe":"ST","qatar":"QA","rÃ©publique de corÃ©e":"KR","rÃ©publique de moldavie":"MD","rÃ©publique de singapour":"SG","rÃ©union":"RE","fÃ©dÃ©ration russe":"RU","rwanda":"RW","saint barthÃ©lemy":"BL","saint-barthÃ©lemy":"BL","sainte-hÃ©lÃ¨ne, ascension et tristan da cunha":"SH","saint-kitts":"KN","saint-pierre":"PM","samoa":"WS","sao tomÃ©":"ST","Ã©cosse":"GB","seychelles":"SC","sierra leone":"SL","slovakie":"SK","Ã®les salomon":"SB","salomon":"SB","gÃ©orgie du sud":"GS","gÃ©orgie du sud et Ã®les sandwich du sud":"GS","Ã®les sandwich du sud":"GS","sri lanka":"LK","st. barthÃ©lemy":"BL","st barth":"BL","ste hÃ©lÃ¨ne":"SH","ste hÃ©lÃ¨ne, ascension et tristan da cunha":"SH","st-kitts":"KN","st-kitts-et-nevis":"KN","ste lucie":"LC","st-vincent":"VC","st barthÃ©lemy":"BL","st. barth":"BL","st martin":"MF","suriname":"SR","svalbard":"SJ","svalbard et jan mayen":"SJ","swaziland":"SZ","rÃ©publique arabe syrienne":"SY","taiwan":"TW","tanzanie, rÃ©publique unie":"TZ","lâex-rÃ©publique yougoslave de macÃ©doine":"MK","les grenadines":"VC","les pays-bas":"NL","les philippines":"PH","la rÃ©publique de singapour":"SG","le soudan":"SD","tobago":"TT","togo":"TG","tokelau":"TK","tonga":"TO","trinitÃ©":"TT","tristan da cunha":"SH","Ã®les turks":"TC","tuvalu":"TV","e.a.u.":"AE","r.u.":"GB","Ã©.-u.":"US","eau":"AE","ru":"GB","ukraine":"UA","rÃ©publique unie de tanzanie":"TZ","Ã©tats-unis":"US","Ã®les mineures Ã©loignÃ©es des Ã©tats-unis":"UM","Ã©tats-unis dâamÃ©rique":"US","uruguay":"UY","Ã©-u":"US","iveu":"VI","vanuatu":"VU","citÃ© du vatican":"VA","Ã©tat de la citÃ© du vatican":"VA","venezuela":"VE","venezuela, rÃ©publique bolivarienne du":"VE","viÃªt nam":"VN","vietnam":"VN","Ã®les vierges":"VI","Ã®les vierges, britanniques":"VG","Ã®les vierges, Ã©-u":"VI","pays de galles":"GB","wallis":"WF","sahara occidental":"EH","zimbabwe":"ZW","Ã®les Ã¥land":"AX","Ãle de lâAscension":"AC","Andorre":"AD","Ãmirats arabes unis":"AE","Afghanistan":"AF","Antigua-et-Barbuda":"AG","Anguilla":"AI","Albanie":"AL","ArmÃ©nie":"AM","Antilles nÃ©erlandaises":"AN","Angola":"AO","Antarctique":"AQ","Argentine":"AR","Samoa amÃ©ricaines":"AS","Autriche":"AT","Australie":"AU","Aruba":"AW","Ãles Ãland":"AX","AzerbaÃ¯djan":"AZ","Bosnie-HerzÃ©govine":"BA","Barbade":"BB","Bangladesh":"BD","Belgique":"BE","Burkina Faso":"BF","Bulgarie":"BG","BahreÃ¯n":"BH","Burundi":"BI","BÃ©nin":"BJ","Saint-BarthÃ©lÃ©my":"BL","Bermudes":"BM","BrunÃ©i Darussalam":"BN","Bolivie":"BO","Pays-Bas caribÃ©ens":"BQ","BrÃ©sil":"BR","Bahamas":"BS","Bhoutan":"BT","Ãle Bouvet":"BV","Botswana":"BW","BÃ©larus":"BY","Belize":"BZ","Canada":"CA","Ãles Cocos [Keeling]":"CC","RÃ©publique dÃ©mocratique du Congo":"CD","RÃ©publique centrafricaine":"CF","Congo-Brazzaville":"CG","Suisse":"CH","CÃ´te dâIvoire":"CI","Ãles Cook":"CK","Chili":"CL","Cameroun":"CM","Chine":"CN","Colombie":"CO","Ãle Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","Cap-Vert":"CV","CuraÃ§ao":"CW","Ãle Christmas":"CX","Chypre":"CY","RÃ©publique tchÃ¨que":"CZ","Allemagne":"DE","Diego Garcia":"DG","Djibouti":"DJ","Danemark":"DK","Dominique":"DM","RÃ©publique dominicaine":"DO","AlgÃ©rie":"DZ","Ceuta et Melilla":"EA","Ãquateur":"EC","Estonie":"EE","Ãgypte":"EG","Sahara occidental":"EH","ÃrythrÃ©e":"ER","Espagne":"ES","Ãthiopie":"ET","Union europÃ©enne":"EU","Finlande":"FI","Fidji":"FJ","Ãles Malouines":"FK","Ãtats fÃ©dÃ©rÃ©s de MicronÃ©sie":"FM","Ãles FÃ©roÃ©":"FO","France":"FR","Gabon":"GA","Royaume-Uni":"GB","Grenade":"GD","GÃ©orgie":"GE","Guyane franÃ§aise":"GF","Guernesey":"GG","Ghana":"GH","Gibraltar":"GI","Groenland":"GL","Gambie":"GM","GuinÃ©e":"GN","Guadeloupe":"GP","GuinÃ©e Ã©quatoriale":"GQ","GrÃ¨ce":"GR","GÃ©orgie du Sud et les Ãles Sandwich du Sud":"GS","Guatemala":"GT","Guam":"GU","GuinÃ©e-Bissau":"GW","Guyana":"GY","R.A.S. chinoise de Hong Kong":"HK","Ãles Heard et MacDonald":"HM","Honduras":"HN","Croatie":"HR","HaÃ¯ti":"HT","Hongrie":"HU","Ãles Canaries":"IC","IndonÃ©sie":"ID","Irlande":"IE","IsraÃ«l":"IL","Ãle de Man":"IM","Inde":"IN","Territoire britannique de l'ocÃ©an Indien":"IO","Irak":"IQ","Iran":"IR","Islande":"IS","Italie":"IT","Jersey":"JE","JamaÃ¯que":"JM","Jordanie":"JO","Japon":"JP","Kenya":"KE","Kirghizistan":"KG","Cambodge":"KH","Kiribati":"KI","Comores":"KM","Saint-Kitts-et-Nevis":"KN","CorÃ©e du Nord":"KP","CorÃ©e du Sud":"KR","KoweÃ¯t":"KW","Ãles CaÃ¯mans":"KY","Kazakhstan":"KZ","Laos":"LA","Liban":"LB","Sainte-Lucie":"LC","Liechtenstein":"LI","Sri Lanka":"LK","LibÃ©ria":"LR","Lesotho":"LS","Lituanie":"LT","Luxembourg":"LU","Lettonie":"LV","Libye":"LY","Maroc":"MA","Monaco":"MC","Moldavie":"MD","MontÃ©nÃ©gro":"ME","Saint-Martin [partie franÃ§aise]":"MF","Madagascar":"MG","Ãles Marshall":"MH","MacÃ©doine":"MK","Mali":"ML","Myanmar":"MM","Mongolie":"MN","R.A.S. chinoise de Macao":"MO","Ãles Mariannes du Nord":"MP","Martinique":"MQ","Mauritanie":"MR","Montserrat":"MS","Malte":"MT","Maurice":"MU","Maldives":"MV","Malawi":"MW","Mexique":"MX","Malaisie":"MY","Mozambique":"MZ","Namibie":"NA","Nouvelle-CalÃ©donie":"NC","Niger":"NE","Ãle Norfolk":"NF","NigÃ©ria":"NG","Nicaragua":"NI","Pays-Bas":"NL","NorvÃ¨ge":"NO","NÃ©pal":"NP","Nauru":"NR","Niue":"NU","Nouvelle-ZÃ©lande":"NZ","Oman":"OM","Panama":"PA","PÃ©rou":"PE","PolynÃ©sie franÃ§aise":"PF","Papouasie-Nouvelle-GuinÃ©e":"PG","Philippines":"PH","Pakistan":"PK","Pologne":"PL","Saint-Pierre-et-Miquelon":"PM","Pitcairn":"PN","Porto Rico":"PR","Territoire palestinien":"PS","Portugal":"PT","Palaos":"PW","Paraguay":"PY","Qatar":"QA","rÃ©gions Ã©loignÃ©es de lâOcÃ©anie":"QO","RÃ©union":"RE","Roumanie":"RO","Serbie":"RS","Russie":"RU","Rwanda":"RW","Arabie saoudite":"SA","Ãles Salomon":"SB","Seychelles":"SC","Soudan":"SD","SuÃ¨de":"SE","Singapour":"SG","Sainte-HÃ©lÃ¨ne":"SH","SlovÃ©nie":"SI","Svalbard et Ãle Jan Mayen":"SJ","Slovaquie":"SK","Sierra Leone":"SL","Saint-Marin":"SM","SÃ©nÃ©gal":"SN","Somalie":"SO","Suriname":"SR","Soudan du Sud":"SS","Sao TomÃ©-et-PrÃ­ncipe":"ST","El Salvador":"SV","Saint-Martin [partie nÃ©erlandaise]":"SX","Syrie":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Ãles Turks et CaÃ¯ques":"TC","Tchad":"TD","Terres australes franÃ§aises":"TF","Togo":"TG","ThaÃ¯lande":"TH","Tadjikistan":"TJ","Tokelau":"TK","Timor oriental":"TL","TurkmÃ©nistan":"TM","Tunisie":"TN","Tonga":"TO","Turquie":"TR","TrinitÃ©-et-Tobago":"TT","Tuvalu":"TV","TaÃ¯wan":"TW","Tanzanie":"TZ","Ukraine":"UA","Ouganda":"UG","Ãles Ã©loignÃ©es des Ãtats-Unis":"UM","Ãtats-Unis":"US","Uruguay":"UY","OuzbÃ©kistan":"UZ","Ãtat de la CitÃ© du Vatican":"VA","Saint-Vincent-et-les Grenadines":"VC","Venezuela":"VE","Ãles Vierges britanniques":"VG","Ãles Vierges des Ãtats-Unis":"VI","ViÃªt Nam":"VN","Vanuatu":"VU","Wallis-et-Futuna":"WF","Samoa":"WS","YÃ©men":"YE","Mayotte":"YT","Afrique du Sud":"ZA","Zambie":"ZM","Zimbabwe":"ZW","rÃ©gion indÃ©terminÃ©e":"ZZ","Asie":"142","Asie centrale":"143","Asie occidentale":"145","Europe":"150","Europe orientale":"151","Europe septentrionale":"154","Europe occidentale":"155","AmÃ©rique latine":"419","Monde":"001","Afrique":"002","AmÃ©rique du Nord":"003","AmÃ©rique du Sud":"005","OcÃ©anie":"009","Afrique occidentale":"011","AmÃ©rique centrale":"013","Afrique orientale":"014","Afrique septentrionale":"015","Afrique centrale":"017","Afrique australe":"018","AmÃ©riques":"019","AmÃ©rique septentrionale":"021","CaraÃ¯bes":"029","Asie orientale":"030","Asie du Sud":"034","Asie du Sud-Est":"035","Europe mÃ©ridionale":"039","Australie et Nouvelle-ZÃ©lande":"053","MÃ©lanÃ©sie":"054","rÃ©gion micronÃ©sienne":"057","PolynÃ©sie":"061"};
ilib.data.ctrynames_fr_CA = {"generated":false,"Ãle de l'Ascension":"AC","GÃ©orgie du Sud et les Ã®les Sandwich du Sud":"GS","Sao TomÃ©-et-Principe":"ST"};
ilib.data.ctrynames_ga = {"An Ãise":"142","An Ãise LÃ¡ir":"143","An Eoraip":"150","MeiriceÃ¡ Laidineach agus an Mhuir Chairib":"419","An Domhan":"001","An Afraic":"002","An AigÃ©ine":"009","MeiriceÃ¡ LÃ¡ir":"013","An Afraic LÃ¡ir":"017","Na MeiriceÃ¡nna":"019","An AstrÃ¡il agus an Nua-ShÃ©alainn":"053","An MheilinÃ©is":"054","An RÃ©igiÃºn MicrinÃ©iseach":"057","An PholainÃ©is":"061","AndÃ³ra":"AD","Aontas na nÃimÃ­rÃ­ochtaÃ­ Arabacha":"AE","An AfganastÃ¡in":"AF","AintÃ­ge agus BarbÃºda":"AG","Anguilla":"AI","An AlbÃ¡in":"AL","An AirmÃ©in":"AM","AntillÃ­ na hÃsiltÃ­re":"AN","AngÃ³la":"AO","An Antartaice":"AQ","An AirgintÃ­n":"AR","SamÃ³ MeiriceÃ¡nach":"AS","An Ostair":"AT","An AstrÃ¡il":"AU","ArÃºba":"AW","OileÃ¡in Alaind":"AX","An AsarbaiseÃ¡in":"AZ","An Bhoisnia agus HeirseagÃ³vÃ©in":"BA","BarbadÃ³s":"BB","An BhanglaidÃ©is":"BD","An Bheilg":"BE","BuircÃ­ne FasÃ³":"BF","An BhulgÃ¡ir":"BG","BairÃ©in":"BH","An BhurÃºin":"BI","Beinin":"BJ","BeirmiÃºda":"BM","BrÃºinÃ©":"BN","An Bholaiv":"BO","An BhrasaÃ­l":"BR","Na BahÃ¡maÃ­":"BS","An BhÃºtÃ¡in":"BT","OileÃ¡n Bouvet":"BV","An BhotsuÃ¡in":"BW","An BhealarÃºis":"BY","An BheilÃ­s":"BZ","Ceanada":"CA","OileÃ¡in na gCÃ³cÃ³nna":"CC","Poblacht Dhaonlathach an ChongÃ³":"CD","Poblacht na hAfraice LÃ¡ir":"CF","An CongÃ³":"CG","An EilvÃ©is":"CH","An CÃ³sta Eabhair":"CI","OileÃ¡in Cook":"CK","An tSile":"CL","CamarÃºn":"CM","An tSÃ­n":"CN","An CholÃ³im":"CO","CÃ³sta RÃ­ce":"CR","CÃºba":"CU","An Rinn Ghlas":"CV","OileÃ¡n na Nollag":"CX","An Chipir":"CY","Poblacht na Seice":"CZ","An GhearmÃ¡in":"DE","Djibouti":"DJ","An Danmhairg":"DK","Doiminice":"DM","An Phoblacht Dhoiminiceach":"DO","An AilgÃ©ir":"DZ","EacuadÃ³r":"EC","An EastÃ³in":"EE","An Ãigipt":"EG","An SahÃ¡ra Thiar":"EH","An EiritrÃ©":"ER","An SpÃ¡inn":"ES","An AetÃ³ip":"ET","An tAontas Eorpach":"EU","An Fhionlainn":"FI","FidsÃ­":"FJ","OileÃ¡in FhÃ¡clainne":"FK","An MhicrinÃ©is":"FM","OileÃ¡in FharÃ³":"FO","An Fhrainc":"FR","An GhabÃºin":"GA","An RÃ­ocht Aontaithe":"GB","Grenada":"GD","An tSeoirsia":"GE","An GhuÃ¡in Fhrancach":"GF","GeansaÃ­":"GG","GÃ¡na":"GH","GiobrÃ¡ltar":"GI","An Ghraonlainn":"GL","An Ghaimbia":"GM","An Ghuine":"GN","GuadalÃºip":"GP","An Ghuine MheÃ¡nchriosach":"GQ","An GhrÃ©ig":"GR","An tSeoirsia Theas agus OileÃ¡in Sandwich Theas":"GS","Guatamala":"GT","Guam":"GU","An Ghuine-Bhissau":"GW","An GhuÃ¡in":"GY","R.R.S. na SÃ­ne Hong Cong":"HK","OileÃ¡n Heard agus OileÃ¡in McDonald":"HM","HondÃºras":"HN","An ChrÃ³it":"HR","HÃ¡itÃ­":"HT","An UngÃ¡ir":"HU","An IndinÃ©is":"ID","Ãire":"IE","Iosrael":"IL","OileÃ¡n Mhanann":"IM","An India":"IN","CrÃ­ocha Briotanacha an AigÃ©in Indiagh":"IO","An IarÃ¡ic":"IQ","An IarÃ¡in":"IR","An Ãoslainn":"IS","An IodÃ¡il":"IT","GeirsÃ­":"JE","IamÃ¡ice":"JM","An IordÃ¡in":"JO","An tSeapÃ¡in":"JP","An ChÃ©inia":"KE","An ChirgeastÃ¡in":"KG","An ChambÃ³id":"KH","Ciribeas":"KI","OileÃ¡in ChomÃ³ra":"KM","Saint Kitts agus Nevis":"KN","An ChÃ³irÃ© Thuaidh":"KP","An ChÃ³irÃ© Theas":"KR","CuÃ¡it":"KW","OileÃ¡in na gCadhman":"KY","An ChasacstÃ¡in":"KZ","Laos":"LA","An LiobÃ¡in":"LB","San LÃºisia":"LC","LichtinstÃ©in":"LI","SrÃ­ Lanca":"LK","An LibÃ©ir":"LR","LeosÃ³ta":"LS","An LiotuÃ¡in":"LT","Lucsamburg":"LU","An Laitvia":"LV","An Libia":"LY","MaracÃ³":"MA","MonacÃ³":"MC","An MholdÃ³iv":"MD","MontainÃ©agrÃ³":"ME","Madagascar":"MG","OileÃ¡in Marshall":"MH","An MhacadÃ³in":"MK","MailÃ­":"ML","Maenmar":"MM","An MhongÃ³il":"MN","R.R.S. na SÃ­ne MacÃ¡Ã³":"MO","OileÃ¡in Mariana Thuaidh":"MP","MartainÃ­c":"MQ","An MharatÃ¡in":"MR","Montsarat":"MS","MÃ¡lta":"MT","OileÃ¡n MhuirÃ­s":"MU","Na MaildivÃ­":"MV","An MhalÃ¡iv":"MW","Meicsiceo":"MX","An Mhalaeisia":"MY","MÃ³saimbÃ­c":"MZ","An Namaib":"NA","An Nua-ChaladÃ³in":"NC","An NÃ­gir":"NE","OileÃ¡n Norfolk":"NF","An NigÃ©ir":"NG","Nicearagua":"NI","An ÃsiltÃ­r":"NL","An Iorua":"NO","Neipeal":"NP","NÃ¡rÃº":"NR","NÃ­vÃ©":"NU","An Nua-ShÃ©alainn":"NZ","Ãman":"OM","Panama":"PA","PeiriÃº":"PE","An PholainÃ©is Fhrancach":"PF","Nua-Ghuine Phapua":"PG","Na hOileÃ¡in FhilipÃ­neacha":"PH","An PhacastÃ¡in":"PK","An Pholainn":"PL","Saint Pierre agus Miquelon":"PM","Pitcairn":"PN","PortÃ³ RÃ­ce":"PR","Na CrÃ­ocha PailistÃ­neacha":"PS","An PhortaingÃ©il":"PT","Palau":"PW","Paragua":"PY","Catar":"QA","An AigÃ©ine Imeallach":"QO","RÃ©union":"RE","An RÃ³mÃ¡in":"RO","An tSeirbia":"RS","CÃ³naidhm na RÃºise":"RU","Ruanda":"RW","An Araib ShÃ¡dach":"SA","OileÃ¡in Sholaimh":"SB","Na SÃ©isÃ©il":"SC","An tSÃºdÃ¡in":"SD","An tSualainn":"SE","SingeapÃ³r":"SG","San HÃ©ilin":"SH","An tSlÃ³vÃ©in":"SI","Svalbard agus Jan Mayen":"SJ","An tSlÃ³vaic":"SK","Siarra Leon":"SL","San MairÃ­ne":"SM","An tSeineagÃ¡il":"SN","An tSomÃ¡il":"SO","Suranam":"SR","Sao Tome agus Principe":"ST","An tSalvadÃ³ir":"SV","An tSiria":"SY","An tSuasalainn":"SZ","OileÃ¡in Turks agus Caicos":"TC","Sead":"TD","CrÃ­ocha Deisceartacha na Fraince":"TF","TÃ³ga":"TG","An TÃ©alainn":"TH","An TÃ¡idsÃ­ceastÃ¡in":"TJ","TÃ³calÃ¡":"TK","TÃ­omÃ³r Thoir":"TL","An TuircmÃ©anastÃ¡in":"TM","An TÃºinÃ©is":"TN","Tonga":"TO","An Tuirc":"TR","OileÃ¡in na TrÃ­onÃ³ide agus TobÃ¡ga":"TT","TÃºvÃ¡lÃº":"TV","An TÃ©avÃ¡in":"TW","An TansÃ¡in":"TZ","An ÃcrÃ¡in":"UA","Ãganda":"UG","Mion-OileÃ¡in Imeallacha S.A.M.":"UM","StÃ¡it Aontaithe MheiriceÃ¡":"US","Urugua":"UY","ÃisbÃ©iceastÃ¡in":"UZ","An VatacÃ¡in":"VA","Saint Vincent agus na Grenadines":"VC","VeinisÃ©ala":"VE","OileÃ¡in Bhriotanacha na Maighdean":"VG","OileÃ¡in na Maighdean S.A.M.":"VI","VÃ­t Neam":"VN","VanuatÃº":"VU","OileÃ¡in VailÃ­s agus FutÃºna":"WF","SamÃ³":"WS","Ãimin":"YE","Mayotte":"YT","An Afraic Theas":"ZA","An tSaimbia":"ZM","An tSiombÃ¡ib":"ZW","RÃ©igiÃºn Anaithnid nÃ³ NeamhbhailÃ­":"ZZ"};
ilib.data.ctrynames_gl = {"Asia":"142","Asia Central":"143","Asia Occidental":"145","Europa":"150","Europa do Leste":"151","Europa Septentrional":"154","Europa Occidental":"155","AmÃ©rica Latina":"419","Mundo":"001","Ãfrica":"002","NorteamÃ©rica":"003","SudamÃ©rica":"005","OceanÃ­a":"009","Ãfrica Occidental":"011","AmÃ©rica Central":"013","Ãfrica Oriental":"014","Ãfrica Septentrional":"015","Ãfrica Central":"017","Ãfrica Meridional":"018","AmÃ©rica":"019","AmÃ©rica do Norte":"021","Caribe":"029","Asia Oriental":"030","Sul de Asia":"034","Sureste AsiÃ¡tico":"035","Europa Meridional":"039","Australasia":"053","Melanesia":"054","RexiÃ³n da Micronesia":"057","Polinesia":"061","Illa de AscensiÃ³n":"AC","Andorra":"AD","Emiratos Ãrabes Unidos":"AE","AfganistÃ¡n":"AF","Antiga e Barbuda":"AG","Anguila":"AI","Albania":"AL","Armenia":"AM","Antillas Holandesas":"AN","Angola":"AO","AntÃ¡rtida":"AQ","Arxentina":"AR","Samoa Americana":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Illas Aland":"AX","AcerbaixÃ¡n":"AZ","Bosnia e Hercegovina":"BA","Barbados":"BB","Bangladesh":"BD","BÃ©lxica":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","San BartolomÃ©":"BL","Bermudas":"BM","Brunei":"BN","Bolivia":"BO","Caribe neerlandÃ©s":"BQ","Brasil":"BR","Bahamas":"BS","ButÃ¡n":"BT","Illa Bouvet":"BV","Botsuana":"BW","Bielorrusia":"BY","Belice":"BZ","CanadÃ¡":"CA","Illas Cocos [Keeling]":"CC","RepÃºblica DemocrÃ¡tica do Congo":"CD","RepÃºblica Africana Central":"CF","Congo":"CG","SuÃ­za":"CH","Costa de Marfil":"CI","Illas Cook":"CK","Chile":"CL","CamerÃºn":"CM","China":"CN","Colombia":"CO","Illa Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","Cabo Verde":"CV","CuraÃ§ao":"CW","Illa Christmas":"CX","Chipre":"CY","RepÃºblica Checa":"CZ","AlemaÃ±a":"DE","Diego GarcÃ­a":"DG","Xibuti":"DJ","Dinamarca":"DK","Dominica":"DM","RepÃºblica Dominicana":"DO","Arxelia":"DZ","Ceuta e Melilla":"EA","Ecuador":"EC","Estonia":"EE","Exipto":"EG","Sahara Occidental":"EH","Eritrea":"ER","EspaÃ±a":"ES","EtiopÃ­a":"ET","UniÃ³n Europea":"EU","Finlandia":"FI","Fixi":"FJ","Illas Malvinas":"FK","Micronesia":"FM","Illas Feroe":"FO","Francia":"FR","GabÃ³n":"GA","Reino Unido":"GB","Granada":"GD","Xeorxia":"GE","GÃ¼iana Francesa":"GF","Guernsey":"GG","Gana":"GH","Xibraltar":"GI","Grenlandia":"GL","Gambia":"GM","Guinea":"GN","Guadalupe":"GP","Guinea Ecuatorial":"GQ","Grecia":"GR","Xeorxia do Sur e Illas Sandwich":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","GÃ¼iana":"GY","Hong Kong RAE de China":"HK","Illa Heard e Illas McDonald":"HM","Honduras":"HN","Croacia":"HR","HaitÃ­":"HT","HungrÃ­a":"HU","Illas Canarias":"IC","Indonesia":"ID","Irlanda":"IE","Israel":"IL","Illa de Man":"IM","India":"IN","Territorio BritÃ¡nico do OcÃ©ano Ãndico":"IO","Iraq":"IQ","IrÃ¡n":"IR","Islandia":"IS","Italia":"IT","Jersey":"JE","Xamaica":"JM","Xordania":"JO","XapÃ³n":"JP","Quenia":"KE","QuirguicistÃ¡n":"KG","Cambodia":"KH","Kiribati":"KI","Comores":"KM","San Cristovo e Nevis":"KN","Corea do Norte":"KP","Corea do Sur":"KR","Kuwait":"KW","Illas CaimÃ¡n":"KY","Kazakhstan":"KZ","Laos":"LA","LÃ­bano":"LB","Santa LucÃ­a":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Lituania":"LT","Luxemburgo":"LU","Letonia":"LV","Libia":"LY","Marrocos":"MA","MÃ³naco":"MC","Moldova":"MD","Montenegro":"ME","San MartiÃ±o":"MF","Madagascar":"MG","Illas Marshall":"MH","Macedonia":"MK","Mali":"ML","Myanmar [Birmania]":"MM","Mongolia":"MN","Macau RAE de China":"MO","Illas Marianas do norte":"MP","Martinica":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauricio":"MU","Maldivas":"MV","Malaui":"MW","MÃ©xico":"MX","Malaisia":"MY","Mozambique":"MZ","Namibia":"NA","Nova Caledonia":"NC","NÃ­xer":"NE","Illa Norfolk":"NF","Nixeria":"NG","Nicaragua":"NI","PaÃ­ses Baixos":"NL","Noruega":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Nova Celandia":"NZ","OmÃ¡n":"OM","PanamÃ¡":"PA","PerÃº":"PE","Polinesia Francesa":"PF","PapÃºa Nova Guinea":"PG","Filipinas":"PH","PaquistÃ¡n":"PK","Polonia":"PL","San Pedro e MiguelÃ³n":"PM","Illas Pitcairn":"PN","Porto Rico":"PR","Territorios palestinos":"PS","Portugal":"PT","Palau":"PW","Paraguai":"PY","Qatar":"QA","OceanÃ­a Distante":"QO","ReuniÃ³n":"RE","RomanÃ­a":"RO","Serbia":"RS","Rusia":"RU","Ruanda":"RW","Arabia Saudita":"SA","Illas SalomÃ³n":"SB","Seixeles":"SC","SudÃ¡n":"SD","Suecia":"SE","Singapur":"SG","Santa Helena":"SH","Eslovenia":"SI","Svalbard e Jan Mayen":"SJ","Eslovaquia":"SK","Serra Leoa":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Surinam":"SR","SudÃ¡n do sur":"SS","Santo TomÃ© e PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Siria":"SY","Suacilandia":"SZ","TristÃ¡n da Cunha":"TA","Illas Turks e Caicos":"TC","Chad":"TD","Territorios Franceses do Sul":"TF","Togo":"TG","Tailandia":"TH","TaxiquistÃ¡n":"TJ","Tokelau":"TK","Timor Leste":"TL","TurkmenistÃ¡n":"TM","Tunisia":"TN","Tonga":"TO","TurquÃ­a":"TR","Trindade e Tobago":"TT","Tuvalu":"TV","TaiwÃ¡n":"TW","Tanzania":"TZ","UcraÃ­na":"UA","Uganda":"UG","Illas Menores Distantes dos EUA.":"UM","Estados Unidos de AmÃ©rica":"US","Uruguai":"UY","UzbekistÃ¡n":"UZ","Cidade do Vaticano":"VA","San Vicente e Granadinas":"VC","Venezuela":"VE","Illas Virxes BritÃ¡nicas":"VG","Illas Virxes Estadounidenses":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis e Futuna":"WF","Samoa":"WS","Iemen":"YE","Mayotte":"YT","SudÃ¡frica":"ZA","Zambia":"ZM","Cimbabue":"ZW","RexiÃ³n descoÃ±ecida":"ZZ"};
ilib.data.ctrynames_ha = {"Andora":"AD","HaÉaÉÉiyar Daular Larabawa":"AE","Afaganistan":"AF","Antigwa da Barbuba":"AG","Angila":"AI","Albaniya":"AL","Armeniya":"AM","Antiya Na Holan":"AN","Angola":"AO","Arjantiniya":"AR","Samowa Ta Amurka":"AS","Ostiriya":"AT","Ostareliya":"AU","Aruba":"AW","Azarbaijan":"AZ","Bosniya Harzagobina":"BA","Barbadas":"BB","Bangiladas":"BD","Belgiyom":"BE","Burkina Faso":"BF","Bulgariya":"BG","Baharan":"BH","Burundi":"BI","Binin":"BJ","Barmuda":"BM","Burune":"BN","Bolibiya":"BO","Birazil":"BR","Bahamas":"BS","Butan":"BT","Baswana":"BW","Belarus":"BY","Beliz":"BZ","Kanada":"CA","Jamhuriyar DimokuraÉiyyar Kongo":"CD","Jamhuriyar Afirka Ta Tsakiya":"CF","Kongo":"CG","Suwizalan":"CH","Aibari Kwas":"CI","Tsibiran Kuku":"CK","Cayile":"CL","Kamaru":"CM","Caina, Sin":"CN","Kolambiya":"CO","Kwasta Rika":"CR","Kyuba":"CU","Tsibiran Kap Barde":"CV","Sifurus":"CY","Jamhuriyar Cak":"CZ","Jamus":"DE","Jibuti":"DJ","Danmark":"DK","Dominika":"DM","Jamhuriyar Dominika":"DO","Aljeriya":"DZ","Ekwador":"EC","Estoniya":"EE","Masar, Misira":"EG","Eritireya":"ER","Sipen":"ES","Habasha":"ET","Finlan":"FI","Fiji":"FJ","Tsibiran Falkilan":"FK","Mikuronesiya":"FM","Faransa":"FR","Gabon":"GA","Birtaniya":"GB","Girnada":"GD","Jiwarjiya":"GE","Gini Ta Faransa":"GF","Gana":"GH","Jibaraltar":"GI","Grinlan":"GL","Gambiya":"GM","Gini":"GN","Gwadaluf":"GP","Gini Ta Ikwaita":"GQ","Girka":"GR","Gwatamala":"GT","Gwam":"GU","Gini Bisau":"GW","Guyana":"GY","Honduras":"HN","Kurowaishiya":"HR","Haiti":"HT","Hungari":"HU","Indunusiya":"ID","Ayalan":"IE","Izira'ila":"IL","Indiya":"IN","Yankin Birtaniya Na Tekun Indiya":"IO","IraÆi":"IQ","Iran":"IR","Aisalan":"IS","Italiya":"IT","Jamaika":"JM","Jordan":"JO","Japan":"JP","Kenya":"KE","Kirgizistan":"KG","Kambodiya":"KH","Kiribati":"KI","Kwamoras":"KM","San Kiti Da Nebis":"KN","Koreya Ta Arewa":"KP","Koreya Ta Kudu":"KR","Kwiyat":"KW","Tsibiran Kaiman":"KY","Kazakistan":"KZ","Lawas":"LA","Labanan":"LB","San Lusiya":"LC","Licansitan":"LI","Siri Lanka":"LK","Laberiya":"LR","Lesoto":"LS","Lituweniya":"LT","Lukusambur":"LU","latibiya":"LV","Libiya":"LY","Maroko":"MA","Monako":"MC","Maldoba":"MD","Madagaskar":"MG","Tsibiran Marshal":"MH","Masedoniya":"MK","Mali":"ML","Burma, Miyamar":"MM","Mangoliya":"MN","Tsibiran Mariyana Na Arewa":"MP","Martinik":"MQ","Moritaniya":"MR","Manserati":"MS","Malta":"MT","Moritus":"MU","Maldibi":"MV","Malawi":"MW","Makasiko":"MX","Malaisiya":"MY","Mozambik":"MZ","Namibiya":"NA","Kaledoniya Sabuwa":"NC","Nijar":"NE","Tsibirin Narfalk":"NF","Najeriya":"NG","Nikaraguwa":"NI","Holan":"NL","Norwe":"NO","Nefal":"NP","Nauru":"NR","Niyu":"NU","Nuzilan":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Folinesiya Ta Faransa":"PF","Papuwa Nugini":"PG","Filipin":"PH","Pakistan":"PK","Polan":"PL","San Piyar Da Mikelan":"PM","Pitakarin":"PN","Porto Riko":"PR","PalasÉinu":"PS","Portugal":"PT","Palau":"PW","Paragai":"PY","Kwatar":"QA","Rawuniyan":"RE","Romaniya":"RO","Rasha":"RU","Ruwanda":"RW","Æasar Makka":"SA","Tsibiran Salaman":"SB","Saishal":"SC","Sudan":"SD","Suwedan":"SE","Singapur":"SG","San Helena":"SH","Sulobeniya":"SI","Sulobakiya":"SK","Salewo":"SL","San Marino":"SM","Sinigal":"SN","Somaliya":"SO","Suriname":"SR","Sawo Tome Da Paransip":"ST","El Salbador":"SV","Sham, Siriya":"SY","Suwazilan":"SZ","Turkis Da Tsibiran Kaikwas":"TC","Cadi":"TD","Togo":"TG","Tailan":"TH","Tajikistan":"TJ","Takelau":"TK","Timor Ta Gabas":"TL","Turkumenistan":"TM","Tunisiya":"TN","Tanga":"TO","Turkiyya":"TR","Tirinidad Da Tobago":"TT","Tubalu":"TV","Taiwan":"TW","Tanzaniya":"TZ","Yukaran":"UA","Yuganda":"UG","Amurka":"US","Yurugai":"UY","Uzubekistan":"UZ","Batikan":"VA","San Binsan Da Girnadin":"VC","Benezuwela":"VE","Tsibirin Birjin Na Birtaniya":"VG","Tsibiran Birjin Ta Amurka":"VI","Biyetinam":"VN","Banuwatu":"VU","Walis Da Futuna":"WF","Samowa":"WS","Yamal":"YE","Mayoti":"YT","Afirka Ta Kudu":"ZA","Zambiya":"ZM","Zimbabuwe":"ZW"};
ilib.data.ctrynames_he = {"××¡××":"142","××¨×× ××¡××":"143","××¢×¨× ××¡××":"145","×××¨××¤×":"150","×××¨× ×××¨××¤×":"151","×¦×¤×× ×××¨××¤×":"154","××¢×¨× ×××¨××¤×":"155","×××¨××§× ××××× ××ª":"419","××¢×××":"001","××¤×¨××§×":"002","×¦×¤×× ×××¨××§×":"003","××¨×× ×××¨××§×":"005","×××§××× ××":"009","××¢×¨× ××¤×¨××§×":"011","××¨×× ×××¨××§×":"013","×××¨× ××¤×¨××§×":"014","×¦×¤×× ××¤×¨××§×":"015","××¨×× ××¤×¨××§×":"017","××¨×× ×××©×ª ××¤×¨××§×":"018","×××¨××§×":"019","×××¨××§× ××¦×¤×× ××ª":"021","×§×¨×××××":"029","×××¨× ××¡××":"030","××¨×× ××¡××":"034","××¨××Ö¾×××¨× ××¡××":"035","××¨×× ×××¨××¤×":"039","×××¡××¨×××¡××":"053","××× ×¡××":"054","××××¨ ×××§×¨×× ×××":"057","×¤×××× ×××":"061","××× ××¡× ×©×":"AC","×× ×××¨×":"AD","××××× ×××××¨××××ª ××¢×¨××××ª":"AE","××¤×× ××¡××":"AF","×× ×××××× ×××¨××××":"AG","×× ××××":"AI","×××× ××":"AL","××¨×× ××":"AM","×× ××××× ×××× ××××":"AN","×× ××××":"AO","×× ×××¨×§×××§×":"AQ","××¨×× ××× ×":"AR","×¡×××× ××××¨××§× ××ª":"AS","×××¡××¨××":"AT","×××¡××¨×××":"AU","××¨×××":"AW","××× ××× ×":"AX","×××¨××××³×":"AZ","×××¡× ×× ×××¨×¦××××× ×":"BA","××¨××××¡":"BB","×× ××××©":"BD","×××××":"BE","×××¨×§×× × ×¤××¡×":"BF","×××××¨××":"BG","×××¨×××":"BH","×××¨×× ××":"BI","×× ××":"BJ","×¡× × ××¨×ª×××××××":"BL","××¨××××":"BM","××¨×× ××":"BN","×××××××":"BO","××××× ××§×¨××××× ××××× ××××":"BQ","××¨×××":"BR","××× ×××××":"BS","×××××":"BT","××× ××××":"BV","××××¡×××× ×":"BW","××××¨××¡":"BY","××××":"BZ","×§× ××":"CA","××× ×§××§×¡ [×§×××× ×]":"CC","×§×× ×× - ×§×× ×©××¡×":"CD","××¨×¤×××××§× ×©× ××¨×× ××¤×¨××§×":"CF","×§×× ×× - ××¨×××××":"CG","×©×××××¥":"CH","×××£ ××©× ××":"CI","××× ×§××§":"CK","×¦×³×××":"CL","×§××¨××":"CM","×¡××":"CN","×§×××××××":"CO","××× ×§×××¤×¨×××":"CP","×§××¡×× ×¨××§×":"CR","×§×××":"CU","××£ ××¨××":"CV","×§××¨××¡××":"CW","××× ××¨××¡×××¡":"CX","×§×¤×¨××¡××":"CY","×¦×³×××":"CZ","××¨×× ××":"DE","××××× ××¨×¡××":"DG","××³×××××":"DJ","×× ××¨×§":"DK","××××× ××§×":"DM","××¨×¤×××××§× ×××××× ××§× ××ª":"DO","××××³××¨××":"DZ","×¡×××× ××××××":"EA","××§×××××¨":"EC","××¡××× ××":"EE","××¦×¨××":"EG","×¡××¨× ×××¢×¨×××ª":"EH","××¨××ª×¨×××":"ER","×¡×¤×¨×":"ES","××ª×××¤××":"ET","×××××× ××××¨××¤×":"EU","×¤×× ×× ×":"FI","×¤×××³×":"FJ","××× ×¤××§×× ×":"FK","×××§×¨×× ×××":"FM","××× ×¤××¨×":"FO","×¦×¨×¤×ª":"FR","×××××":"GA","××¨××× ××":"GB","××¨× ××":"GD","××××¨×××":"GE","×××× × ××¦×¨×¤×ª××ª":"GF","××¨× ×¡×":"GG","××× ×":"GH","××××¨×××¨":"GI","××¨×× ×× ×":"GL","×××××":"GM","××× ×××":"GN","××××××××¤":"GP","××× ××× ×××©××× ××ª":"GQ","××××":"GR","××³××¨××³×× ×××¨××××ª ×××× ×¡× ×××××¥×³ ×××¨×××××":"GS","×××××××":"GT","××××":"GU","××× ×××-×××¡××":"GW","×××× ×":"GY","××× × ×§×× × - ×××× ×× ××× ××××× ×©× ×¡××":"HK","××× ××¨× ×××× ××§××× ×× ×":"HM","××× ×××¨×¡":"HN","×§×¨×××××":"HR","×××××":"HT","××× ××¨××":"HU","××××× ××§× ×¨×××":"IC","××× ××× ×××":"ID","×××¨×× ×":"IE","××©×¨××":"IL","××× ×××":"IM","××××":"IN","××¨××××¨×× ××¨××××ª ××××§××× ××¡ ×××××":"IO","×¢××¨××§":"IQ","×××¨××":"IR","×××¡×× ×":"IS","××××××":"IT","××³×¨×¡×":"JE","××³××××§×":"JM","××¨××":"JO","××¤×":"JP","×§× ××":"KE","×§××¨××××¡××":"KG","×§××××××":"KH","×§××¨×××××":"KI","×§××××¨××¡":"KM","×¡× × ×§×××¡ ×× ××××¡":"KN","×¦×¤' ×§××¨×××":"KP","××¨' ×§××¨×××":"KR","×××××ª":"KW","××× ×§××××":"KY","×§×××¡××":"KZ","××××¡":"LA","××× ××":"LB","×¡× × ×××¡××":"LC","××××× ×©××××":"LI","×¡×¨× ×× ×§×":"LK","××××¨××":"LR","××¡×××":"LS","××××":"LT","×××§×¡××××¨×":"LU","×××××":"LV","×××":"LY","××¨××§×":"MA","××× ×§×":"MC","×××××××":"MD","××× ×× ××¨×":"ME","×¡× × ××¨×××":"MF","××××¡×§×¨":"MG","××× ××¨×©×":"MH","××§××× ××":"MK","××××":"ML","×××× ×××¨ [×××¨××]â":"MM","××× ×××××":"MN","××§×× - ×××× ×× ××× ××××× ×©× ×¡××":"MO","××× ××¨××× × ××¦×¤×× ×××":"MP","××¨××× ××§":"MQ","××××¨××× ××":"MR","××× ×¡×¨××":"MS","××××":"MT","××××¨××¦×××¡":"MU","×××××××":"MV","××××××":"MW","××§×¡××§×":"MX","×××××":"MY","×××××××§":"MZ","× ×××××":"NA","×§×××× ×× ××××©×":"NC","× ×××³×¨":"NE","××× × ××¨×¤××§":"NF","× ×××¨××":"NG","× ××§×¨××××":"NI","×××× ×":"NL","× ××¨×××××":"NO","× ×¤××":"NP","× ×××¨×":"NR","× ××××":"NU","× ×× ×××× ×":"NZ","×¢××××":"OM","×¤× ××":"PA","×¤×¨×":"PE","×¤×××× ××× ××¦×¨×¤×ª××ª":"PF","×¤×¤××× ××× ××× ××××©×":"PG","×¤××××¤×× ××":"PH","×¤×§××¡××":"PK","×¤××××":"PL","×¡× × ×¤×××¨ ××××§×××":"PM","××× ×¤×××§×¨×":"PN","×¤××¨×× ×¨××§×":"PR","××©×××× ××¤××¡××× ×××":"PS","×¤××¨××××":"PT","×¤××××":"PW","×¤×¨×××××":"PY","×§×××¨":"QA","×××§××× ×× ×¤×¨××©×":"QO","×¨××× ×××":"RE","×¨××× ××":"RO","×¡×¨×××":"RS","×¨××¡××":"RU","×¨××× ××":"RW","×¢×¨× ××¡×¢××××ª":"SA","××× ×©×××":"SB","××× ×¡×××©×":"SC","×¡×××":"SD","×©×××××":"SE","×¡×× ××¤××¨":"SG","×¡× × ××× ×":"SH","×¡×××× ××":"SI","×¡××××××¨× ×××³×× ×××××":"SJ","×¡××××§××":"SK","×¡×××¨× ×××× ×":"SL","×¡× ××¨×× ×":"SM","×¡× ××":"SN","×¡×××××":"SO","×¡××¨×× ×":"SR","××¨×× ×¡×××":"SS","×¡×× ×××× ××¤×¨×× ×¡××¤×":"ST","×× ×¡×××××¨":"SV","×¡×× × ×××¨××":"SX","×¡××¨××":"SY","×¡×××××× ×":"SZ","××¨××¡×× ×× ×§×× ×":"TA","××× ×××¨×§×¡ ××§×××§××¡":"TC","×¦×³××":"TD","××¨××××¨×××ª ××¨×××××ª ×©× ×¦×¨×¤×ª":"TF","××××":"TG","×ª×××× ×":"TH","×××³××§××¡××":"TJ","×××§×××":"TK","×××¨× ×××××¨":"TL","×××¨×§×× ××¡××":"TM","×ª×× ××¡××":"TN","××× ××":"TO","×××¨×§××":"TR","××¨×× ××× ××××××":"TT","×××××":"TV","×××××××":"TW","×× ×× ××":"TZ","×××§×¨××× ×":"UA","×××× ××":"UG","×××× ××××£ ××¨×¦××ª ×××¨××ª":"UM","××¨×¦××ª ×××¨××ª":"US","×××¨××××××":"UY","×××××§××¡××":"UZ","××××ª××§×":"VA","×¡× × ××× ×¡× × ××××¨× ××× ××":"VC","×× ×¦××××":"VE","××× ×××ª××× ×××¨×××××":"VG","××× ×××ª××× ××××¨××§× ×××":"VI","××××× ××":"VN","×× ××××":"VU","××× ×××××¡ ××¤×××× ×":"WF","×¡××××":"WS","×ª×××":"YE","×××××":"YT","××¨×× ××¤×¨××§×":"ZA","×××××":"ZM","×××××××××":"ZW","××××¨ ×× ××××¢":"ZZ"};
ilib.data.ctrynames_hi = {"à¤à¤¶à¤¿à¤¯à¤¾":"142","à¤®à¤§à¥à¤¯ à¤à¤¶à¤¿à¤¯à¤¾":"143","à¤ªà¤¶à¥à¤à¤¿à¤®à¥ à¤à¤¶à¤¿à¤¯à¤¾":"145","à¤¯à¥à¤°à¥à¤ª":"150","à¤ªà¥à¤°à¥à¤µà¥ à¤¯à¥à¤°à¥à¤ª":"151","à¤à¤¤à¥à¤¤à¤°à¥ à¤¯à¥à¤°à¥à¤ª":"154","à¤ªà¤¶à¥à¤à¤¿à¤®à¥ à¤¯à¥à¤°à¥à¤ªà¥":"155","à¤²à¥à¤à¤¿à¤¨ à¤à¤®à¥à¤°à¤¿à¤à¤¾ à¤à¤° à¤à¥à¤°à¤¿à¤¬à¤¿à¤¯à¤¨":"419","à¤¦à¥à¤¨à¤¿à¤¯à¤¾":"001","à¤à¤«à¥à¤°à¥à¤à¤¾":"002","à¤à¤¤à¥à¤¤à¤° à¤à¤®à¥à¤°à¤¿à¤à¤¾":"003","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¤®à¥à¤°à¤¿à¤à¤¾":"005","à¤à¤¶à¤¿à¤à¤¨à¤¿à¤¯à¤¾":"009","à¤ªà¤¶à¥à¤à¤¿à¤®à¥ à¤à¤«à¥à¤°à¥à¤à¤¾":"011","à¤®à¤§à¥à¤¯ à¤à¤®à¤°à¥à¤à¤¾":"013","à¤ªà¥à¤°à¥à¤µà¥ à¤à¤«à¥à¤°à¥à¤à¤¾":"014","à¤à¤¤à¥à¤¤à¤°à¥ à¤à¤«à¥à¤°à¥à¤à¤¾":"015","à¤®à¤§à¥à¤¯ à¤à¤«à¥à¤°à¥à¤à¤¾":"017","à¤¦à¤à¥à¤·à¤¿à¤£à¥ à¤à¤«à¥à¤°à¥à¤à¤¾":"018","à¤à¤®à¥à¤°à¥à¤à¤¾à¤¸":"019","à¤à¤¤à¥à¤¤à¤°à¥ à¤à¤®à¥à¤°à¤¿à¤à¤¾":"021","à¤à¥à¤°à¤¿à¤¬à¤¿à¤¯à¤¨":"029","à¤ªà¥à¤°à¥à¤µà¥ à¤à¤¶à¤¿à¤¯à¤¾":"030","à¤¦à¤à¥à¤·à¤¿à¤£à¥ à¤à¤¶à¤¿à¤¯à¤¾":"034","à¤¦à¤à¥à¤·à¤¿à¤£-à¤ªà¥à¤°à¥à¤µ à¤à¤¶à¤¿à¤¯à¤¾":"035","à¤¦à¤à¥à¤·à¤¿à¤£à¥ à¤¯à¥à¤°à¥à¤ª":"039","à¤à¤¸à¥à¤à¥à¤°à¥à¤²à¤¿à¤¯à¤¾ à¤à¤µà¤ à¤¨à¥à¤¯à¥à¤à¥à¤²à¥à¤à¤¡":"053","à¤®à¥à¤²à¤¾à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"054","à¤®à¤¾à¤à¤à¥à¤°à¥à¤¨à¥à¤¶à¤¿à¤¯à¤¨ à¤°à¥à¤à¤¨":"057","à¤ªà¥à¤²à¥à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"061","à¤à¤¸à¥à¤à¤¶à¤¨ à¤à¤à¤²à¥à¤à¤¡":"AC","à¤à¤¨à¥à¤¡à¥à¤°à¤¾":"AD","à¤¸à¤à¤¯à¥à¤à¥à¤¤ à¤à¤°à¤¬ à¤à¤®à¥à¤°à¤¾à¤¤":"AE","à¤à¤«à¤¼à¤à¤¾à¤¨à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"AF","à¤à¤à¤à¤¿à¤à¥à¤ à¤à¤° à¤¬à¤°à¤¬à¥à¤¡à¤¾":"AG","à¤à¤à¤à¥à¤à¤²à¤¾":"AI","à¤à¤²à¥à¤¬à¤¾à¤¨à¤¿à¤¯à¤¾":"AL","à¤à¤°à¥à¤®à¥à¤¨à¤¿à¤¯à¤¾":"AM","à¤¨à¥à¤¦à¤°à¤²à¥à¤à¤¡à¥à¤¸ à¤à¤à¤à¤¿à¤²à¥à¤à¤¼":"AN","à¤à¤à¤à¥à¤²à¤¾":"AO","à¤à¤à¤à¤¾à¤°à¥à¤à¤à¤¿à¤à¤¾":"AQ","à¤à¤°à¥à¤à¥à¤¨à¥à¤à¥à¤¨à¤¾":"AR","à¤à¤®à¥à¤°à¤¿à¤à¥ à¤¸à¤®à¥à¤":"AS","à¤à¤¸à¥à¤à¥à¤°à¤¿à¤¯à¤¾":"AT","à¤à¤¸à¥à¤à¥à¤°à¥à¤²à¤¿à¤¯à¤¾":"AU","à¤à¤°à¥à¤¬à¤¾":"AW","à¤à¤²à¥à¤à¤¡ à¤¦à¥à¤µà¥à¤ªà¤¸à¤®à¥à¤¹":"AX","à¤à¤à¤¼à¤°à¤¬à¥à¤à¤¾à¤¨":"AZ","à¤¬à¥à¤¸à¥à¤¨à¤¿à¤¯à¤¾ à¤à¤° à¤¹à¤°à¥à¤à¤¼à¤¿à¤à¥à¤µà¤¿à¤¨à¤¾":"BA","à¤¬à¤¾à¤°à¤¬à¤¾à¤¡à¥à¤¸":"BB","à¤¬à¤¾à¤à¤à¥à¤²à¤¾à¤¦à¥à¤¶":"BD","à¤¬à¥à¤²à¥à¤à¤¿à¤¯à¤®":"BE","à¤¬à¥à¤°à¥à¤à¤¿à¤¨à¤¾ à¤«à¤¼à¤¾à¤¸à¥":"BF","à¤¬à¥à¤²à¥à¤à¤¾à¤°à¤¿à¤¯à¤¾":"BG","à¤¬à¤¾à¤¹à¤°à¥à¤¨":"BH","à¤¬à¥à¤°à¥à¤à¤¡à¥":"BI","à¤¬à¥à¤¨à¤¿à¤¨":"BJ","à¤¸à¥à¤à¤ à¤¬à¤¾à¤°à¥à¤¥à¥à¤²à¥à¤®à¥":"BL","à¤¬à¤°à¤®à¥à¤¡à¤¾":"BM","à¤¬à¥à¤°à¥à¤¨à¥à¤":"BN","à¤¬à¥à¤²à¥à¤µà¤¿à¤¯à¤¾":"BO","à¤à¥à¤°à¥à¤¬à¤¿à¤¯à¤¾à¤ à¤¨à¥à¤¦à¤°à¤²à¥à¤à¤¡à¥à¤¸":"BQ","à¤¬à¥à¤°à¤¾à¤à¥à¤²":"BR","à¤¬à¤¹à¤¾à¤®à¤¾":"BS","à¤­à¥à¤à¤¾à¤¨":"BT","à¤¬à¥à¤µà¥à¤¤ à¤¦à¥à¤µà¥à¤ª":"BV","à¤¬à¥à¤¤à¥à¤¸à¥à¤µà¤¾à¤¨à¤¾":"BW","à¤¬à¥à¤²à¤¾à¤°à¥à¤¸":"BY","à¤¬à¥à¤²à¤¿à¤":"BZ","à¤à¤¨à¤¾à¤¡à¤¾":"CA","à¤à¥à¤à¥à¤¸ à¤¦à¥à¤µà¥à¤ª":"CC","à¤à¥à¤à¤à¥ à¤à¤¨à¤¤à¤¾à¤à¤¤à¥à¤°à¤¿à¤ à¤à¤£à¤¤à¤à¤¤à¥à¤°":"CD","à¤¸à¥à¤à¤à¥à¤°à¤² à¤à¤«à¥à¤°à¥à¤à¤¨ à¤°à¤¿à¤ªà¤¬à¥à¤²à¤¿à¤":"CF","à¤à¤¾à¤à¤à¥":"CG","à¤¸à¥à¤µà¤¿à¤¸":"CH","à¤à¤à¤µà¤°à¥ à¤à¥à¤¸à¥à¤":"CI","à¤à¥à¤ à¤¦à¥à¤µà¥à¤ªà¤¸à¤®à¥à¤¹":"CK","à¤à¤¿à¤²à¥":"CL","à¤à¥à¤®à¤°à¥à¤¨":"CM","à¤à¥à¤¨":"CN","à¤à¥à¤²à¤®à¥à¤¬à¤¿à¤¯à¤¾":"CO","à¤à¥à¤²à¤¿à¤ªà¤°à¥à¤à¤¨ à¤à¤à¤²à¥à¤à¤¡":"CP","à¤à¥à¤¸à¥à¤à¤¾à¤°à¥à¤à¤¾":"CR","à¤à¥à¤¯à¥à¤¬à¤¾":"CU","à¤à¥à¤ª à¤µà¤°à¥à¤¡à¥":"CV","à¤à¥à¤¯à¥à¤°à¤¾à¤¸à¤¾à¤":"CW","à¤à¥à¤°à¤¿à¤¸à¤®à¤¸ à¤¦à¥à¤µà¥à¤ª":"CX","à¤¸à¤¾à¤à¤ªà¥à¤°à¤¸":"CY","à¤à¥à¤ à¤à¤£à¤°à¤¾à¤à¥à¤¯":"CZ","à¤à¤°à¥à¤®à¤¨à¥":"DE","à¤¡à¤¿à¤à¤à¥ à¤à¤¾à¤°à¥à¤¸à¤¿à¤¯à¤¾":"DG","à¤à¤¿à¤¬à¥à¤¤à¥":"DJ","à¤¡à¥à¤¨à¤®à¤¾à¤°à¥à¤":"DK","à¤¡à¥à¤®à¤¿à¤¨à¤¿à¤":"DM","à¤¡à¥à¤®à¤¿à¤¨à¤¿à¤à¤¨ à¤à¤£à¤°à¤¾à¤à¥à¤¯":"DO","à¤à¤²à¥à¤à¥à¤°à¤¿à¤¯à¤¾":"DZ","à¤¸à¥à¤à¤à¤¾ à¤à¤° à¤®à¥à¤²à¤¿à¤²à¤¾":"EA","à¤à¤à¥à¤µà¤¾à¤¡à¥à¤°":"EC","à¤à¤¸à¥à¤à¥à¤¨à¤¿à¤¯à¤¾":"EE","à¤®à¤¿à¤¸à¥à¤°":"EG","à¤ªà¤¶à¥à¤à¤¿à¤®à¥ à¤¸à¤¹à¤¾à¤°à¤¾":"EH","à¤à¤°à¤¿à¤à¥à¤°à¤¿à¤¯à¤¾":"ER","à¤¸à¥à¤ªà¥à¤¨":"ES","à¤à¤¥à¤¿à¤¯à¥à¤ªà¤¿à¤¯à¤¾":"ET","à¤¯à¥à¤°à¥à¤ªà¥à¤¯ à¤¸à¤à¤":"EU","à¤«à¤¿à¤¨à¤²à¥à¤à¤¡":"FI","à¤«à¤¿à¤à¥":"FJ","à¤«à¤¼à¥à¤à¤²à¥à¤à¤¡ à¤¦à¥à¤µà¥à¤ª":"FK","à¤®à¤¾à¤à¤à¥à¤°à¥à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"FM","à¤«à¤°à¥à¤ à¤¦à¥à¤µà¥à¤ª":"FO","à¤«à¥à¤°à¤¾à¤à¤¸":"FR","à¤à¥à¤¬à¥à¤¨":"GA","à¤¬à¥à¤°à¤¿à¤¤à¤¨":"GB","à¤à¥à¤°à¥à¤¨à¥à¤¡à¤¾":"GD","à¤à¥à¤°à¥à¤à¤¿à¤¯à¤¾":"GE","à¤«à¤¼à¥à¤°à¤¾à¤à¤¸à¥à¤¸à¥ à¤à¤¿à¤à¤¨à¤¾":"GF","à¤à¥à¤µà¥à¤°à¥à¤¨à¤¸à¥":"GG","à¤à¤¾à¤¨à¤¾":"GH","à¤à¤¿à¤¬à¥à¤°à¤¾à¤²à¥à¤à¤°":"GI","à¤à¥à¤°à¥à¤¨à¤²à¥à¤£à¥à¤¡":"GL","à¤à¤¾à¤®à¥à¤¬à¤¿à¤¯à¤¾":"GM","à¤à¤¿à¤¨à¥":"GN","à¤à¥à¤µà¤¾à¤¡à¥à¤²à¥à¤ª":"GP","à¤à¤à¥à¤µà¥à¤à¥à¤°à¤¿à¤¯à¤² à¤à¤¿à¤¨à¥":"GQ","à¤à¥à¤°à¥à¤¸":"GR","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¥à¤°à¥à¤à¤¿à¤¯à¤¾ à¤à¤° à¤¦à¤à¥à¤·à¤¿à¤£ à¤¸à¥à¤à¤¡à¤µà¤¿à¤ à¤¦à¥à¤µà¥à¤ªà¤¸à¤®à¥à¤¹":"GS","à¤à¥à¤¤à¥à¤¦à¤¾à¤²à¤¾":"GT","à¤à¥à¤à¤®":"GU","à¤à¥à¤¨à¥-à¤¬à¤¿à¤¸à¤¾à¤":"GW","à¤à¥à¤¯à¤¾à¤¨à¤¾":"GY","à¤¹à¤¾à¤à¤à¤à¤¾à¤à¤ à¤µà¤¿à¤¶à¥à¤· à¤ªà¥à¤°à¤¶à¤¾à¤¸à¤¨à¤¿à¤ à¤à¥à¤·à¥à¤¤à¥à¤° à¤à¥à¤¨":"HK","à¤¹à¤°à¥à¤¡ à¤¦à¥à¤µà¥à¤ª à¤à¤° à¤®à¥à¤à¤¡à¥à¤¨à¥à¤²à¥à¤¡ à¤¦à¥à¤µà¥à¤ª":"HM","à¤¹à¤¾à¤£à¥à¤¡à¥à¤°à¤¸":"HN","à¤à¥à¤°à¥à¤¶à¤¿à¤¯à¤¾":"HR","à¤¹à¤¾à¤à¤¤à¥":"HT","à¤¹à¤à¤à¤°à¥":"HU","à¤à¥à¤¨à¥à¤°à¥ à¤¦à¥à¤µà¥à¤ªà¤¸à¤®à¥à¤¹":"IC","à¤à¤à¤¡à¥à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"ID","à¤à¤¯à¤°à¤²à¥à¤à¤¡":"IE","à¤à¤¸à¤°à¤¾à¤à¤²":"IL","à¤à¤à¤² à¤à¤« à¤®à¥à¤¨":"IM","à¤­à¤¾à¤°à¤¤":"IN","à¤¬à¥à¤°à¤¿à¤à¤¿à¤¶ à¤¹à¤¿à¤à¤¦ à¤®à¤¹à¤¾à¤¸à¤¾à¤à¤°à¥à¤¯ à¤à¥à¤·à¥à¤¤à¥à¤°":"IO","à¤à¤°à¤¾à¤":"IQ","à¤à¤°à¤¾à¤¨":"IR","à¤à¤à¤¸à¤²à¥à¤à¤¡":"IS","à¤à¤à¤²à¥":"IT","à¤à¤°à¥à¤¸à¥":"JE","à¤à¤®à¤¾à¤à¤à¤¾":"JM","à¤à¥à¤°à¥à¤¡à¤¨":"JO","à¤à¤¾à¤ªà¤¾à¤¨":"JP","à¤à¥à¤¨à¥à¤¯à¤¾":"KE","à¤à¤¿à¤°à¥à¤à¤¿à¤à¤¼à¤¤à¤¾à¤¨":"KG","à¤à¤®à¥à¤¬à¥à¤¡à¤¿à¤¯à¤¾":"KH","à¤à¤¿à¤°à¤¿à¤¬à¤¾à¤¤à¥":"KI","à¤à¥à¤®à¥à¤°à¥à¤¸":"KM","à¤¸à¥à¤à¤ à¤à¤¿à¤à¥à¤¸ à¤à¤° à¤¨à¥à¤µà¤¿à¤¸":"KN","à¤à¤¤à¥à¤¤à¤° à¤à¥à¤°à¤¿à¤¯à¤¾":"KP","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¥à¤°à¤¿à¤¯à¤¾":"KR","à¤à¥à¤µà¥à¤¤":"KW","à¤à¥à¤®à¥à¤¨ à¤¦à¥à¤µà¥à¤ªà¤¸à¤®à¥à¤¹":"KY","à¤à¤à¤¾à¤à¤¸à¥à¤¤à¤¾à¤¨":"KZ","à¤²à¤¾à¤à¤¸":"LA","à¤²à¥à¤¬à¤¨à¤¾à¤¨":"LB","à¤¸à¥à¤à¤ à¤²à¥à¤¸à¤¿à¤¯à¤¾":"LC","à¤²à¤¿à¤à¤à¥à¤à¤¸à¥à¤à¥à¤¨":"LI","à¤¶à¥à¤°à¥à¤²à¤à¤à¤¾":"LK","à¤²à¤¾à¤à¤¬à¥à¤°à¤¿à¤¯à¤¾":"LR","à¤²à¥à¤¸à¥à¤¥à¥":"LS","à¤²à¤¿à¤¥à¥à¤à¤¨à¤¿à¤¯à¤¾":"LT","à¤²à¤à¥à¤¸à¤®à¤¬à¤°à¥à¤":"LU","à¤²à¤¾à¤¤à¥à¤µà¤¿à¤¯à¤¾":"LV","à¤²à¥à¤¬à¤¿à¤¯à¤¾":"LY","à¤®à¥à¤°à¤à¥à¤à¥":"MA","à¤®à¥à¤¨à¤¾à¤à¥":"MC","à¤®à¥à¤²à¥à¤¡à¤¾à¤µà¤¿à¤¯à¤¾":"MD","à¤®à¥à¤à¤à¥à¤¨à¥à¤à¥à¤°à¥":"ME","à¤¸à¥à¤à¤ à¤®à¤¾à¤°à¥à¤à¤¿à¤¨":"MF","à¤®à¥à¤¡à¤¾à¤à¤¾à¤¸à¥à¤à¤°":"MG","à¤®à¤¾à¤°à¥à¤¶à¤² à¤¦à¥à¤µà¥à¤ª":"MH","à¤®à¥à¤¸à¥à¤¡à¥à¤¨à¤¿à¤¯à¤¾":"MK","à¤®à¤¾à¤²à¥":"ML","à¤®à¥à¤¯à¤¾à¤¨à¤®à¤¾à¤°":"MM","à¤®à¤à¤à¥à¤²à¤¿à¤¯à¤¾":"MN","à¤®à¤à¤¾à¤ à¤à¥à¤¨":"MO","à¤¨à¥à¤°à¥à¤¦à¤¨ à¤®à¤¾à¤°à¤¿à¤¯à¤¾à¤¨à¤¾ à¤¦à¥à¤µà¥à¤ªà¤¸à¤®à¥à¤¹":"MP","à¤®à¤¾à¤°à¥à¤à¥à¤¨à¤¿à¤":"MQ","à¤®à¥à¤°à¤¿à¤à¤¾à¤¨à¤¿à¤¯à¤¾":"MR","à¤®à¥à¤¨à¥à¤à¥à¤¸à¥à¤°à¤¾à¤":"MS","à¤®à¤¾à¤²à¥à¤à¤¾":"MT","à¤®à¥à¤°à¤¿à¤¶à¤¸":"MU","à¤®à¤¾à¤²à¤¦à¥à¤µ":"MV","à¤®à¤²à¤¾à¤µà¥":"MW","à¤®à¥à¤à¥à¤¸à¤¿à¤à¥":"MX","à¤®à¤²à¥à¤¶à¤¿à¤¯à¤¾":"MY","à¤®à¥à¤à¤¾à¤®à¥à¤¬à¤¿à¤":"MZ","à¤¨à¤¾à¤®à¥à¤¬à¤¿à¤¯à¤¾":"NA","à¤¨à¥à¤¯à¥ à¤à¥à¤²à¥à¤¡à¥à¤¨à¤¿à¤¯à¤¾":"NC","à¤¨à¤¾à¤à¤à¤°":"NE","à¤¨à¥à¤°à¤«à¤¼à¥à¤ à¤¦à¥à¤µà¥à¤ª":"NF","à¤¨à¤¾à¤à¤à¥à¤°à¤¿à¤¯à¤¾":"NG","à¤¨à¤¿à¤à¤¾à¤°à¤¾à¤à¥à¤":"NI","à¤¨à¥à¤¦à¤°à¤²à¥à¤£à¥à¤¡":"NL","à¤¨à¥à¤°à¥à¤µà¥":"NO","à¤¨à¥à¤ªà¤¾à¤²":"NP","à¤¨à¤¾à¤à¤°à¥":"NR","à¤¨à¥à¤¯à¥":"NU","à¤¨à¥à¤¯à¥à¤à¤¼à¥à¤²à¥à¤à¤¡":"NZ","à¤à¤®à¤¾à¤¨":"OM","à¤ªà¤¨à¤¾à¤®à¤¾":"PA","à¤ªà¥à¤°à¥":"PE","à¤«à¤¼à¥à¤°à¤¾à¤à¤¸à¥à¤¸à¥ à¤ªà¥à¤²à¤¿à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"PF","à¤ªà¤¾à¤ªà¥à¤ à¤¨à¥à¤¯à¥ à¤à¤¿à¤¨à¥":"PG","à¤«à¤¿à¤²à¥à¤ªà¤¿à¤à¤¸":"PH","à¤ªà¤¾à¤à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"PK","à¤ªà¥à¤²à¥à¤à¤¡":"PL","à¤¸à¥à¤à¤ à¤ªà¤¿à¤à¤°à¥ à¤à¤° à¤®à¤¿à¤à¥à¤µà¥à¤²à¤¨":"PM","à¤ªà¤¿à¤à¤à¥à¤°à¥à¤¨":"PN","à¤ªà¤°à¥à¤à¥ à¤°à¥à¤à¥":"PR","à¤«à¤¼à¤¿à¤²à¤¿à¤¸à¥à¤¤à¥à¤¨":"PS","à¤ªà¥à¤°à¥à¤¤à¤à¤¾à¤²":"PT","à¤ªà¤²à¤¾à¤":"PW","à¤ªà¤¾à¤°à¤¾à¤à¥à¤":"PY","à¤à¤¤à¤°":"QA","à¤à¤à¤à¤²à¤¾à¤à¤à¤ à¤à¤¶à¤¿à¤¨à¤¿à¤¯à¤¾":"QO","à¤°à¤¿à¤¯à¥à¤¨à¤¿à¤¯à¤¨":"RE","à¤°à¥à¤®à¤¾à¤¨à¤¿à¤¯à¤¾":"RO","à¤¸à¤°à¥à¤¬à¤¿à¤¯à¤¾":"RS","à¤°à¥à¤¸":"RU","à¤°à¥à¤à¤£à¥à¤¡à¤¾":"RW","à¤¸à¤à¤¦à¥ à¤à¤°à¤¬":"SA","à¤¸à¥à¤²à¥à¤®à¤¨ à¤¦à¥à¤µà¥à¤ª":"SB","à¤¸à¥à¤¶à¥à¤²à¥à¤¸":"SC","à¤¸à¥à¤¡à¤¾à¤¨":"SD","à¤¸à¥à¤µà¥à¤¡à¤¨":"SE","à¤¸à¤¿à¤à¤à¤¾à¤ªà¥à¤°":"SG","à¤¸à¥à¤à¤ à¤¹à¥à¤²à¥à¤¨à¤¾":"SH","à¤¸à¥à¤²à¥à¤µà¥à¤¨à¤¿à¤¯à¤¾":"SI","à¤¸à¥à¤µà¤¾à¤²à¤¬à¤°à¥à¤¡ à¤à¤° à¤à¤¾à¤¨ à¤®à¤¾à¤¯à¥à¤¨":"SJ","à¤¸à¥à¤²à¥à¤µà¤¾à¤à¤¿à¤¯à¤¾":"SK","à¤¸à¤¿à¤¯à¤°à¤¾à¤²à¥à¤à¤¨":"SL","à¤¸à¥à¤¨ à¤®à¥à¤°à¥à¤¨à¥":"SM","à¤¸à¥à¤¨à¥à¤à¤²":"SN","à¤¸à¥à¤®à¤¾à¤²à¤¿à¤¯à¤¾":"SO","à¤¸à¥à¤°à¤¿à¤¨à¤¾à¤®":"SR","à¤¦à¤à¥à¤·à¤¿à¤£ à¤¸à¥à¤¡à¤¾à¤¨":"SS","à¤¸à¤¾à¤-à¤¤à¥à¤®-à¤ªà¥à¤°à¤¿à¤à¤¸à¤¿à¤ª":"ST","à¤à¤² à¤¸à¤¾à¤²à¥à¤µà¤¾à¤¡à¥à¤°":"SV","à¤¸à¤¿à¤à¤ à¤®à¤¾à¤°à¥à¤à¤¿à¤¨":"SX","à¤¸à¥à¤°à¤¿à¤¯à¤¾":"SY","à¤¸à¥à¤à¤à¥à¤²à¥à¤à¤¡":"SZ","à¤¤à¥à¤°à¤¿à¤¸à¥à¤à¤¾à¤¨ à¤¡à¤¾ à¤à¥à¤¨à¤¾":"TA","à¤¤à¥à¤°à¥à¤à¥ à¤à¤°à¥ à¤à¥à¤à¥à¤à¤¼ à¤¦à¥à¤µà¥à¤ª":"TC","à¤à¤¾à¤¡":"TD","à¤«à¤¼à¥à¤°à¤¾à¤à¤¸à¥à¤¸à¥ à¤¦à¤à¥à¤·à¤¿à¤£à¥ à¤à¥à¤·à¥à¤¤à¥à¤°":"TF","à¤à¥à¤à¥":"TG","à¤¥à¤¾à¤à¤²à¥à¤à¤¡":"TH","à¤¤à¤¾à¤à¤¿à¤à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"TJ","à¤¤à¥à¤à¥à¤²à¤¾à¤":"TK","à¤ªà¥à¤°à¥à¤µà¥ à¤¤à¤¿à¤®à¥à¤°":"TL","à¤¤à¥à¤°à¥à¤à¤®à¥à¤¨à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"TM","à¤¤à¥à¤¨à¤¿à¤¶à¤¿à¤¯à¤¾":"TN","à¤à¥à¤à¤à¤¾":"TO","à¤¤à¥à¤°à¥à¤à¥":"TR","à¤¤à¥à¤°à¤¿à¤¨à¤¿à¤¡à¤¾à¤¡ à¤à¤° à¤à¥à¤¬à¥à¤à¥":"TT","à¤¤à¥à¤µà¤¾à¤²à¥":"TV","à¤¤à¤¾à¤à¤µà¤¾à¤¨":"TW","à¤¤à¤à¤à¤¾à¤¼à¤¨à¤¿à¤¯à¤¾":"TZ","à¤¯à¥à¤à¥à¤°à¥à¤¨":"UA","à¤¯à¥à¤à¤¾à¤à¤¡à¤¾":"UG","à¤¯à¥à¤¨à¤¾à¤à¤à¥à¤¡ à¤¸à¥à¤à¥à¤à¥à¤¸ à¤®à¤¾à¤à¤¨à¤° à¤à¤à¤à¤²à¤¾à¤à¤à¤ à¤¦à¥à¤µà¥à¤ªà¤¸à¤®à¥à¤¹":"UM","à¤¸à¤à¤¯à¥à¤à¥à¤¤ à¤°à¤¾à¤à¥à¤¯ à¤à¤®à¥à¤°à¤¿à¤à¤¾":"US","à¤¯à¥à¤°à¥à¤à¥à¤":"UY","à¤à¤à¤¬à¥à¤à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"UZ","à¤µà¥à¤à¤¿à¤à¤¨":"VA","à¤¸à¥à¤à¤ à¤µà¤¿à¤¨à¤¸à¥à¤à¤ à¤à¤à¤¡ à¤à¥à¤°à¥à¤¨à¤¾à¤¡à¤¾à¤à¤¨à¥à¤¸":"VC","à¤µà¥à¤¨à¥à¤à¥à¤à¤²à¤¾":"VE","à¤¬à¥à¤°à¤¿à¤à¤¿à¤¶ à¤µà¤°à¥à¤à¤¿à¤¨ à¤¦à¥à¤µà¥à¤ªà¤¸à¤®à¥à¤¹":"VG","à¤à¤®à¥à¤°à¤¿à¤à¥ à¤µà¤°à¥à¤à¤¿à¤¨ à¤à¤¾à¤ªà¥":"VI","à¤µà¤¿à¤¯à¤¤à¤¨à¤¾à¤®":"VN","à¤µà¤¾à¤¨à¥à¤à¤¤à¥":"VU","à¤µà¤¾à¤²à¤¿à¤¸ à¤à¤° à¤«à¤¼à¥à¤¯à¥à¤à¥à¤¨à¤¾":"WF","à¤¸à¤®à¥à¤":"WS","à¤¯à¤®à¤¨":"YE","à¤®à¥à¤¯à¤":"YT","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¤«à¥à¤°à¥à¤à¤¾":"ZA","à¤à¤¾à¤®à¥à¤¬à¤¿à¤¯à¤¾":"ZM","à¤à¤¿à¤®à¥à¤¬à¤¾à¤¬à¥à¤µà¥":"ZW","à¤à¤à¥à¤à¤¾à¤¤ à¤¯à¤¾ à¤à¤µà¥à¤§ à¤à¥à¤·à¥à¤¤à¥à¤°":"ZZ"};
ilib.data.ctrynames_hr = {"Azija":"142","Srednja Azija":"143","Zapadna Azija":"145","Europa":"150","IstoÄna Europa":"151","Sjeverna Europa":"154","Zapadna Europa":"155","Latinska Amerika":"419","Svijet":"001","Afrika":"002","SjevernoameriÄki kontinent":"003","JuÅ¾na Amerika":"005","Oceanija":"009","Zapadna Afrika":"011","Centralna Amerika":"013","IstoÄna Afrika":"014","Sjeverna Afrika":"015","SrediÅ¡nja Afrika":"017","JuÅ¾na Afrika":"018","Amerike":"019","Sjeverna Amerika":"021","Karibi":"029","IstoÄna Azija":"030","JuÅ¾na Azija":"034","JugoistoÄna Azija":"035","JuÅ¾na Europa":"039","Australazija":"053","Melanezija":"054","Mikronezki oblast":"057","Polinezija":"061","Otok Ascension":"AC","Andora":"AD","Ujedinjeni Arapski Emirati":"AE","Afganistan":"AF","Antigua i Barbuda":"AG","Anguila":"AI","Albanija":"AL","Armenija":"AM","Nizozemski Antili":"AN","Angola":"AO","Antarktik":"AQ","Argentina":"AR","AmeriÄka Samoa":"AS","Austrija":"AT","Australija":"AU","Aruba":"AW","Otoci Aland":"AX","AzerbajdÅ¾an":"AZ","Bosna i Hercegovina":"BA","Barbados":"BB","BangladeÅ¡":"BD","Belgija":"BE","Burkina Faso":"BF","Bugarska":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","Sveti Bartolomej":"BL","Bermuda":"BM","Brunej":"BN","Bolivija":"BO","Karipski otoci Nizozemske":"BQ","Brazil":"BR","Bahami":"BS","Butan":"BT","Otok Bouvet":"BV","Bocvana":"BW","Bjelorusija":"BY","Belize":"BZ","Kanada":"CA","Kokosovi [Keeling] Otoci":"CC","Demokratska Republika Kongo":"CD","SrednjoafriÄka Republika":"CF","Kongo - Brazzaville":"CG","Å vicarska":"CH","Bjelokosna Obala":"CI","Kukovi Otoci":"CK","Äile":"CL","Kamerun":"CM","Kina":"CN","Kolumbija":"CO","Otok Clipperton":"CP","Kostarika":"CR","Kuba":"CU","Zeleni Rt":"CV","CuraÃ§ao":"CW","BoÅ¾iÄni Otok":"CX","Cipar":"CY","ÄeÅ¡ka Republika":"CZ","NjemaÄka":"DE","Diego Garcia":"DG","DÅ¾ibuti":"DJ","Danska":"DK","Dominika":"DM","Dominikanska Republika":"DO","AlÅ¾ir":"DZ","Ceuta i Melilla":"EA","Ekvador":"EC","Estonija":"EE","Egipat":"EG","Zapadna Sahara":"EH","Eritreja":"ER","Å panjolska":"ES","Etiopija":"ET","Europska Unija":"EU","Finska":"FI","FidÅ¾i":"FJ","Falklandski Otoci":"FK","Mikronezija":"FM","Farski Otoci":"FO","Francuska":"FR","Gabon":"GA","Velika Britanija":"GB","Grenada":"GD","Gruzija":"GE","Francuska Gvajana":"GF","Guernsey":"GG","Gana":"GH","Gibraltar":"GI","Grenland":"GL","Gambija":"GM","Gvineja":"GN","Guadeloupe":"GP","Ekvatorska Gvineja":"GQ","GrÄka":"GR","JuÅ¾na Gruzija i JuÅ¾ni SendviÄ Otoci":"GS","Gvatemala":"GT","Guam":"GU","Gvineja Bisau":"GW","Gvajana":"GY","Kinesko Posebno Upravno PodruÄje Hong Kong":"HK","Otok Heard i Otoci McDonald":"HM","Honduras":"HN","Hrvatska":"HR","Haiti":"HT","MaÄarska":"HU","Kanarski Otoci":"IC","Indonezija":"ID","Irska":"IE","Izrael":"IL","Otok Man":"IM","Indija":"IN","Britanski Teritorij Indijskog Oceana":"IO","Irak":"IQ","Iran":"IR","Island":"IS","Italija":"IT","Jersey":"JE","Jamajka":"JM","Jordan":"JO","Japan":"JP","Kenija":"KE","Kirgistan":"KG","KambodÅ¾a":"KH","Kiribati":"KI","Komori":"KM","Sveti Kristofor i Nevis":"KN","Sjeverna Koreja":"KP","JuÅ¾na Koreja":"KR","Kuvajt":"KW","Kajmanski Otoci":"KY","Kazakstan":"KZ","Laos":"LA","Libanon":"LB","Sveta Lucija":"LC","LihtenÅ¡tajn":"LI","Å ri Lanka":"LK","Liberija":"LR","Lesoto":"LS","Litva":"LT","Luksemburg":"LU","Latvija":"LV","Libija":"LY","Maroko":"MA","Monako":"MC","Moldavija":"MD","Crna Gora":"ME","Sveti Martin":"MF","Madagaskar":"MG","MarÅ¡alovi Otoci":"MH","Makedonija":"MK","Mali":"ML","Mijanmar [Burma]":"MM","Mongolija":"MN","Kinesko Posebno Upravno PodruÄje Makao":"MO","Sjeverni Marijanski Otoci":"MP","Martinik":"MQ","Mauritanija":"MR","Montserat":"MS","Malta":"MT","Mauricijus":"MU","Maldivi":"MV","Malavi":"MW","Meksiko":"MX","Malezija":"MY","Mozambik":"MZ","Namibija":"NA","Nova Kaledonija":"NC","Niger":"NE","Otok Norfolk":"NF","Nigerija":"NG","Nikaragva":"NI","Nizozemska":"NL","NorveÅ¡ka":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Novi Zeland":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Francuska Polinezija":"PF","Papua Nova Gvineja":"PG","Filipini":"PH","Pakistan":"PK","Poljska":"PL","Sveti Petar i Mikelon":"PM","Otoci Pitcairn":"PN","Portoriko":"PR","Palestinsko PodruÄje":"PS","Portugal":"PT","Palau":"PW","Paragvaj":"PY","Katar":"QA","Ostala oceanija":"QO","Reunion":"RE","Rumunjska":"RO","Srbija":"RS","Rusija":"RU","Ruanda":"RW","Saudijska Arabija":"SA","Solomonski Otoci":"SB","SejÅ¡eli":"SC","Sudan":"SD","Å vedska":"SE","Singapur":"SG","Sveta Helena":"SH","Slovenija":"SI","Svalbard i Jan Mayen":"SJ","SlovaÄka":"SK","Sijera Leone":"SL","San Marino":"SM","Senegal":"SN","Somalija":"SO","Surinam":"SR","JuÅ¾ni Sudan":"SS","Sveti Toma i Prinsipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Sirija":"SY","Svazi":"SZ","Tristan da Cunha":"TA","Turkski i Kaikos Otoci":"TC","Äad":"TD","Francuski JuÅ¾ni Teritoriji":"TF","Togo":"TG","Tajland":"TH","TadÅ¾ikistan":"TJ","Tokelau":"TK","IstoÄni Timor":"TL","Turkmenistan":"TM","Tunis":"TN","Tonga":"TO","Turska":"TR","Trinidad i Tobago":"TT","Tuvalu":"TV","Tajvan":"TW","Tanzanija":"TZ","Ukrajina":"UA","Uganda":"UG","Ujedinjene DrÅ¾ave Manjih PacifiÄkih Otoka":"UM","Sjedinjene DrÅ¾ave":"US","Urugvaj":"UY","Uzbekistan":"UZ","Grad Vatikan":"VA","Sveti Vincent i Grenadini":"VC","Venezuela":"VE","Britanski DjeviÄanski Otoci":"VG","AmeriÄki DjeviÄanski Otoci":"VI","Vijetnam":"VN","Vanuatu":"VU","Wallis i Futuna":"WF","Samoa":"WS","Jemen":"YE","Majote":"YT","JuÅ¾noafriÄka Republika":"ZA","Zambija":"ZM","Zimbabve":"ZW","nepoznato podruÄje":"ZZ"};
ilib.data.ctrynames_hu = {"Ãzsia":"142","KÃ¶zÃ©p-Ãzsia":"143","Nyugat-Ãzsia":"145","EurÃ³pa":"150","Kelet-EurÃ³pa":"151","Ãszak-EurÃ³pa":"154","Nyugat-EurÃ³pa":"155","Latin-Amerika":"419","VilÃ¡g":"001","Afrika":"002","Ãszak-Amerika":"003","DÃ©l-Amerika":"005","ÃceÃ¡nia":"009","Nyugat-Afrika":"011","KÃ¶zÃ©p-Amerika":"013","Kelet-Afrika":"014","Ãszak-Afrika":"015","KÃ¶zÃ©p-Afrika":"017","Afrika dÃ©li rÃ©sze":"018","Amerika":"019","Amerika Ã©szaki rÃ©sze":"021","Karib-tÃ©rsÃ©g":"029","Kelet-Ãzsia":"030","DÃ©l-Ãzsia":"034","DÃ©lkelet-Ãzsia":"035","DÃ©l-EurÃ³pa":"039","AusztrÃ¡lÃ¡zsia":"053","MelanÃ©zia":"054","MikronÃ©ziai rÃ©giÃ³":"057","PolinÃ©zia":"061","Ascension-sziget":"AC","Andorra":"AD","EgyesÃ¼lt Arab EmirÃ¡tus":"AE","AfganisztÃ¡n":"AF","Antigua Ã©s Barbuda":"AG","Anguilla":"AI","AlbÃ¡nia":"AL","ÃrmÃ©nyorszÃ¡g":"AM","Holland AntillÃ¡k":"AN","Angola":"AO","Antarktisz":"AQ","ArgentÃ­na":"AR","Amerikai Szamoa":"AS","Ausztria":"AT","AusztrÃ¡lia":"AU","Aruba":"AW","Ãland-szigetek":"AX","AzerbajdzsÃ¡n":"AZ","Bosznia-Hercegovina":"BA","Barbados":"BB","Banglades":"BD","Belgium":"BE","Burkina Faso":"BF","BulgÃ¡ria":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","Saint BarthÃ©lemy":"BL","Bermuda":"BM","Brunei":"BN","BolÃ­via":"BO","Holland Karib-tÃ©rsÃ©g":"BQ","BrazÃ­lia":"BR","Bahama-szigetek":"BS","BhutÃ¡n":"BT","Bouvet-sziget":"BV","Botswana":"BW","FehÃ©roroszorszÃ¡g":"BY","Belize":"BZ","Kanada":"CA","KÃ³kusz-szigetek":"CC","KongÃ³ - Kinshasa":"CD","KÃ¶zÃ©p-afrikai KÃ¶ztÃ¡rsasÃ¡g":"CF","KongÃ³ - Brazzaville":"CG","SvÃ¡jc":"CH","ElefÃ¡ntcsontpart":"CI","Cook-szigetek":"CK","Chile":"CL","Kamerun":"CM","KÃ­na":"CN","Kolumbia":"CO","Clipperton-sziget":"CP","Costa Rica":"CR","Kuba":"CU","ZÃ¶ld-foki KÃ¶ztÃ¡rsasÃ¡g":"CV","CuraÃ§ao":"CW","KarÃ¡csony-szigetek":"CX","Ciprus":"CY","CsehorszÃ¡g":"CZ","NÃ©metorszÃ¡g":"DE","Diego Garcia":"DG","Dzsibuti":"DJ","DÃ¡nia":"DK","Dominika":"DM","Dominikai KÃ¶ztÃ¡rsasÃ¡g":"DO","AlgÃ©ria":"DZ","Ceuta Ã©s Melilla":"EA","Ecuador":"EC","ÃsztorszÃ¡g":"EE","Egyiptom":"EG","Nyugat-Szahara":"EH","Eritrea":"ER","SpanyolorszÃ¡g":"ES","EtiÃ³pia":"ET","EurÃ³pai UniÃ³":"EU","FinnorszÃ¡g":"FI","Fidzsi":"FJ","Falkland-szigetek":"FK","MikronÃ©zia":"FM","FerÃ¶er-szigetek":"FO","FranciaorszÃ¡g":"FR","Gabon":"GA","EgyesÃ¼lt KirÃ¡lysÃ¡g":"GB","Grenada":"GD","GrÃºzia":"GE","Francia Guyana":"GF","Guernsey":"GG","GhÃ¡na":"GH","GibraltÃ¡r":"GI","GrÃ¶nland":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","EgyenlÃ­tÅi-Guinea":"GQ","GÃ¶rÃ¶gorszÃ¡g":"GR","DÃ©l GrÃºzia Ã©s a DÃ©li Szendvics-szigetek":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Hongkong SAR KÃ­na":"HK","Heard Ã©s McDonald Szigetek":"HM","Honduras":"HN","HorvÃ¡torszÃ¡g":"HR","Haiti":"HT","MagyarorszÃ¡g":"HU","KanÃ¡ri-szigetek":"IC","IndonÃ©zia":"ID","ÃrorszÃ¡g":"IE","Izrael":"IL","Man-sziget":"IM","India":"IN","Brit Indiai-Ã³ceÃ¡ni TerÃ¼let":"IO","Irak":"IQ","IrÃ¡n":"IR","Izland":"IS","OlaszorszÃ¡g":"IT","Jersey":"JE","Jamaica":"JM","JordÃ¡nia":"JO","JapÃ¡n":"JP","Kenya":"KE","KirgizisztÃ¡n":"KG","Kambodzsa":"KH","Kiribati":"KI","Comore-szigetek":"KM","Saint Kitts Ã©s Nevis":"KN","Ãszak-Korea":"KP","DÃ©l-Korea":"KR","Kuvait":"KW","KajmÃ¡n-szigetek":"KY","KazahsztÃ¡n":"KZ","Laosz":"LA","Libanon":"LB","Santa Lucia":"LC","Liechtenstein":"LI","SrÃ­ Lanka":"LK","LibÃ©ria":"LR","Lesotho":"LS","LitvÃ¡nia":"LT","Luxemburg":"LU","LettorszÃ¡g":"LV","LÃ­bia":"LY","MarokkÃ³":"MA","Monaco":"MC","Moldova":"MD","MontenegrÃ³":"ME","Saint Martin":"MF","MadagaszkÃ¡r":"MG","Marshall-szigetek":"MH","MacedÃ³nia":"MK","Mali":"ML","Mianmar [Burma]":"MM","MongÃ³lia":"MN","MakaÃ³ SAR KÃ­na":"MO","Ãszaki Mariana-szigetek":"MP","Martinique":"MQ","MauritÃ¡nia":"MR","Montserrat":"MS","MÃ¡lta":"MT","Mauritius":"MU","MaldÃ­v-szigetek":"MV","Malawi":"MW","MexikÃ³":"MX","Malajzia":"MY","Mozambik":"MZ","NamÃ­bia":"NA","Ãj-KaledÃ³nia":"NC","Niger":"NE","Norfolk-sziget":"NF","NigÃ©ria":"NG","Nicaragua":"NI","Hollandia":"NL","NorvÃ©gia":"NO","NepÃ¡l":"NP","Nauru":"NR","Niue":"NU","Ãj-ZÃ©land":"NZ","OmÃ¡n":"OM","Panama":"PA","Peru":"PE","Francia PolinÃ©zia":"PF","PÃ¡pua Ãj-Guinea":"PG","FÃ¼lÃ¶p-szigetek":"PH","PakisztÃ¡n":"PK","LengyelorszÃ¡g":"PL","Saint Pierre Ã©s Miquelon":"PM","Pitcairn-szigetek":"PN","Puerto Rico":"PR","Palesztin TerÃ¼let":"PS","PortugÃ¡lia":"PT","Palau":"PW","Paraguay":"PY","Katar":"QA","KÃ¼lsÅ-ÃceÃ¡nia":"QO","Reunion":"RE","RomÃ¡nia":"RO","Szerbia":"RS","OroszorszÃ¡gi FÃ¶derÃ¡ciÃ³":"RU","Ruanda":"RW","SzaÃºd-ArÃ¡bia":"SA","Salamon-szigetek":"SB","Seychelle-szigetek":"SC","SzudÃ¡n":"SD","SvÃ©dorszÃ¡g":"SE","SzingapÃºr":"SG","Szent Helena":"SH","SzlovÃ©nia":"SI","SpitzbergÃ¡k Ã©s Jan Mayen-szigetek":"SJ","SzlovÃ¡kia":"SK","Sierra Leone":"SL","San Marino":"SM","SzenegÃ¡l":"SN","SzomÃ¡lia":"SO","Suriname":"SR","DÃ©l-SzudÃ¡n":"SS","Sao TomÃ© Ã©s PrÃ­ncipe":"ST","Salvador":"SV","Sint Maarten":"SX","SzÃ­ria":"SY","SzvÃ¡zifÃ¶ld":"SZ","Tristan da Cunha":"TA","Turks- Ã©s Caicos-szigetek":"TC","CsÃ¡d":"TD","Francia DÃ©li TerÃ¼letek":"TF","Togo":"TG","ThaifÃ¶ld":"TH","TadzsikisztÃ¡n":"TJ","Tokelau":"TK","Kelet-Timor":"TL","TÃ¼rkmenisztÃ¡n":"TM","TunÃ©zia":"TN","Tonga":"TO","TÃ¶rÃ¶korszÃ¡g":"TR","Trinidad Ã©s Tobago":"TT","Tuvalu":"TV","Tajvan":"TW","TanzÃ¡nia":"TZ","Ukrajna":"UA","Uganda":"UG","Amerikai Csendes-Ã³ceÃ¡ni Szigetek":"UM","EgyesÃ¼lt Ãllamok":"US","Uruguay":"UY","ÃzbegisztÃ¡n":"UZ","VatikÃ¡n":"VA","Saint Vincent Ã©s a Grenadine-szigetek":"VC","Venezuela":"VE","Brit Virgin-szigetek":"VG","Amerikai Virgin-szigetek":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis- Ã©s Futuna-szigetek":"WF","Szamoa":"WS","Jemen":"YE","Mayotte":"YT","DÃ©l-afrikai KÃ¶ztÃ¡rsasÃ¡g":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Ismeretlen vagy Ã©rvÃ©nytelen kÃ¶rzet":"ZZ"};
ilib.data.ctrynames_hy = {"Ô±Õ¶Õ¤Õ¸ÖÕ¡":"AD","ÕÕ«Õ¡ÖÕµÕ¡Õ¬ Ô±ÖÕ¡Õ¢Õ¡Õ¯Õ¡Õ¶ Ô·Õ´Õ«ÖÕ¡Õ©Õ¶Õ¥Ö":"AE","Ô±ÖÕ²Õ¡Õ¶Õ½Õ¿Õ¡Õ¶":"AF","Ô±Õ¶Õ¿Õ«Õ£Õ¸ÖÕ¡-Ô²Õ¡ÖÕ¢Õ¸ÖÕ¤Õ¡":"AG","Ô±Õ¬Õ¢Õ¡Õ¶Õ«Õ¡":"AL","ÕÕ¡ÕµÕ¡Õ½Õ¿Õ¡Õ¶Õ« ÕÕ¡Õ¶ÖÕ¡ÕºÕ¥Õ¿Õ¸ÖÕ©ÕµÕ¸ÖÕ¶":"AM","Ô±Õ¶Õ£Õ¸Õ¬Õ¡":"AO","Ô±ÖÕ£Õ¥Õ¶Õ¿Õ«Õ¶Õ¡":"AR","Ô±Õ¾Õ½Õ¿ÖÕ«Õ¡":"AT","Ô±Õ¾Õ½Õ¿ÖÕ¡Õ¬Õ«Õ¡":"AU","Ô±Õ¤ÖÕ¢Õ¥Õ»Õ¡Õ¶":"AZ","Ô²Õ¸Õ½Õ¶Õ«Õ¡-ÕÕ¥ÖÖÕ¥Õ£Õ¸Õ¾Õ«Õ¶Õ¡":"BA","Ô²Õ¡ÖÕ¢Õ¡Õ¤Õ¸Õ½":"BB","Ô²Õ¡Õ¶Õ£Õ¬Õ¡Õ¤Õ¥Õ·":"BD","Ô²Õ¥Õ¬Õ£Õ«Õ¡":"BE","Ô²Õ¸ÖÖÕ¯Õ«Õ¶Õ¡ ÕÕ¡Õ½Õ¸":"BF","Ô²Õ¸ÖÕ¬Õ²Õ¡ÖÕ«Õ¡":"BG","Ô²Õ¡Õ°ÖÕ¥ÕµÕ¶":"BH","Ô²Õ¸ÖÖÕ¸ÖÕ¶Õ¤Õ«":"BI","Ô²Õ¥Õ¶Õ«Õ¶":"BJ","Ô²ÖÕ¸ÖÕ¶Õ¥Õµ":"BN","Ô²Õ¸Õ¬Õ«Õ¾Õ«Õ¡":"BO","Ô²ÖÕ¡Õ¦Õ«Õ¬Õ«Õ¡":"BR","Ô²Õ¡Õ°Õ¡Õ´Õ¶Õ¥Ö":"BS","Ô²Õ¸ÖÕ¿Õ¡Õ¶":"BT","Ô²Õ¸Õ¿Õ½Õ¾Õ¡Õ¶Õ¡":"BW","Ô²Õ¥Õ¬Õ¸Õ¼Õ¸ÖÕ½":"BY","Ô²Õ¥Õ¬Õ«Õ¦":"BZ","Ô¿Õ¡Õ¶Õ¡Õ¤Õ¡":"CA","Ô¿Õ¥Õ¶Õ¿ÖÕ¸Õ¶Õ¡Õ¯Õ¡Õ¶ Ô±ÖÖÕ«Õ¯ÕµÕ¡Õ¶ ÕÕ¡Õ¶ÖÕ¡ÕºÕ¥Õ¿Õ¸ÖÕ©ÕµÕ¸ÖÕ¶":"CF","Ô¿Õ¸Õ¶Õ£Õ¸":"CG","ÕÕ¾Õ¥ÕµÖÕ¡ÖÕ«Õ¡":"CH","ÕÕ²Õ¸Õ½Õ¯ÖÕ« Ô±Ö":"CI","ÕÕ«Õ¬Õ«":"CL","Ô¿Õ¡Õ´Õ¥ÖÕ¸ÖÕ¶":"CM","ÕÕ«Õ¶Õ¡Õ½Õ¿Õ¡Õ¶":"CN","Ô¿Õ¸Õ¬Õ¸ÖÕ´Õ¢Õ«Õ¡":"CO","Ô¿Õ¸Õ½Õ¿Õ¡-ÕÕ«Õ¯Õ¡":"CR","Ô¿Õ¸ÖÕ¢Õ¡":"CU","Ô¿Õ¡Õ¢Õ¸-ÕÕ¥ÖÕ¤Õ¥":"CV","Ô¿Õ«ÕºÖÕ¸Õ½":"CY","ÕÕ¥Õ­Õ«Õ¡ÕµÕ« ÕÕ¡Õ¶ÖÕ¡ÕºÕ¥Õ¿Õ¸ÖÕ©ÕµÕ¸ÖÕ¶":"CZ","Ô³Õ¥ÖÕ´Õ¡Õ¶Õ«Õ¡":"DE","ÕÕ«Õ¢Õ¸ÖÕ¿Õ«":"DJ","Ô´Õ¡Õ¶Õ«Õ¡":"DK","Ô´Õ¸Õ´Õ«Õ¶Õ«Õ¯Õ¡":"DM","Ô´Õ¸Õ´Õ«Õ¶Õ«Õ¯ÕµÕ¡Õ¶ ÕÕ¡Õ¶ÖÕ¡ÕºÕ¥Õ¿Õ¸ÖÕ©ÕµÕ¸ÖÕ¶":"DO","Ô±Õ¬ÕªÕ«Ö":"DZ","Ô·Õ¯Õ¾Õ¡Õ¤Õ¸Ö":"EC","Ô·Õ½Õ¿Õ¸Õ¶Õ«Õ¡":"EE","ÔµÕ£Õ«ÕºÕ¿Õ¸Õ½":"EG","Ô±ÖÕ¥Õ¾Õ´Õ¿ÕµÕ¡Õ¶ ÕÕ¡Õ°Õ¡ÖÕ¡":"EH","Ô·ÖÕ«Õ¿ÖÕ¥Õ¡":"ER","Ô»Õ½ÕºÕ¡Õ¶Õ«Õ¡":"ES","ÔµÕ©Õ¸Õ¾ÕºÕ«Õ¡":"ET","ÕÕ«Õ¶Õ¬Õ¡Õ¶Õ¤Õ«Õ¡":"FI","ÕÕ«Õ»Õ«":"FJ","ÕÕ«Õ¯ÖÕ¸Õ¶Õ¥Õ¦Õ«Õ¡":"FM","ÕÖÕ¡Õ¶Õ½Õ«Õ¡":"FR","Ô³Õ¡Õ¢Õ¸Õ¶":"GA","ÕÕ¥Õ® Ô²ÖÕ«Õ¿Õ¡Õ¶Õ«Õ¡":"GB","Ô³ÖÕ¥Õ¶Õ¡Õ¤Õ¡":"GD","ÕÖÕ¡Õ½Õ¿Õ¡Õ¶":"GE","Ô³Õ¡Õ¶Õ¡":"GH","Ô³Õ¡Õ´Õ¢Õ«Õ¡":"GM","Ô³Õ¾Õ«Õ¶Õ¥Õ¡":"GN","ÕÕ¡Õ½Õ¡ÖÕ¡Õ¯Õ¡Õ®Õ¡ÕµÕ«Õ¶ Ô³Õ¾Õ«Õ¶Õ¥Õ¡":"GQ","ÕÕ¸ÖÕ¶Õ¡Õ½Õ¿Õ¡Õ¶":"GR","Ô³Õ¾Õ¡Õ¿Õ¥Õ´Õ¡Õ¬Õ¡":"GT","Ô³Õ¾Õ«Õ¶Õ¥Õ¡-Ô²Õ«Õ½Õ¡Õ¸Ö":"GW","Ô³Õ¡ÕµÕ¡Õ¶Õ¡":"GY","ÕÕ¸Õ¶Õ¤Õ¸ÖÖÕ¡Õ½":"HN","ÕÕ¸ÖÕ¾Õ¡Õ©Õ«Õ¡":"HR","ÕÕ¡Õ«Õ©Õ«":"HT","ÕÕ¸ÖÕ¶Õ£Õ¡ÖÕ«Õ¡":"HU","Ô»Õ¶Õ¤Õ¸Õ¶Õ¥Õ¦Õ«Õ¡":"ID","Ô»Õ¼Õ¬Õ¡Õ¶Õ¤Õ«Õ¡":"IE","Ô»Õ½ÖÕ¡ÕµÕ¥Õ¬":"IL","ÕÕ¶Õ¤Õ¯Õ¡Õ½Õ¿Õ¡Õ¶":"IN","Ô»ÖÕ¡Ö":"IQ","Ô»ÖÕ¡Õ¶":"IR","Ô»Õ½Õ¬Õ¡Õ¶Õ¤Õ«Õ¡":"IS","Ô»Õ¿Õ¡Õ¬Õ«Õ¡":"IT","ÕÕ¡Õ´Õ¡ÕµÕ¯Õ¡":"JM","ÕÕ¸ÖÕ¤Õ¡Õ¶Õ¡Õ¶":"JO","ÕÕ¡ÕºÕ¸Õ¶Õ«Õ¡":"JP","ÕÕ¥Õ¶Õ«Õ¡":"KE","Ô¿Õ«ÖÕ£Õ«Õ¦Õ½Õ¿Õ¡Õ¶":"KG","Ô¿Õ¡Õ´Õ¢Õ¸Õ»Õ¡":"KH","Ô¿Õ«ÖÕ«Õ¢Õ¡Õ¿Õ«":"KI","Ô¿Õ¸Õ´Õ¸ÖÕ¸Õ½":"KM","ÕÕ¥Õ¶Õ¿ Ô¿Õ«Õ¿Õ½-ÕÕ¥Õ¾Õ«Õ½":"KN","ÕÕµÕ¸ÖÕ½Õ«Õ½Õ¡ÕµÕ«Õ¶ Ô¿Õ¸ÖÕ¥Õ¡":"KP","ÕÕ¡ÖÕ¡Õ¾Õ¡ÕµÕ«Õ¶ Ô¿Õ¸ÖÕ¥Õ¡":"KR","ÕÕ¸ÖÕ¾Õ¥ÕµÕ©":"KW","ÕÕ¡Õ¦Õ¡Õ­Õ½Õ¿Õ¡Õ¶":"KZ","Ô¼Õ¡Õ¸Õ½":"LA","Ô¼Õ«Õ¢Õ¡Õ¶Õ¡Õ¶":"LB","ÕÕ¡Õ¶Õ¿Õ¡ Ô¼Õ¸ÖÕ¹Õ«Õ¡":"LC","Ô¼Õ«Õ­Õ¿Õ¥Õ¶Õ·Õ¿Õ¥ÕµÕ¶":"LI","ÕÖÕ« Ô¼Õ¡Õ¶Õ¯Õ¡":"LK","Ô¼Õ«Õ¢Õ¥ÖÕ«Õ¡":"LR","Ô¼Õ¥Õ½Õ¸Õ¿Õ¸":"LS","Ô¼Õ«Õ¿Õ¾Õ¡":"LT","Ô¼ÕµÕ¸ÖÖÕ½Õ¥Õ´Õ¢Õ¸ÖÖÕ£":"LU","Ô¼Õ¡Õ¿Õ¾Õ«Õ¡":"LV","Ô¼Õ«Õ¢Õ«Õ¡":"LY","ÕÕ¡ÖÕ¸Õ¯Õ¸":"MA","ÕÕ¸Õ¶Õ¡Õ¯Õ¸":"MC","ÕÕ¸Õ¬Õ¤Õ¸Õ¾Õ¡":"MD","ÕÕ¡Õ¤Õ¡Õ£Õ¡Õ½Õ¯Õ¡Ö":"MG","ÕÕ¡ÖÕ·Õ¡Õ¬ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö":"MH","ÕÕ¡Õ¯Õ¥Õ¤Õ¸Õ¶Õ«Õ¡":"MK","ÕÕ¡Õ¬Õ«":"ML","ÕÕµÕ¡Õ¶Õ´Õ¡":"MM","ÕÕ¸Õ¶Õ²Õ¸Õ¬Õ«Õ¡":"MN","ÕÕ¡Õ¾ÖÕ«Õ¿Õ¡Õ¶Õ«Õ¡":"MR","ÕÕ¡Õ¬Õ©Õ¡":"MT","ÕÕ¡Õ¾ÖÕ«Õ¿Õ¸Õ½":"MU","ÕÕ¡Õ¬Õ¤Õ«Õ¾Õ¶Õ¥Ö":"MV","ÕÕ¡Õ¬Õ¡Õ¾Õ«":"MW","ÕÕ¥ÖÕ½Õ«Õ¯Õ¡":"MX","ÕÕ¡Õ¬Õ¡ÕµÕ¦Õ«Õ¡":"MY","ÕÕ¸Õ¦Õ¡Õ´Õ¢Õ«Õ¯":"MZ","ÕÕ¡Õ´Õ«Õ¢Õ«Õ¡":"NA","ÕÕ«Õ£Õ¥Ö":"NE","ÕÕ«Õ£Õ¥ÖÕ«Õ¡":"NG","ÕÕ«Õ¯Õ¡ÖÕ¡Õ£Õ¸ÖÕ¡":"NI","ÕÕ«Õ¤Õ¥ÖÕ¬Õ¡Õ¶Õ¤Õ¥Ö":"NL","ÕÕ¸ÖÕ¾Õ¥Õ£Õ«Õ¡":"NO","ÕÕ¥ÕºÕ¡Õ¬":"NP","ÕÕ¡Õ¸ÖÖÕ¸Ö":"NR","ÕÕ¸Ö Ô¶Õ¥Õ¬Õ¡Õ¶Õ¤Õ«Õ¡":"NZ","ÕÕ´Õ¡Õ¶":"OM","ÕÕ¡Õ¶Õ¡Õ´Õ¡":"PA","ÕÕ¥ÖÕ¸Ö":"PE","ÕÕ¡ÕºÕ¸ÖÕ¡ ÕÕ¸Ö Ô³Õ¾Õ«Õ¶Õ¥Õ¡":"PG","ÕÕ«Õ¬Õ«ÕºÕ«Õ¶Õ¶Õ¥Ö":"PH","ÕÕ¡Õ¯Õ«Õ½Õ¿Õ¡Õ¶":"PK","Ô¼Õ¥Õ°Õ¡Õ½Õ¿Õ¡Õ¶":"PL","ÕÕ¸ÖÕ¿Õ¸ÖÕ£Õ¡Õ¬Õ«Õ¡":"PT","ÕÕ¡Õ¬Õ¡Õ¸Ö":"PW","ÕÕ¡ÖÕ¡Õ£Õ¾Õ¡Õµ":"PY","Ô¿Õ¡Õ¿Õ¡Ö":"QA","ÕÕ¸ÖÕ´Õ«Õ¶Õ«Õ¡":"RO","ÕÕ¸ÖÕ½Õ¡Õ½Õ¿Õ¡Õ¶":"RU","ÕÕ¸ÖÕ¡Õ¶Õ¤Õ¡":"RW","ÕÕ¡Õ¸ÖÕ¤Õ«Õ¡Õ¶ Ô±ÖÕ¡Õ¢Õ«Õ¡":"SA","ÕÕ¸Õ¬Õ¸Õ´Õ¸Õ¶ÕµÕ¡Õ¶ Õ¯Õ²Õ¦Õ«Õ¶Õ¥Ö":"SB","ÕÕ¥ÕµÕ·Õ¥Õ¬Õ¶Õ¥Ö":"SC","ÕÕ¸ÖÕ¤Õ¡Õ¶":"SD","ÕÕ¾Õ¥Õ¤Õ«Õ¡":"SE","ÕÕ«Õ¶Õ£Õ¡ÕºÕ¸ÖÖ":"SG","ÕÕ¬Õ¸Õ¾Õ¥Õ¶Õ«Õ¡":"SI","ÕÕ¬Õ¸Õ¾Õ¡Õ¯Õ«Õ¡":"SK","ÕÕµÕ¥ÖÕ¡-Ô¼Õ¥Õ¸Õ¶Õ¥":"SL","ÕÕ¡Õ¶ ÕÕ¡ÖÕ«Õ¶Õ¸":"SM","ÕÕ¥Õ¶Õ¥Õ£Õ¡Õ¬":"SN","ÕÕ¸Õ´Õ¡Õ¬Õ«":"SO","ÕÕ¸ÖÖÕ«Õ¶Õ¡Õ´":"SR","ÕÕ¡Õ¶-Ô¹Õ¸Õ´Õ¥-ÕÖÕ«Õ¶Õ½Õ«ÕºÕ«":"ST","ÕÕ¡Õ¬Õ¾Õ¡Õ¤Õ¸Ö":"SV","ÕÕ«ÖÕ«Õ¡":"SY","ÕÕ¾Õ¡Õ¦Õ«Õ¬Õ¥Õ¶Õ¤":"SZ","ÕÕ¡Õ¤":"TD","ÕÕ¸Õ£Õ¸":"TG","Ô¹Õ¡Õ«Õ¬Õ¡Õ¶Õ¤":"TH","ÕÕ¡Õ³Õ«Õ¯Õ½Õ¿Õ¡Õ¶":"TJ","Ô¹Õ¸ÖÖÖÕ´Õ¥Õ¶Õ½Õ¿Õ¡Õ¶":"TM","Ô¹Õ¸ÖÕ¶Õ«Õ½":"TN","ÕÕ¸Õ¶Õ£Õ¡":"TO","Ô¹Õ¸ÖÖÖÕ«Õ¡":"TR","ÕÖÕ«Õ¶Õ«Õ¤Õ¡Õ¤-ÕÕ¸Õ¢Õ¡Õ£Õ¸":"TT","ÕÕ¸ÖÕ¾Õ¡Õ¬Õ¸Ö":"TV","Ô¹Õ¡ÕµÕ¾Õ¡Õ¶":"TW","ÕÕ¡Õ¶Õ¦Õ¡Õ¶Õ«Õ¡":"TZ","ÕÖÕ¯ÖÕ¡Õ«Õ¶Õ¡":"UA","ÕÖÕ£Õ¡Õ¶Õ¤Õ¡":"UG","Ô±Õ´Õ§ÖÕ«Õ¯Õ¡ÕµÕ« ÕÕ«Õ¡ÖÕµÕ¡Õ¬ ÕÕ¡Õ°Õ¡Õ¶Õ£Õ¶Õ§Ö":"US","ÕÖÖÕ¸ÖÕ£Õ¾Õ¡Õµ":"UY","ÕÖÕ¦Õ¢Õ¥Õ¯Õ½Õ¿Õ¡Õ¶":"UZ","ÕÕ¡Õ¿Õ«Õ¯Õ¡Õ¶":"VA","ÕÕ¥Õ¶Õ¿ ÕÕ«Õ½Õ¥Õ¶Õ¿-Ô³ÖÕ¥Õ¶Õ¡Õ¤Õ«Õ¶Õ¶Õ¥Ö":"VC","ÕÕ¥Õ¶Õ¥Õ½Õ¸ÖÕ¥Õ¬Õ¡":"VE","ÕÕ«Õ¥Õ¿Õ¶Õ¡Õ´":"VN","ÕÕ¡Õ¶Õ¸ÖÕ¡Õ¿Õ¸Ö":"VU","ÕÕ¡Õ´Õ¸Õ¡":"WS","ÔµÕ´Õ¥Õ¶":"YE","ÕÕ¡ÖÕ¡Õ¾Õ¡ÕµÕ«Õ¶ Ô±ÖÖÕ«Õ¯Õ¡":"ZA","Ô¶Õ¡Õ´Õ¢Õ«Õ¡":"ZM","Ô¶Õ«Õ´Õ¢Õ¡Õ¢Õ¾Õ¥":"ZW"};
ilib.data.ctrynames_id = {"Asia":"142","Asia Tengah":"143","Asia Barat":"145","Eropa":"150","Eropa Timur":"151","Eropa Utara":"154","Eropa Barat":"155","Amerika Latin":"419","Dunia":"001","Afrika":"002","Amerika Utara":"003","Amerika Selatan":"005","Oseania":"009","Afrika Barat":"011","Amerika Tengah":"013","Afrika Timur":"014","Afrika Utara":"015","Afrika Tengah":"017","Afrika Bagian Selatan":"018","Amerika":"019","Amerika Bagian Utara":"021","Kepulauan Karibia":"029","Asia Timur":"030","Asia Selatan":"034","Asia Tenggara":"035","Eropa Selatan":"039","Australasia":"053","Melanesia":"054","Wilayah Mikronesia":"057","Polinesia":"061","Pulau Ascension":"AC","Andora":"AD","Uni Emirat Arab":"AE","Afganistan":"AF","Antigua dan Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Antilla Belanda":"AN","Angola":"AO","Antarktika":"AQ","Argentina":"AR","Samoa Amerika":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Kepulauan Aland":"AX","Azerbaijan":"AZ","Bosnia dan Herzegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgia":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","Saint Barthelemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Karibia Belanda":"BQ","Brasil":"BR","Bahama":"BS","Bhutan":"BT","Pulau Bouvet":"BV","Botswana":"BW","Belarus":"BY","Belize":"BZ","Kanada":"CA","Kepulauan Cocos":"CC","Kongo - Kinshasa":"CD","Republik Afrika Tengah":"CF","Kongo - Brazzaville":"CG","Swiss":"CH","Cote d'Ivoire":"CI","Kepulauan Cook":"CK","Cile":"CL","Kamerun":"CM","China":"CN","Kolombia":"CO","Pulau Clipperton":"CP","Kosta Rika":"CR","Kuba":"CU","Tanjung Verde":"CV","CuraÃ§ao":"CW","Pulau Christmas":"CX","Siprus":"CY","Republik Cheska":"CZ","Jerman":"DE","Diego Garcia":"DG","Jibuti":"DJ","Denmark":"DK","Dominika":"DM","Republik Dominika":"DO","Aljazair":"DZ","Ceuta dan Melilla":"EA","Ekuador":"EC","Estonia":"EE","Mesir":"EG","Sahara Barat":"EH","Eritrea":"ER","Spanyol":"ES","Etiopia":"ET","Uni Eropa":"EU","Finlandia":"FI","Fiji":"FJ","Kepulauan Malvinas":"FK","Mikronesia":"FM","Kepulauan Faroe":"FO","Prancis":"FR","Gabon":"GA","Inggris":"GB","Grenada":"GD","Georgia":"GE","Guyana Prancis":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","Grinlandia":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Guinea Ekuatorial":"GQ","Yunani":"GR","Kepulauan South Sandwich dan South Georgia":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Hong Kong SAR China":"HK","Pulau Heard dan Kepulauan McDonald":"HM","Honduras":"HN","Kroasia":"HR","Haiti":"HT","Hungaria":"HU","Kepulauan Canary":"IC","Indonesia":"ID","Irlandia":"IE","Israel":"IL","Isle of Man":"IM","India":"IN","Wilayah Inggris di Samudra Hindia":"IO","Irak":"IQ","Iran":"IR","Islandia":"IS","Italia":"IT","Jersey":"JE","Jamaika":"JM","Yordania":"JO","Jepang":"JP","Kenya":"KE","Kirgistan":"KG","Kamboja":"KH","Kiribati":"KI","Komoro":"KM","Saint Kitts dan Nevis":"KN","Korea Utara":"KP","Korea Selatan":"KR","Kuwait":"KW","Kepulauan Kayman":"KY","Kazakstan":"KZ","Laos":"LA","Lebanon":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Lituania":"LT","Luksemburg":"LU","Latvia":"LV","Libia":"LY","Maroko":"MA","Monako":"MC","Moldova":"MD","Montenegro":"ME","Saint Martin":"MF","Madagaskar":"MG","Kepulauan Marshall":"MH","Makedonia":"MK","Mali":"ML","Myanmar":"MM","Mongolia":"MN","Makau SAR China":"MO","Kepulauan Mariana Utara":"MP","Martinik":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maladewa":"MV","Malawi":"MW","Meksiko":"MX","Malaysia":"MY","Mozambik":"MZ","Namibia":"NA","Kaledonia Baru":"NC","Niger":"NE","Kepulauan Norfolk":"NF","Nigeria":"NG","Nikaragua":"NI","Belanda":"NL","Norwegia":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Selandia Baru":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Polinesia Prancis":"PF","Papua Nugini":"PG","Filipina":"PH","Pakistan":"PK","Polandia":"PL","Saint Pierre dan Miquelon":"PM","Kepulauan Pitcairn":"PN","Puerto Riko":"PR","Otoritas Palestina":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Oseania Luar":"QO","RÃ©union":"RE","Rumania":"RO","Serbia":"RS","Rusia":"RU","Rwanda":"RW","Arab Saudi":"SA","Kepulauan Solomon":"SB","Seychelles":"SC","Sudan":"SD","Swedia":"SE","Singapura":"SG","Saint Helena":"SH","Slovenia":"SI","Kepulauan Svalbard dan Jan Mayen":"SJ","Slovakia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Suriname":"SR","Sudan Selatan":"SS","Sao Tome dan Principe":"ST","El Salvador":"SV","Sint Maarten":"SX","Suriah":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Kepulauan Turks dan Caicos":"TC","Cad":"TD","Teritori Kutub Selatan Prancis":"TF","Togo":"TG","Thailand":"TH","Tajikistan":"TJ","Tokelau":"TK","Timor Leste":"TL","Turkimenistan":"TM","Tunisia":"TN","Tonga":"TO","Turki":"TR","Trinidad dan Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ukraina":"UA","Uganda":"UG","Kepulauan Terluar A.S.":"UM","Amerika Serikat":"US","Uruguay":"UY","Uzbekistan":"UZ","Vatikan":"VA","Saint Vincent dan Grenadines":"VC","Venezuela":"VE","Kepulauan Virgin Inggris":"VG","Kepulauan Virgin A.S.":"VI","Vietnam":"VN","Vanuatu":"VU","Kepulauan Wallis dan Futuna":"WF","Samoa":"WS","Yaman":"YE","Mayotte":"YT","Afrika Selatan":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Wilayah Tidak Dikenal":"ZZ"};
ilib.data.ctrynames_it = {"generated":false,"samoa americane":"AS","antigua e barbuda":"AG","ascensione":"SH","azerbaigian":"AZ","isole vergini britanniche":"VG","bielorussia":"BY","belgio":"BE","bosnia erzegovina":"BA","brasile":"BR","territori britannici dellâoceano indiano":"IO","cambogia":"KH","camerun":"CM","capo verde":"CV","cayman":"KY","repubblica centrafricana":"CF","ciad":"TD","cile":"CL","cina":"CN","isole cook":"CK","croazia":"HR","cipro":"CY","repubblica ceca":"CZ","costa dâavorio":"CI","rep. dominicana":"DO","repubblica democratica del congo":"CD","danimarca":"DK","gibuti":"DJ","repubblica dominicana":"DO","timor est":"TL","egitto":"EG","guinea equatoriale":"GQ","etiopia":"ET","macedonia":"MK","isole falkland":"FK","falkland":"FK","isole fÃ¦r Ã¸er":"FO","stati federati di micronesia":"FM","finlandia":"FI","repubblica ex jugoslava di macedonia":"MK","francia":"FR","guiana francese":"GF","polinesia francese":"PF","germania":"DE","gibilterra":"GI","grecia":"GR","groenlandia":"GL","guadalupa":"GP","ungheria":"HU","islanda":"IS","irlanda":"IE","israele":"IL","italia":"IT","giamaica":"JM","giappone":"JP","giordania":"JO","kenia":"KE","kirghizistan":"KG","lettonia":"LV","libano":"LB","libia":"LY","liechtenstein":"LI","lituania":"LT","lussemburgo":"LU","macao":"MO","malesia":"MY","maldive":"MV","marianne":"MP","isole marshall":"MH","martinica":"MQ","messico":"MX","moldavia":"MD","principato di monaco":"MC","marocco":"MA","mozambico":"MZ","paesi bassi":"NL","antille olandesi":"AN","nuova caledonia":"NC","nuova zelanda":"NZ","isola norfolk":"NF","corea del nord":"KP","isole marianne settentrionali":"MP","norvegia":"NO","autoritÃ  palestinese":"PS","papua nuova guinea":"PG","repubblica popolare cinese":"CN","perÃ¹":"PE","filippine":"PH","polonia":"PL","portogallo":"PT","porto rico":"PR","repubblica di cona":"TW","ruanda":"RW","santâelena":"SH","saint kitts e nevis":"KN","santa lucia":"LC","saint pierre e miquelon":"PM","saint-vincent":"VC","saint vincent e le grenadines":"VC","arabia saudita":"SA","slovacchia":"SK","isole salomone":"SB","sudafrica":"ZA","corea del sud":"KR","spagna":"ES","st. pierre e miquelon":"PM","svezia":"SE","svizzera":"CH","siria":"SY","sao tome e principe":"ST","tagikistan":"TJ","tailandia":"TH","le bahamas":"BS","isole cayman":"KY","gambia":"GM","isole turks e caicos":"TC","trinidad e tobago":"TT","turchia":"TR","isole vergini statunitensi":"VI","eau":"AE","ucraina":"UA","emirati arabi uniti":"AE","regno unito":"GB","cittÃ  del vaticano":"VA","wallis e futuna":"WF","afghanistan":"AF","isole Ã¥land":"AX","albania":"AL","algeria":"DZ","andorra":"AD","angola":"AO","anguilla":"AI","antigua":"AG","arabia":"SA","argentina":"AR","armenia":"AM","aruba":"AW","australia":"AU","austria":"AT","bahamas":"BS","bahrain":"BH","bangladesh":"BD","barbados":"BB","barbuda":"AG","belize":"BZ","benin":"BJ","bermuda":"BM","bhutan":"BT","repubblica bolivariana del venezuela":"VE","bolivia":"BO","bolivia, stato plurinazionale della":"BO","bosnia":"BA","botswana":"BW","isola bouvet":"BV","territorio britannico dell'oceano indiano":"IO","brunei":"BN","brunei darussalam":"BN","bulgaria":"BG","burkina faso":"BF","burundi":"BI","isole caicos":"TC","canada":"CA","isole di capo verde":"CV","isola christmas":"CX","isole cocos e keeling":"CC","isole cocos":"CC","colombia":"CO","comoros":"KM","congo":"CD","congo, repubblica democratica del":"CD","costa rica":"CR","cuba":"CU","repubblica democratica popolare di corea":"KP","dominica":"DM","dubai":"AE","ecuador":"EC","el salvador":"SV","inghilterra":"GB","eritrea":"ER","estonia":"EE","isole falklands":"FK","falklands":"FK","isole faeroer":"FO","faeroer":"FO","fiji":"FJ","guyana francese":"GF","territori francesi meridionali":"TF","futuna":"WF","gabon":"GA","georgia":"GE","ghana":"GH","gran bretagna":"GB","grenada":"GD","grenadine":"VC","guam":"GU","guatemala":"GT","guernsey":"GG","guinea":"GN","guinea-bissau":"GW","guyana":"GY","haiti":"HT","isole heard e mcdonald":"HM","isola heard":"HM","isola heard ed isole mcdonald":"HM","erzegovina":"BA","olanda":"NL","santa sede":"VA","honduras":"HN","hong kong":"HK","india":"IN","indonesia":"ID","iran":"IR","repubblica islamica dell'iran":"IR","iraq":"IQ","isola di man":"IM","costa d'avorio":"CI","jan mayen":"SJ","jersey":"JE","kazakistan":"KZ","kiribati":"KI","corea":"KR","corea, repubblica democratica popolare di":"KP","corea, repubblica di":"KR","kuwait":"KW","repubblica popolare democratica del laos":"LA","laos":"LA","lesotho":"LS","liberia":"LR","jamahiriya araba di libia":"LY","macedonia, repubblica ex jugoslava di":"MK","madagascar":"MG","malawi":"MW","mali":"ML","malta":"MT","malvine":"FK","marshall":"MH","mauritania":"MR","mauritius":"MU","mayotte":"YT","isole mcdonald":"HM","micronesia":"FM","micronesia, stati federati della":"FM","miquelon":"PM","moldavia, repubblica di":"MD","monaco":"MC","mongolia":"MN","montenegro":"ME","myanmar":"MM","namibia":"NA","nauru":"NR","nepal":"NP","nevis":"KN","nicaragua":"NI","niger":"NE","nigeria":"NG","territori occupati palestinesi":"PS","oman":"OM","r. p. cinese":"CN","pakistan":"PK","palau":"PW","palestina":"PS","territori palestinesi":"PS","panama":"PA","paraguay":"PY","pitcairn":"PN","stato plurinazionale della bolivia":"BO","polinesia":"PF","principe":"ST","qatar":"QA","repubblica di cina":"TW","repubblica della corea":"KR","repubblica della moldavia":"MD","repubblica di singapore ":"SG","riunione":"RE","romania":"RO","russia":"RU","federazione russa":"RU","saint-barthÃ©lemy":"BL","san barth":"BL","sant'elena":"SH","sant'elena, ascensione e tristan da cunha":"SH","saint kitts":"KN","saint-pierre":"PM","saint-pierre e miquelon":"PM","saint vincent":"VC","samoa":"WS","san marino":"SM","sao tome":"ST","scozia":"GB","senegal":"SN","serbia":"RS","seychelles":"SC","sierra leone":"SL","singapore":"SG","slovenia":"SI","salomone":"SB","somalia":"SO","georgia del sud":"GS","georgia del sud e isole sandwich meridionali":"GS","isole sandwich meridionali":"GS","sri lanka":"LK","st. lucia":"LC","st. martin":"MF","saint pierre":"PM","st. vincent":"VC","sudan":"SD","suriname":"SR","svalbard":"SJ","svalbard e jan mayen":"SJ","swaziland":"SZ","repubblica araba di siria":"SY","taiwan":"TW","tanzania":"TZ","tanzania, repubblica unita di":"TZ","le grenadines":"VC","repubblica di singapore":"SG","tobago":"TT","togo":"TG","tokelau":"TK","tonga":"TO","trinidad":"TT","tristan da cunha":"SH","tunisia":"TN","turkmenistan":"TM","isole turks":"TC","tuvalu":"TV","usa":"US","uganda":"UG","repubblica unita di tanzania":"TZ","stati uniti":"US","isole minori esterne degli stati uniti":"UM","stati uniti dâamerica":"US","uruguay":"UY","uzbekistan":"UZ","vanuatu":"VU","vaticano":"VA","venezuela":"VE","venezuela, repubblica bolivariana del":"VE","vietnam":"VN","isole vergini":"VI","galles":"GB","wallis":"WF","sahara occidentale":"EH","yemen":"YE","zambia":"ZM","zimbabwe":"ZW","eire":"IE","Isola di Ascensione":"AC","Andorra":"AD","Emirati Arabi Uniti":"AE","Afghanistan":"AF","Antigua e Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Antille Olandesi":"AN","Angola":"AO","Antartide":"AQ","Argentina":"AR","Samoa Americane":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Isole Aland":"AX","Azerbaigian":"AZ","Bosnia Erzegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgio":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","San Bartolomeo":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Caraibi Olandesi":"BQ","Brasile":"BR","Bahamas":"BS","Bhutan":"BT","Isola Bouvet":"BV","Botswana":"BW","Bielorussia":"BY","Belize":"BZ","Canada":"CA","Isole Cocos":"CC","Congo - Kinshasa":"CD","Repubblica Centrafricana":"CF","Congo":"CG","Svizzera":"CH","Costa dâAvorio":"CI","Isole Cook":"CK","Cile":"CL","Camerun":"CM","Cina":"CN","Colombia":"CO","Isola di Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","Capo Verde":"CV","CuraÃ§ao":"CW","Isola di Christmas":"CX","Cipro":"CY","Repubblica Ceca":"CZ","Germania":"DE","Diego Garcia":"DG","Gibuti":"DJ","Danimarca":"DK","Dominica":"DM","Repubblica Dominicana":"DO","Algeria":"DZ","Ceuta e Melilla":"EA","Ecuador":"EC","Estonia":"EE","Egitto":"EG","Sahara Occidentale":"EH","Eritrea":"ER","Spagna":"ES","Etiopia":"ET","Unione Europea":"EU","Finlandia":"FI","Figi":"FJ","Isole Falkland":"FK","Micronesia":"FM","Isole Faroe":"FO","Francia":"FR","Gabon":"GA","Regno Unito":"GB","Grenada":"GD","Georgia":"GE","Guiana Francese":"GF","Guernsey":"GG","Ghana":"GH","Gibilterra":"GI","Groenlandia":"GL","Gambia":"GM","Guinea":"GN","Guadalupa":"GP","Guinea Equatoriale":"GQ","Grecia":"GR","Georgia del Sud e Isole Sandwich del Sud":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","RAS di Hong Kong":"HK","Isole Heard ed Isole McDonald":"HM","Honduras":"HN","Croazia":"HR","Haiti":"HT","Ungheria":"HU","Isole Canarie":"IC","Indonesia":"ID","Irlanda":"IE","Israele":"IL","Isola di Man":"IM","India":"IN","Territorio Britannico dellâOceano Indiano":"IO","Iraq":"IQ","Iran":"IR","Islanda":"IS","Italia":"IT","Jersey":"JE","Giamaica":"JM","Giordania":"JO","Giappone":"JP","Kenya":"KE","Kirghizistan":"KG","Cambogia":"KH","Kiribati":"KI","Comore":"KM","Saint Kitts e Nevis":"KN","Corea del Nord":"KP","Corea del Sud":"KR","Kuwait":"KW","Isole Cayman":"KY","Kazakistan":"KZ","Laos":"LA","Libano":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Lituania":"LT","Lussemburgo":"LU","Lettonia":"LV","Libia":"LY","Marocco":"MA","Monaco":"MC","Moldavia":"MD","Montenegro":"ME","Saint Martin":"MF","Madagascar":"MG","Isole Marshall":"MH","Repubblica di Macedonia":"MK","Mali":"ML","Myanmar":"MM","Mongolia":"MN","RAS di Macao":"MO","Isole Marianne Settentrionali":"MP","Martinica":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldive":"MV","Malawi":"MW","Messico":"MX","Malesia":"MY","Mozambico":"MZ","Namibia":"NA","Nuova Caledonia":"NC","Niger":"NE","Isola Norfolk":"NF","Nigeria":"NG","Nicaragua":"NI","Paesi Bassi":"NL","Norvegia":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Nuova Zelanda":"NZ","Oman":"OM","Panama":"PA","PerÃ¹":"PE","Polinesia Francese":"PF","Papua Nuova Guinea":"PG","Filippine":"PH","Pakistan":"PK","Polonia":"PL","Saint Pierre e Miquelon":"PM","Pitcairn":"PN","Portorico":"PR","Territori palestinesi":"PS","Portogallo":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Oceania lontana":"QO","RÃ©union":"RE","Romania":"RO","Serbia":"RS","Federazione Russa":"RU","Ruanda":"RW","Arabia Saudita":"SA","Isole Solomon":"SB","Seychelles":"SC","Sudan":"SD","Svezia":"SE","Singapore":"SG","SantâElena":"SH","Slovenia":"SI","Svalbard e Jan Mayen":"SJ","Slovacchia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Suriname":"SR","Sudan del Sud":"SS","Sao TomÃ© e PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Siria":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Isole Turks e Caicos":"TC","Ciad":"TD","Territori australi francesi":"TF","Togo":"TG","Tailandia":"TH","Tagikistan":"TJ","Tokelau":"TK","Timor Est":"TL","Turkmenistan":"TM","Tunisia":"TN","Tonga":"TO","Turchia":"TR","Trinidad e Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ucraina":"UA","Uganda":"UG","Isole periferiche agli USA":"UM","Stati Uniti":"US","Uruguay":"UY","Uzbekistan":"UZ","CittÃ  del Vaticano":"VA","Saint Vincent e Grenadines":"VC","Venezuela":"VE","Isole Vergini Britanniche":"VG","Isole Vergini Americane":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis e Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","Sudafrica":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Regione non valida o sconosciuta":"ZZ","Asia":"142","Asia centrale":"143","Asia occidentale":"145","Europa":"150","Europa orientale":"151","Europa del Nord":"154","Europa occidentale":"155","America Latina":"419","Mondo":"001","Africa":"002","Nord America":"003","America del Sud":"005","Oceania":"009","Africa occidentale":"011","America centrale":"013","Africa orientale":"014","Africa del Nord":"015","Africa centrale":"017","Africa del Sud":"018","Americhe":"019","America del Nord":"021","Caraibi":"029","Asia orientale":"030","Asia del Sud":"034","Asia sudorientale":"035","Europa del Sud":"039","Australasia":"053","Melanesia":"054","Regione Micronesiana":"057","Polinesia":"061"};
ilib.data.ctrynames_ja = {"ã¢ã¸ã¢":"142","ä¸­å¤®ã¢ã¸ã¢":"143","è¥¿ã¢ã¸ã¢":"145","ã¨ã¼ã­ãã":"150","æ±ã¨ã¼ã­ãã":"151","åã¨ã¼ã­ãã":"154","è¥¿ã¨ã¼ã­ãã":"155","ã©ãã³ã¢ã¡ãªã«":"419","ä¸ç":"001","ã¢ããªã«":"002","åã¢ã¡ãªã«å¤§é¸":"003","åã¢ã¡ãªã«":"005","ãªã»ã¢ãã¢":"009","è¥¿ã¢ããªã«":"011","ä¸­å¤®ã¢ã¡ãªã«":"013","æ±ã¢ããªã«":"014","åã¢ããªã«":"015","ä¸­é¨ã¢ããªã«":"017","åé¨ã¢ããªã«":"018","ã¢ã¡ãªã«å¤§é¸":"019","åã¢ã¡ãªã«":"021","ã«ãªã":"029","æ±ã¢ã¸ã¢":"030","åã¢ã¸ã¢":"034","æ±åã¢ã¸ã¢":"035","åã¨ã¼ã­ãã":"039","ãªã¼ã¹ãã©ã©ã·ã¢":"053","ã¡ã©ãã·ã¢":"054","ãã¯ã­ãã·ã¢":"057","ããªãã·ã¢":"061","ã¢ã»ã³ã·ã§ã³å³¶":"AC","ã¢ã³ãã©":"AD","ã¢ã©ãé¦é·å½é£é¦":"AE","ã¢ãã¬ãã¹ã¿ã³":"AF","ã¢ã³ãã£ã°ã¢ã»ãã¼ãã¼ã":"AG","ã¢ã³ã®ã©":"AI","ã¢ã«ããã¢":"AL","ã¢ã«ã¡ãã¢":"AM","ãªã©ã³ãé ã¢ã³ãã£ã«":"AN","ã¢ã³ã´ã©":"AO","åæ¥µ":"AQ","ã¢ã«ã¼ã³ãã³":"AR","ç±³é ãµã¢ã¢":"AS","ãªã¼ã¹ããªã¢":"AT","ãªã¼ã¹ãã©ãªã¢":"AU","ã¢ã«ã":"AW","ãªã¼ã©ã³ãè«¸å³¶":"AX","ã¢ã¼ã«ãã¤ã¸ã£ã³":"AZ","ãã¹ãã¢ã»ãã«ãã§ã´ãã":"BA","ãã«ããã¹":"BB","ãã³ã°ã©ãã·ã¥":"BD","ãã«ã®ã¼":"BE","ãã«ã­ããã¡ã½":"BF","ãã«ã¬ãªã¢":"BG","ãã¼ã¬ã¼ã³":"BH","ãã«ã³ã¸":"BI","ããã³":"BJ","ãµã³ã»ãã«ãã«ãã¼å³¶":"BL","ããã¥ã¼ã":"BM","ãã«ãã¤":"BN","ããªãã¢":"BO","ãªã©ã³ãé ã«ãªã":"BQ","ãã©ã¸ã«":"BR","ããã":"BS","ãã¼ã¿ã³":"BT","ãã¼ãå³¶":"BV","ããã¯ã":"BW","ãã©ã«ã¼ã·":"BY","ããªã¼ãº":"BZ","ã«ãã":"CA","ã³ã³ã¹[ã­ã¼ãªã³ã°]è«¸å³¶":"CC","ã³ã³ã´æ°ä¸»å±åå½[ã­ã³ã·ã£ãµ]":"CD","ä¸­å¤®ã¢ããªã«å±åå½":"CF","ã³ã³ã´å±åå½[ãã©ã¶ãã«]":"CG","ã¹ã¤ã¹":"CH","ã³ã¼ãã¸ãã¯ã¼ã«":"CI","ã¯ãã¯è«¸å³¶":"CK","ããª":"CL","ã«ã¡ã«ã¼ã³":"CM","ä¸­å½":"CN","ã³ã­ã³ãã¢":"CO","ã¯ãªããã¼ãã³å³¶":"CP","ã³ã¹ã¿ãªã«":"CR","ã­ã¥ã¼ã":"CU","ã«ã¼ããã«ã":"CV","ã­ã¥ã©ã½ã¼":"CW","ã¯ãªã¹ãã¹å³¶":"CX","ã­ãã­ã¹":"CY","ãã§ã³å±åå½":"CZ","ãã¤ã":"DE","ãã£ã¨ã´ã¬ã«ã·ã¢å³¶":"DG","ã¸ãã":"DJ","ãã³ãã¼ã¯":"DK","ãããã«å½":"DM","ãããã«å±åå½":"DO","ã¢ã«ã¸ã§ãªã¢":"DZ","ã»ã¦ã¿ã»ã¡ãªãªã£":"EA","ã¨ã¯ã¢ãã«":"EC","ã¨ã¹ããã¢":"EE","ã¨ã¸ãã":"EG","è¥¿ãµãã©":"EH","ã¨ãªããªã¢":"ER","ã¹ãã¤ã³":"ES","ã¨ããªãã¢":"ET","æ¬§å·é£å":"EU","ãã£ã³ã©ã³ã":"FI","ãã£ã¸ã¼":"FJ","ãã©ã¼ã¯ã©ã³ãè«¸å³¶":"FK","ãã¯ã­ãã·ã¢é£é¦":"FM","ãã§ã­ã¼è«¸å³¶":"FO","ãã©ã³ã¹":"FR","ã¬ãã³":"GA","ã¤ã®ãªã¹":"GB","ã°ã¬ãã":"GD","ã°ã«ã¸ã¢":"GE","ä»é ã®ã¢ã":"GF","ã¬ã¼ã³ã¸ã¼":"GG","ã¬ã¼ã":"GH","ã¸ãã©ã«ã¿ã«":"GI","ã°ãªã¼ã³ã©ã³ã":"GL","ã¬ã³ãã¢":"GM","ã®ãã¢":"GN","ã°ã¢ãã«ã¼ã":"GP","èµ¤éã®ãã¢":"GQ","ã®ãªã·ã£":"GR","åã¸ã§ã¼ã¸ã¢å³¶ã»åãµã³ãã¤ããè«¸å³¶":"GS","ã°ã¢ããã©":"GT","ã°ã¢ã ":"GU","ã®ãã¢ããµã¦":"GW","ã¬ã¤ã¢ã":"GY","ä¸­è¯äººæ°å±åå½é¦æ¸¯ç¹å¥è¡æ¿åº":"HK","ãã¼ãå³¶ã»ãã¯ããã«ãè«¸å³¶":"HM","ãã³ã¸ã¥ã©ã¹":"HN","ã¯ã­ã¢ãã¢":"HR","ãã¤ã":"HT","ãã³ã¬ãªã¼":"HU","ã«ããªã¢è«¸å³¶":"IC","ã¤ã³ããã·ã¢":"ID","ã¢ã¤ã«ã©ã³ã":"IE","ã¤ã¹ã©ã¨ã«":"IL","ãã³å³¶":"IM","ã¤ã³ã":"IN","è±é ã¤ã³ãæ´å°å":"IO","ã¤ã©ã¯":"IQ","ã¤ã©ã³":"IR","ã¢ã¤ã¹ã©ã³ã":"IS","ã¤ã¿ãªã¢":"IT","ã¸ã£ã¼ã¸ã¼":"JE","ã¸ã£ãã¤ã«":"JM","ã¨ã«ãã³":"JO","æ¥æ¬":"JP","ã±ãã¢":"KE","ã­ã«ã®ã¹":"KG","ã«ã³ãã¸ã¢":"KH","ã­ãªãã¹":"KI","ã³ã¢ã­":"KM","ã»ã³ãã¯ãªã¹ããã¡ã¼ã»ãã¤ãã¹":"KN","æé®®æ°ä¸»ä¸»ç¾©äººæ°å±åå½":"KP","å¤§éæ°å½":"KR","ã¯ã¦ã§ã¼ã":"KW","ã±ã¤ãã³è«¸å³¶":"KY","ã«ã¶ãã¹ã¿ã³":"KZ","ã©ãªã¹":"LA","ã¬ããã³":"LB","ã»ã³ãã«ã·ã¢":"LC","ãªããã³ã·ã¥ã¿ã¤ã³":"LI","ã¹ãªã©ã³ã«":"LK","ãªããªã¢":"LR","ã¬ã½ã":"LS","ãªãã¢ãã¢":"LT","ã«ã¯ã»ã³ãã«ã°":"LU","ã©ããã¢":"LV","ãªãã¢":"LY","ã¢ã­ãã³":"MA","ã¢ãã³":"MC","ã¢ã«ãã":"MD","ã¢ã³ããã°ã­":"ME","ãµã³ã»ãã«ã¿ã³":"MF","ããã¬ã¹ã«ã«":"MG","ãã¼ã·ã£ã«è«¸å³¶":"MH","ãã±ããã¢":"MK","ããª":"ML","ãã£ã³ãã¼":"MM","ã¢ã³ã´ã«":"MN","ä¸­è¯äººæ°å±åå½ãã«ãªç¹å¥è¡æ¿åº":"MO","åããªã¢ãè«¸å³¶":"MP","ãã«ãã£ãã¼ã¯":"MQ","ã¢ã¼ãªã¿ãã¢":"MR","ã¢ã³ãã»ã©ã":"MS","ãã«ã¿":"MT","ã¢ã¼ãªã·ã£ã¹":"MU","ã¢ã«ã¸ã":"MV","ãã©ã¦ã¤":"MW","ã¡ã­ã·ã³":"MX","ãã¬ã¼ã·ã¢":"MY","ã¢ã¶ã³ãã¼ã¯":"MZ","ãããã¢":"NA","ãã¥ã¼ã«ã¬ããã¢":"NC","ãã¸ã§ã¼ã«":"NE","ãã¼ãã©ã¼ã¯å³¶":"NF","ãã¤ã¸ã§ãªã¢":"NG","ãã«ã©ã°ã¢":"NI","ãªã©ã³ã":"NL","ãã«ã¦ã§ã¼":"NO","ããã¼ã«":"NP","ãã¦ã«":"NR","ãã¦ã¨å³¶":"NU","ãã¥ã¼ã¸ã¼ã©ã³ã":"NZ","ãªãã¼ã³":"OM","ããã":"PA","ãã«ã¼":"PE","ä»é ããªãã·ã¢":"PF","ããã¢ãã¥ã¼ã®ãã¢":"PG","ãã£ãªãã³":"PH","ãã­ã¹ã¿ã³":"PK","ãã¼ã©ã³ã":"PL","ãµã³ãã¨ã¼ã«å³¶ã»ãã¯ã­ã³å³¶":"PM","ããã±ã¢ã³è«¸å³¶":"PN","ãã¨ã«ããªã³":"PR","ãã¬ã¹ãã":"PS","ãã«ãã¬ã«":"PT","ãã©ãª":"PW","ãã©ã°ã¢ã¤":"PY","ã«ã¿ã¼ã«":"QA","ãªã»ã¢ãã¢å¨è¾ºå°å":"QO","ã¬ã¦ããªã³å³¶":"RE","ã«ã¼ããã¢":"RO","ã»ã«ãã¢":"RS","ã­ã·ã¢":"RU","ã«ã¯ã³ã":"RW","ãµã¦ã¸ã¢ã©ãã¢":"SA","ã½ã­ã¢ã³è«¸å³¶":"SB","ã»ã¼ã·ã§ã«":"SC","ã¹ã¼ãã³":"SD","ã¹ã¦ã§ã¼ãã³":"SE","ã·ã³ã¬ãã¼ã«":"SG","ã»ã³ããã¬ã":"SH","ã¹ã­ããã¢":"SI","ã¹ãã¼ã«ãã«è«¸å³¶ã»ã¤ã³ãã¤ã¨ã³å³¶":"SJ","ã¹ã­ãã­ã¢":"SK","ã·ã¨ã©ã¬ãªã":"SL","ãµã³ããªã":"SM","ã»ãã¬ã«":"SN","ã½ããªã¢":"SO","ã¹ãªãã ":"SR","åã¹ã¼ãã³":"SS","ãµã³ãã¡ã»ããªã³ã·ã":"ST","ã¨ã«ãµã«ããã«":"SV","ã·ã³ãã»ãã¼ã«ãã³":"SX","ã·ãªã¢":"SY","ã¹ã¯ã¸ã©ã³ã":"SZ","ããªã¹ã¿ã³ã»ãã»ã¯ã¼ãã£":"TA","ã¿ã¼ã¯ã¹ã»ã«ã¤ã³ã¹è«¸å³¶":"TC","ãã£ã":"TD","ä»é æ¥µåè«¸å³¶":"TF","ãã¼ã´":"TG","ã¿ã¤":"TH","ã¿ã¸ã­ã¹ã¿ã³":"TJ","ãã±ã©ã¦":"TK","æ±ãã£ã¢ã¼ã«":"TL","ãã«ã¯ã¡ãã¹ã¿ã³":"TM","ãã¥ãã¸ã¢":"TN","ãã³ã¬":"TO","ãã«ã³":"TR","ããªããã¼ãã»ããã´":"TT","ããã«":"TV","å°æ¹¾":"TW","ã¿ã³ã¶ãã¢":"TZ","ã¦ã¯ã©ã¤ã":"UA","ã¦ã¬ã³ã":"UG","ç±³é å¤ªå¹³æ´è«¸å³¶":"UM","ã¢ã¡ãªã«":"US","ã¦ã«ã°ã¢ã¤":"UY","ã¦ãºãã­ã¹ã¿ã³":"UZ","ããã«ã³å¸å½":"VA","ã»ã³ããã³ã»ã³ãã»ã°ã¬ããã£ã¼ã³è«¸å³¶":"VC","ãããºã¨ã©":"VE","è±é ã´ã¡ã¼ã¸ã³è«¸å³¶":"VG","ç±³é ã´ã¡ã¼ã¸ã³è«¸å³¶":"VI","ãããã ":"VN","ããã¢ã":"VU","ã¦ã©ãªã¹ã»ããã":"WF","ãµã¢ã¢":"WS","ã¤ã¨ã¡ã³":"YE","ãã¨ããå³¶":"YT","åã¢ããªã«":"ZA","ã¶ã³ãã¢":"ZM","ã¸ã³ããã¨":"ZW","ä¸æãªå°å":"ZZ"};
ilib.data.ctrynames_ka = {"áááá":"142","áªááá¢á ááá£á á áááá":"143","ááá¡áááááá áááá":"145","ááá ááá":"150","áá¦ááá¡áááááá ááá ááá":"151","á©á ááááááá ááá ááá":"154","ááá¡áááááá ááá ááá":"155","áááááá£á á áááá ááá áá ááá ááá":"419","áá¡áá¤ááá":"001","áá¤á ááá":"002","á©á áááááá áááá ááá":"003","á¡ááá®á ááá áááá ááá":"005","áááááááá":"009","ááá¡áááááá áá¤á ááá":"011","áªááá¢á ááá£á á áááá ááá":"013","áá¦ááá¡áááááá áá¤á ááá":"014","á©á ááááááá áá¤á ááá":"015","á¨á£á áá¤á ááá":"017","á¡ááá®á ááá áá¤á ááá":"018","áááá ááááá":"019","á©á ááááááá áááá ááá":"021","ááá ááá":"029","áá¦ááá¡áááááá áááá":"030","á¡ááá®á ááá áááá":"034","á¡ááá®á áá-áá¦ááá¡áááááá áááá":"035","á¡ááá®á ááá ááá ááá":"039","ááá¡á¢á áááá áá áá®ááá áááááááá":"053","ááááááááá":"054","ááá áááááá":"057","ááááááááá":"061","ááááá á":"AD","áá áááááá¡ áááá ááááááá£áá áááá áá¢ááá":"AE","ááá¦ááááá":"AF","ááá¢ááá£á áá ááá áá£áá":"AG","ááááááá":"AI","áááááááá":"AL","á¡ááá®ááá":"AM","ááááá áááááááá¡ ááá¢ááááá":"AN","áááááá":"AO","ááá¢áá á¥á¢ááá":"AQ","áá áááá¢ááá":"AR","áááá ááá£áá á¡áááá":"AS","ááá¡á¢á áá":"AT","ááá¡á¢á áááá":"AU","áá á£áá":"AW","ááááááá¡ áá£áá«á£áááá":"AX","áááá áááá¯ááá":"AZ","ááá¡ááá áá á°áá áªááááááá":"BA","ááá ááááá¡á":"BB","ááááááááá¨á":"BD","áááááá":"BE","áá£á áááá-á¤áá¡á":"BF","áá£áááá ááá":"BG","ááá°á áááá":"BH","áá£á á£ááá":"BI","áááááá":"BJ","ááá áá£áá":"BM","áá á£ááá":"BN","ááááááá":"BO","áá áááááá":"BR","ááá°áááá¡ áá£áá«á£áááá":"BS","áá£á¢ááá":"BT","áá£ááá¡ áá£áá«á£áá":"BV","ááá¢á¡áááá":"BW","ááááá á£á¡áá":"BY","áááááá":"BZ","áááááá":"CA","ááááá - áááá¨áá¡á":"CD","áªááá¢á ááá£á á áá¤á áááá¡ á áá¡áá£ááááá":"CF","ááááá":"CG","á¨ááááªáá áá":"CH","á¡ááááá¡ á«áááá¡ á¡áááááá á":"CI","áá£ááá¡ áá£áá«á£áááá":"CK","á©ááá":"CL","ááááá á£áá":"CM","á©ááááá":"CN","áááá£áááá":"CO","ááá¡á¢á-á ááá":"CR","áá£áá":"CU","áááá-ááá áá":"CV","á¨áááá¡ áá£áá«á£áá":"CX","ááááá áá¡á":"CY","á©áá®áááá¡ á áá¡áá£ááááá":"CZ","ááá ááááá":"DE","á¯ááá£á¢á":"DJ","ááááá":"DK","áááááááá":"DM","ááááááááááá¡ á áá¡áá£ááááá":"DO","ááááá á":"DZ","ááááááá á":"EC","áá¡á¢ááááá":"EE","áááááá¢á":"EG","ááá¡áááááá á¡áá°áá á":"EH","áá áá¢á áá":"ER","áá¡áááááá":"ES","ááááááá":"ET","ááá ááááá¨áá á":"EU","á¤ááááá":"FI","á¤áá¯á":"FJ","á¤ááááááááá¡ áá£áá«á£áááá":"FK","áááá áááááá":"FM","á¤áá áá¡ áá£áá«á£áááá":"FO","á¡áá¤á áááááá":"FR","áááááá":"GA","áááá áá áá¢ááááá":"GB","áá ááááá":"GD","á¡áá¥áá ááááá":"GE","áááá":"GH","áááá ááá¢áá á":"GI","áá áááááááá":"GL","áááááá":"GM","áááááá":"GN","ááááááá£áá":"GP","ááááá¢áá á£áá áááááá":"GQ","á¡áááá á«áááá":"GR","á¡ááá®á ááá á¯áá á¯áá áá á¡ááá®á áá á¡áááááá©áá¡ áá£áá«á£áááá":"GS","áááá¢ááááá":"GT","áá£ááá":"GU","áááááá-ááá¡áá£":"GW","áááááá":"GY","á°ááá ááááá":"HK","á°áá ááá¡ áá£áá«á£áá áá ááááááááááá¡ áá£áá«á£áááá":"HM","á°áááá£á áá¡á":"HN","á°áá ááá¢áá":"HR","á°ááá¢á":"HT","á£ááá ááá":"HU","ááááááááá":"ID","áá áááááá":"IE","áá¡á áááá":"IL","ááááá¡ áá£áá«á£áá":"IM","ááááááá":"IN","áá áá¢ááá£áá á¢áá áá¢áá áá áááááááá¡ ááááááá¨á":"IO","áá áá§á":"IQ","áá ááá":"IR","áá¡áááááá":"IS","áá¢áááá":"IT","á¯áá á¡á":"JE","ááááááá":"JM","ááá ááááá":"JO","ááááááá":"JP","ááááá":"KE","á§áá áááááá":"KG","áááááá¯á":"KH","ááá áááá¢á":"KI","ááááá áá¡ áá£áá«á£áááá":"KM","á¡ááá¢-ááá¢á¡á áá ááááá¡á":"KN","á©á ááááááá ááá áá":"KP","á¡ááá®á ááá ááá áá":"KR","áá£áááá¢á":"KW","áááááááá¡ áá£áá«á£áááá":"KY","á§áááá®ááá":"KZ","áááá¡á":"LA","áááááá":"LB","á¡ááá¢-áá£á¡áá":"LC","ááá®á¢ááá¨á¢áááá":"LI","á¨á á-ááááá":"LK","ááááá áá":"LR","ááá¡ááá":"LS","ááá¢áá":"LT","áá£á¥á¡áááá£á áá":"LU","ááá¢ááá":"LV","ááááá":"LY","ááá ááá":"MA","áááááá":"MC","ááááááá":"MD","áááá¢ááááá á":"ME","ááááááá¡ááá á":"MG","ááá á¨áááá¡ áá£áá«á£áááá":"MH","ááááááááá":"MK","áááá":"ML","ááááááá á":"MM","áááá¦ááááá":"MN","ááááá":"MO","ááá á¢ááááá":"MQ","áááá áá¢áááá":"MR","áááá¡áá áá¢á":"MS","áááá¢á":"MT","áááá áááá":"MU","áááááááá¡ áá£áá«á£áááá":"MV","áááááá":"MW","ááá¥á¡ááá":"MX","áááááááá":"MY","ááááááááá":"MZ","ááááááá":"NA","áá®ááá ááááááááá":"NC","ááááá á":"NE","ááá á¤ááááá¡ áá£áá«á£áá":"NF","ááááá áá":"NG","ááááá ááá£á":"NI","ááááá ááááááá":"NL","ááá ááááá":"NO","áááááá":"NP","ááá£á á£":"NR","áá®ááá áááááááá":"NZ","ááááá":"OM","áááááá":"PA","ááá á£":"PE","á¤á áááá£áá ááááááááá":"PF","áááá£á-áá®ááá áááááá":"PG","á¤ááááááááá":"PH","ááááá¡á¢ááá":"PK","áááááááá":"PL","á¡ááá¢-áááá á áá ááá¥ááááá":"PM","áá£áá á¢á á ááá":"PR","ááááá¡á¢áááá¡ á¢áá áá¢áá áá":"PS","ááá á¢á£ááááá":"PT","ááááá£":"PW","ááá ááááá":"PY","ááá¢áá á":"QA","ááá¨áá ááá£áá ááááááá":"QO","á ááá£ááááá":"RE","á á£áááááá":"RO","á¡áá ááá":"RS","á á£á¡ááá":"RU","á á£áááá":"RW","á¡áá£ááá¡ áá ááááá":"SA","á¡áááááááá¡ áá£áá«á£áááá":"SB","á¡ááá¨áááá¡ áá£áá«á£áááá":"SC","á¡á£áááá":"SD","á¨áááªáá":"SE","á¡áááááá£á á":"SG","á¬ááááá áááááá¡ áá£áá«á£áá":"SH","á¡ááááááá":"SI","á¡áááááááá":"SK","á¡ááá á-ááááá":"SL","á¡áá-ááá ááá":"SM","á¡ááááááá":"SN","á¡ááááá":"SO","á¡á£á ááááá":"SR","á¡áá-á¢ááá áá áá ááá¡ááá":"ST","á¡ááááááá á":"SV","á¡áá áá":"SY","á¡ááááááááá":"SZ","á©ááá":"TD","á¤á áááá£áá á¡ááá®á áááá¡ á¢áá áá¢áá áááá":"TF","á¢ááá":"TG","á¢ááááááá":"TH","á¢áá¯ááááá":"TJ","áá¦ááá¡áááááá á¢áááá á":"TL","áá£á á¥áááááá":"TM","á¢á£ááá¡á":"TN","á¢áááá":"TO","áá£á á¥ááá":"TR","á¢á ááááááá áá á¢ááááá":"TT","á¢á£áááá£":"TV","á¢áááááá":"TW","á¢ááááááá":"TZ","á£áá áááá":"UA","á£ááááá":"UG","á¨ááá áááá£áá á¨á¢áá¢áááá¡ ááªáá á ááá¨áá ááá£áá áá£áá«á£áááá":"UM","áááá áááá¡ á¨ááá áááá£áá á¨á¢áá¢ááá":"US","á£á á£áááá":"UY","á£ááááááá":"UZ","ááá¢ááááá":"VA","á¡ááá¢-áááá¡ááá¢á áá áá ááááááááá":"VC","ááááá¡á£ááá":"VE","áááá¢áááá":"VN","áááá£áá¢á£":"VU","ááááá¡á áá á¤á£á¢á£áá":"WF","á¡áááá":"WS","áááááá":"YE","á¡ááá®á áá áá¤á ááá":"ZA","áááááá":"ZM","áááááááá":"ZW","á£áªáááá áá áá áá¡á¬áá á á áááááá":"ZZ"};
ilib.data.ctrynames_kk = {"ÐÐ·Ð¸Ñ":"142","ÐÑÑÐ°Ð»ÑÒ ÐÐ·Ð¸Ñ":"143","ÐÐ°ÑÑÑ ÐÐ·Ð¸Ñ":"145","ÐÑÑÐ¾Ð¿Ð°":"150","Ð¨ÑÒÑÑ ÐÑÑÐ¾Ð¿Ð°":"151","Ð¡Ð¾Ð»ÑÒ¯ÑÑÑÐº ÐÑÑÐ¾Ð¿Ð°":"154","ÐÐ°ÑÑÑ ÐÑÑÐ¾Ð¿Ð°":"155","ÐÐ°ÑÑÐ½ ÐÐ¼ÐµÑÐ¸ÐºÐ°ÑÑ":"419","ÓÐ»ÐµÐ¼":"001","ÐÑÑÐ¸ÐºÐ°":"002","Ð¡Ð¾Ð»ÑÒ¯ÑÑÑÐº ÐÐ¼ÐµÑÐ¸ÐºÐ°":"003","ÐÒ£ÑÒ¯ÑÑÑÐº ÐÐ¼ÐµÑÐ¸ÐºÐ°":"005","ÐÐºÐµÐ°Ð½Ð¸Ñ":"009","ÐÐ°ÑÑÑ ÐÑÑÐ¸ÐºÐ°":"011","ÐÑÑÐ°Ð»ÑÒ ÐÐ¼ÐµÑÐ¸ÐºÐ°":"013","Ð¨ÑÒÑÑ ÐÑÑÐ¸ÐºÐ°":"014","Ð¡Ð¾Ð»ÑÒ¯ÑÑÑÐº ÐÑÑÐ¸ÐºÐ°":"015","ÐÑÑÐ°Ð»ÑÒ ÐÑÑÐ¸ÐºÐ°":"017","ÐÒ£ÑÒ¯ÑÑÑÐº ÐÑÑÐ¸ÐºÐ°":"018","ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð»Ð°Ñ":"019","Ð¡Ð¾Ð»ÑÒ¯ÑÑÑÐº ÐÐ¼ÐµÑÐ¸ÐºÐ° (ÐÒÐ¨, ÐÐ°Ð½Ð°Ð´Ð°, ÐÑÐµÐ½Ð»Ð°Ð½Ð´Ð¸Ñ Ð¶ÓÐ½Ðµ ÐÐµÑÐ¼ÑÐ´ Ð°ÑÐ°Ð»Ð´Ð°ÑÑ)":"021","ÐÐ°ÑÐ¸Ð±":"029","Ð¨ÑÒÑÑ ÐÐ·Ð¸Ñ":"030","ÐÒ£ÑÒ¯ÑÑÑÐº ÐÐ·Ð¸Ñ":"034","ÐÒ£ÑÒ¯ÑÑÑÐº-ÑÑÒÑÑ ÐÐ·Ð¸Ñ":"035","ÐÒ£ÑÒ¯ÑÑÑÐº ÐÑÑÐ¾Ð¿Ð°":"039","ÐÐ²ÑÑÑÐ°Ð»Ð¸Ñ Ð¶ÓÐ½Ðµ ÐÐ°Ò£Ð° ÐÐµÐ»Ð°Ð½Ð´Ð¸Ñ":"053","ÐÐµÐ»Ð°Ð½ÐµÐ·Ð¸Ñ":"054","ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸Ñ ÑÐµÐ³Ð¸Ð¾Ð½Ñ":"057","ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸Ñ":"061","ÐÐ½Ð´Ð¾ÑÑÐ°":"AD","ÐÑÑÑÐºÐºÐµÐ½ ÐÑÐ°Ð± Ð­Ð¼Ð¸ÑÐ°ÑÑÐ°ÑÑ":"AE","ÐÐ²ÑÑÑÐ¸Ñ":"AT","ÐÐ²ÑÑÑÐ°Ð»Ð¸Ñ":"AU","ÓÐ·ÐµÑÐ±Ð°Ð¹Ð¶Ð°Ð½":"AZ","ÐÐµÐ»ÑÐ³Ð¸Ñ":"BE","ÐÐ¾Ð»Ð³Ð°ÑÐ¸Ñ":"BG","ÐÐ°ÑÑÐµÐ¹Ð½":"BH","ÐÑÑÑÐ½Ð´Ð¸":"BI","ÐÐµÐ½Ð¸Ð½":"BJ","ÐÐ¾Ð»Ð¸Ð²Ð¸Ñ":"BO","ÐÑÐ°Ð·Ð¸Ð»Ð¸Ñ":"BR","ÐÑÑÐ°Ð½":"BT","ÐÐ¾ÑÑÐ²Ð°Ð½Ð°":"BW","ÐÐµÐ»Ð°ÑÑÑÑ":"BY","ÐÐµÐ»Ð¸Ð·":"BZ","ÐÐ°Ð½Ð°Ð´Ð°":"CA","Ð¨Ð²ÐµÐ¹ÑÐ°ÑÐ¸Ñ":"CH","Ð§Ð¸Ð»Ð¸":"CL","ÐÐ°Ð¼ÐµÑÑÐ½":"CM","ÒÑÑÐ°Ð¹":"CN","ÐÐ¾Ð»ÑÐ¼Ð±Ð¸Ñ":"CO","ÐÐ»Ð¼Ð°Ð½Ð¸Ñ":"DE","ÐÐ°Ð½Ð¸Ñ":"DK","ÐÑÐ¿Ð°Ð½Ð¸Ñ":"ES","Ð¤Ð¸Ð½Ð»ÑÐ½Ð´Ð¸Ñ":"FI","Ð¤ÑÐ°Ð½ÑÐ¸Ñ":"FR","Ò°Ð»ÑÐ±ÑÐ¸ÑÐ°Ð½Ð¸Ñ":"GB","ÐÑÐµÐºÐ¸Ñ":"GR","ÐÐ¾Ð½ÐºÐ¾Ð½Ð³ (Ð°ÑÐ½Ð°Ð¹Ñ ÓÐºÑÐ¼ÑÑÐ»ÑÐº Ð°Ð¹Ð¼Ð°Ò)":"HK","ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸Ñ":"ID","ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ":"IE","ÐÐ½Ð´Ð¸Ñ":"IN","ÐÑÐ°Ð»Ð¸Ñ":"IT","ÐÐ°Ð¿Ð¾Ð½Ð¸Ñ":"JP","Ð¡Ð¾Ð»ÑÒ¯ÑÑÑÐº ÐÐ¾ÑÐµÑ":"KR","ÒÐ°Ð·Ð°ÒÑÑÐ°Ð½":"KZ","ÐÐµÐºÑÐ¸ÐºÐ°":"MX","ÐÐ¾Ð»Ð»Ð°Ð½Ð´Ð¸Ñ":"NL","ÐÐ¾ÑÐ²ÐµÐ³Ð¸Ñ":"NO","ÐÐ¾Ð»ÑÑÐ°":"PL","ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸Ñ":"PT","Ð ÐµÑÐµÐ¹":"RU","Ð¡Ð°ÑÐ´ ÐÑÐ°Ð±Ð¸ÑÑÑ":"SA","Ð¨Ð²ÐµÑÐ¸Ñ":"SE","Ð¢Ð°Ð¹Ð»Ð°Ð½Ð´":"TH","Ð¢Ò¯ÑÐºÐ¸Ñ":"TR","Ð¢Ð°Ð¹Ð²Ð°Ð½Ñ":"TW","ÐÒÐ¨":"US","ÐÒ£ÑÒ¯ÑÑÑÐº ÐÑÑÐ¸ÐºÐ° ÑÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°ÑÑ":"ZA","ÐÐµÐ»Ð³ÑÑÑÐ· Ð°Ð¹Ð¼Ð°Ò":"ZZ"};
ilib.data.ctrynames_kn = {"à²à²·à³à²¯à²¾":"142","à²®à²§à³à²¯ à²à²·à³à²¯à²¾":"143","à²ªà²¶à³à²à²¿à²® à²à²·à³à²¯à²¾":"145","à²¯à³à²°à³à²ªà³":"150","à²ªà³à²°à³à²µ à²¯à³à²°à³à²ªà³":"151","à²à²¤à³à²¤à²° à²¯à³à²°à³à²ªà³":"154","à²ªà²¶à³à²à²¿à²® à²¯à³à²°à³à²ªà³":"155","à²²à³à²¯à²¾à²à²¿à²¨à³ à²à²®à³à²°à²¿à²à²¾ à²®à²¤à³à²¤à³ à²à³à²°à²¿à²¬à²¿à²¯à²¨à³":"419","à²µà²¿à²¶à³à²µ":"001","à²à²«à³à²°à²¿à²à²¾":"002","à²à²¤à³à²¤à²° à²à²®à³à²°à²¿à²à²¾":"003","à²¦à²à³à²·à²¿à²£ à²à²®à³à²°à²¿à²à²¾":"005","à²à²¶à²¿à²¯à²¾à²¨à²¾":"009","à²ªà²¶à³à²à²¿à²® à²à²«à³à²°à²¿à²à²¾":"011","à²®à²§à³à²¯ à²à²®à³à²°à²¿à²à²¾":"013","à²ªà³à²°à³à²µ à²à²«à³à²°à²¿à²à²¾":"014","à²à²¤à³à²¤à²° à²à²«à³à²°à²¿à²à²¾":"015","à²®à²§à³à²¯ à²à²«à³à²°à²¿à²à²¾":"017","à²à²«à³à²°à²¿à²à²¾à²¦ à²¦à²à³à²·à²¿à²£ à²­à²¾à²":"018","à²à²®à³à²°à²¿à²à²¾à²¸à³":"019","à²à²®à³à²°à²¿à²à²¾à²¦ à²à²¤à³à²¤à²° à²­à²¾à²":"021","à²à³à²°à³à²¬à²¿à²¯à²¨à³":"029","à²à²·à³à²¯à²¾à²¦ à²ªà³à²°à³à²µ à²­à²¾à²":"030","à²à²·à³à²¯à²¾à²¦ à²¦à²à³à²·à²¿à²£ à²­à²¾à²":"034","à²à²à³à²¨à³à²¯ à²à²·à³à²¯à²¾":"035","à²¦à²à³à²·à²¿à²£ à²¯à³à²°à³à²ªà³":"039","à²à²¸à³à²à³à²°à³à²²à²¿à²¯à³à²·à²¿à²¯à²¾":"053","à²®à³à²²à²¿à²¨à³à²¶à²¿à²¯à²¾":"054","à²®à³à²à³à²°à³à²¨à³à²¶à²¿à²¯à²¨à³ à²ªà³à²°à²¦à³à²¶":"057","à²ªà³à²²à²¿à²¨à³à²¶à²¿à²¯à²¾":"061","à²à²¸à³à²¨à³à²¶à²¨à³ à²¦à³à²µà³à²ª":"AC","à²à²à²¡à³à²°à²¾":"AD","à²¸à²à²¯à³à²à³à²¤ à²à²°à²¬à³ à²à²®à²¿à²°à³à²à²¸à³":"AE","à²à²«à²à²¾à²¨à²¿à²¸à³à²¥à²¾à²¨à³":"AF","à²à²à²à²¿à²à³à²µà²¾ à²®à²¤à³à²¤à³ à²¬à²°à³à²¬à³à²¡à²¾":"AG","à²à²à²à³à²¯à²¿à²²à³à²²à²¾":"AI","à²à²²à³à²¬à³à²¨à²¿à²¯à²¾":"AL","à²à²°à³à²®à³à²¨à²¿à²¯à²¾":"AM","à²¨à³à²¦à²°à³âà²²à³à²¯à²¾à²à²¡à³":"AN","à²à²à²à³à²²à²¾":"AO","à²à²à²à²¾à²°à³à²à²¿à²à²¾":"AQ","à²à²°à³à²à³à²à²à³à²¨à²¾":"AR","à²à²®à³à²°à²¿à²à²¨à³ à²¸à²®à³à²µà²¾":"AS","à²à²¸à³à²à³à²°à²¿à²¯à²¾":"AT","à²à²¸à³à²à³à²°à³à²²à²¿à²¯":"AU","à²à²°à³à²¬à²¾":"AW","à²à²²à³à²¯à²¾à²à²¡à³ à²¦à³à²µà³à²ªà²à²³à³":"AX","à²à²à²°à³à²¬à³à²à²¾à²¨à³":"AZ","à²¬à³à²¸à³à²¨à²¿à²¯à²¾ à²®à²¤à³à²¤à³ à²¹à²°à³à²à³à²à³à²µà²¿à²¨à²¾":"BA","à²¬à²¾à²°à³à²¬à²¡à³à²¸à³":"BB","à²¬à²¾à²à²à³à²²à²¾à²¦à³à²¶à³":"BD","à²¬à³à²²à³à²à²¿à²¯à²®à³":"BE","à²¬à³à²°à³à²à²¿à²¨à²¾ à²«à²¾à²¸à³":"BF","à²¬à²²à³à²à³à²°à²¿à²¯à²¾":"BG","à²¬à²¹à²°à³à²¨à³":"BH","à²¬à³à²°à³à²à²¡à²¿":"BI","à²¬à³à²¨à²¿à²¨à³":"BJ","à²¸à³à²à²à³ à²¬à²¾à²°à³à²¥à³à²²à³à²®à²¿":"BL","à²¬à²°à³à²®à³à²¡à²¾":"BM","à²¬à³à²°à³à²¨à²¿":"BN","à²¬à³à²²à²¿à²µà²¿à²¯à²¾":"BO","à²à³à²°à²¾à²¬à²¿à²¯à²¨à³ à²¨à³à²¦à²°à³âà²²à³à²¯à²¾à²à²¡à³à²¸à³":"BQ","à²¬à³à²°à³à²à²¿à²²à³":"BR","à²¬à²¹à²¾à²®à²¾à²¸à³":"BS","à²­à³à²¤à²¾à²¨à³":"BT","à²¬à³à²µà³à²à³ à²¦à³à²µà³à²ª":"BV","à²¬à³à²à³à²¸à³âà²µà²¾à²¨à²¾":"BW","à²¬à³à²²à²¾à²°à²¸à³":"BY","à²¬à³à²²à²¿à²à³":"BZ","à²à³à²¨à²¡à²¾":"CA","à²à³à²à³à²¸à³ à²¦à³à²µà³à²ªà²à²³à³":"CC","à²à²¾à²à²à³ - à²à²¿à²¨à³à²¶à²¾à²¸à²¾":"CD","à²®à²§à³à²¯ à²à²«à³à²°à²¿à²à²¾ à²à²£à²°à²¾à²à³à²¯":"CF","à²à²¾à²à²à³ - à²¬à³à²°à²¾à²à²¾à²µà²¿à²²à³à²²à³":"CG","à²¸à³à²µà²¿à²à³à²à²°à³à²²à³à²¯à²¾à²à²¡à³":"CH","à²à²µà²°à²¿ à²à³à²¸à³à²à³":"CI","à²à³à²à³ à²¦à³à²µà³à²ªà²à²³à³":"CK","à²à²¿à²²à²¿":"CL","à²à³à²¯à²¾à²®à²°à³à²¨à³":"CM","à²à³à²¨":"CN","à²à³à²²à²à²¬à²¿à²¯à²¾":"CO","à²à³à²²à²¿à²ªà³à²ªà²°à³âà²à²¾à²¨à³ à²¦à³à²µà³à²ªà²à²³à³":"CP","à²à³à²¸à³à²à²¾ à²°à²¿à²à²¾":"CR","à²à³à²¯à³à²¬à²¾":"CU","à²à³à²ªà³ à²µà²°à³à²¡à³":"CV","à²à³à²°à²¾à²à²¾à²µà³":"CW","à²à³à²°à²¿à²¸à³à²®à²¸à³ à²¦à³à²µà³à²ª":"CX","à²¸à³à²ªà³à²°à²¸à³":"CY","à²à³à²à³ à²°à²¿à²ªà²¬à³à²²à²¿à²à³":"CZ","à²à²°à³à²®à²¨à²¿":"DE","à²¡à³à²à³ à²à²¾à²°à³à²¸à²¿à²¯":"DG","à²à²¿à²¬à³à²à²¿":"DJ","à²¡à³à²¨à³à²®à²¾à²°à³à²à³":"DK","à²¡à³à²®à²¿à²¨à²¿à²à²¾":"DM","à²¡à³à²®à³à²¨à²¿à²à³ à²°à²¿à²ªà²¬à³à²²à²¿à²à³":"DO","à²à²²à³à²à³à²°à²¿à²¯à²¾":"DZ","à²¸à³à²¯à³à²à²¾ à²¹à²¾à²à³ à²®à³à²²à²¿à²²à³à²²à²¾":"EA","à²à²à³à²µà³à²¡à²¾à²°à³":"EC","à²à²¸à³à²¤à³à²¨à²¿à²¯":"EE","à²à²à²¿à²ªà³à²à³":"EG","à²ªà²¶à³à²à²¿à²® à²¸à²¹à²¾à²°à²¾":"EH","à²à²°à²¿à²à³à²°à²¿à²¯à²¾":"ER","à²¸à³à²ªà³à²¨à³":"ES","à²à²¥à²¿à²¯à³à²ªà²¿à²¯à²¾":"ET","à²¯à³à²°à³à²ªà²¿à²¯à²¨à³ à²¯à³à²¨à²¿à²¯à²¨à³":"EU","à²«à²¿à²¨à³âà²²à³à²¯à²¾à²à²¡à³":"FI","à²«à²¿à²à²¿":"FJ","à²«à²¾à²²à³à²à³âà²²à³à²¯à²¾à²à²¡à³ à²¦à³à²µà³à²ªà²à²³à³":"FK","à²®à³à²à³à²°à³à²¨à³à²¶à²¿à²¯à²¾":"FM","à²«à²°à³ à²¦à³à²µà³à²ªà²à²³à³":"FO","à²«à³à²°à²¾à²¨à³à²¸à³":"FR","à²à³à²¬à³à²¨à³":"GA","à²¬à³à²°à²¿à²à²¨à³/à²à²à²à³à²²à³à²à²¡à³":"GB","à²à³à²°à³à²¨à³à²¡à²¾":"GD","à²à²¾à²°à³à²à²¿à²¯à²¾":"GE","à²«à³à²°à³à²à²à³ à²à²¯à²¾à²¨à²¾":"GF","à²à³à²°à³à²¨à²à³":"GG","à²à²¾à²¨à²¾":"GH","à²à²¿à²¬à³à²°à²¾à²²à³à²à²°à³":"GI","à²à³à²°à³à²¨à³âà²²à³à²¯à²¾à²à²¡à³":"GL","à²à³à²¯à²¾à²à²¬à²¿à²¯à²¾":"GM","à²à²¿à²¨à²¿":"GN","à²à³à²¡à³à²²à³à²ªà³":"GP","à²à²à³à²µà³à²à³à²°à²¿à²¯à²²à³ à²à²¿à²¨à²¿":"GQ","à²à³à²°à³à²¸à³":"GR","à²¦à²à³à²·à²¿à²£ à²à²¾à²°à³à²à²¿à²¯à²¾ à²®à²¤à³à²¤à³ à²¦à²à³à²·à²¿à²£ à²¸à³à²¯à²¾à²à²¡à³à²µà²¿à²à³ à²¦à³à²µà³à²ªà²à²³à³":"GS","à²à³à²µà²¾à²à³à²®à²¾à²²à²¾":"GT","à²à³à²¯à²¾à²®à³":"GU","à²à²¿à²¨à²¿-à²¬à²¿à²¸à³à²¸à²¾à²µà³":"GW","à²à²¯à²¾à²¨à²¾":"GY","à²¹à²¾à²à²à³â à²à²¾à²à²à³ SAR à²à³à²¨à²¾":"HK","à²¹à²°à³à²¡à³ à²¦à³à²µà³à²ª à²®à²¤à³à²¤à³ à²®à³à²¯à²¾à²à³à²¡à³à²¨à²¾à²²à³à²¡à³ à²¦à³à²µà³à²ªà²à²³à³":"HM","à²¹à³à²à²¡à³à²°à²¾à²¸à³":"HN","à²à³à²°à³à²¯à³à²¶à²¿à²¯à²¾":"HR","à²¹à³à²à²¿":"HT","à²¹à²à²à³à²°à²¿":"HU","à²à³à²¯à²¾à²¨à²°à²¿ à²¦à³à²µà³à²ªà²à²³à³":"IC","à²à²à²¡à³à²¨à³à²¶à²¿à²¯à²¾":"ID","à²à²°à³à²²à³à²à²¡à³":"IE","à²à²¸à³à²°à³à²²à³":"IL","à²à²²à³ à²à²«à³ à²®à³à²¯à²¾à²¨à³":"IM","à²­à²¾à²°à²¤":"IN","à²¬à³à²°à²¿à²à³à²¶à³ à²à²à²¡à²¿à²¯à²¨à³ à²®à²¹à²¾à²¸à²¾à²à²° à²ªà³à²°à²¦à³à²¶":"IO","à²à²°à²¾à²à³":"IQ","à²à²°à²¾à²¨à³":"IR","à²à²¸à³âà²²à³à²¯à²¾à²à²¡à³":"IS","à²à²à²²à²¿":"IT","à²à³à²°à³à²¸à²¿":"JE","à²à²®à³à²à²¾":"JM","à²à³à²°à³à²¡à²¾à²¨à³":"JO","à²à²ªà²¾à²¨à³":"JP","à²à³à²¨à³à²¯à²¾":"KE","à²à²¿à²°à³à²à²¿à²¸à³à²¥à²¾à²¨à³":"KG","à²à²¾à²à²¬à³à²¡à²¿à²¯à²¾":"KH","à²à²¿à²°à²¿à²¬à²¾à²¤à²¿":"KI","à²à³à²®à³à²°à³à²¸à³":"KM","à²¸à³à²à²à³ à²à²¿à²à³à²¸à³ à²®à²¤à³à²¤à³ à²¨à³à²µà²¿à²¸à³":"KN","à²à²¤à³à²¤à²° à²à³à²°à²¿à²¯à²¾":"KP","à²¦à²à³à²·à²¿à²£ à²à³à²°à²¿à²¯à²¾":"KR","à²à³à²µà³à²¤à³":"KW","à²à³à²®à²¨à³ à²¦à³à²µà³à²ªà²à²³à³":"KY","à²à²à²¾à²à²¿à²¸à³à²¥à²¾à²¨à³":"KZ","à²²à²¾à²µà³à²¸à³":"LA","à²²à³à²¬à²¨à²¾à²¨à³":"LB","à²¸à³à²à²à³ à²²à³à²¸à²¿à²¯à²¾":"LC","à²²à³à²à³à²¨à³âà²¸à³à²à³à²¨à³":"LI","à²¶à³à²°à³à²²à²à²à²¾":"LK","à²²à²¿à²¬à³à²°à²¿à²¯à²¾":"LR","à²²à³à²¥à³à²¸à³":"LS","à²²à²¿à²¥à³à²µà³à²¨à²¿à²¯à²¾":"LT","à²²à²à³à²¸à²à²¬à²°à³à²à³":"LU","à²²à²¾à²à³à²µà²¿à²¯à²¾":"LV","à²²à²¿à²¬à²¿à²¯à²¾":"LY","à²®à³à²°à²¾à²à³à²à³":"MA","à²®à³à²¨à²¾à²à³":"MC","à²®à³à²²à³à²¡à³à²µà²¾":"MD","à²®à³à²à²à³à²¨à³à²à³à²°à³":"ME","à²¸à³à²à²à³ à²®à²¾à²°à³à²à²¿à²¨à³":"MF","à²®à²¡à²à²¾à²¸à³à²à²°à³":"MG","à²®à²¾à²°à³à²¶à²²à³ à²¦à³à²µà³à²ªà²à²³à³":"MH","à²®à³à²¯à²¾à²¸à²¿à²¡à³à²¨à²¿à²¯à²¾":"MK","à²®à²¾à²²à²¿":"ML","à²®à²¯à²¨à³à²®à²¾à²°à³":"MM","à²®à³à²à²à³à²²à²¿à²¯à²¾":"MN","à²®à³à²¯à²¾à²à³ SAR à²à³à²¨à²¾":"MO","à²à²¤à³à²¤à²° à²®à²°à²¿à²¯à²¾à²¨à²¾ à²¦à³à²µà³à²ªà²à²³à³":"MP","à²®à²¾à²°à³à²à²¿à²¨à²¿à²à³":"MQ","à²®à²¾à²°à²¿à²à²¾à²¨à²¿à²¯à²¾":"MR","à²®à²¾à²à²à³âà²¸à³à²°à³à²à³":"MS","à²®à²¾à²²à³à²à²¾":"MT","à²®à²¾à²°à²¿à²¶à²¿à²¯à²¸à³":"MU","à²®à²¾à²²à³à²¡à²¿à²µà³à²¸à³":"MV","à²®à²²à²¾à²µà²¿":"MW","à²®à³à²à³à²¸à²¿à²à³":"MX","à²®à²²à³à²¶à²¿à²¯à²¾":"MY","à²®à³à²à²¾à²à²¬à²¿à²à³":"MZ","à²¨à²®à³à²¬à²¿à²¯à²¾":"NA","à²¨à³à²¯à³ à²à³à²¯à²¾à²²à²¿à²¡à³à²¨à²¿à²¯à²¾":"NC","à²¨à³à²à²°à³":"NE","à²¨à²¾à²°à³à²«à³à²à³ à²¦à³à²µà³à²ª":"NF","à²¨à³à²à³à²°à²¿à²¯à²¾":"NG","à²¨à²¿à²à²¾à²°à²¾à²à³à²µà²¾":"NI","à²¨à³à²¦à²°à³âà²²à³à²¯à²¾à²à²¡à³à²¸à³":"NL","à²¨à²¾à²°à³à²µà³":"NO","à²¨à³à²ªà²¾à²³":"NP","à²¨à³à²°à³":"NR","à²¨à²¿à²¯à³":"NU","à²¨à³à²¯à³à²à²¿à²²à³à²à²¡à³":"NZ","à²à²®à²¨à³":"OM","à²ªà²¨à²¾à²®à²¾":"PA","à²ªà³à²°à³":"PE","à²«à³à²°à³à²à²à³ à²ªà³à²²à²¿à²¨à³à²¶à²¿à²¯à²¾":"PF","à²ªà²ªà³à²µà²¾ à²¨à³à²¯à³à²à³à²¨à²¿à²¯à²¾":"PG","à²«à²¿à²²à²¿à²«à³à²¨à³à²¸à³":"PH","à²ªà²¾à²à²¿à²¸à³à²¤à²¾à²¨":"PK","à²ªà³à²²à³à²¯à²¾à²à²¡à³":"PL","à²¸à³à²à²à³ à²ªà²¿à²¯à²°à³ à²®à²¤à³à²¤à³ à²®à²¿à²à³à²²à²¨à³":"PM","à²ªà²¿à²à³âà²à³à²°à³à²¨à³ à²¦à³à²µà³à²ªà²à²³à³":"PN","à²ªà³à²¯à³à²°à³à²à³ à²°à²¿à²à³":"PR","à²ªà³à²¯à²¾à²²à²¿à²¸à³à²à³à²¨à²¿à²¯à²¨à³ à²ªà³à²°à²¦à³à²¶":"PS","à²ªà³à²°à³à²à³à²à²²à³":"PT","à²ªà²²à²¾à²µà³":"PW","à²ªà²°à²¾à²à³à²µà³":"PY","à²à²¤à²¾à²°à³":"QA","à²à²à³ââà²²à³à²¯à²¿à²à²à³ à²à²·à²¿à²¯à²¾à²¨à²¿à²¯":"QO","à²°à³à²¯à³à²¨à²¿à²¯à²¨à³":"RE","à²°à³à²®à³à²¯à²¾à²¨à²¿à²¯à²¾":"RO","à²¸à³à²°à³à²¬à²¿à²¯à²¾":"RS","à²°à²¶à²¿à²¯à²¾":"RU","à²°à³à²µà²¾à²à²¡à²¾":"RW","à²¸à³à²¦à²¿ à²à²°à³à²¬à²¿à²¯à²¾":"SA","à²¸à³à²²à³à²®à²¨à³ à²¦à³à²µà³à²ªà²à²³à³":"SB","à²¸à³à²¶à³à²²à³à²²à³à²¸à³":"SC","à²¸à³à²¡à²¾à²¨à³":"SD","à²¸à³à²µà³à²¡à²¨à³":"SE","à²¸à²¿à²à²à²ªà³à²°":"SG","à²¸à³à²à²à³ à²¹à³à²²à³à²¨à²¾":"SH","à²¸à³à²²à³à²µà³à²¨à²¿à²¯à²¾":"SI","à²¸à³à²µà²¾à²²à³à²¬à²¾à²°à³à²¡à³ à²®à²¤à³à²¤à³ à²à²¾à²¨à³ à²®à²¾à²¯à³à²¨à³":"SJ","à²¸à³à²²à³à²µà²¾à²à²¿à²¯à²¾":"SK","à²¸à²¿à²¯à³à²°à³à²°à²¾ à²²à²¿à²¯à³à²¨à³":"SL","à²¸à³à²¯à²¾à²¨à³ à²®à³à²°à²¿à²¨à³":"SM","à²¸à³à²¨à³à²à²²à³":"SN","à²¸à³à²®à²¾à²²à²¿à²¯à²¾":"SO","à²¸à³à²°à²¿à²¨à²¾à²®":"SR","à²¦à²à³à²·à²¿à²£ à²¸à³à²¡à²¾à²¨à³":"SS","à²¸à²¾à²µà³ à²à³à²®à³ à²®à²¤à³à²¤à³ à²ªà³à²°à²¿à²¨à³à²¸à²¿à²ªà³":"ST","à²à²²à³ à²¸à²¾à²²à³à²µà³à²¡à²¾à²°à³":"SV","à²¸à²¿à²à²à³ à²®à²¾à²°à³à²à²¨à³":"SX","à²¸à²¿à²°à²¿à²¯à²¾":"SY","à²¸à³à²µà²¾à²à²¿à²²à³à²¯à²¾à²à²¡à³":"SZ","à²à³à²°à²¿à²¸à³à²¤à²¨à³ à²¡à²¾ à²à³à²¨à³à²¹à²¾":"TA","à²à²°à³à²à³à²¸à³ à²®à²¤à³à²¤à³ à²à³à²à³à²¸à³ à²¦à³à²µà³à²ªà²à²³à³":"TC","à²à²¾à²¡à³":"TD","à²«à³à²°à³à²à²à³ à²¦à²à³à²·à²¿à²£ à²ªà³à²°à²¦à³à²¶à²à²³à³":"TF","à²à³à²à³":"TG","à²¥à³à²²à³à²¯à²¾à²à²¡à³":"TH","à²¤à²à²¾à²à²¿à²¸à³à²¥à²¾à²¨à³":"TJ","à²à³à²à³à²²à²¾à²µà³":"TK","à²ªà³à²°à³à²µ à²¤à²¿à²®à³à²°à³":"TL","à²¤à³à²°à³à²à²®à³à²¨à²¿à²¸à³à²¥à²¾à²¨à³":"TM","à²à³à²¨à²¿à²¶à²¿à²¯à²¾":"TN","à²à³à²à²":"TO","à²à²°à³à²à²¿":"TR","à²à³à²°à²¿à²¨à²¿à²¡à²¾à²¡à³ à²®à²¤à³à²¤à³ à²à³à²¬à³à²¯à²¾à²à³":"TT","à²à³à²µà²¾à²²à³":"TV","à²¥à³à²µà²¾à²¨à³":"TW","à²à²¾à²à²à²¾à²¨à²¿à²¯à²¾":"TZ","à²à²à³à²°à³à²¨à³":"UA","à²à²à²¾à²à²¡à²¾":"UG","U.S. à²®à³à²¨à²°à³ à²à²à³âà²²à³à²¯à²¿à²à²à³ à²¦à³à²µà³à²ªà²à²³à³":"UM","à²à²®à³à²°à²¿à²à²¾ à²¸à²à²¯à³à²à³à²¤ à²¸à²à²¸à³à²¥à²¾à²¨":"US","à²à²°à³à²à³à²µà³":"UY","à²à²à³à²¬à³à²à²¿à²¸à³à²¥à²¾à²¨à³":"UZ","à²µà³à²¯à²¾à²à²¿à²à²¨à³":"VA","à²¸à³à²à²à³ à²µà²¿à²¨à³à²¸à³à²à²à³ à²®à²¤à³à²¤à³ à²à³à²°à³à²¨à³à²¡à³à²¨à³à²¸à³":"VC","à²µà³à²¨à³à²à³à²µà³à²²à²¾":"VE","à²¬à³à²°à²¿à²à²¿à²·à³ à²µà²°à³à²à²¿à²¨à³ à²¦à³à²µà³à²ªà²à²³à³":"VG","à²¯à³.à²à²¸à³. à²µà²°à³à²à²¿à²¨à³ à²¦à³à²µà³à²ªà²à²³à³":"VI","à²µà²¿à²¯à³à²à³à²¨à²¾à²®à³":"VN","à²µà²¨à³à²à³":"VU","à²µà²¾à²²à²¿à²¸à³ à²®à²¤à³à²¤à³ à²«à³à²à³à²¨à²¾":"WF","à²¸à²®à³à²µà²¾":"WS","à²¯à³à²®à²¨à³":"YE","à²®à²¯à³à²à³à²à³":"YT","à²¦à²à³à²·à²¿à²£ à²à²«à³à²°à²¿à²à²¾":"ZA","à²à²¾à²à²¬à²¿à²¯à²¾":"ZM","à²à²¿à²à²¬à²¾à²¬à³à²µà³":"ZW","à²à²ªà²°à²¿à²à²¿à²¤ à²à²¥à²µà²¾ à²à²®à²¾à²¨à³à²¯ à²ªà³à²°à²¦à³à²¶":"ZZ"};
ilib.data.ctrynames_ko = {"ììì":"142","ì¤ì ììì":"143","ìììì":"145","ì ë½":"150","ëì ë½":"151","ë¶ì ë½":"154","ìì ë½":"155","ë¼í´ ìë©ë¦¬ì¹´":"419","ì¸ê³":"001","ìíë¦¬ì¹´":"002","ë¶ìë©ë¦¬ì¹´":"003","ë¨ìë©ë¦¬ì¹´[ë¨ë¯¸]":"005","ì¤ì¸ìëì":"009","ììíë¦¬ì¹´":"011","ì¤ì ìë©ë¦¬ì¹´":"013","ëë¶ ìíë¦¬ì¹´":"014","ë¶ë¶ ìíë¦¬ì¹´":"015","ì¤ë¶ ìíë¦¬ì¹´":"017","ë¨ë¶ ìíë¦¬ì¹´":"018","ìë©ë¦¬ì¹´ ëë¥":"019","ë¶ë¶ ìë©ë¦¬ì¹´":"021","ì¹´ë¦¬ë¸ í´ ì ë":"029","ëììì":"030","ë¨ììì":"034","ëë¨ ììì":"035","ë¨ì ë½":"039","ì¤ì¤í¸ëë¼ìì":"053","ë©ë¼ë¤ìì":"054","ë¯¸í¬ë¡ë¤ìì ì§ì­":"057","í´ë¦¬ë¤ìì":"061","ì´ì¼ì ì¬":"AC","ìëë¼":"AD","ìëìë¯¸ë¦¬í¸ ì°í©":"AE","ìíê°ëì¤í":"AF","ì¤í°ê° ë°ë¶ë¤":"AG","ìê¸¸ë¼":"AI","ìë°ëì":"AL","ìë¥´ë©ëì":"AM","ë¤ëëëë ¹ ìí¸ë ì¤":"AN","ìê³¨ë¼":"AO","ë¨ê·¹ ëë¥":"AQ","ìë¥´í¨í°ë":"AR","ìë©ë¦¬ì¹¸ ì¬ëª¨ì":"AS","ì¤ì¤í¸ë¦¬ì":"AT","ì¤ì¤í¸ë ì¼ë¦¬ì":"AU","ìë£¨ë°":"AW","ì¬ëë ì ë":"AX","ìì ë¥´ë°ì´ì":"AZ","ë³´ì¤ëì í¤ë¥´ì²´ê³ ë¹ë":"BA","ë°ë² ì´ëì¤":"BB","ë°©ê¸ë¼ë°ì":"BD","ë²¨ê¸°ì":"BE","ë¶ë¥´í¤ëíì":"BF","ë¶ê°ë¦¬ì":"BG","ë°ë ì¸":"BH","ë¶ë£¬ë":"BI","ë² ë":"BJ","ì ë°ë¥´íë¥´ë¯¸":"BL","ë²ë®¤ë¤":"BM","ë¸ë£¨ëì´":"BN","ë³¼ë¦¬ë¹ì":"BO","ë¤ëëëë ¹ ì¹´ë¦¬ë¸":"BQ","ë¸ë¼ì§":"BR","ë°íë§":"BS","ë¶í":"BT","ë¶ë² ":"BV","ë³´ì¸ ìë":"BW","ë²¨ë¼ë£¨ì¤":"BY","ë²¨ë¦¬ì¦":"BZ","ìºëë¤":"CA","ì½ì½ì¤ì ë":"CC","ì½©ê³ -í¨ì¤ì¬":"CD","ì¤ì ìíë¦¬ì¹´ ê³µíêµ­":"CF","ì½©ê³ ":"CG","ì¤ìì¤":"CH","ì½í¸ëë¶ìë¥´":"CI","ì¿¡ì ë":"CK","ì¹ ë ":"CL","ì¹´ë©ë£¬":"CM","ì¤êµ­":"CN","ì½ë¡¬ë¹ì":"CO","í´ë¦½í¼í¼ ì¬":"CP","ì½ì¤íë¦¬ì¹´":"CR","ì¿ ë°":"CU","ê¹ë½ë² ë¥´ë°":"CV","í´ë¼ì":"CW","í¬ë¦¬ì¤ë§ì¤ì¬":"CX","ì¬ì´íë¬ì¤":"CY","ì²´ì½":"CZ","ëì¼":"DE","ëìê³  ê°ë¥´ìì":"DG","ì§ë¶í°":"DJ","ë´ë§í¬":"DK","ëë¯¸ëì¹´":"DM","ëë¯¸ëì¹´ ê³µíêµ­":"DO","ìì ë¦¬":"DZ","ì¸ì°í ë° ë©ë¦¬ì¼":"EA","ìì½°ëë¥´":"EC","ìì¤í ëì":"EE","ì´ì§í¸":"EG","ìì¬íë¼":"EH","ìë¦¬í¸ë¦¬ì":"ER","ì¤íì¸":"ES","ì´ëì¤í¼ì":"ET","ì ë½ ì°í©":"EU","íëë":"FI","í¼ì§":"FJ","í¬í´ëë ì ë":"FK","ë¯¸í¬ë¡ë¤ìì":"FM","íë¡ì ë":"FO","íëì¤":"FR","ê°ë´":"GA","ìêµ­":"GB","ê·¸ë ëë¤":"GD","ê·¸ë£¨ì§ì¼":"GE","íëì¤ë ¹ ê¸°ìë":"GF","ê±´ì§":"GG","ê°ë":"GH","ì§ë¸ë¡¤í°":"GI","ê·¸ë¦°ëë":"GL","ê°ë¹ì":"GM","ê¸°ë":"GN","ê³¼ë¤ë£¨í":"GP","ì ë ê¸°ë":"GQ","ê·¸ë¦¬ì¤":"GR","ì¬ì°ì¤ì¡°ì§ì ì¬ì°ì¤ìëìì¹ ì ë":"GS","ê³¼íë§ë¼":"GT","ê´":"GU","ê¸°ë¤ë¹ì":"GW","ê°ì´ìë":"GY","íì½©, ì¤êµ­ í¹ë³íì êµ¬":"HK","íëì¬-ë§¥ëëëì ë":"HM","ì¨ëë¼ì¤":"HN","í¬ë¡ìí°ì":"HR","ìì´í°":"HT","íê°ë¦¬":"HU","ì¹´ëë¦¬ì ì ë":"IC","ì¸ëë¤ìì":"ID","ìì¼ëë":"IE","ì´ì¤ë¼ì":"IL","ë§¨ ì¬":"IM","ì¸ë":"IN","ìêµ­ë ¹ì¸ëììë¯¼ì§":"IO","ì´ë¼í¬":"IQ","ì´ë":"IR","ìì´ì¬ëë":"IS","ì´íë¦¬ì":"IT","ì ì§":"JE","ìë©ì´ì¹´":"JM","ìë¥´ë¨":"JO","ì¼ë³¸":"JP","ì¼ë":"KE","í¤ë¥´ê¸°ì¤ì¤í":"KG","ìºë³´ëì":"KH","í¤ë¦¬ë°ì":"KI","ì½ëª¨ë¡ì¤":"KM","ì¸ì¸í¸í¬ë¦¬ì¤í í¼ ë¤ë¹ì¤":"KN","ì¡°ì  ë¯¼ì£¼ì£¼ì ì¸ë¯¼ ê³µíêµ­":"KP","ëíë¯¼êµ­":"KR","ì¿ ì¨ì´í¸":"KW","ì¼ì´ë§¨ì ë":"KY","ì¹´ìíì¤í":"KZ","ë¼ì¤ì¤":"LA","ë ë°ë¼":"LB","ì¸ì¸í¸ë£¨ìì":"LC","ë¦¬ííìíì¸":"LI","ì¤ë¦¬ëì¹´":"LK","ë¼ì´ë² ë¦¬ì":"LR","ë ìí ":"LS","ë¦¬í¬ìëì":"LT","ë£©ìë¶ë¥´í¬":"LU","ë¼í¸ë¹ì":"LV","ë¦¬ë¹ì":"LY","ëª¨ë¡ì½":"MA","ëª¨ëì½":"MC","ëª°ëë°":"MD","ëª¬íë¤ê·¸ë¡":"ME","ì ë§ë¥´í±":"MF","ë§ë¤ê°ì¤ì¹´ë¥´":"MG","ë§ì¬ êµ°ë":"MH","ë§ì¼ëëì":"MK","ë§ë¦¬":"ML","ë¯¸ìë§":"MM","ëª½ê³¨":"MN","ë§ì¹´ì¤, ì¤êµ­ í¹ë³íì êµ¬":"MO","ë¶ë§ë¦¬ìëì ë":"MP","ë§í°ëí¬":"MQ","ëª¨ë¦¬íë":"MR","ëª¬í¸ì¸ë¼í¸":"MS","ëª°í":"MT","ëª¨ë¦¬ìì¤":"MU","ëª°ëë¸":"MV","ë§ë¼ì":"MW","ë©ìì½":"MX","ë§ë ì´ìì":"MY","ëª¨ì ë¹í¬":"MZ","ëë¯¸ë¹ì":"NA","ë´ ì¹¼ë ëëì":"NC","ëì ë¥´":"NE","ë¸í½ì¬":"NF","ëì´ì§ë¦¬ì":"NG","ëì¹´ë¼ê³¼":"NI","ë¤ëëë":"NL","ë¸ë¥´ì¨ì´":"NO","ë¤í":"NP","ëì°ë£¨":"NR","ëì°ì":"NU","ë´ì§ëë":"NZ","ì¤ë§":"OM","íëë§":"PA","íë£¨":"PE","íëì¤ë ¹ í´ë¦¬ë¤ìì":"PF","íí¸ìë´ê¸°ë":"PG","íë¦¬í":"PH","íí¤ì¤í":"PK","í´ëë":"PL","ì¸ì¸í¸í¼ìë¥´-ë¯¸ì¼ë¡±":"PM","íì¼ì¸ì¬":"PN","í¸ìë¥´í ë¦¬ì½":"PR","íë ì¤íì¸ ì§êµ¬":"PS","í¬ë¥´í¬ê°":"PT","íë¼ì°":"PW","íë¼ê³¼ì´":"PY","ì¹´íë¥´":"QA","ì¤ì¸ìëì ì¸ê³½":"QO","ë¦¬ì ëì¨":"RE","ë£¨ë§ëì":"RO","ì¸ë¥´ë¹ì":"RS","ë¬ìì":"RU","ë¥´ìë¤":"RW","ì¬ì°ëìë¼ë¹ì":"SA","ìë¡ëª¬ ì ë":"SB","ìì´ì":"SC","ìë¨":"SD","ì¤ì¨ë´":"SE","ì±ê°í¬ë¥´":"SG","ì¸ì¸í¸í¬ë ë":"SH","ì¬ë¡ë² ëì":"SI","ì¤ë°ë°ë¥´ì ë-ìë§ì¬ì¬":"SJ","ì¬ë¡ë°í¤ì":"SK","ììë¼ë¦¬ì¨":"SL","ì°ë§ë¦¬ë¸":"SM","ì¸ë¤ê°":"SN","ìë§ë¦¬ì":"SO","ìë¦¬ë¨":"SR","ë¨ìë¨":"SS","ìí¬ë© íë¦°ìí":"ST","ìì´ë°ëë¥´":"SV","ì í¸ë§ë¥´í´":"SX","ìë¦¬ì":"SY","ì¤ìì§ëë":"SZ","í¸ë¦¬ì¤íë¤ì¿ ë":"TA","í°í¬ì¤ì¼ì´ì»¤ì¤ì ë":"TC","ì°¨ë":"TD","íëì¤ ë¨ë¶ ì§ë°©":"TF","í ê³ ":"TG","íêµ­":"TH","íì§í¤ì¤í":"TJ","í ì¼ë¼ì°":"TK","ëí°ëª¨ë¥´":"TL","í¬ë¥´í¬ë©ëì¤í":"TM","íëì§":"TN","íµê°":"TO","í°í¤":"TR","í¸ë¦¬ëë¤ë í ë°ê³ ":"TT","í¬ë°ë£¨":"TV","ëë§":"TW","íìëì":"TZ","ì°í¬ë¼ì´ë":"UA","ì°ê°ë¤":"UG","ë¯¸êµ­ë ¹ í´ì¸ ì ë":"UM","ë¯¸êµ­":"US","ì°ë£¨ê³¼ì´":"UY","ì°ì¦ë² í¤ì¤í":"UZ","ë°í°ì¹¸":"VA","ì¸ì¸í¸ë¹ì¼í¸ê·¸ë ëë":"VC","ë² ë¤ììë¼":"VE","ìêµ­ë ¹ ë²ì§ ìì¼ëë":"VG","ë¯¸êµ­ë ¹ ë²ì§ ìì¼ëë":"VI","ë² í¸ë¨":"VN","ë°ëìí¬":"VU","ìë¦¬ì¤-í¸í¬ë ì ë":"WF","ì¬ëª¨ì":"WS","ìë©":"YE","ë§ìí°":"YT","ë¨ìíë¦¬ì¹´":"ZA","ì ë¹ì":"ZM","ì§ë°ë¸ì¨":"ZW","ìììê±°ë ì í¨íì§ ìì ì§ì­":"ZZ"};
ilib.data.ctrynames_ks = {"Ø§ÛØ´ÛØ§":"142","ÙØ±Ú©ÙØ²Û Ø§ÛØ´ÛØ§":"143","ÙÙØºØ±ÙØ¨Û Ø§ÛØ´ÛØ§":"145","ÛÙÙØ±ÙÙ¾":"150","ÙØ´Ø±ÙÙÛ ÛÙÙØ±ÙÙ¾":"151","Ø´ÙÙÙ²ÙÛ ÛÙÙØ±ÙÙ¾":"154","ÙØºØ±ÙØ¨Û ÛÙÙØ±ÙÙ¾":"155","ÙØ§Ø·ÛÙÙÛ Ø§ÙÙØ±ÛÙÚ©Ø§ ØªÛÙ Ú©ÛØ±ÙØ¨ÛÙÙ":"419","Ø¯ÙÙÛØ§":"001","Ø§ÙÙØ±ÛÙÚ©Ø§":"002","Ø´ÙÙÙ²ÙÛ Ø§ÙÙØ±ÛÙÚ©Ø§":"003","Ø¬ÙÙÙÙÙÛ Ø§ÙÙØ±ÙÛÙÚ©Ø§":"005","Ø§ÙØ´ÙÙÛØ§":"009","ÙÙØºØ±ÛÙØ¨Û Ø§ÙÙØ±ÛÙÚ©Ø§":"011","ÙØ±Ú©ÙØ²Û Ø§ÙÙØ±ÛÙÚ©Ø§":"013","ÙÙØ´Ø±ÙÙÛ Ø§ÙÙØ±ÛÙÚ©Ø§":"014","Ø´ÙÙÙ²ÙÛ Ø§ÙÙØ±ÛÙÚ©Ø§":"015","ÙØ³Ø·Û Ø§ÙÙØ±ÛÙÚ©Ø§":"017","Ø¬ÙÙÙØ¨Û Ø§ÙÙØ±ÛÙÚ©Ø§":"018","Ø§ÙÙØ±ÛÙÚ©ÙØ³":"019","Ø´ÙÙÙ²ÙÛ Ø§ÙÙØ±ÛÙÚ©Ø§ Ø®ÙØ·ÛÙ":"021","Ú©ÙØ±ÙØ¨Ø¨ÛÙÙ":"029","ÙÙØ´Ø±ÙÙÛ Ø§ÛØ´ÛØ§":"030","Ø¬ÙÙÙØ¨Û Ø§ÛØ´ÛØ§":"034","Ø¬ÙÙÙØ¨ÛÙ ÙÙØ´Ø±ÙÙÛ Ø§ÛØ´ÛØ§":"035","Ø¬ÙÙÙØ¨Û ÛÙÙØ±ÙÙ¾":"039","Ø¢Ø³Ù¹Ø±ÛÙÛØ§ ØªÛÙ ÙÙÙØ²ÙÙÛÙÙÚ":"053","ÙÙ®ÛªÙÙÙÛÙØ´ÙÛØ§":"054","ÙÙÛÚ©Ø±ÙÙÙÛØ´ÙÛÙÙ Ø®ÙØ·ÛÙ":"057","Ù¾Ø§ÙÙÛØ´ÙÛØ§":"061","Ø§Ù®ÛªÙÚÙØ±Ø§":"AD","ÙÙØªØ­Ø¯Û Ø¹Ø±ÙØ¨ Ø§ÙØ§Ø±Ø§Øª":"AE","Ø§ÙÙØºØ§ÙÙØ³ØªØ§Ù":"AF","Ø§Ù®ÛªÙÙ¹ÙÚ¯ÙÙØ§ ØªÛÙ Ø¨Ø§Ø±Ø¨ÙÚØ§":"AG","Ø§ÛÙÙÚ¯ÙÙÙØ§":"AI","Ø§Ù®ÛªÙØ¨Ø§ÙÙÛØ§":"AL","Ø§ÙØ±ÙØ§ÙÙÛØ§":"AM","ÙÙÛØ¯ÙØ±ÙÛÙÙÚÙØ³ Ø§Ù®ÛªÙÙ¹ÙÛÙÙØ³":"AN","Ø§ÛÙÙÚ¯ÙÙØ§":"AO","Ø§ÛÙÙ¹Ø§Ø±Ù¹ÙÚ©Ø§":"AQ","Ø£Ø±Ø¬ÙÙÙ¹ÛÙØ§":"AR","Ø§ÙÙØ±ÛÙÚ©ÙÙ Ø³ÙÙÙØ§":"AS","Ø¢Ø³Ù¹ÙÛØ§":"AT","Ø¢Ø³Ù¹Ø±ÛÙÙÛØ§":"AU","Ø§ÙØ±ÙÙØ¨Ø§":"AW","Ø§ÛÙÛÙÙÚ Ø¬ÙØ²ÛÙØ±Ù":"AX","Ø¢Ø²ÙØ±Ø¨Ø§Ø¬Ø§Ù":"AZ","Ø¨ÙØ³ÙÙÛØ§ ØªÛÙ ÛÙØ±Ø²ÙÚ¯ÙÙÙÙØ§":"BA","Ø¨Ø§Ø±Ø¨ÛÚØ§Ø³":"BB","Ø¨ÙÙÙÚ¯ÙØ§Ø¯ÛØ´":"BD","Ø¨ÛÙÙØ¬ÙÛÙÙ":"BE","Ø¨ÙØ±Ú©ÙÙØ§ ÙÛØ³Ù":"BF","Ø¨ÙÙØ¬ÛØ±ÙÛØ§":"BG","Ø¨Ø­Ø±ÛÙÙ":"BH","Ø¨ÙØ±ÙÙÚÙ":"BI","Ø¨ÙÙÙÙ":"BJ","Ø³ÛÙÙÙ¹ Ø¨Ø§Ø±ØªÙÚ¾ÛÙÙÛ":"BL","Ø¨ÙØ±ÙÛÙÚØ§":"BM","Ø¨ÙØ±ÙÙÛ":"BN","Ø¨ÙÙÙÙÙÛØ§":"BO","Ø¨Ø±Ø·Ø§ÙÙÛ ÙÙØ·Ø¨ÛÙ Ø¬ÙÙÙÙØ¨Û Ø¹ÙØ§ÙÛÙ":"BQ","Ø¨Ø±ÙØ§Ø²ÙÙ":"BR","Ø¨ÙÛØ§ÙÙØ³":"BS","Ø¨ÙÙÙ¹Ø§Ù":"BT","Ø¨ÙÙÙÙ¹ Ø¬ÙØ²ÛÙØ±Ù":"BV","Ø¨ÙØªÙØ³ÙØ§ÙØ§":"BW","Ø¨ÛÙØ§Ø±ÙÙØ³":"BY","Ø¨ÛÙÙØ¬":"BZ","Ú©ÛÙÙÚØ§":"CA","Ú©ÙÚ©ÙØ³ Ú©ÛÙÙÙÙÙÚ¯ Ø¬ÙØ²ÛÙØ±Ù":"CC","Ú©ÙÙÙÚ¯Ù Ú©ÙÙØ´Ø§Ø³Ø§":"CD","ÙØ±Ú©ÙØ²Û Ø§ÙÙØ±ÛÙÚ©Û Ø¬ÙÙÙØ±ÛÙØª":"CF","Ú©ÙÙÙÚ¯Ù Ø¨ÙØ±ÙØ²Ø§ÙÙÙÛ":"CG","Ø³ÙÙÙØ²ÙØ±ÙÛÙÙÚ":"CH","Ø§ÙÛÙÙØ±Û Ú©ÙØ³Ù¹":"CI","Ú©ÙÚ© Ø¬ÙØ²ÛÙØ±Ù":"CK","ÚÙÙÛ":"CL","Ú©ÛÙÙÙØ±ÙÙÙ":"CM","ÚÛÙÙ":"CN","Ú©ÙÙÙÙØ¨ÙÛØ§":"CO","Ú©ÙØ³Ù¹Ø§ Ø±ÙÚ©Ø§":"CR","Ú©ÛÙÙØ¨Ø§":"CU","Ú©ÛÙ¾ Ø¤Ø±ÚÛ":"CV","Ú©Ø±ÙØ³ÙÙØ³ Ø¬ÙØ²ÛÙØ±Ù":"CX","Ø³Ø§ÛÙØ±ÙØ³":"CY","ÚÛÚ© Ø¬ÙÙÙÙØ±ÙÛÙØª":"CZ","Ø¬Ø±ÙÙÙÛ":"DE","Ø¬ÙØ¨ÙÙØªÛ":"DJ","ÚÛÙÙÙØ§Ø±ÙÚ©":"DK","ÚÙÙÙÙÙÚ©Ø§":"DM","ÚÙÙÙÙÙÚ©ÙÙ Ø¬ÙÙÙØ±ÙÛÙØª":"DO","Ø§Ù®ÛªÙØ¬ÛØ±ÙÛØ§":"DZ","Ø§ÙÚ©ÙØ§ÚÙØ±":"EC","Ø§ÛØ³Ù¹ÙÙÙÛØ§":"EE","ÙÙØ³ÙØ±":"EG","ÙØ´Ø±ÙÙÛ Ø³ÙÛØ§Ø±Ø§":"EH","Ø§ÙØ±ÙÙ¹ÙÛØ§":"ER","Ø³ÙÙ¾ÛÙ":"ES","Ø§ÙØªÚ¾ÙÙ¾ÙÛØ§":"ET","ÙÙÙÙÛÙÙÚ":"FI","ÙÙØ¬Û":"FJ","ÙÙÙØ§Ú©ÙÛÙÙÚ Ø¬ÙØ²ÛÙØ±Ù":"FK","ÙØ±ÙØ§ÙØ³":"FR","Ú¯ÛØ¨Ø§Ù":"GA","ÛÙÙØ§ÛÙ¹ÙÚ Ú©ÙÙÙÚ¯ÚÙÙ":"GB","Ú¯Ø±ÙÙÛÚØ§":"GD","Ø¬Ø§Ø±Ø¬ÙÛØ§":"GE","ÙØ±ÙØ§ÙØ³ÙØ³Û Ú¯ÙØ§ÙØ§":"GF","Ú¯ÛÙÙÙÙØ±Ø³Û":"GG","Ú¯Ø§ÙØ§":"GH","Ø¬ÙØ¨Ø±Ø§ÙÙ¹ÙØ±":"GI","Ú¯Ø±ÛÙÙÙÛÙÙÚ":"GL","Ú¯ÙÙØ¨ÙÛØ§":"GM","Ú¯ÙÙÛ":"GN","Ú¯ÙÙØ§ÚÛÙÙÙ¾":"GP","Ø§ÙÚ©ÙÙÙ¹ÙØ±ÙÛÙÙ Ú¯ÙÙÛ":"GQ","Ú¯Ø±ÛÙØ³":"GR","Ø¬ÙÙÙØ¨Û Ø¬Ø§Ø±Ø¬ÙÛØ§ ØªÛÙ Ø¬ÙÙÙØ¨Û Ø³ÛÙÙÚÙÙÚ Ø¬ÙØ²ÛÙØ±Ù":"GS","Ú¯ÙØªÛØ¯Ø§ÙØ§":"GT","Ú¯ÙÙØ§Ù":"GU","Ú¯ÛÙÙÛ Ø¨ÙØ³Ø§Ù":"GW","Ú¯ÙÛØ§ÙØ§":"GY","ÛØ§ÙÙÚ¯ Ú©Ø§ÙÙÚ¯ Ø§ÛØ³ Ø§Û Ø¢Ø± ÚÛÙÙ":"HK","ÛÙØ±ÙÚ Ø¬ÙØ²ÛÙØ±Ù ØªÛÙ ÙÙ®ÛªÚ©ÚÙÙØ§ÙÚÙ Ø¬ÙØ²ÛÙØ±Ù":"HM","ÛØ§ÙÙÚÙÙØ±ÙØ³":"HN","Ú©Ø±ÙÙØ´ÙÛØ§":"HR","ÛØ§ÛØªÛ":"HT","ÛÙÙÙÚ¯Ø±Û":"HU","Ø§ÙÙÚÙÙÛØ´ÙÛØ§":"ID","Ø§ÙÛÙØ±ÙÛÙÙÚ":"IE","Ø§ÙØ³Ø±Ø§ÛÙÙ":"IL","Ø¢ÛÙÙ Ø¢Ù ÙÛÙÙ":"IM","ÛÙÙÙØ¯ÙØ³ØªØ§Ù":"IN","Ø¨Ø±Ø·Ø§ÙÙÛ Ø¨Ø­Ø±Ù ÛÙÙÙØ¯Û Ø¹ÙØ§ÙÛÙ":"IO","Ø§ÛÙØ±Ø§Ù":"IQ","Ø§ÛÙØ±Ø§Ù":"IR","Ø§ÙÛÙØ³ÙÛÙÙÚ":"IS","Ø§ÙÙ¹ÙÛ":"IT","Ø¬ÙØ±Ø³Û":"JE","Ø¬ÙÙØ§ÛÚ©Ø§":"JM","Ø¬Ø§Ù¾Ø§Ù":"JP","Ú©ÙÙÙÛØ§":"KE","Ú©ÙØ±Ú¯ÙØ³ØªØ§Ù":"KG","Ú©ÙÙØ¨ÙÚÙÛØ§":"KH","Ú©ÙØ±ÙØ¨Ø§ØªÛ":"KI","Ú©ÙÙÙØ±ÙØ³":"KM","Ø³ÛÙÙÙ¹ Ú©ÙÙ¹ÙØ³ ØªÛÙ ÙÛÙÙØ³":"KN","Ø´ÙÙÙ²ÙÛ Ú©ÙØ±ÙÛØ§":"KP","Ø¬ÙÙÙØ¨Û Ú©ÙØ±ÙÛØ§":"KR","Ú©ÙÙÛØª":"KW","Ú©ÛÙÙÙ Ø¬ÙØ²ÛÙØ±Ù":"KY","Ú©ÙØ²Ø§Ú©ÙØ³ØªØ§Ù":"KZ","ÙØ§Ø³":"LA","ÙÙ®ÛªØ¨ÙØ§Ù":"LB","Ø³ÛÙÙÙ¹ ÙÙÙØ³ÙÛØ§":"LC","ÙÙÚ©Ù¹ÛÙØ³Ù¹ÛÙÙ":"LI","Ø³ÙØ±ÛÙÙÙÙÙÚ©Ø§":"LK","ÙØ§ÛØ¨ÛØ±ÙÛØ§":"LR","ÙÛØ³ÙØªÚ¾Ù":"LS","ÙÙØªÚ¾ÙÙØ§ÙÙÛØ§":"LT","ÙÙÚ©Ø³ÙÙØ¨ÙØ±ÙÚ¯":"LU","ÙÛÙÙ¹ÙÙÛØ§":"LV","ÙÙØ¨ÛØ§":"LY","ÙÙØ±ÙÚ©Ù":"MA","ÙÙÙÛÙÚ©Ù":"MC","ÙÙÙÚØ§ÙÙÛØ§":"MD","ÙÙÙ¹ÙÙÛÙÚ¯ÙØ±ÛÙ":"ME","Ø³ÛÙÙÙ¹ ÙØ§Ø±Ù¹ÙÙ":"MF","ÙÛÚØ§Ú¯Ø§Ø³Ú©Ø§Ø±":"MG","ÙØ§Ø±Ø´ÙÙ Ø¬ÙØ²ÛÙØ±Ù":"MH","ÙÙ®ÛªØ³ÙÚÙÙÙÛØ§":"MK","ÙØ§ÙÛ":"ML","ÙÙÛÙÙÙØ§ Ø¨ÙØ±ÙØ§":"MM","ÙÙÙÙÚ¯ÙÙÙÛØ§":"MN","ÙÙÚ©Ø§ÙÙ Ø§ÛØ³ Ø§Û Ø¢Ø± ÚÛÙÙ":"MO","Ø´ÙÙÙ²ÙÛ ÙØ§Ø±ÙÛØ§ÙØ§ Ø¬ÙØ²ÛÙØ±Ù":"MP","ÙØ§Ø±Ù¹ÙÙÙÚ©":"MQ","ÙØ§Ø±ÙÙ¹Ø§ÙÙÛØ§":"MR","ÙØ§ÙÙÙ¹Ø³ÛØ±Ø§Ù¹":"MS","ÙØ§ÙÙ¹Ø§":"MT","ÙÙØ±ÙØ´ÙØ³":"MU","ÙØ§ÙØ¯ÛÙÙ":"MV","ÙÙØ§ÙÛ":"MW","ÙÙ®ÛªÚ©Ø³ÙÚ©Ù":"MX","ÙÙÙÛØ´ÙÛØ§":"MY","ÙÙØ²ÙÙØ¨ÙÚ©":"MZ","ÙØ§ÙÙØ¨ÙÛØ§":"NA","ÙÙÙ Ú©ÛÙÙÚÙÙÙÛØ§":"NC","ÙØ§ÛØ¬ÙØ±":"NE","ÙØ§Ø±ÙØ§Ú© Ø¬ÙØ²ÛÙØ±Ù":"NF","ÙØ§ÛØ¬ÛØ±ÙÛØ§":"NG","ÙØ§Ú©Ø§Ø±Ø§Ú¯ÙÙØ§":"NI","ÙÛÙØ¯ÙØ±ÙÛÙÙÚ":"NL","ÙØ§Ø±ÙÛ":"NO","ÙÛÙ¾Ø§Ù":"NP","ÙØ§Ø±ÙÙÙ":"NR","ÙÛÙÙ":"NU","ÙÛÙÙØ²ÙÙÛÙÙÚ":"NZ","Ø§ÙÙØ§Ù":"OM","Ù¾ÙÙØ§ÙØ§":"PA","Ù¾ÛÙØ±ÙÙ":"PE","ÙØ±ÙØ§ÙØ³Û Ù¾ÙÙÙÙÛØ´ÙÛØ§":"PF","Ù¾Ø§Ù¾ÙÙØ§ ÙÛÙÙ Ú¯ÛÙÙÛ":"PG","ÙÙÙÙÙ¾ÙÛÙØ³":"PH","Ù¾Ø§Ú©ÙØ³ØªØ§Ù":"PK","Ù¾ÙÙÛÙÙÚ":"PL","Ø³ÛÙÙÙ¹ Ù¾ÛÙØ±Û ØªÛÙ ÙÙÚ©ÛÙÙÛÙÙ":"PM","Ù¾ÙÙ¹Ú©ÛØ±ÙÙÛ Ø¬ÙØ²ÛÙØ±Ù":"PN","Ù¾ÙØ±Ù¹Ù Ø±ÙÚ©Ù":"PR","ÙÙÙÙØ³ØªÛÙÙ":"PS","Ù¾ÙØ±ØªÙÚ¯Ø§Ù":"PT","Ù¾ÙÙØ§Ù":"PW","Ù¾ÙØ±Ø§Ú¯ÙÛ":"PY","ÙÙØ·ÙØ±":"QA","Ø¢ÙÙÙ¹ÙØ§ÛÙÙÚ¯ Ø§ÙØ´ÛÙÙÛØ§":"QO","Ø±ÙÛÙÙÙÙÛÙÙ":"RE","Ø±ÙÙØ§ÙÙÛØ§":"RO","Ø³ÙØ±Ø¨ÙÛØ§":"RS","Ø±ÙÙØ³":"RU","Ø±ÙÙÙØ§ÙÙÚØ§":"RW","Ø³ÙÙØ¯Û Ø¹Ø±Ø¨ÙÛÛ":"SA","Ø³ÙÙØ§ÙØ§Ù Ø¬ÙØ²ÛÙØ±Ù":"SB","Ø³ÛØ´ÙÙÙØ³":"SC","Ø³ÙÙÚØ§Ù":"SD","Ø³ÙÙÙÚÙÙ":"SE","ÙØ³ÙÙÙÚ¯Ø§Ù¾ÙÙØ±":"SG","Ø³ÛÙÙÙ¹ ÛÙ®ÛªÙÙÙØ§":"SH","Ø³ÙÙÙÙÛÙÙÛØ§":"SI","Ø³ÙÙØ§ÙØ¨Ø±ÛÚ ØªÛÙ Ø¬Ø§Ù ÙØ§ÛÛÚ":"SJ","Ø³ÙÙÙÙØ§Ú©ÙÛØ§":"SK","Ø³ÛÙØ±Ø§ÙÛÙÙÙ":"SL","Ø³ÛÙ ÙÛØ±ÙÙÙ":"SM","Ø³ÛÙÛÚ¯ÙÙ":"SN","Ø³ÙÙØ§ÙÙÛØ§":"SO","Ø³ÙØ±ÙÙØ§Ù":"SR","Ø³Ø§Ù ØªÙÙ ØªÛÙ Ù¾Ø±ÙÙØ³ÙÙ¾Û":"ST","Ø§Ù®ÛªÙ Ø³ÙÙÙØ§ÚÙØ±":"SV","Ø´Ø§Ù":"SY","Ø³ÙÙØ²ÙÙÛÙÙÚ":"SZ","ØªÙØ±ÙÚ© ØªÛÙ Ú©ÛÚ©ÙØ³ Ø¬ÙØ²ÛÙØ±Ù":"TC","ÚØ§Ú":"TD","ÙØ±ÙØ§ÙØ³ÙØ³Û Ø¬ÙÙÙÙØ¨Û Ø¹ÙÙØ§ÙÛÙ":"TF","Ù¹ÙÚ¯Ù":"TG","ØªÚ¾Ø§ÛÙÛÙÙÚ":"TH","ØªØ§Ø¬Ú©ÙØ³ØªØ§Ù":"TJ","ØªÙÚ©ÛÙØ§Ù":"TK","ÙÙØ´Ø±ÙÙÛ ØªØ§ÛÙÙØ±":"TL","ØªÙØ±ÙÙÙÙØ³ØªØ§Ù":"TM","Ù¹ÙÙÛØ´ÙÛØ§":"TN","Ù¹ÙÙÙÚ¯Ø§":"TO","ØªÙØ±Ú©Û":"TR","Ù¹Ø±ÙÙÙÙØ¯Ø§Ø¯ ØªÛÙ Ù¹ÙØ¨ÛÚ¯Ù":"TT","ØªÙÙÙØ§ÙÙÙ":"TV","ØªØ§ÛÙØ§Ù":"TW","ØªÙÙØ¬Ø§ÙÙÛØ§":"TZ","ÛÙÙØ±ÙÚ©ÛÙ":"UA","ÛÙÙÚ¯Ø§ÙÙÚØ§":"UG","ÛÙÙÙØ§ÛÙ¹ÙÚ Ø³ÙÙ¹ÛÙ¹ÙØ³ ÙØ§ÛÙÙØ± Ø¢ÙÙÙ¹ÙÛÛÙÙÙÚ¯ Ø¬ÙØ²ÛÙØ±Ù":"UM","ÛÙÙÙØ§ÛÙ¹ÙÚ Ø³ÙÙ¹ÛÙ¹ÙØ³":"US","ÛÙÙØ±ÙÚ¯Û":"UY","Ø§ÙØ²Ø¨ÙÚ©ÙØ³ØªØ§Ù":"UZ","ÙÛÙ¹ÙÚ©ÙÙ Ø³ÙÙ¹Û":"VA","Ø³ÛÙÙÙ¹ ÙÛÙØ³Ù®ÛªÙ¹ ØªÛÙ Ú¯Ø±ÙÛÙØ§ÚØ§ÛÙÙØ²":"VC","ÙÛÙØ§Ø²ÙÙÙØ§":"VE","Ø¨ÙØ±Ø·Ø§ÙÙÛ Ø¤Ø±Ø¬ÙÙ Ø¬ÙØ²ÛÙØ±Ù":"VG","ÛÙÙ Ø§ÛØ³ Ø¤Ø±Ø¬ÙÙ Ø¬ÙØ²ÛÙØ±Ù":"VI","ÙÛÙ¹ÙÙØ§Ù":"VN","ÙØ§ÙÙÙØªÙÙ":"VU","ÙØ§ÙÙØ³ ØªÛÙ ÙÛÙÙÚÙÙÙØ§":"WF","Ø³ÛÙÙÙØ§":"WS","ÛÙÙÙÙ":"YE","ÙÙÛÛÙ¹":"YT","Ø¬ÙÙÙÙØ¨Û Ø§ÙÙØ±ÛÙÚ©Ø§":"ZA","Ø¬Ø§ÙØ¨ÙÛØ§":"ZM","Ø²ÙÙØ¨Ø§Ø¨Û":"ZW","ÙØ§ÙØ¹ÙÙÙÙ ØªÛÙ ÙØ§ÙÙÚ¯ÛØ§Ø± Ø¹ÙÙØ§ÙÛÙ":"ZZ"};
ilib.data.ctrynames_ku = {"Ø¯Ø±ÙØ³ØªÚ©Ø±Ø§Ù":false,"Ø¦ÛÙØªÛÚ¯ÙØ§ Ù Ø¨Ø§Ø±Ø¨ÙØ¯Ø§":"AG","Ø¹ÛØ±ÛØ¨Ø³ØªØ§Ù":"SA","Ø¨ÛØ³ÙÛ Ù ÙÛØ±Ø²ÛÚ¯ÛÚ¤ÛÙØ§":"BA","BVI":"VG","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ú©ÛÛÙ¾ Ú¤ÛØ±Ø¯":"CV","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ú©ÛÚ©ÛØ³ Ù Ú©ÛÛÙÛÙ":"CC","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ú©ÛÚ©ÛØ³ (Ú©ÛÛÙÛÙ)":"CC","Ú©ÛÙÚ¯ÛØ Ú©ÛÙØ§Ø±Û Ø¯ÛÙÙÚ©Ø±Ø§ØªÛ":"CD","Ú©ÛÙØ§Ø±Û Ø¯ÛÙÙÚ©Ø±Ø§ØªÛ Ú©ÛÙÚ¯Û":"CD","Ú©ÛÙØ§Ø±Û Ú¯ÛÙÛ Ø¯ÛÙÙÚ©Ø±Ø§ØªÛ Ú©ÛØ±Û":"KP","Ø¯ÙØ¨ÛÛ":"AE","ØªÛÛÙÙØ±Û Ø®ÛØ±ÙÛÚµØ§Øª":"TL","Ø¦ÛÙÚ¯ÙØªÛØ±Ø§":"GB","ÙØ§ÚµÚ©ÙØ§ÙØ¯":"FK","Ø¯ÙØ±Ú¯ÛÛ ÙÛØ±Ø¯ Ù Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ ÙØ§Ú©Ø¯ÛÙØ§ÚµØ¯":"HM","ÙØ§ÙÚÛ Ø¯Ø§Ú¯ÛØ±Ú©Ø±Ø§ÙÛÚ©Ø§ÙÛ ÙÛÙÛØ³ØªÛÙ":"PS","Ú©ÛÙØ§Ø±Û Ú¯ÛÙÛ ÚÛÙ":"CN","ÙÛØ±ÛÙÛ ÙÛÙÛØ³ØªÛÙ":"PS","Ù¾ÛÙÛÙÛØ³ÛØ§":"061","Ú©ÛÙØ§Ø±Û ÚÛÙ":"TW","Ú©ÛÙØ§Ø±Û Ø¦ÛØ±ÙÛÙØ¯Ø§":"IE","Ú©ÛÙØ§Ø±Û Ø³ÛÙÚ¯Ø§ÙÙØ±Û":"SG","Ø³Ø§ÙØª Ø¨Ø§Ø±ØªØ³":"BL","Ø³Ø§ÙØª ÙÛÙÛÙØ§Ø Ø¦ÛØ³ÛÙØ´Ù Ù ØªØ±ÛØ³ØªØ§Ù Ø¯Ø§ Ú©ÙÙÙØ§":"SH","Ø³Ø§ÙØª Ú©ÛØªØ³ Ù ÙÛÚ¤ÛØ³":"KN","Ø³Ø§ÙØª Ù¾ÛÛØ± Ù ÙÛÚ©ÛÙÛÙ":"PM","Ø³Ø§ÙØª Ú¤ÛÙØ³Øª Ù Ú¯Ø±ÛÙØ§Ø¯Ø§":"VC","Ø³Ø§Ù ØªÛÙ Ù Ù¾Ø±ÛÙØ³ÛÙ¾":"ST","Ø³Ú©ÛØªÙØ§ÙØ¯":"GB","Ø³ÛÙÛÙÛÙ":"SB","Ø¬ÛØ±Ø¬ÛØ§Û Ø¨Ø§Ø´ÙØ± Ù Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ø³Ø§ÙØ¯ÙÛÚÛ Ø¨Ø§Ø´ÙØ±":"GS","Ø³Ø§ÙØª Ø¨Ø§Ø±ØªÛÙÙÛ":"BL","Ø³Ø§ÙÛ Ø¨Ø§Ø±ØªÛÙÙÛ":"BL","Ø³Ø§ÙØª ÙÛÙÛÙØ§":"SH","Ø³Ø§Øª ÙÛÙÛÙØ§Ø Ø¦ÛØ³ÛÙØ´Ù Ù ØªØ±ÛØ³ØªØ§Ù Ø¯Ø§ Ú©ÙÙÙØ§":"SH","Ø³Ø§ÙØª Ú©ÛØªØ³":"KN","Ø³Ø§ÙØª ÙÙØ³ÛØ§":"LC","Ø³Ø§ÙØª ÙØ§Ø±ØªÛÙ":"MF","Ø³Ø§ÙØª Ù¾ÛÛØ±":"PM","Ø³Ø§ÙØª Ú¤ÛÙØ³ÙØª":"VC","Ø³Ø§ÙØª Ú¤ÛÙØ³ÙØª Ù Ú¯Ø±ÛÙØ§Ø¯Ø§":"VC","Ø³Ú¤Ø§ÙØ¨Ø§Ø±Ø¯ Ù Ø¬Ø§Ù ÙØ§ÛÛÙ":"SJ","Ø³ÛÙÛÚ¯Ø§Ù":"SN","Ø¨Ø§ÙØ§ÙØ§Ø³":"BS","Ú©ÛÙØ§Ø±Û ÚÛÚ©":"CZ","Ú¯Ø±ÛÙØ§Ø¯Ø§":"GD","ÙÛÚµÛÙØ¯Ø§":"NL","ÙÛÙÛÙ¾ÛÙ":"PH","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ø³Ø§ÙØ¯ÙÛÚÛ Ø¨Ø§Ø´ÙØ±":"GS","Ø³ÙØ¯Ø§Ù":"SD","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ú¤ÛØ±Ø¬ÛÙÛ ÙÛÙØ§ÛÛØªÛ ÛÛÚ©Ú¯Ø±ØªÙÙÛÚ©Ø§Ù":"VI","ØªØ±ÛÙØ§Ø¯Ø§Ø¯ Ù ØªÛØ¨Ø§Ú¯Û":"TT","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ ØªÙØ±Ú© Ù ÙÛÙÙØ§Ø³":"TC","Ø´Ø§Ø±Û Ú¤Ø§ØªÛÚ©Ø§Ù":"VA","Ø¯ÛÙÚµÛØªÛ Ø´Ø§Ø±Û Ú¤Ø§ØªÛÚ©Ø§Ù":"VA","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ú¤ÛØ±Ø¬ÛÙ":"VI","ÙÛÚµØ²":"GB","ÙØ§ÙÛØ³ Ù ÙÙØªÙÙØ§":"WF","Ø¦ÛÛØ±":"IE","Ø¯ÙØ±Ú¯ÛÛ Ø¦ÛØ³ÛÙØ´Ù":"AC","Ø¦ÛÙØ¯ÛØ±Ø§":"AD","Ø¦ÛÙØ§Ø±Ø§ØªÛ Ø¹ÛØ±ÛØ¨Û ÛÛÚ©Ú¯Ø±ØªÙÙ":"AE","Ø¦ÛÙØºØ§ÙØ³ØªØ§Ù":"AF","Ø¦ÛÙÚ¯ÛÙØ§":"AI","Ø¦ÛÙØ¨Ø§ÙÛØ§":"AL","Ø¦ÛØ±ÙÛÙÛØ§":"AM","Ø¦ÛÙØªÛÙÛ ÙÛÚµÛÙØ¯Ø§":"AN","Ø¦ÛÙÚ¯ÛÙØ§":"AO","Ú©ÛØ´ÙÛØ±Û Ø¨Ø§Ø´ÙÙØ±":"AQ","Ø¦ÛØ±Ø¬ÛÙØªÛÙ":"AR","Ø³Ø§ÙÙØ§Û Ø¦ÛÙØ±ÛÚ©Û":"AS","ÙÛÙØ³Ø§":"AT","Ø¦ÙØ³ØªØ±Ø§ÙÛØ§":"AU","Ø¦ÛØ±ÙÙØ¨Ø§":"AW","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ø¦Ø§ÙØ§ÙØ¯":"AX","Ø¦Ø§Ø²ÛØ±Ø¨Ø§ÛØ¬Ø§Ù":"AZ","Ø¨Ø§Ø±Ø¨Ø§Ø¯ÛØ³":"BB","Ø¨ÛÙÚ¯ÙØ§Ø¯ÛØ´":"BD","Ø¨ÛÙØ¬ÛÚ©Ø§":"BE","Ø¨ÙØ±Ú©ÛÙØ§ ÙØ§Ø³Û":"BF","Ø¨ÙÙÚ¯Ø§Ø±ÛØ§":"BG","Ø¨ÛØ­Ø±ÛÛÙ":"BH","Ø¨ÛØ±ÛÙØ¯Û":"BI","Ø¨ÛÙÛÙ":"BJ","Ø³Ø§ÙØª Ø¨Ø§Ø±ØªÛÙÛÙÛ":"BL","Ø¨ÛØ±ÙÛØ¯Ø§":"BM","Ø¨Ø±ÛÙØ§Û":"BN","Ø¨ÛÙÛÚ¤ÛØ§":"BO","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ú©Ø§Ø±ÛØ¨Û":"BQ","Ø¨ÛØ±Ø§Ø²ÛÙ":"BR","Ø¨ÛØªØ§Ù":"BT","Ø¯ÙØ±Ú¯ÛÛ Ø¨ÙÚ¤Û":"BV","Ø¨ÛØªØ³ÙØ§ÙØ§":"BW","Ø¨ÛÙØ§Ø±ÙÙØ³":"BY","Ø¨ÛÙÛØ²":"BZ","Ú©ÛÙÛØ¯Ø§":"CA","Cocos [Keeling] Islands":"CC","Ú©ÛÙÚ¯Û - Ú©ÛÙØ´Ø§Ø³Ø§":"CD","Ú©ÛÙØ§Ø±Û Ø¦ÛÙØ±ÛÙØ§Û ÙØ§ÙÛÚØ§Ø³Øª":"CF","Ú©ÛÙÚ¯Û - Ø¨Ø±Ø§Ø²Ø§Ú¤ÛÙ":"CG","Ø³ÙÛØ³Ø±Ø§":"CH","Ú©ÛØª Ø¯Ø§Ú¤ÛØ±":"CI","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ú©ÙÙÚ©":"CK","ÚÛÙÛ":"CL","Ú©Ø§ÙÛØ±ÛÙ":"CM","ÚÛÙ":"CN","Ú©ÛÙÛÙØ¨ÛØ§":"CO","Ø¯ÙØ±Ú¯ÛÛ Ú©ÙÛÙ¾ÛØ±ØªÛÙ":"CP","Ú©ÛØ³ØªØ§ Ø±ÛÚ©Ø§":"CR","Ú©ÙØ¨Ø§":"CU","Ú©ÛÛÙ¾ Ú¤ÛØ±Ø¯":"CV","Ú©ÙØ±Ø§Ú©Ø§Ù":"CW","Ø¯ÙØ±Ú¯ÛÛ Ú©Ø±ÛØ³ÙØ³":"CX","ÙÙØ¨Ø±Ø³":"CY","Ø¦ÛÚµÙØ§ÙÛØ§":"DE","Ø¯ÛÛÚ¯Û Ú¯Ø§Ø±Ø³ÛØ§":"DG","Ø¬ÛØ¨ÛØªÛ":"DJ","Ø¯Ø§ÙÛÙØ§Ø±Ú©":"DK","Ø¯ÛÙÛÙÛÚ©Ø§":"DM","Ú©ÛÙØ§Ø±Û Ø¯ÛÙÛÙÛÚ©Ø§Ù":"DO","Ø¬ÛØ²Ø§Ø¦ÛØ±":"DZ","Ø³ÛØ¨ØªÛ Ù ÙÛÙÛÙÛ":"EA","Ø¦ÛÚ©ÙØ§Ø¯ÛØ±":"EC","Ø¦ÛØ³ØªÛÙÛØ§":"EE","ÙÛØ³Ø±":"EG","Ø¨ÛØ§Ø¨Ø§ÙÛ Ø±ÛÚØ§ÙØ§":"EH","Ø¦ÛØ±ÛØªÛØ±ÛØ§":"ER","Ø¦ÛØ³Ù¾Ø§ÙÛØ§":"ES","Ø¦ÛØ³ÛÙØ¨ÛØ§":"ET","ÛÛÚ©ÛØªÛ Ø¦ÛÙØ±ÙÙ¾Ø§":"EU","ÙÛÙÙØ§ÙØ¯":"FI","ÙÛØ¬Û":"FJ","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ ÙØ§ÚµÚ©ÙØ§ÙØ¯":"FK","ÙØ§ÛÚ©Ø±ÛÙÛØ³ÛØ§":"FM","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ ÙØ§Ø±ÙØ§":"FO","ÙÛØ±ÛÙØ³Ø§":"FR","Ú¯Ø§Ø¨ÛÙ":"GA","Ø´Ø§ÙØ´ÛÙÛ ÛÛÚ©Ú¯Ø±ØªÙÙ":"GB","Ø¬ÛØ±Ø¬ÛØ§":"GE","Ú¯ÛÙÛØ§Û ÙÛØ±ÛÙØ³Û":"GF","Ú¯ÙÛØ±ÙØ³Û":"GG","Ú¯Ø§ÙØ§":"GH","Ø¬ÛØ¨ÛÙ ØªØ§Ø±ÛÙ":"GI","Ú¯Ø±ÛÙÙØ§ÙØ¯":"GL","Ú¯Ø§ÙØ¨ÛØ§":"GM","Ú¯ÛÙÛØ§":"GY","Ú¯ÙØ§Ø¯ÙÛÙ¾Û":"GP","Ú¯ÛÙÛØ§Û ÛÛÚ©Ø³Ø§ÙÛ":"GQ","ÛÛÙØ§Ù":"GR","Ú¯ÙØ§ØªÛÙØ§ÙØ§":"GT","Ú¯ÙØ§Ù":"GU","Ú¯ÛÙÛØ§-Ø¨ÛØ³Ø§Ù":"GW","ÙÛÙÚ¯ Ú©ÛÙÚ¯ ÙØ±ÛÙÛ Ø¦ÛØ¯Ø§Ø±Û ØªØ§ÛØ¨ÛØªÛ ÚÛÙ":"HK","ÙÛÙØ¯ÛØ±Ø§Ø³":"HN","Ú©Ø±ÙØ§ØªÛØ§":"HR","ÙØ§ÛØªÛ":"HT","ÙÛÙÚ¯Ø§Ø±ÛØ§":"HU","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ú©ÛÙØ§Ø±Û":"IC","Ø¦ÛÙØ¯ÛÙÛØ³ÛØ§":"ID","Ø¦ÛØ±ÙÛÙØ¯Ø§":"IE","Ø¦ÛØ³Ø±Ø§Ø¦ÛÙ":"IL","Ø¦Ø§ÛÚµ Ø¦ÛÙ ÙØ§Ù":"IM","ÙÛÙØ¯Ø³ØªØ§Ù":"IN","ÙÛØ±ÛÙÛ Ø¦ÛÙÛØ§ÙÙÙØ³Û ÙÛÙØ¯Û Ø¨ÛØ±ÛØªØ§ÙÛ":"IO","Ø¹ÛØ±Ø§Ù":"IQ","Ø¦ÛØ±Ø§Ù":"IR","Ø¦Ø§ÛØ³ÙØ§ÙØ¯":"IS","Ø¦ÛØªØ§ÙÛØ§":"IT","Ø¬ÛØ±Ø³Û":"JE","Ø¬Ø§ÙØ§ÛÚ©Ø§":"JM","Ø¦ÛØ±Ø¯ÛÙ":"JO","ÚØ§Ù¾ÛÙ":"JP","Ú©ÛÙÛØ§":"KE","ÙÛØ±ÛØºÛØ²Ø³ØªØ§Ù":"KG","Ú©ÛÙØ¨ÛØ¯ÛØ§":"KH","Ú©ÛØ±ÛØ¨Ø§ØªÛ":"KI","Ú©ÛÙÛØ±ÛØ³":"KM","Ú©ÛØ±ÛØ§Û Ø¨Ø§Ú©ÙØ±":"KP","Ú©ÛØ±ÛØ§Û Ø¨Ø§Ø´ÙØ±":"KR","Ú©ÙÛØª":"KW","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ú©Ø§ÛÙÛÙ":"KY","Ú©Ø§Ø²Ø§Ø®Ø³ØªØ§Ù":"KZ","ÙØ§ÙÛØ³":"LA","ÙÙØ¨ÙØ§Ù":"LB","ÙÛØ®ØªÙØ´ØªØ§ÛÙ":"LI","Ø³Ø±Û ÙØ§ÙÚ©Ø§":"LK","ÙØ§ÛØ¨ÛØ±ÛØ§":"LR","ÙÛØ³ÛØ³Û":"LS","ÙÛØªÙØ§ÙÛØ§":"LT","ÙÛÚ©Ø³ÙØ¨Ø±Ú¯":"LU","ÙØ§ØªÚ¤ÛØ§":"LV","ÙÛØ¨ÛØ§":"LY","ÙÛØºØ±ÛØ¨":"MA","ÙÛÙØ§Ú©Û":"MC","ÙÛÚµØ¯ÛÚ¤Ø§":"MD","ÙÛÙØªÛÙÛÚ¯Ø±Û":"ME","ÙØ§ÙØª ÙØ§Ø±ØªÛÙ":"MF","ÙÛØ¯ÛØºÛØ´ÙÛØ±":"MG","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ ÙØ§Ø±Ø´Ø§Ù":"MH","ÙØ§Ø³Ø§Ø¯ÛÙÛØ§":"MK","ÙØ§ÙÛ":"ML","Myanmar [Burma]":"MM","ÙÛÙÚ¯ÛÙÛØ§":"MN","ÙØ§Ú©Ø§Ù ÙÛØ±ÛÙÛ Ø¦ÛØ¯Ø§Ø±Û ØªØ§ÛØ¨ÛØªÛ ÚÛÙ":"MO","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ø¨Ø§Ú©ÙØ±Û ÙØ§Ø±ÛØ§ÙØ§":"MP","ÙØ§Ø±ØªÛÙÛÚ©":"MQ","ÙÛØ±ÛØªØ§ÙÛØ§":"MR","ÙÛÙØªØ³ÛØ±Ø§Øª":"MS","ÙØ§ÚµØªØ§":"MT","ÙÛØ±ÛØ´ÛÛØ³":"MU","ÙØ§ÚµØ¯ÛÚ¤":"MV","ÙØ§ÙØ§ÙÛ":"MW","ÙÛÚ©Ø³ÛÚ©":"MX","ÙØ§ÙÛØ²ÛØ§":"MY","ÙÛØ²ÛÙØ¨ÛÙ":"MZ","ÙØ§ÙÛØ¨ÛØ§":"NA","ÙÛÙ Ú©Ø§ÙÛØ¯ÛÙÛØ§":"NC","ÙÛÛØ¬Ø±":"NE","Ø¯ÙØ±Ú¯ÛÛ ÙÛØ±ÙÛÚµÚ©":"NF","ÙØ§ÛØ¬ÛØ±ÛØ§":"NG","ÙÛÚ©Ø§Ø±Ø§Ú¯ÙØ§":"NI","ÙÛØ±ÙÛØ¬":"NO","ÙÛÙ¾Ø§Úµ":"NP","ÙØ§ÙØ±Û":"NR","ÙÛÛÙ":"NU","ÙÛÙ Ø²ÛÙØ§ÙØ¯":"NZ","Ø¹ÙÙØ§Ù":"OM","Ù¾Ø§ÙØ§ÙØ§":"PA","Ù¾ÛØ±Û":"PE","Ù¾ÛÙÛÙÛØ³ÛØ§Û ÙÛØ±ÛÙØ³Û":"PF","ÙÛÙ Ú¯ÛÙÛØ§ Ù¾Ø§Ù¾ÙØ§":"PG","Ù¾Ø§Ú©Ø³ØªØ§Ù":"PK","Ù¾ÛÚµÛÙØ¯Ø§":"PL","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ù¾ÛØªÚ©ÛØ±Ù":"PN","Ù¾ÛØ±ØªÛ Ø±ÛÚ©Û":"PR","ÙØ§ÙÚÛÚ©Ø§ÙÛ ÙÛÙÛØ³ØªÛÙÛ":"PS","Ù¾ÛØ±ØªÙÚ¯Ø§Ù":"PT","Ù¾Ø§ÙØ§Ù":"PW","Ù¾Ø§Ø±Ø§Ú¯ÙØ§Û":"PY","ÙÛØªÛØ±":"QA","Ø¦ÛÙÛØ§ÙÙØ³ÛØ§Û Ø¯ÙÙØ±":"QO","Ø±ÛÙÙÛÛÙ":"RE","Ø±ÛÙØ§ÙÛØ§":"RO","Ø³Ø±Ø¨ÛØ§":"RS","Ø±ÙÙØ³ÛØ§":"RU","Ø±ÙØ§ÙØ¯Ø§":"RW","Ø¹ÛØ±ÛØ¨Ø³ØªØ§ÙÛ Ø³Ø¹ÙØ¯Û":"SA","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ø³ÛÙÛÙÛÙ":"SB","Ø³ÛØ´ÛÙ":"SC","Ø³ÙÛØ¯":"SE","Ø³ÛÙÚ¯Ø§ÙÙØ±Û":"SG","Ø³ÙÛÚ¤ÛÙÛØ§":"SI","Ø³Ú¤Ø§ÙØ¨Ø§Ø±Ø¯ Ù Ø¬Ø§Ù ÙÛÛÛÙ":"SJ","Ø³ÙÛÚ¤Ø§Ú©ÛØ§":"SK","Ø³ÛÛØ±Ø§ ÙÛÛÙ":"SL","Ø³Ø§Ù ÙØ§Ø±ÛÙÛ":"SM","Ø³ÛÙÛÚ¯Ø§Ù":"SN","Ø³ÛÙØ§Úµ":"SO","Ø³ÙØ±ÛÙØ§Ù":"SR","Ø¨Ø§Ø´ÙØ±Û Ø³ÛØ¯Ø§Ù":"SS","Ø¦ÛÙ Ø³ÛÙÚ¤Ø§Ø¯ÛØ±":"SV","Ø³Ø§ÙØª ÙØ§Ø±ØªÙ":"SX","Ø³ÙØ±ÛØ§":"SY","Ø³ÙØ§Ø²ÛÙØ§ÙØ¯":"SZ","ØªØ±ÛØ³ØªØ§Ù Ø¯Ø§ Ú©ÙÙÙØ§":"TA","ÚØ§Ø¯":"TD","ÙÛØ±ÛÙÛÚ©Ø§ÙÛ Ø¨Ø§Ø´ÙØ±Û ÙÛØ±ÛÙØ³Û":"TF","ØªÛÚ¯Û":"TG","ØªØ§ÛÙØ§ÙØ¯":"TH","ØªØ§Ø¬ÛÚ©Ø³ØªØ§Ù":"TJ","ØªÛÚ©ÛÙØ§Ù":"TK","ØªÛÙÛØ±-ÙÛØ³Øª":"TL","ØªÙØ±Ú©ÙØ§ÙØ³ØªØ§Ù":"TM","ØªÙÙØ³":"TN","ØªÛÙÚ¯Ø§":"TO","ØªÙØ±Ú©ÛØ§":"TR","ØªØ±ÛÙÛØ¯Ø§Ø¯ Ù ØªÛØ¨Ø§Ú¯Û":"TT","ØªÙÚ¤Ø§ÙÛ":"TV","ØªØ§ÛÙØ§Ù":"TW","ØªÛÙØ²Ø§ÙÛØ§":"TZ","Ø¦ÛÚ©Ø±Ø§ÙÛØ§":"UA","Ø¦ÛÚ¯ÛÙØ¯Ø§":"UG","Ø¯ÙØ±Ú¯Û Ø¨ÚÙÙÚ©Û Ø¯ÙÙØ±ÛÚ©Ø§ÙÛ ÙÛÙØ§ÛÛØªÛ ÛÛÚ©Ú¯Ø±ØªÙÙÛÚ©Ø§Ù":"UM","ÙÛÙØ§ÛÛØªÛ ÛÛÚ©Ú¯Ø±ØªÙÙÛÚ©Ø§Ù":"US","Ø¦ÛØ±ÛÚ¯ÙØ§Û":"UY","Ø¦ÛØ²Ø¨ÛÚ©Ø³ØªØ§Ù":"UZ","Ø³Ø§ÙØª Ú¤ÙØ³ÙØª Ù Ú¯Ø±ÛÙØ§Ø¯ÛÙ":"VC","Ú¤ÛÙØ²ÙÛÙØ§":"VE","Ø¯ÙØ±Ú¯ÛÚ©Ø§ÙÛ Ú¤ÛØ±Ø¬ÛÙÛ Ø¨ÛØ±ÛØªØ§ÙÛ":"VG","Ú¤ÛÛØªÙØ§Ù":"VN","Ú¤Ø§ÙÙØ§ØªØ§":"VU","Ø³Ø§ÙÙØ§":"WS","ÛÛÙÛÙ":"YE","ÙØ§ÛÛØª":"YT","Ø¦ÛÙØ±ÛÙØ§Û Ø¨Ø§Ø´ÙØ±":"018","Ø²Ø§ÙØ¨ÛØ§":"ZM","Ø²ÛÙØ¨Ø§Ø¨ÙÛ":"ZW","ÙÛØ±ÛÙÛ ÙÛÙØ§Ø³Ø±Ø§Ù":"ZZ","Ø¦Ø§Ø³ÛØ§":"142","Ø¦Ø§Ø³ÛØ§Û ÙØ§ÙÛØ±Ø§Ø³Øª":"143","Ø¦Ø§Ø³ÛØ§Û Ø±ÛÚØ§ÙØ§":"145","Ø¦ÛÙØ±ÙÙ¾Ø§":"150","Ø¦ÛÙØ±ÙÙ¾Ø§Û Ø±ÛÚÙÛÚµØ§Øª":"151","Ø¦ÛÙØ±ÙÙ¾Ø§Û Ø¨Ø§Ú©ÙØ±":"154","Ø¦ÛÙØ±ÙØ¨Ø§Û Ø±ÛÚØ§ÙØ§":"155","Ø¦ÛÙØ±ÛÚ©Ø§Û ÙØ§ØªÛÙ":"419","Ø¬ÛÙØ§Ù":"001","Ø¦ÛÙØ±ÛÙØ§":"002","Ø¦ÛÙØ±ÛÚ©Ø§Û Ø¨Ø§Ú©ÙØ±":"021","Ø¦ÛÙØ±ÛÚ©Ø§Û Ø¨Ø§Ø´ÙØ±":"005","Ø¦ÛÙÛØ§ÙÙØ³ÛØ§":"009","Ø¦ÛÙØ±ÛÙØ§Û Ø±ÛÚØ§ÙØ§":"011","Ø¦ÛÙØ±ÛÚ©Ø§Û ÙØ§ÙÛØ±Ø§Ø³Øª":"013","Ø¦ÛÙØ±ÛÙØ§Û Ø±ÛÚÙÛÚµØ§Øª":"014","Ø¦ÛÙØ±ÛÙØ§Û Ø¨Ø§Ú©ÙØ±":"015","Ø¦ÛÙØ±ÛÙØ§Û ÙØ§ÙÛØ±Ø§Ø³Øª":"017","Ø¦ÛÙØ±ÛÚ©Ø§":"019","Ú©Ø§Ø±ÛØ¨Û":"029","Ø¦Ø§Ø³ÛØ§Û Ø±ÛÚÙÛÚµØ§Øª":"030","Ø¦Ø§Ø³ÛØ§Û Ø¨Ø§Ø´ÙØ±":"034","Ø¦Ø§Ø³ÛØ§Û Ø¨Ø§Ø´ÙØ±Û Ø±ÛÚÙÛÚµØ§Øª":"035","Ø¦ÛÙØ±ÙÙ¾Ø§Û Ø¨Ø§Ø´ÙØ±":"039","Ø¦ÙØ³ØªØ±Ø§ÙØ§Ø³ÛØ§":"053","ÙÛÙØ§ÙÛØ³ÛØ§":"054","ÙÛØ±ÛÙÛ ÙØ§ÛÚ©Ø±ÛÙÛØ³ÛØ§":"057","Ø¯ÙØ±Ú¯Û Ø¯ÙÙØ±ÛÚ©Ø§ÙÛ ÙÛÙØ§ÛÛØªÛ ÛÛÚ©Ú¯Ø±ØªÙÙÛÚ©Ø§Ù":"UM"};
ilib.data.ctrynames_lg = {"Andora":"AD","Emireeti":"AE","Afaganisitani":"AF","Antigwa ne Barabuda":"AG","Angwila":"AI","Alibaniya":"AL","Arameniya":"AM","Bizinga bya Antile eby'abaHolandi":"AN","Angola":"AO","Arigentina":"AR","Samowa omumerika":"AS","Awusituriya":"AT","Awusitureliya":"AU","Aruba":"AW","Azerebayijaani":"AZ","Boziniya Hezegovina":"BA","Barabadosi":"BB","Bangaladesi":"BD","Bubirigi":"BE","Burukina Faso":"BF","Bulugariya":"BG","Baareeni":"BH","Burundi":"BI","Benini":"BJ","Beremuda":"BM","Burunayi":"BN","Boliviya":"BO","Buraziiri":"BR","Bahamasi":"BS","Butaani":"BT","Botiswana":"BW","Belarusi":"BY","Belize":"BZ","Kanada":"CA","Kongo - Zayire":"CD","Lipubulika eya Senturafiriki":"CF","Kongo":"CG","Switizirandi":"CH","Kote Divwa":"CI","Bizinga bya Kkuki":"CK","Cile":"CL","Kameruuni":"CM","Cayina":"CN","Kolombya":"CO","Kosita Rika":"CR","Cuba":"CU","Bizinga by'e Kepu Veredi":"CV","Sipuriya":"CY","Lipubulika ya Ceeka":"CZ","Budaaki":"DE","Jjibuti":"DJ","Denimaaka":"DK","Dominika":"DM","Lipubulika ya Dominika":"DO","Aligerya":"DZ","Ekwado":"EC","Esitoniya":"EE","Misiri":"EG","Eritureya":"ER","Sipeyini":"ES","Esyopya":"ET","Finilandi":"FI","Fiji":"FJ","Bizinga by'eFalikalandi":"FK","Mikuronezya":"FM","Bufalansa":"FR","Gaboni":"GA","Bungereza":"GB","Gurenada":"GD","Gyogya":"GE","Guyana enfalansa":"GF","Gana":"GH","Giburalita":"GI","Gurenelandi":"GL","Gambya":"GM","Gini":"GN","Gwadalupe":"GP","Gayana ey'oku ekweta":"GQ","Bugereeki/Buyonaani":"GR","Gwatemala":"GT","Gwamu":"GU","Gini-Bisawu":"GW","Gayana":"GY","Hundurasi":"HN","Kurowesya":"HR","Hayiti":"HT","Hangare":"HU","Yindonezya":"ID","Ayalandi":"IE","Yisirayeri":"IL","Buyindi":"IN","Bizinga by'eCago":"IO","Yiraaka":"IQ","Yiraani":"IR","Ayisirandi":"IS","Yitale":"IT","Jamayika":"JM","Yorodani":"JO","Japani":"JP","Kenya":"KE","Kirigizisitaani":"KG","Kambodya":"KH","Kiribati":"KI","Bizinga by'eKomoro":"KM","Senti Kitisi ne Nevisi":"KN","Koreya ey'omumambuka":"KP","Koreya ey'omumaserengeta":"KR","Kuweti":"KW","Bizinga ebya Kayimaani":"KY","Kazakisitaani":"KZ","Lawosi":"LA","Lebanoni":"LB","Senti Luciya":"LC","Licitensitayini":"LI","Sirilanka":"LK","Liberya":"LR","Lesoso":"LS","Lisuwenya":"LT","Lukisembaaga":"LU","Lativya":"LV","Libya":"LY","Moroko":"MA","Monako":"MC","Molodova":"MD","Madagasika":"MG","Bizinga bya Mariso":"MH","Masedoniya":"MK","Mali":"ML","Myanima":"MM","Mongoliya":"MN","Bizinga bya Mariyana eby'omumambuka":"MP","Maritiniiki":"MQ","Mawulitenya":"MR","Monteseraati":"MS","Malita":"MT","Mawulisyasi":"MU","Bizinga by'eMalidive":"MV","Malawi":"MW","Mekisiko":"MX","Malezya":"MY","Mozambiiki":"MZ","Namibiya":"NA","Kaledonya mupya":"NC","Nije":"NE","Kizinga ky'eNorofoko":"NF","Nayijerya":"NG","Nikaraguwa":"NI","Holandi":"NL","Nowe":"NO","Nepalo":"NP","Nawuru":"NR","Niyuwe":"NU","Niyuziirandi":"NZ","Omaani":"OM","Panama":"PA","Peru":"PE","Polinesiya enfalansa":"PF","Papwa Nyugini":"PG","Bizinga bya Firipino":"PH","Pakisitaani":"PK","Polandi":"PL","Senti Piyere ne Mikeloni":"PM","Pitikeeni":"PN","Potoriko":"PR","Palesitayini":"PS","Potugaali":"PT","Palawu":"PW","Paragwayi":"PY","Kataa":"QA","Leyunyoni":"RE","Lomaniya":"RO","Lasa":"RU","Rwanda":"RW","Sawudarebya - Buwarabu":"SA","Bizanga by'eSolomooni":"SB","Sesere":"SC","Sudaani":"SD","Swideni":"SE","Singapowa":"SG","Senti Herena":"SH","Sirovenya":"SI","Sirovakya":"SK","Siyeralewone":"SL","Sanimarino":"SM","Senegaalo":"SN","Somaliya":"SO","Surinaamu":"SR","Sanitome ne Purincipe":"ST","El salivado":"SV","Siriya":"SY","Swazirandi":"SZ","Bizinga by'eTaaka ne Kayikosi":"TC","Caadi":"TD","Togo":"TG","Tayirandi":"TH","Tajikisitaani":"TJ","Tokelawu":"TK","Timowa":"TL","Takimenesitaani":"TM","Tunisya":"TN","Tonga":"TO","Ttake":"TR","Turindaadi ne Tobago":"TT","Tuvalu":"TV","Tayiwani":"TW","Tanzaniya":"TZ","Yukurayine":"UA","Yuganda":"UG","Amerika":"US","Wurugwayi":"UY","Wuzibekisitaani":"UZ","Vatikaani":"VA","Senti Vinsenti ne Gurendadiini":"VC","Venzwera":"VE","Bizinga ebya Virigini ebitwalibwa Bungereza":"VG","Bizinga bya Virigini eby'Amerika":"VI","Vyetinaamu":"VN","Vanawuwatu":"VU","Walisi ne Futuna":"WF","Samowa":"WS","Yemeni":"YE","Mayotte":"YT","Sawusafirika":"ZA","Zambya":"ZM","Zimbabwe":"ZW"};
ilib.data.ctrynames_ln = {"AndorÉ":"AD","LÉmila alabo":"AE","AfiganisitÃ¡":"AF","Antiga mpÃ© Barbuda":"AG","AngiyÉ":"AI","Alibani":"AL","AmÉni":"AM","AntiyÉ ya OlandÉ":"AN","AngÃ³la":"AO","ArizantinÉ":"AR","Samoa ya Ameriki":"AS","Otilisi":"AT","OsitÃ¡li":"AU","Aruba":"AW","AzÉlÉbaizÃ¡":"AZ","Bosini mpÃ© Hezegovine":"BA","BarÉbadÉ":"BB","BengalidÉsi":"BD","Beleziki":"BE","Bukina Faso":"BF","Biligari":"BG","BahrÉnÉ":"BH","Burundi":"BI","BenÉ":"BJ","Bermuda":"BM","Brineyi":"BN","Bolivi":"BO","BrezÃ­lÉ":"BR","BahamasÉ":"BS","ButÃ¡ni":"BT","Botswana":"BW","Byelorisi":"BY","BelizÉ":"BZ","Kanada":"CA","Repibiki demokratiki ya KongÃ³":"CD","Repibiki ya AfrÃ­ka ya KÃ¡ti":"CF","Kongo":"CG","SwisÉ":"CH","KotÃ­divualÉ":"CI","Bisanga bya KookÉ":"CK","SÃ­li":"CL","KamÉrune":"CM","SinÉ":"CN","Kolombi":"CO","Kositarika":"CR","Kiba":"CU","Bisanga bya KapevÉrÉ":"CV","SÃ­pÉlÉ":"CY","Repibiki TsekÉ":"CZ","Alemani":"DE","Dzibuti":"DJ","DanÉmarike":"DK","DomÃ­nike":"DM","Repibiki ya DomÃ­nikÉ":"DO","AlizÉri":"DZ","EkwatÉÌlÉ":"EC","Esitoni":"EE","EzÃ­pite":"EG","ElitelÉ":"ER","Esipanye":"ES","EtsÃ­opi":"ET","FilandÉ":"FI","Fidzi":"FJ","Bisanga bya Maluni":"FK","Mikronezi":"FM","FalÃ¡nsÉ":"FR","GabÉ":"GA","AngÉlÉtÉÌlÉ":"GB","GelenadÉ":"GD","Zorzi":"GE","GiyanÉ ya FalÃ¡nsÉ":"GF","Gana":"GH","ZibatalÉ":"GI","Gowelande":"GL","Gambi":"GM","GinÉ":"GN","GwadÉlupÉ":"GP","GinÉÌkwatÉÌlÉ":"GQ","Geleki":"GR","GwatÃ©mala":"GT","GwamÉ":"GU","GinÉbisau":"GW","Giyane":"GY","OndurasÉ":"HN","Krowasi":"HR","Ayiti":"HT","Ongili":"HU","Indonezi":"ID","IrelandÉ":"IE","IsirayelÉ":"IL","ÃndÉ":"IN","MabelÃ© ya AngÉlÉtÉÌlÉ na mbÃº ya Indiya":"IO","Iraki":"IQ","IrÃ¢":"IR","IsilandÉ":"IS","Itali":"IT","Zamaiki":"JM","ZÉdani":"JO","ZapÉ":"JP","Kenya":"KE","KigizisitÃ¡":"KG","Kambodza":"KH","Kiribati":"KI","KomorÉ":"KM","SÃ¡ntu krÃ­stofe mpÃ© NevÉÌs":"KN","KorÉ ya nÉÌrdi":"KP","KorÉ ya sÃºdi":"KR","Koweti":"KW","Bisanga bya KayÃ­ma":"KY","KazakisitÃ¡":"KZ","Lawosi":"LA","LibÃ¡":"LB","SÃ¡ntu lisi":"LC","LishÉteni":"LI","Sirilanka":"LK","LibÃ©riya":"LR","Lesoto":"LS","Litwani":"LT","Likisambulu":"LU","Letoni":"LV","LibÃ­":"LY","MarokÉ":"MA","Monako":"MC","Molidavi":"MD","Madagasikari":"MG","Bisanga bya MarishalÉ":"MH","MasedwanÉ":"MK","MalÃ­":"ML","MongolÃ­":"MN","Bisanga bya MarianÉ ya nÉÌrdi":"MP","Martiniki":"MQ","Moritani":"MR","MÉsera":"MS","MalitÉ":"MT","MorisÉ":"MU","MadÃ­vÉ":"MV","Malawi":"MW","Meksike":"MX","Malezi":"MY","MozambÃ­ki":"MZ","Namibi":"NA","Kaledoni ya sika":"NC","NizÉrÉ":"NE","Esanga NorfokÉ":"NF","Nizerya":"NG","Nikaragwa":"NI","OlandÉ":"NL","NorivezÉ":"NO","NepÃ¡lÉ":"NP","Nauru":"NR","NyuÃ©":"NU","ZelandÉ ya sika":"NZ","OmÃ¡nÉ":"OM","Panama":"PA","PÃ©ru":"PE","Polinezi ya FalÃ¡nsÉ":"PF","Papwazi GinÉ ya sika":"PG","FilipinÉ":"PH","PakisitÃ¡":"PK","Poloni":"PL","SÃ¡ntu pÃ©tÃ©to mpÃ© MikelÉ":"PM","Pikairni":"PN","PÉtoriko":"PR","PalÉsine":"PS","PutÃºlugÉsi":"PT","Palau":"PW","Palagwei":"PY","Katari":"QA","Lenyo":"RE","Romani":"RO","RisÃ­":"RU","Rwanda":"RW","Alabi SawuditÉ":"SA","Bisanga SolomÉ":"SB","SÉshÉlÉ":"SC","SudÃ¡":"SD","SwÃ©dÉ":"SE","SingapurÉ":"SG","SÃ¡ntu eleni":"SH","Siloveni":"SI","Silovaki":"SK","Siera LeonÉ":"SL","SÃ¡ntu MarinÉ":"SM","SenegalÉ":"SN","Somali":"SO","SurinamÉ":"SR","Sao TomÃ© mpÃ© PresipÉ":"ST","SavadÉrÉ":"SV","SirÃ­":"SY","Swazilandi":"SZ","Bisanga bya Turki mpÃ© Kaiko":"TC","TsÃ¡di":"TD","Togo":"TG","TailandÉ":"TH","TazikisitÃ¡":"TJ","Tokelau":"TK","TimorÉ ya MoniÉlÉ":"TL","TikÉmÃ©nisitÃ¡":"TM","Tinizi":"TN","Tonga":"TO","Tiliki":"TR","TinidadÉ mpÃ© Tobago":"TT","Tuvalu":"TV","Taiwanin":"TW","Tanzani":"TZ","IkrÉni":"UA","Uganda":"UG","Ameriki":"US","Irigwei":"UY","UzibÉkisitÃ¡":"UZ","VatikÃ¡":"VA","SÃ¡ntu vesÃ¡ mpÃ© GelenadinÉ":"VC","VenÃ©zuela":"VE","Bisanga bya Vierzi ya AngÉlÉtÉÌlÉ":"VG","Bisanga bya Vierzi ya Ameriki":"VI","ViyetinamÉ":"VN","Vanuatu":"VU","WalisÉ mpÃ© Futuna":"WF","Samoa":"WS","YemÉnÉ":"YE","MayotÉ":"YT","AfrÃ­ka ya SÃºdi":"ZA","Zambi":"ZM","Zimbabwe":"ZW"};
ilib.data.ctrynames_lt = {"Azija":"142","CentrinÄ Azija":"143","VakarÅ³ Azija":"145","Europa":"150","RytÅ³ Europa":"151","Å iaurÄs Europa":"154","VakarÅ³ Europa":"155","LotynÅ³ Amerika":"419","pasaulis":"001","Afrika":"002","Å iaurÄs Amerika":"003","PietÅ³ Amerika":"005","Okeanija":"009","VakarÅ³ Afrika":"011","CentrinÄ Amerika":"013","RytÅ³ Afrika":"014","Å iaurÄs Afrika":"015","Vidurio Afrika":"017","PietÅ³ Afrika [018]":"018","Amerika":"019","Å iaurinÄ Amerika":"021","Karibai":"029","RytÅ³ Azija":"030","PietÅ³ Azija":"034","PietryÄiÅ³ Azija":"035","PietÅ³ Europa":"039","Australazija":"053","Melanezija":"054","Mikronezijos regionas":"057","Polinezija":"061","Ascension sala":"AC","Andora":"AD","Jungtiniai ArabÅ³ Emyratai":"AE","Afganistanas":"AF","Antigva ir Barbuda":"AG","Angilija":"AI","Albanija":"AL","ArmÄnija":"AM","Olandijos Antilai":"AN","Angola":"AO","Antarktis":"AQ","Argentina":"AR","Amerikos Samoa":"AS","Austrija":"AT","Australija":"AU","Aruba":"AW","AlandÅ³ Salos":"AX","AzerbaidÅ¾anas":"AZ","Bosnija ir Hercegovina":"BA","Barbadosas":"BB","BangladeÅ¡as":"BD","Belgija":"BE","Burkina Fasas":"BF","Bulgarija":"BG","Bahreinas":"BH","Burundis":"BI","Beninas":"BJ","Å vento Baltramiejaus Sala":"BL","Bermuda":"BM","BrunÄjus":"BN","Bolivija":"BO","KaribÅ³ Nyderlandai":"BQ","Brazilija":"BR","Bahamos":"BS","Butanas":"BT","Bouvet sala":"BV","Botsvana":"BW","Baltarusija":"BY","Belizas":"BZ","Kanada":"CA","KokosÅ³ salos":"CC","Kongas-KinÅ¡asa":"CD","CentrinÄs Afrikos Respublika":"CF","Kongas-Brazavilis":"CG","Å veicarija":"CH","Dramblio Kaulo Krantas":"CI","Kuko salos":"CK","ÄilÄ":"CL","KamerÅ«nas":"CM","Kinija":"CN","Kolumbija":"CO","Clipperton sala":"CP","Kosta Rika":"CR","Kuba":"CU","Å½aliasis KyÅ¡ulys":"CV","Kiurasao":"CW","KalÄdÅ³ sala":"CX","Kipras":"CY","Äekija":"CZ","Vokietija":"DE","Diego Garcia":"DG","DÅ¾ibutis":"DJ","Danija":"DK","Dominika":"DM","Dominikos Respublika":"DO","AlÅ¾yras":"DZ","Seuta ir Melila":"EA","Ekvadoras":"EC","Estija":"EE","Egiptas":"EG","VakarÅ³ Sachara":"EH","EritrÄja":"ER","Ispanija":"ES","Etiopija":"ET","Europos SÄjunga":"EU","Suomija":"FI","FidÅ¾is":"FJ","Folklando Salos":"FK","Mikronezija":"FM","FarerÅ³ Salos":"FO","PrancÅ«zija":"FR","Gabonas":"GA","DidÅ¾ioji Britanija":"GB","Grenada":"GD","Gruzija":"GE","PrancÅ«zijos Gviana":"GF","Gernsis":"GG","Gana":"GH","Gibraltaras":"GI","Grenlandija":"GL","Gambija":"GM","GvinÄja":"GN","GvadelupÄ":"GP","Pusiaujo GvinÄja":"GQ","Graikija":"GR","PietÅ³ DÅ¾ordÅ¾ija ir PietÅ³ SandviÄo salos":"GS","Gvatemala":"GT","Guamas":"GU","Bisau GvinÄja":"GW","Gajana":"GY","Kinijos S. A. R. Honkongas":"HK","Heardo ir McDonaldo SalÅ³ Sritis":"HM","HondÅ«ras":"HN","Kroatija":"HR","Haitis":"HT","Vengrija":"HU","KanarÅ³ Salos":"IC","Indonezija":"ID","Airija":"IE","Izraelis":"IL","Meno Sala":"IM","Indija":"IN","Indijos vandenyno britÅ³ sritis":"IO","Irakas":"IQ","Iranas":"IR","Islandija":"IS","Italija":"IT","DÅ¾ersis":"JE","Jamaika":"JM","Jordanija":"JO","Japonija":"JP","Kenija":"KE","Kirgiztanas":"KG","KambodÅ¾a":"KH","Kiribatis":"KI","Komorai":"KM","Sent Kitsas ir Nevis":"KN","Å iaurÄs KorÄja":"KP","PietÅ³ KorÄja":"KR","Kuveitas":"KW","KaimanÅ³ Salos":"KY","Kazachstanas":"KZ","Laosas":"LA","Libanas":"LB","Å ventoji Liucija":"LC","LichtenÅ¡teinas":"LI","Å ri Lanka":"LK","Liberija":"LR","Lesotas":"LS","Lietuva":"LT","Liuksemburgas":"LU","Latvija":"LV","Libija":"LY","Marokas":"MA","Monakas":"MC","Moldova":"MD","Juodkalnija":"ME","Sen Martenas":"MF","Madagaskaras":"MG","MarÅ¡alo Salos":"MH","Makedonija":"MK","Malis":"ML","Mianmaras":"MM","Mongolija":"MN","Macao":"MO","Marianos Å¡iaurinÄs salos":"MP","Martinika":"MQ","Mauritanija":"MR","Montseratas":"MS","Malta":"MT","Mauricijus":"MU","Maldivai":"MV","Malavis":"MW","Meksika":"MX","Malaizija":"MY","Mozambikas":"MZ","Namibija":"NA","Naujoji Kaledonija":"NC","Nigeris":"NE","Norfolko sala":"NF","Nigerija":"NG","Nikaragva":"NI","Nyderlandai":"NL","Norvegija":"NO","Nepalas":"NP","Nauru":"NR","Niue":"NU","Naujoji Zelandija":"NZ","Omanas":"OM","Panama":"PA","Peru":"PE","PrancÅ«zÅ³ Polinezija":"PF","Papua Naujoji GvinÄja":"PG","Filipinai":"PH","Pakistanas":"PK","Lenkija":"PL","Sen Pjeras ir Mikelonas":"PM","Pitkerno Salos":"PN","Puerto Rikas":"PR","Palestinos teritorija":"PS","Portugalija":"PT","Palau":"PW","Paragvajus":"PY","Kataras":"QA","NuoÅ¡ali Okeanija":"QO","Reunjonas":"RE","Rumunija":"RO","Serbija":"RS","Rusija":"RU","Ruanda":"RW","Saudo Arabija":"SA","Saliamono salos":"SB","SeiÅ¡eliai":"SC","Sudanas":"SD","Å vedija":"SE","SingapÅ«ras":"SG","Å ventoji Elena":"SH","SlovÄnija":"SI","Svalbardo ir Jan Majen salos":"SJ","Slovakija":"SK","Siera LeonÄ":"SL","San Marinas":"SM","Senegalas":"SN","Somalis":"SO","Surinamas":"SR","PietÅ³ Sudanas":"SS","San TomÄ ir PrinsipÄ":"ST","Salvadoras":"SV","Sint Martenas":"SX","Sirija":"SY","Svazilandas":"SZ","Tristan da Cunha":"TA","Terkso ir Kaikoso Salos":"TC","Äadas":"TD","PrancÅ«zijos PietÅ³ sritys":"TF","Togas":"TG","Tailandas":"TH","TadÅ¾ikistanas":"TJ","Tokelau":"TK","RytÅ³ Timoras":"TL","TurkmÄnistanas":"TM","Tunisas":"TN","Tonga":"TO","Turkija":"TR","Trinidadas ir Tobagas":"TT","Tuvalu":"TV","Taivanas":"TW","Tanzanija":"TZ","Ukraina":"UA","Uganda":"UG","JungtiniÅ³ ValstijÅ³ maÅ¾osios aplinkinÄs salos":"UM","JungtinÄs Valstijos":"US","Urugvajus":"UY","Uzbekistanas":"UZ","Vatikanas":"VA","Å ventasis Vincentas ir Grenadinai":"VC","Venesuela":"VE","DidÅ¾iosios Britanijos MergeliÅ³ Salos":"VG","MergeliÅ³ Salos (JAV)":"VI","Vietnamas":"VN","Vanuatu":"VU","Wallisas ir Futuna":"WF","Samoa":"WS","Jemenas":"YE","Majotas":"YT","PietÅ³ Afrika":"ZA","Zambija":"ZM","ZimbabvÄ":"ZW","neÅ¾inoma sritis":"ZZ"};
ilib.data.ctrynames_lv = {"Äzija":"142","CentrÄlÄzija":"143","RietumÄzija":"145","Eiropa":"150","Austrumeiropa":"151","ZiemeÄ¼eiropa":"154","Rietumeiropa":"155","LatÄ«Åamerika":"419","pasaule":"001","Äfrika":"002","ZiemeÄ¼amerika":"003","Dienvidamerika":"005","OkeÄnija":"009","RietumÄfrika":"011","CentrÄlamerika":"013","AustrumÄfrika":"014","ZiemeÄ¼Äfrika":"015","VidusÄfrika":"017","DienvidÄfrika":"018","Amerika":"019","ZiemeÄ¼amerika â ASV, KanÄda un Grenlande":"021","KarÄ«bu jÅ«ras reÄ£ions":"029","AustrumÄzija":"030","DienvidÄzija":"034","CentrÄlaustrumÄzija":"035","Dienvideiropa":"039","AustrÄlÄzija":"053","MelanÄzija":"054","MikronÄzijas reÄ£ions":"057","PolinÄzija":"061","DebesbraukÅ¡anas sala":"AC","Andora":"AD","Apvienotie ArÄbu EmirÄti":"AE","AfganistÄna":"AF","Antigva un Barbuda":"AG","Angilja":"AI","AlbÄnija":"AL","ArmÄnija":"AM","NÄ«derlandes AntiÄ¼as":"AN","Angola":"AO","Antarktika":"AQ","ArgentÄ«na":"AR","AmerikÄÅu Samoa":"AS","Austrija":"AT","AustrÄlija":"AU","Aruba":"AW","Olandes salas":"AX","AzerbaidÅ¾Äna":"AZ","Bosnija un Hercegovina":"BA","Barbadosa":"BB","BangladeÅ¡a":"BD","BeÄ¼Ä£ija":"BE","Burkinafaso":"BF","BulgÄrija":"BG","Bahreina":"BH","Burundi":"BI","Benina":"BJ","SenbartelmÄ«":"BL","Bermudu salas":"BM","Bruneja":"BN","BolÄ«vija":"BO","NÄ«derlandes KarÄ«bu salas":"BQ","BrazÄ«lija":"BR","Bahamu salas":"BS","ButÄna":"BT","BuvÄ sala":"BV","BotsvÄna":"BW","Baltkrievija":"BY","Beliza":"BZ","KanÄda":"CA","Kokosu jeb KÄ«linga salas":"CC","Kongo-KinÅ¡asa":"CD","CentrÄlÄfrikas Republika":"CF","Kongo - Brazavila":"CG","Å veice":"CH","KotdivuÄra":"CI","Kuka salas":"CK","ÄÄ«le":"CL","KamerÅ«na":"CM","Ä¶Ä«na":"CN","Kolumbija":"CO","Klipertona sala":"CP","Kostarika":"CR","Kuba":"CU","Kaboverde":"CV","Kirasao":"CW","ZiemsvÄtku sala":"CX","Kipra":"CY","Äehija":"CZ","VÄcija":"DE","Djego Garsijas atols":"DG","DÅ¾ibutija":"DJ","DÄnija":"DK","Dominika":"DM","DominikÄnas Republika":"DO","AlÅ¾Ä«rija":"DZ","SeÅ«ta un Melilja":"EA","Ekvadora":"EC","Igaunija":"EE","ÄÄ£ipte":"EG","RietumsahÄra":"EH","Eritreja":"ER","SpÄnija":"ES","Etiopija":"ET","Eiropas SavienÄ«ba":"EU","Somija":"FI","FidÅ¾i":"FJ","Folklenda salas":"FK","MikronÄzija":"FM","FÄru Salas":"FO","Francija":"FR","Gabona":"GA","LielbritÄnija":"GB","GrenÄda":"GD","Gruzija":"GE","FranÄu GviÄna":"GF","GÄrnsija":"GG","Gana":"GH","GibraltÄrs":"GI","Grenlande":"GL","Gambija":"GM","Gvineja":"GN","Gvadelupa":"GP","EkvatoriÄlÄ Gvineja":"GQ","GrieÄ·ija":"GR","DienviddÅ¾ordÅ¾ija un DienvidsendviÄu salas":"GS","Gvatemala":"GT","Guama":"GU","Gvineja-Bisava":"GW","GajÄna":"GY","Ä¶Ä«nas Ä«paÅ¡Äs pÄrvaldes apgabals Honkonga":"HK","HÄrda un Makdonalda salas":"HM","Hondurasa":"HN","HorvÄtija":"HR","Haiti":"HT","UngÄrija":"HU","KanÄriju salas":"IC","IndonÄzija":"ID","Äªrija":"IE","IzraÄla":"IL","Mena":"IM","Indija":"IN","Indijas okeÄna Britu teritorija":"IO","IrÄka":"IQ","IrÄna":"IR","Äªslande":"IS","ItÄlija":"IT","DÅ¾Ärsija":"JE","Jamaika":"JM","JordÄnija":"JO","JapÄna":"JP","Kenija":"KE","KirgizstÄna":"KG","KambodÅ¾a":"KH","Kiribati":"KI","Komoru salas":"KM","Sentkitsa un Nevisa":"KN","ZiemeÄ¼koreja":"KP","Dienvidkoreja":"KR","Kuveita":"KW","Kaimanu salas":"KY","KazahstÄna":"KZ","Laosa":"LA","LibÄna":"LB","SentlÅ«sija":"LC","LihtenÅ¡teina":"LI","Å rilanka":"LK","LibÄrija":"LR","Lesoto":"LS","Lietuva":"LT","Luksemburga":"LU","Latvija":"LV","LÄ«bija":"LY","Maroka":"MA","Monako":"MC","Moldova":"MD","Melnkalne":"ME","SenmartÄna":"MF","Madagaskara":"MG","MÄrÅ¡ala salas":"MH","MaÄ·edonija":"MK","Mali":"ML","Mjanma [Birma]":"MM","Mongolija":"MN","Ä¶Ä«nas Ä«paÅ¡Äs pÄrvaldes apgabals Makao":"MO","ZiemeÄ¼u Marianas salas":"MP","Martinika":"MQ","MauritÄnija":"MR","Montserrata":"MS","Malta":"MT","MaurÄ«cija":"MU","MaldÄ«vija":"MV","MalÄvija":"MW","Meksika":"MX","Malaizija":"MY","Mozambika":"MZ","NamÄ«bija":"NA","Jaunkaledonija":"NC","NigÄra":"NE","Norfolkas sala":"NF","NigÄrija":"NG","Nikaragva":"NI","NÄ«derlande":"NL","NorvÄÄ£ija":"NO","NepÄla":"NP","Nauru":"NR","Niue":"NU","JaunzÄlande":"NZ","OmÄna":"OM","Panama":"PA","Peru":"PE","FranÄu PolinÄzija":"PF","Papua-Jaungvineja":"PG","FilipÄ«nas":"PH","PakistÄna":"PK","Polija":"PL","SenpjÄra un Mikelona":"PM","PitkÄrna":"PN","Puertoriko":"PR","PalestÄ«na":"PS","PortugÄle":"PT","Palau":"PW","Paragvaja":"PY","Katara":"QA","OkeÄnijas attÄlÄs salas":"QO","Reinjona":"RE","RumÄnija":"RO","Serbija":"RS","Krievija":"RU","Ruanda":"RW","SaÅ«da ArÄbija":"SA","ZÄlamana salas":"SB","SeiÅ¡eÄ¼u salas":"SC","SudÄna":"SD","Zviedrija":"SE","SingapÅ«ra":"SG","Sv. HelÄnas sala":"SH","SlovÄnija":"SI","SvalbÄra un Jana Majena sala":"SJ","SlovÄkija":"SK","Sjerraleone":"SL","SanmarÄ«no":"SM","SenegÄla":"SN","SomÄlija":"SO","Surinama":"SR","DienvidsudÄna":"SS","Santome un Prinsipi":"ST","Salvadora":"SV","SintmÄrtena":"SX","SÄ«rija":"SY","Svazilenda":"SZ","Tristana da KuÅas salas":"TA","TÄrksas un Kaikosas salas":"TC","Äada":"TD","FranÄu dienvidu teritorijas":"TF","Togo":"TG","Taizeme":"TH","TadÅ¾ikistÄna":"TJ","Tokelau":"TK","Austrumtimora":"TL","TurkmenistÄna":"TM","Tunisija":"TN","Tonga":"TO","Turcija":"TR","TrinidÄda un TobÄgo":"TT","Tuvalu":"TV","TaivÄna":"TW","TanzÄnija":"TZ","Ukraina":"UA","Uganda":"UG","ASV MazÄs AizjÅ«ras salas":"UM","Amerikas SavienotÄs Valstis":"US","Urugvaja":"UY","UzbekistÄna":"UZ","VatikÄns":"VA","Sentvinsenta un GrenadÄ«nas":"VC","VenecuÄla":"VE","Britu VirdÅ¾Ä«nas":"VG","ASV VirdÅ¾Ä«nas":"VI","Vjetnama":"VN","Vanuatu":"VU","Volisa un Futuna":"WF","Samoa":"WS","Jemena":"YE","Majota":"YT","DienvidÄfrikas Republika":"ZA","Zambija":"ZM","Zimbabve":"ZW","nezinÄms reÄ£ions":"ZZ"};
ilib.data.ctrynames_mk = {"ÐÐ·Ð¸ÑÐ°":"142","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÐ·Ð¸ÑÐ°":"143","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÐ·Ð¸ÑÐ°":"145","ÐÐ²ÑÐ¾Ð¿Ð°":"150","ÐÑÑÐ¾ÑÐ½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"151","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"154","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"155","ÐÐ°ÑÐ¸Ð½ÑÐºÐ° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"419","Ð¡Ð²ÐµÑ":"001","ÐÑÑÐ¸ÐºÐ°":"002","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"003","ÐÑÐ¶Ð½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"005","ÐÐºÐµÐ°Ð½Ð¸ÑÐ°":"009","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"011","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"013","ÐÑÑÐ¾ÑÐ½Ð° ÐÑÑÐ¸ÐºÐ°":"014","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÑÑÐ¸ÐºÐ°":"015","Ð¡ÑÐµÐ´Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"017","ÐÑÐ¶Ð½Ð° ÐºÐ¾Ð½ÑÐ¸Ð½ÐµÐ½ÑÐ°Ð»Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"018","ÐÐ¼ÐµÑÐ¸ÐºÐ¸":"019","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐºÐ¾Ð½ÑÐ¸Ð½ÐµÐ½ÑÐ°Ð»Ð½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"021","ÐÐ°ÑÐ¸Ð±Ð¸":"029","ÐÑÑÐ¾ÑÐ½Ð° ÐÐ·Ð¸ÑÐ°":"030","ÐÑÐ¶Ð½Ð° ÐÐ·Ð¸ÑÐ°":"034","ÐÑÐ³Ð¾Ð¸ÑÑÐ¾ÑÐ½Ð° ÐÐ·Ð¸ÑÐ°":"035","ÐÑÐ¶Ð½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"039","ÐÐ²ÑÑÑÐ°Ð»Ð¸ÑÐ° Ð¸ ÐÐ¾Ð² ÐÐµÐ»Ð°Ð½Ð´":"053","ÐÐµÐ»Ð°Ð½ÐµÐ·Ð¸ÑÐ°":"054","ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸ÑÐºÐ¸ ÑÐµÐ³Ð¸Ð¾Ð½":"057","ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸ÑÐ°":"061","ÐÑÑÑÐ¾Ð² ÐÑÐµÐ½ÑÐ¸Ð¾Ð½":"AC","ÐÐ½Ð´Ð¾ÑÐ°":"AD","ÐÐ±ÐµÐ´Ð¸Ð½ÐµÑÐ¸ ÐÑÐ°Ð¿ÑÐºÐ¸ ÐÐ¼Ð¸ÑÐ°ÑÐ¸":"AE","ÐÐ²Ð³Ð°Ð½Ð¸ÑÑÐ°Ð½":"AF","ÐÐ½ÑÐ¸Ð³Ð²Ð° Ð¸ ÐÐ°ÑÐ±ÑÐ´Ð°":"AG","ÐÐ½Ð³Ð²Ð¸Ð»Ð°":"AI","ÐÐ»Ð±Ð°Ð½Ð¸ÑÐ°":"AL","ÐÑÐ¼ÐµÐ½Ð¸ÑÐ°":"AM","Ð¥Ð¾Ð»Ð°Ð½Ð´ÑÐºÐ¸ ÐÐ½ÑÐ¸Ð»Ð¸":"AN","ÐÐ½Ð³Ð¾Ð»Ð°":"AO","ÐÐ½ÑÐ°ÑÐºÑÐ¸Ðº":"AQ","ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°":"AR","ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ° Ð¡Ð°Ð¼Ð¾Ð°":"AS","ÐÐ²ÑÑÑÐ¸ÑÐ°":"AT","ÐÐ²ÑÑÑÐ°Ð»Ð¸ÑÐ°":"AU","ÐÑÑÐ±Ð°":"AW","ÐÐ»Ð°Ð½Ð´ÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"AX","ÐÐ·ÐµÑÐ±ÐµÑÑÐ°Ð½":"AZ","ÐÐ¾ÑÐ½Ð° Ð¸ Ð¥ÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°":"BA","ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ":"BB","ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ":"BD","ÐÐµÐ»Ð³Ð¸ÑÐ°":"BE","ÐÑÑÐºÐ¸Ð½Ð° Ð¤Ð°ÑÐ¾":"BF","ÐÑÐ³Ð°ÑÐ¸ÑÐ°":"BG","ÐÐ°ÑÑÐµÐ¸Ð½":"BH","ÐÑÑÑÐ½Ð´Ð¸":"BI","ÐÐµÐ½Ð¸Ð½":"BJ","Ð¡ÐµÐ½Ñ ÐÐ°ÑÑÐ¾Ð»Ð¾Ð¼ÐµÑ":"BL","ÐÐµÑÐ¼ÑÐ´Ð¸":"BM","ÐÑÑÐ½ÐµÐ¸":"BN","ÐÐ¾Ð»Ð¸Ð²Ð¸ÑÐ°":"BO","ÐÐ°ÑÐ¸Ð¿ÑÐºÐ° Ð¥Ð¾Ð»Ð°Ð½Ð´Ð¸ÑÐ°":"BQ","ÐÑÐ°Ð·Ð¸Ð»":"BR","ÐÐ°ÑÐ°Ð¼Ð¸":"BS","ÐÑÑÐ°Ð½":"BT","ÐÐ¾ÑÐ²Ð¸ÑÐ¾Ð²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"BV","ÐÐ¾ÑÐ²Ð°Ð½Ð°":"BW","ÐÐµÐ»Ð¾ÑÑÑÐ¸ÑÐ°":"BY","ÐÐµÐ»Ð¸Ð·Ðµ":"BZ","ÐÐ°Ð½Ð°Ð´Ð°":"CA","ÐÐ¾ÐºÐ¾ÑÐ¾Ð²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"CC","ÐÐ¾Ð½Ð³Ð¾ - ÐÐ¸Ð½ÑÐ°ÑÐ°":"CD","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÑÑÐ¸ÐºÐ°Ð½ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"CF","ÐÐ¾Ð½Ð³Ð¾ - ÐÑÐ°Ð·Ð°Ð²Ð¸Ð»":"CG","Ð¨Ð²Ð°ÑÑÐ°ÑÐ¸ÑÐ°":"CH","ÐÑÐµÐ³Ð¾Ñ Ð½Ð° Ð¡Ð»Ð¾Ð½Ð¾Ð²Ð°ÑÐ° ÐÐ¾ÑÐºÐ°":"CI","ÐÑÐºÐ¾Ð²Ð¸ ÐÑÑÑÐ¾Ð²Ð¸":"CK","Ð§Ð¸Ð»Ðµ":"CL","ÐÐ°Ð¼ÐµÑÑÐ½":"CM","ÐÐ¸Ð½Ð°":"CN","ÐÐ¾Ð»ÑÐ¼Ð±Ð¸ÑÐ°":"CO","ÐÑÑÑÐ¾Ð² ÐÐ»Ð¸Ð¿ÐµÑÑÐ¾Ð½":"CP","ÐÐ¾ÑÑÐ°ÑÐ¸ÐºÐ°":"CR","ÐÑÐ±Ð°":"CU","ÐÐµÐ»ÐµÐ½Ð¾ÑÑÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸":"CV","ÐÑÑÐ°ÑÐ°Ð¾":"CW","ÐÐ¾Ð¶Ð¸ÑÐ½Ð¸ ÐÑÑÑÐ¾Ð²Ð¸":"CX","ÐÐ¸Ð¿Ð°Ñ":"CY","Ð§ÐµÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"CZ","ÐÐµÑÐ¼Ð°Ð½Ð¸ÑÐ°":"DE","ÐÐ¸ÐµÐ³Ð¾ ÐÐ°ÑÑÐ¸ÑÐ°":"DG","ÐÐ¸Ð±ÑÑÐ¸":"DJ","ÐÐ°Ð½ÑÐºÐ°":"DK","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°":"DM","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"DO","ÐÐ»Ð¶Ð¸Ñ":"DZ","Ð¡ÐµÑÑÐ° Ð¸ ÐÐµÐ»Ð¸ÑÐ°":"EA","ÐÐºÐ²Ð°Ð´Ð¾Ñ":"EC","ÐÑÑÐ¾Ð½Ð¸ÑÐ°":"EE","ÐÐ³Ð¸Ð¿ÐµÑ":"EG","ÐÐ°Ð¿Ð°Ð´Ð½Ð° Ð¡Ð°ÑÐ°ÑÐ°":"EH","ÐÑÐ¸ÑÑÐµÑÐ°":"ER","Ð¨Ð¿Ð°Ð½Ð¸ÑÐ°":"ES","ÐÑÐ¸Ð¾Ð¿Ð¸ÑÐ°":"ET","ÐÐ²ÑÐ¾Ð¿ÑÐºÐ° ÑÐ½Ð¸ÑÐ°":"EU","Ð¤Ð¸Ð½ÑÐºÐ°":"FI","Ð¤Ð¸ÑÐ¸":"FJ","Ð¤Ð¾Ð»ÐºÐ»Ð°Ð½Ð´ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸":"FK","ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸ÑÐ°":"FM","Ð¤Ð°ÑÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸":"FO","Ð¤ÑÐ°Ð½ÑÐ¸ÑÐ°":"FR","ÐÐ°Ð±Ð¾Ð½":"GA","ÐÐµÐ»Ð¸ÐºÐ° ÐÑÐ¸ÑÐ°Ð½Ð¸ÑÐ°":"GB","ÐÑÐµÐ½Ð°Ð´Ð°":"GD","ÐÑÑÐ·Ð¸ÑÐ°":"GE","Ð¤ÑÐ°Ð½ÑÑÑÐºÐ° ÐÐ²Ð°ÑÐ°Ð½Ð°":"GF","ÐÐ²ÐµÑÐ½Ð·Ð¸":"GG","ÐÐ°Ð½Ð°":"GH","ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ":"GI","ÐÑÐµÐ½Ð»Ð°Ð½Ð´":"GL","ÐÐ°Ð¼Ð±Ð¸ÑÐ°":"GM","ÐÐ²Ð¸Ð½ÐµÑÐ°":"GN","ÐÐ²Ð°Ð´Ð°Ð»ÑÐ¿Ðµ":"GP","ÐÐºÐ²Ð°ÑÐ¾ÑÑÐºÐ° ÐÐ²Ð¸Ð½ÐµÑÐ°":"GQ","ÐÑÑÐ¸ÑÐ°":"GR","ÐÑÐ¶Ð½Ð° ÐÑÑÐ·Ð¸ÑÐ° Ð¸ ÐÑÐ¶Ð½Ð¸ Ð¡ÐµÐ½Ð´Ð²Ð¸Ñ ÐÑÑÑÐ¾Ð²Ð¸":"GS","ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°":"GT","ÐÐ²Ð°Ð¼":"GU","ÐÐ²Ð¸Ð½ÐµÐ°-ÐÐ¸ÑÐ°":"GW","ÐÐ²Ð°ÑÐ°Ð½Ð°":"GY","Ð¥Ð¾Ð½Ð³ ÐÐ¾Ð½Ð³ Ð¡.Ð.Ð  ÐÐ¸Ð½Ð°":"HK","Ð¥Ð°ÑÐ´Ð¾Ð²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸ Ð¸ ÐÐµÐºÐ´Ð¾Ð½Ð°Ð»Ð´ ÐÑÑÑÐ¾Ð²Ð¸":"HM","Ð¥Ð¾Ð½Ð´ÑÑÐ°Ñ":"HN","Ð¥ÑÐ²Ð°ÑÑÐºÐ°":"HR","Ð¥Ð°Ð¸ÑÐ¸":"HT","Ð£Ð½Ð³Ð°ÑÐ¸ÑÐ°":"HU","ÐÐ°Ð½Ð°ÑÑÐºÐ¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"IC","ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸ÑÐ°":"ID","ÐÑÑÐºÐ°":"IE","ÐÐ·ÑÐ°ÐµÐ»":"IL","ÐÑÑÑÐ¾Ð²Ð¾Ñ ÐÐ°Ð½":"IM","ÐÐ½Ð´Ð¸ÑÐ°":"IN","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ¾ ÐÐ½Ð´Ð¸ÑÐºÐ¾ ÐÐºÐµÐ°Ð½ÑÐºÐ° ÑÐµÑÐ¸ÑÐ¾ÑÐ¸ÑÐ°":"IO","ÐÑÐ°Ðº":"IQ","ÐÑÐ°Ð½":"IR","ÐÑÐ»Ð°Ð½Ð´":"IS","ÐÑÐ°Ð»Ð¸ÑÐ°":"IT","ÐÐµÑÑÐ¸":"JE","ÐÐ°Ð¼Ð°ÑÐºÐ°":"JM","ÐÐ¾ÑÐ´Ð°Ð½":"JO","ÐÐ°Ð¿Ð¾Ð½Ð¸ÑÐ°":"JP","ÐÐµÐ½Ð¸ÑÐ°":"KE","ÐÐ¸ÑÐ³Ð¸ÑÑÐ°Ð½":"KG","ÐÐ°Ð¼Ð±Ð¾ÑÐ°":"KH","ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸":"KI","ÐÐ¾Ð¼Ð¾ÑÐ¾Ñ":"KM","Ð¡ÐµÐ½Ñ ÐÑÐ¸ÑÑÐ¾ÑÐµÑ Ð¸ ÐÐµÐ²Ð¸Ñ":"KN","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ¾ÑÐµÑÐ°":"KP","ÐÑÐ¶Ð½Ð° ÐÐ¾ÑÐµÑÐ°":"KR","ÐÑÐ²Ð°ÑÑ":"KW","ÐÐ°ÑÐ¼Ð°Ð½ÑÐºÐ¸ ÐÑÑÑÐ¾Ð²Ð¸":"KY","ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½":"KZ","ÐÐ°Ð¾Ñ":"LA","ÐÐ¸Ð±Ð°Ð½":"LB","Ð¡Ð²ÐµÑÐ° ÐÑÑÐ¸ÑÐ°":"LC","ÐÐ¸ÑÑÐµÐ½ÑÑÐ°ÑÐ½":"LI","Ð¨ÑÐ¸ ÐÐ°Ð½ÐºÐ°":"LK","ÐÐ¸Ð±ÐµÑÐ¸ÑÐ°":"LR","ÐÐµÑÐ¾ÑÐ¾":"LS","ÐÐ¸ÑÐ²Ð°Ð½Ð¸ÑÐ°":"LT","ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³":"LU","ÐÐ°ÑÐ²Ð¸ÑÐ°":"LV","ÐÐ¸Ð±Ð¸ÑÐ°":"LY","ÐÐ°ÑÐ¾ÐºÐ¾":"MA","ÐÐ¾Ð½Ð°ÐºÐ¾":"MC","ÐÐ¾Ð»Ð´Ð°Ð²Ð¸ÑÐ°":"MD","Ð¦ÑÐ½Ð° ÐÐ¾ÑÐ°":"ME","Ð¡ÐµÐ½Ñ ÐÐ°ÑÑÐ¸Ð½":"MF","ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ":"MG","ÐÐ°ÑÑÐ°Ð»Ð¾Ð²Ð¸ Ð¾ÑÑÑÐ¾Ð²Ð¸":"MH","ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸ÑÐ°":"MK","ÐÐ°Ð»Ð¸":"ML","ÐÑÐ°Ð½Ð¼Ð°Ñ [ÐÑÑÐ¼Ð°]":"MM","ÐÐ¾Ð½Ð³Ð¾Ð»Ð¸ÑÐ°":"MN","ÐÐ°ÐºÐ°Ð¾ Ð¡.Ð.Ð  ÐÐ¸Ð½Ð°":"MO","Ð¡ÐµÐ²ÐµÑÐ½Ð¸ ÐÐ°ÑÐ¸ÑÐ°Ð½Ð¸Ð½Ð¸ ÐÑÑÑÐ¾Ð²Ð¸":"MP","ÐÐ°ÑÑÐ¸Ð½Ð¸Ðº":"MQ","ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½Ð¸ÑÐ°":"MR","ÐÐ¾Ð½ÑÐµÑÐ°Ñ":"MS","ÐÐ°Ð»ÑÐ°":"MT","ÐÐ°ÑÑÐ¸ÑÐ¸ÑÑ":"MU","ÐÐ°Ð»Ð´Ð¸Ð²Ð¸":"MV","ÐÐ°Ð»Ð°Ð²Ð¸":"MW","ÐÐµÐºÑÐ¸ÐºÐ¾":"MX","ÐÐ°Ð»ÐµÐ·Ð¸ÑÐ°":"MY","ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº":"MZ","ÐÐ°Ð¼Ð¸Ð±Ð¸ÑÐ°":"NA","ÐÐ¾Ð²Ð° ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸ÑÐ°":"NC","ÐÐ¸Ð³ÐµÑ":"NE","ÐÐ¾ÑÑÐ¾Ð»Ðº ÐÑÑÑÐ¾Ð²":"NF","ÐÐ¸Ð³ÐµÑÐ¸ÑÐ°":"NG","ÐÐ¸ÐºÐ°ÑÐ°Ð³Ð²Ð°":"NI","Ð¥Ð¾Ð»Ð°Ð½Ð´Ð¸ÑÐ°":"NL","ÐÐ¾ÑÐ²ÐµÑÐºÐ°":"NO","ÐÐµÐ¿Ð°Ð»":"NP","ÐÐ°ÑÑÑ":"NR","ÐÐ¸Ðµ":"NU","ÐÐ¾Ð² ÐÐµÐ»Ð°Ð½Ð´":"NZ","ÐÐ¼Ð°Ð½":"OM","ÐÐ°Ð½Ð°Ð¼Ð°":"PA","ÐÐµÑÑ":"PE","Ð¤ÑÐ°Ð½ÑÑÑÐºÐ° ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸ÑÐ°":"PF","ÐÐ°Ð¿ÑÐ° ÐÐ¾Ð²Ð° ÐÐ²Ð¸Ð½ÐµÑÐ°":"PG","Ð¤Ð¸Ð»Ð¸Ð¿Ð¸Ð½Ð¸":"PH","ÐÐ°ÐºÐ¸ÑÑÐ°Ð½":"PK","ÐÐ¾Ð»ÑÐºÐ°":"PL","Ð¡ÐµÐ½Ñ ÐÑÐµÑ Ð¸ ÐÐ¸ÐºÐµÐ»Ð°Ð½":"PM","ÐÐ¸ÑÐºÐ°ÑÐ½":"PN","ÐÐ¾ÑÑÐ¾ÑÐ¸ÐºÐ¾":"PR","ÐÐ°Ð»ÐµÑÑÐ¸Ð½ÑÐºÐ¸ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸Ð¸":"PS","ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸ÑÐ°":"PT","ÐÐ°Ð»Ð°Ñ":"PW","ÐÐ°ÑÐ°Ð³Ð²Ð°Ñ":"PY","ÐÐ°ÑÐ°Ñ":"QA","ÐÐ°Ð²Ð¸ÑÐ½Ð¸ Ð·ÐµÐ¼ÑÐ¸ Ð²Ð¾ ÐÐºÐµÐ°Ð½Ð¸ÑÐ°":"QO","Ð Ð¸ÑÑÐ½Ð¸Ð¾Ð½":"RE","Ð Ð¾Ð¼Ð°Ð½Ð¸ÑÐ°":"RO","Ð¡ÑÐ±Ð¸ÑÐ°":"RS","Ð ÑÑÐ¸ÑÐ°":"RU","Ð ÑÐ°Ð½Ð´Ð°":"RW","Ð¡Ð°ÑÐ´Ð¸ÑÐºÐ° ÐÑÐ°Ð±Ð¸ÑÐ°":"SA","Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½Ð¾Ð²Ð¸ÑÐµ ÐÑÑÑÐ¾Ð²Ð¸":"SB","Ð¡ÐµÑÑÐµÐ»Ð¸":"SC","Ð¡ÑÐ´Ð°Ð½":"SD","Ð¨Ð²ÐµÐ´ÑÐºÐ°":"SE","Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ":"SG","Ð¡Ð²ÐµÑÐ° ÐÐ»ÐµÐ½Ð°":"SH","Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸ÑÐ°":"SI","Ð¡Ð²Ð°Ð»Ð±Ð°ÑÐ´ Ð¸ ÐÐ°Ð½ ÐÐµÑÐµÐ½":"SJ","Ð¡Ð»Ð¾Ð²Ð°ÑÐºÐ°":"SK","Ð¡Ð¸ÐµÑÐ° ÐÐµÐ¾Ð½Ðµ":"SL","Ð¡Ð°Ð½ ÐÐ°ÑÐ¸Ð½Ð¾":"SM","Ð¡ÐµÐ½ÐµÐ³Ð°Ð»":"SN","Ð¡Ð¾Ð¼Ð°Ð»Ð¸ÑÐ°":"SO","Ð¡ÑÑÐ¸Ð½Ð°Ð¼":"SR","ÐÑÐ¶ÐµÐ½ Ð¡ÑÐ´Ð°Ð½":"SS","Ð¡Ð°Ð¾ Ð¢Ð¾Ð¼Ðµ Ð¸ ÐÑÐ¸Ð½ÑÐ¸Ð¿Ðµ":"ST","ÐÐ» Ð¡Ð°Ð»Ð²Ð°Ð´Ð¾Ñ":"SV","Ð¡Ð²ÐµÑÐ¸ ÐÐ°ÑÑÐ¸Ð½":"SX","Ð¡Ð¸ÑÐ¸ÑÐ°":"SY","Ð¡Ð²Ð°Ð·Ð¸Ð»ÐµÐ½Ð´":"SZ","Ð¢ÑÐ¸ÑÑÐ°Ð½ Ð´Ð° ÐÑÑÐ°":"TA","Ð¢ÑÑÐº Ð¸ ÐÐ°Ð¸ÐºÐ¾Ñ ÐÑÑÑÐ¾Ð²Ð¸":"TC","Ð§Ð°Ð´":"TD","Ð¤ÑÐ°Ð½ÑÑÑÐºÐ¸ ÐÑÐ¶Ð½Ð¸ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸Ð¸":"TF","Ð¢Ð¾Ð³Ð¾":"TG","Ð¢Ð°ÑÐ»Ð°Ð½Ð´":"TH","Ð¢Ð°ÑÐ¸ÐºÐ¸ÑÑÐ°Ð½":"TJ","Ð¢Ð¾ÐºÐµÐ»Ð°Ñ":"TK","ÐÑÑÐ¾ÑÐµÐ½ Ð¢Ð¸Ð¼Ð¾Ñ [Ð¢Ð¸Ð¼Ð¾Ñ ÐÐµÑÑÐµ]":"TL","Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸ÑÑÐ°Ð½":"TM","Ð¢ÑÐ½Ð¸Ñ":"TN","Ð¢Ð¾Ð½Ð³Ð°":"TO","Ð¢ÑÑÑÐ¸ÑÐ°":"TR","Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¸ Ð¢Ð¾Ð±Ð°Ð³Ð¾":"TT","Ð¢ÑÐ²Ð°Ð»Ñ":"TV","Ð¢Ð°ÑÐ²Ð°Ð½":"TW","Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸ÑÐ°":"TZ","Ð£ÐºÑÐ°Ð¸Ð½Ð°":"UA","Ð£Ð³Ð°Ð½Ð´Ð°":"UG","ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¸ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸Ð¸ Ð²Ð¾ ÐÐ°ÑÐ¸ÑÐ¸ÐºÐ¾Ñ":"UM","Ð¡Ð¾ÐµÐ´Ð¸Ð½ÐµÑÐ¸ ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¸ ÐÑÐ¶Ð°Ð²Ð¸":"US","Ð£ÑÑÐ³Ð²Ð°Ñ":"UY","Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½":"UZ","ÐÐ°ÑÐ¸ÐºÐ°Ð½":"VA","Ð¡ÐµÐ½Ñ ÐÐ¸Ð½ÑÐµÐ½Ñ Ð¸ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ð¸ÑÐµ":"VC","ÐÐµÐ½ÐµÑÑÐµÐ»Ð°":"VE","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ¸ ÐÐµÐ²ÑÑÐ²ÐµÐ½Ð¸ ÐÑÑÑÐ¾Ð²Ð¸":"VG","ÐÐµÐ²ÑÑÐ²ÐµÐ½Ð¸ ÐÑÑÑÐ¾Ð²Ð¸ Ð½Ð° Ð¡ÐÐ":"VI","ÐÐ¸ÐµÑÐ½Ð°Ð¼":"VN","ÐÐ°Ð½Ð°ÑÑ":"VU","ÐÐ¾Ð»Ð¸Ñ Ð¸ Ð¤ÑÑÑÐ½Ð° Ð¾ÑÑÑÐ¾Ð²Ð¸":"WF","Ð¡Ð°Ð¼Ð¾Ð°":"WS","ÐÐµÐ¼ÐµÐ½":"YE","ÐÐ°ÑÐ¾ÑÐµ":"YT","ÐÑÐ¶Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"ZA","ÐÐ°Ð¼Ð±Ð¸ÑÐ°":"ZM","ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ":"ZW","ÐÐµÐ¿Ð¾Ð·Ð½Ð°Ñ ÑÐµÐ³Ð¸Ð¾Ð½":"ZZ"};
ilib.data.ctrynames_ml = {"à´à´·àµà´¯":"142","à´®à´¦àµà´§àµà´¯àµà´·àµà´¯":"143","à´ªà´¶àµà´à´¿à´®àµà´·àµà´¯":"145","à´¯àµà´±àµà´ªàµà´ªàµ":"150","à´à´¿à´´à´àµà´àµ» à´¯àµà´±àµà´ªàµà´ªàµ":"151","à´µà´à´àµà´àµ à´¯àµà´±àµà´ªàµà´ªàµ":"154","à´ªà´¶àµà´à´¿à´® à´¯àµà´±àµà´ªàµà´ªàµ":"155","à´²à´¾à´±àµà´±à´¿à´¨à´®àµà´°à´¿à´àµà´à´¯àµà´ à´à´°àµà´¬à´¿à´¯à´¨àµà´":"419","à´²àµà´à´":"001","à´à´«àµà´°à´¿à´àµà´":"002","à´µà´à´àµà´àµ à´à´®àµà´°à´¿à´àµà´àµ» à´­àµà´à´£àµà´¡à´":"003","à´¤àµà´àµà´àµ à´à´®àµà´°à´¿à´àµà´àµ» à´­àµà´à´£àµà´¡à´":"005","à´à´·àµà´¯à´¾à´¨à´¿à´¯":"009","à´ªà´¶àµà´à´¿à´® à´à´«àµà´°à´¿à´àµà´":"011","à´®à´¦àµà´§àµà´¯à´à´®àµà´°à´¿à´àµà´":"013","à´à´¿à´´à´àµà´àµ» à´à´«àµà´°à´¿à´àµà´":"014","à´µà´à´àµà´àµ à´à´«àµà´°à´¿à´àµà´":"015","à´®à´¦àµà´§àµà´¯à´à´«àµà´°à´¿à´àµà´":"017","à´¤àµà´àµà´àµ à´à´«àµà´°à´¿à´àµà´":"018","à´à´®àµà´°à´¿à´àµà´àµ» à´­àµà´à´£àµà´¡à´":"019","à´µà´à´àµà´àµ à´à´®àµà´°à´¿à´àµà´":"021","à´à´°àµà´¬à´¿à´¯àµ»":"029","à´à´¿à´´à´àµà´àµ» à´à´·àµà´¯":"030","à´¤àµà´àµà´àµ à´à´·àµà´¯":"034","à´¤àµà´àµà´àµ-à´à´¿à´´à´àµà´àµ» à´à´·àµà´¯":"035","à´¤àµà´àµà´àµ à´¯àµà´±àµà´ªàµà´ªàµ":"039","à´à´¸àµà´àµà´°àµà´²à´¿à´¯à´¯àµà´ à´¨àµà´¯àµà´¸à´¿à´²à´¾àµ»à´¡àµà´":"053","à´®àµà´²à´¨àµà´·àµà´¯":"054","à´®àµà´àµà´°àµà´¨àµà´·àµà´¯àµ» à´ªàµà´°à´¦àµà´¶à´":"057","à´ªàµà´³à´¿à´¨àµà´·àµà´¯":"061","à´à´¸àµ»à´·àµ» à´¦àµà´µàµà´ªàµ":"AC","à´àµ»à´±àµà´±":"AD","à´¸à´à´¯àµà´àµà´¤ à´à´±à´¬àµ à´°à´¾à´·àµà´àµà´°à´":"AE","à´à´«àµà´à´¾à´¨à´¿à´¸àµà´¥à´¾àµ»":"AF","à´àµ»à´±à´¿à´àµà´µà´¯àµà´ à´¬àµ¼à´¬àµà´¡à´¯àµà´":"AG","à´àµ»à´àµà´µà´¿à´²àµà´²":"AI","à´àµ½à´¬àµà´¨à´¿à´¯":"AL","à´àµ¼à´®àµà´¨à´¿à´¯":"AM","à´¨àµà´¤àµ¼à´²àµ»à´¡àµà´¸àµ à´àµ»à´±à´¿à´²à´¿à´¸àµ":"AN","à´à´à´àµà´³":"AO","à´àµ»à´±à´¾àµ¼à´àµà´à´¿à´àµà´":"AQ","à´àµ¼à´àµ»à´±àµà´¨":"AR","à´à´®àµà´°à´¿à´àµà´àµ» à´¸à´¾à´®àµà´µ":"AS","à´à´¸àµà´àµà´°à´¿à´¯":"AT","à´à´¸àµà´àµà´°àµà´²à´¿à´¯":"AU","à´à´±àµà´¬":"AW","à´à´²àµ»à´¡àµ à´¦àµà´µàµà´ªàµà´àµ¾":"AX","à´à´¸àµ¼à´¬àµà´à´¾àµ»":"AZ","à´¬àµà´¸àµà´¨à´¿à´¯à´¯àµà´ à´¹àµàµ¼à´¸à´àµà´µà´¿à´¨à´¯àµà´":"BA","à´¬à´¾àµ¼à´¬à´¡àµà´¸àµ":"BB","à´¬à´à´àµà´²à´¾à´¦àµà´¶àµ":"BD","à´¬àµàµ½à´à´¿à´¯à´":"BE","à´¬àµàµ¼à´àµà´à´¿à´¨à´¾ à´«à´¾à´¸àµ":"BF","à´¬àµ¾à´àµà´±à´¿à´¯":"BG","à´¬à´¹àµà´±àµàµ»":"BH","à´¬àµà´±àµà´£àµà´à´¿":"BI","à´¬àµà´¨à´¿àµ»":"BJ","à´¸àµàµ»à´±àµ à´¬à´¾àµ¼à´¤àµà´¤àµàµ½à´®à´¿":"BL","à´¬àµ¼à´®àµà´¡":"BM","à´¬àµà´°àµà´£àµ":"BN","à´¬àµà´³àµà´µà´¿à´¯":"BO","à´¬àµà´£àµà´¯àµàµ¼, à´¸à´¿à´¨àµà´±àµ à´¯àµà´¸àµà´±àµà´±àµà´·àµà´¯à´¸àµ, à´¸à´¾à´¬ à´à´¨àµà´¨à´¿à´µ":"BQ","à´¬àµà´°à´¸àµàµ½":"BR","à´¬à´¹à´¾à´®à´¾à´¸àµ":"BS","à´­àµà´àµà´à´¾àµ»":"BT","à´¬àµà´µàµà´±àµà´±àµ à´¦àµà´µàµà´ªàµ":"BV","à´¬àµà´àµà´¸àµà´µà´¾à´¨":"BW","à´¬àµà´²à´±àµà´¸àµ":"BY","à´¬àµà´²àµà´¸àµ":"BZ","à´à´¾à´¨à´¡":"CA","à´àµà´àµà´à´¸àµ":"CC","à´àµà´à´àµ - à´à´¿àµ»à´·à´¾à´¸":"CD","à´¸àµàµ»à´àµà´°àµ½ à´à´«àµà´°à´¿à´àµà´àµ» à´±à´¿à´ªàµà´ªà´¬àµà´²à´¿à´àµ":"CF","à´àµà´à´àµ - à´¬àµà´°à´¾à´¸à´¾à´µà´¿àµ½":"CG","à´¸àµà´µà´¿à´±àµà´±àµà´¸àµ¼à´²à´¾àµ»à´¡àµ":"CH","à´à´µà´±à´¿ à´àµà´¸àµà´±àµà´±àµ":"CI","à´àµà´àµà´àµ à´¦àµà´µàµà´ªàµà´àµ¾":"CK","à´à´¿à´²à´¿":"CL","à´à´¾à´®à´±àµàµº":"CM","à´àµà´¨":"CN","à´àµà´³à´à´¬à´¿à´¯":"CO","à´àµà´²à´¿à´ªàµà´ªàµàµ¼à´àµà´àµ» à´¦àµà´µàµà´ªàµ":"CP","à´àµà´¸àµà´±àµà´±à´±à´¿à´àµà´":"CR","à´àµà´¯àµà´¬":"CU","à´àµà´ªàµà´ªàµ à´µàµàµ¼à´¡àµ":"CV","à´àµà´±à´¾à´à´¾à´µàµ":"CW","à´àµà´°à´¿à´¸àµà´®à´¸àµ à´¦àµà´µàµà´ªàµ":"CX","à´¸àµà´ªàµà´°à´¸àµà´¸àµ":"CY","à´àµà´àµà´àµ à´±à´¿à´ªàµà´ªà´¬àµà´²à´¿à´àµ":"CZ","à´àµ¼à´®à´¨à´¿":"DE","à´¡àµà´àµ à´àµà´°à´¾à´·àµà´¯":"DG","à´à´¿à´¬àµà´àµà´à´¿":"DJ","à´¡àµàµ»à´®à´¾àµ¼à´àµà´àµ":"DK","à´¡àµà´®à´¿à´¨à´¿à´àµà´":"DM","à´¡àµà´®à´¿à´¨à´¿à´àµà´àµ» à´±à´¿à´ªàµà´ªà´¬àµà´²à´¿à´àµ":"DO","à´àµ¾à´àµà´°à´¿à´¯":"DZ","à´¸àµà´¯àµà´¤àµà´¤ à´àµ»à´¡àµ à´®àµà´²à´¿à´¯":"EA","à´à´àµà´µà´¡àµàµ¼":"EC","à´à´¸àµà´±àµà´±àµà´£à´¿à´¯â":"EE","à´à´à´¿à´ªàµà´¤àµ":"EG","à´ªà´¶àµà´à´¿à´® à´¸à´¹à´¾à´±":"EH","à´à´±à´¿à´¤àµà´°à´¿à´¯":"ER","à´¸àµà´ªàµà´¯à´¿àµ»":"ES","à´à´¤àµà´¯àµà´ªàµà´¯":"ET","à´¯àµà´±àµà´ªàµà´¯àµ» à´¯àµà´£à´¿à´¯àµ»":"EU","à´«à´¿àµ»à´²à´¾àµ»à´¡àµ":"FI","à´«à´¿à´à´¿":"FJ","à´«à´¾à´àµà´àµâà´²à´¾à´¨àµà´±àµ à´à´²à´¨àµà´±àµ":"FK","à´®àµà´àµà´°àµà´¨àµà´·àµà´¯":"FM","à´«à´±àµà´¯à´¿ à´¦àµà´µàµà´ªàµà´àµ¾":"FO","à´«àµà´°à´¾àµ»à´¸àµ":"FR","à´à´¾à´¬àµàµº":"GA","à´¬àµà´°à´¿à´àµà´àµ»":"GB","à´àµà´°à´¨àµà´¡":"GD","à´àµàµ¼à´à´¿à´¯":"GE","à´«àµà´°à´àµà´àµ à´à´¯à´¾à´¨":"GF","à´àµàµºà´¸à´¿":"GG","à´à´¾à´¨":"GH","à´à´¿à´¬àµà´°à´¾àµ¾à´àµà´àµ¼":"GI","à´àµà´°àµàµ»à´²à´¾àµ»à´±àµ":"GL","à´à´¾à´à´¬à´¿à´¯":"GM","à´àµà´µà´¿à´¨à´¿à´¯":"GN","à´àµà´µà´¾à´¡àµà´²àµà´ªàµ":"GP","à´à´àµà´µà´¿à´±àµà´±àµà´±à´¿à´¯àµ½ à´àµà´µà´¿à´¨à´¿à´¯":"GQ","à´àµà´°àµà´¸àµ":"GR","à´¦à´àµà´·à´¿à´£ à´àµàµ¼à´àµà´à´¿à´¯à´¯àµà´ à´¦à´àµà´·à´¿à´£ à´¸à´¾àµ»à´¡àµâà´µà´¿à´àµà´àµ à´¦àµà´µàµà´ªàµà´à´³àµà´":"GS","à´àµà´µà´¾à´àµà´à´¿à´®à´¾à´²à´¾":"GT","à´àµà´µà´¾à´":"GU","à´à´¿à´¨à´¿-à´¬à´¿à´¸àµ":"GW","à´à´¯à´¾à´¨":"GY","à´¹àµà´àµ à´àµà´àµ à´à´¸àµ.à´.à´àµ¼. à´àµà´¨":"HK","à´¹à´¿à´¯àµàµ¼à´¡àµ à´¦àµà´µàµà´ªàµà´ à´®à´àµà´¡àµà´£à´¾à´³àµà´¡àµ à´¦àµà´µàµà´ªàµà´à´³àµà´":"HM","à´¹àµà´£àµà´àµà´±à´¾à´¸àµ":"HN","à´àµà´°àµà´¯àµà´·àµà´¯":"HR","à´¹àµà´¯àµà´¤à´¿":"HT","à´¹à´à´à´±à´¿":"HU","à´à´¾à´¨à´±à´¿ à´¦àµà´µàµà´ªàµà´àµ¾":"IC","à´àµ»à´¡àµà´¨àµà´·àµà´¯":"ID","à´à´¯àµ¼à´²à´¾àµ»à´¡àµ":"IE","à´à´¸àµà´°à´¾à´¯àµàµ½":"IL","à´àµ½ à´à´«àµ à´®à´¾àµ»":"IM","à´à´¨àµà´¤àµà´¯":"IN","à´¬àµà´°à´¿à´àµà´àµà´·àµ à´à´¨àµà´¤àµà´¯àµ» à´®à´¹à´¾à´¸à´®àµà´¦àµà´° à´ªàµà´°à´¦àµà´¶à´":"IO","à´à´±à´¾à´àµà´àµ":"IQ","à´à´±à´¾àµ»":"IR","à´à´¸àµâà´²à´¾à´¨àµà´±àµ":"IS","à´à´±àµà´±à´²à´¿":"IT","à´àµà´´àµà´¸à´¿":"JE","à´à´®àµà´àµà´":"JM","à´àµàµ¼à´¦àµà´¦à´¾àµ»":"JO","à´à´ªàµà´ªà´¾àµ»":"JP","à´àµà´¨à´¿à´¯":"KE","à´à´¿àµ¼à´à´¿à´¸àµà´¥à´¾àµ»":"KG","à´à´à´¬àµà´¡à´¿à´¯":"KH","à´à´¿à´°à´¿à´¬à´¾à´¤àµà´¤à´¿":"KI","à´àµà´®à´±àµà´¸àµ":"KM","à´¸àµà´¯àµàµ»à´±àµ à´à´¿à´±àµà´±àµà´¸àµà´ à´¨àµà´µà´¿à´¸àµà´":"KN","à´à´¤àµà´¤à´°à´àµà´±à´¿à´¯":"KP","à´¦à´àµà´·à´¿à´£à´àµà´±à´¿à´¯":"KR","à´àµà´µàµà´±àµà´±àµ":"KW","à´àµà´¯àµà´®à´¾àµ» à´¦àµà´µàµà´ªàµà´àµ¾":"KY","à´à´¸à´¾à´à´¿à´¸àµà´¥à´¾àµ»":"KZ","à´²à´¾à´µàµà´¸àµ":"LA","à´²à´¬à´¨àµàµº":"LB","à´¸àµàµ»à´±àµ à´²àµà´¸à´¿à´¯":"LC","à´²àµà´àµà´àµà´¸àµà´±àµà´±à´¿àµ»":"LI","à´¶àµà´°àµà´²à´àµà´":"LK","à´²àµà´¬àµà´°à´¿à´¯":"LR","à´²àµà´¸àµà´¤àµà´¤àµ":"LS","à´²à´¿à´¤àµà´µà´¾à´¨à´¿à´¯":"LT","à´²à´àµà´¸à´à´¬àµ¼à´àµ":"LU","à´²à´¾à´¤àµà´µà´¿à´¯":"LV","à´²à´¿à´¬à´¿à´¯":"LY","à´®àµà´±àµà´àµà´àµ":"MA","à´®àµà´£àµà´àµà´àµ":"MC","à´®àµ¾à´¡àµà´µ":"MD","à´®àµà´£àµà´àµà´¨àµà´àµà´°àµ":"ME","à´¸àµàµ»à´±àµ à´®à´¾àµ¼à´àµà´à´¿àµ»":"MF","à´®à´¡à´à´¾à´¸àµà´àµ¼":"MG","à´®à´¾àµ¼à´·àµ½ââ à´¦àµà´µàµà´ªàµà´àµ¾":"MH","à´®à´¾à´¸à´¿à´¡àµà´£à´¿à´¯":"MK","à´®à´¾à´²à´¿":"ML","à´®àµà´¯à´¾àµ»à´®à´¾àµ¼":"MM","à´®à´à´àµà´³à´¿à´¯":"MN","à´®à´àµà´à´¾à´µàµ SAR à´àµà´¨":"MO","à´à´¤àµà´¤à´° à´®à´±à´¿à´¯à´¾à´¨à´¾ à´¦àµà´µàµà´ªàµà´àµ¾":"MP","à´®à´¾àµ¼à´àµà´àµà´¨à´¿à´àµ":"MQ","à´®àµà´±à´¿à´±àµà´±à´¾à´¨à´¿à´¯":"MR","à´®àµà´£àµà´àµà´¸àµà´±à´¾à´±àµà´±àµ":"MS","à´®à´¾àµ¾à´àµà´":"MT","à´®àµà´±àµà´·àµà´¯à´¸àµ":"MU","à´®à´¾à´²à´¿à´¦àµà´µàµà´ªàµ":"MV","à´®à´²à´¾à´µà´¿":"MW","à´®àµà´àµà´¸à´¿à´àµà´àµ":"MX","à´®à´²àµà´·àµà´¯":"MY","à´®àµà´¸à´¾à´à´¬à´¿à´àµà´àµ":"MZ","à´¨à´®àµà´¬à´¿à´¯":"NA","à´ªàµà´¤à´¿à´¯ à´à´¾à´²à´¿à´¡àµà´£à´¿à´¯":"NC","à´¨àµà´àµ¼":"NE","à´¨àµàµ¼à´«àµà´àµ à´¦àµà´µàµà´ªàµ":"NF","à´¨àµà´àµà´°à´¿à´¯":"NG","à´¨à´¿à´àµà´à´¾à´°à´àµà´µ":"NI","à´¨àµà´¤àµ¼à´²àµ»à´¡àµà´¸àµ":"NL","à´¨àµàµ¼à´µàµ":"NO","à´¨àµà´ªàµà´ªà´¾àµ¾":"NP","à´¨àµà´±àµ":"NR","à´¨àµà´¯àµà´µàµ":"NU","à´¨àµà´¯àµà´¸à´¿à´²à´¾àµ»à´±àµ":"NZ","à´à´®à´¾àµ»":"OM","à´ªà´¨à´¾à´®":"PA","à´ªàµà´±àµ":"PE","à´«àµà´°à´àµà´àµ à´ªàµà´³à´¿à´¨àµà´·àµà´¯":"PF","à´ªà´ªàµà´ªàµà´µ à´¨àµà´¯àµ à´àµà´µà´¿à´¨à´¿":"PG","à´«à´¿à´²à´¿à´ªàµà´ªàµàµ»à´¸àµ":"PH","à´ªà´¾à´àµà´à´¿à´¸àµà´¥à´¾àµ»":"PK","à´ªàµà´³à´£àµà´àµ":"PL","à´¸àµàµ»à´±àµ à´ªà´¿à´±àµà´¯àµà´ à´®à´¿à´àµà´µà´²à´£àµà´":"PM","à´ªà´¿à´±àµà´±àµà´àµà´¯àµàµ»":"PN","à´ªàµàµ¼à´àµà´àµ à´±à´¿à´àµà´àµ":"PR","à´ªà´¾à´²à´¸àµà´¤àµàµ» à´ªàµà´°à´¦àµà´¶à´àµà´àµ¾":"PS","à´ªàµàµ¼à´àµà´àµà´àµ½":"PT","à´ªà´²à´¾à´µàµ":"PW","à´ªà´°à´¾à´àµà´µàµ":"PY","à´à´¤àµà´¤àµ¼":"QA","à´ªàµà´±à´à´¦àµà´µàµà´ªàµà´àµ¾":"QO","à´±àµà´¯àµà´£à´¿à´¯àµ»":"RE","à´±àµà´®àµà´¨à´¿à´¯":"RO","à´¸àµàµ¼à´¬à´¿à´¯":"RS","à´±à´·àµà´¯":"RU","à´±àµà´µà´¾à´£àµà´":"RW","à´¸àµà´¦à´¿ à´à´±àµà´¬àµà´¯":"SA","à´¸àµà´³à´®àµ»â à´¦àµà´µàµà´ªàµà´àµ¾":"SB","à´¸àµà´¯àµà´·àµàµ½à´¸àµ":"SC","à´¸àµà´¡à´¾àµ»":"SD","à´¸àµà´µàµà´¡àµ»":"SE","à´¸à´¿à´à´à´ªàµà´ªàµàµ¼":"SG","à´¸àµàµ»à´±àµ à´¹àµà´²àµà´¨":"SH","à´¸àµà´²àµà´µàµà´¨à´¿à´¯":"SI","à´¸àµà´µà´¾àµ½à´¬à´¾à´¡àµà´ à´à´¾àµ» à´®à´¾à´¯àµà´¨àµà´":"SJ","à´¸àµà´²àµà´µà´¾à´àµà´¯":"SK","à´¸à´¿à´¯àµà´±à´¾ à´²à´¿à´¯àµàµº":"SL","à´¸à´¾àµ» à´®à´±à´¿à´¨àµ":"SM","à´¸àµà´¨à´àµ½":"SN","à´¸àµà´®à´¾à´²à´¿à´¯":"SO","à´¸àµà´±à´¿à´¨à´¾à´":"SR","à´¦à´àµà´·à´¿à´£ à´¸àµà´¡à´¾àµ»":"SS","à´¸à´¾à´µàµ à´±àµà´±à´®àµ à´àµ»à´¡àµ à´ªàµà´°à´¿àµ»à´¸à´¿à´ªàµà´ªà´¿":"ST","à´àµ½ à´¸à´¾àµ½à´µà´¦àµàµ¼":"SV","à´¸à´¿à´¨àµà´±àµ à´®à´¾àµ¼à´àµà´àµàµ»":"SX","à´¸à´¿à´±à´¿à´¯":"SY","à´¸àµà´µà´¾à´¸à´¿à´²à´¾àµ»à´±àµ":"SZ","à´àµà´°à´¸àµà´±àµà´±àµ» à´¡ à´àµà´¨":"TA","à´àµ¼à´àµà´àµà´¸àµà´ à´àµà´àµà´àµ à´¦àµà´µàµà´ªàµà´à´³àµà´":"TC","à´à´¾à´¡àµ":"TD","à´«àµà´°à´àµà´àµ à´¦à´àµà´·à´¿à´£ à´­àµà´ªàµà´°à´¦àµà´¶à´":"TF","à´àµà´àµ":"TG","à´¤à´¾à´¯àµâà´²à´¾àµ»à´¡àµ":"TH","à´¤à´¾à´à´¿à´àµà´à´¿à´¸àµà´¥à´¾àµ»":"TJ","à´àµà´àµà´²à´¾à´µàµ":"TK","à´à´¿à´´à´àµà´àµ» à´¤à´¿à´®àµàµ¼":"TL","à´¤àµàµ¼à´àµà´àµà´®àµà´¨à´¿à´¸àµà´¥à´¾àµ»":"TM","à´àµà´£àµà´·àµà´¯":"TN","à´àµà´à´":"TO","à´¤àµàµ¼à´àµà´à´¿":"TR","à´àµà´°à´¿à´¨à´¿à´¡à´¾à´¡àµà´ à´±àµà´±àµà´¬à´¾à´àµà´¯àµà´":"TT","à´¤àµà´µà´¾à´²àµ":"TV","à´¤à´¾à´¯àµâà´µà´¾àµ»":"TW","à´à´¾àµ»à´¸à´¾à´¨à´¿à´¯":"TZ","à´à´àµà´°àµàµ»":"UA","à´à´à´¾à´£àµà´":"UG","à´¯àµà´£àµà´±àµà´±à´¡àµ à´¸àµà´±àµà´±àµà´±àµà´±àµà´¸àµà´ à´àµà´±à´¿à´¯ à´ªàµà´±à´à´¦àµà´µàµà´ªàµà´à´³àµà´":"UM","à´à´®àµà´°à´¿à´àµà´àµ» à´à´àµà´¯à´¨à´¾à´àµà´àµ¾":"US","à´à´±àµà´àµà´µàµ":"UY","à´à´¸àµà´¬àµà´àµà´à´¿à´¸àµà´¥à´¾àµ»":"UZ","à´µà´¤àµà´¤à´¿à´àµà´à´¾àµ»":"VA","à´¸àµàµ»à´±àµ à´µà´¿àµ»à´¸àµ»à´±àµà´ à´àµà´°à´¨à´¡àµàµ»à´¸àµà´":"VC","à´µàµà´¨à´¿à´¸àµà´µàµà´²":"VE","à´¬àµà´°à´¿à´àµà´àµà´·àµ à´µà´¿àµ¼à´à´¿àµ» à´¦àµà´µàµà´ªàµà´àµ¾":"VG","à´¯àµ.à´à´¸àµ. à´µàµàµ¼à´à´¿àµ» à´¦àµà´µàµà´ªàµà´àµ¾":"VI","à´µà´¿à´¯à´±àµà´±àµà´¨à´¾à´":"VN","à´µà´¨àµà´µà´¾à´¤àµà´¤àµ":"VU","à´µà´¾à´²à´¿à´¸àµ à´àµ»à´¡àµ à´«àµà´¯àµà´àµà´¨":"WF","à´¸à´¾à´®àµà´µ":"WS","à´¯à´®àµ»":"YE","à´®à´¯àµà´àµà´àµ":"YT","à´¦à´àµà´·à´¿à´£à´¾à´«àµà´°à´¿à´àµà´":"ZA","à´¸à´¾à´à´¬à´¿à´¯":"ZM","à´¸à´¿à´à´¬à´¾à´¬àµà´µàµ":"ZW","à´à´±à´¿à´¯à´ªàµà´ªàµà´à´¾à´¤àµà´¤à´¤àµ à´¨à´¿à´²à´µà´¿à´²à´¿à´²àµà´²à´¾à´¤àµà´¤à´¤àµ à´à´¯ à´ªàµà´°à´¦àµà´¶à´":"ZZ"};
ilib.data.ctrynames_mr = {"à¤à¤¶à¤¿à¤¯à¤¾":"142","à¤®à¤§à¥à¤¯ à¤à¤¶à¤¿à¤¯à¤¾":"143","à¤ªà¤¶à¥à¤à¤¿à¤® à¤à¤¶à¤¿à¤¯à¤¾":"145","à¤¯à¥à¤°à¥à¤ª":"150","à¤ªà¥à¤°à¥à¤µ à¤¯à¥à¤°à¥à¤ª":"151","à¤à¤¤à¥à¤¤à¤° à¤¯à¥à¤°à¥à¤ª":"154","à¤ªà¤¶à¥à¤à¤¿à¤® à¤¯à¥à¤°à¥à¤ª":"155","à¤²à¥à¤à¤¿à¤¨ à¤à¤®à¥à¤°à¤¿à¤à¤¾ à¤à¤£à¤¿ à¤à¥à¤°à¥à¤¬à¤¿à¤¯à¤¨":"419","à¤µà¤¿à¤¶à¥à¤µ":"001","à¤à¤«à¥à¤°à¤¿à¤à¤¾":"002","à¤à¤¤à¥à¤¤à¤° à¤à¤®à¥à¤°à¤¿à¤à¤¾":"003","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¤®à¥à¤°à¤¿à¤à¤¾":"005","à¤à¤¶à¤¨à¤¿à¤¯à¤¾":"009","à¤ªà¤¶à¥à¤à¤¿à¤® à¤à¤«à¥à¤°à¤¿à¤à¤¾":"011","à¤®à¤§à¥à¤¯ à¤à¤®à¥à¤°à¥à¤à¤¾":"013","à¤ªà¥à¤°à¥à¤µ à¤à¤«à¥à¤°à¤¿à¤à¤¾":"014","à¤à¤¤à¥à¤¤à¤° à¤à¤«à¥à¤°à¤¿à¤à¤¾":"015","à¤®à¤§à¥à¤¯ à¤à¤«à¥à¤°à¤¿à¤à¤¾":"017","à¤¦à¤à¥à¤·à¤¿à¤£à¥ à¤à¤«à¥à¤°à¤¿à¤à¤¾":"018","à¤à¤®à¥à¤°à¤¿à¤à¤¾à¤¸":"019","à¤à¤¤à¥à¤¤à¤°à¥ à¤à¤®à¥à¤°à¤¿à¤à¤¾":"021","à¤à¥à¤°à¥à¤¬à¤¿à¤¯à¤¨":"029","à¤ªà¥à¤°à¥à¤µ à¤à¤¶à¤¿à¤¯à¤¾":"030","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¤¶à¤¿à¤¯à¤¾":"034","à¤¦à¤à¥à¤·à¤¿à¤£ à¤ªà¥à¤°à¥à¤µ à¤à¤¶à¤¿à¤¯à¤¾":"035","à¤¦à¤à¥à¤·à¤¿à¤£ à¤¯à¥à¤°à¥à¤ª":"039","à¤à¤¸à¥âà¤à¥à¤°à¥à¤²à¥à¤¶à¤¿à¤¯à¤¾":"053","à¤®à¥à¤²à¤¾à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"054","à¤®à¤¾à¤¯à¤à¥à¤°à¥à¤¨à¥à¤¶à¤¿à¤¯à¤¨ à¤°à¥à¤à¤¨":"057","à¤ªà¥à¤²à¤¿à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"061","à¤âà¥à¤¸à¥à¤¨à¥à¤¶à¤¿à¤¯à¤® à¤¬à¥à¤":"AC","à¤à¤à¤¡à¥à¤°à¤¾":"AD","à¤¸à¤à¤¯à¥à¤à¥à¤¤ à¤à¤°à¤¬ à¤à¤®à¥à¤°à¤¾à¤¤":"AE","à¤à¤«à¤à¤¾à¤£à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"AF","à¤à¤à¤à¤¿à¤à¥à¤µà¤¾ à¤à¤£à¤¿ à¤¬à¤°à¥à¤¬à¥à¤¡à¤¾":"AG","à¤à¤à¤à¥à¤µà¤¿à¤²à¤¾":"AI","à¤à¤²à¥à¤¬à¤¾à¤¨à¤¿à¤¯à¤¾":"AL","à¤à¤°à¥à¤®à¥à¤¨à¤¿à¤¯à¤¾":"AM","à¤¨à¥à¤¦à¤°à¤²à¤à¤¡à¥âà¤¸ à¤à¤âà¤à¤¿à¤²à¥à¤¸":"AN","à¤à¤à¤à¥à¤²à¤¾":"AO","à¤à¤à¤à¤¾à¤°à¥à¤à¥à¤à¤¿à¤à¤¾":"AQ","à¤à¤°à¥à¤à¥à¤à¤à¤¿à¤¨à¤¾":"AR","à¤à¤®à¥à¤°à¤¿à¤à¤¨ à¤¸à¤¾à¤®à¥à¤":"AS","à¤à¤¸à¥à¤à¥à¤°à¤¿à¤¯à¤¾":"AT","à¤à¤¸à¥à¤à¥à¤°à¥à¤²à¤¿à¤¯à¤¾":"AU","à¤à¤°à¥à¤¬à¤¾":"AW","à¤âà¥à¤²à¤à¤¡ à¤¬à¥à¤à¥":"AX","à¤à¤à¤°à¤¬à¥à¤à¤¾à¤¨":"AZ","à¤¬à¥à¤¸à¥à¤¨à¤¿à¤¯à¤¾ à¤à¤£à¤¿ à¤¹à¤°à¥à¤à¥à¤à¥à¤µà¤¿à¤¨à¤¾":"BA","à¤¬à¤¾à¤°à¥à¤¬à¤¾à¤¡à¥à¤¸":"BB","à¤¬à¤¾à¤à¤à¥à¤²à¤¾à¤¦à¥à¤¶":"BD","à¤¬à¥à¤²à¥à¤à¤¿à¤¯à¤®":"BE","à¤¬à¥à¤°à¥à¤à¤¿à¤¨à¤¾ à¤«à¤¾à¤¸à¥":"BF","à¤¬à¤²à¥à¤à¥à¤°à¤¿à¤¯à¤¾":"BG","à¤¬à¤¹à¤¾à¤°à¥à¤¨":"BH","à¤¬à¥à¤°à¥à¤à¤¡à¥":"BI","à¤¬à¥à¤¨à¤¿à¤¨":"BJ","à¤¸à¥à¤à¤ à¤¬à¤¾à¤°à¥à¤¥à¥à¤²à¥à¤®à¥":"BL","à¤¬à¤°à¥à¤®à¥à¤¡à¤¾":"BM","à¤¬à¥à¤°à¥à¤¨à¥à¤":"BN","à¤¬à¥à¤²à¤¿à¤µà¥à¤¹à¤¿à¤¯à¤¾":"BO","à¤à¥à¤°à¤¿à¤¬à¤¿à¤¯à¤¨ à¤¨à¥à¤¦à¤°à¤²à¤à¤¡à¥à¤¸":"BQ","à¤¬à¥à¤°à¤¾à¤à¤¿à¤²":"BR","à¤¬à¤¹à¤¾à¤®à¤¾à¤":"BS","à¤­à¥à¤¤à¤¾à¤¨":"BT","à¤¬à¥à¤à¤µà¥à¤ à¤¬à¥à¤":"BV","à¤¬à¥à¤à¥à¤¸à¤µà¤¾à¤¨à¤¾":"BW","à¤¬à¥à¤²à¤¾à¤°à¥à¤¸":"BY","à¤¬à¥à¤²à¤¿à¤à¥":"BZ","à¤à¥à¤¨à¤¡à¤¾":"CA","à¤à¥à¤à¥à¤¸ à¤¬à¥à¤à¥":"CC","à¤à¤¾à¤à¤à¥ - à¤à¤¿à¤à¤¶à¤¾à¤¸à¤¾":"CD","à¤à¥à¤à¤¦à¥à¤°à¥à¤¯ à¤à¤«à¥à¤°à¤¿à¤à¥ à¤ªà¥à¤°à¤à¤¾à¤¸à¤¤à¥à¤¤à¤¾à¤":"CF","à¤à¤¾à¤à¤à¥ - à¤¬à¥à¤°à¤¾à¤à¤¾à¤µà¤¿à¤²à¥":"CG","à¤¸à¥à¤µà¤¿à¤¤à¥à¤à¤°à¥à¤²à¤à¤¡":"CH","à¤à¤¯à¤µà¥à¤¹à¤°à¥ à¤à¥à¤¸à¥à¤":"CI","à¤à¥à¤ à¤¬à¥à¤à¥":"CK","à¤à¤¿à¤²à¥":"CL","à¤à¥à¤®à¥à¤°à¥à¤¨":"CM","à¤à¥à¤¨":"CN","à¤à¥à¤²à¤®à¥à¤¬à¤¿à¤¯à¤¾":"CO","à¤à¥à¤²à¤¿à¤ªà¤°à¤à¥à¤¨ à¤¬à¥à¤":"CP","à¤à¥à¤¸à¥à¤à¤¾à¤°à¤¿à¤à¤¾":"CR","à¤à¥à¤¯à¥à¤¬à¤¾":"CU","à¤à¥à¤ª à¤µà¥à¤¹à¤°à¥à¤¡à¥":"CV","à¤à¥à¤°à¥à¤à¥":"CW","à¤à¥à¤°à¤¿à¤¸à¤®à¤¸ à¤¬à¥à¤":"CX","à¤¸à¤¾à¤¯à¤ªà¥à¤°à¤¸":"CY","à¤à¥à¤ à¤ªà¥à¤°à¤à¤¾à¤¸à¤¤à¥à¤¤à¤¾à¤":"CZ","à¤à¤°à¥à¤®à¤¨à¥":"DE","à¤¦à¤¿à¤à¤à¥ à¤à¤¾à¤°à¥à¤¶à¤¿à¤¯à¤¾":"DG","à¤à¤¿à¤¬à¥à¤à¥":"DJ","à¤¡à¥à¤¨à¥à¤®à¤¾à¤°à¥à¤":"DK","à¤¡à¥à¤®à¤¿à¤¨à¤¿à¤à¤¾":"DM","à¤¡à¥à¤®à¤¿à¤¨à¤¿à¤à¤¨ à¤ªà¥à¤°à¤à¤¾à¤¸à¤¤à¥à¤¤à¤¾à¤":"DO","à¤à¤²à¥à¤à¥à¤°à¤¿à¤¯à¤¾":"DZ","à¤¸à¥à¤¯à¥à¤à¤¾ à¤à¤£à¤¿ à¤®à¥à¤²à¤¿à¤²à¤¾":"EA","à¤à¤à¥à¤µà¤¾à¤¡à¥à¤°":"EC","à¤à¤¸à¥à¤à¥à¤¨à¤¿à¤¯à¤¾":"EE","à¤à¤à¤¿à¤ªà¥à¤¤":"EG","à¤ªà¤¶à¥à¤à¤¿à¤® à¤¸à¤¹à¤¾à¤°à¤¾":"EH","à¤à¤°à¤¿à¤à¥à¤°à¤¿à¤¯à¤¾":"ER","à¤¸à¥à¤ªà¥à¤¨":"ES","à¤à¤¥à¤¿à¤à¤ªà¤¿à¤¯à¤¾":"ET","à¤¯à¥à¤°à¥à¤ªà¥à¤¯ à¤¸à¤à¤":"EU","à¤«à¤¿à¤¨à¤²à¤à¤¡":"FI","à¤«à¤¿à¤à¥":"FJ","à¤«à¥à¤à¤²à¤à¤¡ à¤¬à¥à¤à¥":"FK","à¤®à¤¾à¤¯à¤à¥à¤°à¥à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"FM","à¤«à¤°à¥à¤ à¤¬à¥à¤à¥":"FO","à¤«à¥à¤°à¤¾à¤¨à¥à¤¸":"FR","à¤à¥à¤¬à¥à¤¨":"GA","à¤¬à¥à¤°à¤¿à¤à¤¨":"GB","à¤à¥à¤°à¥à¤¨à¥à¤¡à¤¾":"GD","à¤à¥à¤°à¥à¤à¤¿à¤¯à¤¾":"GE","à¤«à¥à¤°à¥à¤à¤ à¤à¤¯à¤¾à¤¨à¤¾":"GF","à¤à¥à¤µà¥à¤°à¥à¤¨à¤¸à¥":"GG","à¤à¤¾à¤¨à¤¾":"GH","à¤à¤¿à¤¬à¥à¤°à¤¾à¤²à¥à¤à¤°":"GI","à¤à¥à¤°à¥à¤¨à¤²à¤à¤¡":"GL","à¤à¤¾à¤®à¥à¤¬à¤¿à¤¯à¤¾":"GM","à¤à¤¿à¤¨à¥":"GN","à¤à¥à¤µà¤¾à¤¡à¥à¤²à¥à¤à¤ªà¥":"GP","à¤à¤à¥à¤µà¥à¤à¥à¤°à¤¿à¤¯à¤² à¤à¤¿à¤¨à¥":"GQ","à¤à¥à¤°à¥à¤¸":"GR","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¥à¤°à¥à¤à¤¿à¤¯à¤¾ à¤à¤£à¤¿ à¤¦à¤à¥à¤·à¤¿à¤£ à¤¸à¤à¤¡à¤µà¤¿à¤ à¤¬à¥à¤à¥":"GS","à¤à¥à¤µà¤¾à¤à¥à¤®à¤¾à¤²à¤¾":"GT","à¤à¥à¤à¤®":"GU","à¤à¤¿à¤¨à¥-à¤¬à¤¿à¤¸à¤¾à¤":"GW","à¤à¤¯à¤¾à¤¨à¤¾":"GY","à¤¹à¤¾à¤à¤à¤à¤¾à¤à¤ à¤à¤¸à¤à¤à¤° à¤à¥à¤·à¥à¤¤à¥à¤° à¤à¥à¤¨":"HK","à¤¹à¤°à¥à¤¡ à¤¬à¥à¤ à¤à¤£à¤¿ à¤®à¥à¤à¤¡à¥à¤¨à¤¾à¤²à¥à¤¡ à¤¬à¥à¤":"HM","à¤¹à¥à¤à¤¡à¥à¤°à¤¾à¤à¥":"HN","à¤à¥à¤°à¥à¤à¤¶à¤¿à¤¯à¤¾":"HR","à¤¹à¥à¤¤à¥":"HT","à¤¹à¤à¤à¥à¤°à¥":"HU","à¤à¥à¤¨à¤°à¥ à¤¬à¥à¤à¥":"IC","à¤à¤à¤¡à¥à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"ID","à¤à¤¯à¤°à¥à¤²à¤à¤¡":"IE","à¤à¤¸à¥à¤¤à¥à¤°à¤¾à¤à¤²":"IL","à¤à¤¸à¥à¤²à¥ à¤à¤« à¤®à¥à¤¨":"IM","à¤­à¤¾à¤°à¤¤":"IN","à¤¬à¥à¤°à¤¿à¤à¤¿à¤¶ à¤à¤à¤¡à¤¿à¤¯à¤¨ à¤à¤¶à¤¨ à¤à¥à¤°à¥à¤à¤°à¥":"IO","à¤à¤°à¤¾à¤":"IQ","à¤à¤°à¤¾à¤£":"IR","à¤à¤à¤¸à¤²à¤à¤¡":"IS","à¤à¤à¤²à¥":"IT","à¤à¤°à¥à¤¸à¥":"JE","à¤à¤®à¥à¤à¤¾":"JM","à¤à¥à¤°à¥à¤¡à¤¨":"JO","à¤à¤ªà¤¾à¤¨":"JP","à¤à¥à¤¨à¤¿à¤¯à¤¾":"KE","à¤à¤¿à¤°à¤à¤¿à¤à¤¸à¥à¤¤à¤¾à¤¨":"KG","à¤à¤à¤¬à¥à¤¡à¤¿à¤¯à¤¾":"KH","à¤à¤¿à¤°à¥à¤¬à¤¾à¤à¥":"KI","à¤à¥à¤®à¥à¤°à¥à¤":"KM","à¤¸à¥à¤à¤ à¤à¤¿à¤à¥à¤¸ à¤à¤£à¤¿ à¤¨à¥à¤µà¥à¤¹à¤¿à¤¸":"KN","à¤à¤¤à¥à¤¤à¤° à¤à¥à¤°à¤¿à¤¯à¤¾":"KP","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¥à¤°à¤¿à¤¯à¤¾":"KR","à¤à¥à¤µà¥à¤¤":"KW","à¤à¥à¤®à¤¨ à¤¬à¥à¤à¥":"KY","à¤à¤à¤¾à¤à¤¸à¥à¤¤à¤¾à¤¨":"KZ","à¤²à¤¾à¤à¤¸":"LA","à¤²à¥à¤¬à¤¾à¤¨à¤¨":"LB","à¤¸à¥à¤à¤ à¤²à¥à¤¯à¥à¤¸à¤¿à¤¯à¤¾":"LC","à¤²à¤¿à¤à¤à¥à¤¨à¤¸à¥à¤à¤¾à¤à¤¨":"LI","à¤¶à¥à¤°à¥à¤²à¤à¤à¤¾":"LK","à¤²à¤¾à¤¯à¤¬à¥à¤°à¤¿à¤¯à¤¾":"LR","à¤²à¥à¤¸à¥à¤¥à¥":"LS","à¤²à¤¿à¤¥à¥à¤à¤¨à¤¿à¤¯à¤¾":"LT","à¤²à¤à¥à¤à¥à¤à¤¬à¤°à¥à¤":"LU","à¤²à¤¾à¤à¥âà¤µà¤¿à¤¯à¤¾":"LV","à¤²à¤¿à¤¬à¤¿à¤¯à¤¾":"LY","à¤®à¥à¤°à¥à¤à¥à¤à¥":"MA","à¤®à¥à¤¨à¥à¤à¥":"MC","à¤®à¥à¤²à¥à¤¡à¥à¤µà¥à¤¹à¤¾":"MD","à¤®à¥à¤à¤à¥à¤¨à¥à¤à¥à¤°à¥":"ME","à¤¸à¥à¤à¤ à¤®à¤¾à¤°à¥à¤à¤¿à¤¨":"MF","à¤®à¤¾à¤¦à¤¾à¤à¤¾à¤¸à¥à¤à¤°":"MG","à¤®à¤¾à¤°à¥à¤¶à¤² à¤¬à¥à¤à¥":"MH","à¤®à¥à¤¸à¥à¤¡à¥à¤¨à¤¿à¤¯à¤¾":"MK","à¤®à¤¾à¤²à¥":"ML","à¤®à¥à¤¯à¤¾à¤¨à¤®à¤¾à¤° [à¤¬à¥à¤°à¤¹à¥à¤®à¤¦à¥à¤¶]":"MM","à¤®à¤à¤à¥à¤²à¤¿à¤¯à¤¾":"MN","à¤®à¤à¤¾à¤ à¤à¤¸à¤à¤à¤° à¤à¤¾à¤¯à¤¨à¤¾":"MO","à¤à¤¤à¥à¤¤à¤°à¥ à¤®à¤¾à¤°à¤¿à¤¯à¤¾à¤¨à¤¾ à¤¬à¥à¤à¥":"MP","à¤®à¤¾à¤°à¥à¤à¤¿à¤¨à¤¿à¤":"MQ","à¤®à¥à¤°à¤¿à¤à¤¾à¤¨à¤¿à¤¯à¤¾":"MR","à¤®à¥à¤¨à¥à¤à¥à¤¸à¥à¤°à¤¾à¤":"MS","à¤®à¤¾à¤²à¥à¤à¤¾":"MT","à¤®à¥à¤°à¤¿à¤¶à¤¸":"MU","à¤®à¤¾à¤²à¤¦à¥à¤µà¥à¤":"MV","à¤®à¤²à¤¾à¤µà¥":"MW","à¤®à¥à¤à¥à¤¸à¤¿à¤à¥":"MX","à¤®à¤²à¥à¤¶à¤¿à¤¯à¤¾":"MY","à¤®à¥à¤à¤¾à¤®à¥à¤¬à¤¿à¤":"MZ","à¤¨à¤®à¥à¤¬à¤¿à¤¯à¤¾":"NA","à¤¨à¥à¤¯à¥ à¤à¥à¤²à¥à¤¡à¥à¤¨à¤¿à¤¯à¤¾":"NC","à¤¨à¤¾à¤à¤à¤°":"NE","à¤¨à¥à¤°à¤«à¥à¤ à¤¬à¥à¤":"NF","à¤¨à¤¾à¤¯à¤à¥à¤°à¤¿à¤¯à¤¾":"NG","à¤¨à¤¿à¤à¤¾à¤°à¤¾à¤à¥à¤µà¥":"NI","à¤¨à¥à¤¦à¤°à¤²à¤à¤¡":"NL","à¤¨à¥à¤°à¥à¤µà¥":"NO","à¤¨à¥à¤ªà¤¾à¤³":"NP","à¤¨à¤à¤°à¥":"NR","à¤¨à¥à¤¯à¥":"NU","à¤¨à¥à¤¯à¥à¤à¥à¤²à¤à¤¡":"NZ","à¤à¤®à¤¾à¤¨":"OM","à¤ªà¤¨à¤¾à¤®à¤¾":"PA","à¤ªà¥à¤°à¥":"PE","à¤«à¥à¤°à¥à¤à¤ à¤ªà¥à¤²à¤¿à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"PF","à¤ªà¤¾à¤ªà¥à¤ à¤¨à¥à¤¯à¥ à¤à¤¿à¤¨à¥":"PG","à¤«à¤¿à¤²à¥à¤ªà¤¿à¤¨à¥à¤¸":"PH","à¤ªà¤¾à¤à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"PK","à¤ªà¥à¤²à¤à¤¡":"PL","à¤¸à¥à¤à¤ à¤ªà¤¿à¤¯à¤°à¥ à¤à¤£à¤¿ à¤®à¤¿à¤à¥à¤µà¥à¤²à¥à¤¨":"PM","à¤ªà¤¿à¤à¤à¥à¤°à¥à¤¨":"PN","à¤ªà¥à¤°à¥à¤à¥ à¤°à¤¿à¤à¥":"PR","à¤ªà¥à¤²à¥à¤¸à¥à¤à¤¿à¤¨à¥ à¤ªà¥à¤°à¤¦à¥à¤¶":"PS","à¤ªà¥à¤°à¥à¤¤à¥à¤à¤¾à¤²":"PT","à¤ªà¤²à¤¾à¤":"PW","à¤ªà¤°à¤¾à¤à¥à¤µà¥":"PY","à¤à¤¤à¤¾à¤°":"QA","à¤à¤à¤à¤²à¤¾à¤¯à¤¿à¤à¤ à¤à¤¶à¤¨à¤¿à¤¯à¤¾":"QO","à¤°à¤¿à¤¯à¥à¤¨à¤¿à¤¯à¤¨":"RE","à¤°à¥à¤®à¤¾à¤¨à¤¿à¤¯à¤¾":"RO","à¤¸à¤°à¥à¤¬à¤¿à¤¯à¤¾":"RS","à¤°à¤¶à¤¿à¤¯à¤¾":"RU","à¤°à¤µà¤¾à¤à¤¡à¤¾":"RW","à¤¸à¥à¤¦à¥ à¤à¤°à¤¬":"SA","à¤¸à¥à¤²à¥à¤®à¤¨ à¤¬à¥à¤à¥":"SB","à¤¸à¥à¤¶à¥à¤²à¥à¤¸":"SC","à¤¸à¥à¤¦à¤¾à¤¨":"SD","à¤¸à¥à¤µà¥à¤¡à¤¨":"SE","à¤¸à¤¿à¤à¤à¤¾à¤ªà¥à¤°":"SG","à¤¸à¥à¤à¤ à¤¹à¥à¤²à¥à¤¨à¤¾":"SH","à¤¸à¥à¤²à¥à¤µà¥à¤¹à¥à¤¨à¤¿à¤¯à¤¾":"SI","à¤¸à¥à¤µà¤¾à¤²à¤¬à¤°à¥à¤¡ à¤à¤£à¤¿ à¤à¤¾à¤¨ à¤®à¤¾à¤¯à¥à¤¨":"SJ","à¤¸à¥à¤²à¥à¤µà¥à¤¹à¤¾à¤à¤¿à¤¯à¤¾":"SK","à¤¸à¤¿à¤à¤°à¤¾ à¤²à¤¿à¤à¤¨":"SL","à¤¸à¥à¤¨ à¤®à¤°à¥à¤¨à¥":"SM","à¤¸à¥à¤¨à¥à¤à¤²":"SN","à¤¸à¥à¤®à¤¾à¤²à¤¿à¤¯à¤¾":"SO","à¤¸à¥à¤°à¤¿à¤¨à¤¾à¤®":"SR","à¤¦à¤à¥à¤·à¤¿à¤£ à¤¸à¥à¤¦à¤¾à¤¨":"SS","à¤¸à¤¾à¤ à¤à¥à¤® à¤à¤£à¤¿ à¤ªà¥à¤°à¤¿à¤à¤¸à¤¿à¤ªà¥":"ST","à¤à¤² à¤¸à¤¾à¤²à¥à¤µà¤¾à¤¡à¥à¤°":"SV","à¤¸à¤¿à¤à¤ à¤®à¤¾à¤°à¥à¤à¥à¤¨":"SX","à¤¸à¥à¤°à¤¿à¤¯à¤¾":"SY","à¤¸à¥à¤µà¤¾à¤à¤¿à¤²à¤à¤¡":"SZ","à¤à¥à¤°à¤¿à¤¸à¥à¤à¤¨ à¤¦à¤¾ à¤à¤¨à¥à¤¹à¤¾":"TA","à¤à¤°à¥à¤à¥à¤¸ à¤à¤£à¤¿ à¤à¥à¤à¥à¤¸ à¤¬à¥à¤à¥":"TC","à¤à¤¾à¤¡":"TD","à¤«à¥à¤°à¥à¤à¤ à¤¦à¤¾à¤à¥à¤·à¤¿à¤£à¤¾à¤¤à¥à¤¯ à¤ªà¥à¤°à¤¦à¥à¤¶":"TF","à¤à¥à¤à¥":"TG","à¤¥à¤¾à¤¯à¤²à¤à¤¡":"TH","à¤¤à¤¾à¤à¤¿à¤à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"TJ","à¤¤à¥à¤à¥à¤²à¤¾à¤":"TK","à¤ªà¥à¤°à¥à¤µ à¤¤à¤¿à¤®à¥à¤°":"TL","à¤¤à¥à¤°à¥à¤à¤®à¥à¤¨à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"TM","à¤à¥à¤¯à¥à¤¨à¤¿à¤¶à¤¿à¤¯à¤¾":"TN","à¤à¥à¤à¤à¤¾":"TO","à¤¤à¥à¤°à¥à¤à¥":"TR","à¤¤à¥à¤°à¤¿à¤¨à¤¿à¤¦à¤¾à¤¦ à¤à¤£à¤¿ à¤à¥à¤¬à¥à¤à¥":"TT","à¤à¥à¤µà¤¾à¤²à¥":"TV","à¤¤à¥à¤µà¤¾à¤¨":"TW","à¤à¤¾à¤à¤à¤¾à¤¨à¤¿à¤¯à¤¾":"TZ","à¤¯à¥à¤à¥à¤°à¥à¤¨":"UA","à¤¯à¥à¤à¤¾à¤à¤¡à¤¾":"UG","à¤¯à¥à¤¨à¤¾à¤à¤à¥à¤¡ à¤¸à¥à¤à¥à¤à¥à¤¸ à¤®à¤¾à¤à¤¨à¤° à¤à¤à¤à¤²à¤¾à¤à¤à¤ à¤¬à¥à¤à¥":"UM","à¤¸à¤à¤¯à¥à¤à¥à¤¤ à¤°à¤¾à¤à¥à¤¯à¥ /à¤à¤®à¥à¤°à¤¿à¤à¤¾":"US","à¤à¤°à¥à¤à¥à¤µà¥":"UY","à¤à¤à¤¬à¥à¤à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"UZ","à¤µà¥à¤¹à¥à¤à¤¿à¤à¤¨":"VA","à¤¸à¥à¤à¤ à¤µà¥à¤¹à¤¿à¤¨à¥à¤¸à¥à¤à¤ à¤à¤£à¤¿ à¤à¥à¤°à¥à¤¨à¤¡à¤¾à¤à¤¨à¥à¤¸":"VC","à¤µà¥à¤¹à¥à¤¨à¥à¤à¥à¤à¤²à¤¾":"VE","à¤¬à¥à¤°à¤¿à¤à¤¿à¤¶ à¤µà¥à¤¹à¤°à¥à¤à¤¿à¤¨ à¤¬à¥à¤à¥":"VG","à¤¯à¥.à¤à¤¸. à¤µà¥à¤¹à¤°à¥à¤à¤¿à¤¨ à¤¬à¥à¤à¥":"VI","à¤µà¥à¤¹à¤¿à¤à¤¤à¤¨à¤¾à¤®":"VN","à¤µà¤¾à¤¨à¥à¤à¥":"VU","à¤µà¤¾à¤²à¤¿à¤¸ à¤à¤£à¤¿ à¤«à¥à¤¯à¥à¤à¥à¤¨à¤¾":"WF","à¤¸à¤¾à¤®à¥à¤":"WS","à¤¯à¥à¤®à¥à¤¨":"YE","à¤®à¤¾à¤¯à¥à¤à¥à¤à¥":"YT","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¤«à¥à¤°à¤¿à¤à¤¾":"ZA","à¤à¤¾à¤®à¥à¤¬à¤¿à¤¯à¤¾":"ZM","à¤à¤¿à¤®à¥à¤¬à¤¾à¤¬à¥à¤µà¥":"ZW","à¤à¤à¥à¤à¤¾à¤¤ à¤µà¤¾ à¤à¤µà¥à¤§ à¤ªà¥à¤°à¤¦à¥à¤¶":"ZZ"};
ilib.data.ctrynames_ms = {"Asia":"142","Asia Tengah":"143","Asia Barat":"145","Eropah":"150","Eropah Timur":"151","Eropah Utara":"154","Eropah Barat":"155","Amerika Latin":"419","Dunia":"001","Afrika":"002","Amerika Utara":"003","Amerika Selatan":"005","Oceania":"009","Afrika Barat":"011","Amerika Tengah":"013","Afrika Timur":"014","Afrika Utara":"015","Afrika Tengah":"017","Selatan Afrika":"018","Amerika":"019","Utara Amerika":"021","Caribbean":"029","Asia Timur":"030","Asia Selatan":"034","Asia Tenggara":"035","Eropah Selatan":"039","Australasia":"053","Melanesia":"054","Wilayah Mikronesia":"057","Polinesia":"061","Pulau Ascension":"AC","Andorra":"AD","Emiriah Arab Bersatu":"AE","Afghanistan":"AF","Antigua dan Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Netherlands Antilles":"AN","Angola":"AO","Antarctica":"AQ","Argentina":"AR","American Samoa":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Kepulauan Ãland":"AX","Azerbaijan":"AZ","Bosnia dan Herzegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgium":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","Saint BarthÃ©lemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Caribbean Belanda":"BQ","Brazil":"BR","Bahamas":"BS","Bhutan":"BT","Bouvet Island":"BV","Botswana":"BW","Belarus":"BY","Belize":"BZ","Kanada":"CA","Cocos [Keeling] Islands":"CC","Congo - Kinshasa":"CD","Republik Afrika Tengah":"CF","Congo - Brazzaville":"CG","Switzerland":"CH","CÃ´te dâIvoire":"CI","Cook Islands":"CK","Cile":"CL","Kamerun":"CM","China":"CN","Colombia":"CO","Pulau Clipperton":"CP","Kosta Rika":"CR","Cuba":"CU","Cape Verde":"CV","Curacao":"CW","Christmas Island":"CX","Kibris":"CY","Republik Czech":"CZ","Jerman":"DE","Diego Garcia":"DG","Jibouti":"DJ","Denmark":"DK","Dominica":"DM","Republik Dominican":"DO","Aljazair":"DZ","Ceuta dan Melilla":"EA","Ecuador":"EC","Estonia":"EE","Mesir":"EG","Sahara Barat":"EH","Eritrea":"ER","Sepanyol":"ES","Ethiopia":"ET","Kesatuan Eropah":"EU","Finland":"FI","Fiji":"FJ","Falkland Islands":"FK","Micronesia":"FM","Faroe Islands":"FO","Perancis":"FR","Gabon":"GA","United Kingdom":"GB","Grenada":"GD","Georgia":"GE","French Guiana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","Greenland":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Equatorial Guinea":"GQ","Yunani":"GR","South Georgia and the South Sandwich Islands":"GS","Guatemala":"GT","Guam":"GU","Guinea Bissau":"GW","Guyana":"GY","Hong Kong SAR China":"HK","Heard Island and McDonald Islands":"HM","Honduras":"HN","Croatia":"HR","Haiti":"HT","Hungari":"HU","Kepulauan Canary":"IC","Indonesia":"ID","Ireland":"IE","Israel":"IL","Isle of Man":"IM","India":"IN","British Indian Ocean Territory":"IO","Iraq":"IQ","Iran":"IR","Iceland":"IS","Itali":"IT","Jersey":"JE","Jamaika":"JM","Jordan":"JO","Jepun":"JP","Kenya":"KE","Kyrgyzstan":"KG","Kemboja":"KH","Kiribati":"KI","Comoros":"KM","Saint Kitts dan Nevis":"KN","Utara Korea":"KP","Selatan Korea":"KR","Kuwait":"KW","Cayman Islands":"KY","Kazakhstan":"KZ","Laos":"LA","Lubnan":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Lithuania":"LT","Luksembourg":"LU","Latvia":"LV","Libya":"LY","Maghribi":"MA","Monaco":"MC","Moldova":"MD","Montenegro":"ME","Saint Martin":"MF","Madagaskar":"MG","Kepulauan Marshall":"MH","Macedonia":"MK","Mali":"ML","Myanmar [Burma]":"MM","Mongolia":"MN","Macau SAR China":"MO","Northern Mariana Islands":"MP","Martinique":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldiv":"MV","Malawi":"MW","Meksiko":"MX","Malaysia":"MY","Mozambik":"MZ","Namibia":"NA","New Caledonia":"NC","Niger":"NE","Norfolk Island":"NF","Nigeria":"NG","Nicaragua":"NI","Belanda":"NL","Norway":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","New Zealand":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Polinesia Perancis":"PF","Papua New Guinea":"PG","Filipina":"PH","Pakistan":"PK","Poland":"PL","Saint Pierre and Miquelon":"PM","Kepulauan Pitcairn":"PN","Puerto Rico":"PR","Wilayah Palestin":"PS","Feringgi":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Oceania Terpencil":"QO","RÃ©union":"RE","Romania":"RO","Serbia":"RS","Rusia":"RU","Rwanda":"RW","Arab Saudi":"SA","Kepulauan Solomon":"SB","Seychelles":"SC","Sudan":"SD","Sweden":"SE","Singapura":"SG","Saint Helena":"SH","Slovenia":"SI","Svalbard and Jan Mayen":"SJ","Slovakia":"SK","Siera Leon":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Surinam":"SR","Sudan Selatan":"SS","SÃ£o TomÃ© dan PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Syria":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Turks and Caicos Islands":"TC","Cad":"TD","French Southern Territories":"TF","Togo":"TG","Thailand":"TH","Tadjikistan":"TJ","Tokelau":"TK","Timor-Leste":"TL","Turkmenistan":"TM","Tunisia":"TN","Tonga":"TO","Turki":"TR","Trinidad dan Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ukraine":"UA","Uganda":"UG","United States Minor Outlying Islands":"UM","Amerika Syarikat":"US","Uruguay":"UY","Uzbekistan":"UZ","Kota Vatican":"VA","Saint Vincent dan Grenadines":"VC","Venezuela":"VE","British Virgin Islands":"VG","U.S. Virgin Islands":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis and Futuna":"WF","Samoa":"WS","Yaman":"YE","Mayotte":"YT","Afrika Selatan":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Wilayah Tidak Diketahui":"ZZ"};
ilib.data.ctrynames_nb = {"Asia":"142","Sentral-Asia":"143","Vest-Asia":"145","Europa":"150","Ãst-Europa":"151","Nord-Europa":"154","Vest-Europa":"155","Latin-Amerika":"419","verden":"001","Afrika":"002","Nord-Amerika":"003","SÃ¸r-Amerika":"005","Oseania":"009","Vest-Afrika":"011","Sentral-Amerika":"013","Ãst-Afrika":"014","Nord-Afrika":"015","Sentral-Afrika":"017","SÃ¸rlige Afrika":"018","Amerika":"019","Nordlige Amerika":"021","Karibia":"029","Ãst-Asia":"030","SÃ¸r-Asia":"034","SÃ¸rÃ¸st-Asia":"035","SÃ¸r-Europa":"039","Australasia":"053","Melanesia":"054","Mikronesia":"057","Polynesia":"061","Ascension":"AC","Andorra":"AD","De forente arabiske emirater":"AE","Afghanistan":"AF","Antigua og Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","De nederlandske antiller":"AN","Angola":"AO","Antarktis":"AQ","Argentina":"AR","Amerikansk Samoa":"AS","Ãsterrike":"AT","Australia":"AU","Aruba":"AW","Ãland":"AX","Aserbajdsjan":"AZ","Bosnia-Hercegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgia":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","Saint BarthÃ©lemy":"BL","Bermuda":"BM","Brunei Darussalam":"BN","Bolivia":"BO","Karibisk Nederland":"BQ","Brasil":"BR","Bahamas":"BS","Bhutan":"BT","BouvetÃ¸ya":"BV","Botswana":"BW","Hviterussland":"BY","Belize":"BZ","Canada":"CA","KokosÃ¸yene":"CC","Kongo-Kinshasa":"CD","Den sentralafrikanske republikk":"CF","Kongo-Brazzaville":"CG","Sveits":"CH","Elfenbenskysten":"CI","CookÃ¸yene":"CK","Chile":"CL","Kamerun":"CM","Kina":"CN","Colombia":"CO","ClippertonÃ¸ya":"CP","Costa Rica":"CR","Cuba":"CU","Kapp Verde":"CV","CuraÃ§ao":"CW","ChristmasÃ¸ya":"CX","Kypros":"CY","Tsjekkia":"CZ","Tyskland":"DE","Diego Garcia":"DG","Djibouti":"DJ","Danmark":"DK","Dominica":"DM","Den dominikanske republikk":"DO","Algerie":"DZ","Ceuta og Melilla":"EA","Ecuador":"EC","Estland":"EE","Egypt":"EG","Vest-Sahara":"EH","Eritrea":"ER","Spania":"ES","Etiopia":"ET","Den europeiske union":"EU","Finland":"FI","Fiji":"FJ","FalklandsÃ¸yene":"FK","MikronesiafÃ¸derasjonen":"FM","FÃ¦rÃ¸yene":"FO","Frankrike":"FR","Gabon":"GA","Storbritannia":"GB","Grenada":"GD","Georgia":"GE","Fransk Guyana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","GrÃ¸nland":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Ekvatorial-Guinea":"GQ","Hellas":"GR","SÃ¸r-Georgia og de sÃ¸rlige Sandwich-Ã¸yene":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Hongkong S.A.R. Kina":"HK","HeardÃ¸ya og McDonaldÃ¸yene":"HM","Honduras":"HN","Kroatia":"HR","Haiti":"HT","Ungarn":"HU","KanariÃ¸yene":"IC","Indonesia":"ID","Irland":"IE","Israel":"IL","Man":"IM","India":"IN","Britiske territorier i Indiahavet":"IO","Irak":"IQ","Iran":"IR","Island":"IS","Italia":"IT","Jersey":"JE","Jamaica":"JM","Jordan":"JO","Japan":"JP","Kenya":"KE","Kirgisistan":"KG","Kambodsja":"KH","Kiribati":"KI","Komorene":"KM","St. Kitts og Nevis":"KN","Nord-Korea":"KP","SÃ¸r-Korea":"KR","Kuwait":"KW","CaymanÃ¸yene":"KY","Kasakhstan":"KZ","Laos":"LA","Libanon":"LB","St. Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Litauen":"LT","Luxembourg":"LU","Latvia":"LV","Libya":"LY","Marokko":"MA","Monaco":"MC","Moldova":"MD","Montenegro":"ME","Saint-Martin":"MF","Madagaskar":"MG","MarshallÃ¸yene":"MH","Makedonia":"MK","Mali":"ML","Myanmar [Burma]":"MM","Mongolia":"MN","Macao S.A.R. Kina":"MO","Nord-Marianene":"MP","Martinique":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldivene":"MV","Malawi":"MW","Mexico":"MX","Malaysia":"MY","Mosambik":"MZ","Namibia":"NA","Ny-Caledonia":"NC","Niger":"NE","NorfolkÃ¸ya":"NF","Nigeria":"NG","Nicaragua":"NI","Nederland":"NL","Norge":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","New Zealand":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Fransk Polynesia":"PF","Papua Ny-Guinea":"PG","Filippinene":"PH","Pakistan":"PK","Polen":"PL","St. Pierre og Miquelon":"PM","Pitcairn":"PN","Puerto Rico":"PR","Det palestinske omrÃ¥det":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","avsidesliggende Oceania":"QO","RÃ©union":"RE","Romania":"RO","Serbia":"RS","Russland":"RU","Rwanda":"RW","Saudi-Arabia":"SA","SalomonÃ¸yene":"SB","Seychellene":"SC","Sudan":"SD","Sverige":"SE","Singapore":"SG","St. Helena":"SH","Slovenia":"SI","Svalbard og Jan Mayen":"SJ","Slovakia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Surinam":"SR","SÃ¸r-Sudan":"SS","SÃ£o TomÃ© og PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Syria":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Turks- og CaicosÃ¸yene":"TC","Tsjad":"TD","De franske sÃ¸rterritorier":"TF","Togo":"TG","Thailand":"TH","Tadsjikistan":"TJ","Tokelau":"TK","Ãst-Timor":"TL","Turkmenistan":"TM","Tunisia":"TN","Tonga":"TO","Tyrkia":"TR","Trinidad og Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ukraina":"UA","Uganda":"UG","USAs ytre smÃ¥Ã¸yer":"UM","USA":"US","Uruguay":"UY","Usbekistan":"UZ","Vatikanstaten":"VA","St. Vincent og Grenadinene":"VC","Venezuela":"VE","De britiske jomfruÃ¸yene":"VG","De amerikanske jomfruÃ¸yene":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis og Futuna":"WF","Samoa":"WS","Jemen":"YE","Mayotte":"YT","SÃ¸r-Afrika":"ZA","Zambia":"ZM","Zimbabwe":"ZW","ukjent omrÃ¥de":"ZZ"};
ilib.data.ctrynames_ne = {"à¤à¤¶à¤¿à¤¯à¤¾":"142","à¤à¥à¤¨à¥à¤¦à¥à¤°à¥à¤¯ à¤à¤¶à¤¿à¤¯à¤¾":"143","à¤ªà¤¶à¥à¤à¤¿à¤®à¥ à¤à¤¶à¤¿à¤¯à¤¾":"145","à¤¯à¥à¤°à¥à¤ª":"150","à¤ªà¥à¤°à¥à¤µà¥ à¤¯à¥à¤°à¥à¤ª":"151","à¤à¤¤à¥à¤¤à¤°à¥ à¤¯à¥à¤°à¥à¤ª":"154","à¤ªà¤¶à¥à¤à¤¿à¤®à¥ à¤¯à¥à¤°à¥à¤ª":"155","à¤²à¥à¤¯à¤¾à¤à¤¿à¤¨ à¤à¤®à¥à¤°à¤¿à¤à¤¾":"419","à¤µà¤¿à¤¶à¥à¤µ":"001","à¤à¤«à¥à¤°à¤¿à¤à¤¾":"002","à¤à¤¤à¥à¤¤à¤° à¤à¤®à¥à¤°à¤¿à¤à¤¾":"003","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¤®à¥à¤°à¤¿à¤à¤¾":"005","à¤à¤¸à¤¨à¤¿à¤¯à¤¾":"009","à¤ªà¤¶à¥à¤à¤¿à¤®à¥ à¤à¤«à¥à¤°à¤¿à¤à¤¾":"011","à¤à¥à¤¨à¥à¤¦à¥à¤°à¥à¤¯ à¤à¤®à¥à¤°à¤¿à¤à¤¾":"013","à¤ªà¥à¤°à¥à¤µà¥ à¤à¤«à¥à¤°à¤¿à¤à¤¾":"014","à¤à¤¤à¥à¤¤à¤°à¥ à¤à¤«à¥à¤°à¤¿à¤à¤¾":"015","à¤®à¤§à¥à¤¯ à¤à¤«à¥à¤°à¤¿à¤à¤¾":"017","à¤¦à¤à¥à¤·à¤¿à¤£à¥ à¤à¤«à¥à¤°à¤¿à¤à¤¾":"018","à¤à¤®à¥à¤°à¤¿à¤à¤¾à¤¸":"019","à¤à¤¤à¥à¤¤à¤°à¥ à¤à¤®à¥à¤°à¤¿à¤à¤¾":"021","à¤à¥à¤¯à¤¾à¤°à¤¿à¤¬à¤¿à¤à¤¨":"029","à¤ªà¥à¤°à¥à¤µà¥ à¤à¤¶à¤¿à¤¯à¤¾":"030","à¤¦à¤à¥à¤·à¤¿à¤£à¥ à¤à¤¶à¤¿à¤¯à¤¾":"034","à¤¦à¤à¥à¤·à¤¿à¤£ à¤ªà¥à¤°à¥à¤µà¥ à¤à¤¶à¤¿à¤¯à¤¾":"035","à¤¦à¤à¥à¤·à¤¿à¤£à¥ à¤¯à¥à¤°à¥à¤ª":"039","à¤à¤·à¥à¤à¥à¤°à¥à¤²à¤¿à¤¯à¤¾ à¤° à¤¨à¥à¤¯à¥à¤à¤¿à¤²à¥à¤¯à¤¾à¤£à¥à¤¡":"053","à¤®à¥à¤²à¤¾à¤¨à¥à¤¸à¤¿à¤¯à¤¾":"054","à¤®à¤¾à¤à¤à¥à¤°à¥à¤¨à¥à¤¸à¤¿à¤¯à¤¾à¤²à¥ à¤à¥à¤·à¥à¤¤à¥à¤°":"057","à¤ªà¥à¤²à¤¿à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"061","à¤à¤¸à¥à¤à¥à¤¨à¥à¤¸à¤¨ à¤à¤¾à¤à¥":"AC","à¤à¤¨à¥à¤¡à¥à¤°à¥à¤°à¤¾":"AD","à¤¸à¤à¤¯à¥à¤à¥à¤¤ à¤à¤°à¤¬ à¤à¤®à¤¿à¤°à¤¾à¤à¥à¤¸":"AE","à¤à¤«à¥à¤à¤¾à¤¨à¤¿à¤·à¥à¤¤à¤¾à¤¨":"AF","à¤à¤¨à¥à¤à¤¿à¤à¥à¤ à¤° à¤¬à¤¾à¤°à¤¬à¥à¤¡à¤¾":"AG","à¤à¤à¥à¤à¥à¤à¤²à¤¾":"AI","à¤à¤²à¥à¤¬à¤¾à¤¨à¤¿à¤¯à¤¾":"AL","à¤à¤°à¥à¤®à¥à¤¨à¤¿à¤¯à¤¾":"AM","à¤¨à¥à¤¦à¤°à¤²à¥à¤¯à¤¾à¤£à¥à¤¡à¥à¤¸ à¤à¤£à¥à¤à¤¿à¤²à¤¿à¤¸":"AN","à¤à¤à¥à¤à¥à¤²à¤¾":"AO","à¤à¤¨à¥à¤à¤¾à¤°à¤¤à¤¿à¤à¤¾":"AQ","à¤à¤°à¥à¤à¥à¤£à¥à¤à¤¿à¤¨à¤¾":"AR","à¤à¤®à¥à¤°à¤¿à¤à¥ à¤¸à¤®à¥à¤":"AS","à¤à¤·à¥à¤à¥à¤°à¤¿à¤¯à¤¾":"AT","à¤à¤·à¥à¤à¥à¤°à¥à¤²à¤¿à¤¯à¤¾":"AU","à¤à¤°à¥à¤¬à¤¾":"AW","à¤à¤²à¤¾à¤¨à¥à¤¡ à¤à¤¾à¤ªà¥":"AX","à¤à¤à¤°à¤¬à¥à¤à¤¾à¤¨":"AZ","à¤¬à¥à¤¸à¥à¤¨à¤¿à¤¯à¤¾ à¤° à¤¹à¤°à¥à¤à¤à¥à¤­à¤¿à¤¨à¤¿à¤¯à¤¾":"BA","à¤¬à¤¾à¤°à¥à¤¬à¤¾à¤¡à¥à¤¸":"BB","à¤¬à¤à¥à¤à¤²à¤¾à¤¦à¥à¤¶":"BD","à¤¬à¥à¤²à¥à¤à¤¿à¤¯à¤®":"BE","à¤¬à¤°à¥à¤à¤¿à¤¨à¤¾ à¤«à¤¾à¤¸à¥":"BF","à¤¬à¤²à¥à¤à¥à¤°à¤¿à¤¯à¤¾":"BG","à¤¬à¤¾à¤¹à¥à¤°à¥à¤¨":"BH","à¤¬à¥à¤°à¥à¤£à¥à¤¡à¥":"BI","à¤¬à¥à¤¨à¤¿à¤¨":"BJ","à¤¸à¥à¤¨à¥à¤ à¤¬à¤¾à¤°à¥à¤¥à¤¾à¤²à¥à¤®à¥":"BL","à¤¬à¤°à¥à¤®à¥à¤¡à¤¾":"BM","à¤¬à¥à¤°à¥à¤¨à¤¾à¤":"BN","à¤¬à¥à¤²à¤¿à¤­à¤¿à¤¯à¤¾":"BO","à¤à¥à¤¯à¤¾à¤°à¤¿à¤µà¤¿à¤¯à¤¨ à¤¨à¥à¤¦à¤°à¤²à¥à¤¯à¤¾à¤£à¥à¤¡à¥à¤¸":"BQ","à¤¬à¥à¤°à¤¾à¤à¤¿à¤²":"BR","à¤¬à¤¹à¤¾à¤®à¤¾à¤¸":"BS","à¤­à¥à¤à¤¾à¤¨":"BT","à¤¬à¥à¤­à¥à¤ à¤à¤¾à¤ªà¥":"BV","à¤¬à¥à¤à¥à¤¸à¥à¤µà¤¾à¤¨à¤¾":"BW","à¤¬à¥à¤²à¤¾à¤°à¥à¤¸":"BY","à¤¬à¥à¤²à¤¿à¤":"BZ","à¤à¥à¤¯à¤¾à¤¨à¤¾à¤¡à¤¾":"CA","à¤à¥à¤à¥à¤¸ [à¤à¤¿à¤²à¤¿à¤à¤] à¤à¤¾à¤ªà¥":"CC","à¤à¥à¤à¥à¤à¥-à¤à¤¿à¤¨à¥à¤¶à¤¾à¤¸à¤¾":"CD","à¤à¥à¤¨à¥à¤¦à¥à¤°à¥à¤¯ à¤à¤«à¥à¤°à¤¿à¤à¥ à¤à¤£à¤¤à¤¨à¥à¤¤à¥à¤°":"CF","à¤à¥à¤à¥à¤à¥ - à¤¬à¥à¤°à¤¾à¤à¥à¤à¤¾à¤­à¤¿à¤²à¥à¤²à¥":"CG","à¤¸à¥à¤µà¤¿à¤à¤°à¤²à¥à¤¯à¤¾à¤£à¥à¤¡":"CH","à¤à¤à¤­à¥à¤°à¥ à¤à¥à¤·à¥à¤":"CI","à¤à¥à¤ à¤à¤¾à¤ªà¥":"CK","à¤à¤¿à¤²à¥":"CL","à¤à¥à¤¯à¤¾à¤®à¥à¤°à¥à¤¨":"CM","à¤à¥à¤¨":"CN","à¤à¥à¤²à¥à¤®à¥à¤¬à¤¿à¤¯à¤¾":"CO","à¤à¥à¤²à¤¿à¤ªà¥à¤ªà¥à¤°à¥à¤à¤¨ à¤à¤¾à¤ªà¥":"CP","à¤à¥à¤·à¥à¤à¤¾à¤°à¤¿à¤à¤¾":"CR","à¤à¥à¤¯à¥à¤¬à¤¾":"CU","à¤à¥à¤ª à¤­à¤°à¥à¤¡à¥":"CV","à¤à¥à¤°à¤¾à¤à¤¾à¤":"CW","à¤à¥à¤°à¤¿à¤·à¥à¤à¤®à¤¸ à¤à¤¾à¤ªà¥":"CX","à¤¸à¤¾à¤à¤ªà¥à¤°à¤¸":"CY","à¤à¥à¤ à¤à¤£à¤¤à¤¨à¥à¤¤à¥à¤°":"CZ","à¤à¤°à¥à¤®à¤¨à¥":"DE","à¤¡à¤¿à¤¯à¤à¥ à¤à¤¾à¤°à¥à¤¸à¤¿à¤¯à¤¾":"DG","à¤¡à¤¿à¤à¤¿à¤¬à¥à¤à¥":"DJ","à¤¡à¥à¤¨à¥à¤®à¤¾à¤°à¥à¤":"DK","à¤¡à¥à¤®à¤¿à¤¨à¤¿à¤à¤¾":"DM","à¤¡à¥à¤®à¤¿à¤¨à¤¿à¤à¤¨ à¤à¤£à¤¤à¤¨à¥à¤¤à¥à¤°":"DO","à¤à¤²à¥à¤à¥à¤°à¤¿à¤¯à¤¾":"DZ","à¤¸à¤¿à¤à¤à¤¾ à¤° à¤®à¥à¤²à¤¿à¤²à¤¾":"EA","à¤à¤à¥à¤µà¤¡à¥à¤°":"EC","à¤à¤¸à¥à¤à¥à¤¨à¤¿à¤¯à¤¾":"EE","à¤à¤à¤¿à¤ªà¥à¤":"EG","à¤ªà¤¶à¥à¤à¤¿à¤®à¥ à¤¸à¤¾à¤¹à¤¾à¤°à¤¾":"EH","à¤à¤°à¤¿à¤¤à¥à¤°à¤¿à¤¯à¤¾":"ER","à¤¸à¥à¤ªà¥à¤¨":"ES","à¤à¤¥à¥à¤ªà¤¿à¤¯à¤¾":"ET","à¤¯à¥à¤°à¥à¤ªà¤¿à¤¯à¤¨ à¤¯à¥à¤¨à¤¿à¤¯à¤¨":"EU","à¤«à¤¿à¤¨à¥à¤²à¥à¤¯à¤¾à¤£à¥à¤¡":"FI","à¤«à¤¿à¤à¥":"FJ","à¤«à¤à¤²à¥à¤¯à¤¾à¤£à¥à¤¡ à¤à¤¾à¤ªà¥":"FK","à¤®à¤¾à¤à¤à¥à¤°à¥à¤¨à¥à¤¸à¤¿à¤¯à¤¾":"FM","à¤«à¤¾à¤°à¥à¤° à¤à¤¾à¤ªà¥":"FO","à¤«à¥à¤°à¤¾à¤¨à¥à¤¸":"FR","à¤à¤¾à¤µà¥à¤¨":"GA","à¤¸à¤à¤¯à¥à¤à¥à¤¤ à¤à¤§à¤¿à¤°à¤¾à¤à¥à¤¯":"GB","à¤à¥à¤°à¥à¤¨à¤¾à¤¡à¤¾":"GD","à¤à¥à¤°à¥à¤à¤¿à¤¯à¤¾":"GE","à¤«à¥à¤°à¤¾à¤¨à¥à¤¸à¥à¤²à¥ à¤à¤¾à¤¯à¤¨à¤¾":"GF","à¤à¥à¤à¤°à¥à¤¨à¤¸à¥":"GG","à¤à¤¾à¤¨à¤¾":"GH","à¤à¤¿à¤¬à¥à¤°à¤¾à¤²à¥à¤à¤¾à¤°":"GI","à¤à¥à¤°à¤¿à¤¨à¤²à¥à¤¯à¤¾à¤£à¥à¤¡":"GL","à¤à¤¾à¤®à¥à¤µà¤¿à¤¯à¤¾":"GM","à¤à¤¿à¤¨à¥":"GN","à¤à¥à¤µà¤¾à¤¡à¥à¤²à¥à¤ª":"GP","à¤­à¥-à¤®à¤§à¥à¤¯à¥à¤¯ à¤à¤¿à¤¨à¥":"GQ","à¤à¥à¤°à¤¿à¤¶":"GR","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¤°à¥à¤à¤¿à¤¯à¤¾ à¤° à¤¦à¤à¥à¤·à¤¿à¤£ à¤¸à¥à¤¯à¤¾à¤¨à¥à¤¡à¤µà¥à¤ à¤à¤¾à¤ªà¥à¤¹à¤°à¥":"GS","à¤à¥à¤µà¤¾à¤à¥à¤®à¤¾à¤²à¤¾":"GT","à¤à¥à¤µà¤¾à¤®":"GU","à¤à¤¿à¤¨à¥-à¤¬à¤¿à¤¸à¤¾à¤":"GW","à¤à¥à¤¯à¤¾à¤¨à¤¾":"GY","à¤¹à¤à¤à¤ à¤à¤¿à¤¨à¤¿à¤à¤¯à¤¾ à¤¸à¤®à¤¾à¤à¤µà¤¾à¤¦à¥ à¤¸à¥à¤µà¤¾à¤¯à¤¤à¥à¤¤ à¤à¥à¤·à¥à¤¤à¥à¤°":"HK","à¤¹à¤°à¥à¤¡ à¤à¤¾à¤ªà¥ à¤° à¤®à¥à¤¯à¤¾à¤à¤¡à¥à¤¨à¤¾à¤²à¥à¤¡ à¤à¤¾à¤ªà¥":"HM","à¤¹à¤¨à¥à¤¡à¥à¤°à¤¾à¤¸":"HN","à¤à¥à¤°à¥à¤à¤¶à¤¿à¤¯à¤¾":"HR","à¤¹à¥à¤à¥":"HT","à¤¹à¤à¥à¤à¥à¤°à¥":"HU","à¤à¥à¤¯à¤¾à¤¨à¤¾à¤°à¥ à¤à¤¾à¤ªà¥à¤¹à¤°à¥":"IC","à¤à¤¨à¥à¤¡à¥à¤¨à¥à¤¶à¤¿à¤¯à¤¾":"ID","à¤à¤à¤°à¤²à¥à¤¯à¤¾à¤£à¥à¤¡":"IE","à¤à¤à¥à¤°à¤¾à¤¯à¤²":"IL","à¤à¤à¤à¥à¤²à¥ à¤à¤«à¥ à¤®à¥à¤¯à¤¾à¤¨":"IM","à¤­à¤¾à¤°à¤¤":"IN","à¤¬à¥à¤²à¤¾à¤¯à¤¤à¥ à¤¹à¤¿à¤¨à¥à¤¦ à¤®à¤¹à¤¾à¤¸à¤¾à¤à¤° à¤à¥à¤·à¥à¤¤à¥à¤°":"IO","à¤à¤°à¤¾à¤":"IQ","à¤à¤°à¤¾à¤¨":"IR","à¤à¤à¤¸à¥à¤²à¥à¤¯à¤¾à¤£à¥à¤¡":"IS","à¤à¤à¤¾à¤²à¥":"IT","à¤à¤°à¥à¤¸à¥":"JE","à¤à¤®à¤¾à¤à¤à¤¾":"JM","à¤à¥à¤°à¥à¤¡à¤¨":"JO","à¤à¤¾à¤ªà¤¾à¤¨":"JP","à¤à¥à¤¨à¥à¤¯à¤¾":"KE","à¤à¤¿à¤°à¥à¤à¤¿à¤¸à¥à¤¥à¤¾à¤¨":"KG","à¤à¤®à¥à¤¬à¥à¤¡à¤¿à¤¯à¤¾":"KH","à¤à¤¿à¤°à¤¿à¤¬à¤¾à¤à¥":"KI","à¤à¥à¤®à¥à¤°à¥à¤¸":"KM","à¤¸à¥à¤¨à¥à¤ à¤à¤¿à¤à¥à¤¸ à¤° à¤¨à¥à¤­à¤¿à¤¸":"KN","à¤à¤¤à¥à¤¤à¤° à¤à¥à¤°à¤¿à¤¯à¤¾":"KP","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¥à¤°à¤¿à¤¯à¤¾":"KR","à¤à¥à¤µà¥à¤¤":"KW","à¤à¥à¤¯à¤®à¤¾à¤¨ à¤à¤¾à¤ªà¥":"KY","à¤à¤¾à¤à¤¾à¤à¤¸à¥à¤¥à¤¾à¤¨":"KZ","à¤²à¤¾à¤à¤¸":"LA","à¤²à¥à¤¬à¤¨à¥à¤¨":"LB","à¤¸à¥à¤¨à¥à¤ à¤²à¥à¤¸à¤¿à¤¯à¤¾":"LC","à¤²à¤¿à¤à¤à¤à¥à¤¨à¥à¤¸à¥à¤à¤¾à¤à¤¨":"LI","à¤¶à¥à¤°à¥à¤²à¤à¥à¤à¤¾":"LK","à¤²à¤¾à¤à¤¬à¥à¤°à¤¿à¤¯à¤¾":"LR","à¤²à¥à¤¸à¥à¤¥à¥":"LS","à¤²à¤¿à¤¥à¥à¤à¤¨à¤¿à¤¯à¤¾":"LT","à¤²à¤à¥à¤à¥à¤®à¤¬à¤°à¥à¤":"LU","à¤²à¤¾à¤à¥à¤­à¤¿à¤¯à¤¾":"LV","à¤²à¤¿à¤¬à¤¿à¤¯à¤¾":"LY","à¤®à¥à¤°à¥à¤à¥à¤à¥":"MA","à¤®à¥à¤¨à¤¾à¤à¥":"MC","à¤®à¤¾à¤²à¥à¤¡à¥à¤­à¤¾":"MD","à¤®à¥à¤¨à¥à¤à¥à¤¨à¥à¤à¥à¤°à¥":"ME","à¤¸à¥à¤¨à¥à¤ à¤®à¤¾à¤°à¥à¤à¤¿à¤¨":"MF","à¤®à¤¡à¤¾à¤à¤¾à¤¸à¥à¤à¤°":"MG","à¤®à¤¾à¤°à¥à¤¶à¤² à¤à¤¾à¤ªà¥":"MH","à¤®à¥à¤¯à¤¾à¤à¥à¤¡à¥à¤¨à¤¿à¤¯à¤¾":"MK","à¤®à¤¾à¤²à¥":"ML","à¤®à¥à¤¯à¤¾à¤¨à¥à¤®à¤¾à¤° [à¤¬à¤°à¥à¤®à¤¾]":"MM","à¤®à¤à¥à¤à¥à¤²à¤¿à¤¯à¤¾":"MN","à¤®à¤à¤¾à¤µà¥ à¤à¤¿à¤¨à¤¿à¤à¤¯à¤¾ à¤¸à¥à¤µà¤¶à¤¾à¤¸à¤¿à¤¤ à¤à¥à¤·à¥à¤¤à¥à¤°":"MO","à¤à¤¤à¥à¤¤à¤°à¥ à¤®à¤¾à¤°à¤¿à¤à¤¨à¤¾ à¤à¤¾à¤ªà¥":"MP","à¤®à¤¾à¤°à¥à¤à¤¿à¤¨à¤¿à¤":"MQ","à¤®à¤¾à¤à¤°à¤¿à¤à¤¾à¤¨à¤¿à¤¯à¤¾":"MR","à¤®à¥à¤¨à¥à¤à¤¸à¥à¤°à¥à¤°à¤¾à¤":"MS","à¤®à¤¾à¤²à¥à¤à¤¾":"MT","à¤®à¤¾à¤à¤°à¤¿à¤à¤¸":"MU","à¤®à¤¾à¤²à¥à¤¦à¤¿à¤­à¥à¤¸":"MV","à¤®à¤¾à¤²à¤¾à¤µà¥":"MW","à¤®à¥à¤à¥à¤¸à¤¿à¤à¥":"MX","à¤®à¤²à¥à¤¸à¤¿à¤¯à¤¾":"MY","à¤®à¥à¤à¤¾à¤®à¥à¤¬à¤¿à¤":"MZ","à¤¨à¤¾à¤®à¤¿à¤¬à¤¿à¤¯à¤¾":"NA","à¤¨à¤¯à¤¾à¤ à¤à¤¾à¤²à¥à¤¡à¥à¤¨à¤¿à¤¯à¤¾":"NC","à¤¨à¤¾à¤à¤à¤°":"NE","à¤¨à¥à¤°à¤«à¥à¤²à¥à¤ à¤à¤¾à¤ªà¥":"NF","à¤¨à¤¾à¤à¤à¥à¤°à¤¿à¤¯à¤¾":"NG","à¤¨à¤¿à¤à¤¾à¤°à¤¾à¤à¥à¤µà¤¾":"NI","à¤¨à¥à¤¦à¤°à¤²à¥à¤¯à¤¾à¤£à¥à¤¡à¥à¤¸":"NL","à¤¨à¤°à¥à¤µà¥":"NO","à¤¨à¥à¤ªà¤¾à¤²":"NP","à¤¨à¤¾à¤à¤°à¥":"NR","à¤¨à¤¿à¤¯à¥à¤":"NU","à¤¨à¥à¤¯à¥à¤à¤¿à¤²à¥à¤¯à¤¾à¤£à¥à¤¡":"NZ","à¤à¤®à¤¨":"OM","à¤ªà¤¨à¤¾à¤®à¤¾":"PA","à¤ªà¥à¤°à¥":"PE","à¤«à¥à¤°à¤¾à¤¨à¥à¤¸à¥à¤²à¥ à¤ªà¥à¤²à¤¿à¤¨à¥à¤¸à¤¿à¤¯à¤¾":"PF","à¤ªà¤ªà¥à¤ à¤¨à¥à¤¯à¥ à¤à¤¾à¤à¤¨à¤¿à¤¯à¤¾":"PG","à¤«à¤¿à¤²à¤¿à¤ªà¤¿à¤¨à¥à¤¸":"PH","à¤ªà¤¾à¤à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"PK","à¤ªà¥à¤²à¥à¤¯à¤¾à¤£à¥à¤¡":"PL","à¤¸à¥à¤¨à¥à¤ à¤ªà¤¿à¤°à¥à¤°à¥ à¤° à¤®à¤¿à¤à¥à¤à¥à¤²à¥à¤¨":"PM","à¤ªà¤¿à¤à¤à¤¾à¤à¤°à¥à¤¨ à¤à¤¾à¤ªà¥":"PN","à¤ªà¥à¤¯à¥à¤°à¥à¤à¥à¤°à¤¿à¤à¥":"PR","à¤ªà¥à¤¯à¤¾à¤²à¥à¤¸à¥à¤à¤¨à¥ à¤­à¥-à¤­à¤¾à¤à¤¹à¤°à¥":"PS","à¤ªà¥à¤°à¥à¤¤à¥à¤à¤²":"PT","à¤ªà¤²à¤¾à¤":"PW","à¤ªà¥à¤¯à¤¾à¤°à¤¾à¤à¥à¤¯à¥":"PY","à¤à¤¤à¤¾à¤°":"QA","à¤¬à¤¾à¤¹à¥à¤¯ à¤à¤¸à¤¨à¤¿à¤¯à¤¾":"QO","à¤°à¤¿à¤¯à¥à¤¨à¤¿à¤¯à¤¨":"RE","à¤°à¥à¤®à¤¾à¤¨à¤¿à¤¯à¤¾":"RO","à¤¸à¤°à¥à¤¬à¤¿à¤¯à¤¾":"RS","à¤°à¥à¤¸":"RU","à¤°à¤µà¤¾à¤£à¥à¤¡à¤¾":"RW","à¤¸à¤¾à¤à¤¦à¥ à¤à¤°à¤¬":"SA","à¤¸à¥à¤²à¥à¤®à¥à¤¨ à¤à¤¾à¤ªà¥":"SB","à¤¸à¥à¤à¥à¤²à¥à¤¸":"SC","à¤¸à¥à¤¡à¤¾à¤¨":"SD","à¤¸à¥à¤µà¤¿à¤¡à¥à¤¨":"SE","à¤¸à¤¿à¤à¥à¤à¤¾à¤ªà¥à¤°":"SG","à¤¸à¥à¤¨à¥à¤ à¤¹à¥à¤²à¥à¤¨à¤¾":"SH","à¤¸à¥à¤²à¥à¤­à¥à¤¨à¤¿à¤¯à¤¾":"SI","à¤¸à¤­à¤¾à¤²à¥à¤¬à¤¾à¤°à¥à¤¡ à¤° à¤à¤¾à¤¨ à¤®à¤¾à¤¯à¥à¤¨":"SJ","à¤¸à¥à¤²à¥à¤­à¤¾à¤à¤¿à¤¯à¤¾":"SK","à¤¸à¤¿à¤à¤°à¥à¤°à¤¾ à¤²à¤¿à¤à¤¨":"SL","à¤¸à¤¾à¤¨à¥ à¤®à¤¾à¤°à¤¿à¤¨à¥":"SM","à¤¸à¥à¤¨à¥à¤à¤¾à¤²":"SN","à¤¸à¥à¤®à¤¾à¤²à¤¿à¤¯à¤¾":"SO","à¤¸à¥à¤°à¤¿à¤¨à¥à¤®":"SR","à¤¦à¤à¥à¤·à¤¿à¤£à¥ à¤¸à¥à¤¡à¤¾à¤¨":"SS","à¤¸à¤¾à¤ à¤à¥à¤®à¥ à¤° à¤ªà¥à¤°à¤¿à¤¨à¥à¤¸à¤¿à¤ª":"ST","à¤à¤²à¥ à¤¸à¤¾à¤²à¥à¤­à¤¾à¤¡à¥à¤°":"SV","à¤¸à¤¿à¤¨à¥à¤ à¤®à¤¾à¤°à¥à¤à¥à¤¨":"SX","à¤¸à¤¿à¤°à¤¿à¤¯à¤¾":"SY","à¤¸à¥à¤µà¤¾à¤à¤¿à¤²à¥à¤¯à¤¾à¤£à¥à¤¡":"SZ","à¤à¥à¤°à¤¿à¤¸à¥à¤à¤¾à¤¨ à¤¡à¤¾ à¤à¥à¤¨à¥à¤¹à¤¾":"TA","à¤¤à¥à¤°à¥à¤ à¤° à¤à¤¾à¤à¤à¥à¤¸ à¤à¤¾à¤ªà¥":"TC","à¤à¤¾à¤¡":"TD","à¤«à¥à¤°à¤¾à¤¨à¥à¤¸à¥à¤²à¥ à¤¦à¤à¥à¤·à¤¿à¤£à¥ à¤à¥à¤·à¥à¤¤à¥à¤°":"TF","à¤à¥à¤à¥":"TG","à¤¥à¤¾à¤à¤²à¥à¤¯à¤¾à¤£à¥à¤¡":"TH","à¤¤à¤¾à¤à¤¿à¤à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"TJ","à¤¤à¥à¤à¥":"TK","à¤à¤¿à¤®à¥à¤°-à¤²à¥à¤¸à¥à¤à¥":"TL","à¤¤à¥à¤°à¥à¤à¤®à¥à¤¨à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"TM","à¤à¥à¤¨à¤¿à¤¸à¤¿à¤¯à¤¾":"TN","à¤à¥à¤à¤à¤¾":"TO","à¤à¤°à¥à¤à¥":"TR","à¤¤à¥à¤°à¤¿à¤¨à¤¿à¤¡à¤¾à¤¡ à¤° à¤¤à¥à¤¬à¤¾à¤à¥":"TT","à¤¤à¥à¤­à¤¾à¤²à¥":"TV","à¤¤à¤¾à¤à¤µà¤¾à¤¨":"TW","à¤¤à¤¾à¤¨à¥à¤à¤¾à¤¨à¤¿à¤¯à¤¾":"TZ","à¤¯à¥à¤à¥à¤°à¥à¤¨":"UA","à¤¯à¥à¤à¤¾à¤£à¥à¤¡à¤¾":"UG","à¤¸à¤à¤¯à¥à¤à¥à¤¤ à¤°à¤¾à¤à¥à¤¯ à¤¬à¤¾à¤¹à¥à¤¯ à¤à¤¾à¤ªà¥":"UM","à¤¸à¤à¤¯à¥à¤à¥à¤¤ à¤°à¤¾à¤à¥à¤¯":"US","à¤¯à¥à¤°à¥à¤à¥à¤":"UY","à¤à¤à¥à¤¬à¥à¤à¤¿à¤¸à¥à¤¤à¤¾à¤¨":"UZ","à¤­à¥à¤à¤¿à¤à¤¨ à¤¸à¤¿à¤à¥":"VA","à¤¸à¥à¤¨à¥à¤ à¤­à¤¿à¤¨à¥à¤¸à¥à¤¨à¥à¤ à¤° à¤à¥à¤°à¥à¤¨à¤¾à¤¡à¤¿à¤¨à¥à¤¸":"VC","à¤­à¥à¤¨à¥à¤à¥à¤à¤²à¤¾":"VE","à¤¬à¥à¤²à¤¾à¤¯à¤¤à¥ à¤­à¤°à¥à¤à¤¿à¤¨ à¤à¤¾à¤ªà¥":"VG","à¤¸à¤à¤¯à¥à¤à¥à¤¤ à¤°à¤¾à¤à¥à¤¯ à¤­à¤°à¥à¤à¤¿à¤¨ à¤à¤¾à¤ªà¥":"VI","à¤­à¤¿à¤à¤¤à¤¨à¤¾à¤®":"VN","à¤­à¤¾à¤¨à¥à¤à¤¤à¥":"VU","à¤µà¤¾à¤²à¤¿à¤¸ à¤° à¤«à¥à¤à¥à¤¨à¤¾":"WF","à¤¸à¤¾à¤®à¥à¤":"WS","à¤¯à¥à¤®à¥à¤¨":"YE","à¤®à¤¾à¤¯à¥à¤à¥à¤":"YT","à¤¦à¤à¥à¤·à¤¿à¤£ à¤à¤«à¥à¤°à¤¿à¤à¤¾":"ZA","à¤à¤¾à¤®à¥à¤¬à¤¿à¤¯à¤¾":"ZM","à¤à¤¿à¤®à¥à¤¬à¤¾à¤¬à¥":"ZW","à¤à¤ªà¤°à¤¿à¤à¤¿à¤¤ à¤à¥à¤·à¥à¤¤à¥à¤°":"ZZ"};
ilib.data.ctrynames_nl = {"generated":false,"albaniÃ«":"AL","algerije":"DZ","amerikaans samoa":"AS","antigua en barbuda":"AG","argentiniÃ«":"AR","armeniÃ«":"AM","australiÃ«":"AU","oostenrijk":"AT","britse maagdeneilanden":"VG","bahamaâs":"BS","belgiÃ«":"BE","bosniÃ« en herzegovina":"BA","braziliÃ«":"BR","brits territorium in de indische oceaan":"IO","bulgarije":"BG","cambodja":"KH","kameroen":"CM","kaapverdiÃ«":"CV","kaaimaneilanden":"KY","centraal-afrikaanse republiek":"CF","tsjaad":"TD","chili":"CL","comoren":"KM","cookeilanden":"CK","kroatiÃ«":"HR","tsjechiÃ«":"CZ","ivoorkust":"CI","d.r.c.":"CD","democratische republiek congo":"CD","denemarken":"DK","dominicaanse republiek":"DO","oost-timor":"TL","egypte":"EG","equatoriaal guinea":"GQ","estland":"EE","ethiopiÃ«":"ET","falklandeilanden":"FK","faroÃ«reilanden":"FO","federatieve staten van micronesiÃ«":"FM","voormalige joegoslavische republiek van macedoniÃ«":"MK","frankrijk":"FR","frans guyana":"GF","frans polynesiÃ«":"PF","duitsland":"DE","griekenland":"GR","groenland":"GL","guinee":"GN","guinee-bissau":"GW","haÃ¯ti":"HT","hongarije":"HU","ijsland":"IS","indonesiÃ«":"ID","irak":"IQ","ierland":"IE","israÃ«l":"IL","italiÃ«":"IT","jordaniÃ«":"JO","kenia":"KE","koeweit":"KW","kirgiziÃ«":"KG","letland":"LV","libanon":"LB","libiÃ«":"LY","liechtenstein":"LI","litouwen":"LT","luxemburg":"LU","madagaskar":"MG","maleisiÃ«":"MY","malediven":"MV","marianen":"MP","marshalleilanden":"MH","mauritaniÃ«":"MR","micronesiÃ«":"FM","moldaviÃ«":"MD","mongoliÃ«":"MN","marokko":"MA","namibiÃ«":"NA","nederland":"NL","nederlandse antillen":"AN","nieuw caledoniÃ«":"NC","nieuw-zeeland":"NZ","norfolkeiland":"NF","noord-korea":"KP","noordelijke marianen":"MP","noorwegen":"NO","palestijnse autoriteit":"PS","papoea nieuw guinea":"PG","volksrepubliek china":"CN","filipijnen":"PH","polen":"PL","republiek china":"TW","republiek ierland":"IE","roemeniÃ«":"RO","rusland":"RU","saint kitts en nevis":"KN","saint pierre en miquelon":"PM","saint vincent en de grenadines":"VC","saoedi-arabiÃ«":"SA","serviÃ«":"RS","seychellen":"SC","slowakije":"SK","sloveniÃ«":"SI","solomoneilanden":"SB","somaliÃ«":"SO","zuid-afrika":"ZA","zuid-korea":"KR","spanje":"ES","st. pierre en miquelon":"PM","soedan":"SD","zweden":"SE","zwitserland":"CH","syriÃ«":"SY","sÃ£o tomÃ© et prÃ­ncipe":"ST","de bahamaâs":"BS","gambia":"GM","turks- en caicoseilanden":"TC","amerikaanse maagdeneilanden":"VI","trinidad en tobago":"TT","tunesiÃ«":"TN","turkije":"TR","v.a.e.":"AE","oeganda":"UG","oekraÃ¯ne":"UA","verenigde arabische emiraten":"AE","verenigd koninkrijk":"GB","oezbekistan":"UZ","vaticaanstad":"VA","wallis en futuna":"WF","jemen":"YE","afghanistan":"AF","alandeilanden":"AX","andorra":"AD","angola":"AO","anguilla":"AI","antigua":"AG","aruba":"AW","ascension":"SH","azerbaijan":"AZ","bahrain":"BH","bangladesh":"BD","barbados":"BB","barbuda":"AG","belarus":"BY","belize":"BZ","benin":"BJ","bermuda":"BM","bhutan":"BT","bolivariaanse republiek venezuela":"VE","bolivia":"BO","bosniÃ«":"BA","botswana":"BW","bouveteiland":"BV","brunei":"BN","brunei darussalam":"BN","burkina faso":"BF","burundi":"BI","c.a.r.":"CF","caicoseilanden":"TC","canada":"CA","kaap verdiÃ«":"CV","kaaiman":"KY","china":"CN","christmaseilanden":"CX","cocos- en keelingeilanden":"CC","cocoseilanden":"CC","colombia":"CO","congo":"CD","congo, democratische republiek":"CD","costa rica":"CR","cuba":"CU","cyprus":"CY","d.r.":"DO","democratische volksrepubliek korea":"KP","djibouti":"DJ","dominica":"DM","ecuador":"EC","el salvador":"SV","eritrea":"ER","f.y.r.o.m.":"MK","faroe-eilanden":"FO","faroe":"FO","fiji":"FJ","finland":"FI","frans territorium in de stille oceaan":"TF","futuna":"WF","fyrom":"MK","gabon":"GA","georgiÃ«":"GE","ghana":"GH","gibraltar":"GI","groot-brittanniÃ«":"GB","grenada":"GD","grenadines":"VC","guadeloupe":"GP","guam":"GU","guatemala":"GT","guernsey":"GG","guyana":"GY","heard- en mcdonaldeilanden":"HM","heardeiland":"HM","heardeiland en mcdonaldeilanden":"HM","herzegovina":"BA","holland":"NL","heilige stoel":"VA","honduras":"HN","hong kong":"HK","india":"IN","iran":"IR","iran, islamitische republiek":"IR","islamitische republiek iran":"IR","eiland man":"IM","jamaica":"JM","jan mayen":"SJ","japan":"JP","jersey":"JE","kazakhstan":"KZ","kiribati":"KI","korea":"KR","korea, democratische volksrepubliek":"KP","korea, republiek":"KR","laos, democratische volksrepubliek":"LA","laos":"LA","lesotho":"LS","liberia":"LR","libiÃ«, arabische jamahiriya":"LY","macao":"MO","macedoniÃ«":"MK","macedoniÃ«, voormalige joegoslavische republiek":"MK","madagascar":"MG","malawi":"MW","mali":"ML","malta":"MT","malvinaâs":"FK","marshalls":"MH","martinique":"MQ","mauritius":"MU","mayotte":"YT","mcdonaldeilanden":"HM","mexico":"MX","micronesiÃ«, federatieve staten van":"FM","miquelon":"PM","moldaviÃ«, republiek":"MD","monaco":"MC","montenegro":"ME","montserrat":"MS","mozambique":"MZ","myanmar":"MM","nauru":"NR","nepal":"NP","nevis":"KN","nicaragua":"NI","niger":"NE","nigeria":"NG","oman":"OM","pakistan":"PK","palau":"PW","palestina":"PS","palestijnse gebieden, bezet":"PS","panama":"PA","papoea nieuw-guinea":"PG","paraguay":"PY","peru":"PE","pitcairn":"PN","png":"PG","portugal":"PT","prÃ­ncipe":"ST","puerto rico":"PR","qatar":"QA","republiek korea":"KR","republiek moldaviÃ«":"MD","rÃ©union":"RE","russische federatie":"RU","rwanda":"RW","saint barthÃ©lemy":"BL","saint helena":"SH","saint helena, ascension en tristan da cunha":"SH","saint kitts":"KN","saint lucia":"LC","saint martin":"MF","saint pierre":"PM","saint vincent":"VC","samoa":"WS","san marino":"SM","sÃ£o tomÃ©":"ST","senegal":"SN","sierra leone":"SL","singapore":"SG","zuid-georgiÃ«":"GS","zuid-georgiÃ« en de zuidelijke sandwicheilanden":"GS","zuidelijke sandwicheilanden":"GS","sri lanka":"LK","st. barthÃ©lemy":"BL","st. helena":"SH","st. kitts":"KN","st. lucia":"LC","st. martin":"MF","st. pierre":"PM","st. vincent":"VC","suriname":"SR","svalbard":"SJ","svalbard en jan mayen":"SJ","swaziland":"SZ","syriÃ«, arabische republiek":"SY","taiwan":"TW","tajikistan":"TJ","tanzania":"TZ","tanzania, verenigde republiek":"TZ","thailand":"TH","tobago":"TT","togo":"TG","tokelau":"TK","tonga":"TO","trinidad":"TT","tristan da cunha":"SH","turkmenistan":"TM","turkseilanden":"TC","tuvalu":"TV","v.k.":"GB","v.s.":"US","verenigde republiek van tanzania":"TZ","verenigde staten":"US","kleine afgelegen eilanden van de verenigde staten":"UM","verenigde staten van amerika":"US","uruguay":"UY","vanuatu":"VU","vaticaan":"VA","venezuela":"VE","venezuela, bolivariaanse republiek":"VE","vietnam":"VN","maagdeneilanden, brits":"VG","maagdeneilanden, amerikaans":"VI","wallis":"WF","westelijk sahara":"EH","zambia":"ZM","zimbabwe":"ZW","Ã¥landeilanden":"AX","Ascension":"AC","Andorra":"AD","Verenigde Arabische Emiraten":"AE","Afghanistan":"AF","Antigua en Barbuda":"AG","Anguilla":"AI","AlbaniÃ«":"AL","ArmeniÃ«":"AM","Nederlandse Antillen":"AN","Angola":"AO","Antarctica":"AQ","ArgentiniÃ«":"AR","Amerikaans Samoa":"AS","Oostenrijk":"AT","AustraliÃ«":"AU","Aruba":"AW","Ãlandeilanden":"AX","Azerbeidzjan":"AZ","BosniÃ« en Herzegovina":"BA","Barbados":"BB","Bangladesh":"BD","BelgiÃ«":"BE","Burkina Faso":"BF","Bulgarije":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","Saint BarthÃ©lemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Caribisch Nederland":"BQ","BraziliÃ«":"BR","Bahamaâs":"BS","Bhutan":"BT","Bouveteiland":"BV","Botswana":"BW","Wit-Rusland":"BY","Belize":"BZ","Canada":"CA","Cocoseilanden":"CC","Congo-Kinshasa":"CD","Centraal-Afrikaanse Republiek":"CF","Congo-Brazzaville":"CG","Zwitserland":"CH","Ivoorkust":"CI","Cookeilanden":"CK","Chili":"CL","Kameroen":"CM","China":"CN","Colombia":"CO","Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","KaapverdiÃ«":"CV","CuraÃ§ao":"CW","Christmaseiland":"CX","Cyprus":"CY","TsjechiÃ«":"CZ","Duitsland":"DE","Diego Garcia":"DG","Djibouti":"DJ","Denemarken":"DK","Dominica":"DM","Dominicaanse Republiek":"DO","Algerije":"DZ","Ceuta en Melilla":"EA","Ecuador":"EC","Estland":"EE","Egypte":"EG","Westelijke Sahara":"EH","Eritrea":"ER","Spanje":"ES","EthiopiÃ«":"ET","Europese Unie":"EU","Finland":"FI","Fiji":"FJ","Falklandeilanden":"FK","MicronesiÃ«":"FM","FaerÃ¶er":"FO","Frankrijk":"FR","Gabon":"GA","Verenigd Koninkrijk":"GB","Grenada":"GD","GeorgiÃ«":"GE","Frans-Guyana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","Groenland":"GL","Gambia":"GM","Guinee":"GN","Guadeloupe":"GP","Equatoriaal-Guinea":"GQ","Griekenland":"GR","Zuid-Georgia en Zuidelijke Sandwicheilanden":"GS","Guatemala":"GT","Guam":"GU","Guinee-Bissau":"GW","Guyana":"GY","Hongkong SAR van China":"HK","Heard- en McDonaldeilanden":"HM","Honduras":"HN","KroatiÃ«":"HR","HaÃ¯ti":"HT","Hongarije":"HU","Canarische Eilanden":"IC","IndonesiÃ«":"ID","Ierland":"IE","IsraÃ«l":"IL","Isle of Man":"IM","India":"IN","Britse Gebieden in de Indische Oceaan":"IO","Irak":"IQ","Iran":"IR","IJsland":"IS","ItaliÃ«":"IT","Jersey":"JE","Jamaica":"JM","JordaniÃ«":"JO","Japan":"JP","Kenia":"KE","KirgiziÃ«":"KG","Cambodja":"KH","Kiribati":"KI","Comoren":"KM","Saint Kitts en Nevis":"KN","Noord-Korea":"KP","Zuid-Korea":"KR","Koeweit":"KW","Caymaneilanden":"KY","Kazachstan":"KZ","Laos":"LA","Libanon":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Litouwen":"LT","Luxemburg":"LU","Letland":"LV","LibiÃ«":"LY","Marokko":"MA","Monaco":"MC","MoldaviÃ«":"MD","Montenegro":"ME","Saint-Martin":"MF","Madagaskar":"MG","Marshalleilanden":"MH","MacedoniÃ«":"MK","Mali":"ML","Myanmar":"MM","MongoliÃ«":"MN","Macao SAR van China":"MO","Noordelijke Marianeneilanden":"MP","Martinique":"MQ","MauritaniÃ«":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldiven":"MV","Malawi":"MW","Mexico":"MX","MaleisiÃ«":"MY","Mozambique":"MZ","NamibiÃ«":"NA","Nieuw-CaledoniÃ«":"NC","Niger":"NE","Norfolkeiland":"NF","Nigeria":"NG","Nicaragua":"NI","Nederland":"NL","Noorwegen":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Nieuw-Zeeland":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Frans-PolynesiÃ«":"PF","Papoea-Nieuw-Guinea":"PG","Filipijnen":"PH","Pakistan":"PK","Polen":"PL","Saint Pierre en Miquelon":"PM","Pitcairneilanden":"PN","Puerto Rico":"PR","Palestijnse gebieden":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Overig OceaniÃ«":"QO","RÃ©union":"RE","RoemeniÃ«":"RO","ServiÃ«":"RS","Rusland":"RU","Rwanda":"RW","Saoedi-ArabiÃ«":"SA","Salomonseilanden":"SB","Seychellen":"SC","Soedan":"SD","Zweden":"SE","Singapore":"SG","Sint-Helena":"SH","SloveniÃ«":"SI","Svalbard en Jan Mayen":"SJ","Slowakije":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","SomaliÃ«":"SO","Suriname":"SR","Zuid-Soedan":"SS","Sao TomÃ© en Principe":"ST","El Salvador":"SV","Sint-Maarten":"SX","SyriÃ«":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Turks- en Caicoseilanden":"TC","Tsjaad":"TD","Franse Gebieden in de zuidelijke Indische Oceaan":"TF","Togo":"TG","Thailand":"TH","Tadzjikistan":"TJ","Tokelau":"TK","Oost-Timor":"TL","Turkmenistan":"TM","TunesiÃ«":"TN","Tonga":"TO","Turkije":"TR","Trinidad en Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","OekraÃ¯ne":"UA","Oeganda":"UG","Kleine afgelegen eilanden van de Verenigde Staten":"UM","Verenigde Staten":"US","Uruguay":"UY","Oezbekistan":"UZ","Vaticaanstad":"VA","Saint Vincent en de Grenadines":"VC","Venezuela":"VE","Britse Maagdeneilanden":"VG","Amerikaanse Maagdeneilanden":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis en Futuna":"WF","Samoa":"WS","Jemen":"YE","Mayotte":"YT","Zuid-Afrika":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Onbekend gebied":"ZZ","AziÃ«":"142","Centraal-AziÃ«":"143","West-AziÃ«":"145","Europa":"150","Oost-Europa":"151","Noord-Europa":"154","West-Europa":"155","Latijns-Amerika":"419","Wereld":"001","Afrika":"002","Noord-Amerika":"003","Zuid-Amerika":"005","OceaniÃ«":"009","West-Afrika":"011","Midden-Amerika":"013","Oost-Afrika":"014","Noord-Afrika":"015","Centraal-Afrika":"017","Zuidelijk Afrika":"018","Amerika":"019","Noordelijk Amerika":"021","Caribisch gebied":"029","Oost-AziÃ«":"030","Zuid-AziÃ«":"034","Zuidoost-AziÃ«":"035","Zuid-Europa":"039","AustralaziÃ«":"053","MelanesiÃ«":"054","Micronesische regio":"057","PolynesiÃ«":"061"};
ilib.data.ctrynames_om = {"Brazil":"BR","China":"CN","Germany":"DE","Itoophiyaa":"ET","France":"FR","United Kingdom":"GB","India":"IN","Italy":"IT","Japan":"JP","Keeniyaa":"KE","Russia":"RU","United States":"US"};
ilib.data.ctrynames_or = {"à¬à¬¸à¬¿à¬":"142","à¬®à¬§à­à­ à¬à¬¸à¬¿à¬":"143","à¬ªà¬¶à­à¬à¬¿à¬® à¬à¬¸à¬¿à¬":"145","à­à­à¬°à­à¬ªà­":"150","à¬ªà­à¬°à­à¬¬ à­à­à¬°à­à¬ªà­":"151","à¬à¬¤à­à¬¤à¬° à­à­à¬°à­à¬ªà­":"154","à¬ªà¬¶à­à¬à¬¿à¬® à­à­à¬°à­à¬ªà­":"155","à¬²à¬¾à¬à¬¿à¬¨à­ à¬à¬®à­à¬°à¬¿à¬à¬¾ à¬à¬¬à¬ à¬à¬¾à¬°à¬¿à¬¬à¬¿à¬à¬¨à­":"419","à¬¬à¬¿à¬¶à­à¬¬":"001","à¬à¬«à­à¬°à¬¿à¬à¬¾":"002","à¬à¬¤à­à¬¤à¬° à¬à¬®à­à¬°à¬¿à¬à¬¾":"003","à¬¦à¬à­à¬·à¬¿à¬£ à¬à¬®à­à¬°à¬¿à¬à¬¾":"005","à¬à¬¸à­à¬¨à¬¿à¬à¬¨à­":"009","à¬ªà¬¶à­à¬à¬¿à¬® à¬à¬«à­à¬°à¬¿à¬à¬¾":"011","à¬®à¬§à­à­ à¬à¬®à­à¬°à¬¿à¬à¬¾":"013","à¬ªà­à¬°à­à¬¬ à¬à¬«à­à¬°à¬¿à¬à¬¾":"014","à¬à¬¤à­à¬¤à¬° à¬à¬«à­à¬°à¬¿à¬à¬¾":"015","à¬®à¬§à­à­ à¬à¬«à­à¬°à¬¿à¬à¬¾":"017","à¬¦à¬à­à¬·à¬¿à¬£à¬¸à­à¬¥ à¬à¬«à­à¬°à¬¿à¬à¬¾":"018","à¬à¬®à­à¬°à¬¿à¬à¬¾à¬¸à­":"019","à¬à¬¤à­à¬¤à¬°à¬¸à­à¬¥ à¬à¬®à­à¬°à¬¿à¬à¬¾":"021","à¬à¬¾à¬°à¬¿à¬¬à¬¿à¬à¬¨à­":"029","à¬ªà­à¬°à­à¬¬ à¬à¬¸à¬¿à¬":"030","à¬¦à¬à­à¬·à¬¿à¬£ à¬à¬¸à¬¿à¬":"034","à¬¦à¬à­à¬·à¬¿à¬£-à¬ªà­à¬°à­à¬¬ à¬à¬¸à¬¿à¬":"035","à¬¦à¬à­à¬·à¬¿à¬£ à­à­à¬°à­à¬ªà­":"039","à¬à¬·à­à¬à­à¬°à­à¬²à¬¿à¬ à¬à¬¬à¬ à¬¨à­à­à­à¬à¬¿à¬²à­à­à¬¾à¬£à­à¬¡":"053","à¬®à­à¬²à¬¾à¬¨à­à¬¸à¬¿à¬":"054","à¬®à¬¾à¬à¬à­à¬°à­à¬¨à­à¬¸à¬¿à¬à¬¨à­ à¬à¬à­à¬à¬³":"057","à¬ªà¬²à¬¿à¬¨à­à¬¸à¬¿à¬":"061","à¬à¬£à­à¬¡à­à¬°à¬¾":"AD","à¬¸à¬à¬¯à­à¬à­à¬¤ à¬à¬°à¬¬ à¬à¬®à¬¿à¬°à­à¬à¬¸à­":"AE","à¬à¬«à¬¾à¬à¬¾à¬¨à¬¿à¬¸à­à¬¤à¬¾à¬¨à­":"AF","à¬à¬£à­à¬à¬¿à¬à­à¬ à¬à¬¬à¬ à¬¬à¬¾à¬°à¬¬à­à¬¦à¬¾":"AG","à¬à¬à­à¬à­à¬à¬²à­à¬²à¬¾":"AI","à¬à¬²à¬¬à¬¾à¬¨à¬¿à¬":"AL","à¬à¬°à­à¬®à­à¬¨à¬¿à¬":"AM","à¬¨à­à¬¦à¬°à¬²à­à­à¬¾à¬£à­à¬¡à¬¸à­ à¬à¬£à­à¬à¬¿à¬²à¬¿à¬à­":"AN","à¬à¬à­à¬à­à¬²à¬¾":"AO","à¬à¬°à­à¬£à­à¬à¬à¬à¬¿à¬à¬¾":"AQ","à¬à¬°à­à¬à­à¬£à­à¬à¬¿à¬¨à¬¾":"AR","à¬à¬®à­à¬°à¬¿à¬à¬¾à¬¨à­ à¬¸à¬¾à¬®à­à¬":"AS","à¬à¬·à­à¬à­à¬°à¬¿à¬":"AT","à¬à¬·à­à¬à­à¬°à­à¬²à¬¿à¬":"AU","à¬à¬°à­à¬¬à¬¾":"AW","à¬à¬²à¬¾à¬£à­à¬¡ à¬à¬à¬¸à¬²à­à­à¬¾à¬£à­à¬¡":"AX","à¬à¬à­à¬°à¬¬à¬¾à¬à¬à¬¾à¬¨à­":"AZ","à¬¬à­à¬¸à¬¨à¬¿à¬ à¬à¬¬à¬ à¬¹à¬°à­à¬à¬à­à¬­à¬¿à¬¨à¬¾":"BA","à¬¬à¬¾à¬°à¬¬à¬¾à¬¡à­à¬¸à­":"BB","à¬¬à¬¾à¬à­à¬à¬²à¬¾à¬¦à­à¬¶à­":"BD","à¬¬à­à¬²à¬à¬¿à­à¬®à­":"BE","à¬¬à­à¬°à­à¬à¬¿à¬¨à­ à¬«à¬¾à¬¸à­":"BF","à¬¬à­à¬²à¬à­à¬°à¬¿à¬":"BG","à¬¬à¬¾à¬¹à¬¾à¬°à¬¿à¬¨à­":"BH","à¬¬à­à¬°à­à¬¨à­à¬¦à¬¿":"BI","à¬¬à­à¬¨à¬¿à¬¨à­":"BJ","à¬¸à­à¬£à­à¬ à¬¬à¬¾à¬°à­à¬¥à­à¬²à­à¬®à¬¿":"BL","à¬¬à¬°à¬®à­à¬¡à¬¾":"BM","à¬¬à­à¬°à­à¬¨à­à¬":"BN","à¬¬à­à¬²à¬­à¬¿à¬":"BO","à¬¬à­à¬°à¬¾à¬à¬¿à¬²à­":"BR","à¬¬à¬¾à¬¹à¬¾à¬®à¬¾à¬¸à­":"BS","à¬­à­à¬à¬¾à¬¨à­":"BT","à¬¬à­à¬­à­à¬à­ à¬à¬à¬¸à¬²à­à­à¬¾à¬£à­à¬¡":"BV","à¬¬à­à¬à¬¸à­à¬¬à¬¾à¬¨à­":"BW","à¬¬à­à¬²à¬¾à¬°à­à¬·à­":"BY","à¬¬à­à¬²à¬¿à¬à­":"BZ","à¬à¬¾à¬¨à¬¾à¬¡à¬¾":"CA","à¬à­à¬à­à¬¸à­ à¬à¬à¬¸à¬²à­à­à¬¾à¬£à­à¬¡":"CC","à¬à¬à­à¬à­-à¬à¬¿à¬¨à¬¸à¬¾à¬¸à¬¾":"CD","à¬®à¬§à­à­ à¬à¬«à­à¬°à¬¿à¬à­à­ à¬à¬£à¬¤à¬¨à­à¬¤à­à¬°":"CF","à¬à¬à­à¬à­-à¬¬à­à¬°à¬¾à¬à¬¿à¬­à¬¿à¬²à­à¬²à­":"CG","à¬¸à­à¬¬à¬¿à¬à¬°à¬²à­à­à¬¾à¬£à­à¬¡":"CH","à¬à¬à¬¬à¬°à­ à¬à­à¬·à­à¬":"CI","à¬à­à¬à­ à¬à¬à¬¸à¬²à­à­à¬¾à¬£à­à¬¡":"CK","à¬à¬¿à¬²à­à¬²à­":"CL","à¬à¬¾à¬®à­à¬°à­à¬¨à­":"CM","à¬à¬¿à¬¨à­":"CN","à¬à­à¬²à¬®à­à¬¬à¬¿à¬":"CO","à¬à­à¬·à­à¬à¬¾ à¬°à¬¿à¬à¬¾":"CR","à¬à­à­±à¬¿à¬¬à¬¾":"CU","à¬à­à¬ªà­ à¬­à¬°à­à¬¦à­":"CV","à¬à­à¬°à­à¬·à­à¬à¬®à¬¾à¬¸ à¬à¬à¬²à­à­à¬¾à¬£à­à¬¡":"CX","à¬¸à¬¾à¬à¬ªà­à¬°à¬¸à­":"CY","à¬à­à¬à­ à¬¸à¬¾à¬§à¬¾à¬°à¬£à¬¤à¬¨à­à¬¤à­à¬°":"CZ","à¬à¬°à­à¬®à¬¾à¬¨à­":"DE","à¬¡à¬¿à¬¬à­à¬à¬¿":"DJ","à¬¡à­à¬¨à¬®à¬¾à¬°à­à¬":"DK","à¬¡à­à¬®à¬¿à¬¨à¬¾à¬à¬¾":"DM","à¬¡à­à¬®à¬¿à¬¨à¬à¬¾à¬¨à­ à¬ªà­à¬°à¬à¬¾à¬¤à¬¨à­à¬¤à­à¬°":"DO","à¬à¬²à¬à­à¬°à¬¿à¬":"DZ","à¬à¬à­à­±à¬¾à¬¡à­à¬°à­":"EC","à¬à¬¸à­à¬¤à­à¬¨à¬¿à¬":"EE","à¬à¬à¬¿à¬ªà­à¬":"EG","à¬ªà¬¶à­à¬à¬¿à¬® à¬¸à¬¾à¬¹à¬¾à¬°à¬¾":"EH","à¬à¬°à¬¿à¬à­à¬°à¬¿à­à¬¾":"ER","à¬¸à­à¬ªà­à¬¨à­":"ES","à¬à¬¥à¬¿à¬à¬ªà¬¿à¬":"ET","à­à­à¬°à­à¬ªà¬¿à¬à¬¨à­ à­à­à¬¨à¬¿à¬à¬¨à­":"EU","à¬«à¬¿à¬¨à¬²à­à­à¬¾à¬£à­à¬¡":"FI","à¬«à¬¿à¬à¬¿":"FJ","à¬«à¬²à­à¬à¬²à­à­à¬¾à¬£à­à¬¡ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"FK","à¬®à¬¾à¬à¬à­à¬°à­à¬¨à­à¬¸à¬¿à¬":"FM","à¬«à¬¾à¬°à­à¬ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"FO","à¬«à­à¬°à¬¾à¬¨à­à¬¸":"FR","à¬à¬¾à¬¬à­à¬¨à­":"GA","à¬¬à­à¬°à¬¿à¬à­à¬¨à­":"GB","à¬à­à¬°à­à¬¨à¬¾à¬¡à¬¾":"GD","à¬à¬°à­à¬à¬¿à¬":"GE","à¬«à­à¬°à­à¬à­à¬ à¬à­à¬à¬¨à¬¾":"GF","à¬à­à¬à¬°à¬¨à­à¬¸à¬¿":"GG","à¬à¬¾à¬¨à¬¾":"GH","à¬à¬¿à¬¬à­à¬°à¬¾à¬²à­à¬à¬°à­":"GI","à¬à­à¬°à­à¬¨à¬²à­à­à¬¾à¬£à­à¬¡":"GL","à¬à¬¾à¬®à­à¬¬à¬¿à¬":"GM","à¬à­à¬à¬¨à­à¬":"GN","à¬à­à¬¡à­à¬²à­à¬ªà­":"GP","à¬à¬à­à¬¬à¬¾à¬à­à¬°à¬¿à¬à¬²à­ à¬à­à¬à¬¨à¬¿à¬":"GQ","à¬à­à¬°à­à¬¸à­":"GR","à¬¦à¬à­à¬·à¬¿à¬£ à¬à¬°à­à¬à¬¿à¬ à¬à¬¬à¬ à¬¦à¬à­à¬·à¬¿à¬£ à¬¸à¬¾à¬£à­à¬¡à­±à¬¿à¬à­ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"GS","à¬à­à¬à¬¤à¬®à¬¾à¬²à¬¾":"GT","à¬à­à¬à¬®à­":"GU","à¬à­à¬à¬¨à¬¿à¬-à¬¬à¬¿à¬¸à¬¾à¬":"GW","à¬à­à¬à¬¨à¬¾":"GY","à¬¹à¬à¬à¬ à¬¬à¬¿à¬¶à­à¬· à¬ªà­à¬°à¬¶à¬¾à¬¸à¬¨à¬¿à¬ à¬à­à¬·à­à¬¤à­à¬° à¬à­à¬¨à­":"HK","à¬¹à¬¾à¬°à­à¬¡ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬ à¬à¬¬à¬ à¬®à­à­à¬¾à¬à¬¡à­à¬¨à¬¾à¬²à­ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"HM","à¬¹à­à¬£à­à¬¡à¬¾à¬°à­à¬¸à­":"HN","à¬à­à¬°à­à¬à¬à¬¿à¬":"HR","à¬¹à¬¾à¬à¬¤à¬¿":"HT","à¬¹à¬à­à¬à­à¬°à­":"HU","à¬à¬£à­à¬¡à­à¬¨à­à¬¸à¬¿à¬":"ID","à¬à­à¬°à¬²à­à­à¬¾à¬£à­à¬¡":"IE","à¬à¬¸à­à¬°à¬¾à¬à¬²à­":"IL","à¬à¬à¬²à­ à¬à¬«à­ à¬®à­à¬¨à­":"IM","à¬­à¬¾à¬°à¬¤":"IN","à¬¬à­à¬°à¬¿à¬à¬¿à¬¶à­ à¬­à¬¾à¬°à¬¤à­à­ à¬¸à¬¾à¬®à­à¬¦à­à¬°à¬¿à¬ à¬à­à¬·à­à¬¤à­à¬°":"IO","à¬à¬°à¬¾à¬à­":"IQ","à¬à¬°à¬¾à¬¨à­":"IR","à¬à¬à¬¸à¬²à­à­à¬¾à¬£à­à¬¡":"IS","à¬à¬à¬¾à¬²à­":"IT","à¬à¬°à­à¬¸à¬¿":"JE","à¬à¬¾à¬®à¬¾à¬à¬à¬¾":"JM","à¬à­à¬°à­à¬¡à¬¾à¬¨à­":"JO","à¬à¬¾à¬ªà¬¾à¬¨à­":"JP","à¬à­à¬¨à¬¿à­à¬¾":"KE","à¬à¬¿à¬°à­à¬à¬¿à¬à¬¿à¬¸à­à¬¥à¬¾à¬¨":"KG","à¬à¬¾à¬®à­à¬¬à­à¬¡à¬¿à¬":"KH","à¬à¬¿à¬°à¬¿à¬¬à¬¾à¬à­":"KI","à¬à¬¾à¬®à­à¬°à¬¸à­":"KM","à¬¸à­à¬£à­à¬ à¬à¬¿à¬à¬¸à­ à¬à¬£à­à¬¡ à¬¨à­à¬­à¬¿à¬¸à­":"KN","à¬à¬¤à­à¬¤à¬° à¬à­à¬°à¬¿à¬":"KP","à¬¦à¬à­à¬·à¬¿à¬£ à¬à­à¬°à¬¿à¬":"KR","à¬à­à¬à¬¤à­":"KW","à¬à­à¬®à­à­à¬¾à¬¨à­ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"KY","à¬à¬¾à¬à¬¾à¬à¬¾à¬¸à­à¬¥à¬¾à¬¨à­":"KZ","à¬²à¬¾à¬à¬¸à­":"LA","à¬²à­à¬¬à¬¾à¬¨à¬¨à­":"LB","à¬¸à­à¬£à­à¬ à¬²à­à¬¸à¬¿à¬":"LC","à¬²à¬¿à¬à­à¬¸à­à¬¤à¬¿à¬à¬¨à¬¾à¬¨à­":"LI","à¬¶à­à¬°à­à¬²à¬à­à¬à¬¾":"LK","à¬²à¬¿à¬¬à­à¬°à¬¿à¬":"LR","à¬²à­à¬¸à­à¬¥à­":"LS","à¬²à¬¿à¬¥à¬¾à¬à¬¨à¬¿à¬":"LT","à¬²à¬à­à¬¸à­à¬®à¬¬à¬°à­à¬":"LU","à¬²à¬¾à¬à¬­à¬¿à¬":"LV","à¬²à¬¿à¬¬à¬¿à¬":"LY","à¬®à­à¬°à­à¬à­à¬à­":"MA","à¬®à­à¬¨à¬¾à¬à­":"MC","à¬®à¬¾à¬²à¬¡à­à¬­à¬¾":"MD","à¬®à¬£à­à¬à­à¬à­à¬°à­":"ME","à¬¸à­à¬£à­à¬ à¬®à¬¾à¬°à­à¬à¬¿à¬¨à­":"MF","à¬®à¬¾à¬¡à¬¾à¬à¬¾à¬¸à­à¬à¬°à­":"MG","à¬®à¬¾à¬°à­à¬¶à¬²à­ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"MH","à¬®à¬¾à¬¸à­à¬¡à­à¬¨à¬¿à¬":"MK","à¬®à¬¾à¬³à­":"ML","à¬®à¬¿à­à¬¾à¬®à¬¾à¬°à­":"MM","à¬®à¬à­à¬à­à¬²à¬¿à¬":"MN","à¬®à¬¾à¬à¬¾à¬ SAR à¬à¬¿à¬¨à­":"MO","à¬à¬¤à­à¬¤à¬° à¬®à¬¾à¬°à¬¿à¬à¬¨à¬¾ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"MP","à¬®à¬¾à¬°à­à¬à¬¿à¬¨à¬¿à¬à­à­à­":"MQ","à¬®à¬¾à¬à¬°à¬¿à¬à¬¾à¬¨à¬¿à¬":"MR","à¬®à¬£à­à¬à­à¬¸à­à¬°à¬¾à¬à­":"MS","à¬®à¬¾à¬²à­à¬à¬¾":"MT","à¬®à­à¬°à¬¿à¬¸à¬¸à­":"MU","à¬®à¬¾à¬³à¬¦à­à¬¬à­à¬ª":"MV","à¬®à¬¾à¬²à­±à¬¿":"MW","à¬®à­à¬à­à¬¸à¬¿à¬à­":"MX","à¬®à¬¾à¬²à­à¬¸à¬¿à¬":"MY","à¬®à­à¬à¬¾à¬®à­à¬¬à¬¿à¬à­à­à­":"MZ","à¬¨à¬¾à¬®à­à¬¬à¬¿à¬":"NA","à¬¨à­à¬¤à¬¨ à¬à¬¾à¬²à­à¬¡à­à¬¨à¬¿à¬":"NC","à¬¨à¬¾à¬à¬à¬°à­":"NE","à¬¨à¬°à¬«à­à¬²à¬à­ à¬¦à­à¬¬à­à¬ª":"NF","à¬¨à¬¾à¬à¬à­à¬°à¬¿à¬":"NG","à¬¨à¬¿à¬à¬¾à¬°à¬¾à¬à­à¬":"NI","à¬¨à­à¬¦à¬°à¬²à­à­à¬¾à¬£à­à¬¡":"NL","à¬¨à¬°à­±à­":"NO","à¬¨à­à¬ªà¬¾à¬³":"NP","à¬¨à¬¾à¬à¬°à­":"NR","à¬¨à¬¿à¬":"NU","à¬¨à­à­à­à¬à¬¿à¬²à¬¾à¬£à­à¬¡":"NZ","à¬à¬®à¬¾à¬¨à­":"OM","à¬ªà¬¾à¬¨à¬¾à¬®à¬¾":"PA","à¬ªà­à¬°à­":"PE","à¬«à­à¬°à­à¬à­à¬ à¬ªà¬²à¬¿à¬¨à­à¬¸à¬¿à¬":"PF","à¬ªà¬ªà­à¬ à¬¨à­à­à­ à¬à­à¬à¬¨à¬¿à¬":"PG","à¬«à¬¿à¬²à¬¿à¬ªà¬¾à¬à¬¨à¬¸à­":"PH","à¬ªà¬¾à¬à¬¿à¬¸à­à¬¤à¬¾à¬¨":"PK","à¬ªà­à¬²à¬¾à¬£à­à¬¡":"PL","à¬¸à­à¬£à­à¬ à¬ªà¬¿à¬à¬°à­ à¬à¬¬à¬ à¬®à¬¿à¬à­à¬¬à¬¾à¬²à­à¬¨à­":"PM","à¬ªà¬¿à¬à¬à¬¾à¬à¬°à¬¿à¬¨à­":"PN","à¬ªà­à¬à¬°à­à¬¤à­à¬¤à­ à¬°à¬¿à¬à­":"PR","à¬ªà¬¾à¬²à­à¬¸à­à¬¤à­à¬¨à¬¿à¬":"PS","à¬ªà¬°à­à¬¤à­à¬¤à­à¬à¬¾à¬²à­":"PT","à¬ªà¬¾à¬²à¬¾à¬":"PW","à¬ªà¬¾à¬°à¬¾à¬à­à¬":"PY","à¬à¬¤à¬¾à¬°à­":"QA","à¬à¬à¬à¬²à­à¬à¬ à¬à¬¸à­à¬¨à¬¿à¬":"QO","à¬°à¬¿à­à­à¬¨à¬¿à¬à¬¨à­":"RE","à¬°à­à¬®à¬¾à¬¨à¬¿à¬":"RO","à¬¸à¬°à­à¬¬à¬¿à¬":"RS","à¬°à­à¬·à¬¿à¬":"RU","à¬°à¬¾à­±à¬¾à¬£à­à¬¡à¬¾":"RW","à¬¸à¬¾à¬à¬¦à¬¿ à¬à¬°à¬¬à¬¿à¬":"SA","à¬¸à­à¬²à­à¬®à¬¨à­ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"SB","à¬¸à­à¬à­à¬²à¬¸à­":"SC","à¬¸à­à¬¦à¬¾à¬¨à­":"SD","à¬¸à­à­±à­à¬¡à­à¬¨à­":"SE","à¬¸à¬¿à¬à­à¬à¬¾à¬ªà­à¬°à­":"SG","à¬¸à­à¬£à­à¬ à¬¹à­à¬²à­à¬¨à¬¾":"SH","à¬¸à­à¬²à­à¬­à­à¬¨à¬¿à¬":"SI","à¬¸à¬¾à¬²à­à¬­à¬¾à¬°à­à¬¡ à¬à¬¬à¬ à¬à¬¾à¬¨à­ à¬®à¬¾à­à­à¬¨à­":"SJ","à¬¸à­à¬²à­à¬­à¬¾à¬à¬¿à¬":"SK","à¬¸à¬¿à¬à¬°à¬¾ à¬²à¬¿à¬à¬¨à­":"SL","à¬¸à¬¾à¬¨à­ à¬®à¬¾à¬°à¬¿à¬¨à­":"SM","à¬¸à­à¬¨à­à¬à¬¾à¬²à­":"SN","à¬¸à­à¬®à¬¾à¬²à¬¿à¬":"SO","à¬¸à­à¬°à¬¿à¬¨à¬¾à¬®":"SR","à¬¸à¬¾à¬ à¬à­à¬®à­ à¬à¬¬à¬ à¬ªà­à¬°à¬¿à¬¨à¬¸à¬¿à¬ªà¬¿":"ST","à¬à¬²à­ à¬¸à¬¾à¬²à¬­à¬¾à¬¡à­à¬°à­":"SV","à¬¸à¬¿à¬°à¬¿à¬":"SY","à¬¸à­à¬¬à¬¾à¬à¬¿à¬²à¬¾à¬£à­à¬¡":"SZ","à¬¤à­à¬°à­à¬à¬¸à­ à¬à¬¬à¬ à¬¸à¬¾à¬à¬à¬¸à­ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"TC","à¬à¬¾à¬¦à­":"TD","à¬«à¬°à¬¾à¬¸à­ à¬¦à¬à­à¬·à¬¿à¬£ à¬à­à¬·à­à¬¤à­à¬°":"TF","à¬à­à¬à­":"TG","à¬¥à¬¾à¬à¬²à¬¾à¬£à­à¬¡":"TH","à¬¤à¬¾à¬à¬¿à¬à¬¿à¬¸à­à¬¥à¬¾à¬¨à­":"TJ","à¬à­à¬à­à¬²à¬¾à¬":"TK","à¬ªà­à¬°à­à¬¬ à¬¤à¬¿à¬®à­à¬°à­":"TL","à¬¤à­à¬°à­à¬à¬®à­à¬¨à¬¿à¬¸à­à¬¤à¬¾à¬¨à­":"TM","à¬¤à­à¬¨à¬¿à¬¸à¬¿à¬":"TN","à¬à­à¬à­à¬à¬¾":"TO","à¬¤à­à¬°à­à¬à­":"TR","à¬¤à­à¬°à¬¿à¬¨à¬¿à¬¦à¬¾à¬¦à­ à¬à¬¬à¬ à¬à­à¬¬à¬¾à¬à­":"TT","à¬à­à¬­à¬¾à¬²à­":"TV","à¬¤à¬¾à¬à­±à¬¾à¬¨à­":"TW","à¬¤à¬¾à¬à­à¬à¬¾à¬¨à¬¿à¬":"TZ","à­à­à¬à­à¬°à¬¾à¬à¬¨à­":"UA","à¬à¬à¬¾à¬£à­à¬¡à¬¾":"UG","à­à­à¬¨à¬¾à¬à¬à­à¬¡à­ à¬·à­à¬à­à¬à¬¸à­ à¬®à¬¾à¬à¬¨à¬°à­ à¬à¬à¬à¬²à­à¬à¬ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"UM","à¬¯à­à¬à­à¬¤ à¬°à¬¾à¬·à­à¬à­à¬° à¬à¬®à­à¬°à¬¿à¬à¬¾":"US","à¬à¬°à­à¬à­à¬":"UY","à¬à¬à¬¬à­à¬à¬¿à¬¸à­à¬¥à¬¾à¬¨à­":"UZ","à¬­à¬¾à¬à¬¿à¬à¬¾à¬¨à­":"VA","à¬¸à­à¬£à­à¬ à¬­à¬¿à¬¨à¬¸à­à¬£à­à¬ à¬à¬¬à¬ à¬¦à¬¿ à¬à­à¬°à­à¬¨à¬¾à¬¡à¬¿à¬¸à­":"VC","à¬­à­à¬¨à¬à­à¬à¬²à¬¾":"VE","à¬¬à­à¬°à¬¿à¬à¬¿à¬¶à­ à¬­à¬°à­à¬à¬¿à¬¨à­ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"VG","à­à­à¬à¬¸à­ à¬­à¬°à­à¬à¬¿à¬¨à­ à¬¦à­à¬¬à­à¬ªà¬ªà­à¬à­à¬":"VI","à¬­à¬¿à¬à¬¤à¬¨à¬¾à¬®à­":"VN","à¬­à¬¾à¬¨à­à¬à¬¤à­":"VU","à­±à¬¾à¬²à¬¿à¬¸à­ à¬à¬¬à¬ à¬«à­à¬¤à­à¬¨à¬¾":"WF","à¬¸à¬¾à¬®à­à¬":"WS","à­à­à¬®à­à¬¨à­":"YE","à¬®à¬¾à­à­à¬à­":"YT","à¬¦à¬à­à¬·à¬¿à¬£ à¬à¬«à­à¬°à¬¿à¬à¬¾":"ZA","à¬à¬¾à¬®à­à¬¬à¬¿à¬":"ZM","à¬à¬¿à¬®à­à¬¬à¬¾à­±à­":"ZW","à¬à¬à¬£à¬¾ à¬à¬¿à¬®à­à¬¬à¬¾ à¬à¬¬à­à¬§ à¬ªà­à¬°à¬¦à­à¬¶":"ZZ"};
ilib.data.ctrynames_pa = {"à¨¬à¨£à¨¾à¨à¨ à¨à¨¿à¨ à¨¹à©":false,"à¨à¨à¨à©à¨à©à¨ à¨à¨¤à© à¨¬à¨¾à¨°à¨¬à©à¨¡à¨¾":"AG","à¨à¨°à¨¬":"SA","à¨¬à©à¨¸à¨¨à©à¨ à¨à¨¤à© à¨¹à¨°à©à©à¨à©à¨µà©à¨¨à¨¾":"BA","BVI":"VG","à¨à©à¨ª à¨µà¨°à¨¦à© à¨à¨à¨²à©à¨à¨¡":"CV","à¨à©à¨à©à¨¸ à¨à¨¤à© à¨à©à¨²à¨¿à©°à¨ à¨à¨à¨²à©à¨à¨¡":"CC","à¨à©à¨à©à¨¸ (à¨à©à¨²à¨¿à©°à¨) à¨à¨à¨²à©à¨à¨¡":"CC","à¨à©à¨à¨à©, à¨¡à©à¨®à©à¨à¨°à©à¨à¨¿à¨ à¨°à¨¿à¨ªà¨¬à¨²à¨¿à¨ à¨à¨«":"CD","à¨¡à©à¨®à©à¨à¨°à©à¨à¨¿à¨ à¨°à¨¿à¨ªà¨¬à¨²à¨¿à¨ à¨à¨« à¨à©à¨à¨à©":"CD","DPRK":"KP","à¨¦à©à¨¬à¨":"AE","à¨ªà©à¨°à¨¬à© à¨à¨¿à¨®à©à¨°":"TL","à¨à©°à¨à¨²à©à¨à¨¡":"GB","à¨«à¨¾à¨²à¨à¨²à©à¨à¨¡à¨¸":"FK","à¨¹à¨°à¨¡ à¨à¨à¨²à©à¨à¨¡ à¨à¨¤à© à¨®à©à¨à¨¡à©à¨¨à¨²à¨¡ à¨à¨à¨²à©à¨à¨¡":"HM","à¨à¨§à¨¿à¨à©à¨°à¨¿à¨¤ à¨«à¨¿à¨²à¨¿à¨¸à¨¤à©à¨¨à© à¨ªà©à¨°à¨¦à©à¨¶":"PS","à¨ªà©.à¨à¨°. à¨à¨¾à¨à¨¨à¨¾":"CN","à¨ªà©.à¨à¨°. à¨à¨« à¨à¨¾à¨à¨¨à¨¾":"CN","à¨«à¨¿à¨²à¨¿à¨¸à¨¤à©à¨¨à© à¨ªà©à¨°à¨¦à©à¨¶":"PS","à¨ªà©à¨ªà¨²à¨¸ à¨°à¨¿à¨ªà¨¬à¨²à¨¿à¨ à¨à¨« à¨à¨¾à¨à¨¨à¨¾":"CN","à¨ªà©à¨²à©à¨¨à©à¨¶à©à¨":"061","à¨ªà©à¨à¨° à¨à¨¾à¨à¨¨à¨¾":"CN","PRC":"CN","à¨°à¨¿à¨ªà¨¬à¨²à¨¿à¨ à¨à¨« à¨à¨¾à¨à¨¨à¨¾":"TW","à¨°à¨¿à¨ªà¨¬à¨²à¨¿à¨ à¨à¨« à¨à¨à¨°à¨²à©à¨à¨¡":"IE","à¨°à¨¿à¨ªà¨¬à¨²à¨¿à¨ à¨à¨« à¨¸à¨¿à©°à¨à¨¾à¨ªà©à¨°":"SG","à¨¸à©à¨à¨ à¨¬à¨¾à¨°à¨à¨¸":"BL","à¨¸à©à¨à¨ à¨¹à©à¨²à©à¨¨à¨¾, à¨à¨¸à©à¨¨à¨¶à¨¨ à¨à¨¤à© à¨¤à¨°à¨¿à¨¸à¨¤à¨¨ à¨¦à¨¾ à¨à©à¨¨à¨¹à¨¾":"SH","à¨¸à©à¨à¨ à¨à¨¿à¨à¨¸ à¨à¨¤à© à¨¨à©à¨µà¨¿à¨¸":"KN","à¨¸à©à¨à¨ à¨ªà¨¿à¨à¨°à© à¨à¨¤à© à¨®à¨¿à¨à¨²à©à¨¨":"PM","à¨¸à©à¨à¨ à¨µà¨¿à¨¨à¨¸à©à¨à¨ à¨à¨¤à© à¨¦ à¨à©à¨°à©à¨¨à¨¾à¨¡à¨¾à¨à¨¨à¨¸":"VC","à¨¸à¨¾à¨ à¨à©à¨® à¨à¨¤à© à¨ªà©à¨°à¨¿à©°à¨¸à¨ªà©":"ST","à¨¸à¨à¨¾à¨à¨²à©à¨à¨¡":"GB","à¨¸à©à¨²à©à¨®à©à¨¨à¨¸":"SB","à¨¦à©±à¨à¨£à© à¨à©à¨°à¨à©à¨ à¨à¨¤à© à¨¦à©±à¨à¨£à© à¨¸à©à¨à¨¡à¨µà¨¿à©±à¨ à¨à¨à¨²à©à¨à¨¡":"GS","à¨¸à©à¨à¨ à¨¬à¨°à¨¥à©à¨²à©à¨®à©":"BL","à¨¸à©à¨à¨ à¨¹à©à¨²à©à¨¨à¨¾":"SH","à¨¸à©à¨à¨ à¨à¨¿à¨à¨¸":"KN","à¨¸à©à¨à¨ à¨²à©à¨¸à©à¨":"LC","à¨¸à©à¨à¨ à¨®à¨¾à¨°à¨à¨¿à¨¨":"MF","à¨¸à©à¨à¨ à¨ªà¨¿à¨à¨°à©":"PM","à¨¸à©à¨à¨ à¨µà¨¿à¨¨à¨¸à©à¨à¨":"VC","à¨¸à¨µà¨²à¨¬à¨°à¨¡ à¨à¨¤à© à¨à¨¨ à¨®à©à¨à¨¨":"SJ","à¨¸à©à¨¨à©à¨à¨²":"SN","à¨¦ à¨¬à¨¾à¨¹à¨¾à¨®à¨¾à¨¸":"BS","à¨¦ à¨à©à©±à¨ à¨°à¨¿à¨ªà¨¬à¨²à¨¿à¨":"CZ","à¨¦ à¨à©à¨°à©à¨¨à¨¾à¨¡à¨¾à¨à¨¨à¨¸":"VC","à¨¦ à¨¨à©à¨¦à¨°à¨²à©à¨à¨¡à¨¸":"NL","à¨¦ à¨«à¨¿à¨²à¨¿à¨ªà©à¨à¨¸":"PH","à¨¦ à¨°à¨¿à¨ªà¨¬à¨²à¨¿à¨ à¨à¨« à¨¸à¨¿à©°à¨à¨¾à¨ªà©à¨°":"SG","à¨¦ à¨¸à¨¾à¨à¨¥ à¨¸à©à¨à¨¡à¨µà¨¿à©±à¨ à¨à¨à¨²à©à¨à¨¡à¨¸":"GS","à¨¦ à¨¸à©à¨¡à¨¾à¨¨":"SD","à¨¦ à¨¯à©à¨à¨¸ à¨µà¨°à¨à¨¿à¨¨ à¨à¨à¨²à©à¨à¨¡":"VI","à¨¤à©à¨°à¨¿à¨¨à¨¿à¨¦à¨¾à¨¦ à¨à¨¤à© à¨à©à¨¬à¨¾à¨à©":"TT","à¨à¨°à¨à¨¸ à¨à¨¤à© à¨à¨¾à¨à¨à©à¨¸ à¨à¨à¨²à©à¨à¨¡":"TC","à¨µà©à¨à©à¨à¨¨ à¨¸à¨¿à¨à©":"VA","à¨µà©à¨à©à¨à¨¨ à¨¸à¨¿à¨à© à¨¸à¨à©à¨":"VA","à¨µà¨°à¨à¨¿à¨¨ à¨à¨à¨²à©à¨à¨¡":"VI","à¨µà©à¨²à¨¸":"GB","à¨µà©à¨²à¨¿à¨¸ à¨à¨¤à© à¨«à¨¿à¨à¨à©à¨¨à¨¾":"WF","à¨à¨°":"IE","à¨à¨¸à©à¨¨à¨¶à¨¨ à¨à¨à¨²à©à¨à¨¡":"AC","à¨à¨à¨¡à©à¨°à¨¾":"AD","à¨¯à©à¨¨à¨¾à¨à¨à¨¿à¨¡ à¨à¨°à¨¬ à¨à¨®à©à¨°à©à¨à¨¸":"AE","à¨à¨«à¨à¨¾à¨¨à¨¿à¨¸à¨¤à¨¾à¨¨":"AF","à¨à¨à¨à©à¨²à¨¾":"AI","à¨à¨²à¨¬à©à¨¨à©à¨":"AL","à¨à¨°à¨®à©à¨¨à©à¨":"AM","à¨¨à©à¨¦à¨°à¨²à©à¨à¨¡à¨¸ à¨à¨¨à¨à¨¾à¨à¨²à¨¸":"AN","à¨à©°à¨à©à¨²à¨¾":"AO","à¨à©°à¨à¨¾à¨°à¨à¨à¨¿à¨à¨¾":"AQ","à¨à¨°à¨à¨¨à¨à©à¨¨à¨¾":"AR","à¨à¨®à¨°à©à¨à¨¨ à¨¸à¨®à©à¨":"AS","à¨à¨¸à¨à©à¨°à©à¨":"AT","à¨à¨¸à¨à¨°à©à¨²à©à¨":"053","à¨à¨°à©à¨¬à¨¾":"AW","à¨à¨²à©à¨à¨¡ à¨à¨à¨²à©à¨à¨¡":"AX","à¨à©à¨°à¨¬à©à©à¨¾à¨¨":"AZ","à¨¬à¨¾à¨°à¨¬à¨¾à¨¡à©à¨¸":"BB","à¨¬à©°à¨à¨²à¨¾à¨¦à©à¨¶":"BD","à¨¬à©à¨²à¨à©à¨à¨®":"BE","à¨¬à©à¨°à¨à©à¨¨à¨¾ à¨«à¨¾à¨¸à©":"BF","à¨¬à©à¨²à¨à¨¾à¨°à©à¨":"BG","à¨¬à¨¹à¨¿à¨°à©à¨¨":"BH","à¨¬à©à¨°à©à©°à¨¡à©":"BI","à¨¬à©à¨¨à¨¿à¨¨":"BJ","à¨¬à¨°à¨®à©à¨¡à¨¾":"BM","à¨¬à¨°à©à¨¨à©":"BN","à¨¬à©à¨²à©à¨µà©à¨":"BO","à¨à©à¨°à©à¨¬à©à¨à¨¨ à¨¨à©à¨¦à¨°à¨²à©à¨à¨¡à¨¸":"BQ","à¨¬à©à¨°à¨¾à©à©à¨²":"BR","à¨¬à¨¾à¨¹à¨¾à¨®à¨¾à¨¸":"BS","à¨­à©à¨à¨¾à¨¨":"BT","à¨¬à©à¨µà©à¨ à¨à¨à¨²à©à¨à¨¡":"BV","à¨¬à©à¨¸à¨¤à¨µà¨¾à¨¨à¨¾":"BW","à¨¬à©à¨²à¨¾à¨°à©à¨¸":"BY","à¨¬à©à¨²à¨¾à¨à©":"BZ","à¨à©à¨¨à©à¨¡à¨¾":"CA","Cocos [Keeling] Islands":"CC","à¨à©à¨à¨à©-à¨à¨¿à¨¨à¨¶à¨¾à¨¸à¨¾":"CD","à¨¸à©à¨à¨à¨°à¨² à¨à¨«à¨°à©à¨à¨¨ à¨°à¨¿à¨ªà¨¬à¨²à¨¿à¨":"CF","à¨à©à¨à¨à©-à¨¬à©à¨°à¨¾à©à¨¾à¨µà¨¿à¨²à©":"CG","à¨¸à¨µà¨¿à¨à©à¨°à¨²à©à¨à¨¡":"CH","à¨à©à¨à© à¨¦âà¨à¨à¨µà©à¨°":"CI","à¨à©à¨ à¨à¨à¨²à©à¨à¨¡":"CK","à¨à¨¿à¨²à©":"CL","à¨à©à¨®à¨°à©à¨¨":"CM","à¨à©à¨¨":"CN","à¨à©à¨²à©°à¨¬à©à¨":"CO","à¨à¨²à¨¿à¨ªà¨°à¨à¨¨ à¨à¨à¨²à©à¨à¨¡":"CP","à¨à©à¨¸à¨à¨¾ à¨°à¨¿à¨à¨¾":"CR","à¨à¨¿à¨à¨¬à¨¾":"CU","à¨à©à¨ª à¨µà©à¨°à¨¡à©":"CV","à¨à©à¨°à¨¾à¨à¨¾à¨":"CW","à¨à©à¨°à¨¿à¨¸à¨®à¨¿à¨¸ à¨à¨à¨²à©à¨à¨¡":"CX","à¨¸à¨¾à¨à¨ªà¨°à¨¸":"CY","à¨à©à©±à¨ à¨°à¨¿à¨ªà¨¬à¨²à¨¿à¨":"CZ","à¨à¨°à¨®à¨¨à©":"DE","à¨¡à©à¨à© à¨à©à¨°à©à¨¸à©à¨":"DG","à¨à©à¨¬à©à¨¤à©":"DJ","à¨¡à©à¨¨à¨®à¨¾à¨°à¨":"DK","à¨¡à©à¨®à©à¨¨à©à¨¶à©à¨":"DM","à¨¡à©à¨®à¨¨à¨¿à¨à¨¨ à¨°à¨¿à¨ªà¨¬à¨²à¨¿à¨":"DO","à¨à¨²à¨à©à¨°à©à¨":"DZ","à¨¸à©à¨à¨à¨¾ à¨à¨¤à© à¨®à©à¨²à©à¨²à¨¾":"EA","à¨à¨à©à¨à¨¡à©à¨°":"EC","à¨à¨¸à¨à©à¨¨à©à¨":"EE","à¨®à¨¿à¨¸à¨°":"EG","à¨ªà©±à¨à¨®à© à¨¸à¨¹à¨¾à¨°à¨¾":"EH","à¨à¨°à©à¨à©à¨°à©à¨":"ER","à¨¸à¨ªà©à¨¨":"ES","à¨à¨¥à¨¿à¨à¨ªà©à¨":"ET","à¨¯à©à¨°à©à¨ªà©à¨à¨¨ à¨¯à©à¨¨à©à¨à¨¨":"EU","à¨«à¨¿à¨¨à¨²à©à¨à¨¡":"FI","à¨«à©à¨à©":"FJ","à¨«à¨¾à¨à¨²à©à¨à¨¡ à¨à¨à¨²à©à¨à¨¡":"FK","à¨®à¨¾à¨à¨à©à¨°à©à¨¨à©à¨¶à©à¨":"FM","à¨«à©à¨°à© à¨à¨à¨²à©à¨à¨¡":"FO","à¨«à¨°à¨¾à¨à¨¸":"FR","à¨à©à¨¬à¨¨":"GA","à¨¯à©à¨¨à¨¾à¨à¨à¨¿à¨¡ à¨à¨¿à©°à¨à¨¡à¨®":"GB","à¨à©à¨°à©à¨¨à¨¾à¨¡à¨¾":"GD","à¨à¨¿à¨à¨°à¨à©à¨":"GE","à¨«à©à¨°à©à¨à¨ à¨à©à¨à¨¨à¨¾":"GF","à¨à©à¨°à¨¨à¨¸à©":"GG","à¨à¨¾à¨¨à¨¾":"GH","à¨à¨¿à¨¬à©à¨°à¨¾à¨²à¨à¨°":"GI","à¨à©à¨°à©à¨¨à¨²à©à¨à¨¡":"GL","à©à¨¾à¨à¨¬à©à¨":"GM","à¨à¨¿à¨¨à©":"GN","à¨à©à¨à¨¡à©à¨²à©à¨ª":"GP","à¨à¨à¨µà©à¨à©à¨°à©à¨à¨² à¨à¨¿à¨¨à©":"GQ","à¨¯à©à¨¨à¨¾à¨¨":"GR","à¨¦à©±à¨à¨£à© à¨à¨¿à¨à¨°à©à©à¨ à¨à¨¤à© à¨¦à©±à¨à¨£à© à¨¸à©à¨à¨¡à¨µà¨¿à©±à¨ à¨à¨à¨²à©à¨à¨¡":"GS","à¨à©à¨à¨à©à¨®à¨¾à¨²à¨¾":"GT","à¨à©à¨à¨®":"GU","à¨à¨¿à¨¨à©-à¨¬à¨¿à¨¸à©":"GW","à¨à©à¨à¨¨à¨¾":"GY","à¨¹à¨¾à¨à¨à¨à¨¾à¨à¨ à¨à¨¸.à¨.à¨à¨°. à¨à¨¾à¨à¨¨à¨¾":"HK","à¨¹à©à¨à¨¡à©à¨°à©±à¨¸":"HN","à¨à©à¨°à©à¨¶à©à¨":"HR","à¨¹à©à¨¤à©":"HT","à¨¹à©°à¨à¨°à©":"HU","à¨à©à¨¨à©à¨°à© à¨à¨à¨²à©à¨à¨¡":"IC","à¨à©°à¨¡à©à¨¨à©à¨¶à©à¨":"ID","à¨à¨à¨°à¨²à©à¨à¨¡":"IE","à¨à©à¨°à¨¾à¨à¨²":"IL","à¨à¨à¨² à¨à¨« à¨®à©à¨¨":"IM","à¨­à¨¾à¨°à¨¤":"IN","à¨¬à©à¨°à¨¿à¨à¨¿à¨¶ à¨¹à¨¿à©°à¨¦ à¨®à¨¹à¨¾à¨¸à¨¾à¨à¨° à¨ªà©à¨°à¨¦à©à¨¶":"IO","à¨à¨°à¨¾à¨":"IQ","à¨à¨°à¨¾à¨¨":"IR","à¨à¨à¨¸à¨²à©à¨à¨¡":"IS","à¨à¨à¨²à©":"IT","à¨à¨°à¨¸à©":"JE","à¨à¨®à©à¨à¨¾":"JM","à¨à©à¨°à¨¡à¨¨":"JO","à¨à¨¾à¨ªà¨¾à¨¨":"JP","à¨à©à¨¨à©à¨":"KE","à¨à¨¿à¨°à¨à¨¿à¨¸à¨¤à¨¾à¨¨":"KG","à¨à©°à¨¬à©à¨¡à©à¨":"KH","à¨à©à¨°à©à¨¬à¨¾à¨¤à©":"KI","à¨à©à¨®à©à¨°à©à¨¸":"KM","à¨à©±à¨¤à¨°à© à¨à©à¨°à©à¨":"KP","à¨¦à©±à¨à¨£à© à¨à©à¨°à©à¨":"KR","à¨à©à¨µà©à¨¤":"KW","à¨à©à¨®à©à¨¨ à¨à¨à¨²à©à¨à¨¡":"KY","à¨à©à¨¾à¨à¨¿à¨¸à¨¤à¨¾à¨¨":"KZ","à¨²à¨¾à¨à¨¸":"LA","à¨²à©à¨¬à¨¨à¨¾à¨¨":"LB","à¨²à¨¿à¨à¨à©à¨à¨¸à¨à©à¨¨":"LI","à¨¸à©à¨°à© à¨²à©°à¨à¨¾":"LK","à¨²à¨¿à¨¬à©à¨°à©à¨":"LR","à¨²à©à¨¸à©à¨¥à©":"LS","à¨²à¨¿à¨¥à©à¨¨à©à¨":"LT","à¨²à¨à¨¸à¨®à¨¬à¨°à¨":"LU","à¨²à¨¾à¨¤à¨µà©à¨":"LV","à¨²à©à¨¬à©à¨":"LY","à¨®à©à¨°à©à¨à©":"MA","à¨®à©à¨¨à¨¾à¨à©":"MC","à¨®à©à¨²à¨¦à©à¨µà¨¾":"MD","à¨®à©à¨à¨à©à¨¨à©à¨à¨°à©":"ME","à¨®à©à¨¡à¨à¨¾à¨¸à¨à¨°":"MG","à¨®à¨¾à¨°à¨¶à¨² à¨à¨à¨²à©à¨à¨¡":"MH","à¨®à©à¨¸à¨¿à¨¡à©à¨¨à©à¨":"MK","à¨®à¨¾à¨²à©":"ML","Myanmar [Burma]":"MM","à¨®à©°à¨à©à¨²à©à¨":"MN","à¨®à¨à¨¾à©³ à¨à¨¸.à¨.à¨à¨°. à¨à©à¨¨":"MO","à¨à©±à¨¤à¨°à© à¨®à©à¨°à©à¨¨à¨¾ à¨à¨à¨²à©à¨à¨¡":"MP","à¨®à¨¾à¨°à¨à©à¨¨à©à¨à¨¿à¨":"MQ","à¨®à¨¾à¨°à¨¿à¨à¨¾à¨¨à©à¨":"MR","à¨®à©à¨à¨à©à¨¸à©à¨°à¨":"MS","à¨®à¨¾à¨²à¨à¨¾":"MT","à¨®à©à¨°à©à¨¶à©à¨à¨¸":"MU","à¨®à¨¾à¨²à¨¦à©à¨µà¨¸":"MV","à¨®à¨²à¨¾à¨µà©":"MW","à¨®à©à¨à¨¸à©à¨à©":"MX","à¨®à¨²à©à¨¶à©à¨":"MY","à¨®à©à¨à¨¾à¨à¨¬à¨¿à¨":"MZ","à¨¨à¨®à©à¨¬à©à¨":"NA","à¨¨à¨¿à¨ à¨à©à¨²à©à¨¡à©à¨¨à©à¨":"NC","à¨¨à¨¾à¨à¨à¨°":"NE","à¨¨à©à¨°à¨«à©à¨²à¨ à¨à¨à¨²à©à¨à¨¡":"NF","à¨¨à¨¾à¨à¨à©à¨°à©à¨":"NG","à¨¨à¨¿à¨à¨¾à¨°à¨¾à¨à©à¨":"NI","à¨¨à©à¨¦à¨°à¨²à©à¨à¨¡à¨¸":"NL","à¨¨à¨¾à¨°à¨µà©":"NO","à¨¨à©à¨ªà¨¾à¨²":"NP","à¨¨à©à¨°à©":"NR","à¨¨à¨¿à¨¯à©":"NU","à¨¨à¨¿à¨à©à©à¨²à©à¨à¨¡":"NZ","à¨à¨®à¨¾à¨¨":"OM","à¨ªà¨¨à¨¾à¨®à¨¾":"PA","à¨ªà©à¨°à©":"PE","à¨«à©à¨°à©à¨à¨ à¨ªà©à¨²à©à¨¨à©à¨¶à©à¨":"PF","à¨ªà¨ªà©à¨ à¨¨à¨¿à¨ à¨à¨¿à¨¨à©":"PG","à¨«à¨¿à¨²à¨¿à¨ªà©à¨à¨¸":"PH","à¨ªà¨¾à¨à¨¿à¨¸à¨¤à¨¾à¨¨":"PK","à¨ªà©à¨²à©à¨à¨¡":"PL","à¨ªà¨¿à¨à¨à©à¨°à¨¨ à¨à¨à¨²à©à¨à¨¡":"PN","à¨ªà¨¿à¨à¨°à¨à© à¨°à¨¿à¨à©":"PR","à¨«à¨¿à¨²à¨¿à¨¸à¨¤à©à¨¨à© à¨à¨²à¨¾à¨à©":"PS","à¨ªà©à¨°à¨¤à¨à¨¾à¨²":"PT","à¨ªà¨²à¨¾à¨":"PW","à¨ªà©à¨°à¨¾à¨à©à¨":"PY","à¨à¨¤à¨°":"QA","à¨¸à©à¨®à¨¾à¨à¨¤ à¨à¨¶à©à¨à¨¨à©à¨":"QO","à¨°à©à¨¯à©à¨¨à©à¨à¨¨":"RE","à¨°à©à¨®à¨¾à¨¨à©à¨":"RO","à¨¸à¨°à¨¬à©à¨":"RS","à¨°à©à¨¸":"RU","à¨°à¨µà¨¾à¨à¨¡à¨¾":"RW","à¨¸à¨à¨¦à© à¨à¨°à¨¬":"SA","à¨¸à©à¨²à©à¨®à©à¨¨ à¨à¨à¨²à©à¨à¨¡":"SB","à¨¸à©à¨¶à¨²":"SC","à¨¸à©à¨¡à¨¾à¨¨":"SD","à¨¸à¨µà©à¨¡à¨¨":"SE","à¨¸à¨¿à©°à¨à¨¾à¨ªà©à¨°":"SG","à¨¸à¨²à©à¨µà©à¨¨à©à¨":"SI","à¨¸à¨²à©à¨µà¨¾à¨à©à¨":"SK","à¨¸à¨¿à¨¯à¨°à¨¾ à¨²à¨¿à¨à¨¨":"SL","à¨¸à©à¨¨ à¨®à©à¨°à©à¨¨à©":"SM","à¨¸à©à¨¨à©à¨à¨²":"SN","à¨¸à©à¨®à¨¾à¨²à©à¨":"SO","à¨¸à©à¨°à©à¨¨à¨¾à¨®":"SR","à¨¦à©±à¨à¨£à© à¨¸à©à¨¡à¨¾à¨¨":"SS","à¨¸à¨¾à¨ à¨à©à¨® à¨à¨¤à© à¨ªà©à¨°à¨¿à©°à¨¸à¨¿à¨ª":"ST","à¨à¨² à¨¸à¨²à¨µà©à¨¡à©à¨°":"SV","à¨¸à¨¿à©°à¨ à¨®à¨¾à¨°à¨à¨¿à¨¨":"SX","à¨¸à©à¨°à©à¨":"SY","à¨¸à¨µà¨¾à©à©à¨²à©à¨à¨¡":"SZ","à¨¤à¨°à¨¿à¨¸à¨¤à¨¨ à¨¦à¨¾ à¨à©à¨¨à¨¹à¨¾":"TA","à¨à¨¾à¨¡":"TD","à¨«à©à¨°à©à¨à¨ à¨¦à©±à¨à¨£à© à¨ªà©à¨°à¨¦à©à¨¶":"TF","à¨à©à¨à©":"TG","à¨¥à¨¾à¨à¨²à©à¨à¨¡":"TH","à¨¤à©à¨¾à¨à¨¿à¨¸à¨¤à¨¾à¨¨":"TJ","à¨à©à¨à©à¨²à©":"TK","à¨à¨¿à¨®à©à¨°-à¨²à©à¨¸à¨à©":"TL","à¨¤à©à¨°à¨à¨®à©à¨¨à¨¿à¨¸à¨¤à¨¾à¨¨":"TM","à¨à©à¨¨à©à¨¶à©à¨":"TN","à¨à©à¨à¨à¨¾":"TO","à¨¤à©à¨°à¨à©":"TR","à¨à©à¨µà¨¾à¨²à©":"TV","à¨¤à¨¾à¨à¨µà¨¾à¨¨":"TW","à¨¤à¨¨à©à¨¾à¨¨à©à¨":"TZ","à¨¯à©à¨à¨°à©à¨¨":"UA","à¨¯à©à¨à¨¾à¨à¨¡à¨¾":"UG","à¨¯à©.à¨à¨¸. à¨à©à¨à© à¨¸à©à¨®à¨¾à¨à¨¤ à¨à¨à¨²à©à¨à¨¡":"UM","à¨¯à©à¨¨à¨¾à¨à¨à¨¿à¨¡ à¨¸à¨à©à¨à¨¸":"US","à¨à¨°à©à¨à¨µà©":"UY","à¨à©à¨¬à©à¨à¨¿à¨¸à¨¤à¨¾à¨¨":"UZ","à¨µà©à¨¨à©à©à©à¨à¨²à¨¾":"VE","à¨¬à©à¨°à¨¿à¨à¨¿à¨¶ à¨µà¨°à¨à¨¿à¨¨ à¨à¨à¨²à©à¨à¨¡":"VG","à¨¯à©.à¨à¨¸. à¨µà¨°à¨à¨¿à¨¨ à¨à¨à¨²à©à¨à¨¡":"VI","à¨µà©à¨à¨¤à¨¨à¨¾à¨®":"VN","à¨µà¨¨à©à¨à¨¤à©":"VU","à¨¸à¨®à©à¨":"WS","à¨¯à¨®à¨¨":"YE","à¨®à©à¨¯à©à¨":"YT","à¨¦à©±à¨à¨£à© à¨à¨«à¨°à©à¨à¨¾":"018","à©à¨¾à¨®à¨¬à©à¨":"ZM","à©à¨¿à©°à¨¬à¨¾à¨¬à¨µà©":"ZW","à¨à¨£à¨à¨¾à¨£ à¨à©à¨¤à¨°":"ZZ","à¨à¨¶à©à¨":"142","à¨®à©±à¨§ à¨à¨¶à©à¨":"143","à¨ªà©±à¨à¨®à© à¨à¨¶à©à¨":"145","à¨¯à©à¨°à©à¨ª":"150","à¨ªà©à¨°à¨¬à© à¨¯à©à¨°à©à¨ª":"151","à¨à©±à¨¤à¨°à© à¨¯à©à¨°à©à¨ª":"154","à¨ªà©±à¨à¨®à© à¨¯à©à¨°à©à¨ª":"155","à¨²à©à¨à¨¿à¨¨ à¨à¨®à¨°à©à¨à¨¾":"419","à¨¸à©°à¨¸à¨¾à¨°":"001","à¨à¨«à¨°à©à¨à¨¾":"002","à¨à©±à¨¤à¨°à© à¨à¨®à¨°à©à¨à¨¾":"021","à¨¦à©±à¨à¨£à© à¨à¨®à¨°à©à¨à¨¾":"005","à¨à¨¶à©à¨à¨¨à©à¨":"009","à¨ªà©±à¨à¨®à© à¨à¨«à¨°à©à¨à¨¾":"011","à¨®à©±à¨§ à¨à¨«à¨°à©à¨à¨¾":"013","à¨ªà©à¨°à¨¬à© à¨à¨«à¨°à©à¨à¨¾":"014","à¨à©±à¨¤à¨°à© à¨à¨«à¨°à©à¨à¨¾":"015","à¨µà¨¿à¨à¨à¨¾à¨°à¨²à¨¾ à¨à¨«à¨°à©à¨à¨¾":"017","à¨à¨®à¨°à©à¨à¨¾à¨¸":"019","à¨à©à¨°à©à¨¬à©à¨à¨¨":"029","à¨ªà©à¨°à¨¬à© à¨à¨¶à©à¨":"030","à¨¦à©±à¨à¨£à© à¨à¨¶à©à¨":"034","à¨¦à©±à¨à¨£-à¨ªà©à¨°à¨¬à© à¨à¨¶à©à¨":"035","à¨¦à©±à¨à¨£à© à¨¯à©à¨°à©à¨ª":"039","à¨®à©à¨²à¨¾à¨¨à©à¨¶à©à¨":"054","à¨®à¨¾à¨à¨à©à¨°à©à¨¨à©à¨¶à©à¨à¨¨ à¨à©à¨¤à¨°":"057","à¨¯à©.à¨à©±à¨¸. à¨¸à©à¨®à¨¾à¨à¨¤ à¨à¨à¨²à©à¨à¨¡":"UM"};
ilib.data.ctrynames_pa_Arab_PK = {"IN":"IN","PK":"Ù¾Ú©Ø³ØªØ§Ù"};
ilib.data.ctrynames_pl = {"Azja":"142","Azja Årodkowa":"143","Azja Zachodnia":"145","Europa":"150","Europa Wschodnia":"151","Europa PÃ³Ånocna":"154","Europa Zachodnia":"155","Ameryka ÅaciÅska":"419","Åwiat":"001","Afryka":"002","Ameryka PÃ³Ånocna":"003","Ameryka PoÅudniowa":"005","Oceania":"009","Afryka Zachodnia":"011","Ameryka Årodkowa":"013","Afryka Wschodnia":"014","Afryka PÃ³Ånocna":"015","Afryka Årodkowa":"017","Afryka PoÅudniowa":"018","Ameryka":"019","Ameryka PÃ³Ånocna - Kanada, USA":"021","Karaiby":"029","Azja Wschodnia":"030","Azja PoÅudniowa":"034","Azja PoÅudniowo-Wschodnia":"035","Europa PoÅudniowa":"039","Australazja":"053","Melanezja":"054","Mikronezja":"057","Polinezja":"061","Wyspa WniebowstÄpienia":"AC","Andora":"AD","Zjednoczone Emiraty Arabskie":"AE","Afganistan":"AF","Antigua i Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Antyle Holenderskie":"AN","Angola":"AO","Antarktyka":"AQ","Argentyna":"AR","Samoa AmerykaÅskie":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Wyspy Alandzkie":"AX","AzerbejdÅ¼an":"AZ","BoÅnia i Hercegowina":"BA","Barbados":"BB","Bangladesz":"BD","Belgia":"BE","Burkina Faso":"BF","BuÅgaria":"BG","Bahrajn":"BH","Burundi":"BI","Benin":"BJ","Saint-BarthÃ©lemy":"BL","Bermudy":"BM","Brunei Darussalam":"BN","Boliwia":"BO","Niderlandy Karaibskie":"BQ","Brazylia":"BR","Bahamy":"BS","Bhutan":"BT","Wyspa Bouveta":"BV","Botswana":"BW","BiaÅoruÅ":"BY","Belize":"BZ","Kanada":"CA","Wyspy Kokosowe":"CC","Demokratyczna Republika Konga":"CD","Republika ÅrodkowoafrykaÅska":"CF","Kongo":"CG","Szwajcaria":"CH","WybrzeÅ¼e KoÅci SÅoniowej":"CI","Wyspy Cooka":"CK","Chile":"CL","Kamerun":"CM","Chiny":"CN","Kolumbia":"CO","Clipperton":"CP","Kostaryka":"CR","Kuba":"CU","Republika Zielonego PrzylÄdka":"CV","CuraÃ§ao":"CW","Wyspa BoÅ¼ego Narodzenia":"CX","Cypr":"CY","Czechy":"CZ","Niemcy":"DE","Diego Garcia":"DG","DÅ¼ibuti":"DJ","Dania":"DK","Dominika":"DM","Republika DominikaÅska":"DO","Algieria":"DZ","Ceuta i Melilla":"EA","Ekwador":"EC","Estonia":"EE","Egipt":"EG","Sahara Zachodnia":"EH","Erytrea":"ER","Hiszpania":"ES","Etiopia":"ET","Unia Europejska":"EU","Finlandia":"FI","FidÅ¼i":"FJ","Falklandy":"FK","Federalne Stany Mikronezji":"FM","Wyspy Owcze":"FO","Francja":"FR","Gabon":"GA","Wielka Brytania":"GB","Grenada":"GD","Gruzja":"GE","Gujana Francuska":"GF","Wyspa Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","Grenlandia":"GL","Gambia":"GM","Gwinea":"GN","Gwadelupa":"GP","Gwinea RÃ³wnikowa":"GQ","Grecja":"GR","Georgia PoÅudniowa i Sandwich PoÅudniowy":"GS","Gwatemala":"GT","Guam":"GU","Gwinea Bissau":"GW","Gujana":"GY","Hongkong SAR":"HK","Wyspy Heard i McDonalda":"HM","Honduras":"HN","Chorwacja":"HR","Haiti":"HT","WÄgry":"HU","Wyspy Kanaryjskie":"IC","Indonezja":"ID","Irlandia":"IE","Izrael":"IL","Wyspa Man":"IM","Indie":"IN","Terytorium Brytyjskie Oceanu Indyjskiego":"IO","Irak":"IQ","Iran":"IR","Islandia":"IS","WÅochy":"IT","Wyspa Jersey":"JE","Jamajka":"JM","Jordania":"JO","Japonia":"JP","Kenia":"KE","Kirgistan":"KG","KambodÅ¼a":"KH","Kiribati":"KI","Komory":"KM","Saint Kitts i Nevis":"KN","Korea PÃ³Ånocna":"KP","Korea PoÅudniowa":"KR","Kuwejt":"KW","Kajmany":"KY","Kazachstan":"KZ","Laos":"LA","Liban":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Litwa":"LT","Luksemburg":"LU","Åotwa":"LV","Libia":"LY","Maroko":"MA","Monako":"MC","MoÅdawia":"MD","CzarnogÃ³ra":"ME","Saint-Martin":"MF","Madagaskar":"MG","Wyspy Marshalla":"MH","Macedonia":"MK","Mali":"ML","Birma":"MM","Mongolia":"MN","Makau SAR":"MO","Mariany PÃ³Ånocne":"MP","Martynika":"MQ","Mauretania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Malediwy":"MV","Malawi":"MW","Meksyk":"MX","Malezja":"MY","Mozambik":"MZ","Namibia":"NA","Nowa Kaledonia":"NC","Niger":"NE","Norfolk":"NF","Nigeria":"NG","Nikaragua":"NI","Holandia":"NL","Norwegia":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Nowa Zelandia":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Polinezja Francuska":"PF","Papua Nowa Gwinea":"PG","Filipiny":"PH","Pakistan":"PK","Polska":"PL","Saint-Pierre i Miquelon":"PM","Pitcairn":"PN","Portoryko":"PR","Terytoria PalestyÅskie":"PS","Portugalia":"PT","Palau":"PW","Paragwaj":"PY","Katar":"QA","Oceania inne":"QO","Reunion":"RE","Rumunia":"RO","Serbia":"RS","Rosja":"RU","Rwanda":"RW","Arabia Saudyjska":"SA","Wyspy Salomona":"SB","Seszele":"SC","Sudan":"SD","Szwecja":"SE","Singapur":"SG","Wyspa ÅwiÄtej Heleny":"SH","SÅowenia":"SI","Svalbard i Jan Mayen":"SJ","SÅowacja":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Surinam":"SR","Sudan PoÅudniowy":"SS","Wyspy ÅwiÄtego Tomasza i KsiÄÅ¼Äca":"ST","Salwador":"SV","Sint Maarten":"SX","Syria":"SY","Suazi":"SZ","Tristan da Cunha":"TA","Turks i Caicos":"TC","Czad":"TD","Francuskie Terytoria PoÅudniowe":"TF","Togo":"TG","Tajlandia":"TH","TadÅ¼ykistan":"TJ","Tokelau":"TK","Timor Wschodni":"TL","Turkmenistan":"TM","Tunezja":"TN","Tonga":"TO","Turcja":"TR","Trynidad i Tobago":"TT","Tuvalu":"TV","Tajwan":"TW","Tanzania":"TZ","Ukraina":"UA","Uganda":"UG","Dalekie Wyspy Mniejsze StanÃ³w Zjednoczonych":"UM","Stany Zjednoczone":"US","Urugwaj":"UY","Uzbekistan":"UZ","Watykan":"VA","Saint Vincent i Grenadyny":"VC","Wenezuela":"VE","Brytyjskie Wyspy Dziewicze":"VG","Wyspy Dziewicze StanÃ³w Zjednoczonych":"VI","Wietnam":"VN","Vanuatu":"VU","Wallis i Futuna":"WF","Samoa":"WS","Jemen":"YE","Majotta":"YT","Republika PoÅudniowej Afryki":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Nieznany region":"ZZ"};
ilib.data.ctrynames_pt = {"Ãsia":"142","Ãsia Central":"143","Ãsia Ocidental":"145","Europa":"150","Europa Oriental":"151","Europa Setentrional":"154","Europa Ocidental":"155","AmÃ©rica Latina":"419","Mundo":"001","Ãfrica":"002","AmÃ©rica do Norte":"003","AmÃ©rica do Sul":"005","Oceania":"009","Ãfrica Ocidental":"011","AmÃ©rica Central":"013","Ãfrica Oriental":"014","Ãfrica do Norte":"015","Ãfrica Central":"017","Ãfrica Austral":"018","AmÃ©ricas":"019","AmÃ©rica Setentrional":"021","Caribe":"029","Ãsia Oriental":"030","Ãsia do Sul":"034","Ãsia Centro-Oriental":"035","Europa do Sul":"039","AustrÃ¡lia e Nova ZelÃ¢ndia":"053","MelanÃ©sia":"054","RegiÃ£o da MicronÃ©sia":"057","PolinÃ©sia":"061","Ilha de AscensÃ£o":"AC","Andorra":"AD","Emirados Ãrabes Unidos":"AE","AfeganistÃ£o":"AF","AntÃ­gua e Barbuda":"AG","Anguilla":"AI","AlbÃ¢nia":"AL","ArmÃªnia":"AM","Antilhas Holandesas":"AN","Angola":"AO","AntÃ¡rtida":"AQ","Argentina":"AR","Samoa Americana":"AS","Ãustria":"AT","AustrÃ¡lia":"AU","Aruba":"AW","Ilhas Aland":"AX","AzerbaijÃ£o":"AZ","BÃ³snia-Herzegovina":"BA","Barbados":"BB","Bangladesh":"BD","BÃ©lgica":"BE","Burquina Faso":"BF","BulgÃ¡ria":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","SÃ£o Bartolomeu":"BL","Bermudas":"BM","Brunei":"BN","BolÃ­via":"BO","Brasil":"BR","Bahamas":"BS","ButÃ£o":"BT","Ilha Bouvet":"BV","Botsuana":"BW","Belarus":"BY","Belize":"BZ","CanadÃ¡":"CA","Ilhas Coco":"CC","Congo-Kinshasa":"CD","RepÃºblica Centro-Africana":"CF","Congo - Brazzaville":"CG","SuÃ­Ã§a":"CH","Costa do Marfim":"CI","Ilhas Cook":"CK","Chile":"CL","RepÃºblica dos CamarÃµes":"CM","China":"CN","ColÃ´mbia":"CO","Ilha de Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","Cabo Verde":"CV","Ilhas Natal":"CX","Chipre":"CY","RepÃºblica Tcheca":"CZ","Alemanha":"DE","Diego Garcia":"DG","Djibuti":"DJ","Dinamarca":"DK","Dominica":"DM","RepÃºblica Dominicana":"DO","ArgÃ©lia":"DZ","Ceuta e Melilha":"EA","Equador":"EC","EstÃ´nia":"EE","Egito":"EG","Saara Ocidental":"EH","Eritreia":"ER","Espanha":"ES","EtiÃ³pia":"ET","UniÃ£o Europeia":"EU","FinlÃ¢ndia":"FI","Fiji":"FJ","Ilhas Malvinas":"FK","MicronÃ©sia":"FM","Ilhas Faroe":"FO","FranÃ§a":"FR","GabÃ£o":"GA","Reino Unido":"GB","Granada":"GD","GeÃ³rgia":"GE","Guiana Francesa":"GF","Guernsey":"GG","Gana":"GH","Gibraltar":"GI","GroÃªnlandia":"GL","GÃ¢mbia":"GM","GuinÃ©":"GN","Guadalupe":"GP","GuinÃ© Equatorial":"GQ","GrÃ©cia":"GR","GeÃ³rgia do Sul e Ilhas Sandwich do Sul":"GS","Guatemala":"GT","Guam":"GU","GuinÃ© Bissau":"GW","Guiana":"GY","Hong Kong, RAE da China":"HK","Ilha Heard e Ilhas McDonald":"HM","Honduras":"HN","CroÃ¡cia":"HR","Haiti":"HT","Hungria":"HU","Ilhas CanÃ¡rias":"IC","IndonÃ©sia":"ID","Irlanda":"IE","Israel":"IL","Ilha de Man":"IM","Ãndia":"IN","TerritÃ³rio BritÃ¢nico do Oceano Ãndico":"IO","Iraque":"IQ","IrÃ£":"IR","IslÃ¢ndia":"IS","ItÃ¡lia":"IT","Jersey":"JE","Jamaica":"JM","JordÃ¢nia":"JO","JapÃ£o":"JP","QuÃªnia":"KE","QuirguistÃ£o":"KG","Camboja":"KH","Quiribati":"KI","Comores":"KM","SÃ£o CristovÃ£o e Nevis":"KN","Coreia do Norte":"KP","Coreia do Sul":"KR","Kuwait":"KW","Ilhas Caiman":"KY","CasaquistÃ£o":"KZ","Laos":"LA","LÃ­bano":"LB","Santa LÃºcia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","LibÃ©ria":"LR","Lesoto":"LS","LituÃ¢nia":"LT","Luxemburgo":"LU","LetÃ´nia":"LV","LÃ­bia":"LY","Marrocos":"MA","MÃ´naco":"MC","MoldÃ¡via":"MD","Montenegro":"ME","SÃ£o Martinho":"MF","Madagascar":"MG","Ilhas Marshall":"MH","MacedÃ´nia":"MK","Mali":"ML","Mianmar [BirmÃ¢nia]":"MM","MongÃ³lia":"MN","Macau, RAE da China":"MO","Ilhas Marianas do Norte":"MP","Martinica":"MQ","MauritÃ¢nia":"MR","Montserrat":"MS","Malta":"MT","MaurÃ­cio":"MU","Maldivas":"MV","Malawi":"MW","MÃ©xico":"MX","MalÃ¡sia":"MY","MoÃ§ambique":"MZ","NamÃ­bia":"NA","Nova CaledÃ´nia":"NC","NÃ­ger":"NE","Ilha Norfolk":"NF","NigÃ©ria":"NG","NicarÃ¡gua":"NI","Holanda":"NL","Noruega":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Nova ZelÃ¢ndia":"NZ","OmÃ£":"OM","PanamÃ¡":"PA","Peru":"PE","PolinÃ©sia Francesa":"PF","Papua-Nova GuinÃ©":"PG","Filipinas":"PH","PaquistÃ£o":"PK","PolÃ´nia":"PL","Saint Pierre e Miquelon":"PM","Ilhas Pitcairn":"PN","Porto Rico":"PR","TerritÃ³rios palestinos":"PS","Portugal":"PT","Palau":"PW","Paraguai":"PY","Catar":"QA","Oceania Remota":"QO","ReuniÃ£o":"RE","RomÃªnia":"RO","SÃ©rvia":"RS","RÃºssia":"RU","Ruanda":"RW","ArÃ¡bia Saudita":"SA","Ilhas SalomÃ£o":"SB","Seychelles":"SC","SudÃ£o":"SD","SuÃ©cia":"SE","Cingapura":"SG","Santa Helena":"SH","EslovÃªnia":"SI","Svalbard e Jan Mayen":"SJ","EslovÃ¡quia":"SK","Serra Leoa":"SL","San Marino":"SM","Senegal":"SN","SomÃ¡lia":"SO","Suriname":"SR","SudÃ£o do Sul":"SS","SÃ£o TomÃ© e PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","SÃ­ria":"SY","SuazilÃ¢ndia":"SZ","TristÃ£o da Cunha":"TA","Ilhas Turks e Caicos":"TC","Chade":"TD","TerritÃ³rios Franceses do Sul":"TF","Togo":"TG","TailÃ¢ndia":"TH","TadjiquistÃ£o":"TJ","Tokelau":"TK","Timor-Leste":"TL","TurcomenistÃ£o":"TM","TunÃ­sia":"TN","Tonga":"TO","Turquia":"TR","Trinidad e Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","TanzÃ¢nia":"TZ","UcrÃ¢nia":"UA","Uganda":"UG","Ilhas Distantes dos EUA":"UM","Estados Unidos":"US","Uruguai":"UY","UzbequistÃ£o":"UZ","Vaticano":"VA","SÃ£o Vicente e Granadinas":"VC","Venezuela":"VE","Ilhas Virgens BritÃ¢nicas":"VG","Ilhas Virgens dos EUA":"VI","VietnÃ£":"VN","Vanuatu":"VU","Wallis e Futuna":"WF","Samoa":"WS","IÃªmen":"YE","Mayotte":"YT","Ãfrica do Sul":"ZA","ZÃ¢mbia":"ZM","ZimbÃ¡bue":"ZW","RegiÃ£o desconhecida":"ZZ"};
ilib.data.ctrynames_pt_AO = {"Europa do Norte":"154","OceÃ¢nia":"009","Norte de Ãfrica":"015","Sudeste AsiÃ¡tico":"035","AustralÃ¡sia":"053","Anguila":"AI","ArmÃ©nia":"AM","Ilhas Ãland":"AX","BarÃ©m":"BH","Benim":"BJ","PaÃ­ses Baixos Caribenhos":"BQ","BielorrÃºssia":"BY","Ilhas Cocos":"CC","Congo-Brazzaville":"CG","CamarÃµes":"CM","CuraÃ§au":"CW","Ilha do Natal":"CX","RepÃºblica Checa":"CZ","Jibuti":"DJ","DomÃ­nica":"DM","EstÃ³nia":"EE","Egipto":"EG","Ilhas Falkland":"FK","Ilhas FaroÃ©":"FO","GronelÃ¢ndia":"GL","Guame":"GU","GuinÃ©-Bissau":"GW","RegiÃ£o Administrativa Especial de Hong Kong":"HK","IrÃ£o":"IR","QuÃ©nia":"KE","QuirguizistÃ£o":"KG","SÃ£o CristÃ³vÃ£o e Neves":"KN","Ilhas CaimÃ£o":"KY","CazaquistÃ£o":"KZ","LetÃ³nia":"LV","MÃ³naco":"MC","MadagÃ¡scar":"MG","MacedÃ³nia":"MK","RegiÃ£o Administrativa Especial de Macau":"MO","Monserrate":"MS","MaurÃ­cias":"MU","Nova CaledÃ³nia":"NC","PaÃ­ses Baixos":"NL","PapuÃ¡sia-Nova GuinÃ©":"PG","PolÃ³nia":"PL","Pitcairn":"PN","TerritÃ³rio Palestiniano":"PS","OceÃ¢nia Insular":"QO","RomÃ©nia":"RO","Seicheles":"SC","Singapura":"SG","EslovÃ©nia":"SI","SÃ£o Marino":"SM","Ilhas Turcas e Caicos":"TC","TajiquistÃ£o":"TJ","TurquemenistÃ£o":"TM","Trindade e Tobago":"TT","UsbequistÃ£o":"UZ","Vietname":"VN","IÃ©men":"YE","Maiote":"YT","ZimbabuÃ©":"ZW","RegiÃ£o desconhecida ou invÃ¡lida":"ZZ"};
ilib.data.ctrynames_pt_CV = {"Europa do Norte":"154","OceÃ¢nia":"009","Norte de Ãfrica":"015","Sudeste AsiÃ¡tico":"035","AustralÃ¡sia":"053","Anguila":"AI","ArmÃ©nia":"AM","Ilhas Ãland":"AX","BarÃ©m":"BH","Benim":"BJ","PaÃ­ses Baixos Caribenhos":"BQ","BielorrÃºssia":"BY","Ilhas Cocos":"CC","Congo-Brazzaville":"CG","CamarÃµes":"CM","CuraÃ§au":"CW","Ilha do Natal":"CX","RepÃºblica Checa":"CZ","Jibuti":"DJ","DomÃ­nica":"DM","EstÃ³nia":"EE","Egipto":"EG","Ilhas Falkland":"FK","Ilhas FaroÃ©":"FO","GronelÃ¢ndia":"GL","Guame":"GU","GuinÃ©-Bissau":"GW","RegiÃ£o Administrativa Especial de Hong Kong":"HK","IrÃ£o":"IR","QuÃ©nia":"KE","QuirguizistÃ£o":"KG","SÃ£o CristÃ³vÃ£o e Neves":"KN","Ilhas CaimÃ£o":"KY","CazaquistÃ£o":"KZ","LetÃ³nia":"LV","MÃ³naco":"MC","MadagÃ¡scar":"MG","MacedÃ³nia":"MK","RegiÃ£o Administrativa Especial de Macau":"MO","Monserrate":"MS","MaurÃ­cias":"MU","Nova CaledÃ³nia":"NC","PaÃ­ses Baixos":"NL","PapuÃ¡sia-Nova GuinÃ©":"PG","PolÃ³nia":"PL","Pitcairn":"PN","TerritÃ³rio Palestiniano":"PS","OceÃ¢nia Insular":"QO","RomÃ©nia":"RO","Seicheles":"SC","Singapura":"SG","EslovÃ©nia":"SI","SÃ£o Marino":"SM","Ilhas Turcas e Caicos":"TC","TajiquistÃ£o":"TJ","TurquemenistÃ£o":"TM","Trindade e Tobago":"TT","UsbequistÃ£o":"UZ","Vietname":"VN","IÃ©men":"YE","Maiote":"YT","ZimbabuÃ©":"ZW","RegiÃ£o desconhecida ou invÃ¡lida":"ZZ"};
ilib.data.ctrynames_pt_GW = {"Europa do Norte":"154","OceÃ¢nia":"009","Norte de Ãfrica":"015","Sudeste AsiÃ¡tico":"035","AustralÃ¡sia":"053","Anguila":"AI","ArmÃ©nia":"AM","Ilhas Ãland":"AX","BarÃ©m":"BH","Benim":"BJ","PaÃ­ses Baixos Caribenhos":"BQ","BielorrÃºssia":"BY","Ilhas Cocos":"CC","Congo-Brazzaville":"CG","CamarÃµes":"CM","CuraÃ§au":"CW","Ilha do Natal":"CX","RepÃºblica Checa":"CZ","Jibuti":"DJ","DomÃ­nica":"DM","EstÃ³nia":"EE","Egipto":"EG","Ilhas Falkland":"FK","Ilhas FaroÃ©":"FO","GronelÃ¢ndia":"GL","Guame":"GU","GuinÃ©-Bissau":"GW","RegiÃ£o Administrativa Especial de Hong Kong":"HK","IrÃ£o":"IR","QuÃ©nia":"KE","QuirguizistÃ£o":"KG","SÃ£o CristÃ³vÃ£o e Neves":"KN","Ilhas CaimÃ£o":"KY","CazaquistÃ£o":"KZ","LetÃ³nia":"LV","MÃ³naco":"MC","MadagÃ¡scar":"MG","MacedÃ³nia":"MK","RegiÃ£o Administrativa Especial de Macau":"MO","Monserrate":"MS","MaurÃ­cias":"MU","Nova CaledÃ³nia":"NC","PaÃ­ses Baixos":"NL","PapuÃ¡sia-Nova GuinÃ©":"PG","PolÃ³nia":"PL","Pitcairn":"PN","TerritÃ³rio Palestiniano":"PS","OceÃ¢nia Insular":"QO","RomÃ©nia":"RO","Seicheles":"SC","Singapura":"SG","EslovÃ©nia":"SI","SÃ£o Marino":"SM","Ilhas Turcas e Caicos":"TC","TajiquistÃ£o":"TJ","TurquemenistÃ£o":"TM","Trindade e Tobago":"TT","UsbequistÃ£o":"UZ","Vietname":"VN","IÃ©men":"YE","Maiote":"YT","ZimbabuÃ©":"ZW","RegiÃ£o desconhecida ou invÃ¡lida":"ZZ"};
ilib.data.ctrynames_pt_MO = {"Europa do Norte":"154","OceÃ¢nia":"009","Norte de Ãfrica":"015","Sudeste AsiÃ¡tico":"035","AustralÃ¡sia":"053","Anguila":"AI","ArmÃ©nia":"AM","Ilhas Ãland":"AX","BarÃ©m":"BH","Benim":"BJ","PaÃ­ses Baixos Caribenhos":"BQ","BielorrÃºssia":"BY","Ilhas Cocos":"CC","Congo-Brazzaville":"CG","CamarÃµes":"CM","CuraÃ§au":"CW","Ilha do Natal":"CX","RepÃºblica Checa":"CZ","Jibuti":"DJ","DomÃ­nica":"DM","EstÃ³nia":"EE","Egipto":"EG","Ilhas Falkland":"FK","Ilhas FaroÃ©":"FO","GronelÃ¢ndia":"GL","Guame":"GU","GuinÃ©-Bissau":"GW","RegiÃ£o Administrativa Especial de Hong Kong":"HK","IrÃ£o":"IR","QuÃ©nia":"KE","QuirguizistÃ£o":"KG","SÃ£o CristÃ³vÃ£o e Neves":"KN","Ilhas CaimÃ£o":"KY","CazaquistÃ£o":"KZ","LetÃ³nia":"LV","MÃ³naco":"MC","MadagÃ¡scar":"MG","MacedÃ³nia":"MK","RegiÃ£o Administrativa Especial de Macau":"MO","Monserrate":"MS","MaurÃ­cias":"MU","Nova CaledÃ³nia":"NC","PaÃ­ses Baixos":"NL","PapuÃ¡sia-Nova GuinÃ©":"PG","PolÃ³nia":"PL","Pitcairn":"PN","TerritÃ³rio Palestiniano":"PS","OceÃ¢nia Insular":"QO","RomÃ©nia":"RO","Seicheles":"SC","Singapura":"SG","EslovÃ©nia":"SI","SÃ£o Marino":"SM","Ilhas Turcas e Caicos":"TC","TajiquistÃ£o":"TJ","TurquemenistÃ£o":"TM","Trindade e Tobago":"TT","UsbequistÃ£o":"UZ","Vietname":"VN","IÃ©men":"YE","Maiote":"YT","ZimbabuÃ©":"ZW","RegiÃ£o desconhecida ou invÃ¡lida":"ZZ"};
ilib.data.ctrynames_pt_MZ = {"Europa do Norte":"154","OceÃ¢nia":"009","Norte de Ãfrica":"015","Sudeste AsiÃ¡tico":"035","AustralÃ¡sia":"053","Anguila":"AI","ArmÃ©nia":"AM","Ilhas Ãland":"AX","BarÃ©m":"BH","Benim":"BJ","PaÃ­ses Baixos Caribenhos":"BQ","BielorrÃºssia":"BY","Ilhas Cocos":"CC","Congo-Brazzaville":"CG","CamarÃµes":"CM","CuraÃ§au":"CW","Ilha do Natal":"CX","RepÃºblica Checa":"CZ","Jibuti":"DJ","DomÃ­nica":"DM","EstÃ³nia":"EE","Egipto":"EG","Ilhas Falkland":"FK","Ilhas FaroÃ©":"FO","GronelÃ¢ndia":"GL","Guame":"GU","GuinÃ©-Bissau":"GW","RegiÃ£o Administrativa Especial de Hong Kong":"HK","IrÃ£o":"IR","QuÃ©nia":"KE","QuirguizistÃ£o":"KG","SÃ£o CristÃ³vÃ£o e Neves":"KN","Ilhas CaimÃ£o":"KY","CazaquistÃ£o":"KZ","LetÃ³nia":"LV","MÃ³naco":"MC","MadagÃ¡scar":"MG","MacedÃ³nia":"MK","RegiÃ£o Administrativa Especial de Macau":"MO","Monserrate":"MS","MaurÃ­cias":"MU","Nova CaledÃ³nia":"NC","PaÃ­ses Baixos":"NL","PapuÃ¡sia-Nova GuinÃ©":"PG","PolÃ³nia":"PL","Pitcairn":"PN","TerritÃ³rio Palestiniano":"PS","OceÃ¢nia Insular":"QO","RomÃ©nia":"RO","Seicheles":"SC","Singapura":"SG","EslovÃ©nia":"SI","SÃ£o Marino":"SM","Ilhas Turcas e Caicos":"TC","TajiquistÃ£o":"TJ","TurquemenistÃ£o":"TM","Trindade e Tobago":"TT","UsbequistÃ£o":"UZ","Vietname":"VN","IÃ©men":"YE","Maiote":"YT","ZimbabuÃ©":"ZW","RegiÃ£o desconhecida ou invÃ¡lida":"ZZ"};
ilib.data.ctrynames_pt_PT = {"Europa do Norte":"154","OceÃ¢nia":"009","Norte de Ãfrica":"015","Sudeste AsiÃ¡tico":"035","AustralÃ¡sia":"053","Anguila":"AI","ArmÃ©nia":"AM","Ilhas Ãland":"AX","BarÃ©m":"BH","Benim":"BJ","PaÃ­ses Baixos Caribenhos":"BQ","BielorrÃºssia":"BY","Ilhas Cocos":"CC","Congo-Brazzaville":"CG","CamarÃµes":"CM","CuraÃ§au":"CW","Ilha do Natal":"CX","RepÃºblica Checa":"CZ","Jibuti":"DJ","DomÃ­nica":"DM","EstÃ³nia":"EE","Egipto":"EG","Ilhas Falkland":"FK","Ilhas FaroÃ©":"FO","GronelÃ¢ndia":"GL","Guame":"GU","GuinÃ©-Bissau":"GW","RegiÃ£o Administrativa Especial de Hong Kong":"HK","IrÃ£o":"IR","QuÃ©nia":"KE","QuirguizistÃ£o":"KG","SÃ£o CristÃ³vÃ£o e Neves":"KN","Ilhas CaimÃ£o":"KY","CazaquistÃ£o":"KZ","LetÃ³nia":"LV","MÃ³naco":"MC","MadagÃ¡scar":"MG","MacedÃ³nia":"MK","RegiÃ£o Administrativa Especial de Macau":"MO","Monserrate":"MS","MaurÃ­cias":"MU","Nova CaledÃ³nia":"NC","PaÃ­ses Baixos":"NL","PapuÃ¡sia-Nova GuinÃ©":"PG","PolÃ³nia":"PL","Pitcairn":"PN","TerritÃ³rio Palestiniano":"PS","OceÃ¢nia Insular":"QO","RomÃ©nia":"RO","Seicheles":"SC","Singapura":"SG","EslovÃ©nia":"SI","SÃ£o Marino":"SM","Ilhas Turcas e Caicos":"TC","TajiquistÃ£o":"TJ","TurquemenistÃ£o":"TM","Trindade e Tobago":"TT","UsbequistÃ£o":"UZ","Vietname":"VN","IÃ©men":"YE","Maiote":"YT","ZimbabuÃ©":"ZW","RegiÃ£o desconhecida ou invÃ¡lida":"ZZ"};
ilib.data.ctrynames_pt_ST = {"Europa do Norte":"154","OceÃ¢nia":"009","Norte de Ãfrica":"015","Sudeste AsiÃ¡tico":"035","AustralÃ¡sia":"053","Anguila":"AI","ArmÃ©nia":"AM","Ilhas Ãland":"AX","BarÃ©m":"BH","Benim":"BJ","PaÃ­ses Baixos Caribenhos":"BQ","BielorrÃºssia":"BY","Ilhas Cocos":"CC","Congo-Brazzaville":"CG","CamarÃµes":"CM","CuraÃ§au":"CW","Ilha do Natal":"CX","RepÃºblica Checa":"CZ","Jibuti":"DJ","DomÃ­nica":"DM","EstÃ³nia":"EE","Egipto":"EG","Ilhas Falkland":"FK","Ilhas FaroÃ©":"FO","GronelÃ¢ndia":"GL","Guame":"GU","GuinÃ©-Bissau":"GW","RegiÃ£o Administrativa Especial de Hong Kong":"HK","IrÃ£o":"IR","QuÃ©nia":"KE","QuirguizistÃ£o":"KG","SÃ£o CristÃ³vÃ£o e Neves":"KN","Ilhas CaimÃ£o":"KY","CazaquistÃ£o":"KZ","LetÃ³nia":"LV","MÃ³naco":"MC","MadagÃ¡scar":"MG","MacedÃ³nia":"MK","RegiÃ£o Administrativa Especial de Macau":"MO","Monserrate":"MS","MaurÃ­cias":"MU","Nova CaledÃ³nia":"NC","PaÃ­ses Baixos":"NL","PapuÃ¡sia-Nova GuinÃ©":"PG","PolÃ³nia":"PL","Pitcairn":"PN","TerritÃ³rio Palestiniano":"PS","OceÃ¢nia Insular":"QO","RomÃ©nia":"RO","Seicheles":"SC","Singapura":"SG","EslovÃ©nia":"SI","SÃ£o Marino":"SM","Ilhas Turcas e Caicos":"TC","TajiquistÃ£o":"TJ","TurquemenistÃ£o":"TM","Trindade e Tobago":"TT","UsbequistÃ£o":"UZ","Vietname":"VN","IÃ©men":"YE","Maiote":"YT","ZimbabuÃ©":"ZW","RegiÃ£o desconhecida ou invÃ¡lida":"ZZ"};
ilib.data.ctrynames_pt_TL = {"Europa do Norte":"154","OceÃ¢nia":"009","Norte de Ãfrica":"015","Sudeste AsiÃ¡tico":"035","AustralÃ¡sia":"053","Anguila":"AI","ArmÃ©nia":"AM","Ilhas Ãland":"AX","BarÃ©m":"BH","Benim":"BJ","PaÃ­ses Baixos Caribenhos":"BQ","BielorrÃºssia":"BY","Ilhas Cocos":"CC","Congo-Brazzaville":"CG","CamarÃµes":"CM","CuraÃ§au":"CW","Ilha do Natal":"CX","RepÃºblica Checa":"CZ","Jibuti":"DJ","DomÃ­nica":"DM","EstÃ³nia":"EE","Egipto":"EG","Ilhas Falkland":"FK","Ilhas FaroÃ©":"FO","GronelÃ¢ndia":"GL","Guame":"GU","GuinÃ©-Bissau":"GW","RegiÃ£o Administrativa Especial de Hong Kong":"HK","IrÃ£o":"IR","QuÃ©nia":"KE","QuirguizistÃ£o":"KG","SÃ£o CristÃ³vÃ£o e Neves":"KN","Ilhas CaimÃ£o":"KY","CazaquistÃ£o":"KZ","LetÃ³nia":"LV","MÃ³naco":"MC","MadagÃ¡scar":"MG","MacedÃ³nia":"MK","RegiÃ£o Administrativa Especial de Macau":"MO","Monserrate":"MS","MaurÃ­cias":"MU","Nova CaledÃ³nia":"NC","PaÃ­ses Baixos":"NL","PapuÃ¡sia-Nova GuinÃ©":"PG","PolÃ³nia":"PL","Pitcairn":"PN","TerritÃ³rio Palestiniano":"PS","OceÃ¢nia Insular":"QO","RomÃ©nia":"RO","Seicheles":"SC","Singapura":"SG","EslovÃ©nia":"SI","SÃ£o Marino":"SM","Ilhas Turcas e Caicos":"TC","TajiquistÃ£o":"TJ","TurquemenistÃ£o":"TM","Trindade e Tobago":"TT","UsbequistÃ£o":"UZ","Vietname":"VN","IÃ©men":"YE","Maiote":"YT","ZimbabuÃ©":"ZW","RegiÃ£o desconhecida ou invÃ¡lida":"ZZ"};
ilib.data.ctrynames_ro = {"Asia":"142","Asia CentralÄ":"143","Asia OccidentalÄ":"145","Europa":"150","Europa OrientalÄ":"151","Europa SeptentrionalÄ":"154","Europa OccidentalÄ":"155","America LatinÄ":"419","Lume":"001","Africa":"002","America de Nord":"003","America de Sud":"005","Oceania":"009","Africa OccidentalÄ":"011","America CentralÄ":"013","Africa OrientalÄ":"014","Africa SeptentrionalÄ":"015","Africa CentralÄ":"017","Africa MeridionalÄ":"018","Americi":"019","America SeptentrionalÄ":"021","Caraibe":"029","Asia OrientalÄ":"030","Asia MeridionalÄ":"034","Asia de Sud-Est":"035","Europa MeridionalÄ":"039","Australasia":"053","Melanezia":"054","Regiunea Micronezia":"057","Polinezia":"061","Insula Ascension":"AC","Andorra":"AD","Emiratele Arabe Unite":"AE","Afganistan":"AF","Antigua Èi Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Antilele Olandeze":"AN","Angola":"AO","Antarctica":"AQ","Argentina":"AR","Samoa AmericanÄ":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Insulele Aland":"AX","Azerbaidjan":"AZ","Bosnia Èi HerÈegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgia":"BE","Burkina Faso":"BF","Bulgaria":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","SfÃ¢ntul Bartolomeu":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Insulele Caraibe Olandeze":"BQ","Brazilia":"BR","Bahamas":"BS","Bhutan":"BT","Insula Bouvet":"BV","Botswana":"BW","Bielorusia":"BY","Belize":"BZ","Canada":"CA","Insulele Cocos":"CC","Republica DemocratÄ Congo":"CD","Republica CentrafricanÄ":"CF","Congo":"CG","ElveÈia":"CH","Coasta de FildeÈ":"CI","Insulele Cook":"CK","Chile":"CL","Camerun":"CM","China":"CN","Columbia":"CO","Insula Clipperton":"CP","Costa Rica":"CR","Cuba":"CU","Capul Verde":"CV","CuraÃ§ao":"CW","Insula Christmas":"CX","Cipru":"CY","Republica CehÄ":"CZ","Germania":"DE","Diego Garcia":"DG","Djibouti":"DJ","Danemarca":"DK","Dominica":"DM","Republica DominicanÄ":"DO","Algeria":"DZ","Ceuta Åi Melilla":"EA","Ecuador":"EC","Estonia":"EE","Egipt":"EG","Sahara OccidentalÄ":"EH","Eritreea":"ER","Spania":"ES","Etiopia":"ET","Uniunea EuropeanÄ":"EU","Finlanda":"FI","Fiji":"FJ","Insulele Falkland":"FK","Micronezia":"FM","Insulele Feroe":"FO","FranÈa":"FR","Gabon":"GA","Marea Britanie":"GB","Grenada":"GD","Georgia":"GE","Guyana FrancezÄ":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","Groenlanda":"GL","Gambia":"GM","Guineea":"GN","Guadelupa":"GP","Guineea EcuatorialÄ":"GQ","Grecia":"GR","Georgia de Sud Åi Insulele Sandwich de Sud":"GS","Guatemala":"GT","Guam":"GU","Guineea-Bissau":"GW","Guyana":"GY","R.A.S. Hong Kong a Chinei":"HK","Insula Heard Èi Insulele McDonald":"HM","Honduras":"HN","CroaÈia":"HR","Haiti":"HT","Ungaria":"HU","Insulele Canare":"IC","Indonezia":"ID","Irlanda":"IE","Israel":"IL","Insula Man":"IM","India":"IN","Teritoriul Britanic din Oceanul Indian":"IO","Irak":"IQ","Iran":"IR","Islanda":"IS","Italia":"IT","Jersey":"JE","Jamaica":"JM","Iordania":"JO","Japonia":"JP","Kenya":"KE","KÃ¢rgÃ¢zstan":"KG","Cambodgia":"KH","Kiribati":"KI","Comore":"KM","SfÃ¢ntul Kitts Èi Nevis":"KN","Coreea de Nord":"KP","Coreea de Sud":"KR","Kuweit":"KW","Insulele Cayman":"KY","Kazahstan":"KZ","Laos":"LA","Liban":"LB","SfÃ¢nta Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Lituania":"LT","Luxemburg":"LU","Letonia":"LV","Libia":"LY","Maroc":"MA","Monaco":"MC","Republica Moldova":"MD","Muntenegru":"ME","SfÃ¢ntul Martin":"MF","Madagascar":"MG","Insulele Marshall":"MH","Macedonia":"MK","Mali":"ML","Myanmar":"MM","Mongolia":"MN","R.A.S. Macao a Chinei":"MO","Insulele Mariane de Nord":"MP","Martinica":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldive":"MV","Malawi":"MW","Mexic":"MX","Malaezia":"MY","Mozambic":"MZ","Namibia":"NA","Noua Caledonie":"NC","Niger":"NE","Insulele Norfolk":"NF","Nigeria":"NG","Nicaragua":"NI","Olanda":"NL","Norvegia":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Noua ZeelandÄ":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Polinezia FrancezÄ":"PF","Papua Noua Guinee":"PG","Filipine":"PH","Pakistan":"PK","Polonia":"PL","SfÃ¢ntul Pierre Èi Miquelon":"PM","Pitcairn":"PN","Porto Rico":"PR","Teritoriul Palestinian":"PS","Portugalia":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Oceania PerifericÄ":"QO","Reunion":"RE","RomÃ¢nia":"RO","Serbia":"RS","Rusia":"RU","Rwanda":"RW","Arabia SauditÄ":"SA","Insulele Solomon":"SB","Seychelles":"SC","Sudan":"SD","Suedia":"SE","Singapore":"SG","SfÃ¢nta Elena":"SH","Slovenia":"SI","Svalbard Èi Jan Mayen":"SJ","Slovacia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Surinam":"SR","Sudanul de Sud":"SS","Sao Tome Èi Principe":"ST","El Salvador":"SV","Sint Maarten":"SX","Siria":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Insulele Turks Èi Caicos":"TC","Ciad":"TD","Teritoriile Australe Èi Antarctice Franceze":"TF","Togo":"TG","Thailanda":"TH","Tadjikistan":"TJ","Tokelau":"TK","Timorul de Est":"TL","Turkmenistan":"TM","Tunisia":"TN","Tonga":"TO","Turcia":"TR","Trinidad-Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ucraina":"UA","Uganda":"UG","Insulele Minore ÃndepÄrtate ale Statelor Unite ale Americii":"UM","Statele Unite ale Americii":"US","Uruguay":"UY","Uzbekistan":"UZ","Vatican":"VA","SfÃ¢ntul Vincent Èi Grenadine":"VC","Venezuela":"VE","Insulele Virgine Britanice":"VG","Insulele Virgine S.U.A.":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis Èi Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","Africa de Sud":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Regiune necunoscutÄ":"ZZ"};
ilib.data.ctrynames_ru = {"ÐÐ·Ð¸Ñ":"142","Ð¡ÑÐµÐ´Ð½ÑÑ ÐÐ·Ð¸Ñ":"143","ÐÐ»Ð¸Ð¶Ð½Ð¸Ð¹ Ð¸ Ð¡ÑÐµÐ´Ð½Ð¸Ð¹ ÐÐ¾ÑÑÐ¾Ðº":"145","ÐÐ²ÑÐ¾Ð¿Ð°":"150","ÐÐ¾ÑÑÐ¾ÑÐ½Ð°Ñ ÐÐ²ÑÐ¾Ð¿Ð°":"151","Ð¡ÐµÐ²ÐµÑÐ½Ð°Ñ ÐÐ²ÑÐ¾Ð¿Ð°":"154","ÐÐ°Ð¿Ð°Ð´Ð½Ð°Ñ ÐÐ²ÑÐ¾Ð¿Ð°":"155","ÐÐ°ÑÐ¸Ð½ÑÐºÐ°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ°":"419","ÐÐ¸Ñ":"001","ÐÑÑÐ¸ÐºÐ°":"002","Ð¡ÐµÐ²ÐµÑÐ½Ð°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ°":"003","Ð®Ð¶Ð½Ð°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ°":"005","ÐÐºÐµÐ°Ð½Ð¸Ñ":"009","ÐÐ°Ð¿Ð°Ð´Ð½Ð°Ñ ÐÑÑÐ¸ÐºÐ°":"011","Ð¦ÐµÐ½ÑÑÐ°Ð»ÑÐ½Ð°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ°":"013","ÐÐ¾ÑÑÐ¾ÑÐ½Ð°Ñ ÐÑÑÐ¸ÐºÐ°":"014","Ð¡ÐµÐ²ÐµÑÐ½Ð°Ñ ÐÑÑÐ¸ÐºÐ°":"015","Ð¦ÐµÐ½ÑÑÐ°Ð»ÑÐ½Ð°Ñ ÐÑÑÐ¸ÐºÐ°":"017","Ð®Ð¶Ð½Ð°Ñ ÐÑÑÐ¸ÐºÐ°":"018","Ð¦ÐµÐ½ÑÑÐ°Ð»ÑÐ½Ð°Ñ Ð¸ Ð®Ð¶Ð½Ð°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ°":"019","Ð¡ÐµÐ²ÐµÑÐ½Ð°Ñ ÐÐ¼ÐµÑÐ¸ÐºÐ° - Ð¡Ð¨Ð Ð¸ ÐÐ°Ð½Ð°Ð´Ð°":"021","ÐÐ°ÑÐ¸Ð±Ñ":"029","ÐÐ¾ÑÑÐ¾ÑÐ½Ð°Ñ ÐÐ·Ð¸Ñ":"030","Ð®Ð¶Ð½Ð°Ñ ÐÐ·Ð¸Ñ":"034","Ð®Ð³Ð¾-ÐÐ¾ÑÑÐ¾ÑÐ½Ð°Ñ ÐÐ·Ð¸Ñ":"035","Ð®Ð¶Ð½Ð°Ñ ÐÐ²ÑÐ¾Ð¿Ð°":"039","ÐÐ²ÑÑÑÐ°Ð»Ð°Ð·Ð¸Ñ":"053","ÐÐµÐ»Ð°Ð½ÐµÐ·Ð¸Ñ":"054","ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸Ñ":"057","ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸Ñ":"061","ÐÑÑÑÐ¾Ð² ÐÐ¾Ð·Ð½ÐµÑÐµÐ½Ð¸Ñ":"AC","ÐÐ½Ð´Ð¾ÑÑÐ°":"AD","ÐÐÐ­":"AE","ÐÑÐ³Ð°Ð½Ð¸ÑÑÐ°Ð½":"AF","ÐÐ½ÑÐ¸Ð³ÑÐ° Ð¸ ÐÐ°ÑÐ±ÑÐ´Ð°":"AG","ÐÐ½Ð³Ð¸Ð»ÑÑ":"AI","ÐÐ»Ð±Ð°Ð½Ð¸Ñ":"AL","ÐÑÐ¼ÐµÐ½Ð¸Ñ":"AM","ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´ÑÐºÐ¸Ðµ ÐÐ½ÑÐ¸Ð»ÑÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"AN","ÐÐ½Ð³Ð¾Ð»Ð°":"AO","ÐÐ½ÑÐ°ÑÐºÑÐ¸Ð´Ð°":"AQ","ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°":"AR","ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÐºÐ¾Ðµ Ð¡Ð°Ð¼Ð¾Ð°":"AS","ÐÐ²ÑÑÑÐ¸Ñ":"AT","ÐÐ²ÑÑÑÐ°Ð»Ð¸Ñ":"AU","ÐÑÑÐ±Ð°":"AW","ÐÐ»Ð°Ð½Ð´ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"AX","ÐÐ·ÐµÑÐ±Ð°Ð¹Ð´Ð¶Ð°Ð½":"AZ","ÐÐ¾ÑÐ½Ð¸Ñ Ð¸ ÐÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°":"BA","ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ":"BB","ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ":"BD","ÐÐµÐ»ÑÐ³Ð¸Ñ":"BE","ÐÑÑÐºÐ¸Ð½Ð° Ð¤Ð°ÑÐ¾":"BF","ÐÐ¾Ð»Ð³Ð°ÑÐ¸Ñ":"BG","ÐÐ°ÑÑÐµÐ¹Ð½":"BH","ÐÑÑÑÐ½Ð´Ð¸":"BI","ÐÐµÐ½Ð¸Ð½":"BJ","Ð-Ð² Ð¡Ð². ÐÐ°ÑÑÐ¾Ð»Ð¾Ð¼ÐµÑ":"BL","ÐÐµÑÐ¼ÑÐ´ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"BM","ÐÑÑÐ½ÐµÐ¹ ÐÐ°ÑÑÑÑÐ°Ð»Ð°Ð¼":"BN","ÐÐ¾Ð»Ð¸Ð²Ð¸Ñ":"BO","ÐÐ¾Ð½ÑÐ¹Ñ, Ð¡Ð¸Ð½Ñ-Ð­ÑÑÐ°ÑÐ¸ÑÑ Ð¸ Ð¡Ð°Ð±Ð°":"BQ","ÐÑÐ°Ð·Ð¸Ð»Ð¸Ñ":"BR","ÐÐ°Ð³Ð°Ð¼ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"BS","ÐÑÑÐ°Ð½":"BT","ÐÑÑÑÐ¾Ð² ÐÑÐ²Ðµ":"BV","ÐÐ¾ÑÑÐ²Ð°Ð½Ð°":"BW","ÐÐµÐ»Ð°ÑÑÑÑ":"BY","ÐÐµÐ»Ð¸Ð·":"BZ","ÐÐ°Ð½Ð°Ð´Ð°":"CA","ÐÐ¾ÐºÐ¾ÑÐ¾Ð²ÑÐµ Ð¾-Ð²Ð°":"CC","ÐÐµÐ¼Ð¾ÐºÑÐ°ÑÐ¸ÑÐµÑÐºÐ°Ñ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ° ÐÐ¾Ð½Ð³Ð¾":"CD","Ð¦ÐÐ ":"CF","ÐÐ¾Ð½Ð³Ð¾ - ÐÑÐ°Ð·Ð·Ð°Ð²Ð¸Ð»Ñ":"CG","Ð¨Ð²ÐµÐ¹ÑÐ°ÑÐ¸Ñ":"CH","ÐÐ¾Ñ Ð´âÐÐ²ÑÐ°Ñ":"CI","ÐÑÑÑÐ¾Ð²Ð° ÐÑÐºÐ°":"CK","Ð§Ð¸Ð»Ð¸":"CL","ÐÐ°Ð¼ÐµÑÑÐ½":"CM","ÐÐ¸ÑÐ°Ð¹":"CN","ÐÐ¾Ð»ÑÐ¼Ð±Ð¸Ñ":"CO","ÐÑÑÑÐ¾Ð² ÐÐ»Ð¸Ð¿Ð¿ÐµÑÑÐ¾Ð½":"CP","ÐÐ¾ÑÑÐ°-Ð Ð¸ÐºÐ°":"CR","ÐÑÐ±Ð°":"CU","ÐÑÑÑÐ¾Ð²Ð° ÐÐµÐ»ÐµÐ½Ð¾Ð³Ð¾ ÐÑÑÐ°":"CV","ÐÑÑÐ°ÑÐ°Ð¾":"CW","ÐÑÑÑÐ¾Ð² Ð Ð¾Ð¶Ð´ÐµÑÑÐ²Ð°":"CX","ÐÐ¸Ð¿Ñ":"CY","Ð§ÐµÑÐ¸Ñ":"CZ","ÐÐµÑÐ¼Ð°Ð½Ð¸Ñ":"DE","ÐÐ¸ÐµÐ³Ð¾-ÐÐ°ÑÑÐ¸Ñ":"DG","ÐÐ¶Ð¸Ð±ÑÑÐ¸":"DJ","ÐÐ°Ð½Ð¸Ñ":"DK","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°":"DM","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ÑÐºÐ°Ñ Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"DO","ÐÐ»Ð¶Ð¸Ñ":"DZ","Ð¡ÐµÑÑÐ° Ð¸ ÐÐµÐ»Ð¸Ð»ÑÑ":"EA","Ð­ÐºÐ²Ð°Ð´Ð¾Ñ":"EC","Ð­ÑÑÐ¾Ð½Ð¸Ñ":"EE","ÐÐ³Ð¸Ð¿ÐµÑ":"EG","ÐÐ°Ð¿Ð°Ð´Ð½Ð°Ñ Ð¡Ð°ÑÐ°ÑÐ°":"EH","Ð­ÑÐ¸ÑÑÐµÑ":"ER","ÐÑÐ¿Ð°Ð½Ð¸Ñ":"ES","Ð­ÑÐ¸Ð¾Ð¿Ð¸Ñ":"ET","ÐÐ²ÑÐ¾Ð¿ÐµÐ¹ÑÐºÐ¸Ð¹ ÑÐ¾ÑÐ·":"EU","Ð¤Ð¸Ð½Ð»ÑÐ½Ð´Ð¸Ñ":"FI","Ð¤Ð¸Ð´Ð¶Ð¸":"FJ","Ð¤Ð¾Ð»ÐºÐ»ÐµÐ½Ð´ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"FK","Ð¤ÐµÐ´ÐµÑÐ°ÑÐ¸Ð²Ð½ÑÐµ Ð¨ÑÐ°ÑÑ ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸Ð¸":"FM","Ð¤Ð°ÑÐµÑÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"FO","Ð¤ÑÐ°Ð½ÑÐ¸Ñ":"FR","ÐÐ°Ð±Ð¾Ð½":"GA","ÐÐµÐ»Ð¸ÐºÐ¾Ð±ÑÐ¸ÑÐ°Ð½Ð¸Ñ":"GB","ÐÑÐµÐ½Ð°Ð´Ð°":"GD","ÐÑÑÐ·Ð¸Ñ":"GE","Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ°Ñ ÐÐ²Ð¸Ð°Ð½Ð°":"GF","ÐÐµÑÐ½ÑÐ¸":"GG","ÐÐ°Ð½Ð°":"GH","ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ":"GI","ÐÑÐµÐ½Ð»Ð°Ð½Ð´Ð¸Ñ":"GL","ÐÐ°Ð¼Ð±Ð¸Ñ":"GM","ÐÐ²Ð¸Ð½ÐµÑ":"GN","ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿Ð°":"GP","Ð­ÐºÐ²Ð°ÑÐ¾ÑÐ¸Ð°Ð»ÑÐ½Ð°Ñ ÐÐ²Ð¸Ð½ÐµÑ":"GQ","ÐÑÐµÑÐ¸Ñ":"GR","Ð®Ð¶Ð½Ð°Ñ ÐÐ¶Ð¾ÑÐ´Ð¶Ð¸Ñ Ð¸ Ð®Ð¶Ð½ÑÐµ Ð¡Ð°Ð½Ð´Ð²Ð¸ÑÐµÐ²Ñ ÐÑÑÑÐ¾Ð²Ð°":"GS","ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°":"GT","ÐÑÐ°Ð¼":"GU","ÐÐ²Ð¸Ð½ÐµÑ-ÐÐ¸ÑÐ°Ñ":"GW","ÐÐ°Ð¹Ð°Ð½Ð°":"GY","ÐÐ¾Ð½ÐºÐ¾Ð½Ð³ (Ð¾ÑÐ¾Ð±ÑÐ¹ ÑÐ°Ð¹Ð¾Ð½)":"HK","ÐÑÑÑÐ¾Ð²Ð° Ð¥ÐµÑÐ´ Ð¸ ÐÐ°ÐºÐ´Ð¾Ð½Ð°Ð»ÑÐ´":"HM","ÐÐ¾Ð½Ð´ÑÑÐ°Ñ":"HN","Ð¥Ð¾ÑÐ²Ð°ÑÐ¸Ñ":"HR","ÐÐ°Ð¸ÑÐ¸":"HT","ÐÐµÐ½Ð³ÑÐ¸Ñ":"HU","ÐÐ°Ð½Ð°ÑÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"IC","ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸Ñ":"ID","ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ":"IE","ÐÐ·ÑÐ°Ð¸Ð»Ñ":"IL","ÐÑÑÑÐ¾Ð² ÐÑÐ½":"IM","ÐÐ½Ð´Ð¸Ñ":"IN","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ°Ñ ÑÐµÑÑÐ¸ÑÐ¾ÑÐ¸Ñ Ð² ÐÐ½Ð´Ð¸Ð¹ÑÐºÐ¾Ð¼ Ð¾ÐºÐµÐ°Ð½Ðµ":"IO","ÐÑÐ°Ðº":"IQ","ÐÑÐ°Ð½":"IR","ÐÑÐ»Ð°Ð½Ð´Ð¸Ñ":"IS","ÐÑÐ°Ð»Ð¸Ñ":"IT","ÐÐ¶ÐµÑÑÐ¸":"JE","Ð¯Ð¼Ð°Ð¹ÐºÐ°":"JM","ÐÐ¾ÑÐ´Ð°Ð½Ð¸Ñ":"JO","Ð¯Ð¿Ð¾Ð½Ð¸Ñ":"JP","ÐÐµÐ½Ð¸Ñ":"KE","ÐÐ¸ÑÐ³Ð¸Ð·Ð¸Ñ":"KG","ÐÐ°Ð¼Ð±Ð¾Ð´Ð¶Ð°":"KH","ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸":"KI","ÐÐ¾Ð¼Ð¾ÑÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"KM","Ð¡ÐµÐ½Ñ-ÐÐ¸ÑÑÑ Ð¸ ÐÐµÐ²Ð¸Ñ":"KN","Ð¡ÐµÐ²ÐµÑÐ½Ð°Ñ ÐÐ¾ÑÐµÑ":"KP","Ð ÐµÑÐ¿ÑÐ±Ð»Ð¸ÐºÐ° ÐÐ¾ÑÐµÑ":"KR","ÐÑÐ²ÐµÐ¹Ñ":"KW","ÐÐ°Ð¹Ð¼Ð°Ð½Ð¾Ð²Ñ Ð¾-Ð²Ð°":"KY","ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½":"KZ","ÐÐ°Ð¾Ñ":"LA","ÐÐ¸Ð²Ð°Ð½":"LB","Ð¡ÐµÐ½Ñ-ÐÑÑÐ¸Ñ":"LC","ÐÐ¸ÑÑÐµÐ½ÑÑÐµÐ¹Ð½":"LI","Ð¨ÑÐ¸-ÐÐ°Ð½ÐºÐ°":"LK","ÐÐ¸Ð±ÐµÑÐ¸Ñ":"LR","ÐÐµÑÐ¾ÑÐ¾":"LS","ÐÐ¸ÑÐ²Ð°":"LT","ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³":"LU","ÐÐ°ÑÐ²Ð¸Ñ":"LV","ÐÐ¸Ð²Ð¸Ñ":"LY","ÐÐ°ÑÐ¾ÐºÐºÐ¾":"MA","ÐÐ¾Ð½Ð°ÐºÐ¾":"MC","ÐÐ¾Ð»Ð´Ð¾Ð²Ð°":"MD","Ð§ÐµÑÐ½Ð¾Ð³Ð¾ÑÐ¸Ñ":"ME","ÐÑÑÑÐ¾Ð² Ð¡Ð²ÑÑÐ¾Ð³Ð¾ ÐÐ°ÑÑÐ¸Ð½Ð°":"MF","ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ":"MG","ÐÐ°ÑÑÐ°Ð»Ð»Ð¾Ð²Ñ Ð¾-Ð²Ð°":"MH","ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸Ñ":"MK","ÐÐ°Ð»Ð¸":"ML","ÐÑÑÐ½Ð¼Ð° [ÐÐ¸ÑÐ¼Ð°]":"MM","ÐÐ¾Ð½Ð³Ð¾Ð»Ð¸Ñ":"MN","ÐÐ°ÐºÐ°Ð¾ (Ð¾ÑÐ¾Ð±ÑÐ¹ ÑÐ°Ð¹Ð¾Ð½)":"MO","Ð¡ÐµÐ²ÐµÑÐ½ÑÐµ ÐÐ°ÑÐ¸Ð°Ð½ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"MP","ÐÐ°ÑÑÐ¸Ð½Ð¸ÐºÐ°":"MQ","ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½Ð¸Ñ":"MR","ÐÐ¾Ð½ÑÑÐµÑÑÐ°Ñ":"MS","ÐÐ°Ð»ÑÑÐ°":"MT","ÐÐ°Ð²ÑÐ¸ÐºÐ¸Ð¹":"MU","ÐÐ°Ð»ÑÐ´Ð¸Ð²ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"MV","ÐÐ°Ð»Ð°Ð²Ð¸":"MW","ÐÐµÐºÑÐ¸ÐºÐ°":"MX","ÐÐ°Ð»Ð°Ð¹Ð·Ð¸Ñ":"MY","ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº":"MZ","ÐÐ°Ð¼Ð¸Ð±Ð¸Ñ":"NA","ÐÐ¾Ð²Ð°Ñ ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸Ñ":"NC","ÐÐ¸Ð³ÐµÑ":"NE","ÐÑÑÑÐ¾Ð² ÐÐ¾ÑÑÐ¾Ð»Ðº":"NF","ÐÐ¸Ð³ÐµÑÐ¸Ñ":"NG","ÐÐ¸ÐºÐ°ÑÐ°Ð³ÑÐ°":"NI","ÐÐ¸Ð´ÐµÑÐ»Ð°Ð½Ð´Ñ":"NL","ÐÐ¾ÑÐ²ÐµÐ³Ð¸Ñ":"NO","ÐÐµÐ¿Ð°Ð»":"NP","ÐÐ°ÑÑÑ":"NR","ÐÐ¸ÑÐµ":"NU","ÐÐ¾Ð²Ð°Ñ ÐÐµÐ»Ð°Ð½Ð´Ð¸Ñ":"NZ","ÐÐ¼Ð°Ð½":"OM","ÐÐ°Ð½Ð°Ð¼Ð°":"PA","ÐÐµÑÑ":"PE","Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ°Ñ ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸Ñ":"PF","ÐÐ°Ð¿ÑÐ° â ÐÐ¾Ð²Ð°Ñ ÐÐ²Ð¸Ð½ÐµÑ":"PG","Ð¤Ð¸Ð»Ð¸Ð¿Ð¿Ð¸Ð½Ñ":"PH","ÐÐ°ÐºÐ¸ÑÑÐ°Ð½":"PK","ÐÐ¾Ð»ÑÑÐ°":"PL","Ð¡ÐµÐ½-ÐÑÐµÑ Ð¸ ÐÐ¸ÐºÐµÐ»Ð¾Ð½":"PM","ÐÐ¸ÑÐºÑÑÐ½":"PN","ÐÑÑÑÑÐ¾-Ð Ð¸ÐºÐ¾":"PR","ÐÐ°Ð»ÐµÑÑÐ¸Ð½ÑÐºÐ¸Ðµ ÑÐµÑÑÐ¸ÑÐ¾ÑÐ¸Ð¸":"PS","ÐÐ¾ÑÑÑÐ³Ð°Ð»Ð¸Ñ":"PT","ÐÐ°Ð»Ð°Ñ":"PW","ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹":"PY","ÐÐ°ÑÐ°Ñ":"QA","ÐÐ½ÐµÑÐ½ÑÑ ÐÐºÐµÐ°Ð½Ð¸Ñ":"QO","Ð ÐµÑÐ½ÑÐ¾Ð½":"RE","Ð ÑÐ¼ÑÐ½Ð¸Ñ":"RO","Ð¡ÐµÑÐ±Ð¸Ñ":"RS","Ð Ð¾ÑÑÐ¸Ñ":"RU","Ð ÑÐ°Ð½Ð´Ð°":"RW","Ð¡Ð°ÑÐ´Ð¾Ð²ÑÐºÐ°Ñ ÐÑÐ°Ð²Ð¸Ñ":"SA","Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½Ð¾Ð²Ñ Ð¾-Ð²Ð°":"SB","Ð¡ÐµÐ¹ÑÐµÐ»ÑÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"SC","Ð¡ÑÐ´Ð°Ð½":"SD","Ð¨Ð²ÐµÑÐ¸Ñ":"SE","Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ":"SG","Ð-Ð² Ð¡Ð². ÐÐ»ÐµÐ½Ñ":"SH","Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸Ñ":"SI","Ð¡Ð²Ð°Ð»ÑÐ±Ð°ÑÐ´ Ð¸ Ð¯Ð½-ÐÐ°Ð¹ÐµÐ½":"SJ","Ð¡Ð»Ð¾Ð²Ð°ÐºÐ¸Ñ":"SK","Ð¡ÑÐµÑÑÐ°-ÐÐµÐ¾Ð½Ðµ":"SL","Ð¡Ð°Ð½-ÐÐ°ÑÐ¸Ð½Ð¾":"SM","Ð¡ÐµÐ½ÐµÐ³Ð°Ð»":"SN","Ð¡Ð¾Ð¼Ð°Ð»Ð¸":"SO","Ð¡ÑÑÐ¸Ð½Ð°Ð¼":"SR","Ð®Ð¶Ð½ÑÐ¹ Ð¡ÑÐ´Ð°Ð½":"SS","Ð¡Ð°Ð½-Ð¢Ð¾Ð¼Ðµ Ð¸ ÐÑÐ¸Ð½ÑÐ¸Ð¿Ð¸":"ST","Ð¡Ð°Ð»ÑÐ²Ð°Ð´Ð¾Ñ":"SV","Ð¡Ð¸Ð½Ñ-ÐÐ°ÑÑÐµÐ½":"SX","Ð¡Ð¸ÑÐ¸Ñ":"SY","Ð¡Ð²Ð°Ð·Ð¸Ð»ÐµÐ½Ð´":"SZ","Ð¢ÑÐ¸ÑÑÐ°Ð½-Ð´Ð°-ÐÑÐ½ÑÑ":"TA","Ð-Ð²Ð° Ð¢ÑÑÐºÑ Ð¸ ÐÐ°Ð¹ÐºÐ¾Ñ":"TC","Ð§Ð°Ð´":"TD","Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ¸Ðµ Ð®Ð¶Ð½ÑÐµ Ð¢ÐµÑÑÐ¸ÑÐ¾ÑÐ¸Ð¸":"TF","Ð¢Ð¾Ð³Ð¾":"TG","Ð¢Ð°Ð¸Ð»Ð°Ð½Ð´":"TH","Ð¢Ð°Ð´Ð¶Ð¸ÐºÐ¸ÑÑÐ°Ð½":"TJ","Ð¢Ð¾ÐºÐµÐ»Ð°Ñ":"TK","Ð¢Ð¸Ð¼Ð¾Ñ-ÐÐµÑÑÐ¸":"TL","Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸ÑÑÐ°Ð½":"TM","Ð¢ÑÐ½Ð¸Ñ":"TN","Ð¢Ð¾Ð½Ð³Ð°":"TO","Ð¢ÑÑÑÐ¸Ñ":"TR","Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¸ Ð¢Ð¾Ð±Ð°Ð³Ð¾":"TT","Ð¢ÑÐ²Ð°Ð»Ñ":"TV","Ð¢Ð°Ð¹Ð²Ð°Ð½Ñ":"TW","Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸Ñ":"TZ","Ð£ÐºÑÐ°Ð¸Ð½Ð°":"UA","Ð£Ð³Ð°Ð½Ð´Ð°":"UG","ÐÐ½ÐµÑÐ½Ð¸Ðµ Ð¼Ð°Ð»ÑÐµ Ð¾ÑÑÑÐ¾Ð²Ð° (Ð¡Ð¨Ð)":"UM","Ð¡Ð¨Ð":"US","Ð£ÑÑÐ³Ð²Ð°Ð¹":"UY","Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½":"UZ","ÐÐ°ÑÐ¸ÐºÐ°Ð½":"VA","Ð¡ÐµÐ½Ñ-ÐÐ¸Ð½ÑÐµÐ½Ñ Ð¸ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ñ":"VC","ÐÐµÐ½ÐµÑÑÑÐ»Ð°":"VE","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ¸Ðµ ÐÐ¸ÑÐ³Ð¸Ð½ÑÐºÐ¸Ðµ Ð¾-Ð²Ð°":"VG","ÐÐ¸ÑÐ³Ð¸Ð½ÑÐºÐ¸Ðµ Ð¾-Ð²Ð° (Ð¡Ð¨Ð)":"VI","ÐÑÐµÑÐ½Ð°Ð¼":"VN","ÐÐ°Ð½ÑÐ°ÑÑ":"VU","Ð£Ð¾Ð»Ð»Ð¸Ñ Ð¸ Ð¤ÑÑÑÐ½Ð°":"WF","Ð¡Ð°Ð¼Ð¾Ð°":"WS","ÐÐµÐ¼ÐµÐ½":"YE","ÐÐ°Ð¹Ð¾ÑÑÐ°":"YT","Ð®ÐÐ ":"ZA","ÐÐ°Ð¼Ð±Ð¸Ñ":"ZM","ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ":"ZW","ÐÐµÐ¸Ð·Ð²ÐµÑÑÐ½ÑÐ¹ ÑÐµÐ³Ð¸Ð¾Ð½":"ZZ"};
ilib.data.ctrynames_si = {"à¶à·à·à¶ºà·à·":"142","à¶¸à¶°à·âà¶ºà¶¸ à¶à·à·à¶ºà·à·":"143","à¶¶à¶§à·à·à¶» à¶à·à·à¶ºà·à·":"145","à¶ºà·à¶»à·à¶´à¶º":"150","à¶±à·à¶à·à¶±à·à·à¶» à¶ºà·à¶»à·à¶´à¶º":"151","à¶à¶­à·à¶»à· à¶ºà·à¶»à·à¶´à¶º":"154","à¶¶à¶§à·à·à¶» à¶ºà·à¶»à·à¶´à¶º":"155","à¶½à¶­à·à¶±à· à¶à¶¸à·à¶»à·à¶à·à·":"419","à¶½à·à¶à¶º":"001","à¶à¶´à·âà¶»à·à¶à·à·":"002","à¶à¶­à·à¶»à· à¶à¶¸à·à¶»à·à¶à·à·":"003","à¶¯à¶à·à¶«à· à¶à¶¸à·à¶»à·à¶à·à·":"005","à¶à·à¶±à·à¶ºà·à·":"009","à¶¶à¶§à·à·à¶»à¶¯à·à¶ à¶à¶´à·âà¶»à·à¶à·à·":"011","à¶¸à¶°à·âà¶ºà¶¸ à¶à¶¸à·à¶»à·à¶à·à·":"013","à¶´à·à¶»à¶¯à·à¶ à¶à¶´à·âà¶»à·à¶à·à·":"014","à¶à¶­à·à¶»à·à¶¯à·à¶ à¶à¶´à·âà¶»à·à¶à·à·":"015","à¶¸à¶°à·âà¶ºà¶¸ à¶à¶´à·âà¶»à·à¶à·à·":"017","à¶¯à¶à·à¶«à·à¶¯à·à¶ à¶à¶´à·âà¶»à·à¶à·à·":"018","à¶à¶¸à¶»à·à¶à·à·":"019","à¶à¶­à·à¶»à·à¶¯à·à¶ à¶à¶¸à·à¶»à·à¶à·à·":"021","à¶à·à¶»à·à¶¶à·à¶ºà¶±à·":"029","à¶±à·à¶à·à¶±à·à·à¶» à¶à·à·à¶ºà·à·":"030","à¶¯à¶à·à¶«à· à¶à·à·à¶ºà·à·":"034","à¶à¶à·à¶±à·à¶¯à·à¶ à¶à·à·à¶ºà·à·":"035","à¶¯à¶à·à¶«à·à¶¯à·à¶ à¶ºà·à¶»à·à¶´à¶º":"039","à¶à·à·à¶§à·âà¶»à·à¶½à·à¶ºà·à· à·à· à¶±à·à·à·à¶½à¶±à·à¶­à¶º":"053","à¶¸à·à¶½à¶±à·à·à·à¶ºà·à·":"054","à¶¸à¶ºà·à¶à·âà¶»à·à¶±à·à·à·à¶ºà·à¶±à· à¶à·à·à¶´à¶º":"057","à¶´à·à¶½à·à¶±à·à·à·à¶ºà·à·":"061","à¶à·à·à¶±à·à·à¶±à· à¶¯à·à·à¶ºà·à¶±":"AC","à¶à¶±à·à¶©à·à¶»à·à·":"AD","à¶à¶à·à·à¶­à· à¶à¶»à·à¶¶à· à¶à¶¸à·à¶»à· à¶»à·à¶¢à·âà¶ºà¶º":"AE","à¶à·à·à¶à¶±à·à·à·à¶®à·à¶±à¶º":"AF","à¶à¶±à·à¶§à·à¶à·à·à· à·à· à¶¶à·à¶¶à·à¶ºà·à¶©à·":"AG","à¶à¶±à·à¶à·à¶ºà·à¶½à·à·":"AI","à¶à¶½à·à¶¶à·à¶±à·à¶ºà·à·":"AL","à¶à¶»à·à¶¸à·à¶±à·à¶ºà·à·":"AM","à¶±à·à¶¯à¶»à·à¶½à¶±à·à¶­ à¶à¶±à·à¶§à·à¶½à·à·à·à¶º":"AN","à¶à¶±à·à¶à·à¶½à·à·":"AO","à¶à¶±à·à¶§à·à¶à·à¶§à·à¶à·à·":"AQ","à¶à¶»à·à¶¢à·à¶±à·à¶§à·à¶±à·à·":"AR","à¶à¶¸à¶»à·à¶à·à¶±à· à·à·à¶¸à·à·à·à·":"AS","à¶à·à·à¶§à·âà¶»à·à¶ºà·à·":"AT","à¶à·à·à¶§à·âà¶»à·à¶½à·à¶ºà·à·":"AU","à¶à¶»à·à¶¶à·à·":"AW","à¶à¶½à¶±à·à¶©à· à¶¯à·à¶´à¶­à·":"AX","à¶à·à¶»à·à¶¶à¶ºà·à¶¢à·à¶±à¶º":"AZ","à¶¶à·à·à·à¶±à·à¶ºà·à· à·à· à·à¶»à·à·à¶à·à·à·à¶±à·à·":"BA","à¶¶à·à¶»à·à¶¶à¶©à·à·à·":"BB","à¶¶à¶à¶à¶½à·à¶¯à·à·à¶º":"BD","à¶¶à·à¶½à·à¶¢à·à¶ºà¶¸":"BE","à¶¶à¶»à·à¶à·à¶±à· à·à·à·à·":"BF","à¶¶à¶½à·à¶à·à¶»à·à¶ºà·à·":"BG","à¶¶à·à¶»à·à¶±à·":"BH","à¶¶à·à¶»à·à¶±à·à¶©à·":"BI","à¶¶à·à¶±à·à¶±à·":"BJ","à·à·à¶±à·à¶­ à¶¶à·à¶­à·à¶½à·à·à¶¸":"BL","à¶¶à¶»à·à¶¸à·à¶ºà·à¶©à·":"BM","à¶¶à·²à¶±à·à¶ºà·":"BN","à¶¶à·à¶½à·à·à·à¶ºà·à·":"BO","à¶à·à¶»à·à¶¶à·à¶ºà·à¶±à· à¶±à·à¶¯à¶»à·à¶½à¶±à·à¶­à¶º":"BQ","à¶¶à·âà¶»à·à·à¶½à¶º":"BR","à¶¶à·à¶¸à·à·à·":"BS","à¶·à·à¶­à·à¶±à¶º":"BT","à¶¶à·à·à¶»à·à¶§à· à¶¯à·à¶´à¶­à·":"BV","à¶¶à·à·à·à¶§à·à·à·à¶±à·":"BW","à¶¶à·à¶½à¶»à·à·à·":"BY","à¶¶à·à¶½à·à·à·":"BZ","à¶à·à¶±à¶©à·à·":"CA","à¶à·à¶à·à·à· à¶¯à·à¶´à¶­à·":"CC","à¶à·à¶à¶à· - à¶±à·à¶±à·à·à·à·à·":"CD","à¶¸à¶°à·âà¶ºà¶¸ à¶à¶´à·âà¶»à·à¶à·à¶±à· à¶¢à¶±à¶»à¶¢à¶º":"CF","à¶à·à¶à¶à· - à¶¶à·âà¶»à·à·à·à·à¶½à·":"CG","à·à·à·à·à·à·à¶§à¶»à·à¶½à¶±à·à¶­à¶º":"CH","à¶à·à¶§à· à¶¯à· à¶à¶ºà·à·à¶»à·":"CI","à¶à·à¶à· à¶¯à·à¶´à¶­à·":"CK","à¶ à·à¶½à·":"CL","à¶à·à¶¸à¶»à·à¶±à·":"CM","à¶ à·à¶±à¶º":"CN","à¶à·à·à·à¶¸à·à¶¶à·à¶ºà·à·":"CO","à¶à·à¶½à·à¶´à¶»à·à¶§à¶±à· à¶¯à·à¶´à¶­à·":"CP","à¶à·à·à·à¶§à¶»à·à¶à·à·":"CR","à¶à·à¶ºà·à¶¶à·à·":"CU","à·à¶»à·à¶©à· à¶à·à¶´à·":"CV","à¶à·à¶»à¶à·à·à·":"CW","à¶à·âà¶»à·à·à·à¶§à·à¶¸à·à· à¶¯à·à¶´à¶­à·":"CX","à·à¶ºà·à¶´à·âà¶»à·à¶º":"CY","à¶ à·à¶à· à¶¢à¶±à¶»à¶¢à¶º":"CZ","à¶¢à¶»à·à¶¸à¶±à·à¶º":"DE","à¶¯à·à¶ºà·à¶à· à¶à·à¶»à·à·à·à¶ºà·":"DG","à¶¢à·à¶¶à·à¶½à·à¶§à·":"DJ","à¶©à·à¶±à·à¶¸à·à¶»à·à¶à¶º":"DK","à¶©à·à¶¸à·à¶±à·à¶à·à·":"DM","à¶©à·à¶¸à·à¶±à·à¶à· à¶¢à¶±à¶»à¶¢à¶º":"DO","à¶à¶½à·à¶¢à·à¶»à·à¶ºà·à·":"DZ","à·à·à¶à·à·à·à¶§à· à·à· à¶¸à·à¶»à·à¶½à·à¶½à·":"EA","à¶à¶à·à·à¶¯à·à¶»à¶º":"EC","à¶à·à·à¶­à·à¶±à·à¶ºà·à·":"EE","à¶à¶¢à·à¶´à·à¶­à·à·":"EG","à¶¶à¶§à·à·à¶» à·à·à¶»à·à·":"EH","à¶à¶»à·à¶­à·âà¶»à·à¶ºà·à·":"ER","à·à·à¶´à·à¶¤à·à¶¤à¶º":"ES","à¶à¶­à·à¶ºà·à¶´à·à¶ºà·à·":"ET","à¶ºà·à¶»à·à¶´à· à·à¶à¶à¶¸à¶º":"EU","à·à·à¶±à·à¶½à¶±à·à¶­à¶º":"FI","à·à·à¶¢à·":"FJ","à·à·à¶à·à¶½à¶±à·à¶­ à¶¯à·à¶´à¶­à·":"FK","à¶¸à¶ºà·à¶à·âà¶»à·à¶±à·à·à·à¶ºà·à·":"FM","à·à·à¶»à· à¶¯à·à¶´à¶­à·":"FO","à¶´à·âà¶»à¶à·à¶º":"FR","à¶à·à¶¶à·à¶±à·":"GA","à¶à¶à·à·à¶­à· à¶»à·à¶¢à¶°à·à¶±à·à¶º":"GB","à¶à·âà¶»à·à¶±à¶©à·à·":"GD","à¶¢à·à¶»à·à¶¢à·à¶ºà·à·":"GE","à¶´à·âà¶»à¶à· à¶à¶ºà¶±à·à·":"GF","à¶à¶»à·à¶±à·à·à·":"GG","à¶à·à¶±à·à·":"GH","à¶¢à·à¶¶à·âà¶»à·à¶½à·à¶§à·à·":"GI","à¶à·âà¶»à·à¶±à·à¶½à¶±à·à¶­à¶º":"GL","à¶à·à¶¸à·à¶¶à·à¶ºà·à·":"GM","à¶à·à¶«à·à¶ºà·à·":"GN","à¶à·à·à·à¶©à¶½à·à¶´à·":"GP","à·à¶¸à¶ à¶à·à¶±à·à¶ºà·à·":"GQ","à¶à·âà¶»à·à·à·à¶º":"GR","à¶¯à¶à·à¶«à· à¶¢à·à¶»à·à¶¢à·à¶ºà·à· à·à· à¶¯à¶à·à¶«à· à·à·à¶±à·à¶©à·à·à¶ à· à¶¯à·à¶´à¶­à·":"GS","à¶à·à¶­à¶¸à·à¶½à·à·":"GT","à¶à·à·à·à¶¸à·":"GU","à¶à·à¶±à· à¶¶à·à·à·à·":"GW","à¶à¶ºà¶±à·à·":"GY","à·à·à¶à¶à·à¶ à¶ à·à¶± à·à·à·à·à· à¶´à¶»à·à¶´à·à¶½à¶± à¶à¶½à·à¶´à¶º":"HK","à·à·à¶©à· à·à· à¶¸à·à¶à·à¶©à·à¶±à¶½à·à¶©à· à¶¯à·à¶´à¶­à·":"HM","à·à·à¶±à·à¶©à·à¶»à·à·à·":"HN","à¶à·âà¶»à·à¶§à·à¶ºà·":"HR","à·à¶ºà·à¶§à·":"HT","à·à¶±à·à¶à·à¶»à·à¶ºà·à·":"HU","à¶à·à¶±à¶»à· à·à·à¶´à¶­à·":"IC","à¶à¶±à·à¶¯à·à¶±à·à·à·à¶ºà·à·":"ID","à¶à¶ºà¶»à·à¶½à¶±à·à¶­à¶º":"IE","à¶à·à·âà¶»à·à¶ºà¶½à¶º":"IL","à¶à¶ºà·à·à·à¶½à· à¶à·à· à¶¸à·à¶±à·":"IM","à¶à¶±à·à¶¯à·à¶ºà·à·":"IN","à¶¶à·âà¶»à·à¶­à·à¶±à·âà¶º à¶à¶±à·à¶¯à·à¶º à·à·à¶à¶» à¶´à·âà¶»à·à¶±à·à¶­à¶º":"IO","à¶à¶»à·à¶à¶º":"IQ","à¶à¶»à·à¶±à¶º":"IR","à¶à¶ºà·à·à·à¶½à¶±à·à¶­à¶º":"IS","à¶à¶­à·à¶½à·à¶º":"IT","à¶¢à¶»à·à·à·":"JE","à¶¢à·à¶¸à·à¶ºà·à¶à·à·":"JM","à¶¢à·à¶»à·à¶¯à·à¶±à¶º":"JO","à¶¢à¶´à·à¶±à¶º":"JP","à¶à·à¶±à·à¶ºà·à·":"KE","à¶à·à¶»à·à¶à·à·à·à¶­à·à¶±à¶º":"KG","à¶à·à¶¸à·à¶¶à·à¶¢à¶º":"KH","à¶à·à¶»à·à¶¶à¶­à·":"KI","à¶à·à¶¸à·à¶»à·à·à·":"KM","à·à·à¶±à·à¶­ à¶à·à¶§à·à·à· à·à· à¶±à·à·à·à·à·":"KN","à¶à¶­à·à¶»à· à¶à·à¶»à·à¶ºà·à·":"KP","à¶¯à¶à·à¶«à· à¶à·à¶»à·à¶ºà·à·":"KR","à¶à·à·à·à¶§à¶º":"KW","à¶à·à¶¸à¶±à· à¶¯à·à¶´à¶­à·":"KY","à¶à·à¶à·à·à¶­à·à¶±à¶º":"KZ","à¶½à·à¶à·à¶º":"LA","à¶½à·à¶¶à¶±à¶±à¶º":"LB","à·à·à¶±à·à¶­ à¶½à·à·à·à¶ºà·":"LC","à¶½à·à¶ à·à¶§à¶±à·à·à·à¶§à·à¶±à·":"LI","à·à·âà¶»à· à¶½à¶à¶à·à·":"LK","à¶½à¶ºà·à¶¶à·à¶»à·à¶ºà·à·":"LR","à¶½à·à·à¶­à·":"LS","à¶½à·à¶­à·à·à·à¶±à·à¶ºà·à·":"LT","à¶½à¶à·à·à¶¸à·à¶¶à¶»à·à¶à·":"LU","à¶½à·à¶§à·à·à·à¶ºà·à·":"LV","à¶½à·à¶¶à·à¶ºà·à·":"LY","à¶¸à·à¶»à·à¶à·à¶à·à·":"MA","à¶¸à·à¶±à·à¶à·à·":"MC","à¶¸à·à¶½à·à¶©à·à·à·à·":"MD","à¶¸à·à¶±à·à¶©à·à¶±à·à¶à·âà¶»à·":"ME","à·à·à¶±à·à¶­ à¶¸à·à¶»à·à¶§à·à¶±à·":"MF","à¶¸à·à¶©à¶à·à·à¶­à¶»à¶º":"MG","à¶¸à·à·à¶½à· à¶¯à·à¶´à¶­à·":"MH","à¶¸à·à·à·à¶©à·à¶±à·à¶ºà·à·":"MK","à¶¸à·à¶½à·":"ML","à¶¸à·à¶ºà¶±à·à¶¸à·à¶»à¶º":"MM","à¶¸à·à¶±à·à¶à·à¶½à·à¶ºà·à·":"MN","à¶¸à¶à·à·à· à·à·à¶»à· à¶ à·à¶±":"MO","à¶à¶­à·à¶»à· à¶¸à¶»à·à¶ºà·à¶±à· à¶¯à·à¶´à¶­à·":"MP","à¶¸à¶»à·à¶§à·à¶±à·à¶à·":"MQ","à¶¸à·à¶»à·à¶§à·à¶±à·à¶à·":"MR","à¶¸à·à¶±à·à·à·à¶»à·à¶§à·":"MS","à¶¸à·à¶½à·à¶§à·à·":"MT","à¶¸à·à¶»à·à·à·à¶º":"MU","à¶¸à·à¶½ à¶¯à·à·à¶ºà·à¶±":"MV","à¶¸à¶½à·à·à·":"MW","à¶¸à·à¶à·à·à·à¶à·à·":"MX","à¶¸à·à¶½à·à·à·à¶ºà·à·":"MY","à¶¸à·à·à·à¶¸à·à¶¶à·à¶à·":"MZ","à¶±à·à¶¸à·à¶¶à·à¶ºà·à·":"NA","à¶±à· à¶à·à¶½à·à¶©à·à¶±à·à¶ºà·à·":"NC","à¶±à¶ºà·à¶¢à¶»à·":"NE","à¶±à·à·à·à¶à· à¶¯à·à¶´à¶­":"NF","à¶±à¶ºà·à¶¢à·à¶»à·à¶ºà·à·":"NG","à¶±à·à¶à¶»à¶à·à·à·à·":"NI","à¶±à·à¶¯à¶»à·à¶½à¶±à·à¶­à¶º":"NL","à¶±à·à¶»à·à·à·":"NO","à¶±à·à¶´à·à¶½à¶º":"NP","à¶±à·à·à·à¶»à·":"NR","à¶±à·à¶ºà·":"NU","à¶±à·à·à·à¶½à¶±à·à¶­à¶º":"NZ","à¶à¶¸à·à¶±à¶º":"OM","à¶´à·à¶±à¶¸à·":"PA","à¶´à·à¶»à·":"PE","à¶´à·âà¶»à¶à· à¶´à·à¶½à·à¶±à·à·à·à¶ºà·à·":"PF","à¶´à·à¶´à·à·à· à¶±à·à·à· à¶à·à¶±à·à¶ºà·à·":"PG","à¶´à·à¶½à·à¶´à·à¶±à¶º":"PH","à¶´à·à¶à·à·à·à¶­à·à¶±à¶º":"PK","à¶´à·à¶½à¶±à·à¶­à¶º":"PL","à·à·à¶±à·à¶­ à¶´à·à¶ºà¶»à· à·à· à¶¸à·à¶à·à¶½à¶±à·":"PM","à¶´à·à¶§à·à¶à·à¶ºà·à¶±à· à¶¯à·à¶´à¶­à·":"PN","à¶´à·à·à¶§à· à¶»à·à¶à·":"PR","à¶´à¶½à·à·à¶­à·à¶±à¶º":"PS","à¶´à·à¶­à·à¶à·à¶½à¶º":"PT","à¶´à¶½à·à·à·":"PW","à¶´à·à¶»à¶à·à·à·":"PY","à¶à¶§à·à¶»à·à¶º":"QA","à¶à¶­ à¶à·à¶±à·à¶ºà·à·":"QO","à¶»à·à¶ºà·à¶±à·à¶ºà¶±à·":"RE","à¶»à·à¶¸à·à¶±à·à¶ºà·à·":"RO","à·à¶»à·à¶¶à·à¶ºà·à·":"RS","à¶»à·à·à·à¶ºà·à·":"RU","à¶»à·à·à¶±à·à¶©à·à·":"RW","à·à·à¶¯à· à¶à¶»à·à¶¶à·à¶º":"SA","à·à·à¶½à¶¸à¶±à· à¶¯à·à¶´à¶­à·":"SB","à·à·à·à·à¶½à·à·à·":"SC","à·à·à¶©à·à¶±à¶º":"SD","à·à·à·à·à¶©à¶±à¶º":"SE","à·à·à¶à¶à¶´à·à¶´à·à¶»à·à·":"SG","à·à·à¶±à·à¶­ à·à·à¶½à·à¶±à·":"SH","à·à·à¶½à·à·à·à¶±à·à¶ºà·à·":"SI","à·à·à·à·à¶½à·à¶¶à¶»à·à¶©à· à·à· à¶¢à·à¶±à· à¶¸à¶ºà·à¶±à·":"SJ","à·à·à¶½à·à·à·à¶à·à¶ºà·à·":"SK","à·à·à¶ºà¶»à·à¶½à·à¶ºà·à¶±à·":"SL","à·à·à¶±à·à¶­ à¶¸à·à¶»à·à¶±à·":"SM","à·à·à¶±à¶à·à¶½à·":"SN","à·à·à¶¸à·à¶½à·à¶ºà·à·":"SO","à·à·à¶»à·à¶±à·à¶¸à¶º":"SR","à¶¯à¶à·à¶«à· à·à·à¶©à·à¶±à¶º":"SS","à·à·à¶½à· à·à· à¶´à·âà¶»à·à¶±à·à·à·à¶´à·":"ST","à¶à¶½à· à·à·à¶½à·à·à¶¯à·à¶»à¶º":"SV","à·à·à¶±à·à¶­ à¶¸à·à¶»à·à¶§à·à¶±à·":"SX","à·à·à¶»à·à¶ºà·à·":"SY","à·à·à·à·à·à·à¶½à¶±à·à¶­à¶º":"SZ","à¶§à·âà¶»à·à¶±à·à¶§à¶±à· à¶¯ à¶à·à¶±à·à·à·":"TA","à¶§à¶»à·à¶à·à·à· à·à· à¶à¶ºà·à¶à·à·à· à¶¯à·à¶´à¶­à·":"TC","à¶ à·à¶ à·":"TD","à¶¯à¶à·à¶«à· à¶´à·âà¶»à¶à· à¶¯à·à¶´à¶­à· à·à¶¸à·à·à¶º":"TF","à¶§à·à¶à·":"TG","à¶­à·à¶ºà·à¶½à¶±à·à¶­à¶º":"TH","à¶§à¶¢à·à¶à·à·à·à¶­à·à¶±à¶º":"TJ","à¶§à·à¶à¶½à·à·à·":"TK","à¶§à·à¶¸à·à¶»à· - à¶½à·à·à·à¶§à·":"TL","à¶­à·à¶»à·à¶à·à¶¸à·à¶±à·à·à·à¶®à·à¶±à¶º":"TM","à¶§à·à¶ºà·à¶±à·à·à·à¶ºà·à·":"TN","à¶§à·à¶à¶à·":"TO","à¶­à·à¶»à·à¶à·à¶º":"TR","à¶§à·âà¶»à·à¶±à·à¶©à·à¶©à· à·à· à¶§à·à¶¶à·à¶à·":"TT","à¶§à·à·à·à¶½à·":"TV","à¶­à·à¶ºà·à·à·à¶±à¶º":"TW","à¶§à·à¶±à·à·à·à¶±à·à¶ºà·à·":"TZ","à¶ºà·à¶à·à¶»à·à¶±à¶º":"UA","à¶à¶à¶±à·à¶©à·à·":"UG","à¶à¶à·à·à¶­à· à¶¢à¶±à¶´à¶¯ à¶à¶­ à¶¯à·à¶´à¶­à·":"UM","à¶à¶à·à·à¶­à· à¶¢à¶±à¶´à¶¯à¶º":"US","à¶à¶»à·à¶à·à·à·":"UY","à¶à·à·à¶¶à·à¶à·à·à·à¶®à·à¶±à¶º":"UZ","à·à·à¶§à·à¶à¶±à· à·à·à¶§à·":"VA","à·à·à¶±à·à¶­ à·à·à¶±à·à·à¶±à·à¶§à· à·à· à¶à·âà¶»à·à¶±à¶©à·à¶±à·à·":"VC","à·à·à¶±à·à·à·à¶ºà·à¶´à·à·":"VE","à¶¶à·âà¶»à·à¶­à·à¶±à·âà¶º à·à¶»à·à¶¢à·à¶±à· à¶¯à·à¶´à¶­à·":"VG","à¶à¶¸à¶»à·à¶à·à¶±à· à·à¶»à·à¶¢à·à¶±à· à¶¯à·à¶´à¶­à·":"VI","à·à·à¶ºà¶§à·à¶±à·à¶¸à¶º":"VN","à·à¶±à·à·à·à¶§à·":"VU","à·à·à¶½à·à·à· à·à· à·à·à¶§à·à¶±à·":"WF","à·à·à¶¸à·à·à·":"WS","à¶ºà·à¶¸à¶±à¶º":"YE","à¶¸à¶ºà·à¶§à·":"YT","à¶¯à¶à·à¶«à· à¶à¶´à·âà¶»à·à¶à·à·":"ZA","à·à·à¶¸à·à¶¶à·à¶ºà·à·":"ZM","à·à·à¶¸à·à¶¶à·à¶¶à·à·à·":"ZW","à·à¶³à·à¶±à· à¶±à·à¶à¶­à· à¶à·à·à¶´à¶º":"ZZ"};
ilib.data.ctrynames_sk = {"Ãzia":"142","StrednÃ¡ Ãzia":"143","ZÃ¡padnÃ¡ Ãzia":"145","EurÃ³pa":"150","VÃ½chodnÃ¡ EurÃ³pa":"151","SevernÃ¡ EurÃ³pa":"154","ZÃ¡padnÃ¡ EurÃ³pa":"155","LatinskÃ¡ Amerika":"419","Svet":"001","Afrika":"002","SevernÃ¡ Amerika [003]":"003","JuÅ¾nÃ¡ Amerika":"005","OceÃ¡nia":"009","ZÃ¡padnÃ¡ Afrika":"011","StrednÃ¡ Amerika":"013","VÃ½chodnÃ¡ Afrika":"014","SevernÃ¡ Afrika":"015","StrednÃ¡ Afrika":"017","JuÅ¾nÃ¡ Afrika [018]":"018","AmerickÃ½ kontinent":"019","SevernÃ¡ Amerika":"021","Karibik":"029","VÃ½chodnÃ¡ Ãzia":"030","JuÅ¾nÃ¡ Ãzia":"034","JuhovÃ½chodnÃ¡ Ãzia":"035","JuÅ¾nÃ¡ EurÃ³pa":"039","AustralÃ¡zia":"053","MelanÃ©zia":"054","MikronÃ©zia â oblasÅ¥":"057","PolynÃ©zia":"061","Ostrov AscensiÃ³n":"AC","Andorra":"AD","SpojenÃ© arabskÃ© emirÃ¡ty":"AE","Afganistan":"AF","Antigua a Barbados":"AG","Anguilla":"AI","AlbÃ¡nsko":"AL","ArmÃ©nsko":"AM","HolandskÃ© Antily":"AN","Angola":"AO","AntarktÃ­da":"AQ","ArgentÃ­na":"AR","AmerickÃ¡ Samoa":"AS","RakÃºsko":"AT","AustrÃ¡lia":"AU","Aruba":"AW","AlandskÃ© ostrovy":"AX","AzerbajdÅ¾an":"AZ","Bosna a Hercegovina":"BA","Barbados":"BB","BangladÃ©Å¡":"BD","Belgicko":"BE","Burkina Faso":"BF","Bulharsko":"BG","Bahrajn":"BH","Burundi":"BI","Benin":"BJ","SvÃ¤tÃ½ Bartolomej":"BL","Bermudy":"BM","Brunej":"BN","BolÃ­via":"BO","KaribskÃ© Holandsko":"BQ","BrazÃ­lia":"BR","Bahamy":"BS","BhutÃ¡n":"BT","Bouvetov ostrov":"BV","Botswana":"BW","Bielorusko":"BY","Belize":"BZ","Kanada":"CA","KokosovÃ© ostrovy":"CC","KonÅ¾skÃ¡ demokratickÃ¡ republika":"CD","StredoafrickÃ¡ republika":"CF","Kongo":"CG","Å vajÄiarsko":"CH","PobreÅ¾ie Slonoviny":"CI","Cookove ostrovy":"CK","Äile":"CL","Kamerun":"CM","ÄÃ­na":"CN","Kolumbia":"CO","Ostrov Clipperton":"CP","Kostarika":"CR","Kuba":"CU","Kapverdy":"CV","CuraÃ§ao":"CW","VianoÄnÃ½ ostrov":"CX","Cyprus":"CY","ÄeskÃ¡ republika":"CZ","Nemecko":"DE","Diego Garcia":"DG","DÅ¾ibutsko":"DJ","DÃ¡nsko":"DK","Dominika":"DM","DominikÃ¡nska republika":"DO","AlÅ¾Ã­rsko":"DZ","Ceuta a Melilla":"EA","EkvÃ¡dor":"EC","EstÃ³nsko":"EE","Egypt":"EG","ZÃ¡padnÃ¡ Sahara":"EH","Eritrea":"ER","Å panielsko":"ES","EtiÃ³pia":"ET","EurÃ³pska Ãºnia":"EU","FÃ­nsko":"FI","FidÅ¾i":"FJ","FalklandskÃ© ostrovy":"FK","MikronÃ©zia":"FM","FaerskÃ© ostrovy":"FO","FrancÃºzsko":"FR","Gabon":"GA","SpojenÃ© krÃ¡Ä¾ovstvo":"GB","Grenada":"GD","GruzÃ­nsko":"GE","FrancÃºzska Guayana":"GF","Guernsey":"GG","Ghana":"GH","GibraltÃ¡r":"GI","GrÃ³nsko":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","RovnÃ­kovÃ¡ Guinea":"GQ","GrÃ©cko":"GR","JuÅ¾nÃ¡ Georgia a JuÅ¾nÃ© Sandwichove ostrovy":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guayana":"GY","Hongkong OAO ÄÃ­ny":"HK","Heardov ostrov a McDonaldove ostrovy":"HM","Honduras":"HN","ChorvÃ¡tsko":"HR","Haiti":"HT","MaÄarsko":"HU","KanÃ¡rske ostrovy":"IC","IndonÃ©zia":"ID","Ãrsko":"IE","Izrael":"IL","Ostrov Man":"IM","India":"IN","BritskÃ© Ãºzemie v Indickom oceÃ¡ne":"IO","Irak":"IQ","IrÃ¡n":"IR","Island":"IS","Taliansko":"IT","Jersey":"JE","Jamajka":"JM","JordÃ¡nsko":"JO","Japonsko":"JP","KeÅa":"KE","Kirgizsko":"KG","KambodÅ¾a":"KH","Kiribati":"KI","Komory":"KM","Saint Kitts a Nevis":"KN","KÃ³rejskÃ¡ Ä¾udovodemokratickÃ¡ republika":"KP","JuÅ¾nÃ¡ KÃ³rea":"KR","Kuvajt":"KW","KajmanskÃ© ostrovy":"KY","Kazachstan":"KZ","Laos":"LA","Libanon":"LB","SvÃ¤tÃ¡ Lucia":"LC","LichtenÅ¡tajnsko":"LI","SrÃ­ Lanka":"LK","LibÃ©ria":"LR","Lesotho":"LS","Litva":"LT","Luxembursko":"LU","LotyÅ¡sko":"LV","LÃ­bya":"LY","Maroko":"MA","Monako":"MC","Moldavsko":"MD","Äierna Hora":"ME","Saint Martin":"MF","Madagaskar":"MG","Marshallove ostrovy":"MH","MacedÃ³nsko":"MK","Mali":"ML","Mjanmarsko":"MM","Mongolsko":"MN","Macao OAO ÄÃ­ny":"MO","SevernÃ© MariÃ¡ny":"MP","Martinik":"MQ","MauritÃ¡nia":"MR","Montserrat":"MS","Malta":"MT","MaurÃ­cius":"MU","Maldivy":"MV","Malawi":"MW","Mexiko":"MX","Malajzia":"MY","Mozambik":"MZ","NamÃ­bia":"NA","NovÃ¡ KaledÃ³nia":"NC","Niger":"NE","Norfolkov ostrov":"NF","NigÃ©ria":"NG","Nikaragua":"NI","Holandsko":"NL","NÃ³rsko":"NO","NepÃ¡l":"NP","Nauru":"NR","Niue":"NU","NovÃ½ ZÃ©land":"NZ","OmÃ¡n":"OM","Panama":"PA","Peru":"PE","FrancÃºzska PolynÃ©zia":"PF","Papua NovÃ¡ Guinea":"PG","FilipÃ­ny":"PH","Pakistan":"PK","PoÄ¾sko":"PL","Saint Pierre a Miquelon":"PM","Pitcairnove ostrovy":"PN","Portoriko":"PR","PalestÃ­nske Ãºzemie":"PS","Portugalsko":"PT","Palau":"PW","Paraguaj":"PY","Katar":"QA","Tichomorie - ostatnÃ©":"QO","Reunion":"RE","Rumunsko":"RO","Srbsko":"RS","Rusko":"RU","Rwanda":"RW","SaudskÃ¡ ArÃ¡bia":"SA","Å alamÃºnove ostrovy":"SB","SeychelskÃ© ostrovy":"SC","SudÃ¡n":"SD","Å vÃ©dsko":"SE","Singapur":"SG","SvÃ¤tÃ¡ Helena":"SH","Slovinsko":"SI","Å picbergy a Jan Mayen":"SJ","Slovensko":"SK","Sierra Leone":"SL","San MarÃ­no":"SM","Senegal":"SN","SomÃ¡lsko":"SO","Surinam":"SR","JuÅ¾nÃ½ SudÃ¡n":"SS","SvÃ¤tÃ½ TomÃ¡Å¡ a Princove ostrovy":"ST","Salvador":"SV","Sint Maarten":"SX","SÃ½ria":"SY","Svazijsko":"SZ","Tristan da Cunha":"TA","Turks a Caicos":"TC","Äad":"TD","FrancÃºzske juÅ¾nÃ© Ãºzemia":"TF","Togo":"TG","Thajsko":"TH","TadÅ¾ikistan":"TJ","Tokelau":"TK","VÃ½chodnÃ½ Timor":"TL","TurkmÃ©nsko":"TM","Tunisko":"TN","Tonga":"TO","Turecko":"TR","Trinidad a Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","TanzÃ¡nia":"TZ","Ukrajina":"UA","Uganda":"UG","MenÅ¡ie odÄ¾ahlÃ© ostrovy USA":"UM","SpojenÃ© Å¡tÃ¡ty":"US","Uruguaj":"UY","Uzbekistan":"UZ","VatikÃ¡n":"VA","SvÃ¤tÃ½ Vincent a GrenadÃ­ny":"VC","Venezuela":"VE","BritskÃ© panenskÃ© ostrovy":"VG","PanenskÃ© ostrovy - USA":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis a Futuna":"WF","Samoa":"WS","Jemen":"YE","Mayotte":"YT","JuÅ¾nÃ¡ Afrika":"ZA","Zambia":"ZM","Zimbabwe":"ZW","NeznÃ¡my regiÃ³n":"ZZ"};
ilib.data.ctrynames_sl = {"Azija":"142","Osrednja Azija":"143","Zahodna Azija":"145","Evropa":"150","Vzhodna Evropa":"151","Severna Evropa":"154","Zahodna Evropa":"155","Latinska Amerika":"419","Svet":"001","Afrika":"002","Severna Amerika":"003","JuÅ¾na Amerika":"005","Oceanija":"009","Zahodna Afrika":"011","Srednja Amerika":"013","Vzhodna Afrika":"014","Severna Afrika":"015","Srednja Afrika":"017","JuÅ¾na Afrika":"018","Amerike":"019","severnoameriÅ¡ka celina":"021","Karibi":"029","Vzhodna Azija":"030","JuÅ¾na Azija":"034","Jugovzhodna Azija":"035","JuÅ¾na Evropa":"039","Avstralija in Nova Zelandija":"053","Melanezija":"054","mikronezijska regija":"057","Polinezija":"061","Otok Ascension":"AC","Andora":"AD","ZdruÅ¾eni arabski emirati":"AE","Afganistan":"AF","Antigva in Barbuda":"AG","Angvila":"AI","Albanija":"AL","Armenija":"AM","Nizozemski Antili":"AN","Angola":"AO","Antarktika":"AQ","Argentina":"AR","AmeriÅ¡ka Samoa":"AS","Avstrija":"AT","Avstralija":"AU","Aruba":"AW","Alandsko otoÄje":"AX","AzerbajdÅ¾an":"AZ","Bosna in Hercegovina":"BA","Barbados":"BB","BangladeÅ¡":"BD","Belgija":"BE","Burkina Faso":"BF","Bolgarija":"BG","Bahrajn":"BH","Burundi":"BI","Benin":"BJ","Saint Barthelemy":"BL","Bermudi":"BM","Brunej":"BN","Bolivija":"BO","Nizozemski Karibi":"BQ","Brazilija":"BR","Bahami":"BS","Butan":"BT","Bouvetov otok":"BV","Bocvana":"BW","Belorusija":"BY","Belize":"BZ","Kanada":"CA","Kokosovi otoki":"CC","DemokratiÄna republika Kongo":"CD","CentralnoafriÅ¡ka republika":"CF","Kongo - Brazzaville":"CG","Å vica":"CH","SlonokoÅ¡Äena obala":"CI","Cookovo otoÄje":"CK","Äile":"CL","Kamerun":"CM","Kitajska":"CN","Kolumbija":"CO","Otok Clipperton":"CP","Kostarika":"CR","Kuba":"CU","Zelenortski otoki":"CV","CuraÃ§ao":"CW","BoÅ¾iÄni otok":"CX","Ciper":"CY","ÄeÅ¡ka":"CZ","NemÄija":"DE","Diego Garcia":"DG","DÅ¾ibuti":"DJ","Danska":"DK","Dominika":"DM","Dominikanska republika":"DO","AlÅ¾irija":"DZ","Ceuta in Melilla":"EA","Ekvador":"EC","Estonija":"EE","Egipt":"EG","Zahodna Sahara":"EH","Eritreja":"ER","Å panija":"ES","Etiopija":"ET","Evropska unija":"EU","Finska":"FI","FidÅ¾i":"FJ","Falklandski otoki":"FK","Mikronezija":"FM","Ferski otoki":"FO","Francija":"FR","Gabon":"GA","Velika Britanija":"GB","Grenada":"GD","Gruzija":"GE","Francoska Gvajana":"GF","Guernsey":"GG","Gana":"GH","Gibraltar":"GI","Grenlandija":"GL","Gambija":"GM","Gvineja":"GN","Gvadalupe":"GP","Ekvatorialna Gvineja":"GQ","GrÄija":"GR","JuÅ¾na Georgia in JuÅ¾ni Sandwichevi otoki":"GS","Gvatemala":"GT","Guam":"GU","Gvineja Bissau":"GW","Gvajana":"GY","Posebno administrativno obmoÄje LR Kitajske Hong Kong":"HK","Otok Heard in otoÄje McDonald":"HM","Honduras":"HN","HrvaÅ¡ka":"HR","Haiti":"HT","MadÅ¾arska":"HU","Kanarski otoki":"IC","Indonezija":"ID","Irska":"IE","Izrael":"IL","Otok Man":"IM","Indija":"IN","Britansko ozemlje v Indijskem oceanu":"IO","Irak":"IQ","Iran":"IR","Islandija":"IS","Italija":"IT","Jersey":"JE","Jamajka":"JM","Jordanija":"JO","Japonska":"JP","Kenija":"KE","Kirgizistan":"KG","KambodÅ¾a":"KH","Kiribati":"KI","Komori":"KM","Saint Kitts in Nevis":"KN","Severna Koreja":"KP","JuÅ¾na Koreja":"KR","Kuvajt":"KW","Kajmanski otoki":"KY","Kazahstan":"KZ","Laos":"LA","Libanon":"LB","Saint Lucia":"LC","LihtenÅ¡tajn":"LI","Å rilanka":"LK","Liberija":"LR","Lesoto":"LS","Litva":"LT","Luksemburg":"LU","Latvija":"LV","Libija":"LY","Maroko":"MA","Monako":"MC","Moldavija":"MD","Ärna gora":"ME","Saint Martin":"MF","Madagaskar":"MG","Marshallovi otoki":"MH","Makedonija":"MK","Mali":"ML","Mjanmar [Burma]":"MM","Mongolija":"MN","Posebno administrativno obmoÄje LR Kitajske Macao":"MO","Severni Marianski otoki":"MP","Martinik":"MQ","Mavretanija":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldivi":"MV","Malavi":"MW","Mehika":"MX","Malezija":"MY","Mozambik":"MZ","Namibija":"NA","Nova Kaledonija":"NC","Niger":"NE","NorfolÅ¡ki otok":"NF","Nigerija":"NG","Nikaragva":"NI","Nizozemska":"NL","NorveÅ¡ka":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Nova Zelandija":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Francoska Polinezija":"PF","Papua Nova Gvineja":"PG","Filipini":"PH","Pakistan":"PK","Poljska":"PL","Saint Pierre in Miquelon":"PM","Pitcairn":"PN","Portoriko":"PR","Palestinsko ozemlje":"PS","Portugalska":"PT","Palau":"PW","Paragvaj":"PY","Katar":"QA","Ostala oceanija":"QO","Reunion":"RE","Romunija":"RO","Srbija":"RS","Rusija":"RU","Ruanda":"RW","Saudova Arabija":"SA","Salomonovi otoki":"SB","SejÅ¡eli":"SC","Sudan":"SD","Å vedska":"SE","Singapur":"SG","Sveta Helena":"SH","Slovenija":"SI","Svalbard in Jan Mayen":"SJ","SlovaÅ¡ka":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalija":"SO","Surinam":"SR","JuÅ¾ni Sudan":"SS","Sao Tome in Principe":"ST","Salvador":"SV","Sint Maarten":"SX","Sirija":"SY","Svazi":"SZ","Tristan da Cunha":"TA","OtoÄji Turks in Caicos":"TC","Äad":"TD","Francosko juÅ¾no ozemlje":"TF","Togo":"TG","Tajska":"TH","TadÅ¾ikistan":"TJ","Tokelau":"TK","Vzhodni Timor":"TL","Turkmenistan":"TM","Tunizija":"TN","Tonga":"TO","TurÄija":"TR","Trinidad in Tobago":"TT","Tuvalu":"TV","Tajvan":"TW","Tanzanija":"TZ","Ukrajina":"UA","Uganda":"UG","Druga ameriÅ¡ka ozemlja v Tihem oceanu":"UM","ZdruÅ¾ene drÅ¾ave Amerike":"US","Urugvaj":"UY","Uzbekistan":"UZ","Vatikan":"VA","Saint Vincent in Grenadine":"VC","Venezuela":"VE","Britanski DeviÅ¡ki otoki":"VG","AmeriÅ¡ki DeviÅ¡ki otoki":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis in Futuna":"WF","Samoa":"WS","Jemen":"YE","Mayotte":"YT","JuÅ¾noafriÅ¡ka republika":"ZA","Zambija":"ZM","Zimbabve":"ZW","Neznano ali neveljavno obmoÄje":"ZZ"};
ilib.data.ctrynames_so = {"Andora":"AD","Imaaraadka Carabta ee Midoobay":"AE","Afgaanistaan":"AF","Antigua iyo Barbuda":"AG","Anguilla":"AI","Albaaniya":"AL","Armeeniya":"AM","Netherlands Antilles":"AN","Angoola":"AO","Arjantiin":"AR","Samowa Ameerika":"AS","Awsteriya":"AT","Awstaraaliya":"AU","Aruba":"AW","Azerbajaan":"AZ","Bosniya Hersigoviina":"BA","Baarbadoos":"BB","Bangaaladheesh":"BD","Biljam":"BE","Burkiina Faaso":"BF","Bulgaariya":"BG","Baxreyn":"BH","Burundi":"BI","Biniin":"BJ","Bermuuda":"BM","Buruneeya":"BN","Boliifiya":"BO","Braasiil":"BR","Bahaamas":"BS","Bhutan":"BT","Botuswaana":"BW","Belarus":"BY","Belize":"BZ","Kanada":"CA","Jamhuuriyadda Dimuquraadiga Kongo":"CD","Jamhuuriyadda Afrikada Dhexe":"CF","Kongo":"CG","Swiiserlaand":"CH","Ivory coast":"CI","Jaziiradda Cook":"CK","Jili":"CL","Kaameruun":"CM","Shiinaha":"CN","Kolombiya":"CO","Kosta Riika":"CR","Kuuba":"CU","Cape Verde Islands":"CV","Qubrus":"CY","Jamhuuriyadda Jek":"CZ","Jarmal":"DE","Jabuuti":"DJ","Denmark":"DK","Domeenika":"DM","Jamhuuriyadda Domeenika":"DO","Aljeeriya":"DZ","Ikuwadoor":"EC","Estooniya":"EE","Masar":"EG","Eretereeya":"ER","Isbeyn":"ES","Itoobiya":"ET","Finland":"FI","Fiji":"FJ","Jaziiradaha Fooklaan":"FK","Micronesia":"FM","Faransiis":"FR","Gaaboon":"GA","United Kingdom":"GB","Giriinaada":"GD","Joorjiya":"GE","French Guiana":"GF","Gaana":"GH","Gibraltar":"GI","Greenland":"GL","Gambiya":"GM","Gini":"GN","Guadeloupe":"GP","Equatorial Guinea":"GQ","Giriig":"GR","Guwaatamaala":"GT","Guam":"GU","Gini-Bisaaw":"GW","Guyana":"GY","Honduras":"HN","Korweeshiya":"HR","Hayti":"HT","Hangeri":"HU","Indoneesiya":"ID","Ayrlaand":"IE","IsraaÊ¼iil":"IL","Hindiya":"IN","British Indian Ocean Territory":"IO","Ciraaq":"IQ","Iiraan":"IR","Iislaand":"IS","Talyaani":"IT","Jameyka":"JM","Urdun":"JO","Jabaan":"JP","Kiiniya":"KE","Kirgistaan":"KG","Kamboodiya":"KH","Kiribati":"KI","Komooros":"KM","Saint Kitts and Nevis":"KN","Kuuriyada Waqooyi":"KP","Kuuriyada Koonfureed":"KR","Kuwayt":"KW","Cayman Islands":"KY","Kasaakhistaan":"KZ","Laos":"LA","Lubnaan":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sirilaanka":"LK","Laybeeriya":"LR","Losooto":"LS","Lituweeniya":"LT","Luksemboorg":"LU","Latfiya":"LV","Liibiya":"LY","Marooko":"MA","Moonako":"MC","Moldofa":"MD","Madagaskar":"MG","Marshall Islands":"MH","Makadooniya":"MK","Maali":"ML","Myanmar":"MM","Mongooliya":"MN","Northern Mariana Islands":"MP","Martinique":"MQ","Muritaaniya":"MR","Montserrat":"MS","Maalda":"MT","Murishiyoos":"MU","Maaldiqeen":"MV","Malaawi":"MW","Meksiko":"MX","Malaysia":"MY","Musambiig":"MZ","Namiibiya":"NA","New Caledonia":"NC","Nayjer":"NE","Norfolk Island":"NF","Nayjeeriya":"NG","Nikaraaguwa":"NI","Netherlands":"NL","Noorweey":"NO","Nebaal":"NP","Nauru":"NR","Niue":"NU","Neyuusilaand":"NZ","Cumaan":"OM","Panama":"PA","Peru":"PE","French Polynesia":"PF","Papua New Guinea":"PG","Filibiin":"PH","Bakistaan":"PK","Booland":"PL","Saint Pierre and Miquelon":"PM","Pitcairn":"PN","Puerto Rico":"PR","Falastiin Daanka galbeed iyo Qasa":"PS","Bortuqaal":"PT","Palau":"PW","Paraguay":"PY","Qadar":"QA","RÃ©union":"RE","Rumaaniya":"RO","Ruush":"RU","Ruwanda":"RW","Sacuudi Carabiya":"SA","Solomon Islands":"SB","Sishelis":"SC","Suudaan":"SD","Iswidhan":"SE","Singaboor":"SG","Saint Helena":"SH","Slovenia":"SI","Slovakia":"SK","Siraaliyoon":"SL","San Marino":"SM","Sinigaal":"SN","Soomaaliya":"SO","Suriname":"SR","SÃ£o TomÃ© and PrÃ­ncipe":"ST","El Salvador":"SV","Suuriya":"SY","Iswaasilaand":"SZ","Turks and Caicos Islands":"TC","Jaad":"TD","Toogo":"TG","Taylaand":"TH","Tajikistan":"TJ","Tokelau":"TK","Timorka bari":"TL","Turkmenistan":"TM","Tuniisiya":"TN","Tonga":"TO","Turki":"TR","Trinidad and Tobago":"TT","Tuvalu":"TV","Taywaan":"TW","Tansaaniya":"TZ","Ukrayn":"UA","Ugaanda":"UG","Maraykanka":"US","Uruguwaay":"UY","Uusbakistaan":"UZ","Faatikaan":"VA","Saint Vincent and the Grenadines":"VC","Fenisuweela":"VE","British Virgin Islands":"VG","U.S. Virgin Islands":"VI","Fiyetnaam":"VN","Vanuatu":"VU","Wallis and Futuna":"WF","Samoa":"WS","Yaman":"YE","Mayotte":"YT","Koonfur Afrika":"ZA","Saambiya":"ZM","Simbaabwe":"ZW","Far aan la aqoon amase aan saxnayn":"ZZ"};
ilib.data.ctrynames_sq = {"AndorrÃ«":"AD","Emiratet Arabe te Bashkuara":"AE","Afganistan":"AF","Antigua e Barbuda":"AG","ShqipÃ«ria":"AL","Armeni":"AM","AngolÃ«":"AO","ArgjentinÃ«":"AR","Austri":"AT","Australi":"AU","Ishujt Aland":"AX","Azerbajxhan":"AZ","Bosnja dhe Hercegovina":"BA","BelgjikÃ«":"BE","Bullgari":"BG","Bahrein":"BH","Brunej":"BN","Bolivi":"BO","Brazili":"BR","Butan":"BT","Botsvana":"BW","Bjellorusi":"BY","Kanada":"CA","Republika Qendrore e AfrikÃ«s":"CF","Kongo":"CG","ZvicÃ«r":"CH","Bregu i FildishtÃ«":"CI","Kili":"CL","Kamerun":"CM","KinÃ«":"CN","Kolumbi":"CO","Kosta Rika":"CR","KubÃ«":"CU","Kap Verde":"CV","Qipro":"CY","Republika e ÃekisÃ«":"CZ","Gjermani":"DE","Xhibuti":"DJ","DanimarkÃ«":"DK","DominikÃ«":"DM","Republika DominikanÃ«":"DO","Algjeri":"DZ","Ekuator":"EC","Estoni":"EE","Egjipt":"EG","Saharaja PerÃ«ndimore":"EH","Eritre":"ER","SpanjÃ«":"ES","Etiopi":"ET","FinlandÃ«":"FI","Fixhi":"FJ","Mikronezi":"FM","FrancÃ«":"FR","Gjabon":"GA","MbretÃ«ria e Bashkuar":"GB","Gjeorgji":"GE","GanÃ«":"GH","Gambi":"GM","Guine":"GN","Guineja Ekuatoriale":"GQ","Greqi":"GR","GuatemalÃ«":"GT","Guine Bisau":"GW","Guajana":"GY","Kroaci":"HR","Hungari":"HU","Indonezi":"ID","IrlandÃ«":"IE","Izrael":"IL","Indi":"IN","Irak":"IQ","IslandÃ«":"IS","Itali":"IT","XhamajkÃ«":"JM","Jordani":"JO","Japoni":"JP","Kenia":"KE","Kirgistan":"KG","Kamboxhi":"KH","Qiribati":"KI","Komore":"KM","Saint Kitts e Nevis":"KN","Koreja e Veriut":"KP","Koreja e Jugut":"KR","Kuvajt":"KW","Kazakistan":"KZ","Liban":"LB","LihtÃ«nshtajn":"LI","Liberi":"LR","Lesoto":"LS","Lituani":"LT","Luksemburg":"LU","Letoni":"LV","Libi":"LY","Maroko":"MA","Monako":"MC","Moldavi":"MD","Madagaskar":"MG","Ishujt Marshall":"MH","Maqedoni":"MK","Mongoli":"MN","Mauritani":"MR","MaltÃ«":"MT","Maldivit":"MV","Malavi":"MW","MeksikÃ«":"MX","Malajzi":"MY","Mozambik":"MZ","Namibi":"NA","Nigeri":"NG","Nikaragua":"NI","Vendet e UlÃ«ta":"NL","Norvegji":"NO","Zelanda e Re":"NZ","Papua Guineja e Re":"PG","Filipine":"PH","Poloni":"PL","Portugali":"PT","Paraguaj":"PY","Katar":"QA","Rumani":"RO","Rusi":"RU","Ruanda":"RW","Arabia Saudite":"SA","Ishujt Solomon":"SB","Sishel":"SC","Suedi":"SE","Singapor":"SG","Slloveni":"SI","Sllovaki":"SK","Siera Leone":"SL","Somali":"SO","Sao Tome e Prinsipe":"ST","Siri":"SY","SvazilandÃ«":"SZ","Ãad":"TD","Togo":"TG","TajlandÃ«":"TH","Taxhikistan":"TJ","Tunisi":"TN","Tonga":"TO","Turqi":"TR","Trinidad e Tobago":"TT","Tajvan":"TW","Tanzani":"TZ","UkrainÃ«":"UA","Shtetet e Bashkuara tÃ« AmerikÃ«s":"US","Uruguaj":"UY","Vatikan":"VA","Saint Vincent e Grenadinet":"VC","VenezuelÃ«":"VE","Jemen":"YE","Afrika e Jugut":"ZA","Zambi":"ZM","Zimbabve":"ZW","Rajon i panjohur":"ZZ"};
ilib.data.ctrynames_sr = {"ÐÐ·Ð¸ÑÐ°":"142","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÐ·Ð¸ÑÐ°":"143","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÐ·Ð¸ÑÐ°":"145","ÐÐ²ÑÐ¾Ð¿Ð°":"150","ÐÑÑÐ¾ÑÐ½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"151","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"154","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"155","ÐÐ°ÑÐ¸Ð½ÑÐºÐ° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"419","Ð¡Ð²ÐµÑ":"001","ÐÑÑÐ¸ÐºÐ°":"002","Ð¡ÐµÐ²ÐµÑÐ½Ð¾Ð°Ð¼ÐµÑÐ¸ÑÐºÐ¸ ÐºÐ¾Ð½ÑÐ¸Ð½ÐµÐ½Ñ":"003","ÐÑÐ¶Ð½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"005","ÐÐºÐµÐ°Ð½Ð¸ÑÐ°":"009","ÐÐ°Ð¿Ð°Ð´Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"011","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"013","ÐÑÑÐ¾ÑÐ½Ð° ÐÑÑÐ¸ÐºÐ°":"014","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÑÑÐ¸ÐºÐ°":"015","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"017","ÐÑÐ¶Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"018","ÐÐ¼ÐµÑÐ¸ÐºÐµ":"019","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"021","ÐÐ°ÑÐ¸Ð±Ð¸":"029","ÐÑÑÐ¾ÑÐ½Ð° ÐÐ·Ð¸ÑÐ°":"030","ÐÑÐ¶Ð½Ð° ÐÐ·Ð¸ÑÐ°":"034","ÐÑÐ³Ð¾Ð¸ÑÑÐ¾ÑÐ½Ð° ÐÐ·Ð¸ÑÐ°":"035","ÐÑÐ¶Ð½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"039","ÐÑÑÑÑÐ°Ð»Ð¸ÑÐ° Ð¸ ÐÐ¾Ð²Ð¸ ÐÐµÐ»Ð°Ð½Ð´":"053","ÐÐµÐ»Ð°Ð½ÐµÐ·Ð¸ÑÐ°":"054","ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸ÑÑÐºÐ¸ ÑÐµÐ³Ð¸Ð¾Ð½":"057","ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸ÑÐ°":"061","ÐÑÑÑÐ²Ð¾ ÐÑÐµÐ½ÑÐ¸Ð¾Ð½":"AC","ÐÐ½Ð´Ð¾ÑÐ°":"AD","Ð£ÑÐµÐ´Ð¸ÑÐµÐ½Ð¸ ÐÑÐ°Ð¿ÑÐºÐ¸ ÐÐ¼Ð¸ÑÐ°ÑÐ¸":"AE","ÐÐ²Ð³Ð°Ð½Ð¸ÑÑÐ°Ð½":"AF","ÐÐ½ÑÐ¸Ð³Ð²Ðµ Ð¸ ÐÐ°ÑÐ±ÑÐ´Ð°":"AG","ÐÐ½Ð³Ð²Ð¸Ð»Ð°":"AI","ÐÐ»Ð±Ð°Ð½Ð¸ÑÐ°":"AL","ÐÑÐ¼ÐµÐ½Ð¸ÑÐ°":"AM","Ð¥Ð¾Ð»Ð°Ð½Ð´ÑÐºÐ¸ ÐÐ½ÑÐ¸Ð»Ð¸":"AN","ÐÐ½Ð³Ð¾Ð»Ð°":"AO","ÐÐ½ÑÐ°ÑÐºÑÐ¸Ðº":"AQ","ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°":"AR","ÐÐ¼ÐµÑÐ¸ÑÐºÐ° Ð¡Ð°Ð¼Ð¾Ð°":"AS","ÐÑÑÑÑÐ¸ÑÐ°":"AT","ÐÑÑÑÑÐ°Ð»Ð¸ÑÐ°":"AU","ÐÑÑÐ±Ð°":"AW","ÐÐ»Ð°Ð½Ð´ÑÐºÐ° Ð¾ÑÑÑÐ²Ð°":"AX","ÐÐ·ÐµÑÐ±ÐµÑÑÐ°Ð½":"AZ","ÐÐ¾ÑÐ½Ð° Ð¸ Ð¥ÐµÑÑÐµÐ³Ð¾Ð²Ð¸Ð½Ð°":"BA","ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ":"BB","ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ":"BD","ÐÐµÐ»Ð³Ð¸ÑÐ°":"BE","ÐÑÑÐºÐ¸Ð½Ð° Ð¤Ð°ÑÐ¾":"BF","ÐÑÐ³Ð°ÑÑÐºÐ°":"BG","ÐÐ°ÑÑÐµÐ¸Ð½":"BH","ÐÑÑÑÐ½Ð´Ð¸":"BI","ÐÐµÐ½Ð¸Ð½":"BJ","Ð¡Ð²ÐµÑÐ¸ ÐÐ°ÑÑÐ¾Ð»Ð¾Ð¼ÐµÑ":"BL","ÐÐµÑÐ¼ÑÐ´Ð°":"BM","ÐÑÑÐ½ÐµÑ":"BN","ÐÐ¾Ð»Ð¸Ð²Ð¸ÑÐ°":"BO","ÐÐ°ÑÐ¸Ð¿ÑÐºÐ° Ð¥Ð¾Ð»Ð°Ð½Ð´Ð¸ÑÐ°":"BQ","ÐÑÐ°Ð·Ð¸Ð»":"BR","ÐÐ°ÑÐ°Ð¼Ð¸":"BS","ÐÑÑÐ°Ð½":"BT","ÐÑÐ²Ðµ ÐÑÑÑÐ²Ð°":"BV","ÐÐ¾ÑÐ²Ð°Ð½Ð°":"BW","ÐÐµÐ»Ð¾ÑÑÑÐ¸ÑÐ°":"BY","ÐÐµÐ»Ð¸Ð·Ðµ":"BZ","ÐÐ°Ð½Ð°Ð´Ð°":"CA","ÐÐ¾ÐºÐ¾Ñ (ÐÐµÐ»Ð¸Ð½Ð³) ÐÑÑÑÐ²Ð°":"CC","ÐÐ¾Ð½Ð³Ð¾ - ÐÐ¸Ð½ÑÐ°ÑÐ°":"CD","Ð¦ÐµÐ½ÑÑÐ°Ð»Ð½Ð¾ ÐÑÑÐ¸ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"CF","ÐÐ¾Ð½Ð³Ð¾ - ÐÑÐ°Ð·Ð°Ð²Ð¸Ð»":"CG","Ð¨Ð²Ð°ÑÑÐ°ÑÑÐºÐ°":"CH","ÐÐ±Ð°Ð»Ð° Ð¡Ð»Ð¾Ð½Ð¾Ð²Ð°ÑÐµ":"CI","ÐÑÐºÐ¾Ð²Ð° ÐÑÑÑÐ²Ð°":"CK","Ð§Ð¸Ð»Ðµ":"CL","ÐÐ°Ð¼ÐµÑÑÐ½":"CM","ÐÐ¸Ð½Ð°":"CN","ÐÐ¾Ð»ÑÐ¼Ð±Ð¸ÑÐ°":"CO","ÐÑÑÑÐ²Ð¾ ÐÐ»Ð¸Ð¿ÐµÑÑÐ¾Ð½":"CP","ÐÐ¾ÑÑÐ°ÑÐ¸ÐºÐ°":"CR","ÐÑÐ±Ð°":"CU","ÐÐ°Ð¿Ðµ ÐÐµÑÐ´Ðµ":"CV","ÐÑÑÐ°ÑÐ°Ð¾":"CW","ÐÐ¾Ð¶Ð¸ÑÐ½Ð° Ð¾ÑÑÑÐ²Ð°":"CX","ÐÐ¸Ð¿Ð°Ñ":"CY","Ð§ÐµÑÐºÐ°":"CZ","ÐÐµÐ¼Ð°ÑÐºÐ°":"DE","ÐÐ¸ÑÐµÐ³Ð¾ ÐÐ°ÑÑÐ¸ÑÐ°":"DG","ÐÐ¸Ð±ÑÑÐ¸":"DJ","ÐÐ°Ð½ÑÐºÐ°":"DK","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°":"DM","ÐÐ¾Ð¼Ð¸Ð½Ð¸ÐºÐ°Ð½ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"DO","ÐÐ»Ð¶Ð¸Ñ":"DZ","Ð¡ÐµÑÑÐ° Ð¸ ÐÐµÐ»Ð¸ÑÐ°":"EA","ÐÐºÐ²Ð°Ð´Ð¾Ñ":"EC","ÐÑÑÐ¾Ð½Ð¸ÑÐ°":"EE","ÐÐ³Ð¸Ð¿Ð°Ñ":"EG","ÐÐ°Ð¿Ð°Ð´Ð½Ð° Ð¡Ð°ÑÐ°ÑÐ°":"EH","ÐÑÐ¸ÑÑÐµÑÐ°":"ER","Ð¨Ð¿Ð°Ð½Ð¸ÑÐ°":"ES","ÐÑÐ¸Ð¾Ð¿Ð¸ÑÐ°":"ET","ÐÐ²ÑÐ¾Ð¿ÑÐºÐ° Ð£Ð½Ð¸ÑÐ°":"EU","Ð¤Ð¸Ð½ÑÐºÐ°":"FI","Ð¤Ð¸ÑÐ¸":"FJ","Ð¤Ð¾ÐºÐ»Ð°Ð½Ð´ÑÐºÐ° Ð¾ÑÑÑÐ²Ð°":"FK","ÐÐ¸ÐºÑÐ¾Ð½ÐµÐ·Ð¸ÑÐ°":"FM","Ð¤Ð°ÑÑÐºÐ° ÐÑÑÑÐ²Ð°":"FO","Ð¤ÑÐ°Ð½ÑÑÑÐºÐ°":"FR","ÐÐ°Ð±Ð¾Ð½":"GA","ÐÐµÐ»Ð¸ÐºÐ° ÐÑÐ¸ÑÐ°Ð½Ð¸ÑÐ°":"GB","ÐÑÐµÐ½Ð°Ð´Ð°":"GD","ÐÑÑÐ·Ð¸ÑÐ°":"GE","Ð¤ÑÐ°Ð½ÑÑÑÐºÐ° ÐÐ²Ð°ÑÐ°Ð½Ð°":"GF","ÐÑÑÐ½ÑÐ¸":"GG","ÐÐ°Ð½Ð°":"GH","ÐÐ¸Ð±ÑÐ°Ð»ÑÐ°Ñ":"GI","ÐÑÐµÐ½Ð»Ð°Ð½Ð´":"GL","ÐÐ°Ð¼Ð±Ð¸ÑÐ°":"GM","ÐÐ²Ð¸Ð½ÐµÑÐ°":"GN","ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿Ðµ":"GP","ÐÐºÐ²Ð°ÑÐ¾ÑÐ¸ÑÐ°Ð»Ð½Ð° ÐÐ²Ð¸Ð½ÐµÑÐ°":"GQ","ÐÑÑÐºÐ°":"GR","ÐÑÐ¶Ð½Ð° ÐÐ¾ÑÑÐ¸ÑÐ° Ð¸ ÐÑÐ¶Ð½Ð° Ð¡ÐµÐ½Ð´Ð²Ð¸Ñ ÐÑÑÑÐ²Ð°":"GS","ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°":"GT","ÐÑÐ°Ð¼":"GU","ÐÐ²Ð¸Ð½ÐµÑÐ°-ÐÐ¸ÑÐ°Ð¾":"GW","ÐÐ²Ð°ÑÐ°Ð½Ð°":"GY","Ð¥Ð¾Ð½Ð³ ÐÐ¾Ð½Ð³ Ð¡. Ð. Ð . ÐÐ¸Ð½Ð°":"HK","Ð¥ÐµÑÐ´ Ð¸ ÐÐµÐºÐ´Ð¾Ð½Ð°Ð»Ð´ ÐÑÑÑÐ²Ð°":"HM","Ð¥Ð¾Ð½Ð´ÑÑÐ°Ñ":"HN","Ð¥ÑÐ²Ð°ÑÑÐºÐ°":"HR","Ð¥Ð°Ð¸ÑÐ¸":"HT","ÐÐ°ÑÐ°ÑÑÐºÐ°":"HU","ÐÐ°Ð½Ð°ÑÑÐºÐ° Ð¾ÑÑÑÐ²Ð°":"IC","ÐÐ½Ð´Ð¾Ð½ÐµÐ·Ð¸ÑÐ°":"ID","ÐÑÑÐºÐ°":"IE","ÐÐ·ÑÐ°ÐµÐ»":"IL","ÐÑÑÑÐ²Ð¾ ÐÐ°Ð½":"IM","ÐÐ½Ð´Ð¸ÑÐ°":"IN","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ° ÑÐµÑÐ¸ÑÐ¾ÑÐ¸ÑÐ° Ñ ÐÐ½Ð´Ð¸ÑÑÐºÐ¾Ð¼ Ð¾ÐºÐµÐ°Ð½Ñ":"IO","ÐÑÐ°Ðº":"IQ","ÐÑÐ°Ð½":"IR","ÐÑÐ»Ð°Ð½Ð´":"IS","ÐÑÐ°Ð»Ð¸ÑÐ°":"IT","ÐÐµÑÑÐ¸":"JE","ÐÐ°Ð¼Ð°ÑÐºÐ°":"JM","ÐÐ¾ÑÐ´Ð°Ð½":"JO","ÐÐ°Ð¿Ð°Ð½":"JP","ÐÐµÐ½Ð¸ÑÐ°":"KE","ÐÐ¸ÑÐ³Ð¸Ð·ÑÑÐ°Ð½":"KG","ÐÐ°Ð¼Ð±Ð¾ÑÐ°":"KH","ÐÐ¸ÑÐ¸Ð±Ð°ÑÐ¸":"KI","ÐÐ¾Ð¼Ð¾ÑÑÐºÐ° ÐÑÑÑÐ²Ð°":"KM","Ð¡ÐµÐ½Ñ ÐÐ¸ÑÑ Ð¸ ÐÐµÐ²Ð¸Ñ":"KN","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ¾ÑÐµÑÐ°":"KP","ÐÑÐ¶Ð½Ð° ÐÐ¾ÑÐµÑÐ°":"KR","ÐÑÐ²Ð°ÑÑ":"KW","ÐÐ°ÑÐ¼Ð°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°":"KY","ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½":"KZ","ÐÐ°Ð¾Ñ":"LA","ÐÐ¸Ð±Ð°Ð½":"LB","Ð¡ÐµÐ½Ñ ÐÑÑÐ¸ÑÐ°":"LC","ÐÐ¸ÑÑÐµÐ½ÑÑÐ°ÑÐ½":"LI","Ð¨ÑÐ¸ ÐÐ°Ð½ÐºÐ°":"LK","ÐÐ¸Ð±ÐµÑÐ¸ÑÐ°":"LR","ÐÐµÑÐ¾ÑÐ¾":"LS","ÐÐ¸ÑÐ²Ð°Ð½Ð¸ÑÐ°":"LT","ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³":"LU","ÐÐµÑÐ¾Ð½Ð¸ÑÐ°":"LV","ÐÐ¸Ð±Ð¸ÑÐ°":"LY","ÐÐ°ÑÐ¾ÐºÐ¾":"MA","ÐÐ¾Ð½Ð°ÐºÐ¾":"MC","ÐÐ¾Ð»Ð´Ð°Ð²Ð¸ÑÐ°":"MD","Ð¦ÑÐ½Ð° ÐÐ¾ÑÐ°":"ME","Ð¡ÐµÐ½Ñ ÐÐ°ÑÑÐ¸Ð½":"MF","ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ":"MG","ÐÐ°ÑÑÐ°Ð»ÑÐºÐ° ÐÑÑÑÐ²Ð°":"MH","ÐÐ°ÐºÐµÐ´Ð¾Ð½Ð¸ÑÐ°":"MK","ÐÐ°Ð»Ð¸":"ML","ÐÐ¸ÑÐ°Ð½Ð¼Ð°Ñ [ÐÑÑÐ¼Ð°]":"MM","ÐÐ¾Ð½Ð³Ð¾Ð»Ð¸ÑÐ°":"MN","ÐÐ°ÐºÐ°Ð¾ Ð¡. Ð. Ð . ÐÐ¸Ð½Ð°":"MO","Ð¡ÐµÐ²ÐµÑÐ½Ð° ÐÐ°ÑÐ¸ÑÐ°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°":"MP","ÐÐ°ÑÑÐ¸Ð½Ð¸Ðº":"MQ","ÐÐ°ÑÑÐ¸ÑÐ°Ð½Ð¸ÑÐ°":"MR","ÐÐ¾Ð½ÑÐµÑÐ°Ñ":"MS","ÐÐ°Ð»ÑÐ°":"MT","ÐÐ°ÑÑÐ¸ÑÐ¸ÑÑÑ":"MU","ÐÐ°Ð»Ð´Ð¸Ð²Ð¸":"MV","ÐÐ°Ð»Ð°Ð²Ð¸":"MW","ÐÐµÐºÑÐ¸ÐºÐ¾":"MX","ÐÐ°Ð»ÐµÐ·Ð¸ÑÐ°":"MY","ÐÐ¾Ð·Ð°Ð¼Ð±Ð¸Ðº":"MZ","ÐÐ°Ð¼Ð¸Ð±Ð¸ÑÐ°":"NA","ÐÐ¾Ð²Ð° ÐÐ°Ð»ÐµÐ´Ð¾Ð½Ð¸ÑÐ°":"NC","ÐÐ¸Ð³ÐµÑ":"NE","ÐÐ¾ÑÑÐ¾Ð»Ðº ÐÑÑÑÐ²Ð¾":"NF","ÐÐ¸Ð³ÐµÑÐ¸ÑÐ°":"NG","ÐÐ¸ÐºÐ°ÑÐ°Ð³Ð²Ð°":"NI","Ð¥Ð¾Ð»Ð°Ð½Ð´Ð¸ÑÐ°":"NL","ÐÐ¾ÑÐ²ÐµÑÐºÐ°":"NO","ÐÐµÐ¿Ð°Ð»":"NP","ÐÐ°ÑÑÑ":"NR","ÐÐ¸ÑÐµ":"NU","ÐÐ¾Ð²Ð¸ ÐÐµÐ»Ð°Ð½Ð´":"NZ","ÐÐ¼Ð°Ð½":"OM","ÐÐ°Ð½Ð°Ð¼Ð°":"PA","ÐÐµÑÑ":"PE","Ð¤ÑÐ°Ð½ÑÑÑÐºÐ° ÐÐ¾Ð»Ð¸Ð½ÐµÐ·Ð¸ÑÐ°":"PF","ÐÐ°Ð¿ÑÐ° ÐÐ¾Ð²Ð° ÐÐ²Ð¸Ð½ÐµÑÐ°":"PG","Ð¤Ð¸Ð»Ð¸Ð¿Ð¸Ð½Ð¸":"PH","ÐÐ°ÐºÐ¸ÑÑÐ°Ð½":"PK","ÐÐ¾ÑÑÐºÐ°":"PL","Ð¡ÐµÐ½ ÐÑÐµÑ Ð¸ ÐÐ¸ÐºÐµÐ»Ð¾Ð½":"PM","ÐÐ¸ÑÐºÐµÑÐ½":"PN","ÐÐ¾ÑÑÐ¾ Ð Ð¸ÐºÐ¾":"PR","ÐÐ°Ð»ÐµÑÑÐ¸Ð½ÑÐºÐµ ÑÐµÑÐ¸ÑÐ¾ÑÐ¸ÑÐµ":"PS","ÐÐ¾ÑÑÑÐ³Ð°Ð»":"PT","ÐÐ°Ð»Ð°Ñ":"PW","ÐÐ°ÑÐ°Ð³Ð²Ð°Ñ":"PY","ÐÐ°ÑÐ°Ñ":"QA","ÐÑÑÐ°Ð»Ð° Ð¾ÐºÐµÐ°Ð½Ð¸ÑÐ°":"QO","Ð ÐµÐ¸Ð½Ð¸Ð¾Ð½":"RE","Ð ÑÐ¼ÑÐ½Ð¸ÑÐ°":"RO","Ð¡ÑÐ±Ð¸ÑÐ°":"RS","Ð ÑÑÐ¸ÑÐ°":"RU","Ð ÑÐ°Ð½Ð´Ð°":"RW","Ð¡Ð°ÑÐ´Ð¸ÑÑÐºÐ° ÐÑÐ°Ð±Ð¸ÑÐ°":"SA","Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°":"SB","Ð¡ÐµÑÑÐµÐ»Ð¸":"SC","Ð¡ÑÐ´Ð°Ð½":"SD","Ð¨Ð²ÐµÐ´ÑÐºÐ°":"SE","Ð¡Ð¸Ð½Ð³Ð°Ð¿ÑÑ":"SG","Ð¡Ð²ÐµÑÐ° ÐÐµÐ»ÐµÐ½Ð°":"SH","Ð¡Ð»Ð¾Ð²ÐµÐ½Ð¸ÑÐ°":"SI","Ð¡Ð²Ð°Ð»Ð±Ð°ÑÐ´ Ð¸ ÐÐ°Ð½Ð¼Ð°ÑÐµÐ½ ÐÑÑÑÐ²Ð°":"SJ","Ð¡Ð»Ð¾Ð²Ð°ÑÐºÐ°":"SK","Ð¡Ð¸ÑÐµÑÐ° ÐÐµÐ¾Ð½Ðµ":"SL","Ð¡Ð°Ð½ ÐÐ°ÑÐ¸Ð½Ð¾":"SM","Ð¡ÐµÐ½ÐµÐ³Ð°Ð»":"SN","Ð¡Ð¾Ð¼Ð°Ð»Ð¸ÑÐ°":"SO","Ð¡ÑÑÐ¸Ð½Ð°Ð¼":"SR","ÐÑÐ¶Ð½Ð¸ Ð¡ÑÐ´Ð°Ð½":"SS","Ð¡Ð°Ð¾ Ð¢Ð¾Ð¼Ðµ Ð¸ ÐÑÐ¸Ð½ÑÐ¸Ð¿Ðµ":"ST","Ð¡Ð°Ð»Ð²Ð°Ð´Ð¾Ñ":"SV","Ð¡Ð²ÐµÑÐ¸ ÐÐ°ÑÑÐ¸Ð½":"SX","Ð¡Ð¸ÑÐ¸ÑÐ°":"SY","Ð¡Ð²Ð°Ð·Ð¸Ð»ÐµÐ½Ð´":"SZ","Ð¢ÑÐ¸ÑÑÐ°Ð½ Ð´Ð° ÐÑÑÐ°":"TA","Ð¢ÑÑÐºÑ Ð¸ ÐÐ°ÑÐºÐ¾Ñ ÐÑÑÑÐ²Ð°":"TC","Ð§Ð°Ð´":"TD","Ð¤ÑÐ°Ð½ÑÑÑÐºÐµ ÐÑÐ¶Ð½Ðµ Ð¢ÐµÑÐ¸ÑÐ¾ÑÐ¸ÑÐµ":"TF","Ð¢Ð¾Ð³Ð¾":"TG","Ð¢Ð°ÑÐ»Ð°Ð½Ð´":"TH","Ð¢Ð°ÑÐ¸ÐºÐ¸ÑÑÐ°Ð½":"TJ","Ð¢Ð¾ÐºÐµÐ»Ð°Ñ":"TK","ÐÑÑÐ¾ÑÐ½Ð¸ Ð¢Ð¸Ð¼Ð¾Ñ":"TL","Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸ÑÑÐ°Ð½":"TM","Ð¢ÑÐ½Ð¸Ñ":"TN","Ð¢Ð¾Ð½Ð³Ð°":"TO","Ð¢ÑÑÑÐºÐ°":"TR","Ð¢ÑÐ¸Ð½Ð¸Ð´Ð°Ð´ Ð¸ Ð¢Ð¾Ð±Ð°Ð³Ð¾":"TT","Ð¢ÑÐ²Ð°Ð»Ñ":"TV","Ð¢Ð°ÑÐ²Ð°Ð½":"TW","Ð¢Ð°Ð½Ð·Ð°Ð½Ð¸ÑÐ°":"TZ","Ð£ÐºÑÐ°ÑÐ¸Ð½Ð°":"UA","Ð£Ð³Ð°Ð½Ð´Ð°":"UG","ÐÐ°ÑÐ° ÑÐ´Ð°ÑÐµÐ½Ð° Ð¾ÑÑÑÐ²Ð° Ð¡ÐÐ":"UM","Ð¡ÑÐµÐ´Ð¸ÑÐµÐ½Ðµ ÐÐ¼ÐµÑÐ¸ÑÐºÐµ ÐÑÐ¶Ð°Ð²Ðµ":"US","Ð£ÑÑÐ³Ð²Ð°Ñ":"UY","Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½":"UZ","ÐÐ°ÑÐ¸ÐºÐ°Ð½":"VA","Ð¡ÐµÐ½Ñ ÐÐ¸Ð½ÑÐµÐ½Ñ Ð¸ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ð¸":"VC","ÐÐµÐ½ÐµÑÑÐµÐ»Ð°":"VE","ÐÑÐ¸ÑÐ°Ð½ÑÐºÐ° ÐÐµÐ²Ð¸ÑÐ°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°":"VG","Ð¡.Ð.Ð. ÐÐµÐ²Ð¸ÑÐ°Ð½ÑÐºÐ° ÐÑÑÑÐ²Ð°":"VI","ÐÐ¸ÑÐµÑÐ½Ð°Ð¼":"VN","ÐÐ°Ð½ÑÐ°ÑÑ":"VU","ÐÐ°Ð»Ð¸Ñ Ð¸ Ð¤ÑÑÑÐ½Ð° ÐÑÑÑÐ²Ð°":"WF","Ð¡Ð°Ð¼Ð¾Ð°":"WS","ÐÐµÐ¼ÐµÐ½":"YE","ÐÐ°ÑÐ¾ÑÐµ":"YT","ÐÑÐ¶Ð½Ð¾Ð°ÑÑÐ¸ÑÐºÐ° Ð ÐµÐ¿ÑÐ±Ð»Ð¸ÐºÐ°":"ZA","ÐÐ°Ð¼Ð±Ð¸ÑÐ°":"ZM","ÐÐ¸Ð¼Ð±Ð°Ð±Ð²Ðµ":"ZW","ÐÐµÐ¿Ð¾Ð·Ð½Ð°ÑÐ° Ð¸Ð»Ð¸ Ð½ÐµÐ²Ð°Ð¶ÐµÑÐ° Ð¾Ð±Ð»Ð°ÑÑ":"ZZ"};
ilib.data.ctrynames_sr_Latn_BA = {"Azija":"142","Centralna Azija":"143","Zapadna Azija":"145","Evropa":"150","IstoÄna Evropa":"151","Severna Evropa":"154","Zapadna Evropa":"155","Latinska Amerika":"419","Svet":"001","Afrika":"002","SevernoameriÄki kontinent":"003","JuÅ¾na Amerika":"005","Okeanija":"009","Zapadna Afrika":"011","Centralna Amerika":"013","IstoÄna Afrika":"014","Severna Afrika":"015","Centralna Afrika":"017","JuÅ¾na Afrika":"018","Amerike":"019","Severna Amerika":"021","Karibi":"029","IstoÄna Azija":"030","JuÅ¾na Azija":"034","JugoistoÄna Azija":"035","JuÅ¾na Evropa":"039","Australija i Novi Zeland":"053","Melanezija":"054","Micronezija":"057","Polinezija":"061","Andora":"AD","Ujedinjeni Arapski Emirati":"AE","Avganistan":"AF","Antigva i Barbuda":"AG","Angvila":"AI","Albanija":"AL","Armenija":"AM","Holandski Antili":"AN","Angola":"AO","Antarktika":"AQ","Argentina":"AR","AmeriÄka Samoa":"AS","Austrija":"AT","Australija":"AU","Aruba":"AW","Alandska ostrva":"AX","AzerbejdÅ¾an":"AZ","Bosna i Hercegovina":"BA","Barbados":"BB","BangladeÅ¡":"BD","Belgija":"BE","Burkina Faso":"BF","Bugarska":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","Sv. Bartolomej":"BL","Bermuda":"BM","Brunej":"BN","Bolivija":"BO","Brazil":"BR","Bahami":"BS","Butan":"BT","Buve Ostrva":"BV","Bocvana":"BW","Belorusija":"BY","Belise":"BZ","Kanada":"CA","Kokos (Keling) Ostrva":"CC","Demokratska Republika Kongo":"CD","Centralno AfriÄka Republika":"CF","Kongo":"CG","Å vajcarska":"CH","Obala SlonovaÄe":"CI","Kukova Ostrva":"CK","Äile":"CL","Kamerun":"CM","Kina":"CN","Kolumbija":"CO","Kostarika":"CR","Kuba":"CU","Kape Verde":"CV","BoÅ¾iÄna Ostrva":"CX","Kipar":"CY","ÄeÅ¡ka":"CZ","NemaÄka":"DE","DÅ¾ibuti":"DJ","Danska":"DK","Dominika":"DM","Dominikanska Republika":"DO","AlÅ¾ir":"DZ","Ekvador":"EC","Estonija":"EE","Egipat":"EG","Zapadna Sahara":"EH","Eritreja":"ER","Å panija":"ES","Etiopija":"ET","Evropska unija":"EU","Finska":"FI","FidÅ¾i":"FJ","Folklandska Ostrva":"FK","Mikronezija":"FM","Farska Ostrva":"FO","Francuska":"FR","Gabon":"GA","Velika Britanija":"GB","Grenada":"GD","Gruzija":"GE","Francuska Gvajana":"GF","Gurnsi":"GG","Gana":"GH","Gibraltar":"GI","Grenland":"GL","Gambija":"GM","Gvineja":"GN","Gvadelupe":"GP","Ekvatorijalna Gvineja":"GQ","GrÄka":"GR","JuÅ¾na DÅ¾ordÅ¾ija i JuÅ¾na SendviÄ Ostrva":"GS","Gvatemala":"GT","Guam":"GU","Gvineja-Bisao":"GW","Gvajana":"GY","Hong Kong (S. A. R. Kina)":"HK","Herd i Mekdonald Ostrva":"HM","Honduras":"HN","Hrvatska":"HR","Haiti":"HT","MaÄarska":"HU","Indonezija":"ID","Irska":"IE","Izrael":"IL","Ostrvo Man":"IM","Indija":"IN","Britansko Indijska Okeanska Teritorija":"IO","Irak":"IQ","Iran":"IR","Island":"IS","Italija":"IT","DÅ¾ersi":"JE","Jamajka":"JM","Jordan":"JO","Japan":"JP","Kenija":"KE","Kirgizstan":"KG","KambodÅ¾a":"KH","Kiribati":"KI","Komorska Ostrva":"KM","Sent Kits i Nevis":"KN","Severna Koreja":"KP","JuÅ¾na Koreja":"KR","Kuvajt":"KW","Kajmanska Ostrva":"KY","Kazahstan":"KZ","Laos":"LA","Liban":"LB","Sent Lucija":"LC","LihtenÅ¡tajn":"LI","Å ri Lanka":"LK","Liberija":"LR","Lesoto":"LS","Litvanija":"LT","Luksemburg":"LU","Letonija":"LV","Libija":"LY","Maroko":"MA","Monako":"MC","Moldavija":"MD","Crna Gora":"ME","Sv. Martin":"MF","Madagaskar":"MG","MarÅ¡alska Ostrva":"MH","Makedonija":"MK","Mali":"ML","Mijanmar":"MM","Mongolija":"MN","Makao (S. A. R. Kina)":"MO","Severna Marijanska Ostrva":"MP","Martinik":"MQ","Mauritanija":"MR","Monserat":"MS","Malta":"MT","Mauricius":"MU","Maldivi":"MV","Malavi":"MW","Meksiko":"MX","Malezija":"MY","Mozambik":"MZ","Namibija":"NA","Nova Kaledonija":"NC","Niger":"NE","Norfolk Ostrvo":"NF","Nigerija":"NG","Nikaragva":"NI","Holandija":"NL","NorveÅ¡ka":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Novi Zeland":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Francuska Polinezija":"PF","Papua Nova Gvineja":"PG","Filipini":"PH","Pakistan":"PK","Poljska":"PL","Sen Pjer i Mikelon":"PM","Pitcairn":"PN","Porto Riko":"PR","Palestinska Teritorija":"PS","Portugal":"PT","Palau":"PW","Paragvaj":"PY","Katar":"QA","Ostala okeanija":"QO","Rejunion":"RE","Rumunija":"RO","Srbija":"RS","Rusija":"RU","Ruanda":"RW","Saudijska Arabija":"SA","Solomonska Ostrva":"SB","SejÅ¡eli":"SC","Sudan":"SD","Å vedska":"SE","Singapur":"SG","Sveta Jelena":"SH","Slovenija":"SI","Svalbard i Janmajen Ostrva":"SJ","SlovaÄka":"SK","Sijera Leone":"SL","San Marino":"SM","Senegal":"SN","Somalija":"SO","Surinam":"SR","Sao Tome i Principe":"ST","Salvador":"SV","Sirija":"SY","Svazilend":"SZ","Turks i Kajkos Ostrva":"TC","Äad":"TD","Francuske JuÅ¾ne Teritorije":"TF","Togo":"TG","Tajland":"TH","TadÅ¾ikistan":"TJ","Tokelau":"TK","IstoÄni Timor":"TL","Turkmenistan":"TM","Tunis":"TN","Tonga":"TO","Turska":"TR","Trinidad i Tobago":"TT","Tuvalu":"TV","Tajvan":"TW","Tanzanija":"TZ","Ukrajina":"UA","Uganda":"UG","Manja Udaljena Ostrva SAD":"UM","Sjedinjene AmeriÄke DrÅ¾ave":"US","Urugvaj":"UY","Uzbekistan":"UZ","Vatikan":"VA","Sent Vinsent i Grenadini":"VC","Venecuela":"VE","Britanska DeviÄanska Ostrva":"VG","S.A.D. DeviÄanska Ostrva":"VI","Vijetnam":"VN","Vanuatu":"VU","Valis i Futuna Ostrva":"WF","Samoa":"WS","Jemen":"YE","Majote":"YT","JuÅ¾noafriÄka Republika":"ZA","Zambija":"ZM","Zimbabve":"ZW","Nepoznat ili nevaÅ¾eÄi region":"ZZ"};
ilib.data.ctrynames_sr_Latn_ME = {"Azija":"142","Centralna Azija":"143","Zapadna Azija":"145","Evropa":"150","IstoÄna Evropa":"151","Severna Evropa":"154","Zapadna Evropa":"155","Latinska Amerika":"419","Svet":"001","Afrika":"002","SevernoameriÄki kontinent":"003","JuÅ¾na Amerika":"005","Okeanija":"009","Zapadna Afrika":"011","Centralna Amerika":"013","IstoÄna Afrika":"014","Severna Afrika":"015","Centralna Afrika":"017","JuÅ¾na Afrika":"018","Amerike":"019","Severna Amerika":"021","Karibi":"029","IstoÄna Azija":"030","JuÅ¾na Azija":"034","JugoistoÄna Azija":"035","JuÅ¾na Evropa":"039","Australija i Novi Zeland":"053","Melanezija":"054","Micronezija":"057","Polinezija":"061","Andora":"AD","Ujedinjeni Arapski Emirati":"AE","Avganistan":"AF","Antigva i Barbuda":"AG","Angvila":"AI","Albanija":"AL","Armenija":"AM","Holandski Antili":"AN","Angola":"AO","Antarktika":"AQ","Argentina":"AR","AmeriÄka Samoa":"AS","Austrija":"AT","Australija":"AU","Aruba":"AW","Alandska ostrva":"AX","AzerbejdÅ¾an":"AZ","Bosna i Hercegovina":"BA","Barbados":"BB","BangladeÅ¡":"BD","Belgija":"BE","Burkina Faso":"BF","Bugarska":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","Sv. Bartolomej":"BL","Bermuda":"BM","Brunej":"BN","Bolivija":"BO","Brazil":"BR","Bahami":"BS","Butan":"BT","Buve Ostrva":"BV","Bocvana":"BW","Belorusija":"BY","Belise":"BZ","Kanada":"CA","Kokos (Keling) Ostrva":"CC","Demokratska Republika Kongo":"CD","Centralno AfriÄka Republika":"CF","Kongo":"CG","Å vajcarska":"CH","Obala SlonovaÄe":"CI","Kukova Ostrva":"CK","Äile":"CL","Kamerun":"CM","Kina":"CN","Kolumbija":"CO","Kostarika":"CR","Kuba":"CU","Kape Verde":"CV","BoÅ¾iÄna Ostrva":"CX","Kipar":"CY","ÄeÅ¡ka":"CZ","NemaÄka":"DE","DÅ¾ibuti":"DJ","Danska":"DK","Dominika":"DM","Dominikanska Republika":"DO","AlÅ¾ir":"DZ","Ekvador":"EC","Estonija":"EE","Egipat":"EG","Zapadna Sahara":"EH","Eritreja":"ER","Å panija":"ES","Etiopija":"ET","Evropska unija":"EU","Finska":"FI","FidÅ¾i":"FJ","Folklandska Ostrva":"FK","Mikronezija":"FM","Farska Ostrva":"FO","Francuska":"FR","Gabon":"GA","Velika Britanija":"GB","Grenada":"GD","Gruzija":"GE","Francuska Gvajana":"GF","Gurnsi":"GG","Gana":"GH","Gibraltar":"GI","Grenland":"GL","Gambija":"GM","Gvineja":"GN","Gvadelupe":"GP","Ekvatorijalna Gvineja":"GQ","GrÄka":"GR","JuÅ¾na DÅ¾ordÅ¾ija i JuÅ¾na SendviÄ Ostrva":"GS","Gvatemala":"GT","Guam":"GU","Gvineja-Bisao":"GW","Gvajana":"GY","Hong Kong (S. A. R. Kina)":"HK","Herd i Mekdonald Ostrva":"HM","Honduras":"HN","Hrvatska":"HR","Haiti":"HT","MaÄarska":"HU","Indonezija":"ID","Irska":"IE","Izrael":"IL","Ostrvo Man":"IM","Indija":"IN","Britansko Indijska Okeanska Teritorija":"IO","Irak":"IQ","Iran":"IR","Island":"IS","Italija":"IT","DÅ¾ersi":"JE","Jamajka":"JM","Jordan":"JO","Japan":"JP","Kenija":"KE","Kirgizstan":"KG","KambodÅ¾a":"KH","Kiribati":"KI","Komorska Ostrva":"KM","Sent Kits i Nevis":"KN","Severna Koreja":"KP","JuÅ¾na Koreja":"KR","Kuvajt":"KW","Kajmanska Ostrva":"KY","Kazahstan":"KZ","Laos":"LA","Liban":"LB","Sent Lucija":"LC","LihtenÅ¡tajn":"LI","Å ri Lanka":"LK","Liberija":"LR","Lesoto":"LS","Litvanija":"LT","Luksemburg":"LU","Letonija":"LV","Libija":"LY","Maroko":"MA","Monako":"MC","Moldavija":"MD","Crna Gora":"ME","Sv. Martin":"MF","Madagaskar":"MG","MarÅ¡alska Ostrva":"MH","Makedonija":"MK","Mali":"ML","Mijanmar":"MM","Mongolija":"MN","Makao (S. A. R. Kina)":"MO","Severna Marijanska Ostrva":"MP","Martinik":"MQ","Mauritanija":"MR","Monserat":"MS","Malta":"MT","Mauricius":"MU","Maldivi":"MV","Malavi":"MW","Meksiko":"MX","Malezija":"MY","Mozambik":"MZ","Namibija":"NA","Nova Kaledonija":"NC","Niger":"NE","Norfolk Ostrvo":"NF","Nigerija":"NG","Nikaragva":"NI","Holandija":"NL","NorveÅ¡ka":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Novi Zeland":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Francuska Polinezija":"PF","Papua Nova Gvineja":"PG","Filipini":"PH","Pakistan":"PK","Poljska":"PL","Sen Pjer i Mikelon":"PM","Pitcairn":"PN","Porto Riko":"PR","Palestinska Teritorija":"PS","Portugal":"PT","Palau":"PW","Paragvaj":"PY","Katar":"QA","Ostala okeanija":"QO","Rejunion":"RE","Rumunija":"RO","Srbija":"RS","Rusija":"RU","Ruanda":"RW","Saudijska Arabija":"SA","Solomonska Ostrva":"SB","SejÅ¡eli":"SC","Sudan":"SD","Å vedska":"SE","Singapur":"SG","Sveta Jelena":"SH","Slovenija":"SI","Svalbard i Janmajen Ostrva":"SJ","SlovaÄka":"SK","Sijera Leone":"SL","San Marino":"SM","Senegal":"SN","Somalija":"SO","Surinam":"SR","Sao Tome i Principe":"ST","Salvador":"SV","Sirija":"SY","Svazilend":"SZ","Turks i Kajkos Ostrva":"TC","Äad":"TD","Francuske JuÅ¾ne Teritorije":"TF","Togo":"TG","Tajland":"TH","TadÅ¾ikistan":"TJ","Tokelau":"TK","IstoÄni Timor":"TL","Turkmenistan":"TM","Tunis":"TN","Tonga":"TO","Turska":"TR","Trinidad i Tobago":"TT","Tuvalu":"TV","Tajvan":"TW","Tanzanija":"TZ","Ukrajina":"UA","Uganda":"UG","Manja Udaljena Ostrva SAD":"UM","Sjedinjene AmeriÄke DrÅ¾ave":"US","Urugvaj":"UY","Uzbekistan":"UZ","Vatikan":"VA","Sent Vinsent i Grenadini":"VC","Venecuela":"VE","Britanska DeviÄanska Ostrva":"VG","S.A.D. DeviÄanska Ostrva":"VI","Vijetnam":"VN","Vanuatu":"VU","Valis i Futuna Ostrva":"WF","Samoa":"WS","Jemen":"YE","Majote":"YT","JuÅ¾noafriÄka Republika":"ZA","Zambija":"ZM","Zimbabve":"ZW","Nepoznat ili nevaÅ¾eÄi region":"ZZ"};
ilib.data.ctrynames_sr_Latn_RS = {"Azija":"142","Centralna Azija":"143","Zapadna Azija":"145","Evropa":"150","IstoÄna Evropa":"151","Severna Evropa":"154","Zapadna Evropa":"155","Latinska Amerika":"419","Svet":"001","Afrika":"002","SevernoameriÄki kontinent":"003","JuÅ¾na Amerika":"005","Okeanija":"009","Zapadna Afrika":"011","Centralna Amerika":"013","IstoÄna Afrika":"014","Severna Afrika":"015","Centralna Afrika":"017","JuÅ¾na Afrika":"018","Amerike":"019","Severna Amerika":"021","Karibi":"029","IstoÄna Azija":"030","JuÅ¾na Azija":"034","JugoistoÄna Azija":"035","JuÅ¾na Evropa":"039","Australija i Novi Zeland":"053","Melanezija":"054","Micronezija":"057","Polinezija":"061","Andora":"AD","Ujedinjeni Arapski Emirati":"AE","Avganistan":"AF","Antigva i Barbuda":"AG","Angvila":"AI","Albanija":"AL","Armenija":"AM","Holandski Antili":"AN","Angola":"AO","Antarktika":"AQ","Argentina":"AR","AmeriÄka Samoa":"AS","Austrija":"AT","Australija":"AU","Aruba":"AW","Alandska ostrva":"AX","AzerbejdÅ¾an":"AZ","Bosna i Hercegovina":"BA","Barbados":"BB","BangladeÅ¡":"BD","Belgija":"BE","Burkina Faso":"BF","Bugarska":"BG","Bahrein":"BH","Burundi":"BI","Benin":"BJ","Sv. Bartolomej":"BL","Bermuda":"BM","Brunej":"BN","Bolivija":"BO","Brazil":"BR","Bahami":"BS","Butan":"BT","Buve Ostrva":"BV","Bocvana":"BW","Belorusija":"BY","Belise":"BZ","Kanada":"CA","Kokos (Keling) Ostrva":"CC","Demokratska Republika Kongo":"CD","Centralno AfriÄka Republika":"CF","Kongo":"CG","Å vajcarska":"CH","Obala SlonovaÄe":"CI","Kukova Ostrva":"CK","Äile":"CL","Kamerun":"CM","Kina":"CN","Kolumbija":"CO","Kostarika":"CR","Kuba":"CU","Kape Verde":"CV","BoÅ¾iÄna Ostrva":"CX","Kipar":"CY","ÄeÅ¡ka":"CZ","NemaÄka":"DE","DÅ¾ibuti":"DJ","Danska":"DK","Dominika":"DM","Dominikanska Republika":"DO","AlÅ¾ir":"DZ","Ekvador":"EC","Estonija":"EE","Egipat":"EG","Zapadna Sahara":"EH","Eritreja":"ER","Å panija":"ES","Etiopija":"ET","Evropska unija":"EU","Finska":"FI","FidÅ¾i":"FJ","Folklandska Ostrva":"FK","Mikronezija":"FM","Farska Ostrva":"FO","Francuska":"FR","Gabon":"GA","Velika Britanija":"GB","Grenada":"GD","Gruzija":"GE","Francuska Gvajana":"GF","Gurnsi":"GG","Gana":"GH","Gibraltar":"GI","Grenland":"GL","Gambija":"GM","Gvineja":"GN","Gvadelupe":"GP","Ekvatorijalna Gvineja":"GQ","GrÄka":"GR","JuÅ¾na DÅ¾ordÅ¾ija i JuÅ¾na SendviÄ Ostrva":"GS","Gvatemala":"GT","Guam":"GU","Gvineja-Bisao":"GW","Gvajana":"GY","Hong Kong (S. A. R. Kina)":"HK","Herd i Mekdonald Ostrva":"HM","Honduras":"HN","Hrvatska":"HR","Haiti":"HT","MaÄarska":"HU","Indonezija":"ID","Irska":"IE","Izrael":"IL","Ostrvo Man":"IM","Indija":"IN","Britansko Indijska Okeanska Teritorija":"IO","Irak":"IQ","Iran":"IR","Island":"IS","Italija":"IT","DÅ¾ersi":"JE","Jamajka":"JM","Jordan":"JO","Japan":"JP","Kenija":"KE","Kirgizstan":"KG","KambodÅ¾a":"KH","Kiribati":"KI","Komorska Ostrva":"KM","Sent Kits i Nevis":"KN","Severna Koreja":"KP","JuÅ¾na Koreja":"KR","Kuvajt":"KW","Kajmanska Ostrva":"KY","Kazahstan":"KZ","Laos":"LA","Liban":"LB","Sent Lucija":"LC","LihtenÅ¡tajn":"LI","Å ri Lanka":"LK","Liberija":"LR","Lesoto":"LS","Litvanija":"LT","Luksemburg":"LU","Letonija":"LV","Libija":"LY","Maroko":"MA","Monako":"MC","Moldavija":"MD","Crna Gora":"ME","Sv. Martin":"MF","Madagaskar":"MG","MarÅ¡alska Ostrva":"MH","Makedonija":"MK","Mali":"ML","Mijanmar":"MM","Mongolija":"MN","Makao (S. A. R. Kina)":"MO","Severna Marijanska Ostrva":"MP","Martinik":"MQ","Mauritanija":"MR","Monserat":"MS","Malta":"MT","Mauricius":"MU","Maldivi":"MV","Malavi":"MW","Meksiko":"MX","Malezija":"MY","Mozambik":"MZ","Namibija":"NA","Nova Kaledonija":"NC","Niger":"NE","Norfolk Ostrvo":"NF","Nigerija":"NG","Nikaragva":"NI","Holandija":"NL","NorveÅ¡ka":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Novi Zeland":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Francuska Polinezija":"PF","Papua Nova Gvineja":"PG","Filipini":"PH","Pakistan":"PK","Poljska":"PL","Sen Pjer i Mikelon":"PM","Pitcairn":"PN","Porto Riko":"PR","Palestinska Teritorija":"PS","Portugal":"PT","Palau":"PW","Paragvaj":"PY","Katar":"QA","Ostala okeanija":"QO","Rejunion":"RE","Rumunija":"RO","Srbija":"RS","Rusija":"RU","Ruanda":"RW","Saudijska Arabija":"SA","Solomonska Ostrva":"SB","SejÅ¡eli":"SC","Sudan":"SD","Å vedska":"SE","Singapur":"SG","Sveta Jelena":"SH","Slovenija":"SI","Svalbard i Janmajen Ostrva":"SJ","SlovaÄka":"SK","Sijera Leone":"SL","San Marino":"SM","Senegal":"SN","Somalija":"SO","Surinam":"SR","Sao Tome i Principe":"ST","Salvador":"SV","Sirija":"SY","Svazilend":"SZ","Turks i Kajkos Ostrva":"TC","Äad":"TD","Francuske JuÅ¾ne Teritorije":"TF","Togo":"TG","Tajland":"TH","TadÅ¾ikistan":"TJ","Tokelau":"TK","IstoÄni Timor":"TL","Turkmenistan":"TM","Tunis":"TN","Tonga":"TO","Turska":"TR","Trinidad i Tobago":"TT","Tuvalu":"TV","Tajvan":"TW","Tanzanija":"TZ","Ukrajina":"UA","Uganda":"UG","Manja Udaljena Ostrva SAD":"UM","Sjedinjene AmeriÄke DrÅ¾ave":"US","Urugvaj":"UY","Uzbekistan":"UZ","Vatikan":"VA","Sent Vinsent i Grenadini":"VC","Venecuela":"VE","Britanska DeviÄanska Ostrva":"VG","S.A.D. DeviÄanska Ostrva":"VI","Vijetnam":"VN","Vanuatu":"VU","Valis i Futuna Ostrva":"WF","Samoa":"WS","Jemen":"YE","Majote":"YT","JuÅ¾noafriÄka Republika":"ZA","Zambija":"ZM","Zimbabve":"ZW","Nepoznat ili nevaÅ¾eÄi region":"ZZ"};
ilib.data.ctrynames_sv = {"Asien":"142","Centralasien":"143","VÃ¤stasien":"145","Europa":"150","Ãsteuropa":"151","Nordeuropa":"154","VÃ¤steuropa":"155","Latinamerika":"419","vÃ¤rlden":"001","Afrika":"002","Nordamerika":"003","Sydamerika":"005","Oceanien":"009","VÃ¤stafrika":"011","Centralamerika":"013","Ãstafrika":"014","Nordafrika":"015","Centralafrika":"017","sÃ¶dra Afrika":"018","Nord- och Sydamerika":"019","norra Amerika":"021","Karibien":"029","Ãstasien":"030","Sydasien":"034","Sydostasien":"035","Sydeuropa":"039","Australasien":"053","Melanesien":"054","Mikronesiska Ã¶arna":"057","Polynesien":"061","Ascension":"AC","Andorra":"AD","FÃ¶renade Arabemiraten":"AE","Afghanistan":"AF","Antigua och Barbuda":"AG","Anguilla":"AI","Albanien":"AL","Armenien":"AM","NederlÃ¤ndska Antillerna":"AN","Angola":"AO","Antarktis":"AQ","Argentina":"AR","Amerikanska Samoa":"AS","Ãsterrike":"AT","Australien":"AU","Aruba":"AW","Ãland":"AX","Azerbajdzjan":"AZ","Bosnien och Hercegovina":"BA","Barbados":"BB","Bangladesh":"BD","Belgien":"BE","Burkina Faso":"BF","Bulgarien":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","S:t BarthÃ©lemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Karibiska NederlÃ¤nderna":"BQ","Brasilien":"BR","Bahamas":"BS","Bhutan":"BT","BouvetÃ¶n":"BV","Botswana":"BW","Vitryssland":"BY","Belize":"BZ","Kanada":"CA","KokosÃ¶arna":"CC","Kongo-Kinshasa":"CD","Centralafrikanska republiken":"CF","Kongo-Brazzaville":"CG","Schweiz":"CH","Elfenbenskusten":"CI","CookÃ¶arna":"CK","Chile":"CL","Kamerun":"CM","Kina":"CN","Colombia":"CO","ClippertonÃ¶n":"CP","Costa Rica":"CR","Kuba":"CU","Kap Verde":"CV","CuraÃ§ao":"CW","JulÃ¶n":"CX","Cypern":"CY","Tjeckien":"CZ","Tyskland":"DE","Diego Garcia":"DG","Djibouti":"DJ","Danmark":"DK","Dominica":"DM","Dominikanska republiken":"DO","Algeriet":"DZ","Ceuta och Melilla":"EA","Ecuador":"EC","Estland":"EE","Egypten":"EG","VÃ¤stsahara":"EH","Eritrea":"ER","Spanien":"ES","Etiopien":"ET","Europeiska unionen":"EU","Finland":"FI","Fiji":"FJ","FalklandsÃ¶arna":"FK","Mikronesien":"FM","FÃ¤rÃ¶arna":"FO","Frankrike":"FR","Gabon":"GA","Storbritannien":"GB","Grenada":"GD","Georgien":"GE","Franska Guyana":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","GrÃ¶nland":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Ekvatorialguinea":"GQ","Grekland":"GR","Sydgeorgien och SydsandwichÃ¶arna":"GS","Guatemala":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Hongkong (S.A.R. Kina)":"HK","Heard- och McDonaldÃ¶arna":"HM","Honduras":"HN","Kroatien":"HR","Haiti":"HT","Ungern":"HU","KanarieÃ¶arna":"IC","Indonesien":"ID","Irland":"IE","Israel":"IL","Isle of Man":"IM","Indien":"IN","Brittiska Indiska oceanÃ¶arna":"IO","Irak":"IQ","Iran":"IR","Island":"IS","Italien":"IT","Jersey":"JE","Jamaica":"JM","Jordanien":"JO","Japan":"JP","Kenya":"KE","Kirgizistan":"KG","Kambodja":"KH","Kiribati":"KI","Komorerna":"KM","S:t Kitts och Nevis":"KN","Nordkorea":"KP","Sydkorea":"KR","Kuwait":"KW","CaymanÃ¶arna":"KY","Kazakstan":"KZ","Laos":"LA","Libanon":"LB","S:t Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberia":"LR","Lesotho":"LS","Litauen":"LT","Luxemburg":"LU","Lettland":"LV","Libyen":"LY","Marocko":"MA","Monaco":"MC","Moldavien":"MD","Montenegro":"ME","S:t Martin":"MF","Madagaskar":"MG","MarshallÃ¶arna":"MH","Makedonien":"MK","Mali":"ML","Myanmar":"MM","Mongoliet":"MN","Macao (S.A.R. Kina)":"MO","Nordmarianerna":"MP","Martinique":"MQ","Mauretanien":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldiverna":"MV","Malawi":"MW","Mexiko":"MX","Malaysia":"MY","MoÃ§ambique":"MZ","Namibia":"NA","Nya Kaledonien":"NC","Niger":"NE","NorfolkÃ¶n":"NF","Nigeria":"NG","Nicaragua":"NI","NederlÃ¤nderna":"NL","Norge":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Nya Zeeland":"NZ","Oman":"OM","Panama":"PA","Peru":"PE","Franska Polynesien":"PF","Papua Nya Guinea":"PG","Filippinerna":"PH","Pakistan":"PK","Polen":"PL","S:t Pierre och Miquelon":"PM","PitcairnÃ¶arna":"PN","Puerto Rico":"PR","Palestinska territoriet":"PS","Portugal":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","Yttre Ã¶ar i Oceanien":"QO","RÃ©union":"RE","RumÃ¤nien":"RO","Serbien":"RS","Ryssland":"RU","Rwanda":"RW","Saudiarabien":"SA","SalomonÃ¶arna":"SB","Seychellerna":"SC","Sudan":"SD","Sverige":"SE","Singapore":"SG","S:t Helena":"SH","Slovenien":"SI","Svalbard och Jan Mayen":"SJ","Slovakien":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somalia":"SO","Surinam":"SR","Sydsudan":"SS","SÃ£o TomÃ© och PrÃ­ncipe":"ST","El Salvador":"SV","Syrien":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Turks- och CaicosÃ¶arna":"TC","Tchad":"TD","Franska Sydterritorierna":"TF","Togo":"TG","Thailand":"TH","Tadzjikistan":"TJ","Tokelau":"TK","Ãsttimor":"TL","Turkmenistan":"TM","Tunisien":"TN","Tonga":"TO","Turkiet":"TR","Trinidad och Tobago":"TT","Tuvalu":"TV","Taiwan":"TW","Tanzania":"TZ","Ukraina":"UA","Uganda":"UG","USA:s yttre Ã¶ar":"UM","USA":"US","Uruguay":"UY","Uzbekistan":"UZ","Vatikanstaten":"VA","S:t Vincent och Grenadinerna":"VC","Venezuela":"VE","Brittiska JungfruÃ¶arna":"VG","Amerikanska JungfruÃ¶arna":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis- och FutunaÃ¶arna":"WF","Samoa":"WS","Jemen":"YE","Mayotte":"YT","Sydafrika":"ZA","Zambia":"ZM","Zimbabwe":"ZW","okÃ¤nd region":"ZZ"};
ilib.data.ctrynames_sv_FI = {"Bonaire, S:t Eustatius och Saba":"BQ","S:t Martin (franska delen)":"MF","Nordsudan":"SD"};
ilib.data.ctrynames_sw = {"Asia":"142","Asia ya Kati":"143","Asia ya Magharibi":"145","Ulaya":"150","Ulaya ya Mashariki":"151","Ulaya ya Kaskazini":"154","Ulaya ya Magharibi":"155","Amerika ya Kilatini":"419","Dunia":"001","Afrika":"002","Amerika Kaskazini":"003","Amerika Kusini":"005","Oceania":"009","Afrika ya Magharibi":"011","Amerika ya Kati":"013","Afrika ya Mashariki":"014","Afrika ya Kaskazini":"015","Afrika ya Kati":"017","Afrika ya Kusini":"018","Amerika":"019","Amerika ya Kaskazini":"021","Karibi":"029","Asia Mashariki":"030","Asia ya Kusini":"034","Asia ya Kusini Mashariki":"035","Ulaya ya Kusini":"039","Australasia":"053","Melanesia":"054","Eneo la Mikronesia":"057","Polynesia":"061","Kisiwa cha Ascension":"AC","Andora":"AD","Falme za Kiarabu":"AE","Afuganistani":"AF","Antigua na Barbuda":"AG","Anguilla":"AI","Albania":"AL","Armenia":"AM","Antili za Uholanzi":"AN","Angola":"AO","Antaktika":"AQ","Ajentina":"AR","Samoa ya Marekani":"AS","Austria":"AT","Australia":"AU","Aruba":"AW","Visiwa vya Alandi":"AX","Azabajani":"AZ","Bosnia na Hezegovina":"BA","Babadosi":"BB","Bangladeshi":"BD","Ubelgiji":"BE","Bukinafaso":"BF","Bulgaria":"BG","Bahareni":"BH","Burundi":"BI","Benini":"BJ","Santabathelemi":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Uholanzi ya Karibiani":"BQ","Brazili":"BR","Bahama":"BS","Butani":"BT","Kisiwa cha Bouvet":"BV","Botswana":"BW","Belarusi":"BY","Belize":"BZ","Kanada":"CA","Visiwa vya Cocos [Keeling]":"CC","Jamhuri ya Kidemokrasia ya Kongo":"CD","Jamhuri ya Afrika ya Kati":"CF","Kongo":"CG","Uswisi":"CH","Kodivaa":"CI","Visiwa vya Cook":"CK","Chile":"CL","Kameruni":"CM","China":"CN","Kolombia":"CO","Kisiwa cha Clipperton":"CP","Kostarika":"CR","Kuba":"CU","Kepuvede":"CV","Kurakao":"CW","Kisiwa cha Krismasi":"CX","Kuprosi":"CY","Jamhuri ya Cheki":"CZ","Ujerumani":"DE","Diego Garcia":"DG","Jibuti":"DJ","Denmaki":"DK","Dominika":"DM","Jamhuri ya Dominika":"DO","Aljeria":"DZ","Ceuta na Melilla":"EA","Ekwado":"EC","Estonia":"EE","Misri":"EG","Sahara Magharibi":"EH","Eritrea":"ER","Hispania":"ES","Uhabeshi":"ET","Umoja wa Ulaya":"EU","Ufini":"FI","Fiji":"FJ","Visiwa vya Falkland":"FK","Mikronesia":"FM","Visiwa vya Faroe":"FO","Ufaransa":"FR","Gaboni":"GA","Uingereza":"GB","Grenada":"GD","Jojia":"GE","Gwiyana ya Ufaransa":"GF","Guernsey":"GG","Ghana":"GH","Jibralta":"GI","Grinlandi":"GL","Gambia":"GM","Gine":"GN","Gwadelupe":"GP","Ginekweta":"GQ","Ugiriki":"GR","Jojia Kusini na Visiwa vya Sandwich Kusini":"GS","Gwatemala":"GT","Gwam":"GU","Ginebisau":"GW","Guyana":"GY","Hong Kong SAR China":"HK","Kisiwa cha Heard na Visiwa vya McDonald":"HM","Hondurasi":"HN","Korasia":"HR","Haiti":"HT","Hungaria":"HU","Visiwa vya Kanari":"IC","Indonesia":"ID","Ayalandi":"IE","Israeli":"IL","Isle of Man":"IM","India":"IN","Eneo la Uingereza katika Bahari Hindi":"IO","Iraki":"IQ","Uajemi":"IR","Aislandi":"IS","Italia":"IT","Jersey":"JE","Jamaika":"JM","Yordani":"JO","Japani":"JP","Kenya":"KE","Kirigizistani":"KG","Kambodia":"KH","Kiribati":"KI","Komoro":"KM","Santakitzi na Nevis":"KN","Korea Kaskazini":"KP","Korea Kusini":"KR","Kuwaiti":"KW","Visiwa vya Kayman":"KY","Kazakistani":"KZ","Laosi":"LA","Lebanoni":"LB","Santalusia":"LC","Lishenteni":"LI","Sirilanka":"LK","Liberia":"LR","Lesoto":"LS","Litwania":"LT","Lasembagi":"LU","Lativia":"LV","Libya":"LY","Moroko":"MA","Monako":"MC","Moldova":"MD","Montenegro":"ME","Saint Martin":"MF","Bukini":"MG","Visiwa vya Marshal":"MH","Masedonia":"MK","Mali":"ML","Myama":"MM","Mongolia":"MN","Macau SAR China":"MO","Visiwa vya Mariana vya Kaskazini":"MP","Martiniki":"MQ","Moritania":"MR","Montserrati":"MS","Malta":"MT","Morisi":"MU","Modivu":"MV","Malawi":"MW","Meksiko":"MX","Malesia":"MY","Msumbiji":"MZ","Namibia":"NA","Nyukaledonia":"NC","Nijeri":"NE","Kisiwa cha Norfok":"NF","Nijeria":"NG","Nikaragwa":"NI","Uholanzi":"NL","Norwe":"NO","Nepali":"NP","Nauru":"NR","Niue":"NU","Nyuzilandi":"NZ","Omani":"OM","Panama":"PA","Peru":"PE","Polinesia ya Ufaransa":"PF","Papua":"PG","Filipino":"PH","Pakistani":"PK","Polandi":"PL","Santapieri na Mikeloni":"PM","Pitkairni":"PN","Pwetoriko":"PR","Ukingo wa Magharibi na Ukanda wa Gaza wa Palestina":"PS","Ureno":"PT","Palau":"PW","Paragwai":"PY","Katari":"QA","Oceania ya Nje":"QO","Riyunioni":"RE","Romania":"RO","Serbia":"RS","Urusi":"RU","Rwanda":"RW","Saudi":"SA","Visiwa vya Solomon":"SB","Shelisheli":"SC","Sudani":"SD","Uswidi":"SE","Singapoo":"SG","Santahelena":"SH","Slovenia":"SI","Svalbard na Jan Mayen":"SJ","Slovakia":"SK","Siera Leoni":"SL","Samarino":"SM","Senegali":"SN","Somalia":"SO","Surinamu":"SR","Sudani Kusini":"SS","Sao Tome na Principe":"ST","Elsavado":"SV","Santamatini":"SX","Siria":"SY","Uswazi":"SZ","Tristan da Cunha":"TA","Visiwa vya Turki na Kaiko":"TC","Chadi":"TD","Maeneo ya Kusini ya Ufaransa":"TF","Togo":"TG","Tailandi":"TH","Tajikistani":"TJ","Tokelau":"TK","Timori ya Mashariki":"TL","Turukimenistani":"TM","Tunisia":"TN","Tonga":"TO","Uturuki":"TR","Trinidad na Tobago":"TT","Tuvalu":"TV","Taiwani":"TW","Tanzania":"TZ","Ukraini":"UA","Uganda":"UG","Visiwa Vidogo vya Nje vya Marekani":"UM","Marekani":"US","Urugwai":"UY","Uzibekistani":"UZ","Vatikani":"VA","Santavisenti na Grenadini":"VC","Venezuela":"VE","Visiwa vya Virgin vya Uingereza":"VG","Visiwa vya Virgin vya Marekani":"VI","Vietinamu":"VN","Vanuatu":"VU","Walis na Futuna":"WF","Samoa":"WS","Yemeni":"YE","Mayotte":"YT","Afrika Kusini":"ZA","Zambia":"ZM","Zimbabwe":"ZW","Eneo lisilojulikana":"ZZ"};
ilib.data.ctrynames_ta = {"à®à®à®¿à®¯à®¾":"142","à®®à®¤à¯à®¤à®¿à®¯ à®à®à®¿à®¯à®¾":"143","à®®à¯à®±à¯à®à¯ à®à®à®¿à®¯à®¾":"145","à®à®°à¯à®ªà¯":"150","à®à®¿à®´à®à¯à®à¯ à®à®°à¯à®ªà¯à®ªà®¾":"151","à®µà®à®à¯à®à¯ à®à®°à¯à®ªà¯à®ªà®¾":"154","à®®à¯à®±à¯à®à¯ à®à®°à¯à®ªà¯à®ªà®¾":"155","à®²à®¤à¯à®¤à¯à®©à¯ à®à®®à¯à®°à®¿à®à¯à®à®¾":"419","à®à®²à®à®®à¯":"001","à®à®ªà¯à®°à®¿à®à¯à®à®¾":"002","à®µà®à®à¯à®à¯ à®à®®à¯à®°à®¿à®à¯à®à®¾ à®à®£à¯à®à®®à¯":"003","à®¤à¯à®±à¯à®à¯ à®à®®à¯à®°à®¿à®à¯à®à®¾":"005","à®à®·à¯à®©à®¿à®¯à®¾":"009","à®®à¯à®±à¯à®à¯ à®à®ªà¯à®°à®¿à®à¯à®à®¾":"011","à®®à®¤à¯à®¤à®¿à®¯ à®à®®à¯à®°à®¿à®à¯à®à®¾":"013","à®à®¿à®´à®à¯à®à¯ à®à®ªà¯à®°à®¿à®à¯à®à®¾":"014","à®µà®à®à¯à®à¯ à®à®ªà¯à®°à®¿à®à¯à®à®¾":"015","à®®à®¤à¯à®¤à®¿à®¯ à®à®ªà¯à®°à®¿à®à¯à®à®¾":"017","à®¤à¯à®©à¯à®©à®¾à®ªà¯à®°à®¿à®à¯à®à®¾":"018","à®à®®à¯à®°à¯à®à¯à®à®¾à®¸à¯":"019","à®µà®à®à¯à®à¯ à®à®®à¯à®°à®¿à®à¯à®à®¾":"021","à®à®°à¯à®ªà®¿à®¯à®©à¯":"029","à®à®¿à®´à®à¯à®à¯ à®à®à®¿à®¯à®¾":"030","à®¤à¯à®±à¯à®à¯ à®à®à®¿à®¯à®¾":"034","à®¤à¯à®©à¯-à®à®¿à®´à®à¯à®à¯ à®à®à®¿à®¯à®¾":"035","à®¤à¯à®±à¯à®à¯ à®à®°à¯à®ªà¯à®ªà®¾":"039","à®à®¸à¯à®¤à®¿à®°à¯à®²à®¿à®¯à®¾ à®®à®±à¯à®±à¯à®®à¯ à®¨à®¿à®¯à¯à®à®¿à®²à®¾à®¨à¯à®¤à¯":"053","à®®à¯à®²à®©à¯à®·à®¿à®¯à®¾":"054","à®®à¯à®à¯à®°à¯ à®¨à¯à®·à®¿à®¯à®¾ à®ªà®¿à®°à®¤à¯à®à®®à¯":"057","à®ªà®¾à®²à®¿à®©à¯à®·à®¿à®¯à®¾":"061","à®à®·à®©à¯à®·à®¿à®¯à®©à¯ à®¤à¯à®µà¯":"AC","à®à®©à¯à®à¯à®°à®¾":"AD","à®à®à¯à®à®¿à®¯ à®à®°à®ªà¯ à®à¯à®à¯à®à®¾à®à¯à®à®¿":"AE","à®à®ªà¯à®à®¾à®©à®¿à®¸à¯à®¤à®¾à®©à¯":"AF","à®à®£à¯à®à®¿à®à¯à®µà®¾ à®®à®±à¯à®±à¯à®®à¯ à®ªà®¾à®°à¯à®ªà¯à®à®¾":"AG","à®à®à¯à®à¯à®¯à¯à®²à®¾":"AI","à®à®²à¯à®ªà¯à®©à®¿à®¯à®¾":"AL","à®à®°à¯à®®à¯à®©à®¿à®¯à®¾":"AM","à®¨à¯à®¤à®°à¯à®²à®¾à®¨à¯à®¤à¯ à®à®£à¯à®à®¿à®²à¯à®²à¯à®¸à¯":"AN","à®à®à¯à®à¯à®²à®¾":"AO","à®à®£à¯à®à®¾à®°à¯à®à®¿à®à®¾":"AQ","à®à®°à¯à®à¯à®©à¯à®à®¿à®©à®¾":"AR","à®à®®à¯à®°à®¿à®à¯à® à®à®®à¯à®µà®¾":"AS","à®à®¸à¯à®¤à®¿à®°à®¿à®¯à®¾":"AT","à®à®¸à¯à®¤à®¿à®°à¯à®²à®¿à®¯à®¾":"AU","à®à®°à¯à®ªà®¾":"AW","à®à®²à®¨à¯à®¤à¯ à®¤à¯à®µà¯à®à®³à¯":"AX","à®à®à®°à¯à®ªà¯à®à®¾à®©à¯":"AZ","à®ªà¯à®¸à¯à®©à®¿à®¯à®¾ à®®à®±à¯à®±à¯à®®à¯ à®¹à¯à®°à¯à®¸à®¿à®à¯à®µà®¿à®©à®¾":"BA","à®ªà®¾à®°à¯à®ªà®à¯à®¸à¯":"BB","à®ªà®à¯à®à®³à®¾à®¤à¯à®·à¯":"BD","à®ªà¯à®²à¯à®à®¿à®¯à®®à¯":"BE","à®ªà¯à®°à¯à®à®¿à®©à®¾ à®à®ªà®¾à®¸à¯":"BF","à®ªà®²à¯à®à¯à®°à®¿à®¯à®¾":"BG","à®ªà®¹à¯à®°à¯à®©à¯":"BH","à®ªà¯à®°à¯à®£à¯à®à®¿":"BI","à®ªà¯à®©à®¿à®©à¯":"BJ","à®à¯à®¯à®¿à®©à¯à®à¯ à®ªà®¾à®°à¯à®¤à¯à®²à¯à®®à®¿":"BL","à®ªà¯à®°à¯à®®à¯à®à®¾":"BM","à®ªà¯à®°à¯à®©à¯à®¯à¯":"BN","à®ªà¯à®²à®¿à®µà®¿à®¯à®¾":"BO","à®à®°à¯à®ªà®¿à®¯à®©à¯ à®¨à¯à®¤à®°à¯à®²à®¾à®¨à¯à®¤à¯":"BQ","à®ªà®¿à®°à¯à®¸à®¿à®²à¯":"BR","à®ªà®¹à®¾à®®à®¾à®¸à¯":"BS","à®ªà¯à®à®¾à®©à¯":"BT","à®ªà¯à®µà¯à®à¯ à®¤à¯à®µà¯à®à®³à¯":"BV","à®ªà¯à®à¯à®¸à¯à®µà®¾à®©à®¾":"BW","à®ªà¯à®²à®¾à®°à¯à®¸à¯":"BY","à®ªà¯à®²à®¿à®¸à¯":"BZ","à®à®©à®à®¾":"CA","à®à®¾à®à¯à®¸à¯ à®¤à¯à®µà¯à®à®³à¯":"CC","à®à®¾à®à¯à®à¯ - à®à®¿à®©à¯à®·à®¾à®à®¾":"CD","à®®à®¤à¯à®¤à®¿à®¯ à®à®ªà¯à®°à®¿à®à¯à®à®à¯ à®à¯à®à®¿à®¯à®°à®à¯":"CF","à®à®¾à®à¯à®à¯ - à®ªà¯à®°à®¾à®¸à®¾à®µà®¿à®²à¯à®²à¯":"CG","à®¸à¯à®µà®¿à®à¯à®à®°à¯à®²à®¾à®¨à¯à®¤à¯":"CH","à®à®µà®°à®¿ à®à¯à®¸à¯à®à¯":"CI","à®à¯à®à¯ à®¤à¯à®µà¯à®à®³à¯":"CK","à®à®¿à®²à®¿":"CL","à®à¯à®®à®°à¯à®©à¯":"CM","à®à¯à®©à®¾":"CN","à®à¯à®²à®®à¯à®ªà®¿à®¯à®¾":"CO","à®à®¿à®²à®¿à®ªà¯à®ªà®°à¯à®à®©à¯ à®¤à¯à®µà¯":"CP","à®à¯à®¸à¯à®à®¾à®°à®¿à®à®¾":"CR","à®à®¿à®¯à¯à®ªà®¾":"CU","à®à¯à®ªà¯ à®µà¯à®°à¯à®à¯":"CV","à®à¯à®°à®¾à®à®µà¯":"CW","à®à®¿à®±à®¿à®¸à¯à®¤à¯à®®à®¸à¯ à®¤à¯à®µà¯":"CX","à®à¯à®ªà¯à®°à®¸à¯":"CY","à®à¯à®à¯ à®à¯à®à®¿à®¯à®°à®à¯":"CZ","à®à¯à®°à¯à®®à®©à¯":"DE","à®à®¿à®¯à®à¯ à®à®¾à®°à¯à®·à®¿à®¯à®¾":"DG","à®à®¿à®ªà¯à®à¯à®à®¿":"DJ","à®à¯à®©à¯à®®à®¾à®°à¯à®à¯":"DK","à®à¯à®®à®¿à®©à®¿à®à®¾":"DM","à®à¯à®®à®¿à®©à®¿à®à®©à¯ à®à¯à®à®¿à®¯à®°à®à¯":"DO","à®à®²à¯à®à¯à®°à®¿à®¯à®¾":"DZ","à®à®¿à®¯à¯à®à®¾ à®®à®±à¯à®±à¯à®®à¯ à®®à¯à®²à®¿à®²à¯à®²à®¾":"EA","à®à®à¯à®µà®à®¾à®°à¯":"EC","à®à®¸à¯à®à¯à®©à®¿à®¯à®¾":"EE","à®à®à®¿à®ªà¯à®¤à¯":"EG","à®®à¯à®±à¯à®à¯ à®à®¹à®¾à®°à®¾":"EH","à®à®°à®¿à®à¯à®°à®¿à®¯à®¾":"ER","à®¸à¯à®ªà¯à®¯à®¿à®©à¯":"ES","à®à®¤à®¿à®¯à¯à®ªà¯à®ªà®¿à®¯à®¾":"ET","à®à®°à¯à®ªà¯à®ªà®¿à®¯à®©à¯ à®¯à¯à®©à®¿à®¯à®©à¯":"EU","à®ªà®¿à®©à¯à®²à®¾à®¨à¯à®¤à¯":"FI","à®à®ªà®¿à®à®¿":"FJ","à®à®ªà®¾à®à¯à®²à®¾à®¨à¯à®¤à¯ à®¤à¯à®µà¯à®à®³à¯":"FK","à®®à¯à®à¯à®°à¯à®©à¯à®·à®¿à®¯à®¾":"FM","à®à®ªà¯à®°à¯ à®¤à¯à®µà¯à®à®³à¯":"FO","à®ªà®¿à®°à®¾à®©à¯à®¸à¯":"FR","à®à¯à®ªà®¾à®©à¯":"GA","à®ªà®¿à®°à®¿à®à®¿à®·à¯ à®à¯à®à¯à®à®°à®à¯":"GB","à®à®¿à®°à®©à¯à®à®¾":"GD","à®à®¾à®°à¯à®à®¿à®¯à®¾":"GE","à®à®ªà¯à®°à¯à®©à¯à®à¯ à®à®¯à®¾à®©à®¾":"GF","à®à¯à®°à¯à®©à¯à®à®¿":"GG","à®à®¾à®©à®¾":"GH","à®à®¿à®ªà¯à®°à®¾à®²à¯à®à®°à¯":"GI","à®à®¿à®°à¯à®©à¯à®²à®¾à®¨à¯à®¤à¯":"GL","à®à®¾à®®à¯à®ªà®¿à®¯à®¾":"GM","à®à®¿à®©à®¿à®¯à®¾":"GN","à®à¯à®µà®¾à®¤à¯à®²à¯à®ªà¯":"GP","à®à®à¯à®à¯à®µà®¾à®à¯à®°à®¿à®¯à®²à¯ à®à®¿à®©à®¿":"GQ","à®à®¿à®°à¯à®¸à¯":"GR","à®¤à¯à®©à¯ à®à®¿à®¯à®¾à®°à¯à®à®¿à®¯à®¾ à®®à®±à¯à®±à¯à®®à¯ à®¤à¯à®©à¯ à®à®¾à®©à¯à®à¯à®µà®¿à®à¯ à®¤à¯à®µà¯à®à®³à¯":"GS","à®à¯à®µà®¾à®¤à¯à®¤à®¾à®®à®¾à®²à®¾":"GT","à®à¯à®µà®¾à®®à¯":"GU","à®à®¿à®©à®¿-à®ªà®¿à®¸à¯à®¸à®¾à®µà¯":"GW","à®à®¯à®¾à®©à®¾":"GY","à®¹à®¾à®à¯à®à®¾à®à¯ à®à®¾à®°à¯ à®à¯à®©à®¾":"HK","à®¹à¯à®°à¯à®à¯ à®®à®±à¯à®±à¯à®®à¯ à®®à¯à®à¯à®à¯à®©à®¾à®²à¯à®à¯":"HM","à®¹à®¾à®£à¯à®à¯à®°à®¾à®¸à¯":"HN","à®à¯à®°à¯à®à®¿à®¯à®¾":"HR","à®¹à¯à®¯à¯à®¤à®¿":"HT","à®¹à®à¯à®à¯à®°à®¿":"HU","à®à¯à®©à®°à®¿ à®¤à¯à®µà¯à®à®³à¯":"IC","à®à®¨à¯à®¤à¯à®©à¯à®·à®¿à®¯à®¾":"ID","à®à®¯à®°à¯à®²à®¾à®¨à¯à®¤à¯":"IE","à®à®¸à¯à®°à¯à®²à¯":"IL","à®à®²à¯ à®à®à®ªà¯ à®®à¯à®©à¯":"IM","à®à®¨à¯à®¤à®¿à®¯à®¾":"IN","à®ªà®¿à®°à®¿à®à¯à®à®¿à®·à¯ à®à®¨à¯à®¤à®¿à®¯à®ªà¯ à®ªà¯à®°à¯à®à¯à®à®à®²à¯ à®ªà®à¯à®¤à®¿":"IO","à®à®°à®¾à®à¯":"IQ","à®à®°à®¾à®©à¯":"IR","à®à®¸à¯à®²à®¾à®¨à¯à®¤à¯":"IS","à®à®¤à¯à®¤à®¾à®²à®¿":"IT","à®à¯à®°à¯à®à®¿":"JE","à®à®®à¯à®à®¾":"JM","à®à¯à®°à¯à®à®¾à®©à¯":"JO","à®à®ªà¯à®ªà®¾à®©à¯":"JP","à®à¯à®©à¯à®¯à®¾":"KE","à®à®¿à®°à¯à®à®¿à®¸à¯à®¤à®¾à®©à¯":"KG","à®à®®à¯à®ªà¯à®à®¿à®¯à®¾":"KH","à®à®¿à®°à®¿à®ªà®à®¿":"KI","à®à¯à®®à®°à¯à®¸à¯":"KM","à®à¯à®¯à®¿à®©à¯à®à¯ à®à®¿à®à¯à®¸à¯ à®®à®±à¯à®±à¯à®®à¯ à®¨à¯à®µà®¿à®¸à¯":"KN","à®µà® à®à¯à®°à®¿à®¯à®¾":"KP","à®¤à¯à®©à¯ à®à¯à®°à®¿à®¯à®¾":"KR","à®à¯à®µà¯à®¤à¯à®¤à¯":"KW","à®à¯à®®à¯à®©à¯ à®¤à¯à®µà¯à®à®³à¯":"KY","à®à®¸à®à®¸à¯à®¤à®¾à®©à¯":"KZ","à®²à®¾à®µà¯à®¸à¯":"LA","à®²à¯à®ªà®©à®¾à®©à¯":"LB","à®à¯à®¯à®¿à®©à¯à®à¯ à®²à¯à®à®¿à®¯à®¾":"LC","à®²à®¿à®à¯à®à¯à®£à¯à®¸à¯à®à¯à®¯à¯à®©à¯":"LI","à®à®²à®à¯à®à¯":"LK","à®²à¯à®ªà¯à®°à®¿à®¯à®¾":"LR","à®²à¯à®à¯à®¤à¯":"LS","à®²à®¿à®¤à¯à®µà¯à®©à®¿à®¯à®¾":"LT","à®²à®à¯à®¸à¯à®à®®à¯à®ªà®°à¯à®à¯":"LU","à®²à®¾à®à¯à®µà®¿à®¯à®¾":"LV","à®²à®¿à®ªà®¿à®¯à®¾":"LY","à®®à¯à®°à®¾à®à¯à®à¯":"MA","à®®à¯à®©à®¾à®à¯à®à¯":"MC","à®®à®¾à®²à¯à®à¯à®µà®¾":"MD","à®®à®¾à®©à¯à®à¯à®©à¯à®à¯à®°à¯":"ME","à®à¯à®¯à®¿à®©à¯ à®®à®¾à®°à¯à®à¯à®©à¯":"MF","à®®à®à®à®¾à®¸à¯à®à®°à¯":"MG","à®®à®¾à®°à¯à®·à®²à¯ à®¤à¯à®µà¯à®à®³à¯":"MH","à®®à®¾à®à®¿à®à¯à®©à®¿à®¯à®¾":"MK","à®®à®¾à®²à¯":"ML","à®®à®¿à®¯à®¾à®©à¯à®®à®¾à®°à¯ [à®ªà®°à¯à®®à®¾]":"MM","à®®à®à¯à®à¯à®²à®¿à®¯à®¾":"MN","à®®à®à®¾à®µà¯ à®à®¾à®°à¯ à®à¯à®©à®¾":"MO","à®µà®à®à¯à®à¯ à®®à®°à®¿à®¯à®¾à®©à®¾ à®¤à¯à®µà¯à®à®³à¯":"MP","à®®à®¾à®°à¯à®à®¿à®©à®¿à®à¯":"MQ","à®®à¯à®°à®¿à®à®¾à®©à®¿à®¯à®¾":"MR","à®®à¯à®©à¯à®à¯à®à¯à®°à®¾à®à¯":"MS","à®®à®¾à®²à¯à®à®¾":"MT","à®®à¯à®°à®¿à®à®¿à®¯à®¸à¯":"MU","à®®à®¾à®²à®¤à¯à®¤à¯à®µà¯":"MV","à®®à®¾à®²à®µà®¿":"MW","à®®à¯à®à¯à®à®¿à®à¯":"MX","à®®à®²à¯à®·à®¿à®¯à®¾":"MY","à®®à¯à®à®¾à®®à¯à®ªà®¿à®à¯":"MZ","à®¨à®®à¯à®ªà®¿à®¯à®¾":"NA","à®¨à®¿à®¯à¯ à®à¯à®²à®¿à®à¯à®©à®¿à®¯à®¾":"NC","à®¨à¯à®à®°à¯":"NE","à®¨à®¾à®°à¯à®à®ªà®¾à®à¯ à®¤à¯à®µà¯à®à®³à¯":"NF","à®¨à¯à®à¯à®°à®¿à®¯à®¾":"NG","à®¨à®¿à®à®¾à®°à®à¯à®µà®¾":"NI","à®¨à¯à®¤à®°à¯à®²à®¾à®¨à¯à®¤à¯":"NL","à®¨à®¾à®°à¯à®µà¯":"NO","à®¨à¯à®ªà®¾à®³à®®à¯":"NP","à®¨à¯à®°à¯":"NR","à®¨à®¿à®¯à¯":"NU","à®¨à®¿à®¯à¯à®à®¿à®²à®¾à®¨à¯à®¤à¯":"NZ","à®à®®à®©à¯":"OM","à®ªà®©à®¾à®®à®¾":"PA","à®ªà¯à®°à¯":"PE","à®à®ªà¯à®°à¯à®©à¯à®à¯ à®ªà®¾à®²à®¿à®©à¯à®·à®¿à®¯à®¾":"PF","à®ªà®¾à®ªà¯à®ªà¯à®µà®¾ à®¨à®¿à®¯à¯ à®à®¿à®©à®¿":"PG","à®ªà®¿à®²à®¿à®ªà¯à®ªà¯à®©à¯à®¸à¯":"PH","à®ªà®¾à®à®¿à®¸à¯à®¤à®¾à®©à¯":"PK","à®ªà¯à®²à®¨à¯à®¤à¯":"PL","à®à¯à®¯à®¿à®©à¯à®à¯ à®ªà®¿à®¯à®°à¯ à®®à®±à¯à®±à¯à®®à¯ à®®à®¿à®à¯à®µà¯à®²à®¾à®©à¯":"PM","à®ªà®¿à®à¯à®à¯à®¯à¯à®°à¯à®©à¯":"PN","à®ªà®¿à®¯à¯à®°à¯à®à¯ à®°à®¿à®à¯":"PR","à®ªà®¾à®²à®¸à¯à®¤à¯à®©à®¿à®¯à®©à¯ à®®à®¾à®¹à®¾à®£à®à¯à®à®³à¯":"PS","à®ªà¯à®°à¯à®à¯à®à¯à®à¯à®à®²à¯":"PT","à®ªà®¾à®²à¯":"PW","à®ªà®¾à®°à®à¯à®µà¯":"PY","à®à®¤à®¾à®°à¯":"QA","à®à®à¯à®²à¯à®¯à®¿à®à¯ à®à®à®¾à®©à®¿à®¯à®¾":"QO","à®°à¯à®¯à¯à®©à®¿à®¯à®©à¯":"RE","à®°à¯à®®à¯à®©à®¿à®¯à®¾":"RO","à®à¯à®°à¯à®ªà®¿à®¯à®¾":"RS","à®°à®·à¯à®¯à®¾":"RU","à®°à¯à®µà®¾à®©à¯à®à®¾":"RW","à®à®µà¯à®¤à®¿ à®à®°à¯à®ªà®¿à®¯à®¾":"SA","à®à®¾à®²à®®à®©à¯ à®¤à¯à®µà¯à®à®³à¯":"SB","à®¸à¯à®à¯à®²à¯à®¸à¯":"SC","à®à¯à®à®¾à®©à¯":"SD","à®¸à¯à®µà¯à®à®©à¯":"SE","à®à®¿à®à¯à®à®ªà¯à®ªà¯à®°à¯":"SG","à®à¯à®¯à®¿à®©à¯à®à¯ à®¹à¯à®²à¯à®©à®¾":"SH","à®¸à¯à®²à¯à®µà¯à®©à®¿à®¯à®¾":"SI","à®¸à¯à®µà®²à¯à®ªà®¾à®°à¯à®à¯ à®®à®±à¯à®±à¯à®®à¯ à®à®¾à®©à¯ à®®à¯à®¯à®©à¯":"SJ","à®¸à¯à®²à¯à®µà®¾à®à®¿à®¯à®¾":"SK","à®à®¿à®¯à®°à¯à®°à®¾ à®²à®¿à®¯à¯à®©à¯":"SL","à®à®¾à®©à¯ à®®à¯à®°à®¿à®©à¯":"SM","à®à¯à®©à¯à®à®²à¯":"SN","à®à¯à®®à®¾à®²à®¿à®¯à®¾":"SO","à®à¯à®°à®¿à®©à®¾à®®à¯":"SR","à®¤à¯à®±à¯à®à¯ à®à¯à®à®¾à®©à¯":"SS","à®à®¾à®µà¯ à®¤à¯à®®à¯ à®®à®±à¯à®±à¯à®®à¯ à®ªà¯à®°à®¿à®©à¯à®à®¿à®ªà®¿":"ST","à®à®²à¯ à®à®¾à®²à¯à®µà®à®¾à®°à¯":"SV","à®à¯à®¯à®¿à®©à¯à®à¯ à®®à®¾à®°à¯à®à¯à®à¯à®©à¯":"SX","à®à®¿à®°à®¿à®¯à®¾":"SY","à®¸à¯à®µà®¾à®¸à®¿à®²à®¾à®£à¯à®à¯":"SZ","à®à®¿à®°à®¿à®¸à¯à®à®©à¯ à®à®¾ à®à¯à®©à¯à®¹à®¾":"TA","à®à®°à¯à®à¯à®¸à¯ à®®à®±à¯à®±à¯à®®à¯ à®à¯à®à¯à®¸à¯ à®¤à¯à®µà¯à®à®³à¯":"TC","à®à®¾à®à¯":"TD","à®à®ªà¯à®°à¯à®©à¯à®à¯ à®¤à¯à®±à¯à®à¯ à®®à®¾à®¹à®¾à®£à®à¯à®à®³à¯":"TF","à®à¯à®à¯":"TG","à®¤à®¾à®¯à¯à®²à®¾à®¨à¯à®¤à¯":"TH","à®¤à®¾à®à®¿à®à®¿à®¸à¯à®¤à®¾à®©à¯":"TJ","à®à¯à®à¯à®²à¯":"TK","à®à®¿à®´à®à¯à®à¯ à®¤à¯à®®à¯à®°à¯":"TL","à®¤à¯à®°à¯à®à¯à®®à¯à®©à®¿à®¸à¯à®¤à®¾à®©à¯":"TM","à®à¯à®©à®¿à®à®¿à®¯à®¾":"TN","à®à¯à®à¯à®à®¾":"TO","à®¤à¯à®°à¯à®à¯à®à®¿":"TR","à®à¯à®°à®¿à®©à®¿à®à®¾à®à¯ à®®à®±à¯à®±à¯à®®à¯ à®à¯à®ªà®¾à®à¯":"TT","à®¤à¯à®µà®¾à®²à¯":"TV","à®¤à¯à®µà®¾à®©à¯":"TW","à®à®¾à®©à¯à®à®¾à®©à®¿à®¯à®¾":"TZ","à®à®à¯à®°à¯à®©à¯":"UA","à®à®à®¾à®£à¯à®à®¾":"UG","à®à®à¯à®à®¿à®¯ à®à®®à¯à®°à®¿à®à¯à®à®¾à®µà¯ à®à¯à®±à¯à®±à®¿à®¯à¯à®³à¯à®³ à®¤à¯à®µà¯à®à®³à¯":"UM","à®à®à¯à®à®¿à®¯ à®à®®à¯à®°à®¿à®à¯à® à®à¯à®à®¿à®¯à®°à®à¯":"US","à®à®°à¯à®à¯à®µà¯":"UY","à®à®¸à¯à®ªà¯à®à®¿à®¸à¯à®¤à®¾à®©à¯":"UZ","à®µà®¾à®à®¿à®à®©à¯ à®¨à®à®°à®®à¯":"VA","à®à¯à®¯à®¿à®©à¯ à®µà®¿à®©à¯à®à®©à¯à®à¯ à®®à®±à¯à®±à¯à®®à¯ à®à®¿à®°à¯à®©à®à¯à®©à¯à®¸à¯":"VC","à®µà¯à®©à®à¯à®µà¯à®²à®¾":"VE","à®ªà®¿à®°à®¿à®à¯à®à¯à®·à¯ à®à®©à¯à®©à®¿à®¤à¯ à®¤à¯à®µà¯à®à®³à¯":"VG","à®¯à¯.à®à®¸à¯ à®à®©à¯à®©à®¿à®¤à¯ à®¤à¯à®µà¯à®à®³à¯":"VI","à®µà®¿à®¯à®à¯à®¨à®¾à®®à¯":"VN","à®µà®©à¯à®µà®¾à®à¯à®à¯":"VU","à®µà®¾à®²à®¿à®¸à¯ à®®à®±à¯à®±à¯à®®à¯ à®à®ªà¯à®à¯à®©à®¾ à®¤à¯à®µà¯à®à®³à¯":"WF","à®à®®à¯à®µà®¾":"WS","à®à®®à®©à¯":"YE","à®®à®¯à¯à®¤à¯":"YT","à®¤à¯à®©à¯ à®à®ªà¯à®ªà®¿à®°à®¿à®à¯à®à®¾":"ZA","à®à®¾à®®à¯à®ªà®¿à®¯à®¾":"ZM","à®à®¿à®®à¯à®ªà®¾à®ªà¯à®µà¯":"ZW","à®à®±à®¿à®¯à®ªà¯à®ªà®à®¾à®¤ à®ªà®¿à®°à®¤à¯à®à®®à¯":"ZZ"};
ilib.data.ctrynames_te = {"à°à°¶à°¿à°¯à°¾":"142","à°®à°§à±à°¯à°® à°à°¶à°¿à°¯à°¾":"143","à°ªà°¡à°®à°à°¿ à°à°¶à°¿à°¯à°¾":"145","à°à°°à±à°ªà°¾":"150","à°¤à±à°°à±à°ªà± à°à°°à±à°ªà°¾":"151","à°à°¤à±à°¤à°° à°à°°à±à°ªà°¾":"154","à°ªà°¡à°®à°à°¿ à°à°°à±à°ªà°¾":"155","à°²à°¾à°à°¿à°¨à± à°à°®à±à°°à°¿à°à°¾ à°®à°°à°¿à°¯à± à°à±à°°à°¬à±à°¬à°¿à°¯à°¨à±":"419","à°ªà±à°°à°ªà°à°à°":"001","à°à°«à±à°°à°¿à°à°¾":"002","à°à°¤à±à°¤à°° à°à°®à±à°°à°¿à°à°¾ à°à°à°¡à°®à±":"003","à°¦à°à±à°·à°¿à°£ à°à°®à±à°°à°¿à°à°¾":"005","à°à°·à±à°¨à°¿à°¯":"009","à°ªà°¡à°®à°à°¿ à°à°«à±à°°à°¿à°à°¾":"011","à°®à°§à±à°¯à°® à°à°®à±à°°à°¿à°à°¾":"013","à°¤à±à°°à±à°ªà± à°à°«à±à°°à°¿à°à°¾":"014","à°à°¤à±à°¤à°° à°à°«à±à°°à°¿à°à°¾":"015","à°®à°§à±à°¯à°® à°à°«à±à°°à°¿à°à°¾":"017","à°¦à°à±à°·à°¿à°£ à°à°«à±à°°à°¿à°à°¾":"018","à°à°®à±à°°à°¿à°à°¾à°²à±":"019","à°à°¤à±à°¤à°° à°à°®à±à°°à°¿à°à°¾":"021","à°à°°à°¿à°¬à±à°¬à°¿à°¯à°¨à±":"029","à°¤à±à°°à±à°ªà± à°à°¶à°¿à°¯à°¾":"030","à°¦à°à±à°·à°¿à°£ à°à°¶à°¿à°¯à°¾":"034","à°¨à±à°°à±à°¤à°¿ à°à°¶à°¿à°¯à°¾":"035","à°¦à°à±à°·à°¿à°£ à°à°°à±à°ªà°¾":"039","à°à°¸à±à°à±à°°à±à°²à±à°¸à°¿à°¯à°¾":"053","à°®à±à°²à°¨à±à°¶à°¿à°¯":"054","à°®à±à°à±à°°à±à°¨à±à°¶à°¿à°¯ à°ªà±à°°à°¾à°à°¤à°":"057","à°ªà°¾à°²à°¿à°¨à±à°·à°¿à°¯à°¾":"061","à°à°¸à±à°·à°¨à± à°¦à±à°µà°¿":"AC","à°à°¨à±à°¡à±à°°à°¾":"AD","à°¯à±à°¨à±à°à±à°¡à± à°à°°à°¬à± à°à°®à°¿à°°à±à°à±à°¸à±":"AE","à°à°«à±à°à°¾à°¨à°¿à°¸à±à°¤à°¾à°¨à±":"AF","à°à°à°à°¿à°à±à°µà°¾ à°®à°°à°¿à°¯à± à°¬à°¾à°°à±à°¬à±à°¡à°¾":"AG","à°à°à°à°µà°¿à°²à±à°²à°¾":"AI","à°à°²à±à°¬à±à°¨à°¿à°¯à°¾":"AL","à°à°°à±à°®à±à°¨à°¿à°¯à°¾":"AM","à°¨à±à°¦à±à°°à±à°²à±à°à°¡à±à°¸à± à°à°à°à°¿à°²à±à°²à°¿à°¸à±":"AN","à°à°à°à±à°²à°¾":"AO","à°à°à°à°¾à°°à±à°à°à°¿à°à°¾":"AQ","à°à°°à±à°à±à°à°à°¿à°¨à°¾":"AR","à°à°®à±à°°à°¿à°à°¨à± à°¸à°®à±à°µà°¾":"AS","à°à°¸à±à°à±à°°à°¿à°¯à°¾":"AT","à°à°¸à±à°à±à°°à±à°²à°¿à°¯à°¾":"AU","à°à°°à±à°¬à°¾":"AW","à°à°²à±à°à°¡à± à°¦à±à°µà±à°²à±":"AX","à°à°à°°à±à°¬à±à°à°¾à°¨à±":"AZ","à°¬à°¾à°¸à±à°¨à°¿à°¯à°¾ à°®à°°à°¿à°¯à± à°¹à±à°°à±à°à°¿à°à±à°µà°¿à°¨à°¾":"BA","à°¬à°¾à°°à±à°¬à°¡à±à°¸à±":"BB","à°¬à°¾à°à°à±à°²à°¾à°¦à±à°·à±":"BD","à°¬à±à°²à±à°à°¿à°¯à°":"BE","à°¬à±à°°à±à°à°¿à°¨à°¾ à°«à°¾à°¸à±":"BF","à°¬à°²à±à°à±à°°à°¿à°¯à°¾":"BG","à°¬à°¹à°°à±à°¨à±":"BH","à°¬à±à°°à±à°à°¡à°¿":"BI","à°¬à±à°¨à°¿à°¨à±":"BJ","à°¸à±à°à°à± à°¬à°°à±à°¤à±à°²à±à°®à±":"BL","à°¬à°°à±à°®à°¯à±à°¡à°¾":"BM","à°¬à±à°°à±à°¨à±":"BN","à°¬à±à°²à±à°µà°¿à°¯à°¾":"BO","à°à°°à±à°¬à°¿à°¯à°¨à± à°¨à±à°¦à°°à±à°²à°¾à°à°¡à±à°¸à±":"BQ","à°¬à±à°°à°à°¿à°²à±":"BR","à°¬à°¹à°¾à°®à°¾à°¸à±":"BS","à°­à±à°à°¾à°¨à±":"BT","à°¬à±à°µà±à°à± à°¦à±à°µà°¿":"BV","à°¬à±à°à±à°¸à±à°µà°¾à°¨à°¾":"BW","à°¬à±à°²à°¾à°°à°¸à±":"BY","à°¬à±à°²à±à°à±":"BZ","à°à±à°¨à°¡à°¾":"CA","à°à±à°à±à°¸à± à°¦à±à°µà±à°²à±":"CC","à°à°¾à°à°à±- à°à°¿à°¨à±à°·à°¾à°¸à°¾":"CD","à°®à°§à±à°¯à°® à°à°«à±à°°à°¿à°à°¾ à°°à°¿à°ªà°¬à±à°²à°¿à°à±":"CF","à°à°¾à°à°à±- à°¬à±à°°à°¾à°à°¾à°µà°¿à°²à±à°²à°¿":"CG","à°¸à±à°µà°¿à°à±à°à°°à±à°²à±à°à°¡à±":"CH","à°à°µà°°à± à°à±à°¸à±à°à±":"CI","à°à±à°à± à°¦à±à°µà±à°²à±":"CK","à°à°¿à°²à°¿":"CL","à°à±à°®à°°à±à°¨à±":"CM","à°à±à°¨à°¾":"CN","à°à±à°²à°à°¬à°¿à°¯à°¾":"CO","à°à±à°²à°¿à°ªà±à°ªà°°à±à°à°¨à± à°¦à±à°µà°¿":"CP","à°à±à°¸à±à°à°¾à°°à°¿à°à°¾":"CR","à°à±à°¯à±à°¬à°¾":"CU","à°à±à°ªà± à°µà±à°°à±à°¡à±":"CV","à°à±à°°à°¾à°à°µà±":"CW","à°à±à°°à°¿à°¸à±à°®à°¸à± à°¦à±à°µà°¿":"CX","à°¸à±à°ªà±à°°à°¸à±":"CY","à°à±à°à± à°à°£à°°à°¾à°à±à°¯à°":"CZ","à°à°°à±à°®à°¨à°¿":"DE","à°¡à°¿à°¯à°¾à°à± à°à°¾à°°à±à°¸à°¿à°¯à°¾":"DG","à°à°¿à°¬à±à°à°¿":"DJ","à°¡à±à°¨à±à°®à°¾à°°à±à°à±":"DK","à°¡à±à°®à±à°¨à°¿à°":"DM","à°¡à±à°®à°¿à°¨à°¿à°à°¨à± à°à°£ à°°à°¾à°à±à°¯à°":"DO","à°à°²à±à°à±à°°à°¿à°¯à°¾":"DZ","à°¸à±à°¯à±à°à°¾ à°®à°°à°¿à°¯à± à°®à±à°²à°¿à°²à±à°²à°¾":"EA","à°à°à±à°µà°¡à±à°°à±":"EC","à°à°¸à±à°à±à°¨à°¿à°¯à°¾":"EE","à°à°à°¿à°ªà±à°à±":"EG","à°ªà°¡à°®à°à°¿ à°¸à°¹à°¾à°°à°¾":"EH","à°à°°à°¿à°à±à°°à°¿à°¯à°¾":"ER","à°¸à±à°ªà±à°¨à±":"ES","à°à°¥à°¿à°¯à±à°ªà°¿à°¯à°¾":"ET","à°¯à±à°°à±à°ªà°¿à°¯à°¨à± à°¯à±à°¨à°¿à°¯à°¨à±":"EU","à°«à°¿à°¨à±à°²à°¾à°à°¡à±":"FI","à°«à°¿à°à°¿":"FJ","à°«à°¾à°à± à°²à±à°à°¡à± à°¦à±à°µà±à°²à±":"FK","à°®à±à°à±à°°à±à°¨à±à°¶à°¿à°¯":"FM","à°«à°¾à°°à± à°¦à±à°µà±à°²à±":"FO","à°«à±à°°à°¾à°¨à±à°¸à±â":"FR","à°à±à°¬à°¨à±":"GA","à°¬à±à°°à°¿à°à°¨à±":"GB","à°à±à°°à±à°¨à±à°¡à°¾":"GD","à°à°¾à°°à±à°à°¿à°¯à°¾":"GE","à°«à±à°°à±à°à°à± à°à°¿à°¯à°¾à°¨à°¾":"GF","à°à±à°µà±à°°à±à°¨à°¸à±":"GG","à°à°¾à°¨à°¾":"GH","à°à°¿à°¬à±à°°à°¾à°²à±à°à°¾à°°à±":"GI","à°à±à°°à±à°¨à±à°²à±à°à°¡à±":"GL","à°à°¾à°à°¬à°¿à°¯à°¾":"GM","à°à°¿à°¨à°¿à°¯à°¾":"GN","à°à±à°µà°¾à°¡à±à°²à±à°ªà±":"GP","à°à°à±à°µà±à°à±à°°à°¿à°¯à°¾à°²à± à°à°¿à°¨à°¿à°¯à°¾":"GQ","à°à±à°°à±à°¸à±":"GR","à°¦à°à±à°·à°¿à°£ à°à°¾à°°à±à°à°¿à°¯à°¾ à°®à°°à°¿à°¯à± à°¦à°à±à°·à°¿à°£ à°¸à°¾à°à°¡à±à°µà°¿à°à± à°¦à±à°µà±à°²à±":"GS","à°à±à°µà°¾à°à°¿à°®à°¾à°²":"GT","à°à±à°µà°¾à°®à±":"GU","à°à°¿à°¨à°¿à°¯à°¾-à°¬à°¿à°¸à±à°¸à°¾à°µà±":"GW","à°à°¯à°¾à°¨à°¾":"GY","à°à±à°¨à°¾ à°¯à±à°à±à° à°¹à°¾à°à°à±à°à°¾à°à°à±":"HK","à°¹à±à°°à±à°¡à± à°¦à±à°µà°¿ à°®à°°à°¿à°¯à± à°®à°¾à°à± à°¡à±à°¨à°¾à°²à±à°¡à± à°¦à±à°µà±à°²à±":"HM","à°¹à±à°à°¡à±à°°à°¾à°¸à±":"HN","à°à±à°°à±à°¯à±à°·à°¿à°¯à°¾":"HR","à°¹à±à°à°¿":"HT","à°¹à°¨à±à°à±à°°à°¿":"HU","à°à±à°¨à°°à± à°¦à±à°µà±à°²à±":"IC","à°à°à°¡à±à°¨à±à°·à°¿à°¯à°¾":"ID","à°à°°à± à°²à°¾à°à°¡à±":"IE","à°à°¸à±à°°à°¾à°¯à±à°²à±":"IL","à°à°²à± à°à°«à± à°®à°¾à°¨à±":"IM","à°­à°¾à°°à°¤ à°¦à±à°¶à°":"IN","à°¬à±à°°à°¿à°à°¿à°·à± à°­à°¾à°°à°¤à±à°¯ à°à°·à°¨à± à°ªà±à°°à°¾à°à°¤à°":"IO","à°à°°à°¾à°à±":"IQ","à°à°°à°¾à°¨à±":"IR","à°à°¸à±à°²à°¾à°à°¡à±":"IS","à°à°à°²à°¿":"IT","à°à°°à±à°¸à°¿":"JE","à°à°®à±à°à°¾":"JM","à°à°¾à°°à±à°¡à°¾à°¨à±":"JO","à°à°ªà°¾à°¨à±":"JP","à°à±à°¨à±à°¯à°¾":"KE","à°à°¿à°°à±à°à°¿à°¸à±à°¤à°¾à°¨à±":"KG","à°à°à°¬à±à°¡à°¿à°¯à°¾":"KH","à°à°¿à°°à°¿à°¬à°¾à°à°¿":"KI","à°à±à°®à±à°°à±à°¸à±":"KM","à°¸à±à°à°à± à°à°¿à°à±à°à±à°¸à± à°®à°°à°¿à°¯à± à°¨à±à°µà°¿à°¸à±":"KN","à°à°¤à±à°¤à°° à°à±à°°à°¿à°¯à°¾":"KP","à°¦à°à±à°·à°¿à°£ à°à±à°°à°¿à°¯à°¾":"KR","à°à±à°µà±à°à±":"KW","à°à±à°®à°¾à°¨à± à°¦à±à°µà±à°²à±":"KY","à°à°à°¾à°à°¸à±à°¤à°¾à°¨à±":"KZ","à°²à°¾à°µà±à°¸à±":"LA","à°²à±à°¬à°¨à°¾à°¨à±":"LB","à°¸à±à°à°à± à°²à±à°¸à°¿à°¯à°¾":"LC","à°²à°¿à°à±à°à±à°¸à±à°à±à°¨à±":"LI","à°¶à±à°°à±à°²à°à°":"LK","à°²à±à°¬à±à°°à°¿à°¯à°¾":"LR","à°²à±à°¸à±à°¤à±":"LS","à°²à°¿à°¥à±à°¯à±à°¨à°¿à°¯à°¾":"LT","à°²à°à±à°¸à°à°¬à°°à±à°à±":"LU","à°²à°¾à°à±à°µà°¿à°¯":"LV","à°²à°¿à°¬à°¿à°¯à°¾":"LY","à°®à±à°°à°¾à°à±à°à±":"MA","à°®à±à°¨à°¾à°à±":"MC","à°®à±à°²à± à°¡à±à°µ":"MD","à°®à±à°à°à±à°¨à±à°à±à°°à±":"ME","à°¸à±à°à°à± à°®à°¾à°°à±à°à°¿à°¨à±":"MF","à°®à°¾à°¡à±à°à°¾à°¸à±à°à°¾à°°à±":"MG","à°®à°¾à°°à±à°·à°²à± à°¦à±à°µà±à°²à±":"MH","à°®à±à°¸à±à°¡à±à°¨à°¿à°¯à°¾":"MK","à°®à°¾à°²à°¿":"ML","à°®à±à°¯à°¾à°¨à±à°®à°¾à°°à±":"MM","à°®à°à°à±à°²à°¿à°¯à°¾":"MN","à°®à°¾à°à°¾à°µà± à°¸à°¾à°°à± à°à±à°¨à°¾":"MO","à°à°¤à±à°¤à°° à°®à°°à°¿à°¯à°¾à°¨à°¾ à°¦à±à°µà±à°²à±":"MP","à°®à°¾à°°à±à°à°¿à°¨à°¿à°à±":"MQ","à°®à±à°°à°¿à°à±à°¨à°¿à°¯à°¾":"MR","à°®à±à°à°à±à°¸à±à°°à±à°°à°¾à°à±":"MS","à°®à°¾à°²à±à°à°¾":"MT","à°®à°¾à°°à°¿à°·à°¸à±":"MU","à°®à°¾à°²à±à°¦à±à°µà±à°²à±":"MV","à°®à°¾à°²à°¾à°µà°¿":"MW","à°®à±à°à±à°¸à°¿à°à±":"MX","à°®à°²à±à°·à°¿à°¯à°¾":"MY","à°®à±à°à°¾à°à°¬à°¿à°à±":"MZ","à°¨à°®à±à°¬à°¿à°¯à°¾":"NA","à°à±à°°à±à°¤à±à°¤ à°à°¾à°²à±à°¡à±à°¨à°¿à°¯à°¾":"NC","à°¨à±à°à°°à±":"NE","à°¨à°¾à°°à±à°«à°¾à°à± à°¦à±à°µà°¿":"NF","à°¨à±à°à±à°°à°¿à°¯à°¾":"NG","à°¨à°¿à°à°°à°¾à°à±à°µà°¾":"NI","à°¨à±à°¦à°°à±à°²à°¾à°à°¡à±à°¸à±":"NL","à°¨à°¾à°°à°µà±":"NO","à°¨à±à°ªà°¾à°²à±":"NP","à°¨à±à°°à±":"NR","à°¨à°¿à°¯à±":"NU","à°¨à±à°¯à±à°à°¿à°²à±à°à°¡à±":"NZ","à°à°®à°¾à°¨à±":"OM","à°ªà°¨à°¾à°®à°¾":"PA","à°ªà±à°°à±":"PE","à°«à±à°°à±à°à°à± à°ªà±à°²à°¿à°¨à°¿à°·à°¿à°¯à°¾":"PF","à°ªà°¾à°ªà±à°µà°¾ à°¨à±à°¯à± à°à°¿à°¨à°¿à°¯à°¾":"PG","à°«à°¿à°²à°¿ à°ªà±à°¨à±à°¸à±":"PH","à°ªà°¾à°à°¿à°¸à±à°¤à°¾à°¨à±":"PK","à°ªà±à°²à°¾à°à°¡à±":"PL","à°¸à±à°à°à± à°ªà°¿à°¯à±à°°à± à°®à°°à°¿à°¯à± à°®à°¿à°à±à°²à°¾à°¨à±":"PM","à°ªà°¿à°à±à°à±à°°à±à°¨à±":"PN","à°ªà±à°à±à°°à°¿à°à±":"PR","à°ªà°¾à°²à°¿à°¸à±à°¤à°¿à°¨à°¿à°¯à°¾à°¨à± à°ªà±à°°à°¾à°à°¤à°":"PS","à°ªà±à°°à±à°à±à°à°²à±":"PT","à°ªà°²à°¾à°µà±":"PW","à°ªà±à°°à°à±à°µà±":"PY","à°à°¤à°°à±":"QA","à°à°·à±à°¨à°¿à°¯à°¾ à°¬à°¯à°à±à°¨à±à°¨à°µà°¿":"QO","à°°à°¿à°¯à±à°¨à°¿à°¯à°¨à±":"RE","à°°à±à°®à°¾à°¨à°¿à°¯à°¾":"RO","à°¸à±à°°à±à°¬à°¿à°¯à°¾":"RS","à°°à°·à±à°¯":"RU","à°°à±à°µà°¾à°à°¡à°¾":"RW","à°¸à±à°¦à± à°à°°à±à°¬à°¿à°¯à°¾":"SA","à°¸à±à°²à±à°®à°¨à± à°¦à±à°µà±à°²à±":"SB","à°¸à±à°·à±à°²à±à°¸à±":"SC","à°¸à±à°¡à°¾à°¨à±":"SD","à°¸à±à°µà±à°¡à°¨à±":"SE","à°¸à°¿à°à°à°ªà±à°°à±":"SG","à°¸à±à°à°à± à°¹à±à°²à°¿à°¨à°¾":"SH","à°¸à±à°²à±à°µà±à°¨à°¿à°¯à°¾":"SI","à°¸à±à°µà°¾à°²à±à°¬à°¾à°°à±à°¡à± à°®à°°à°¿à°¯à± à°¯à°¾à°¨à± à°®à°¾à°¯à±à°¨à±":"SJ","à°¸à±à°²à±à°µà±à°à°¿à°¯à°¾":"SK","à°¸à°¿à°¯à±à°°à±à°°à°¾ à°²à°¿à°¯à°¾à°¨à±":"SL","à°¸à°¾à°¨à± à°®à°¾à°°à°¿à°¨à±":"SM","à°¸à±à°¨à±à°à°²à±":"SN","à°¸à±à°®à°¾à°²à°¿à°¯à°¾":"SO","à°¸à±à°°à°¿à°¨à°¾à°®à±":"SR","à°¦à°à±à°·à°¿à°£ à°¸à±à°¡à°¾à°¨à±":"SS","à°¸à°¾à°µà±à°à±à°®à± à°®à°°à°¿à°¯à± à°ªà±à°°à°¿à°¨à±à°¸à°¿à°ªà±":"ST","à°à°²à± à°¸à°¾à°²à±à°µà°¡à±à°°à±":"SV","à°¸à°¿à°à°à± à°®à°¾à°°à±à°à±à°¨à±":"SX","à°¸à°¿à°°à°¿à°¯à°¾":"SY","à°¸à±à°µà°¾à°à±à°²à±à°à°¡à±":"SZ","à°à±à°°à°¿à°¸à±à°à°¨à± à°¡ à°à°¨à±à°¹à°¾":"TA","à°¤à±à°°à±à°à± à°®à°°à°¿à°¯à± à°à°¾à°²à°¿à°à±à°¸à± à°¦à±à°µà±à°²à±":"TC","à°à°¾à°¦à±":"TD","à°«à±à°°à±à°à°à± à°¦à°à±à°·à°¿à°£ à°ªà±à°°à°¾à°à°¤à°¾à°²à±":"TF","à°à±à°à±":"TG","à°¥à°¾à°¯à± à°²à°¾à°à°¡à±":"TH","à°à°¾à°à±à°à°¿à°¸à±à°¤à°¾à°¨à±":"TJ","à°à±à°à±à°²à°¾à°µà±":"TK","à°à°¿à°®à±à°°à±-à°²à±à°¸à±à°à±":"TL","à°¤à±à°°à±à°à°®à±à°¸à±à°¤à°¾à°¨à±":"TM","à°à±à°¯à±à°¨à±à°·à°¿à°¯à°¾":"TN","à°à±à°à°à°¾":"TO","à°à°°à±à°à±":"TR","à°à±à°°à°¿à°¨à°¿à°¡à±à°¡à± à°®à°°à°¿à°¯à± à°à±à°¬à°¾à°à±":"TT","à°à±à°µà°¾à°²à±":"TV","à°à±à°µà°¾à°¨à±":"TW","à°à°¾à°à°à°¾à°¨à°¿à°¯à°¾":"TZ","à°¯à±à°à±à°°à±à°¨à±":"UA","à°¯à±à°à°¾à°à°¡à°¾":"UG","à°¸à°à°¯à±à°à±à°¤ à°°à°¾à°à±à°¯ à°à°®à±à°°à°¿à°à°¾ à°¯à±à°¨à±à°à±à°¡à± à°¸à±à°à±à°à±à°¸à± à°®à±à°¨à°°à± à°¬à°¯à° à°à°¨à±à°¨ à°¦à±à°µà±à°²à±":"UM","à°¸à°à°¯à±à°à±à°¤ à°°à°¾à°à±à°¯ à°à°®à±à°°à°¿à°à°¾":"US","à°à°°à±à°à±à°µà±":"UY","à°à°à±à°¬à±à°à°¿à°¸à±à°¤à°¾à°¨à±":"UZ","à°µà±à°à°¿à°à±à°¨à±":"VA","à°¸à±à°à°à± à°µà°¿à°¨à±à°¸à±à°à°à± à°®à°°à°¿à°¯à± à°à±à°°à±à°¨à°¡à±à°¨à±à°¸à±":"VC","à°µà±à°¨à±à°à±à°µà±à°²à°¾":"VE","à°¬à±à°°à°¿à°à°¿à°·à± à°µà°°à±à°à°¿à°¨à± à°¦à±à°µà±à°²à±":"VG","à°¯à±.à°à°¸à±. à°µà°°à±à°à°¿à°¨à± à°¦à±à°µà±à°²à±":"VI","à°µà°¿à°¯à°à±à°¨à°¾à°":"VN","à°µà°¨à±à°à±":"VU","à°µà°¾à°²à°¿à°¸à± à°®à°°à°¿à°¯à± à°«à±à°¯à±à°¤à±à°¯à±à°¨à°¾":"WF","à°¸à°®à±à°µà°¾":"WS","à°¯à±à°®à±à°¨à±":"YE","à°®à°¾à°¯à±à°à±à°à°¿":"YT","à°¦à°à±à°·à°¿à°£ à°à°«à±à°°à°¿à°à°¾ à°°à°¾à°à±à°¯à°":"ZA","à°à°¾à°à°¬à°¿à°¯à°¾":"ZM","à°à°¿à°à°¬à°¾à°¬à±à°µà±":"ZW","à°¤à±à°²à°¿à°¯à°¨à°¿ à°²à±à°¦à°¾ à°à±à°²à±à°²à°¨à°¿ à°ªà±à°°à°¾à°à°¤à°":"ZZ"};
ilib.data.ctrynames_th = {"à¹à¸­à¹à¸à¸µà¸¢":"142","à¹à¸­à¹à¸à¸µà¸¢à¸à¸¥à¸²à¸":"143","à¹à¸­à¹à¸à¸µà¸¢à¸à¸°à¸§à¸±à¸à¸à¸":"145","à¸¢à¸¸à¹à¸£à¸":"150","à¸¢à¸¸à¹à¸£à¸à¸à¸°à¸§à¸±à¸à¸­à¸­à¸":"151","à¸¢à¸¸à¹à¸£à¸à¹à¸«à¸à¸·à¸­":"154","à¸¢à¸¸à¹à¸£à¸à¸à¸°à¸§à¸±à¸à¸à¸":"155","à¸¥à¸°à¸à¸´à¸à¸­à¹à¸¡à¸£à¸´à¸à¸²":"419","à¹à¸¥à¸":"001","à¹à¸­à¸à¸£à¸´à¸à¸²":"002","à¸­à¹à¸¡à¸£à¸´à¸à¸²à¹à¸«à¸à¸·à¸­":"003","à¸­à¹à¸¡à¸£à¸´à¸à¸²à¹à¸à¹":"005","à¹à¸­à¹à¸à¸µà¸¢à¹à¸à¸µà¸¢":"009","à¹à¸­à¸à¸£à¸´à¸à¸²à¸à¸°à¸§à¸±à¸à¸à¸":"011","à¸­à¹à¸¡à¸£à¸´à¸à¸²à¸à¸¥à¸²à¸":"013","à¹à¸­à¸à¸£à¸´à¸à¸²à¸à¸°à¸§à¸±à¸à¸­à¸­à¸":"014","à¹à¸­à¸à¸£à¸´à¸à¸²à¹à¸«à¸à¸·à¸­":"015","à¹à¸­à¸à¸£à¸´à¸à¸²à¸à¸¥à¸²à¸":"017","à¹à¸­à¸à¸£à¸´à¸à¸²à¹à¸à¹ [018]":"018","à¸­à¹à¸¡à¸£à¸´à¸à¸²":"019","à¸­à¹à¸¡à¸£à¸´à¸à¸²à¸à¸­à¸à¹à¸«à¸à¸·à¸­":"021","à¹à¸à¸£à¸´à¸à¹à¸à¸µà¸¢à¸":"029","à¹à¸­à¹à¸à¸µà¸¢à¸à¸°à¸§à¸±à¸à¸­à¸­à¸":"030","à¹à¸­à¹à¸à¸µà¸¢à¹à¸à¹":"034","à¹à¸­à¹à¸à¸µà¸¢à¸à¸°à¸§à¸±à¸à¸­à¸­à¸à¹à¸à¸µà¸¢à¸à¹à¸à¹":"035","à¸¢à¸¸à¹à¸£à¸à¹à¸à¹":"039","à¸­à¸­à¸ªà¸à¸£à¸²à¹à¸¥à¹à¸à¸µà¸¢":"053","à¹à¸¡à¸¥à¸²à¸à¸µà¹à¸à¸µà¸¢":"054","à¹à¸à¸à¹à¸¡à¹à¸à¸£à¸à¸µà¹à¸à¸µà¸¢":"057","à¹à¸à¸¥à¸´à¸à¸µà¹à¸à¸µà¸¢":"061","à¹à¸à¸²à¸°à¹à¸­à¸ªà¹à¸à¸à¸à¸±à¸":"AC","à¸­à¸±à¸à¸à¸­à¸£à¹à¸£à¸²":"AD","à¸ªà¸«à¸£à¸±à¸à¸­à¸²à¸«à¸£à¸±à¸à¹à¸­à¸¡à¸´à¹à¸£à¸à¸ªà¹":"AE","à¸­à¸±à¸à¸à¸²à¸à¸´à¸ªà¸à¸²à¸":"AF","à¹à¸­à¸à¸à¸´à¸à¸²à¹à¸¥à¸°à¸à¸²à¸£à¹à¸à¸¹à¸à¸²":"AG","à¹à¸­à¸à¸à¸§à¸´à¸¥à¸¥à¸²":"AI","à¹à¸­à¸¥à¹à¸à¹à¸à¸µà¸¢":"AL","à¸­à¸²à¸£à¹à¹à¸¡à¹à¸à¸µà¸¢":"AM","à¹à¸à¹à¸à¸­à¸£à¹à¹à¸¥à¸à¸à¹à¹à¸­à¸à¸à¸´à¸¥à¸¥à¸´à¸ª":"AN","à¹à¸­à¸à¹à¸à¸¥à¸²":"AO","à¹à¸­à¸à¸à¸²à¸£à¹à¸à¸à¸´à¸à¸²":"AQ","à¸­à¸²à¸£à¹à¹à¸à¸à¸à¸´à¸à¸²":"AR","à¸­à¹à¸¡à¸£à¸´à¸à¸±à¸à¸à¸²à¸¡à¸±à¸§":"AS","à¸­à¸­à¸ªà¹à¸à¸£à¸µà¸¢":"AT","à¸­à¸­à¸ªà¹à¸à¸£à¹à¸¥à¸µà¸¢":"AU","à¸­à¸²à¸£à¸¹à¸à¸²":"AW","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¹à¸­à¸¥à¸±à¸à¸à¹":"AX","à¸­à¸²à¹à¸à¸­à¸£à¹à¹à¸à¸à¸²à¸":"AZ","à¸à¸­à¸ªà¹à¸à¸µà¸¢à¹à¸¥à¸°à¹à¸®à¸­à¸£à¹à¹à¸à¹à¸à¸§à¸µà¸à¸²":"BA","à¸à¸²à¸£à¹à¹à¸à¹à¸à¸ª":"BB","à¸à¸±à¸à¸à¸¥à¸²à¹à¸à¸¨":"BD","à¹à¸à¸¥à¹à¸¢à¸µà¸¢à¸¡":"BE","à¸à¸¹à¸£à¹à¸à¸´à¸à¸²à¸à¸²à¹à¸":"BF","à¸à¸±à¸¥à¹à¸à¹à¸£à¸µà¸¢":"BG","à¸à¸²à¸«à¹à¹à¸£à¸":"BH","à¸à¸¸à¸£à¸¸à¸à¸à¸µ":"BI","à¹à¸à¸à¸´à¸":"BJ","à¹à¸à¸à¸à¹à¸à¸²à¸£à¹à¹à¸à¹à¸¥à¸¡à¸µ":"BL","à¹à¸à¸­à¸£à¹à¸¡à¸´à¸§à¸à¸²":"BM","à¸à¸£à¸¹à¹à¸":"BN","à¹à¸à¸¥à¸´à¹à¸§à¸µà¸¢":"BO","à¹à¸à¹à¸à¸­à¸£à¹à¹à¸¥à¸à¸à¹à¹à¸à¸£à¸´à¸à¹à¸à¸µà¸¢à¸":"BQ","à¸à¸£à¸²à¸à¸´à¸¥":"BR","à¸à¸²à¸®à¸²à¸¡à¸²à¸ª":"BS","à¸ à¸¹à¸à¸²à¸":"BT","à¹à¸à¸²à¸°à¸à¸¹à¹à¸§à¸":"BV","à¸à¸­à¸à¸ªà¸§à¸²à¸à¸²":"BW","à¹à¸à¸¥à¸²à¸£à¸¸à¸ª":"BY","à¹à¸à¸¥à¸µà¸":"BZ","à¹à¸à¸à¸²à¸à¸²":"CA","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¹à¸à¹à¸à¸ª":"CC","à¸à¸­à¸à¹à¸-à¸à¸´à¸à¸à¸²à¸à¸²":"CD","à¸ªà¸²à¸à¸²à¸£à¸à¸£à¸±à¸à¹à¸­à¸à¸£à¸´à¸à¸²à¸à¸¥à¸²à¸":"CF","à¸à¸­à¸à¹à¸-à¸à¸£à¸²à¸à¸à¸²à¸§à¸´à¸¥":"CG","à¸ªà¸§à¸´à¸à¹à¸à¸­à¸£à¹à¹à¸¥à¸à¸à¹":"CH","à¹à¸­à¸§à¸­à¸£à¸µà¹à¹à¸à¸ªà¸à¹":"CI","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¸à¸¸à¸":"CK","à¸à¸´à¸¥à¸µ":"CL","à¹à¸à¹à¸¡à¸­à¸£à¸¹à¸":"CM","à¸à¸µà¸":"CN","à¹à¸à¸¥à¸­à¸¡à¹à¸à¸µà¸¢":"CO","à¹à¸à¸²à¸°à¸à¸¥à¸´à¸à¹à¸à¸­à¸£à¹à¸à¸±à¸":"CP","à¸à¸­à¸ªà¸à¸²à¸£à¸´à¸à¸²":"CR","à¸à¸´à¸§à¸à¸²":"CU","à¹à¸à¸à¹à¸§à¸´à¸£à¹à¸":"CV","à¸à¸¹à¸£à¸²à¹à¸à¸²":"CW","à¹à¸à¸²à¸°à¸à¸£à¸´à¸ªà¸à¹à¸¡à¸²à¸ª":"CX","à¹à¸à¸à¸£à¸±à¸ª":"CY","à¸ªà¸²à¸à¸²à¸£à¸à¸£à¸±à¸à¹à¸à¹à¸":"CZ","à¹à¸¢à¸­à¸£à¸¡à¸à¸µ":"DE","à¸à¸´à¹à¸­à¹à¸à¸à¸²à¸£à¹à¹à¸à¸µà¸¢":"DG","à¸à¸´à¸à¸¹à¸à¸µ":"DJ","à¹à¸à¸à¸¡à¸²à¸£à¹à¸":"DK","à¹à¸à¸¡à¸´à¸à¸´à¸à¸²":"DM","à¸ªà¸²à¸à¸²à¸£à¸à¸£à¸±à¸à¹à¸à¸¡à¸´à¸à¸´à¸à¸±à¸":"DO","à¹à¸­à¸¥à¸à¸µà¹à¸£à¸µà¸¢":"DZ","à¸à¸µà¹à¸­à¸à¸²à¹à¸¥à¸°à¹à¸¡à¸¥à¸´à¸¥à¸¥à¸²":"EA","à¹à¸­à¸à¸§à¸²à¸à¸­à¸£à¹":"EC","à¹à¸­à¸ªà¹à¸à¹à¸à¸µà¸¢":"EE","à¸­à¸µà¸¢à¸´à¸à¸à¹":"EG","à¸à¸²à¸®à¸²à¸£à¸²à¸à¸°à¸§à¸±à¸à¸à¸":"EH","à¹à¸­à¸£à¸´à¹à¸à¸£à¸µà¸¢":"ER","à¸ªà¹à¸à¸":"ES","à¹à¸­à¸à¸´à¹à¸­à¹à¸à¸µà¸¢":"ET","à¸ªà¸«à¸ à¸²à¸à¸¢à¸¸à¹à¸£à¸":"EU","à¸à¸´à¸à¹à¸¥à¸à¸à¹":"FI","à¸à¸´à¸à¸´":"FJ","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¸à¸­à¸¥à¹à¸à¹à¸¥à¸à¸à¹":"FK","à¹à¸¡à¹à¸à¸£à¸à¸µà¹à¸à¸µà¸¢":"FM","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¹à¸à¹à¸£":"FO","à¸à¸£à¸±à¹à¸à¹à¸¨à¸ª":"FR","à¸à¸²à¸à¸­à¸":"GA","à¸ªà¸«à¸£à¸²à¸à¸­à¸²à¸à¸²à¸à¸±à¸à¸£":"GB","à¹à¸à¸£à¹à¸à¸à¸²":"GD","à¸à¸­à¸£à¹à¹à¸à¸µà¸¢":"GE","à¹à¸à¸£à¸à¸à¹à¹à¸à¸µà¸¢à¸à¸²":"GF","à¹à¸à¸´à¸£à¹à¸à¸à¸µà¸¢à¹":"GG","à¸à¸²à¸à¸²":"GH","à¸¢à¸´à¸à¸£à¸­à¸¥à¸à¸²à¸£à¹":"GI","à¸à¸£à¸µà¸à¹à¸¥à¸à¸à¹":"GL","à¹à¸à¸¡à¹à¸à¸µà¸¢":"GM","à¸à¸´à¸à¸µ":"GN","à¸à¸§à¸²à¹à¸à¸­à¸¥à¸¹à¸":"GP","à¸­à¸´à¹à¸à¸§à¸à¸­à¹à¸£à¸µà¸¢à¸¥à¸à¸´à¸à¸µ":"GQ","à¸à¸£à¸µà¸":"GR","à¹à¸à¸²à¸°à¹à¸à¸²à¸à¹à¸à¸­à¸£à¹à¹à¸à¸µà¸¢à¹à¸¥à¸°à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¹à¸à¸²à¸à¹à¹à¸à¸à¸à¹à¸§à¸´à¸":"GS","à¸à¸±à¸§à¹à¸à¸¡à¸²à¸¥à¸²":"GT","à¸à¸§à¸¡":"GU","à¸à¸´à¸à¸µ-à¸à¸´à¸ªà¹à¸à¸²":"GW","à¸à¸²à¸¢à¸­à¸²à¸à¸²":"GY","à¸®à¹à¸­à¸à¸à¸ à¹à¸à¸à¸à¸à¸à¸£à¸­à¸à¸à¸´à¹à¸¨à¸©à¸à¸£à¸°à¹à¸à¸¨à¸à¸µà¸":"HK","à¹à¸à¸²à¸°à¹à¸®à¸´à¸£à¹à¸à¹à¸¥à¸°à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¹à¸¡à¸à¸à¸­à¸à¸±à¸¥à¸à¹":"HM","à¸®à¸­à¸à¸à¸¹à¸£à¸±à¸ª":"HN","à¹à¸à¸£à¹à¸­à¹à¸à¸µà¸¢":"HR","à¹à¸®à¸à¸´":"HT","à¸®à¸±à¸à¸à¸²à¸£à¸µ":"HU","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¸à¸²à¸à¸²à¸£à¸µ":"IC","à¸­à¸´à¸à¹à¸à¸à¸µà¹à¸à¸µà¸¢":"ID","à¹à¸­à¸£à¹à¹à¸¥à¸à¸à¹":"IE","à¸­à¸´à¸ªà¸£à¸²à¹à¸­à¸¥":"IL","à¹à¸à¸²à¸°à¹à¸¡à¸":"IM","à¸­à¸´à¸à¹à¸à¸µà¸¢":"IN","à¸à¸£à¸´à¸à¸´à¸à¸­à¸´à¸à¹à¸à¸µà¸¢à¸à¹à¸­à¹à¸à¸µà¸¢à¸à¹à¸à¸£à¹à¸£à¸´à¸à¸­à¸£à¸µ":"IO","à¸­à¸´à¸£à¸±à¸":"IQ","à¸­à¸´à¸«à¸£à¹à¸²à¸":"IR","à¹à¸­à¸à¹à¹à¸¥à¸à¸à¹":"IS","à¸­à¸´à¸à¸²à¸¥à¸µ":"IT","à¹à¸à¸­à¸£à¹à¸à¸µà¸¢à¹":"JE","à¸à¸²à¹à¸¡à¸à¸²":"JM","à¸à¸­à¸£à¹à¹à¸à¸":"JO","à¸à¸µà¹à¸à¸¸à¹à¸":"JP","à¹à¸à¸à¸¢à¸²":"KE","à¸à¸µà¸£à¹à¸à¸µà¸à¸ªà¸à¸²à¸":"KG","à¸à¸±à¸¡à¸à¸¹à¸à¸²":"KH","à¸à¸´à¸£à¸´à¸à¸²à¸ª":"KI","à¸à¸­à¹à¸¡à¹à¸£à¸ª":"KM","à¹à¸à¸à¸à¹à¸à¸´à¸à¸ªà¹à¹à¸¥à¸°à¹à¸à¸§à¸´à¸ª":"KN","à¹à¸à¸²à¸«à¸¥à¸µà¹à¸«à¸à¸·à¸­":"KP","à¹à¸à¸²à¸«à¸¥à¸µà¹à¸à¹":"KR","à¸à¸¹à¹à¸§à¸":"KW","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¹à¸à¸¢à¹à¹à¸¡à¸":"KY","à¸à¸²à¸à¸±à¸à¸ªà¸à¸²à¸":"KZ","à¸¥à¸²à¸§":"LA","à¹à¸¥à¸à¸²à¸à¸­à¸":"LB","à¹à¸à¸à¸à¹à¸¥à¸¹à¹à¸à¸µà¸¢":"LC","à¸¥à¸´à¸à¹à¸à¸à¸ªà¹à¸à¸à¹":"LI","à¸¨à¸£à¸µà¸¥à¸±à¸à¸à¸²":"LK","à¹à¸¥à¸à¸µà¹à¸£à¸µà¸¢":"LR","à¹à¸¥à¹à¸à¹à¸":"LS","à¸¥à¸´à¸à¸±à¸§à¹à¸à¸µà¸¢":"LT","à¸¥à¸±à¸à¹à¸à¸¡à¹à¸à¸´à¸£à¹à¸":"LU","à¸¥à¸±à¸à¹à¸§à¸µà¸¢":"LV","à¸¥à¸´à¹à¸à¸µà¸¢":"LY","à¹à¸¡à¸£à¹à¸­à¸à¹à¸":"MA","à¹à¸¡à¸à¸²à¹à¸":"MC","à¸¡à¸­à¸¥à¹à¸à¸§à¸²":"MD","à¸¡à¸­à¸à¹à¸à¹à¸à¹à¸à¸£":"ME","à¹à¸à¸à¸à¹à¸¡à¸²à¸à¸´à¸":"MF","à¸¡à¸²à¸à¸²à¸à¸±à¸ªà¸à¸²à¸£à¹":"MG","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¸¡à¸²à¸£à¹à¹à¸à¸¥à¸¥à¹":"MH","à¸¡à¸²à¸à¸´à¹à¸à¹à¸à¸µà¸¢":"MK","à¸¡à¸²à¸¥à¸µ":"ML","à¹à¸¡à¸µà¸¢à¸à¸¡à¹à¸²à¸£à¹ [à¸à¸¡à¹à¸²]":"MM","à¸¡à¸­à¸à¹à¸à¹à¸¥à¸µà¸¢":"MN","à¸¡à¸²à¹à¸à¹à¸² à¹à¸à¸à¸à¸à¸à¸£à¸­à¸à¸à¸´à¹à¸¨à¸©à¸à¸£à¸°à¹à¸à¸¨à¸à¸µà¸":"MO","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¸à¸­à¸£à¹à¹à¸à¸´à¸£à¹à¸à¸¡à¸²à¹à¸£à¸µà¸¢à¸à¸²":"MP","à¸¡à¸²à¸£à¹à¸à¸´à¸à¸µà¸":"MQ","à¸¡à¸­à¸£à¸´à¹à¸à¹à¸à¸µà¸¢":"MR","à¸¡à¸­à¸à¸à¹à¹à¸à¸­à¸£à¹à¸£à¸±à¸":"MS","à¸¡à¸­à¸¥à¸à¸²":"MT","à¸¡à¸­à¸£à¸´à¹à¸à¸µà¸¢à¸ª":"MU","à¸¡à¸±à¸¥à¸à¸µà¸à¸ªà¹":"MV","à¸¡à¸²à¸¥à¸²à¸§à¸µ":"MW","à¹à¸¡à¹à¸à¸à¸´à¹à¸":"MX","à¸¡à¸²à¹à¸¥à¹à¸à¸µà¸¢":"MY","à¹à¸¡à¸à¸±à¸¡à¸à¸´à¸":"MZ","à¸à¸²à¸¡à¸´à¹à¸à¸µà¸¢":"NA","à¸à¸´à¸§à¹à¸à¸¥à¸´à¹à¸à¹à¸à¸µà¸¢":"NC","à¹à¸à¹à¸à¸­à¸£à¹":"NE","à¹à¸à¸²à¸°à¸à¸­à¸£à¹à¸à¸­à¸¥à¹à¸":"NF","à¹à¸à¸à¸µà¹à¸£à¸µà¸¢":"NG","à¸à¸´à¸à¸²à¸£à¸²à¸à¸±à¸§":"NI","à¹à¸à¹à¸à¸­à¸£à¹à¹à¸¥à¸à¸à¹":"NL","à¸à¸­à¸£à¹à¹à¸§à¸¢à¹":"NO","à¹à¸à¸à¸²à¸¥":"NP","à¸à¸²à¸­à¸¹à¸£à¸¹":"NR","à¸à¸µà¸­à¸¹à¹à¸­":"NU","à¸à¸´à¸§à¸à¸µà¹à¸¥à¸à¸à¹":"NZ","à¹à¸­à¸¡à¸²à¸":"OM","à¸à¸²à¸à¸²à¸¡à¸²":"PA","à¹à¸à¸£à¸¹":"PE","à¹à¸à¸£à¸à¸à¹à¹à¸à¸¥à¸´à¸à¸µà¹à¸à¸µà¸¢":"PF","à¸à¸²à¸à¸±à¸§à¸à¸´à¸§à¸à¸´à¸à¸µ":"PG","à¸à¸´à¸¥à¸´à¸à¸à¸´à¸à¸ªà¹":"PH","à¸à¸²à¸à¸µà¸ªà¸à¸²à¸":"PK","à¹à¸à¹à¸¥à¸à¸à¹":"PL","à¹à¸à¸à¸à¸µà¹à¸¢à¸£à¹à¹à¸¥à¸°à¸¡à¸µà¹à¸à¸­à¸¥à¸":"PM","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¸à¸´à¸à¹à¸à¸£à¹à¸":"PN","à¹à¸à¸­à¸£à¹à¹à¸à¸£à¸´à¹à¸":"PR","à¸à¸²à¹à¸¥à¸ªà¹à¸à¸à¹":"PS","à¹à¸à¸£à¸à¸¸à¹à¸à¸ª":"PT","à¸à¸²à¹à¸¥à¸²":"PW","à¸à¸²à¸£à¸²à¸à¸§à¸±à¸¢":"PY","à¸à¸²à¸à¸²à¸£à¹":"QA","à¹à¸­à¸²à¸à¹à¹à¸¥à¸­à¸´à¸à¹à¸­à¹à¸à¸µà¸¢à¹à¸à¸µà¸¢":"QO","à¹à¸£à¸­à¸¹à¸à¸µà¸¢à¸":"RE","à¹à¸£à¸¡à¸²à¹à¸à¸µà¸¢":"RO","à¹à¸à¸­à¸£à¹à¹à¸à¸µà¸¢":"RS","à¸£à¸±à¸ªà¹à¸à¸µà¸¢":"RU","à¸£à¸§à¸±à¸à¸à¸²":"RW","à¸à¸²à¸­à¸¸à¸à¸µà¸­à¸²à¸£à¸°à¹à¸à¸µà¸¢":"SA","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¹à¸à¹à¸¥à¸¡à¸­à¸":"SB","à¹à¸à¹à¸à¸¥à¸ªà¹":"SC","à¸à¸¹à¸à¸²à¸":"SD","à¸ªà¸§à¸µà¹à¸à¸":"SE","à¸ªà¸´à¸à¸à¹à¸à¸£à¹":"SG","à¹à¸à¸à¸à¹à¹à¸®à¹à¸¥à¸à¸²":"SH","à¸ªà¹à¸¥à¸§à¸µà¹à¸à¸µà¸¢":"SI","à¸ªà¸à¸²à¸¥à¸à¸²à¸£à¹à¹à¸¥à¸°à¸¢à¸²à¸à¹à¸¡à¹à¸­à¸":"SJ","à¸ªà¹à¸¥à¸§à¸°à¹à¸à¸µà¸¢":"SK","à¹à¸à¸µà¸¢à¸£à¹à¸£à¸²à¸¥à¸µà¹à¸­à¸":"SL","à¸à¸²à¸à¸¡à¸²à¸£à¸µà¹à¸":"SM","à¹à¸à¹à¸à¸à¸±à¸¥":"SN","à¹à¸à¸¡à¸²à¹à¸¥à¸µà¸¢":"SO","à¸à¸¹à¸£à¸´à¸à¸²à¹à¸¡":"SR","à¸à¸¹à¸à¸²à¸à¹à¸à¹":"SS","à¹à¸à¸²à¸à¸¹à¹à¸¡à¹à¸¥à¸°à¸à¸£à¸´à¸à¸à¸´à¸à¸µ":"ST","à¹à¸­à¸¥à¸à¸±à¸¥à¸§à¸²à¸à¸­à¸£à¹":"SV","à¹à¸à¸à¸à¹à¸¡à¸²à¸£à¹à¸à¸´à¸":"SX","à¸à¸µà¹à¸£à¸µà¸¢":"SY","à¸ªà¸§à¸²à¸à¸´à¹à¸¥à¸à¸à¹":"SZ","à¸à¸£à¸´à¸ªà¸à¸±à¸ à¹à¸à¸­ à¸à¸¹à¸à¸²":"TA","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¹à¸à¸´à¸à¸ªà¹à¹à¸¥à¸°à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¹à¸à¸à¸­à¸ª":"TC","à¸à¸²à¸":"TD","à¹à¸à¸£à¸à¸à¹à¹à¸à¸²à¹à¸à¸´à¸£à¹à¸à¹à¸à¸£à¹à¸£à¸´à¸à¸­à¸£à¸µà¸ªà¹":"TF","à¹à¸à¹à¸":"TG","à¹à¸à¸¢":"TH","à¸à¸²à¸à¸´à¸à¸´à¸ªà¸à¸²à¸":"TJ","à¹à¸à¹à¸à¹à¸¥à¸²":"TK","à¸à¸´à¸¡à¸­à¸£à¹-à¹à¸¥à¸ªà¹à¸":"TL","à¹à¸à¸´à¸£à¹à¸à¹à¸¡à¸à¸´à¸ªà¸à¸²à¸":"TM","à¸à¸¹à¸à¸´à¹à¸à¸µà¸¢":"TN","à¸à¸­à¸à¸à¸²":"TO","à¸à¸¸à¸£à¸à¸µ":"TR","à¸à¸£à¸´à¸à¸´à¹à¸à¸à¹à¸¥à¸°à¹à¸à¹à¸à¹à¸":"TT","à¸à¸¹à¸§à¸²à¸¥à¸¹":"TV","à¹à¸à¹à¸«à¸§à¸±à¸":"TW","à¹à¸à¸à¸à¸²à¹à¸à¸µà¸¢":"TZ","à¸¢à¸¹à¹à¸à¸£à¸":"UA","à¸¢à¸¹à¸à¸±à¸à¸à¸²":"UG","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¸£à¸­à¸à¸à¸­à¸à¸à¸­à¸à¸ªà¸«à¸£à¸±à¸à¸­à¹à¸¡à¸£à¸´à¸à¸²":"UM","à¸ªà¸«à¸£à¸±à¸à¸­à¹à¸¡à¸£à¸´à¸à¸²":"US","à¸­à¸¸à¸£à¸¸à¸à¸§à¸±à¸¢":"UY","à¸­à¸¸à¸à¹à¸à¸à¸´à¸ªà¸à¸²à¸":"UZ","à¸à¸à¸£à¸£à¸±à¸à¸§à¸²à¸à¸´à¸à¸±à¸":"VA","à¹à¸à¸à¸à¹à¸§à¸´à¸à¹à¸à¸à¸à¹à¹à¸¥à¸°à¹à¸à¸£à¸à¸²à¸à¸µà¸à¸ªà¹":"VC","à¹à¸§à¹à¸à¸à¸¸à¹à¸­à¸¥à¸²":"VE","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¸à¸£à¸´à¸à¸´à¸à¹à¸§à¸­à¸£à¹à¸à¸´à¸":"VG","à¸«à¸¡à¸¹à¹à¹à¸à¸²à¸°à¸¢à¸¹à¹à¸­à¸ªà¹à¸§à¸­à¸£à¹à¸à¸´à¸":"VI","à¹à¸§à¸µà¸¢à¸à¸à¸²à¸¡":"VN","à¸§à¸²à¸à¸¹à¸­à¸²à¸à¸¹":"VU","à¸§à¸²à¸¥à¸¥à¸´à¸ªà¹à¸¥à¸°à¸à¸¸à¸à¸¹à¸à¸²":"WF","à¸à¸²à¸¡à¸±à¸§":"WS","à¹à¸¢à¹à¸¡à¸":"YE","à¸¡à¸²à¸¢à¸­à¸":"YT","à¹à¸­à¸à¸£à¸´à¸à¸²à¹à¸à¹":"ZA","à¹à¸à¸¡à¹à¸à¸µà¸¢":"ZM","à¸à¸´à¸¡à¸à¸±à¸à¹à¸§":"ZW","à¹à¸¡à¹à¸à¸£à¸²à¸à¸ à¸¹à¸¡à¸´à¸ à¸²à¸":"ZZ"};
ilib.data.ctrynames_tr = {"Asya":"142","Orta Asya":"143","BatÄ± Asya":"145","Avrupa":"150","DoÄu Avrupa":"151","Kuzey Avrupa":"154","BatÄ± Avrupa":"155","Latin Amerika":"419","DÃ¼nya":"001","Afrika":"002","Kuzey Amerika":"003","GÃ¼ney Amerika":"005","Okyanusya":"009","BatÄ± Afrika":"011","Orta Amerika":"013","DoÄu Afrika":"014","Kuzey Afrika":"015","Orta Afrika":"017","Afrika'nÄ±n GÃ¼neyi":"018","Amerika":"019","Amerika'nÄ±n Kuzeyi":"021","Karayipler":"029","DoÄu Asya":"030","GÃ¼ney Asya":"034","GÃ¼neydoÄu Asya":"035","GÃ¼ney Avrupa":"039","Avustralasya":"053","Melanezya":"054","Mikronezya":"057","Polinezya":"061","Ascension AdasÄ±":"AC","Andorra":"AD","BirleÅik Arap Emirlikleri":"AE","Afganistan":"AF","Antigua ve Barbuda":"AG","Anguilla":"AI","Arnavutluk":"AL","Ermenistan":"AM","Hollanda Antilleri":"AN","Angola":"AO","Antarktika":"AQ","Arjantin":"AR","Amerikan SamoasÄ±":"AS","Avusturya":"AT","Avustralya":"AU","Aruba":"AW","Ãland AdalarÄ±":"AX","Azerbaycan":"AZ","Bosna Hersek":"BA","Barbados":"BB","BangladeÅ":"BD","BelÃ§ika":"BE","Burkina Faso":"BF","Bulgaristan":"BG","Bahreyn":"BH","Burundi":"BI","Benin":"BJ","Saint Barthelemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivya":"BO","Karayip Hollanda":"BQ","Brezilya":"BR","Bahamalar":"BS","Butan":"BT","Bouvet AdasÄ±":"BV","Botsvana":"BW","Beyaz Rusya":"BY","Belize":"BZ","Kanada":"CA","Cocos [Keeling] AdalarÄ±":"CC","Kongo - KinÅasa":"CD","Orta Afrika Cumhuriyeti":"CF","Kongo - Brazavil":"CG","Ä°sviÃ§re":"CH","FildiÅi Sahili":"CI","Cook AdalarÄ±":"CK","Åili":"CL","Kamerun":"CM","Ãin":"CN","Kolombiya":"CO","Clipperton AdasÄ±":"CP","Kosta Rika":"CR","KÃ¼ba":"CU","Cape Verde":"CV","CuraÃ§ao":"CW","Christmas AdasÄ±":"CX","GÃ¼ney KÄ±brÄ±s Rum Kesimi":"CY","Ãek Cumhuriyeti":"CZ","Almanya":"DE","Diego Garcia":"DG","Cibuti":"DJ","Danimarka":"DK","Dominika":"DM","Dominik Cumhuriyeti":"DO","Cezayir":"DZ","Ceuta ve Melilla":"EA","Ekvador":"EC","Estonya":"EE","MÄ±sÄ±r":"EG","BatÄ± Sahara":"EH","Eritre":"ER","Ä°spanya":"ES","Etiyopya":"ET","Avrupa BirliÄi":"EU","Finlandiya":"FI","Fiji":"FJ","Falkland AdalarÄ±":"FK","Mikronezya Federal Eyaletleri":"FM","Faroe AdalarÄ±":"FO","Fransa":"FR","Gabon":"GA","BirleÅik KrallÄ±k":"GB","Grenada":"GD","GÃ¼rcistan":"GE","FransÄ±z GuyanasÄ±":"GF","Guernsey":"GG","Gana":"GH","CebelitarÄ±k":"GI","GrÃ¶nland":"GL","Gambiya":"GM","Gine":"GN","Guadalupe":"GP","Ekvator Ginesi":"GQ","Yunanistan":"GR","GÃ¼ney Georgia ve GÃ¼ney Sandwich AdalarÄ±":"GS","Guatemala":"GT","Guam":"GU","Gine-Bissau":"GW","Guyana":"GY","Ãin Hong Kong ÃYB":"HK","Heard AdasÄ± ve McDonald AdalarÄ±":"HM","Honduras":"HN","HÄ±rvatistan":"HR","Haiti":"HT","Macaristan":"HU","Kanarya AdalarÄ±":"IC","Endonezya":"ID","Ä°rlanda":"IE","Ä°srail":"IL","Man AdasÄ±":"IM","Hindistan":"IN","Ä°ngiliz Hint Okyanusu BÃ¶lgesi":"IO","Irak":"IQ","Ä°ran":"IR","Ä°zlanda":"IS","Ä°talya":"IT","Jersey":"JE","Jamaika":"JM","ÃrdÃ¼n":"JO","Japonya":"JP","Kenya":"KE","KÄ±rgÄ±zistan":"KG","KamboÃ§ya":"KH","Kiribati":"KI","Komorlar":"KM","Saint Kitts ve Nevis":"KN","Kuzey Kore":"KP","GÃ¼ney Kore":"KR","Kuveyt":"KW","Cayman AdalarÄ±":"KY","Kazakistan":"KZ","Laos":"LA","LÃ¼bnan":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","Liberya":"LR","Lesoto":"LS","Litvanya":"LT","LÃ¼ksemburg":"LU","Letonya":"LV","Libya":"LY","Fas":"MA","Monako":"MC","Moldova":"MD","KaradaÄ":"ME","Saint Martin":"MF","Madagaskar":"MG","Marshall AdalarÄ±":"MH","Makedonya":"MK","Mali":"ML","Myanmar [Burma]":"MM","MoÄolistan":"MN","Ãin Makao ÃYB":"MO","Kuzey Mariana AdalarÄ±":"MP","Martinik":"MQ","Moritanya":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldivler":"MV","Malavi":"MW","Meksika":"MX","Malezya":"MY","Mozambik":"MZ","Namibya":"NA","Yeni Kaledonya":"NC","Nijer":"NE","Norfolk AdasÄ±":"NF","Nijerya":"NG","Nikaragua":"NI","Hollanda":"NL","NorveÃ§":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","Yeni Zelanda":"NZ","Umman":"OM","Panama":"PA","Peru":"PE","FransÄ±z PolinezyasÄ±":"PF","Papua Yeni Gine":"PG","Filipinler":"PH","Pakistan":"PK","Polonya":"PL","Saint Pierre ve Miquelon":"PM","Pitcairn AdalarÄ±":"PN","Porto Riko":"PR","Filistin BÃ¶lgeleri":"PS","Portekiz":"PT","Palau":"PW","Paraguay":"PY","Katar":"QA","Uzak Okyanusya":"QO","RÃ©union":"RE","Romanya":"RO","SÄ±rbistan":"RS","Rusya":"RU","Ruanda":"RW","Suudi Arabistan":"SA","Solomon AdalarÄ±":"SB","SeyÅeller":"SC","Sudan":"SD","Ä°sveÃ§":"SE","Singapur":"SG","Saint Helena":"SH","Slovenya":"SI","Svalbard ve Jan Mayen AdalarÄ±":"SJ","Slovakya":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somali":"SO","Surinam":"SR","GÃ¼ney Sudan":"SS","SÃ£o TomÃ© ve PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Suriye":"SY","Svaziland":"SZ","Tristan da Cunha":"TA","Turks ve Caicos AdalarÄ±":"TC","Ãad":"TD","FransÄ±z GÃ¼ney BÃ¶lgeleri":"TF","Togo":"TG","Tayland":"TH","Tacikistan":"TJ","Tokelau":"TK","Timor-Leste":"TL","TÃ¼rkmenistan":"TM","Tunus":"TN","Tonga":"TO","TÃ¼rkiye":"TR","Trinidad ve Tobago":"TT","Tuvalu":"TV","Tayvan":"TW","Tanzanya":"TZ","Ukrayna":"UA","Uganda":"UG","ABD DÄ±Å AdalarÄ±":"UM","ABD":"US","Uruguay":"UY","Ãzbekistan":"UZ","Vatikan":"VA","Saint Vincent ve Grenadinler":"VC","Venezuela":"VE","Britanya Virjin AdalarÄ±":"VG","ABD Virjin AdalarÄ±":"VI","Vietnam":"VN","Vanuatu":"VU","Wallis ve Futuna AdalarÄ±":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","GÃ¼ney Afrika":"ZA","Zambiya":"ZM","Zimbabve":"ZW","Bilinmeyen BÃ¶lge":"ZZ"};
ilib.data.ctrynames_uk = {"ÐÐ·ÑÑ":"142","Ð¦ÐµÐ½ÑÑÐ°Ð»ÑÐ½Ð° ÐÐ·ÑÑ":"143","ÐÐ°ÑÑÐ´Ð½Ð° ÐÐ·ÑÑ":"145","ÐÐ²ÑÐ¾Ð¿Ð°":"150","Ð¡ÑÑÐ´Ð½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"151","ÐÑÐ²Ð½ÑÑÐ½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"154","ÐÐ°ÑÑÐ´Ð½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"155","ÐÐ°ÑÐ¸Ð½ÑÑÐºÐ° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"419","Ð¡Ð²ÑÑ":"001","ÐÑÑÐ¸ÐºÐ°":"002","ÐÑÐ²Ð½ÑÑÐ½Ð¾Ð°Ð¼ÐµÑÐ¸ÐºÐ°Ð½ÑÑÐºÐ¸Ð¹ ÐºÐ¾Ð½ÑÐ¸Ð½ÐµÐ½Ñ":"003","ÐÑÐ²Ð´ÐµÐ½Ð½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"005","ÐÐºÐµÐ°Ð½ÑÑ":"009","ÐÐ°ÑÑÐ´Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"011","Ð¦ÐµÐ½ÑÑÐ°Ð»ÑÐ½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"013","Ð¡ÑÑÐ´Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"014","ÐÑÐ²Ð½ÑÑÐ½Ð° ÐÑÑÐ¸ÐºÐ°":"015","Ð¦ÐµÐ½ÑÑÐ°Ð»ÑÐ½Ð° ÐÑÑÐ¸ÐºÐ°":"017","ÐÑÐ²Ð´ÐµÐ½Ð½Ð° ÐÑÑÐ¸ÐºÐ°":"018","ÐÐ¼ÐµÑÐ¸ÐºÐ¸":"019","ÐÑÐ²Ð½ÑÑÐ½Ð° ÐÐ¼ÐµÑÐ¸ÐºÐ°":"021","ÐÐ°ÑÐ¸Ð±ÑÑÐºÐ¸Ð¹ Ð±Ð°ÑÐµÐ¹Ð½":"029","Ð¡ÑÑÐ´Ð½Ð° ÐÐ·ÑÑ":"030","ÐÑÐ²Ð´ÐµÐ½Ð½Ð° ÐÐ·ÑÑ":"034","ÐÑÐ²Ð´ÐµÐ½Ð½Ð¾-Ð¡ÑÑÐ´Ð½Ð° ÐÐ·ÑÑ":"035","ÐÑÐ²Ð´ÐµÐ½Ð½Ð° ÐÐ²ÑÐ¾Ð¿Ð°":"039","ÐÐ²ÑÑÑÐ°Ð»ÑÑ ÑÐ° ÐÐ¾Ð²Ð° ÐÐµÐ»Ð°Ð½Ð´ÑÑ":"053","ÐÐµÐ»Ð°Ð½ÐµÐ·ÑÑ":"054","ÐÑÐºÑÐ¾Ð½ÐµÐ·ÑÐ¹ÑÑÐºÐ¸Ð¹ ÑÐµÐ³ÑÐ¾Ð½":"057","ÐÐ¾Ð»ÑÐ½ÐµÐ·ÑÑ":"061","ÐÑÑÑÑÐ² ÐÐ¾Ð·Ð½ÐµÑÑÐ½Ð½Ñ":"AC","ÐÐ½Ð´Ð¾ÑÑÐ°":"AD","ÐÐ±Ê¼ÑÐ´Ð½Ð°Ð½Ñ ÐÑÐ°Ð±ÑÑÐºÑ ÐÐ¼ÑÑÐ°ÑÐ¸":"AE","ÐÑÐ³Ð°Ð½ÑÑÑÐ°Ð½":"AF","ÐÐ½ÑÐ¸Ð³ÑÐ° Ñ ÐÐ°ÑÐ±ÑÐ´Ð°":"AG","ÐÐ½Ð³ÑÐ»ÑÑ":"AI","ÐÐ»Ð±Ð°Ð½ÑÑ":"AL","ÐÑÑÐ¼ÐµÐ½ÑÑ":"AM","ÐÑÐ´ÐµÑÐ»Ð°Ð½Ð´ÑÑÐºÑ ÐÐ½ÑÐ¸Ð»ÑÑÑÐºÑ ÐÑÑÑÐ¾Ð²Ð¸":"AN","ÐÐ½Ð³Ð¾Ð»Ð°":"AO","ÐÐ½ÑÐ°ÑÐºÑÐ¸Ð´Ð°":"AQ","ÐÑÐ³ÐµÐ½ÑÐ¸Ð½Ð°":"AR","ÐÐ¼ÐµÑÐ¸ÐºÐ°Ð½ÑÑÐºÐµ Ð¡Ð°Ð¼Ð¾Ð°":"AS","ÐÐ²ÑÑÑÑÑ":"AT","ÐÐ²ÑÑÑÐ°Ð»ÑÑ":"AU","ÐÑÑÐ±Ð°":"AW","ÐÐ»Ð°Ð½Ð´ÑÑÐºÑ Ð¾ÑÑÑÐ¾Ð²Ð¸":"AX","ÐÐ·ÐµÑÐ±Ð°Ð¹Ð´Ð¶Ð°Ð½":"AZ","ÐÐ¾ÑÐ½ÑÑ Ñ ÐÐµÑÑÐ¾Ð³Ð¾Ð²Ð¸Ð½Ð°":"BA","ÐÐ°ÑÐ±Ð°Ð´Ð¾Ñ":"BB","ÐÐ°Ð½Ð³Ð»Ð°Ð´ÐµÑ":"BD","ÐÐµÐ»ÑÐ³ÑÑ":"BE","ÐÑÑÐºÑÐ½Ð°-Ð¤Ð°ÑÐ¾":"BF","ÐÐ¾Ð»Ð³Ð°ÑÑÑ":"BG","ÐÐ°ÑÑÐµÐ¹Ð½":"BH","ÐÑÑÑÐ½Ð´Ñ":"BI","ÐÐµÐ½ÑÐ½":"BJ","ÐÑÑÑÑÐ² Ð¡Ð²ÑÑÐ¾Ð³Ð¾ ÐÐ°ÑÑÐ¾Ð»Ð¾Ð¼ÐµÑ":"BL","ÐÐµÑÐ¼ÑÐ´Ð¸":"BM","ÐÑÑÐ½ÐµÐ¹":"BN","ÐÐ¾Ð»ÑÐ²ÑÑ":"BO","ÐÑÐ°Ð·Ð¸Ð»ÑÑ":"BR","ÐÐ°Ð³Ð°Ð¼Ð¸":"BS","ÐÑÑÐ°Ð½":"BT","ÐÑÑÑÑÐ² ÐÑÐ²Ðµ":"BV","ÐÐ¾ÑÑÐ²Ð°Ð½Ð°":"BW","ÐÑÐ»Ð¾ÑÑÑÑ":"BY","ÐÐµÐ»ÑÐ·":"BZ","ÐÐ°Ð½Ð°Ð´Ð°":"CA","ÐÐ¾ÐºÐ¾ÑÐ¾Ð²Ñ Ð¾ÑÑÑÐ¾Ð²Ð¸":"CC","ÐÐ¾Ð½ÒÐ¾ - ÐÑÐ½ÑÐ°ÑÐ°":"CD","Ð¦ÐµÐ½ÑÑÐ°Ð»ÑÐ½Ð¾Ð°ÑÑÐ¸ÐºÐ°Ð½ÑÑÐºÐ° Ð ÐµÑÐ¿ÑÐ±Ð»ÑÐºÐ°":"CF","ÐÐ¾Ð½ÒÐ¾ - ÐÑÐ°Ð·Ð·Ð°Ð²ÑÐ»Ñ":"CG","Ð¨Ð²ÐµÐ¹ÑÐ°ÑÑÑ":"CH","ÐÐ¾Ñ Ð´âÐÐ²ÑÐ°Ñ":"CI","ÐÑÑÑÐ¾Ð²Ð¸ ÐÑÐºÐ°":"CK","Ð§Ð¸Ð»Ñ":"CL","ÐÐ°Ð¼ÐµÑÑÐ½":"CM","ÐÐ¸ÑÐ°Ð¹":"CN","ÐÐ¾Ð»ÑÐ¼Ð±ÑÑ":"CO","ÐÑÑÑÑÐ² ÐÐ»ÑÐ¿Ð¿ÐµÑÑÐ¾Ð½":"CP","ÐÐ¾ÑÑÐ°-Ð Ð¸ÐºÐ°":"CR","ÐÑÐ±Ð°":"CU","ÐÐ°Ð±Ð¾-ÐÐµÑÐ´Ðµ":"CV","ÐÑÑÐ°ÑÐ°Ð¾":"CW","ÐÑÑÑÑÐ² Ð ÑÐ·Ð´Ð²Ð°":"CX","ÐÑÐ¿Ñ":"CY","Ð§ÐµÑÑÐºÐ° ÑÐµÑÐ¿ÑÐ±Ð»ÑÐºÐ°":"CZ","ÐÑÐ¼ÐµÑÑÐ¸Ð½Ð°":"DE","ÐÑÑÒÐ¾-ÒÐ°ÑÑÑÑ":"DG","ÐÐ¶ÑÐ±ÑÑÑ":"DJ","ÐÐ°Ð½ÑÑ":"DK","ÐÐ¾Ð¼ÑÐ½ÑÐº":"DM","ÐÐ¾Ð¼ÑÐ½ÑÐºÐ°Ð½ÑÑÐºÐ° Ð ÐµÑÐ¿ÑÐ±Ð»ÑÐºÐ°":"DO","ÐÐ»Ð¶Ð¸Ñ":"DZ","Ð¡ÐµÑÑÐ° Ñ ÐÐµÐ»ÑÐ»ÑÑ":"EA","ÐÐºÐ²Ð°Ð´Ð¾Ñ":"EC","ÐÑÑÐ¾Ð½ÑÑ":"EE","ÐÐ³Ð¸Ð¿ÐµÑ":"EG","ÐÐ°ÑÑÐ´Ð½Ð° Ð¡Ð°ÑÐ°ÑÐ°":"EH","ÐÑÐ¸ÑÑÐµÑ":"ER","ÐÑÐ¿Ð°Ð½ÑÑ":"ES","ÐÑÑÐ¾Ð¿ÑÑ":"ET","ÐÐ²ÑÐ¾Ð¿ÐµÐ¹ÑÑÐºÐ¸Ð¹ Ð¡Ð¾ÑÐ·":"EU","Ð¤ÑÐ½Ð»ÑÐ½Ð´ÑÑ":"FI","Ð¤ÑÐ´Ð¶Ñ":"FJ","Ð¤Ð¾Ð»ÐºÐ»ÐµÐ½Ð´ÑÑÐºÑ Ð¾ÑÑÑÐ¾Ð²Ð¸":"FK","ÐÑÐºÑÐ¾Ð½ÐµÐ·ÑÑ":"FM","Ð¤Ð°ÑÐµÑÑÑÐºÑ Ð¾ÑÑÑÐ¾Ð²Ð¸":"FO","Ð¤ÑÐ°Ð½ÑÑÑ":"FR","ÐÐ°Ð±Ð¾Ð½":"GA","ÐÐµÐ»Ð¸ÐºÐ° ÐÑÐ¸ÑÐ°Ð½ÑÑ":"GB","ÐÑÐµÐ½Ð°Ð´Ð°":"GD","ÐÑÑÐ·ÑÑ":"GE","Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ° ÐÐ²ÑÐ°Ð½Ð°":"GF","ÐÐµÑÐ½ÑÑ":"GG","ÐÐ°Ð½Ð°":"GH","ÐÑÐ±ÑÐ°Ð»ÑÐ°Ñ":"GI","ÐÑÐµÐ½Ð»Ð°Ð½Ð´ÑÑ":"GL","ÐÐ°Ð¼Ð±ÑÑ":"GM","ÐÐ²ÑÐ½ÐµÑ":"GN","ÐÐ²Ð°Ð´ÐµÐ»ÑÐ¿Ð°":"GP","ÐÐºÐ²Ð°ÑÐ¾ÑÑÐ°Ð»ÑÐ½Ð° ÐÐ²ÑÐ½ÐµÑ":"GQ","ÐÑÐµÑÑÑ":"GR","ÐÑÐ²Ð´ÐµÐ½Ð½Ð° ÐÐ¶Ð¾ÑÐ´Ð¶ÑÑ ÑÐ° ÐÑÐ²Ð´ÐµÐ½Ð½Ñ Ð¡Ð°Ð½Ð´Ð²ÑÑÐµÐ²Ñ ÐÑÑÑÐ¾Ð²Ð¸":"GS","ÐÐ²Ð°ÑÐµÐ¼Ð°Ð»Ð°":"GT","ÐÑÐ°Ð¼":"GU","ÐÐ²ÑÐ½ÐµÑ-ÐÑÑÑÐ°Ñ":"GW","ÐÐ°Ð¹Ð°Ð½Ð°":"GY","ÐÐ¾Ð½ÐºÐ¾Ð½Ò Ð.Ð.Ð . ÐÐ¸ÑÐ°Ñ":"HK","ÐÑÑÑÐ¾Ð²Ð¸ Ð¥ÐµÑÐ´ Ñ ÐÐ°Ðº-ÐÐ¾Ð½Ð°Ð»ÑÐ´":"HM","ÐÐ¾Ð½Ð´ÑÑÐ°Ñ":"HN","Ð¥Ð¾ÑÐ²Ð°ÑÑÑ":"HR","ÐÐ°ÑÑÑ":"HT","Ð£Ð³Ð¾ÑÑÐ¸Ð½Ð°":"HU","ÐÐ°Ð½Ð°ÑÑÑÐºÑ Ð¾ÑÑÑÐ¾Ð²Ð¸":"IC","ÐÐ½Ð´Ð¾Ð½ÐµÐ·ÑÑ":"ID","ÐÑÐ»Ð°Ð½Ð´ÑÑ":"IE","ÐÐ·ÑÐ°ÑÐ»Ñ":"IL","ÐÑÑÑÑÐ² ÐÐµÐ½":"IM","ÐÐ½Ð´ÑÑ":"IN","ÐÑÐ¸ÑÐ°Ð½ÑÑÐºÑ ÑÐµÑÐ¸ÑÐ¾ÑÑÑ ÐÐ½Ð´ÑÐ¹ÑÑÐºÐ¾Ð³Ð¾ Ð¾ÐºÐµÐ°Ð½Ñ":"IO","ÐÑÐ°Ðº":"IQ","ÐÑÐ°Ð½":"IR","ÐÑÐ»Ð°Ð½Ð´ÑÑ":"IS","ÐÑÐ°Ð»ÑÑ":"IT","ÐÐ¶ÐµÑÑÑ":"JE","Ð¯Ð¼Ð°Ð¹ÐºÐ°":"JM","ÐÐ¾ÑÐ´Ð°Ð½ÑÑ":"JO","Ð¯Ð¿Ð¾Ð½ÑÑ":"JP","ÐÐµÐ½ÑÑ":"KE","ÐÐ¸ÑÐ³Ð¸Ð·ÑÑÐ°Ð½":"KG","ÐÐ°Ð¼Ð±Ð¾Ð´Ð¶Ð°":"KH","ÐÑÑÐ¸Ð±Ð°ÑÑ":"KI","ÐÐ¾Ð¼Ð¾ÑÑÑÐºÑ ÐÑÑÑÐ¾Ð²Ð¸":"KM","Ð¡ÐµÐ½Ñ-ÐÑÑÑ Ñ ÐÐµÐ²ÑÑ":"KN","ÐÑÐ²Ð½ÑÑÐ½Ð° ÐÐ¾ÑÐµÑ":"KP","ÐÑÐ²Ð´ÐµÐ½Ð½Ð° ÐÐ¾ÑÐµÑ":"KR","ÐÑÐ²ÐµÐ¹Ñ":"KW","ÐÐ°Ð¹Ð¼Ð°Ð½Ð¾Ð²Ñ Ð¾ÑÑÑÐ¾Ð²Ð¸":"KY","ÐÐ°Ð·Ð°ÑÑÑÐ°Ð½":"KZ","ÐÐ°Ð¾Ñ":"LA","ÐÑÐ²Ð°Ð½":"LB","Ð¡ÐµÐ½Ñ-ÐÑÑÑÑ":"LC","ÐÑÑÑÐµÐ½ÑÑÐµÐ¹Ð½":"LI","Ð¨ÑÑ-ÐÐ°Ð½ÐºÐ°":"LK","ÐÑÐ±ÐµÑÑÑ":"LR","ÐÐµÑÐ¾ÑÐ¾":"LS","ÐÐ¸ÑÐ²Ð°":"LT","ÐÑÐºÑÐµÐ¼Ð±ÑÑÐ³":"LU","ÐÐ°ÑÐ²ÑÑ":"LV","ÐÑÐ²ÑÑ":"LY","ÐÐ°ÑÐ¾ÐºÐºÐ¾":"MA","ÐÐ¾Ð½Ð°ÐºÐ¾":"MC","ÐÐ¾Ð»Ð´Ð¾Ð²Ð°":"MD","Ð§Ð¾ÑÐ½Ð¾Ð³Ð¾ÑÑÑ":"ME","ÐÑÑÑÑÐ² Ð¡Ð²ÑÑÐ¾Ð³Ð¾ ÐÐ°ÑÑÑÐ½Ð°":"MF","ÐÐ°Ð´Ð°Ð³Ð°ÑÐºÐ°Ñ":"MG","ÐÐ°ÑÑÐ°Ð»Ð»Ð¾Ð²Ñ ÐÑÑÑÐ¾Ð²Ð¸":"MH","ÐÐ°ÐºÐµÐ´Ð¾Ð½ÑÑ":"MK","ÐÐ°Ð»Ñ":"ML","ÐÊ¼ÑÐ½Ð¼Ð° [ÐÑÑÐ¼Ð°]":"MM","ÐÐ¾Ð½Ð³Ð¾Ð»ÑÑ":"MN","ÐÐ°ÐºÐ°Ð¾ Ð.Ð.Ð . ÐÐ¸ÑÐ°Ñ":"MO","ÐÑÐ²Ð½ÑÑÐ½Ñ ÐÐ°ÑÑÐ°Ð½ÑÑÐºÑ ÐÑÑÑÐ¾Ð²Ð¸":"MP","ÐÐ°ÑÑÐ¸Ð½ÑÐºÐ°":"MQ","ÐÐ°Ð²ÑÐ¸ÑÐ°Ð½ÑÑ":"MR","ÐÐ¾Ð½ÑÐµÑÑÐ°Ñ":"MS","ÐÐ°Ð»ÑÑÐ°":"MT","ÐÐ°Ð²ÑÐ¸ÐºÑÐ¹":"MU","ÐÐ°Ð»ÑÐ´ÑÐ²Ð¸":"MV","ÐÐ°Ð»Ð°Ð²Ñ":"MW","ÐÐµÐºÑÐ¸ÐºÐ°":"MX","ÐÐ°Ð»Ð°Ð¹Ð·ÑÑ":"MY","ÐÐ¾Ð·Ð°Ð¼Ð±ÑÐº":"MZ","ÐÐ°Ð¼ÑÐ±ÑÑ":"NA","ÐÐ¾Ð²Ð° ÐÐ°Ð»ÐµÐ´Ð¾Ð½ÑÑ":"NC","ÐÑÐ³ÐµÑ":"NE","ÐÑÑÑÑÐ² ÐÐ¾ÑÑÐ¾Ð»Ðº":"NF","ÐÑÐ³ÐµÑÑÑ":"NG","ÐÑÐºÐ°ÑÐ°Ð³ÑÐ°":"NI","ÐÑÐ´ÐµÑÐ»Ð°Ð½Ð´Ð¸":"NL","ÐÐ¾ÑÐ²ÐµÐ³ÑÑ":"NO","ÐÐµÐ¿Ð°Ð»":"NP","ÐÐ°ÑÑÑ":"NR","ÐÑÑ":"NU","ÐÐ¾Ð²Ð° ÐÐµÐ»Ð°Ð½Ð´ÑÑ":"NZ","ÐÐ¼Ð°Ð½":"OM","ÐÐ°Ð½Ð°Ð¼Ð°":"PA","ÐÐµÑÑ":"PE","Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÐ° ÐÐ¾Ð»ÑÐ½ÐµÐ·ÑÑ":"PF","ÐÐ°Ð¿ÑÐ° ÐÐ¾Ð²Ð° ÐÐ²ÑÐ½ÐµÑ":"PG","Ð¤ÑÐ»ÑÐ¿Ð¿ÑÐ½Ð¸":"PH","ÐÐ°ÐºÐ¸ÑÑÐ°Ð½":"PK","ÐÐ¾Ð»ÑÑÐ°":"PL","Ð¡ÐµÐ½-ÐÊ¼ÑÑ Ñ ÐÑÐºÐµÐ»Ð¾Ð½":"PM","ÐÑÑÑÐ¾Ð²Ð¸ ÐÑÑÐºÐµÑÐ½":"PN","ÐÑÐµÑÑÐ¾-Ð ÑÐºÐ¾":"PR","ÐÐ°Ð»ÐµÑÑÐ¸Ð½Ð°":"PS","ÐÐ¾ÑÑÑÐ³Ð°Ð»ÑÑ":"PT","ÐÐ°Ð»Ð°Ñ":"PW","ÐÐ°ÑÐ°Ð³Ð²Ð°Ð¹":"PY","ÐÐ°ÑÐ°Ñ":"QA","ÐÐ½ÑÐ° ÐÐºÐµÐ°Ð½ÑÑ":"QO","Ð ÐµÑÐ½ÑÐ¹Ð¾Ð½":"RE","Ð ÑÐ¼ÑÐ½ÑÑ":"RO","Ð¡ÐµÑÐ±ÑÑ":"RS","Ð Ð¾ÑÑÑ":"RU","Ð ÑÐ°Ð½Ð´Ð°":"RW","Ð¡Ð°ÑÐ´ÑÐ²ÑÑÐºÐ° ÐÑÐ°Ð²ÑÑ":"SA","Ð¡Ð¾Ð»Ð¾Ð¼Ð¾Ð½Ð¾Ð²Ñ ÐÑÑÑÐ¾Ð²Ð¸":"SB","Ð¡ÐµÐ¹ÑÐµÐ»Ð¸":"SC","Ð¡ÑÐ´Ð°Ð½":"SD","Ð¨Ð²ÐµÑÑÑ":"SE","Ð¡ÑÐ½Ð³Ð°Ð¿ÑÑ":"SG","ÐÑÑÑÑÐ² Ð¡Ð²ÑÑÐ¾Ñ ÐÐ»ÐµÐ½Ð¸":"SH","Ð¡Ð»Ð¾Ð²ÐµÐ½ÑÑ":"SI","ÐÑÑÑÐ¾Ð²Ð¸ Ð¡Ð²Ð°Ð»ÑÐ±Ð°ÑÐ´ ÑÐ° Ð¯Ð½-ÐÐ°ÑÐ½":"SJ","Ð¡Ð»Ð¾Ð²Ð°ÐºÑÑ":"SK","Ð¡ÑÑÑÑÐ°-ÐÐµÐ¾Ð½Ðµ":"SL","Ð¡Ð°Ð½-ÐÐ°ÑÐ¸Ð½Ð¾":"SM","Ð¡ÐµÐ½ÐµÐ³Ð°Ð»":"SN","Ð¡Ð¾Ð¼Ð°Ð»Ñ":"SO","Ð¡ÑÑÐ¸Ð½Ð°Ð¼":"SR","ÐÑÐ²Ð´ÐµÐ½Ð½Ð¸Ð¹ Ð¡ÑÐ´Ð°Ð½":"SS","Ð¡Ð°Ð½-Ð¢Ð¾Ð¼Ðµ Ñ ÐÑÑÐ½ÑÑÐ¿Ñ":"ST","Ð¡Ð°Ð»ÑÐ²Ð°Ð´Ð¾Ñ":"SV","Ð¡ÑÐ½Ñ-ÐÐ°ÑÑÐµÐ½":"SX","Ð¡Ð¸ÑÑÑ":"SY","Ð¡Ð²Ð°Ð·ÑÐ»ÐµÐ½Ð´":"SZ","Ð¢ÑÑÑÑÐ°Ð½-Ð´Ð°-ÐÑÐ½ÑÑ":"TA","Ð¢ÐµÑÐºÑ Ñ ÐÐ°Ð¹ÐºÐ¾Ñ":"TC","Ð§Ð°Ð´":"TD","Ð¤ÑÐ°Ð½ÑÑÐ·ÑÐºÑ ÐÑÐ²Ð´ÐµÐ½Ð½Ñ Ð¢ÐµÑÐ¸ÑÐ¾ÑÑÑ":"TF","Ð¢Ð¾Ð³Ð¾":"TG","Ð¢Ð°ÑÐ»Ð°Ð½Ð´":"TH","Ð¢Ð°Ð´Ð¶Ð¸ÐºÐ¸ÑÑÐ°Ð½":"TJ","Ð¢Ð¾ÐºÐµÐ»Ð°Ñ":"TK","Ð¢ÑÐ¼Ð¾Ñ-ÐÐµÑÑÑ":"TL","Ð¢ÑÑÐºÐ¼ÐµÐ½Ð¸ÑÑÐ°Ð½":"TM","Ð¢ÑÐ½ÑÑ":"TN","Ð¢Ð¾Ð½Ð³Ð°":"TO","Ð¢ÑÑÐµÑÑÐ¸Ð½Ð°":"TR","Ð¢ÑÐ¸Ð½ÑÐ´Ð°Ð´ Ñ Ð¢Ð¾Ð±Ð°Ð³Ð¾":"TT","Ð¢ÑÐ²Ð°Ð»Ñ":"TV","Ð¢Ð°Ð¹Ð²Ð°Ð½Ñ":"TW","Ð¢Ð°Ð½Ð·Ð°Ð½ÑÑ":"TZ","Ð£ÐºÑÐ°ÑÐ½Ð°":"UA","Ð£Ð³Ð°Ð½Ð´Ð°":"UG","ÐÑÐ´Ð´Ð°Ð»ÐµÐ½Ñ ÐÑÑÑÐ¾Ð²Ð¸ Ð¡Ð¨Ð":"UM","Ð¡Ð¨Ð":"US","Ð£ÑÑÐ³Ð²Ð°Ð¹":"UY","Ð£Ð·Ð±ÐµÐºÐ¸ÑÑÐ°Ð½":"UZ","ÐÐ°ÑÐ¸ÐºÐ°Ð½":"VA","Ð¡ÐµÐ½Ñ-ÐÑÐ½ÑÐµÐ½Ñ Ñ ÐÑÐµÐ½Ð°Ð´Ð¸Ð½Ð¸":"VC","ÐÐµÐ½ÐµÑÑÐµÐ»Ð°":"VE","ÐÑÑÐ³ÑÐ½ÑÑÐºÑ Ð¾ÑÑÑÐ¾Ð²Ð¸ ÐÑÐ¸ÑÐ°Ð½ÑÑ":"VG","ÐÑÑÐ³ÑÐ½ÑÑÐºÑ Ð¾ÑÑÑÐ¾Ð²Ð¸ Ð¡Ð¨Ð":"VI","ÐÊ¼ÑÑÐ½Ð°Ð¼":"VN","ÐÐ°Ð½ÑÐ°ÑÑ":"VU","Ð£Ð¾Ð»Ð»ÑÑ Ñ Ð¤ÑÑÑÐ½Ð°":"WF","Ð¡Ð°Ð¼Ð¾Ð°":"WS","ÐÐ¼ÐµÐ½":"YE","ÐÐ°Ð¹Ð¾Ñ":"YT","ÐÐÐ ":"ZA","ÐÐ°Ð¼Ð±ÑÑ":"ZM","ÐÑÐ¼Ð±Ð°Ð±Ð²Ðµ":"ZW","ÐÐµÐ²ÑÐ´Ð¾Ð¼Ð¸Ð¹ ÑÐµÐ³ÑÐ¾Ð½":"ZZ"};
ilib.data.ctrynames_ur = {"Ø§ÛØ´ÛØ§":"142","ÙØ³Ø·Û Ø§ÛØ´ÛØ§":"143","ÙØºØ±Ø¨Û Ø§ÛØ´ÛØ§":"145","ÛÙØ±ÙÙ¾":"150","ÙØ´Ø±ÙÛ ÛÙØ±Ù¾":"151","Ø´ÙØ§ÙÛ ÛÙØ±Ù¾":"154","ÙØºØ±Ø¨Û ÛÙØ±Ù¾":"155","ÙØ§Ø·ÛÙÛ Ø§ÙØ±ÛÚ©Û":"419","Ø¯ÙÛØ§":"001","Ø§ÙØ±ÛÙÛ":"002","Ø´ÙØ§ÙÛ Ø§ÙØ±ÛÚ©Û":"003","Ø¬ÙÙØ¨Û Ø§ÙØ±ÛÚ©Û":"005","Ø§ÙØ´ÛØ§ÙÛØ§":"009","ÙØºØ±Ø¨Û Ø§ÙØ±ÛÙÛ":"011","ÙØ³Ø·Û Ø§ÙØ±ÛÚ©Û":"013","ÙØ´Ø±ÙÛ Ø§ÙØ±ÛÙÛ":"014","Ø´ÙØ§ÙÛ Ø§ÙØ±ÛÙÛ":"015","ÙØ³Ø·Û Ø§ÙØ±ÛÙÛ":"017","Ø¬ÙÙØ¨Û Ø§ÙØ±ÛÙÛ Ú©Û Ø¹ÙØ§ÙÛ":"018","Ø§ÙÛØ±ÛÚ©Ø§Ø²":"019","Ø´ÙØ§ÙÛ Ø§ÙØ±ÛÚ©Û Ú©Ø§ Ø¹ÙØ§ÙÛ":"021","Ú©Ø±ÛØ¨ÛØ§Ø¦Û":"029","ÙØ´Ø±ÙÛ Ø§ÛØ´ÛØ§":"030","Ø¬ÙÙØ¨Û Ø§ÛØ´ÛØ§":"034","Ø¬ÙÙØ¨ ÙØ´Ø±ÙÛ Ø§ÛØ´ÛØ§":"035","Ø¬ÙÙØ¨Û ÛÙØ±Ù¾":"039","Ø¢Ø³Ù¹Ø±ÛÙÛØ´ÛØ§":"053","ÙØ§ÙÛÙÛØ´ÛØ§":"054","ÙØ§Ø¦Ú©Ø±ÙÙÛØ´ÛØ§Ø¦Û Ø¹ÙØ§ÙÛ":"057","Ù¾ÙÙÛÙÛØ´ÛØ§":"061","Ø§Ø³Ú©ÛÙØ³ÛØ¦Ù Ø¢Ø¦ÙÛÙÚ":"AC","Ø§ÙÚÙØ±Ø§":"AD","ÙØªØ­Ø¯Û Ø¹Ø±Ø¨ Ø§ÙØ§Ø±Ø§Øª":"AE","Ø§ÙØºØ§ÙØ³ØªØ§Ù":"AF","Ø§ÙÙ¹ÛÚ¯ÙØ§ Ø§ÙØ± Ø¨Ø§Ø±Ø¨ÙØ¯Ø§":"AG","Ø§ÙÚ¯ÙØ¦ÛÙØ§":"AI","Ø§ÙØ¨Ø§ÙÛÛ":"AL","Ø¢Ø±ÙÛÙÛØ§":"AM","ÙÛØ¯Ø±ÙÛÙÚØ² Ø§ÙÙ¹ÛÙÛØ²":"AN","Ø§ÙÚ¯ÙÙØ§":"AO","Ø§ÙÙ¹Ø§Ø±Ú©Ù¹ÛÚ©Ø§":"AQ","Ø§Ø±Ø¬ÙÙ¹ÛÙØ§":"AR","Ø§ÙØ±ÛÚ©Û Ø³Ø§ÙÙØ¢":"AS","Ø¢Ø³Ù¹Ø±ÛØ§":"AT","Ø¢Ø³Ù¹Ø±ÛÙÛØ§":"AU","Ø§Ø±ÙØ¨Ø§":"AW","Ø¢ÙÛÙÚ Ø¢Ø¦ÙÛÙÚØ²":"AX","Ø¢Ø°Ø±Ø¨Ø§Ø¦Ø¬Ø§Ù":"AZ","Ø¨ÙØ³ÙÛØ§ Ø§ÙØ± ÛØ±Ø²ÛÚ¯ÙÙÛÙØ§":"BA","Ø¨Ø§Ø±Ø¨Ø§Ø¯ÙØ³":"BB","Ø¨ÙÚ¯ÙÛ Ø¯ÛØ´":"BD","Ø¨ÛÙØ¬ÛÙ":"BE","Ø¨Ø±Ú©ÛÙØ§ ÙØ§Ø³Ù":"BF","Ø¨ÙØºØ§Ø±ÛÛ":"BG","Ø¨Ø­Ø±ÛÙ":"BH","Ø¨Ø±ÙÙÚÛ":"BI","Ø¨ÛÙÙ":"BJ","Ø³ÛÙÙ¹ Ø¨Ø±ØªÚ¾ÙÛÙÛ":"BL","Ø¨Ø±ÙÙØ¯Ø§":"BM","Ø¨Ø±ÙÙØ¦Û":"BN","Ø¨ÙÙÛÙÛØ§":"BO","Ú©Ø±ÛØ¨ÛØ§Ø¦Û ÙÛØ¯Ø±ÙÛÙÚØ²":"BQ","Ø¨Ø±Ø§Ø²ÛÙÛ":"BR","Ø¨ÛØ§ÙØ§Ø³":"BS","Ø¨Ú¾ÙÙ¹Ø§Ù":"BT","Ø¨Ø¤ÙÛÙ¹ Ø¢Ø¦ÙÛÙÚ":"BV","Ø¨ÙØªØ³ÙØ§ÙØ§":"BW","Ø¨ÛÙØ§Ø±ÙØ³":"BY","Ø¨ÛÙØ§Ø¦Ø²":"BZ","Ú©ÛÙÛÚØ§":"CA","Ú©ÙÚ©ÙØ³ [Ú©ÛÙÙÚ¯] Ø¬Ø²Ø§Ø¦Ø±":"CC","Ú©Ø§ÙÚ¯Ù - Ú©ÙØ´Ø§Ø³Ø§":"CD","ÙØ³Ø· Ø§ÙØ±ÛÙÛ Ø¬ÙÛÙØ±ÛÛ":"CF","Ú©Ø§ÙÚ¯Ù - Ø¨Ø±Ø§Ø²Ø§ÙÛÙÛ":"CG","Ø³ÙØ¦Ù¹Ø²Ø± ÙÛÙÚ":"CH","Ú©ÙÙ¹ ÚÛ Ø¢Ø¦ÛÙØ±Û":"CI","Ú©Ú© Ø¢Ø¦ÙÛÙÚØ²":"CK","ÚÙÛ":"CL","Ú©ÛÙØ±ÙÙ":"CM","ÚÛÙ":"CN","Ú©ÙÙÙØ¨ÛØ§":"CO","Ú©ÙÙ¾ÙØ±Ù¹Ù Ø¢Ø¦ÙÛÙÚ":"CP","Ú©ÙØ³Ù¹Ø§ Ø±ÛÚ©Ø§":"CR","Ú©ÛÙØ¨Ø§":"CU","Ú©ÛÙ¾ ÙØ±ÚÛ":"CV","Ú©ÛÙØ±Ø§Ú©Ø§Ø¤":"CW","Ú©Ø±Ø³ÙØ³ Ø¢Ø¦ÙÛÙÚ":"CX","ÙØ¨Ø±Øµ":"CY","ÚÛÚ© Ø¬ÙÛÙØ±ÛÛ":"CZ","Ø¬Ø±ÙÙÛ":"DE","ÚØ§Ø¦Ø¬Ù Ú¯Ø§Ø±Ø³ÛØ§":"DG","Ø¬Ø¨ÙØªÛ":"DJ","ÚÙÙØ§Ø±Ú©":"DK","ÚÙÙÙÛÚ©Ø§":"DM","ÚÙÙÙÛÚ©Ù Ø¬ÙÛÙØ±ÛÛ":"DO","Ø§ÙØ¬ÛØ±ÛØ§":"DZ","Ø³ÛØ¦ÙÙ¹Ø§ Ø§ÙØ± ÙÛÙÛÙØ§":"EA","Ø§ÛÚ©ÙØ§ÚÙØ±":"EC","Ø§Ø³Ù¹ÙÙÛØ§":"EE","ÙØµØ±":"EG","ÙØºØ±Ø¨Û ØµØ­Ø§Ø±Ø§":"EH","Ø§Ø±ÛÙ¹ÛØ±ÛØ§":"ER","ÛØ³Ù¾Ø§ÙÛÛ":"ES","Ø§ÛØªÚ¾ÙÙ¾ÛØ§":"ET","ÛÙØ±ÙÙ¾Û ÛÙÙÛÙ":"EU","ÙÙ ÙÛÙÚ":"FI","ÙØ¬Û":"FJ","ÙØ§Ú©ÙÛÙÚ Ø¢Ø¦ÙÛÙÚØ²":"FK","ÙØ§Ø¦Ú©Ø±ÙÙÛØ´ÛØ§":"FM","ÙØ±ÙØ¦Û Ø¢Ø¦ÙÛÙÚØ²":"FO","ÙØ±Ø§ÙØ³":"FR","Ú¯ÛØ¨ÙÙ":"GA","Ø³ÙØ·ÙØª ÙØªØ­Ø¯Û":"GB","ØºØ±ÙØ§Ø·Û":"GD","Ø¬Ø§Ø±Ø¬ÛØ§":"GE","ÙØ±ÛÙÚ Ú¯ÛØ§ÙØ§":"GF","Ú¯ÙØ¦Ø±ÙØ³Û":"GG","Ú¯Ú¾Ø§ÙØ§":"GH","Ø¬Ø¨Ù Ø§ÙØ·Ø§Ø±Ù":"GI","Ú¯Ø±ÛÙ ÙÛÙÚ":"GL","Ú¯Ø§ÙØ¨ÛØ§":"GM","Ú¯ÙÛ":"GN","Ú¯ÙØ§ÚÛÙÙÙ¾":"GP","Ø§Ø³ØªÙØ§Ø¦Û Ú¯ÛØ§ÙØ§":"GQ","ÛÙÙØ§Ù":"GR","Ø¬ÙÙØ¨Û Ø¬Ø§Ø±Ø¬ÛØ§ Ø§ÙØ± Ø¬ÙÙØ¨Û Ø³ÛÙÚÙÚ Ø¬Ø²Ø§Ø¦Ø±":"GS","Ú¯ÙØ§Ù¹Û ÙØ§ÙØ§":"GT","Ú¯ÙØ¢Ù":"GU","Ú¯ÙÛ Ø¨Ø³Ø§Ø¤":"GW","Ú¯ÛØ§ÙØ§":"GY","ÛØ§ÙÚ¯ Ú©Ø§ÙÚ¯ SAR ÚÛÙ":"HK","ÛÛØ¦Ø±Ú Ø¢Ø¦ÙÛÙÚ Ø§ÙØ± ÙÛÚ©ÚÙÙØ§ÙÚ Ø¢Ø¦ÙÛÙÚØ²":"HM","ÛÙÙÚØ§Ø±ÙØ³":"HN","Ú©Ø±ÙØ´ÛØ§":"HR","ÛÛØªÛ":"HT","ÛÙÚ¯Ø±Û":"HU","Ú©ÛÙØ±Û Ø¢Ø¦ÙÛÙÚØ²":"IC","Ø§ÙÚÙÙÛØ´ÛØ§":"ID","Ø¢Ø¦Ø±ÙÛÙÚ":"IE","Ø§Ø³Ø±Ø§Ø¦ÛÙ":"IL","Ø¢Ø¦Ù Ø¢Ù ÙÛÙ":"IM","Ø¨Ú¾Ø§Ø±Øª":"IN","Ø¨Ø±Ø·Ø§ÙÙÛ ÛÙØ¯ÙØ³ØªØ§ÙÛ Ø³ÙÙØ¯Ø±Û Ø®Ø·Û":"IO","Ø¹Ø±Ø§Ù":"IQ","Ø§ÛØ±Ø§Ù":"IR","Ø¢Ø¦Ø³ ÙÛÙÚ":"IS","Ø§Ù¹ÙÛ":"IT","Ø¬Ø±Ø³Û":"JE","Ø¬ÙØ§Ø¦ÛÚ©Ø§":"JM","Ø§Ø±Ø¯Ù":"JO","Ø¬Ø§Ù¾Ø§Ù":"JP","Ú©ÛÙÛØ§":"KE","Ú©Ø±ØºØ²Ø³ØªØ§Ù":"KG","Ú©ÙØ¨ÙÚÛØ§":"KH","Ú©Ø±ÛØ¨Ø§ØªÛ":"KI","Ú©ÙÙÙØ±ÙØ³":"KM","Ø³ÛÙÙ¹ Ú©Ù¹Ø³ Ø§ÙØ± ÙÛÙÛØ³":"KN","Ø´ÙØ§ÙÛ Ú©ÙØ±ÛØ§":"KP","Ø¬ÙÙØ¨Û Ú©ÙØ±ÛØ§":"KR","Ú©ÙÛØª":"KW","Ú©ÛÙÛÙ Ø¢Ø¦ÙÛÙÚØ²":"KY","ÙØ²Ø§Ø®Ø³ØªØ§Ù":"KZ","ÙØ§Ø¤Ø³":"LA","ÙØ¨ÙØ§Ù":"LB","Ø³ÛÙÙ¹ ÙÙØ³ÛØ§":"LC","ÙÛØ´Ù¹ÙØ³Ù¹Ø§Ø¦Ù":"LI","Ø³Ø±Û ÙÙÚ©Ø§":"LK","ÙØ§Ø¦Ø¨ÛØ±ÛØ§":"LR","ÙÛØ³ÙØªÚ¾Ù":"LS","ÙØªÚ¾ÙØ§ÙÛØ§":"LT","ÙÚ¯ÚÙØ¨Ø±Ú¯":"LU","ÙÙ¹ÙÛØ§":"LV","ÙÛØ¨ÛØ§":"LY","ÙØ±Ø§ÙØ´":"MA","ÙÙÙØ§Ú©Ù":"MC","ÙØ§ÙØ¯ÙÙØ§":"MD","ÙÙÙÙ¹Û ÙÛÚ¯Ø±Ù":"ME","Ø³ÛÙÙ¹ ÙØ§Ø±Ù¹Ù":"MF","ÙÚØºØ§Ø³Ú©Ø±":"MG","ÙØ§Ø±Ø´Ù Ø¢Ø¦ÙÛÙÚØ²":"MH","ÙÙØ¯ÙÙÛÛ":"MK","ÙØ§ÙÛ":"ML","ÙÛØ§ÙÙØ§Ø± [Ø¨Ø±ÙØ§]":"MM","ÙÙÚ¯ÙÙÛØ§":"MN","ÙÚ©Ø§Ø¤ SAR ÚÛÙ":"MO","Ø´ÙØ§ÙÛ ÙØ§Ø±ÛØ§ÙØ§ Ø¢Ø¦ÙÛÙÚØ²":"MP","ÙØ§Ø±Ù¹ÛÙÚ©":"MQ","ÙÙØ±ÛØ·Ø§ÙÛÛ":"MR","ÙÙÙÙ¹Ø³ÛØ±Ø§Ù¹":"MS","ÙØ§ÙÙ¹Ø§":"MT","ÙØ§Ø±ÛØ´Ø³":"MU","ÙØ§ÙØ¯ÛÙ":"MV","ÙÙØ§ÙÛ":"MW","ÙÛÚ©Ø³ÛÚ©Ù":"MX","ÙÙÛØ´ÛØ§":"MY","ÙÙØ²ÙØ¨ÛÙ":"MZ","ÙØ§ÙÛØ¨ÛØ§":"NA","ÙÛÙ Ú©ÙÛÚÙÙÛØ§":"NC","ÙØ§Ø¦Ø¬Ø±":"NE","ÙØ§Ø± ÙØ§Ú© Ø¢Ø¦ÙÛÙÚ":"NF","ÙØ§Ø¦Ø¬ÛØ±ÛØ§":"NG","ÙÚ©Ø§Ø±Ø§Ú¯ÙÙØ§":"NI","ÙÛØ¯Ø± ÙÛÙÚØ²":"NL","ÙØ§Ø±ÙÛ":"NO","ÙÛÙ¾Ø§Ù":"NP","ÙØ¤Ø±Ù":"NR","ÙÛØ¦Ù":"NU","ÙÛÙØ²Û ÛÙÚ":"NZ","Ø¹ÙØ§Ù":"OM","Ù¾ÙØ§ÙÛ":"PA","Ù¾ÛØ±Ù":"PE","ÙØ±Ø§ÙØ³ÛØ³Û Ù¾ÙÙÛÙÛØ´ÛØ§":"PF","Ù¾Ø§Ù¾ÙØ¢ ÙÛÙ Ú¯ÙÛ":"PG","ÙÙÙ¾Ø§Ø¦ÙÛ":"PH","Ù¾Ø§Ú©Ø³ØªØ§Ù":"PK","Ù¾ÙÙÛÙÚ":"PL","Ø³ÛÙÙ¹ Ù¾ÛØ¦Ø± Ø§ÙØ± ÙÛÚ©ÙÛØ¦ÙÙ":"PM","Ù¾Ù¹Ú©Ø§Ø¦Ø±Ù Ø¬Ø²Ø§Ø¦Ø±":"PN","Ù¾ÛÙØ±Ù¹Ù Ø±ÛÚ©Ù":"PR","ÙÙØ³Ø·ÛÙÛ Ø®Ø·Û":"PS","Ù¾Ø±ØªÚ¯Ø§Ù":"PT","Ù¾ÙØ§Ø¤":"PW","Ù¾ÛØ±Ø§Ú¯ÙØ¦Û":"PY","ÙØ·Ø±":"QA","Ø¨ÛØ±ÙÙÛ Ø§ÙØ´ÛØ§ÙÛØ§":"QO","Ø±Û ÛÙÙÛÙ":"RE","Ø±ÙÙØ§ÙÛØ§":"RO","Ø³Ø±Ø¨ÛØ§":"RS","Ø±ÙØ³Û":"RU","Ø±ÙØ§ÙÚØ§":"RW","Ø³Ø¹ÙØ¯Û Ø¹Ø±Ø¨":"SA","Ø³ÙÙÙÙÙ Ø¢Ø¦ÙÛÙÚØ²":"SB","Ø³Ø´ÙÛØ²":"SC","Ø³ÙÚØ§Ù":"SD","Ø³ÙÛÚÙ":"SE","Ø³ÙÚ¯Ø§Ù¾ÙØ±":"SG","Ø³ÛÙÙ¹ ÛÛÙÛÙØ§":"SH","Ø³ÙÙÙÛÙÛØ§":"SI","Ø³ÙØ§ÙØ¨Ø±Ú Ø§ÙØ± Ø¬Ø§Ù ÙØ§ÛÙ":"SJ","Ø³ÙÙÙØ§Ú©ÛÛ":"SK","Ø³ÛØ¦Ø± ÙÛÙÙ":"SL","Ø³Ø§Ù ÙØ§Ø±ÛÙÙ":"SM","Ø³ÛÙÛÚ¯Ù":"SN","ØµÙÙØ§ÙÛÛ":"SO","Ø³ÙØ±ÛÙØ§Ù":"SR","Ø¬ÙÙØ¨Û Ø³ÙÚØ§Ù":"SS","Ø³Ø§Ø¤ Ù¹ÙÙ Ø§ÙØ± Ù¾Ø±ÙØ³Ù¾Û":"ST","Ø§Ù Ø³ÙÙØ§ÚÙØ±":"SV","Ø³ÙÙ¹ ÙØ§Ø±Ù¹Ù":"SX","Ø´Ø§Ù":"SY","Ø³ÙØ§Ø²Û ÙÛÙÚ":"SZ","Ù¹Ø±Ø³Ù¹Ù ÚØ§ Ú©ÛÙÙÛØ§":"TA","ØªØ±Ú©Ø³ Ø§ÙØ± Ú©ÛÚ©Ø§Ø¤Ø³ Ø¬Ø²Ø§Ø¦Ø±":"TC","ÚØ§Ú":"TD","ÙØ±Ø§ÙØ³ÛØ³Û Ø¬ÙÙØ¨Û Ø®Ø·Û":"TF","Ù¹ÙÚ¯Ù":"TG","ØªÚ¾Ø§Ø¦Û ÙÛÙÚ":"TH","ØªØ§Ø¬Ú©Ø³ØªØ§Ù":"TJ","Ù¹ÙÚ©ÛÙØ§Ø¤":"TK","ØªÛÙÙØ± ÙÛØ³Ù¹":"TL","ØªØ±Ú©ÙØ§ÙØ³ØªØ§Ù":"TM","ØªÛÙÙÛØ³ÛØ§":"TN","Ù¹ÙÙÚ¯Ø§":"TO","ØªØ±Ú©Û":"TR","ØªØ±ÛÙÛØ¯Ø§Ø¯ Ø§ÙØ± Ù¹ÙØ¨Ø§Ú¯Ù":"TT","Ù¹ÙÙØ§ÙÙ":"TV","ØªØ§Ø¦ÛÙØ§Ù":"TW","ØªÙØ²Ø§ÙÛÛ":"TZ","ÛÙÚ©Ø±ÛÙ":"UA","ÛÙÚ¯Ø§ÙÚØ§":"UG","Ø§ÙØ±ÛÚ©Û Ø³Û Ø¨Ø§ÛØ± Ú©Û ÚÚ¾ÙÙ¹Û Ø¬Ø²Ø§Ø¦Ø²":"UM","Ø±ÛØ§Ø³ØªÛØ§Ø¦Û ÙØªØ­Ø¯Û":"US","ÛÙØ±ÙÚ¯ÙØ¦Û":"UY","Ø§Ø²Ø¨Ú©Ø³ØªØ§Ù":"UZ","ÙØ§Ù¹ÛÚ©Ù Ø³Ù¹Û":"VA","Ø³ÛÙÙ¹ ÙÙØ³ÙÙ¹ Ø§ÙØ± Ú¯Ø±ÛÙÛÚØ§Ø¦ÙØ²":"VC","ÙÛÙØ²ÙØ¦ÛÙØ§":"VE","Ø¨Ø±Ù¹Ø´ ÙØ±Ø¬Ù Ø¢Ø¦ÙÛÙÚØ²":"VG","Ø§ÙØ±ÛÚ©Û ÙØ±Ø¬Ù Ø¢Ø¦ÙÛÙÚØ²":"VI","ÙÛØªÙØ§Ù":"VN","ÙÛÙÙØ¢Ù¹Ù":"VU","ÙÛÙÛØ² Ø§ÙØ± ÙÛÙÙ¹ÛÙÙØ§":"WF","Ø³Ø§ÙÙØ¢":"WS","ÛÙÙ":"YE","ÙØ§ÛÙÙ¹":"YT","Ø¬ÙÙØ¨Û Ø§ÙØ±ÛÙÛ":"ZA","Ø²Ø§ÙØ¨ÛØ§":"ZM","Ø²ÙØ¨Ø§Ø¨ÙÛ":"ZW","ÙØ§ÙØ¹ÙÙÙ Ø¹ÙØ§ÙÛ":"ZZ"};
ilib.data.ctrynames_uz_Arab_AF = {"AF":"Ø§ÙØºØ§ÙØ³ØªØ§Ù","UZ":"UZ"};
ilib.data.ctrynames_uz_Latn_UZ = {"AfgÊ»oniston":"AF","Braziliya":"BR","Xitoy":"CN","Olmoniya":"DE","Fransiya":"FR","Birlashgan Qirollik":"GB","Hindiston":"IN","Italiya":"IT","Yaponiya":"JP","Rossiya":"RU","QoÊ»shma Shtatlar":"US","OÊ»zbekiston":"UZ"};
ilib.data.ctrynames_vai = {"êêê":"AD","ê³ê¯ê¤ê³ êêê¬ ê¡êêê»":"AE","êê±ê­êê»êê":"AF","êêê³ê¶ê êª êêê":"AG","êêê":"AI","êê·êêê©":"AL","êêê¯":"AM","êê ê¨ê®ê êêê³ê·":"AN","êêê":"AO","êêêê³ê¯":"AR","ê¶ê± ê¢ê¹ê":"AS","êºê»ê¤ê":"AT","êºê¬ê¤êê·ê©":"AU","êê©ê":"AW","êê¤êê¤ê§ê":"AZ","ê·ê»êê° êª ê¥ê¤êê²ê¯":"BA","êêêê»":"BB","êêêêµê¼":"BD","ê©êêê":"BE","ê·êê¯ êê":"BF","êê ê¸ê©":"BG","êê¸ê":"BH","êê©êº":"BI","ê©êê":"BJ","ê©ê·ê":"BM","êê©êê§":"BN","ê·ê·ê²ê©":"BO","êêêê":"BR","êêê®ê»":"BS","êêê":"BT","ê·ê¬êê¯":"BW","ê©êê©ê»":"BY","êê·ê":"BZ","êªê¯ê":"CA","êê êµêê´êê ê¸êê":"CD","êê±ê¸êª ê³ ê³ ê¸êê":"CF","êê":"CG","ê¬êê¤ ê¨ê®ê":"CH","êê³ ê¾ê":"CI","êê ê³êê£":"CK","êê·":"CL","êªêê©ê":"CM","ê¦ê¤ê¯":"CN","êêê­ê©":"CO","êê»ê ê¸êª":"CR","êê³ê":"CU","êêª ê²êµ ê³êê£":"CV","ê¢ê¡êêê»":"CY","ê¿ê ê¸êê":"CZ","ê§ê®ê§":"DE","êêê³":"DJ","êêê®ê":"DK","êêêêª":"DM","êêêêªê ê¸ê±ê":"DO","êê·ê ê¸ê©":"DZ","ê¡ê´êê":"EC","ê¡ê»ê¿êê°":"EE","êêê":"EG","êê¸ê³ê":"ER","êêê§":"ES","ê¤ê³êêªê©":"ET","ê±ê ê¨ê®ê":"FI","ê±ê¤ê":"FJ","êê·ê ê¨ê® ê³êê£":"FK","êêêê»ê©":"FM","ê¢êêê»":"FR","ê­ê·ê":"GA","êê¯ê¤ê³":"GB","ê¶êê¯ê":"GD","êêºêê©":"GE","ê±êê» ê¶êê¯":"GF","ê­êê¯":"GH","êêêê":"GI","ê§ê ê´ê ê¨ê®ê":"GL","ê­ê­ê©":"GM","êê¤ê":"GN","ê¶êêê¨ê":"GP","ê¦ê°ê ê³ êê¤ê":"GQ","ê¥ê·ê":"GR","ê¶êêê®ê":"GT","ê¶êê":"GU","êê¤ê ê«ê¢ê´":"GW","ê¶ê©ê¯":"GY","ê½ê«ê":"HN","êêê»ê©":"HR","êê¤ê³":"HT","ê½êê­ê":"HU","ê¤êêê»ê©":"ID","êê ê¨ê®ê":"IE","êêê»êê¤ê":"IL","ê¤êºê©":"IN","êêê» ê¤êºê© êê¤ê êê´ê ê®":"IO","ê¤êê":"IQ","ê¤êê":"IR","êê¤ê» ê¨ê®ê":"IS","ê¤êê·":"IT","ê§ê®ê§êª":"JM","êêºêµê":"JO","êê¨ê¢":"JP","êê°":"KE","êêê»êê":"KG","êªê¹êµê©":"KH","êê¸êê³":"KI","êê¹êê»":"KM","ê»ê êê³ê» êª êê²ê»":"KN","êê¸ê© êê¤ êªêê":"KP","êê¸ê© êê¤ êêê£ ê":"KR","ê´êê³":"KW","êêê®ê ê³êê£":"KY","êªê¤ê»êê":"KZ","êê´ê»":"LA","êêêê":"LB","ê»ê ê¨ê»ê©":"LC","ê·ê¿êê»ê³ê":"LI","ê¬ê¸ êêêª":"LK","êê¤ê«ê©":"LR","ê·êê¿":"LS","ê·ê¤êêê°":"LT","êê»êêêº":"LU","êê³ê²ê©":"LV","êê«ê©":"LY","êêê":"MA","êê¯ê":"MC","êê·êê":"MD","ê®êê­ê»êª":"MG","ê®êê£ ê³êê£":"MH","ê®êêêê°":"MK","ê®ê·":"ML","êê©êê®":"MM","êêê·ê©":"MN","êê¤ êªêê ê®ê¸ê©ê¯ ê³êê£":"MP","ê®ê³êê":"MQ","êêêêê°":"MR","êêêêê³":"MS","ê®êê":"MT","êêê":"MU","ê®ê·êê":"MV","ê®êêê¨":"MW","êê»ê":"MX","ê®êê»ê©":"MY","ê¹ê¤ê­ê":"MZ","ê¯êê«ê©":"NA","êªê·êêê° ê¯ê®ê":"NC","ê¯ê¤ê§":"NE","êêºê ê³êê£":"NF","ê¯ê¤êê¸ê©":"NG","êêªêê¶ê":"NI","êê ê¨ê®ê":"NL","êêºê":"NO","êêê·":"NP","êê©":"NR","ê¸êê¤":"NU","ê½ê¤ ê¨ê® ê¯ê®ê":"NZ","ê±ê®ê":"OM","êê¯ê®":"PA","ê¨ê¡ê©":"PE","ê±êê» ê¶ê·êê»ê©":"PF","êêê êê¤ê ê¯ê®ê":"PG","ê±êêªê":"PH","êêê»êê":"PK","ê¶ê·ê":"PL","ê»ê êªê êª êêêê":"PM","êªê³êªê":"PN","êªê³ê¿ ê¸ê":"PR","êêê»ê³ê¯ êê êê¤ êê¤ ê ê± êª ê­êê¤":"PS","ê¶ê¿êê¤ ê¸êê":"PT","êê":"PW","êêêê":"PY","êªêê":"QA","êê ê»":"RE","êêêê°":"RO","êêºê»ê©":"RU","êêê¡":"RW","êêê ê¸êê":"SA","ê¬êê¤ê®êê¯ ê³êê£":"SB","êê¼ê·":"SC","ê¬êµê":"SD","ê¬ê¨êµê":"SE","ê»ê¬ê¶ê±":"SG","ê»ê ê¥ê·ê¯":"SH","ê»êêêê°":"SI","ê»êêêê©":"SK","êê© êêêº ê¸êê":"SL","ê®ê¸ê ê¢ê":"SM","ê»êê­ê":"SN","êê®ê·ê©":"SO","ê¬ê¸ê¯ê":"SR","ê¢ê´ ê¿ê êª ê ê®ê§ êê´ê":"ST","ê¡ê· ê¢êêêº":"SV","ê»ê©ê":"SY","ê¬êê½ ê¨ê®ê":"SZ","êêºêê» êª êªê¤êê» ê³êê£":"TC","ê¦êµ":"TD","ê¿ê":"TG","êê¤ ê¨ê®ê":"TH","êêêê»êê":"TJ","ê¿êê":"TK","êê ê ê³êê»":"TL","êêºêê®êê»êê":"TM","ê¤êê»ê©":"TN","êê¬":"TO","êêºê":"TR","ê¤ê¸êê êª ê¿êê":"TT","êê£ê¨":"TV","êê¤êê":"TW","êêê¤êê°":"TZ","ê³ê´êê":"UA","ê³ê­ê¡":"UG","ê¶ê±":"US","ê³êêê":"UY","ê³ê©êê»êê":"UZ","ê»ê ê²êê»ê êª ê¶êê¯êµê ê¸":"VC","êê³êªê ê¸êê":"VE","êêê» ê©ê¡ ê ê·ê¬ ê³êê£":"VG","ê¶ê± ê©ê¡ ê ê·ê¬ ê³êê£":"VI","ê²êê®êê":"VN","êê¸êê¤":"VU","êê·ê» êª ê¢ê¤ê¯":"WF","ê¢ê¹êê":"WS","êêê":"YE","ê®êê":"YT","êê±ê¸êª êê¤ êêê£ ê ê¸êê":"ZA","ê¤ê­ê©":"ZM","ê½êêê":"ZW"};
ilib.data.ctrynames_vai_Latn_LR = {"AÅdÃ³ra":"AD","YunaitÉ Arabhi Æmire":"AE","AfigÃ¡ndesitaÅ":"AF","AÅtÃ­gwa Æahabhuda":"AG","AÅgÃ­la":"AI","Abhaniya":"AL","AmÃ©niya":"AM","NidÉlÉÅ AÅtili":"AN","AÅgÃ³la":"AO","AjÉÅtÃ­na":"AR","Poo Sambowa":"AS","ÆÌsituwa":"AT","ÆsituwÃ©eliya":"AU","Arubha":"AW","AzabhaijaÅ":"AZ","BhÉsiniya":"BA","Bhabhedo":"BB","BhangiladÉÌshi":"BD","BhÉgiyÉÅ":"BE","Bhokina FÃ¡so":"BF","BhÉgeriya":"BG","BharÉÅ":"BH","Bhurundi":"BI","BhÉni":"BJ","BhÉmuda":"BM","BhurunÉÄ©":"BN","Bholiviya":"BO","Bhurazeli":"BR","BahÃ¡masi":"BS","BhutaÅ":"BT","Bhosuwana":"BW","BhÉlarusi":"BY","Bheliz":"BZ","KÃ¡nÃ¡da":"CA","Avorekoo":"CD","ÃfÃ­rÃ­ka LumaÃ£ TÉ Boloe":"CF","KÃ³ngo":"CG","Suweza LumaÃ£":"CH","KÃ³divÃ³wa":"CI","KÃ³ki TiÅÅÉ":"CK","ChÃ©li":"CL","KameruÅ":"CM","ChÃ¡Ã­na":"CN","KÉlÉmbiya":"CO","KÃ³sÃ­ta RÃ­ko":"CR","Kiyubha":"CU","Kepi VÉdi TiÅÅÉ":"CV","SaÉpurÉ":"CY","ChÉki Boloe":"CZ","JamÃ¡Ä©":"DE","Jibhuti":"DJ","Danimaha":"DK","DomÃ­inÃ­ka":"DM","DomÃ­inÃ­ka Æoloe":"DO","Agiriya":"DZ","ÆÌkÃºwÃ©dÉ":"EC","ÆsitÃ³ninya":"EE","MÃ­sÃ©la":"EG","Æritera":"ER","PanyÉÄ©":"ES","ÃtiyÃ³piya":"ET","FiÅlÉÅ":"FI","FÃ­ji":"FJ","FÃ¡hÃ¡ki Luma TiÅÅÉ":"FK","Mikonisiya":"FM","FÉÅsi":"FR","GabhÉÅ":"GA","YunaitÉ KÃ­ÅdÉÅ":"GB","GurinÃ©da":"GD","JÉÉjiya":"GE","FÉÅsi Giwana":"GF","Gana":"GH","Jibhurata":"GI","Jamba Kuwa LumaÃ£":"GL","Gambiya":"GM","Gini":"GN","Guwadelupe":"GP","DÃºÃºnyÃ¡ TÉ Giini":"GQ","HÉlÉÅ":"GR","GuwatÉmala":"GT","Guwami":"GU","Gini Bhisawo":"GW","Guyana":"GY","HÉndura":"HN","Koresiya":"HR","HÃ¡iti":"HT","HÉÌngare":"HU","Ãndonisiya":"ID","Ãre LumaÃ£":"IE","BhanÃ­silÃ¡ila":"IL","Ãndiya":"IN","JengÃ©esi Gbawoe Ãndiya KÉiyÉ LÉ":"IO","Iraki":"IQ","IraÅ":"IR","Ãisi LumaÃ£":"IS","Ãtali":"IT","Jamaika":"JM","JÉÉdaÅ":"JO","JapaÅ":"JP","KÃ©nya":"KE","KigisitaÅ":"KG","KaÅbhodiya":"KH","Kiribhati":"KI","Komorosi":"KM","SiÅ Kisi ÉÉÌ Nevisi":"KN","Koriya KÉi KaÅndÉ":"KP","Koriya KÉi LeÅÅÉ LÉ":"KR","Kuweti":"KW","KeemaÅ TiÅÅÉ":"KY","KazasitaÅ":"KZ","Lawosi":"LA","LebhanÉ":"LB","SiÅ Lusiya":"LC","Suri LaÅka":"LK","Laibhiya":"LR","LisÃ³to":"LS","Lituweninya":"LT","LusimbÉ":"LU","Lativiya":"LV","Lebhiya":"LY","MÉroko":"MA","MÉnako":"MC","MÉlidova":"MD","Madagasita":"MG","Masha TiÅÅÉ":"MH","Masedoninya":"MK","Mali":"ML","Miyamaha":"MM","MÉngoliya":"MN","KÉi KaÅndÉ Mariyana TiÅÅÉ":"MP","Matiniki":"MQ","MÉretaninya":"MR","MÉserati":"MS","Malita":"MT","MÉreshÉ":"MU","Malidavi":"MV","Malawi":"MW","MÉsÃ­ko":"MX","Malesiya":"MY","Mozambiki":"MZ","Namibiya":"NA","Kalidoninya NÃ¡maÃ¡":"NC","NaÄ©ja":"NE","NÉfÉ TiÅÅÉ":"NF","NaÄ©jiriya":"NG","Nikaraguwa":"NI","NidÉlÉÅ":"NL","NÉÉwe":"NO","Nepa":"NP","Noru":"NR","Niwe":"NU","ZilÉÅ NÃ¡maÃ¡":"NZ","OmaÅ":"OM","Panama":"PA","PÉru":"PE","FÉÅsi PolinÃ­siya":"PF","Papuwa Gini NÃ¡maÃ¡":"PG","FÃ©lepiÅ":"PH","PakisitaÅ":"PK","PÃ³lÉÅ":"PL","SiÅ PiiyÉ ÉÉÌ MikelÉÅ":"PM","PitikÉÅ":"PN","Piyuto Riko":"PR","Palesitininya Tele Jii KÉiyÉ lÃ¡ hÄ© Gaza":"PS","PotokÃ­i":"PT","Palo":"PW","ParagÉe":"PY","Kataha":"QA","RenyÉÉÌ":"RE","Romininya":"RO","RÉshiya":"RU","Rawunda":"RW","Lahabu":"SA","SulaimaÃ£na TiÅÅÉ":"SB","SeshÉÉ":"SC","SudÉÅ":"SD","SuwidÉÅ":"SE","SÃ­ingapoo":"SG","SiÅ HÉlina":"SH","Suloveninya":"SI","Sulovakiya":"SK","Gbeya BahawÉ":"SL","SaÅ Marindo":"SM","Sinigaha":"SN","Somaliya":"SO","Surinambe":"SR","Sawo Tombe ÉÉ a Gbawoe":"ST","ÆlÉ SÃ¡vÃ¡dÉ":"SV","SÃ­yaÅ":"SY","Suwazi LumaÃ£":"SZ","Tukisi ÉÉÌ KaikÃ³osi TiÅÅÉ":"TC","ChÃ¡di":"TD","Togo":"TG","Tai LumaÃ£":"TH","TajikisitaÅ":"TJ","Tokelo":"TK","Tele ÆÉÌ TimÉÉÌ":"TL","TukimÉnisitaÅ":"TM","Tunisiya":"TN","TÉnga":"TO","TÉÌÉÌki":"TR","Turindeda ÉÉÌ Tobhego":"TT","TuvÃ¡lu":"TV","TaiwaÅ":"TW","TaÅzaninya":"TZ","YukurÃ©Å":"UA","Yuganda":"UG","Poo":"US","YuwegÉwe":"UY","YubhÉkisitaÅ":"UZ","VatikaÅ Æoloe":"VA","SiÅ ViÅsi":"VC","VÉnÉzuwela":"VE","JengÃ©esi BhÉÉ LÉ Musu TiÅÅÉ":"VG","Poo BhÉÉ lÉ Musu TiÅÅÉ":"VI","Viyanami":"VN","VanuwÃ¡tu":"VU","WalÃ­si":"WF","Samowa":"WS","YemÉni":"YE","Mavote":"YT","Afirika KÉi LeÅÅÉ LÉ":"ZA","Zambiya":"ZM","Zimbabhuwe":"ZW"};
ilib.data.ctrynames_vi = {"ChÃ¢u Ã":"142","Trung Ã":"143","TÃ¢y Ã":"145","Ãu ChÃ¢u":"150","ÄÃ´ng Ãu":"151","Miá»n Báº¯c ChÃ¢u Ãu":"154","TÃ¢y Ãu":"155","ChÃ¢u Má»¹ La-tinh":"419","Tháº¿ giá»i":"001","ChÃ¢u Phi":"002","Báº¯c Má»¹":"003","Nam Má»¹":"005","ChÃ¢u Äáº¡i DÆ°Æ¡ng":"009","TÃ¢y Phi":"011","Trung Má»¹":"013","ÄÃ´ng Phi":"014","Báº¯c Phi":"015","Trung Phi":"017","Miá»n Nam ChÃ¢u Phi":"018","ChÃ¢u Má»¹":"019","Miá»n Báº¯c ChÃ¢u Má»¹":"021","Ca-ri-bÃª":"029","ÄÃ´ng Ã":"030","Nam Ã":"034","ÄÃ´ng Nam Ã":"035","Nam Ãu":"039","Ãc vÃ  New Zealand":"053","Melanesia":"054","VÃ¹ng Micronesian":"057","Polynesia":"061","Äáº£o Ascension":"AC","Andorra":"AD","CÃ¡c Tiá»u VÆ°Æ¡ng quá»c A-ráº­p Thá»ng nháº¥t":"AE","Afghanistan":"AF","Antigua vÃ  Barbuda":"AG","Anguilla":"AI","Albani":"AL","Armenia":"AM","TÃ¢y áº¤n HÃ  Lan":"AN","Angola":"AO","Nam Cá»±c":"AQ","Argentina":"AR","Äáº£o Somoa thuá»c Má»¹":"AS","Ão":"AT","Ãc":"AU","Aruba":"AW","Quáº§n Äáº£o Aland":"AX","Azerbaijan":"AZ","BÃ´-xni-a HÃ©c-xÃª-gÃ´-vi-na":"BA","Barbados":"BB","Bangladesh":"BD","Bá»":"BE","Burkina Faso":"BF","Bungari":"BG","Bahrain":"BH","Burundi":"BI","Benin":"BJ","Saint BarthÃ©lemy":"BL","Bermuda":"BM","Brunei":"BN","Bolivia":"BO","Bra-xin":"BR","Bahamas":"BS","Bhutan":"BT","Äáº£o Bouvet":"BV","Botswana":"BW","Belarus":"BY","BÃª-li-xÃª":"BZ","Ca-na-Äa":"CA","Quáº§n Äáº£o Cocos":"CC","Congo - Kinshasa":"CD","Cá»ng hÃ²a Trung Phi":"CF","CÃ´ng-gÃ´":"CG","Thá»¥y SÄ©":"CH","Bá» Biá»n NgÃ ":"CI","Quáº§n Äáº£o Cook":"CK","Chile":"CL","Ca-mÆ¡-run":"CM","Trung Quá»c":"CN","Colombia":"CO","Äáº£o Clipperton":"CP","Cá»t-xta Ri-ca":"CR","Cu Ba":"CU","Cape Verde":"CV","CuraÃ§ao":"CW","Äáº£o GiÃ¡ng Sinh":"CX","SÃ­p":"CY","Cá»ng hÃ²a SÃ©c":"CZ","Äá»©c":"DE","Diego Garcia":"DG","Djibouti":"DJ","Äan Máº¡ch":"DK","Dominica":"DM","Cá»ng hÃ²a Dominica":"DO","Algeria":"DZ","Ceuta vÃ  Melilla":"EA","Ecuador":"EC","Estonia":"EE","Ai Cáº­p":"EG","TÃ¢y Sahara":"EH","Eritrea":"ER","TÃ¢y Ban Nha":"ES","Ethiopia":"ET","LiÃªn Minh ChÃ¢u Ãu":"EU","Pháº§n Lan":"FI","Fiji":"FJ","Quáº§n Äáº£o Falkland":"FK","Micronesia":"FM","Quáº§n Äáº£o Faroe":"FO","PhÃ¡p":"FR","Gabon":"GA","VÆ°Æ¡ng quá»c Anh":"GB","Grenada":"GD","Georgia":"GE","Quiana thuá»c PhÃ¡p":"GF","Guernsey":"GG","Ghana":"GH","Gibraltar":"GI","BÄng Äáº£o":"GL","Gambia":"GM","Guinea":"GN","Guadeloupe":"GP","Guinea XÃ­ch Äáº¡o":"GQ","Hy Láº¡p":"GR","Quáº§n Äáº£o Nam Georgia vÃ  Nam Sandwich":"GS","Goa-tÃª-ma-la":"GT","Guam":"GU","Guinea-Bissau":"GW","Guyana":"GY","Äáº·c khu hÃ nh chÃ­nh Há»ng KÃ´ng thuá»c CHND Trung Hoa":"HK","Äáº£o Heard vÃ  Quáº§n Äáº£o McDonald":"HM","HÃ´n-Äu-rÃ¡t":"HN","Croatia":"HR","Haiti":"HT","Hungari":"HU","Quáº§n Äáº£o Canary":"IC","Indonesia":"ID","Ai-len":"IE","Israel":"IL","Äáº£o Man":"IM","áº¤n Äá»":"IN","Thuá»c Äá»a Anh táº¡i áº¤n Äá» DÆ°Æ¡ng":"IO","I-ráº¯c":"IQ","I-ran":"IR","Ai-xÆ¡-len":"IS","Ã":"IT","Jersey":"JE","Jamaica":"JM","Jordan":"JO","Nháº­t Báº£n":"JP","Kenya":"KE","Kyrgyzstan":"KG","Campuchia":"KH","Kiribati":"KI","Comoros":"KM","Saint Kitts vÃ  Nevis":"KN","Báº¯c Triá»u TiÃªn":"KP","HÃ n Quá»c":"KR","CÃ´-oÃ©t":"KW","Quáº§n Äáº£o Cayman":"KY","Kazakhstan":"KZ","LÃ o":"LA","Li-bÄng":"LB","Saint Lucia":"LC","Liechtenstein":"LI","Sri Lanka":"LK","LIberia":"LR","Lesotho":"LS","Lithuania":"LT","Luxembourg":"LU","Latvia":"LV","Li-bi":"LY","Ma-rá»c":"MA","Monaco":"MC","Moldova":"MD","Montenegro":"ME","Saint Martin":"MF","Madagascar":"MG","Quáº§n Äáº£o Marshall":"MH","Macedonia":"MK","Mali":"ML","Myanmar [Miáº¿n Äiá»n]":"MM","MÃ´ng Cá»":"MN","Äáº·c khu hÃ nh chÃ­nh Macao thuá»c CHND Trung Hoa":"MO","Quáº§n Äáº£o Báº¯c Mariana":"MP","Martinique":"MQ","Mauritania":"MR","Montserrat":"MS","Malta":"MT","Mauritius":"MU","Maldives":"MV","Malawi":"MW","MÃª-hi-cÃ´":"MX","Malaysia":"MY","Mozambique":"MZ","Namibia":"NA","New Caledonia":"NC","Niger":"NE","Äáº£o Norfolk":"NF","Nigeria":"NG","Nicaragua":"NI","HÃ  Lan":"NL","Na Uy":"NO","Nepal":"NP","Nauru":"NR","Niue":"NU","New Zealand":"NZ","Oman":"OM","Pa-na-ma":"PA","Peru":"PE","Polynesia thuá»c PhÃ¡p":"PF","Papua New Guinea":"PG","Philippin":"PH","Pakistan":"PK","Ba Lan":"PL","Saint Pierre vÃ  Miquelon":"PM","Quáº§n Äáº£o Pitcairn":"PN","Puerto Rico":"PR","LÃ£nh thá» Palestine":"PS","Bá» ÄÃ o Nha":"PT","Palau":"PW","Paraguay":"PY","Qatar":"QA","VÃ¹ng xa xÃ´i thuá»c ChÃ¢u Äáº¡i DÆ°Æ¡ng":"QO","RÃ©union":"RE","Romania":"RO","Serbia":"RS","Nga":"RU","Rwanda":"RW","A-ráº­p XÃª-Ãºt":"SA","Quáº§n Äáº£o Solomon":"SB","Seychelles":"SC","Xu-ÄÄng":"SD","Thá»¥y Äiá»n":"SE","Singapore":"SG","Saint Helena":"SH","Slovenia":"SI","Svalbard vÃ  Jan Mayen":"SJ","Slovakia":"SK","Sierra Leone":"SL","San Marino":"SM","Senegal":"SN","Somali":"SO","Suriname":"SR","Nam Sudan":"SS","SÃ£o TomÃ© vÃ  PrÃ­ncipe":"ST","El Salvador":"SV","Sint Maarten":"SX","Syria":"SY","Swaziland":"SZ","Tristan da Cunha":"TA","Quáº§n Äáº£o Turk vÃ  Caicos":"TC","Chad":"TD","Thuá»c Äá»a Nam cá»§a PhÃ¡p":"TF","Togo":"TG","ThÃ¡i Lan":"TH","Tajikistan":"TJ","Tokelau":"TK","ÄÃ´ng Ti-mo":"TL","Turkmenistan":"TM","Tuy-ni-di":"TN","Tonga":"TO","Thá» NhÄ© Ká»³":"TR","Trinidad vÃ  Tobago":"TT","Tuvalu":"TV","ÄÃ i Loan":"TW","Tanzania":"TZ","Ukraina":"UA","Uganda":"UG","CÃ¡c Äáº£o nhá» xa trung tÃ¢m thuá»c Má»¹":"UM","Hoa Ká»³":"US","Uruguay":"UY","Uzbekistan":"UZ","Va-ti-cÄng":"VA","Saint Vincent vÃ  Grenadines":"VC","Venezuela":"VE","Quáº§n Äáº£o Virgin thuá»c Anh":"VG","Quáº§n Äáº£o Virgin thuá»c Má»¹":"VI","Viá»t Nam":"VN","Vanuatu":"VU","Wallis vÃ  Futuna":"WF","Samoa":"WS","Yemen":"YE","Mayotte":"YT","Nam Phi":"ZA","Zambia":"ZM","Zimbabwe":"ZW","VÃ¹ng ChÆ°a biáº¿t hoáº·c khÃ´ng Há»£p lá»":"ZZ"};
ilib.data.ctrynames_zh = {"generated":false,"é¿å¯æ±":"AF","é¿å°å·´å°¼äº":"AL","é¿å°åå©äº":"DZ","ç¾å±è¨æ©äº":"AS","å®éå°":"AD","å®å¥æ":"AO","å®å­æ":"AI","é¿æ ¹å»·":"AR","äºç¾å°¼äº":"AM","é¿é²å·´":"AW","é¿æ£®æ¾":"SH","é¿æ£®æ¾å²":"AC","æ¾³å¤§å©äº":"AU","å¥¥å°å©":"AT","é¿å¡æç":"AZ","è±å±ç»´å°äº¬ç¾¤å²":"VG","å·´åé©¬":"BS","å·´æ":"BH","å­å æå½":"BD","å·´å·´å¤æ¯":"BB","ç½ä¿ç½æ¯":"BY","æ¯å©æ¶":"BE","ä¼¯å©å¹":"BZ","è´å®":"BJ","ç¾æå¤§":"BM","ä¸ä¸¹":"BT","ç»å©ç»´äº":"BO","åè¨ç¦çº³":"BW","å·´è¥¿":"BR","è±å±å°åº¦æ´é¢å°":"IO","æè±":"BN","æè±è¾¾é²è¨å°å½":"BN","ä¿å å©äº":"BG","å¸åºçº³æ³ç´¢":"BF","ç¼ç¸":"MM","å¸éè¿ª":"BI","æ¬åå¯¨":"KH","åéº¦é":"CM","ä½å¾è§":"CV","å¼æ¼":"KY","ä¸­éå±åå½":"CF","ä¹å¾":"TD","æºå©":"CL","ä¸­å½":"CN","å¥ä¼¦æ¯äº":"CO","ç§æ©ç½":"KM","åºåç¾¤å²":"CK","å¥æ¯è¾¾é»å ":"CR","åç½å°äº":"HR","å¤å·´":"CU","å¡æµ¦è·¯æ¯":"CY","æ·åå±åå½":"CZ","ç§ç¹è¿ªç¦":"CI","å¤ç±³å°¼å å±åå½":"DO","åææ°ä¸»å±åå½":"CD","ä¸¹éº¦":"DK","åå¸æ":"DJ","å¤ç±³å°¼å":"DM","ä¸å¸æ±¶":"TL","åçå¤å°":"EC","åå":"EG","è¨å°ç¦å¤":"SV","èµ¤éå åäº":"GQ","åç«ç¹éäº":"ER","ç±æ²å°¼äº":"EE","åå¡ä¿æ¯äº":"ET","é©¬å¶é¡¿å±åå½ï¼ååæ¯æå¤«ï¼":"MK","ç¦åå°ç¾¤å²":"FK","æ³ç½ç¾¤å²":"FO","å¯åç½å°¼è¥¿äºèé¦":"FM","ææµ":"FJ","è¬å°":"FI","æ³å½":"FR","æ³å±å­äºé£":"GF","æ³å±æ³¢å©å°¼è¥¿äº":"PF","å è¬":"GA","åæ¯äº":"GM","ä¹æ²»äºå·":"GE","å¾·å½":"DE","å çº³":"GH","ç´å¸ç½é":"GI","å¸è":"GR","æ ¼éµå°":"GL","æ ¼æçº³è¾¾":"GD","çå¾·ç½æ®å²":"GP","å³å²":"GU","å±å°é©¬æ":"GT","å åäº":"GN","å åäºæ¯ç»":"GW","å­äºé£":"GY","æµ·å°":"HT","æ´ªé½ææ¯":"HN","é¦æ¸¯":"HK","åçå©":"HU","å°å²":"IS","å°åº¦":"IN","å°åº¦å°¼è¥¿äº":"ID","ä¼æ":"IR","ä¼æå":"IQ","ç±å°å°":"IE","ä»¥è²å":"IL","æå¤§å©":"IT","çä¹°å ":"JM","æ¥æ¬":"JP","çº¦æ¦":"JO","è¯å°¼äº":"KE","åºéå·´æ¯":"KI","ç§å¨ç¹":"KW","åå°åæ¯æ¯å¦":"KG","èæ":"LA","æè±ç»´äº":"LV","é»å·´å«©":"LB","è±ç´¢æ":"LS","å©æ¯éäº":"LR","å©æ¯äº":"LY","åæ¯æ¦å£«ç»":"LI","ç«é¶å®":"LT","å¢æ£®å ¡":"LU","æ¾³é¨":"MO","é©¬è¾¾å æ¯å ":"MG","é©¬æç»´":"MW","é©¬æ¥è¥¿äº":"MY","é©¬å°ä»£å¤«":"MV","é©¬é":"ML","é©¬è³ä»":"MT","é©¬ç»å°ç¾¤å²":"MH","é©¬æå°¼å":"MQ","é©¬æå°¼åå²":"MQ","æ¯éå¡å°¼äº":"MR","æ¯éæ±æ¯":"MU","å¢¨è¥¿å¥":"MX","å¯åç½å°¼è¥¿äº":"FM","æ©å°å¤ç¦":"MD","æ©çº³å¥":"MC","èå¤":"MN","é»å±±":"ME","æ©æ´å¥":"MA","è«æ¡æ¯å":"MZ","çº³ç±³æ¯äº":"NA","çé²":"NR","å°¼æ³å°":"NP","è·å°":"NL","è·å±å®çåæ¯":"AN","æ°åéå¤å°¼äº":"NC","æ°è¥¿å°":"NZ","å°¼å æç":"NI","å°¼æ¥å°":"NE","å°¼æ¥å©äº":"NG","è¯ºç¦åå²":"NF","æé²":"KP","åé©¬éäºçº³ç¾¤å²":"MP","æªå¨":"NO","é¿æ¼":"OM","å·´åºæ¯å¦":"PK","å¸å³":"PW","å·´åæ¯å¦æ°ææåæºæ":"PS","å·´æ¿é©¬":"PA","å·´å¸äºæ°å åäº":"PG","å·´æå­":"PY","ä¸­åäººæ°å±åå½":"CN","ç§é²":"PE","è²å¾å®¾":"PH","ç®ç¹å¯æ©":"PN","æ³¢å°":"PL","è¡èç":"PT","æ³¢å¤é»å":"PR","å¡å¡å°":"QA","å°æ¹¾":"TW","ç±å°å°å±åå½":"IE","ç½é©¬å°¼äº":"RO","ä¿ç½æ¯":"RU","å¢æºè¾¾":"RW","çå°¼æ±ª":"RE","å£æµ·ä¼¦å¨":"SH","å£å¢è¥¿äº":"LC","å£ç®åå°åå¯åéå²":"PM","è¨æ©äº":"WS","å£é©¬åè¯º":"SM","æ²ç¹é¿æä¼¯":"SA","å¡åå å°":"SN","å¡å°ç»´äº":"RS","å¡èå°":"SC","å¡æå©æ":"SL","æ°å å¡":"SG","æ¯æ´ä¼å":"SK","æ¯æ´æå°¼äº":"SI","æç½é¨ç¾¤å²":"SB","ç´¢é©¬é":"SO","åé":"ZA","é©å½":"KR","è¥¿ç­ç":"ES","æ¯éå°å¡":"LK","èä¸¹":"SD","èéå":"SR","æ¯å¨å£«å°":"SZ","çå¸":"SE","çå£«":"CH","åå©äº":"SY","å¡ååæ¯å¦":"TJ","å¦æ¡å°¼äº":"TZ","æ³°å½":"TH","å¼æ¼ç¾¤å²":"KY","ç¾å±ç»´å°äº¬ç¾¤å²":"VI","å¤å¥":"TG","æåå³":"TK","æ±¤å ":"TO","çªå°¼æ¯":"TN","åè³å¶":"TR","ååºæ¼æ¯å¦":"TM","å¾ç¦å¢":"TV","é¿èé":"AE","ä¹å¹²è¾¾":"UG","ä¹åå°":"UA","é¿æä¼¯èåéé¿å½":"AE","è±å½":"GB","ä¹æå­":"UY","ä¹å¹å«åæ¯å¦":"UZ","ç¦åªé¿å¾":"VU","æ¢µèåå":"VA","å§åçæ":"VE","è¶å":"VN","ç¦å©æ¯åå¯å¾çº³ç¾¤å²":"WF","ä¹é¨":"YE","èµæ¯äº":"ZM","æ´¥å·´å¸é¦":"ZW","å¥¥å°ç¾¤å²":"AX","å®æç":"AG","å·´å¸è¾¾":"AG","å§åçæç»å©ç¦å°å±åå½":"VE","å¤æ°æç»å©ç»´äºå½":"BO","æ³¢æ¯å°¼äº":"BA","å¸ç»´å²":"BV","æ±¶è±":"BN","å¯ç§æ¯ç¾¤å²":"TC","å æ¿å¤§":"CA","å£è¯å²":"CX","è¯èååºæç¾¤å²":"CC","è¯èç¾¤å²":"CC","åæ":"CD","æé²æ°ä¸»äººæ°å±åå½":"KP","å¤ç±³å°¼å ":"DM","æ³ç½":"FO","æ³å½åé¨é¢å":"TF","å¯å¾çº³":"WF","æ ¼é²åäº":"GE","å¤§ä¸åé¢ ":"GB","æ ¼æçº³ä¸æ¯":"VC","æ ¹è¥¿å²":"GG","èµ«å¾·å²åéº¦å½å³ç¾¤å²":"HM","èµ«å¾·å²":"HM","é»å¡å¥ç»´é£":"BA","æå»·":"VA","ä¼æå±åå½":"IR","é©¬æ©å²":"IM","è±¡çæµ·å²¸":"CI","æ¬é©¬å»¶":"SJ","åè¨åæ¯å¦":"KZ","å¤§é©æ°å½":"KR","èæäººæ°æ°ä¸»å±åå½":"LA","é¿æä¼¯å©æ¯äºæ°ä¼å½":"LY","é©¬å¶é¡¿":"MK","é©¬å°ç»´çº³æ¯":"FK","é©¬éäºçº³":"MP","é©¬çº¦ç¹":"YT","éº¦å½å³ç¾¤å²":"HM","å¯åé":"PM","æ©å°å¤ç¦å±åå½":"MD","èç¹åæ ¼ç½":"ME","èç¹å¡æç¹":"MS","å°¼ç»´æ¯":"KN","åæé²":"KP","å·´åæ¯å¦":"PS","å·´åæ¯å¦é¢å":"PS","è¢«å é¢çå·´åæ¯å¦é¢å":"PS","æ®æè¥¿æ¯":"ST","æ°å å¡å±åå":"SG","ä¿ç½æ¯èé¦":"RU","å£å·´æ³°åç±³":"BL","å£èµ«åæ¿":"SH","å£èµ«åæ¿ï¼é¿æ£®æ¾å²åç¹éæ¯å¦è¾¾åºå°¼äº":"SH","å£åºè¨":"KN","å£é©¬ä¸":"MF","å£ç®åå°":"PM","å£ææ£®ç¹":"VC","å£å¤ç¾":"ST","åæ ¼é²åäº":"GS","åæ ¼é²åäºååæ¡å¨å¥ç¾¤å²":"GS","åæ¡å¨å¥ç¾¤å²":"GS","æ¯ç¦å°å·´å²":"SJ","æ¯ç¦å°å·´å²åæ¬é©¬å»¶å²":"SJ","é¿æä¼¯åå©äºå±åå½":"SY","å¦æ¡å°¼äºèåå±åå½":"TZ","å¤å·´å¥":"TT","ç¹ç«å°¼è¾¾":"TT","ç¹éæ¯å¦è¾¾åºå°¼äº":"SH","ç¹åæ¯ç¾¤å²":"TC","ç¾å½":"US","ç¾å©ååä¼å½":"US","æ¢µå¸å":"VA","ç¦å©æ¯":"WF","è¥¿æåæ":"EH","é¿æä¼¯åå²":"SA","ä½å¾è§ç¾¤å²":"CV","ç§ç§æ¯(å¥æ)ç¾¤å²":"CC","åæï¼æ°ä¸»å±åå½":"CD","æé²æ°ä¸»ä¸»ä¹äººæ°å±åå½":"KP","è¿ªæ":"AE","è±æ ¼å°":"GB","å·´åæ¯å¦è¢«å é¢å":"PS","æ³¢å©å°¼è¥¿äº":"PF","å£å·´ç¹å²":"BL","èæ ¼å°":"GB","å£å·´å°å¾·åç±³":"BL","åå¾·æ¡å¨å¥ç¾¤å²":"GS","æ¢µèååå½":"VA","ç»´å°äº¬ç¾¤å²":"VI","å¨å°å£«":"GB","äºæ´²":"142","ä¸­äº":"143","è¥¿äº":"145","æ¬§æ´²":"150","ä¸æ¬§":"151","åæ¬§":"154","è¥¿æ¬§":"155","æä¸ç¾æ´²":"419","ä¸ç":"001","éæ´²":"002","åç¾æ´²":"003","åç¾æ´²":"005","å¤§æ´æ´²":"009","è¥¿é":"011","ä¸­ç¾æ´²":"013","ä¸é":"014","åé":"015","ä¸­é":"017","åé¨éæ´²":"018","ç¾æ´²":"019","ç¾æ´²åé¨":"021","å åæ¯å°åº":"029","ä¸äº":"030","åäº":"034","ä¸åäº":"035","åæ¬§":"039","æ¾³å¤§æè¥¿äº":"053","ç¾æå°¼è¥¿äº":"054","å¯åç½å°¼è¥¿äºå°åº":"057","ç»å©å°¼è¥¿äº":"061","å®æçåå·´å¸è¾¾":"AG","è·å±å®çåæ¯ç¾¤å²":"AN","åææ´²":"AQ","æ³¢æ¯å°¼äºåé»å¡å¥ç»´é£":"BA","è·å°å åæ¯":"BQ","å¸ç»´ç¹å²":"BV","ç§ç§æ¯ç¾¤å²":"CC","åæï¼éï¼":"CD","åæï¼å¸ï¼":"CG","åå©çé¡¿å²":"CP","åºæç´¢":"CW","è¿ªæå è¥¿äºå²":"DG","ä¼è¾¾åæ¢å©å©äº":"EA","æ¬§ç":"EU","åä¹æ²»äºå²ååæ¡å¨é½ç¾¤å²":"GS","ä¸­å½é¦æ¸¯ç¹å«è¡æ¿åº":"HK","èµ«å¾·ä¸éº¦ååçº³ç¾¤å²":"HM","å çº³å©ç¾¤å²":"IC","æ¼å²":"IM","æ³½è¥¿å²":"JE","å£åºè¨åå°¼ç»´æ¯":"KN","é»å±±å±åå½":"ME","æ³å±å£é©¬ä¸":"MF","ä¸­å½æ¾³é¨ç¹å«è¡æ¿åº":"MO","èå¡æç¹":"MS","çº½å":"NU","å£ç®åå°åå¯åéç¾¤å²":"PM","ç®ç¹å¯æ©ç¾¤å²":"PN","å¤§æ´æ´²è¾¹è¿ç¾¤å²":"QO","æ¯ç¦å°å·´ç¹åæ¬é©¬å»¶":"SJ","åèä¸¹":"SS","å£å¤ç¾åæ®æè¥¿æ¯":"ST","è·å±å£é©¬ä¸":"SX","ç¹éæ¯å¦-è¾¾åºå°¼äºç¾¤å²":"TA","ç¹åæ¯åå¯ç§æ¯ç¾¤å²":"TC","æ³å±åé¨é¢å":"TF","çªå°¼è¥¿äº":"TN","ç¹ç«å°¼è¾¾åå¤å·´å¥":"TT","ç¾å½è¾¹è¿å°å²":"UM","æ¢µèå":"VA","å£ææ£®ç¹åæ ¼æçº³ä¸æ¯":"VC","è±å±ç»´äº¬ç¾¤å²":"VG","ç¾å±ç»´äº¬ç¾¤å²":"VI","ç¦å©æ¯åå¯å¾çº³":"WF","æªç¥å°åº":"ZZ"};
ilib.data.ctrynames_zh_Hant = {"generated":false,"é¿å¯æ±":"AF","é¿ç¾å·´å°¼äº":"AL","é¿ç¾åå©äº":"DZ","ç¾å±¬è©æ©äº":"AS","å®éç¾":"AD","å®å¥æ":"AO","å®å­æ":"AI","å®æçåå·´ä½é":"AG","é¿æ ¹å»·":"AR","äºç¾å°¼äº":"AM","é¿é­¯å·´":"AW","é¿æ£®æ¾":"SH","æ¾³å¤§å©äº":"AU","å¥§å°å©":"AT","é¿å¡æç":"AZ","è±å±¬ç¶­ç¾äº¬ç¾¤å³¶":"VG","å·´åé¦¬":"BS","å·´æ":"BH","å­å æå":"BD","å·´å·´å¤æ¯":"BB","ç½ä¿ç¾æ¯":"BY","æ¯å©æ":"BE","ä¼¯å©è²":"BZ","è²å¯§":"BJ","ç¾æå¤§":"BM","ä¸ä¸¹":"BT","ç»å©ç¶­äº":"BO","æ³¢æ¯å°¼äºåé»å¡å¥ç¶­é£":"BA","åè¨ç¦ç´":"BW","å·´è¥¿":"BR","è±å±¬å°åº¦æ´é å°":"IO","æ±¶è":"BN","æ±¶èéé­¯è©è­å":"BN","ä¿å å©äº":"BG","å¸åºç´æ³ç´¢":"BF","ç·¬ç¸":"MM","å¸éè¿ª":"BI","æ¬åå¯¨":"KH","åéº¥é":"CM","ä½å¾è§":"CV","éæ¼":"KY","ä¸­éå±åå":"CF","ä¹å¾":"TD","æºå©":"CL","ä¸­å":"CN","å¥å«æ¯äº":"CO","ç§æ©ç¾":"KM","åº«åç¾¤å³¶":"CK","å¥æ¯å¤§é»å ":"CR","åç¾å°äº":"HR","å¤å·´":"CU","å¡æµ¦è·¯æ¯":"CY","æ·åå±åå":"CZ","ç§ç¹è¿ªç¦":"CI","å¤ç±³å°¼å å±åå":"CD","åææ°ä¸»å±åå":"CD","ä¸¹éº¥":"DK","åå¸æ":"DJ","å¤ç±³å°¼å":"DM","æ±å¸æ±¶":"TL","åçå¤ç¾":"EC","åå":"EG","è©ç¾ç¦å¤":"SV","èµ¤éå¹¾å§äº":"GQ","åç«ç¹éäº":"ER","ææ²å°¼äº":"EE","è¡£ç´¢æ¯äº":"ET","é¦¬å¶é å±ååï¼ååæ¯æå¤«ï¼":"MK","ç¦åè­ç¾¤å³¶":"FK","æ³ç¾ç¾¤å³¶":"FO","å¯åç¾å°¼è¥¿äºè¯é¦":"FM","ææ¿":"FJ","è¬è­":"FI","æ³å":"FR","æ³å±¬å­äºé£":"GF","æ³å±¬æ³¢å©å°¼è¥¿äº":"PF","å è¬":"GA","å²¡æ¯äº":"GM","å¬æ²»äºå·":"GE","å¾·å":"DE","å ç´":"GH","ç´å¸ç¾é":"GI","å¸è":"GR","æ ¼éµè­":"GL","æ ¼æç´é":"GD","çå¾·ç¾æ®å³¶":"GP","éå³¶":"GU","å±å°é¦¬æ":"GT","ç¿å§äº":"GN","å¹¾å§äºæ¯ç´¹":"GW","å­äºé£":"GY","æµ·å°":"HT","å®é½ææ¯":"HN","é¦æ¸¯":"HK","åçå©":"HU","å°å³¶":"IS","å°åº¦":"IN","å°åº¦å°¼è¥¿äº":"ID","ä¼æ":"IR","ä¼æå":"IQ","æç¾è­":"IE","ä»¥è²å":"IL","ç¾©å¤§å©":"IT","çè²·å ":"JM","æ¥æ¬":"JP","ç´æ¦":"JO","è¯å°¼äº":"KE","åºè£å·´æ¯":"KI","ç§å¨ç¹":"KW","åç¾åæ¯æ¯å¦":"KG","èæ¾":"LA","æè«ç¶­äº":"LV","é»å·´å«©":"LB","èç´¢æ":"LS","å©æ¯éäº":"LR","å©æ¯äº":"LY","åæ¯æ¦å£«ç»":"LI","ç«é¶å®":"LT","ç§æ£®å ¡":"LU","æ¾³é":"MO","é¦¬éå æ¯å ":"MG","é¦¬æç¶­":"MW","é¦¬ä¾è¥¿äº":"MY","é¦¬ç¾å°å¤«":"MV","é¦¬é":"ML","é¦¬è³ä»":"MT","é¦¬ç´¹ç¾ç¾¤å³¶":"MH","é¦¬æå°¼å":"MQ","é¦¬æå°¼åå³¶":"MQ","æ¯éå¡å°¼äº":"MR","æ¯éæ±æ¯":"MU","å¢¨è¥¿å¥":"MX","å¯åç¾å°¼è¥¿äº":"FM","æ©ç¾å¤ç¦":"MD","æ©ç´å¥":"MC","èå¤":"MN","é»å±±":"ME","æ©æ´å¥":"MA","è«æ¡æ¯å":"MZ","ç´ç±³æ¯äº":"NA","çé­¯":"NR","å°¼æ³ç¾":"NP","è·è­":"NL","è·å±¬å®çåæ¯":"AN","æ°åè£å¤å°¼äº":"NC","æ°è¥¿è­":"NZ","å°¼å æç":"NI","å°¼æ¥ç¾":"NE","å°¼æ¥å©äº":"NG","è«¾ç¦åå³¶":"NF","æé®®":"KR","åé¦¬éäºç´ç¾¤å³¶":"MP","æªå¨":"NO","é¿æ¼":"OM","å·´åºæ¯å¦":"PK","å¸å":"PW","å·´åæ¯å¦æ°ææ¬åæ©æ§":"PS","å·´æ¿é¦¬":"PA","å·´å¸äºæ°ç¿å§äº":"PG","å·´æå­":"PY","ä¸­è¯äººæ°å±åå":"CN","ç§é­¯":"PE","è²å¾è³":"PH","ç®ç¹è¯":"PN","æ³¢è­":"PL","è¡èç":"PT","æ³¢å¤é»å":"PR","å¡å¡ç¾":"QA","ä¸­è¯æ°å":"TW","æç¾è­å±åå":"IE","ç¾é¦¬å°¼äº":"RO","ä¿ç¾æ¯":"RU","ç§å®é":"RW","çå°¼æ±ª":"RE","èæµ·å«å¨":"SH","èåºè¨åå°¼ç¶­æ¯":"KN","èç§è¥¿äº":"LC","èç®åç¾åå¯åéå³¶":"PM","èææ£®ç¹åæ ¼æç´ä¸æ¯":"VC","è©æ©äº":"WS","èé¦¬åè«¾":"SM","æ²çå°é¿æä¼¯":"SA","å¡å§å ç¾":"SN","å¡ç¾ç¶­äº":"RS","å¡èç¾":"SC","å¡æå©æ":"SL","æ°å å¡":"SG","æ¯æ´ä¼å":"SK","æ¯æ´æå°¼äº":"SI","æç¾éç¾¤å³¶":"SB","ç´¢é¦¬å©äº":"SO","åé":"ZA","éå":"KR","è¥¿ç­ç":"ES","æ¯éè­å¡":"LK","èä¸¹":"SD","èéå":"SR","æ¯å¨å£«è­":"SZ","çå¸":"SE","çå£«":"CH","æå©äº":"SY","èå¤ç¾åæ®æè¥¿æ¯":"ST","èºç£":"TW","å¡ååæ¯å¦":"TJ","å¦æ¡å°¼äº":"TZ","æ³°å":"TH","éæ¼ç¾¤å³¶":"KY","ç¾å±¬ç¶­ç¾äº¬ç¾¤å³¶":"VI","å¤å¥":"TG","æåå":"TK","æ¹¯å ":"TO","ç¹ç«å°¼éåå¤å·´å¥":"TT","çªå°¼æ¯":"TN","åè³å¶":"TR","ååº«æ¼æ¯å¦":"TM","åç¦ç§":"TV","é¿è¯é":"AE","çå¹²é":"UG","çåè­":"UA","é¿æä¼¯è¯åéé·å":"AE","è±å":"GB","çæå­":"UY","çè²å¥åæ¯å¦":"UZ","ç¦åªé¿å":"VU","æ¢µèå²¡å":"VA","å§å§çæ":"VE","è¶å":"VN","ç¦å©æ¯åå¯åç´ç¾¤å³¶":"WF","ä¹é":"YE","è´æ¯äº":"ZM","æ´¥å·´å¸é":"ZW","å¥§è­ç¾¤å³¶":"AX","å®æç":"AG","é¿æ£®é¬å³¶":"SH","å·´ä½é":"AG","å§å§çæç»å©ç¦ç¾å±åå":"VE","å¤æ°æç»å©ç¶­äºå":"BO","æ³¢æ¯å°¼äº":"BA","å¸ç¶­å³¶":"BV","å±ç§æ¯ç¾¤å³¶":"TC","å æ¿å¤§":"CA","èèªå³¶":"CX","è¯èååºæç¾¤å³¶":"CC","è¯èç¾¤å³¶":"CC","åæ":"CD","å¥æ¯éé»å ":"CR","æé®®æ°ä¸»äººæ°å±åå":"KP","å¤ç±³å°¼å ":"DM","åå¡ä¿æ¯äº":"ET","æ³ç¾":"FO","æ³ååé¨é å":"TF","å¯åç´":"WF","æ ¼é­¯åäº":"GE","å¤§ä¸åé¡":"GB","æ ¼æç´ä¸æ¯":"VC","æ ¹è¥¿å³¶":"GG","å¹¾å§äº":"GN","èµ«å¾·å³¶åéº¥ç¶åç¾¤å³¶":"HM","èµ«å¾·å³¶":"HM","é»å¡å¥ç¶­é£":"BA","æå»·":"VA","æ´ªé½ææ¯":"HN","ä¼æå±åå":"IR","é¦¬æ©å³¶":"IM","æå¤§å©":"IT","è±¡çæµ·å²¸":"CI","æé¦¬å»¶":"SJ","åè©åæ¯å¦":"KZ","åºéå·´æ¯":"KI","å¤§éæ°å":"KR","èæ¾äººæ°æ°ä¸»å±åå":"LA","é¿æä¼¯å©æ¯äºæ°ç¾å":"LY","é¦¬å¶é ":"MK","é¦¬ç¾ä»£å¤«":"MV","é¦¬ç¾ç¶­ç´æ¯":"FK","é¦¬éäºç´":"MP","é¦¬ç´ç¹":"YT","éº¥ç¶åç¾¤å³¶":"HM","å¯åé":"PM","æ©ç¾å¤ç¦å±åå":"MD","èç¹å§æ ¼ç¾":"ME","èç¹å¡æç¹":"MS","å°¼ç¶­æ¯":"KN","æ°åéå¤å°¼äº":"NC","åæé®®":"KP","å·´åæ¯å¦":"PS","å·´åæ¯å¦é å":"PS","è¢«ä½é çå·´åæ¯å¦é å":"PS","å·´å¸äºæ°å¹¾å§äº":"PG","ç®ç¹å±æ©":"PN","æ®æè¥¿æ¯":"ST","æ°å å¡å±åå":"SG","ä¿ç¾æ¯è¯é¦":"RU","ç§æºé":"RW","èå·´æ³°åç±³":"BL","èèµ«åæ¿":"SH","èèµ«åæ¿ï¼é¿æ£®é¬å³¶åç¹éæ¯å¦éåº«å°¼äº":"SH","èåºè¨":"KN","èé¦¬ä¸":"MF","èç®åç¾":"PM","èææ£®ç¹":"VC","èå¤ç¾":"ST","æ²ç¹é¿æä¼¯":"SA","ç´¢é¦¬é":"SO","åæ ¼é­¯åäº":"GS","åæ ¼é­¯åäºååæ¡å¨å¥ç¾¤å³¶":"GS","åæ¡å¨å¥ç¾¤å³¶":"GS","æ¯ç¦ç¾å·´å³¶":"SJ","æ¯ç¦ç¾å·´å³¶åæé¦¬å»¶å³¶":"SJ","æå©äº":"SY","é¿æä¼¯æå©äºå±åå":"SY","å°ç£":"TW","å¦æ¡å°¼äºè¯åå±åå":"TZ","å¤å·´å¥":"TT","ç¹ç«å°¼é":"TT","ç¹éæ¯å¦éåº«å°¼äº":"SH","ç¹åæ¯åå±ç§æ¯ç¾¤å³¶":"TC","ç¹åæ¯ç¾¤å³¶":"TC","ç¾å":"US","æ¢µå¸å²¡":"VA","ç¦å©æ¯":"WF","è¥¿æåæ":"EH"};
ilib.data.ctrynames_zu = {"i-Asia":"142","i-Central Asia":"143","e-Western Asia":"145","i-Europe":"150","e-Eastern Europe":"151","e-Northern Europe":"154","e-Western Europe":"155","i-Latin America":"419","Umhlaba":"001","i-Africa":"002","e-North America":"003","i-South America":"005","i-Oceania":"009","e-Western Africa":"011","i-Central America":"013","e-Eastern Africa":"014","e-Northern Africa":"015","e-Middle Africa":"017","e-Southern Africa":"018","Americas":"019","e-Northern America":"021","i-Caribbean":"029","e-Eastern Asia":"030","e-Southern Asia":"034","e-South-Eastern Asia":"035","e-Southern Europe":"039","I-Australasia":"053","i-Melanesia":"054","e-Micronesian Region":"057","i-Polynesia":"061","i-Ascension Island":"AC","i-Andorra":"AD","i-United Arab Emirates":"AE","i-Afghanistan":"AF","i-Antigua and Barbuda":"AG","i-Anguilla":"AI","i-Albania":"AL","i-Armenia":"AM","i-Netherlands Antilles":"AN","i-Angola":"AO","i-Antarctica":"AQ","i-Argentina":"AR","i-American Samoa":"AS","i-Austria":"AT","i-Australia":"AU","i-Aruba":"AW","i-Ãland Islands":"AX","i-Azerbaijan":"AZ","i-Bosnia ne-Herzegovina":"BA","i-Barbados":"BB","i-Bangladesh":"BD","i-Belgium":"BE","i-Burkina Faso":"BF","i-Bulgaria":"BG","i-Bahrain":"BH","i-Burundi":"BI","i-Benin":"BJ","i-Saint BarthÃ©lemy":"BL","i-Bermuda":"BM","i-Brunei":"BN","i-Bolivia":"BO","I-Caribbean Netherlands":"BQ","i-Brazil":"BR","i-Bahamas":"BS","i-Bhutan":"BT","i-Bouvet Island":"BV","i-Botswana":"BW","i-Belarus":"BY","i-Belize":"BZ","i-Canada":"CA","i-Cocos (Keeling) Islands":"CC","e-Congo - Kinshasa":"CD","i-Central African Republic":"CF","e-Congo - Brazzaville":"CG","i-Switzerland":"CH","i-CÃ´te dâIvoire":"CI","i-Cook Islands":"CK","i-Chile":"CL","i-Cameroon":"CM","i-China":"CN","i-Colombia":"CO","i-Clipperton Island":"CP","i-Costa Rica":"CR","i-Cuba":"CU","i-Cape Verde":"CV","I-CuraÃ§ao":"CW","i-Christmas Island":"CX","i-Cyprus":"CY","i-Czech Republic":"CZ","i-Germany":"DE","e-Diego Garcia":"DG","i-Djibouti":"DJ","i-Denmark":"DK","i-Dominica":"DM","i-Dominican Republic":"DO","i-Algeria":"DZ","i-Cueta ne-Melilla":"EA","i-Ecuador":"EC","i-Estonia":"EE","i-Egypt":"EG","i-Western Sahara":"EH","i-Eritrea":"ER","i-Spain":"ES","i-Ethiopia":"ET","i-European Union":"EU","i-Finland":"FI","i-Fiji":"FJ","i-Falkland Islands":"FK","i-Micronesia":"FM","i-Faroe Islands":"FO","i-France":"FR","i-Gabon":"GA","i-United Kingdom":"GB","i-Grenada":"GD","i-Georgia":"GE","isi-French Guiana":"GF","I-Guernsey":"GG","i-Ghana":"GH","i-Gibraltar":"GI","i-Greenland":"GL","i-Gambia":"GM","i-Guinea":"GN","i-Guadeloupe":"GP","i-Equatorial Guinea":"GQ","i-Greece":"GR","i-South Georgia ne-South Sandwich Islands":"GS","i-Guatemala":"GT","i-Guam":"GU","i-Guinea-Bissau":"GW","i-Guyana":"GY","e-Hong Kong SAR China":"HK","i-Heard Island ne-McDonald Islands":"HM","i-Honduras":"HN","i-Croatia":"HR","i-Haiti":"HT","i-Hungary":"HU","i-Canary Islands":"IC","i-Indonesia":"ID","i-Ireland":"IE","i-Israel":"IL","i-Isle of Man":"IM","i-India":"IN","i-British Indian Ocean Territory":"IO","i-Iraq":"IQ","i-Iran":"IR","i-Iceland":"IS","i-Italy":"IT","isi-Jersey":"JE","i-Jamaica":"JM","i-Jordan":"JO","i-Japan":"JP","i-Kenya":"KE","i-Kyrgyzstan":"KG","i-Cambodia":"KH","i-Kiribati":"KI","i-Comoros":"KM","i-Saint Kitts ne-Nevis":"KN","i-North Korea":"KP","i-South Korea":"KR","i-Kuwait":"KW","i-Cayman Islands":"KY","i-Kazakhstan":"KZ","i-Laos":"LA","i-Lebanon":"LB","i-Saint Lucia":"LC","i-Liechtenstein":"LI","i-Sri Lanka":"LK","i-Liberia":"LR","i-Lesotho":"LS","i-Lithuania":"LT","i-Luxembourg":"LU","i-Latvia":"LV","i-Libya":"LY","i-Morocco":"MA","i-Monaco":"MC","i-Moldova":"MD","i-Montenegro":"ME","i-Saint Martin":"MF","i-Madagascar":"MG","i-Marshall Islands":"MH","I-Macedonia":"MK","i-Mali":"ML","e-Myanmar [Burma]":"MM","i-Mongolia":"MN","i-Macau SAR China":"MO","i-Northern Mariana Islands":"MP","i-Martinique":"MQ","i-Mauritania":"MR","i-Montserrat":"MS","i-Malta":"MT","i-Mauritius":"MU","i-Maldives":"MV","i-Malawi":"MW","i-Mexico":"MX","i-Malaysia":"MY","i-Mozambique":"MZ","i-Namibia":"NA","i-New Caledonia":"NC","i-Niger":"NE","i-Norfolk Island":"NF","i-Nigeria":"NG","i-Nicaragua":"NI","i-Netherlands":"NL","i-Norway":"NO","i-Nepal":"NP","i-Nauru":"NR","i-Niue":"NU","i-New Zealand":"NZ","i-Oman":"OM","i-Panama":"PA","i-Peru":"PE","i-French Polynesia":"PF","i-Papua New Guinea":"PG","i-Philippines":"PH","i-Pakistan":"PK","i-Poland":"PL","i-Saint Pierre kanye ne-Miquelon":"PM","i-Pitcairn Islands":"PN","i-Puerto Rico":"PR","i-Palestinian Territories":"PS","i-Portugal":"PT","i-Palau":"PW","i-Paraguay":"PY","i-Qatar":"QA","i-Outlying Oceania":"QO","i-RÃ©union":"RE","i-Romania":"RO","i-Serbia":"RS","i-Russia":"RU","i-Rwanda":"RW","i-Saudi Arabia":"SA","i-Solomon Islands":"SB","i-Seychelles":"SC","i-Sudan":"SD","i-Sweden":"SE","i-Singapore":"SG","i-Saint Helena":"SH","i-Slovenia":"SI","I-Svalbard ne-Jan Mayen":"SJ","i-Slovakia":"SK","i-Sierra Leone":"SL","i-San Marino":"SM","i-Senegal":"SN","i-Somalia":"SO","i-Suriname":"SR","Iningizimu Sudan":"SS","i-SÃ£o TomÃ© kanye ne-PrÃ­ncipe":"ST","i-El Salvador":"SV","I-Sint Maarten":"SX","i-Syria":"SY","i-Swaziland":"SZ","i-Tristan da Cunha":"TA","i-Turks and Caicos Islands":"TC","i-Chad":"TD","e-French Southern Territories":"TF","i-Togo":"TG","i-Thailand":"TH","i-Tajikistan":"TJ","i-Tokelau":"TK","i-Timor-Leste":"TL","i-Turkmenistan":"TM","i-Tunisia":"TN","i-Tonga":"TO","i-Turkey":"TR","i-Trinidad ne-Tobago":"TT","i-Tuvalu":"TV","i-Taiwan":"TW","i-Tanzania":"TZ","i-Ukraine":"UA","i-Uganda":"UG","e-U.S. Minor Outlying Islands":"UM","i-United States":"US","i-Uruguay":"UY","i-Uzbekistan":"UZ","i-Vatican City":"VA","i-Saint Vincent ne-Grenadines":"VC","i-Venezuela":"VE","i-British Virgin Islands":"VG","i-U.S. Virgin Islands":"VI","i-Vietnam":"VN","i-Vanuatu":"VU","i-Wallis ne-Futuna":"WF","i-Samoa":"WS","i-Yemen":"YE","i-Mayotte":"YT","iNingizimu Afrika":"ZA","i-Zambia":"ZM","i-Zimbabwe":"ZW","Isifunda esingaziwa":"ZZ"};
/**
 * addressprs.js - Represent a mailing address
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*globals console RegExp */

/* !depends 
ilibglobal.js 
locale.js 
ctype.isideo.js 
ctype.isascii.js
ctype.isdigit.js
*/

// !data address countries nativecountries ctrynames

/**
 * @class
 * Create a new Address instance and parse a physical address.<p>
 * 
 * This function parses a physical address written in a free-form string. 
 * It returns an object with a number of properties from the list below 
 * that it may have extracted from that address.<p>
 * 
 * The following is a list of properties that the algorithm will return:<p>
 * 
 * <ul>
 * <li><i>streetAddress</i>: The street address, including house numbers and all.
 * <li><i>locality</i>: The locality of this address (usually a city or town). 
 * <li><i>region</i>: The region where the locality is located. In the US, this
 * corresponds to states. In other countries, this may be provinces,
 * cantons, prefectures, etc. In some smaller countries, there are no
 * such divisions.
 * <li><i>postalCode</i>: Country-specific code for expediting mail. In the US, 
 * this is the zip code.
 * <li><i>country</i>: The country of the address.
 * <li><i>countryCode</i>: The ISO 3166 2-letter region code for the destination
 * country in this address.
 * </ul> 
 * 
 * The above properties will not necessarily appear in the instance. For 
 * any individual property, if the free-form address does not contain 
 * that property or it cannot be parsed out, the it is left out.<p>
 * 
 * The options parameter may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale or localeSpec to use to parse the address. If not 
 * specified, this function will use the current ilib locale
 * 
 * <li><i>onLoad</i> - a callback function to call when the address info for the
 * locale is fully loaded and the address has been parsed. When the onLoad 
 * option is given, the address object 
 * will attempt to load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * When an address cannot be parsed properly, the entire address will be placed
 * into the streetAddress property.<p>
 * 
 * When the freeformAddress is another ilib.Address, this will act like a copy
 * constructor.<p>
 * 
 * Depends directive: !depends addressprs.js
 * 
 * @constructor
 * @param {string|ilib.Address} freeformAddress free-form address to parse, or a
 * javascript object containing the fields
 * @param {Object} options options to the parser
 */
ilib.Address = function (freeformAddress, options) {
	var address;

	if (!freeformAddress) {
		return undefined;
	}

	this.sync = true;
	this.loadParams = {};
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (typeof(options.sync) !== 'undefined') {
			this.sync = (options.sync == true);
		}
		
		if (options.loadParams) {
			this.loadParams = options.loadParams;
		}
	}

	this.locale = this.locale || new ilib.Locale();
	// initialize from an already parsed object
	if (typeof(freeformAddress) === 'object') {
		/**
		 * The street address, including house numbers and all.
		 * @expose
		 * @type {string|undefined} 
		 */
		this.streetAddress = freeformAddress.streetAddress;
		/**
		 * The locality of this address (usually a city or town).
		 * @expose
		 * @type {string|undefined} 
		 */
		this.locality = freeformAddress.locality;
		/**
		 * The region (province, canton, prefecture, state, etc.) where the address is located.
		 * @expose
		 * @type {string|undefined} 
		 */
		this.region = freeformAddress.region;
		/**
		 * Country-specific code for expediting mail. In the US, this is the zip code.
		 * @expose
		 * @type {string|undefined} 
		 */
		this.postalCode = freeformAddress.postalCode;
		/**
		 * Optional city-specific code for a particular post office, used to expidite
		 * delivery.
		 * @expose
		 * @type {string|undefined} 
		 */
		this.postOffice = freeformAddress.postOffice;
		/**
		 * The country of the address.
		 * @expose
		 * @type {string|undefined}
		 */
		this.country = freeformAddress.country;
		if (freeformAddress.countryCode) {
			/**
			 * The 2 or 3 letter ISO 3166 region code for the destination country in this address.
			 * @expose
			 * @type {string} 
			 * 
			 */
			this.countryCode = freeformAddress.countryCode;
		}
		if (freeformAddress.format) {
			/**
			 * @protected
			 * @type {string}
			 */
			this.format = freeformAddress.format;
		}
		return this;
	}

	address = freeformAddress.replace(/[ \t\r]+/g, " ").trim();
	address = address.replace(/[\s\n]+$/, "");
	address = address.replace(/^[\s\n]+/, "");
	//console.log("\n\n-------------\nAddress is '" + address + "'");
	
	this.lines = address.split(/[,ï¼\n]/g);
	this.removeEmptyLines(this.lines);
	
	ilib.Address.shared = ilib.Address.shared || {}; 
	if (typeof(ilib.Address.ctry) === 'undefined') {
		ilib.Address.ctry = {}; // make sure not to conflict with the address info
	}
	ilib.CType.isAscii._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {
		ilib.CType.isIdeo._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {
			ilib.CType.isDigit._init(this.sync, this.loadParams, /** @type {function(*)|undefined} */ ilib.bind(this, function() {
				if (typeof(ilib.data.nativecountries) === 'undefined') {
					ilib.loadData({
						name: "nativecountries.json", // countries in their own language 
						locale: "-", // only need to load the root file 
						sync: this.sync, 
						loadParams: this.loadParams, 
						callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(nativecountries) {
							ilib.data.nativecountries = nativecountries;
							this._loadCountries(options && options.onLoad);
						})
					});
				} else {
					this._loadCountries(options && options.onLoad);
				}
			}));
		}));
	}));
};

/** @protected */
ilib.Address.prototype = {
	/**
	 * @private
	 */
	_loadCountries: function(onLoad) {
		if (typeof(ilib.data.countries) === 'undefined') {
			ilib.loadData({
				name: "countries.json", // countries in English
				locale: "-", // only need to load the root file
				sync: this.sync, 
				loadParams: this.loadParams, 
				callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(countries) {
					ilib.data.countries = countries;
					this._loadCtrynames(onLoad);
				})
			});
		} else {
			this._loadCtrynames(onLoad);
		}
	},

	/**
	 * @private
	 */
	_loadCtrynames: function(onLoad) {
		ilib.loadData({
			name: "ctrynames.json", 
			object: ilib.Address.ctry, 
			locale: this.locale, 
			sync: this.sync, 
			loadParams: this.loadParams, 
			callback: /** @type function(Object=):undefined */ ilib.bind(this, /** @type function() */ function(ctrynames) {
				this._determineDest(ctrynames, onLoad);
			})
		});
	},
	
	/**
	 * @private
	 * @param {Object?} ctrynames
	 */
	_findDest: function (ctrynames) {
		var match;
		
		for (var countryName in ctrynames) {
			if (countryName && countryName !== "generated") {
				// find the longest match in the current table
				// ctrynames contains the country names mapped to region code
				// for efficiency, only test for things longer than the current match
				if (!match || match.text.length < countryName.length) {
					var temp = this._findCountry(countryName);
					if (temp) {
						match = temp;
						this.country = match.text;
						this.countryCode = ctrynames[countryName];
					}
				}
			}
		}
		return match;
	},
	
	/**
	 * @private
	 * @param {Object?} localizedCountries
	 * @param {function(ilib.Address):undefined} callback
	 */
	_determineDest: function (localizedCountries, callback) {
		var match;
		
		/*
		 * First, find the name of the destination country, as that determines how to parse
		 * the rest of the address. For any address, there are three possible ways 
		 * that the name of the country could be written:
		 * 1. In the current language
		 * 2. In its own native language
		 * 3. In English
		 * We'll try all three.
		 */
		var tables = [];
		if (localizedCountries) {
			tables.push(localizedCountries);
		}
		tables.push(ilib.data.nativecountries);
		tables.push(ilib.data.countries);
		
		for (var i = 0; i < tables.length; i++) {
			match = this._findDest(tables[i]);
			
			if (match) {
				this.lines[match.line] = this.lines[match.line].substring(0, match.start) + this.lines[match.line].substring(match.start + match.text.length);

				this._init(callback);
				return;
			}
		}
		
		// no country, so try parsing it as if we were in the same country
		this.country = undefined;
		this.countryCode = this.locale.getRegion();
		this._init(callback);
	},

	/**
	 * @private
	 * @param {function(ilib.Address):undefined} callback
	 */
	_init: function(callback) {
		ilib.loadData({
			object: ilib.Address, 
			locale: new ilib.Locale(this.countryCode), 
			name: "address.json", 
			sync: this.sync, 
			loadParams: this.loadParams,
			callback: /** @type function(Object=):undefined */ ilib.bind(this, function(info) {
				if (!info || ilib.isEmpty(info)) {
					// load the "unknown" locale instead
					ilib.loadData({
						object: ilib.Address, 
						locale: new ilib.Locale("XX"), 
						name: "address.json", 
						sync: this.sync, 
						loadParams: this.loadParams,
						callback: /** @type function(Object=):undefined */ ilib.bind(this, function(info) {
							this.info = info;
							this._parseAddress();
							if (typeof(callback) === 'function') {
								callback(this);
							}	
						})
					});
				} else {
					this.info = info;
					this._parseAddress();
					if (typeof(callback) === 'function') {
						callback(this);
					}
				}
			})
		});
	},

	/**
	 * @private
	 */
	_parseAddress: function() {
		// clean it up first
		var i, 
			asianChars = 0, 
			latinChars = 0,
			startAt,
			infoFields,
			field,
			pattern,
			matchFunction,
			match,
			fieldNumber;
		
		// for locales that support both latin and asian character addresses, 
		// decide if we are parsing an asian or latin script address
		if (this.info && this.info.multiformat) {
			for (var j = 0; j < this.lines.length; j++) {
				var line = new ilib.String(this.lines[j]);
				var it = line.charIterator();
				while (it.hasNext()) {
					var c = it.next();
					if (ilib.CType.isIdeo(c) || ilib.CType.withinRange(c, "Hangul")) {
						asianChars++;
					} else if (ilib.CType.isAscii(c) && !ilib.CType.isDigit(c)) {
						latinChars++;
					}
				}
			}
			
			this.format = (asianChars >= latinChars) ? "asian" : "latin";
			startAt = this.info.startAt[this.format];
			infoFields = this.info.fields[this.format];
			// //console.log("multiformat locale: format is now " + this.format);
		} else {
			startAt = (this.info && this.info.startAt) || "end";
			infoFields = this.info.fields;
		}
		this.compare = (startAt === "end") ? this.endsWith : this.startsWith;
		
		//console.log("this.lines is: " + JSON.stringify(this.lines));
		
		for (i = 0; i < infoFields.length && this.lines.length > 0; i++) {
			/** @type {{name:string, line:string, pattern:(string|Array.<string>), matchGroup:number}} */
			field = infoFields[i];
			this.removeEmptyLines(this.lines);
			//console.log("Searching for field " + field.name);
			if (field.pattern) {
				if (typeof(field.pattern) === 'string') {
					pattern = new RegExp(field.pattern, "img");
					matchFunction = this.matchRegExp;
				} else {
					pattern = field.pattern;
					matchFunction = this.matchPattern;
				}
					
				switch (field.line) {
				case 'startAtFirst':
					for (fieldNumber = 0; fieldNumber < this.lines.length; fieldNumber++) {
						match = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);
						if (match) {
							break;
						}
					}
					break;
				case 'startAtLast':
					for (fieldNumber = this.lines.length-1; fieldNumber >= 0; fieldNumber--) {
						match = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);
						if (match) {
							break;
						}
					}
					break;
				case 'first':
					fieldNumber = 0;
					match = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);
					break;
				case 'last':
				default:
					fieldNumber = this.lines.length - 1;
					match = matchFunction(this, this.lines[fieldNumber], pattern, field.matchGroup, startAt);
					break;
				}
				if (match) {
					// //console.log("found match for " + field.name + ": " + JSON.stringify(match));
					// //console.log("remaining line is " + match.line);
					this.lines[fieldNumber] = match.line;
					this[field.name] = match.match;
				}
			} else {
				// if nothing is given, default to taking the whole field
				this[field.name] = this.lines.splice(fieldNumber,1)[0].trim();
				//console.log("typeof(this[field.name]) is " + typeof(this[field.name]) + " and value is " + JSON.stringify(this[field.name]));
			}
		}
			
		// all the left overs go in the street address field
		this.removeEmptyLines(this.lines);
		if (this.lines.length > 0) {
			//console.log("this.lines is " + JSON.stringify(this.lines) + " and splicing to get streetAddress");
			// Korea uses spaces between words, despite being an "asian" locale
			var joinString = (this.info.joinString && this.info.joinString[this.format]) || ((this.format && this.format === "asian") ? "" : ", ");
			this.streetAddress = this.lines.join(joinString).trim();
		}
		
		this.lines = undefined;
		//console.log("final result is " + JSON.stringify(this));
	},
	
	/**
	 * @protected
	 * Find the named country either at the end or the beginning of the address.
	 */
	_findCountry: function(name) {
		var start = -1, match, line = 0;
		
		if (this.lines.length > 0) {
			start = this.startsWith(this.lines[line], name);
			if (start === -1) {
				line = this.lines.length-1;
				start = this.endsWith(this.lines[line], name);
			}
			if (start !== -1) {
				match = {
					text: this.lines[line].substring(start, start + name.length),
					line: line,
					start: start
				};
			}
		}
		
		return match;
	},
	
	endsWith: function (subject, query) {
		var start = subject.length-query.length,
			i,
			pat;
		//console.log("endsWith: checking " + query + " against " + subject);
		for (i = 0; i < query.length; i++) {
			// TODO: use case mapper instead of toLowerCase()
			if (subject.charAt(start+i).toLowerCase() !== query.charAt(i).toLowerCase()) {
				return -1;
			}
		}
		if (start > 0) {
			pat = /\s/;
			if (!pat.test(subject.charAt(start-1))) {
				// make sure if we are not at the beginning of the string, that the match is 
				// not the end of some other word
				return -1;
			}
		}
		return start;
	},
	
	startsWith: function (subject, query) {
		var i;
		// //console.log("startsWith: checking " + query + " against " + subject);
		for (i = 0; i < query.length; i++) {
			// TODO: use case mapper instead of toLowerCase()
			if (subject.charAt(i).toLowerCase() !== query.charAt(i).toLowerCase()) {
				return -1;
			}
		}
		return 0;
	},
	
	removeEmptyLines: function (arr) {
		var i = 0;
		
		while (i < arr.length) {
			if (arr[i]) {
				arr[i] = arr[i].trim();
				if (arr[i].length === 0) {
					arr.splice(i,1);
				} else {
					i++;
				}
			} else {
				arr.splice(i,1);
			}
		}
	},
	
	matchRegExp: function(address, line, expression, matchGroup, startAt) {
		var lastMatch,
			match,
			ret = {},
			last;
		
		//console.log("searching for regexp " + expression.source + " in line " + line);
		
		match = expression.exec(line);
		if (startAt === 'end') {
			while (match !== null && match.length > 0) {
				//console.log("found matches " + JSON.stringify(match));
				lastMatch = match;
				match = expression.exec(line);
			}
			match = lastMatch;
		}
		
		if (match && match !== null) {
			//console.log("found matches " + JSON.stringify(match));
			matchGroup = matchGroup || 0;
			if (match[matchGroup] !== undefined) {
				ret.match = match[matchGroup].trim();
				ret.match = ret.match.replace(/^\-|\-+$/, '');
				ret.match = ret.match.replace(/\s+$/, '');
				last = (startAt === 'end') ? line.lastIndexOf(match[matchGroup]) : line.indexOf(match[matchGroup]); 
				//console.log("last is " + last);
				ret.line = line.slice(0,last);
				if (address.format !== "asian") {
					ret.line += " ";
				}
				ret.line += line.slice(last+match[matchGroup].length);
				ret.line = ret.line.trim();
				//console.log("found match " + ret.match + " from matchgroup " + matchGroup + " and rest of line is " + ret.line);
				return ret;
			}
		//} else {
			//console.log("no match");
		}
		
		return undefined;
	},
	
	matchPattern: function(address, line, pattern, matchGroup) {
		var start,
			j,
			ret = {};
		
		//console.log("searching in line " + line);
		
		// search an array of possible fixed strings
		//console.log("Using fixed set of strings.");
		for (j = 0; j < pattern.length; j++) {
			start = address.compare(line, pattern[j]); 
			if (start !== -1) {
				ret.match = line.substring(start, start+pattern[j].length);
				ret.line = line.substring(0,start).trim();
				//console.log("found match " + ret.match + " and rest of line is " + ret.line);
				return ret;
			}
		}
		
		return undefined;
	}
};

/*
 * addressfmt.js - Format an address
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* !depends 
ilibglobal.js 
locale.js
addressprs.js
*/

// !data address

/**
 * @class
 * Create a new formatter object to format physical addresses in a particular way.
 *
 * The options object may contain the following properties, both of which are optional:
 *
 * <ul>
 * <li><i>locale</i> - the locale to use to format this address. If not specified, it uses the default locale
 * 
 * <li><i>style</i> - the style of this address. The default style for each country usually includes all valid 
 * fields for that country.
 * 
 * <li><i>onLoad</i> - a callback function to call when the address info for the
 * locale is fully loaded and the address has been parsed. When the onLoad 
 * option is given, the address formatter object 
 * will attempt to load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Depends directive: !depends addressfmt.js
 * 
 * @constructor
 * @param {Object} options options that configure how this formatter should work
 * Returns a formatter instance that can format multiple addresses.
 */
ilib.AddressFmt = function(options) {
	this.sync = true;
	this.styleName = 'default';
	this.loadParams = {};
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (typeof(options.sync) !== 'undefined') {
			this.sync = (options.sync == true);
		}
		
		if (options.style) {
			this.styleName = options.style;
		}
		
		if (options.loadParams) {
			this.loadParams = options.loadParams;
		}
	}

	// console.log("Creating formatter for region: " + this.locale.region);
	ilib.loadData({
		name: "address.json",
		object: ilib.Address, 
		locale: this.locale,
		sync: this.sync, 
		loadParams: this.loadParams, 
		callback: /** @type function(Object?):undefined */ ilib.bind(this, function(info) {
			if (!info || ilib.isEmpty(info)) {
				// load the "unknown" locale instead
				ilib.loadData({
					name: "address.json",
					object: ilib.Address, 
					locale: new ilib.Locale("XX"),
					sync: this.sync, 
					loadParams: this.loadParams, 
					callback: /** @type function(Object?):undefined */ ilib.bind(this, function(info) {
						this.info = info;
						this._init();
						if (typeof(options.onLoad) === 'function') {
							options.onLoad(this);
						}
					})
				});
			} else {
				this.info = info;
				this._init();
				if (typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			}
		})
	});
};

/**
 * @private
 */
ilib.AddressFmt.prototype._init = function () {
	this.style = this.info && this.info.formats && this.info.formats[this.styleName];
	
	// use generic default -- should not happen, but just in case...
	this.style = this.style || (this.info && this.info.formats["default"]) || "{streetAddress}\n{locality} {region} {postalCode}\n{country}";
};

/**
 * This function formats a physical address (ilib.Address instance) for display. 
 * Whitespace is trimmed from the beginning and end of final resulting string, and 
 * multiple consecutive whitespace characters in the middle of the string are 
 * compressed down to 1 space character.
 * 
 * If the Address instance is for a locale that is different than the locale for this
 * formatter, then a hybrid address is produced. The country name is located in the
 * correct spot for the current formatter's locale, but the rest of the fields are
 * formatted according to the default style of the locale of the actual address.
 * 
 * Example: a mailing address in China, but formatted for the US might produce the words
 * "People's Republic of China" in English at the last line of the address, and the 
 * Chinese-style address will appear in the first line of the address. In the US, the
 * country is on the last line, but in China the country is usually on the first line.
 *
 * @param {ilib.Address} address Address to format
 * @eturns {string} Returns a string containing the formatted address
 */
ilib.AddressFmt.prototype.format = function (address) {
	var ret, template, other, format;
	
	if (!address) {
		return "";
	}
	// console.log("formatting address: " + JSON.stringify(address));
	if (address.countryCode && 
			address.countryCode !== this.locale.region && 
			ilib.Locale._isRegionCode(this.locale.region) && 
			this.locale.region !== "XX") {
		// we are formatting an address that is sent from this country to another country,
		// so only the country should be in this locale, and the rest should be in the other
		// locale
		// console.log("formatting for another locale. Loading in its settings: " + address.countryCode);
		other = new ilib.AddressFmt({
			locale: new ilib.Locale(address.countryCode), 
			style: this.styleName
		});
		return other.format(address);
	}
	
	if (typeof(this.style) === 'object') {
		format = this.style[address.format || "latin"];
	} else {
		format = this.style;
	}
	
	// console.log("Using format: " + format);
	// make sure we have a blank string for any missing parts so that
	// those template parts get blanked out
	var params = {
		country: address.country || "",
		region: address.region || "",
		locality: address.locality || "",
		streetAddress: address.streetAddress || "",
		postalCode: address.postalCode || "",
		postOffice: address.postOffice || ""
	};
	template = new ilib.String(format);
	ret = template.format(params);
	ret = ret.replace(/[ \t]+/g, ' ');
	ret = ret.replace("\n ", "\n");
	ret = ret.replace(" \n", "\n");
	return ret.replace(/\n+/g, '\n').trim();
};

ilib.data.norm = {"ccc":{"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":230,"Ì":232,"Ì":220,"Ì":220,"Ì":220,"Ì":220,"Ì":232,"Ì":216,"Ì":220,"Ì":220,"Ì":220,"Ì":220,"Ì ":220,"Ì¡":202,"Ì¢":202,"Ì£":220,"Ì¤":220,"Ì¥":220,"Ì¦":220,"Ì§":202,"Ì¨":202,"Ì©":220,"Ìª":220,"Ì«":220,"Ì¬":220,"Ì­":220,"Ì®":220,"Ì¯":220,"Ì°":220,"Ì±":220,"Ì²":220,"Ì³":220,"Ì´":1,"Ìµ":1,"Ì¶":1,"Ì·":1,"Ì¸":1,"Ì¹":220,"Ìº":220,"Ì»":220,"Ì¼":220,"Ì½":230,"Ì¾":230,"Ì¿":230,"Í":230,"Í":230,"Í":230,"Í":230,"Í":230,"Í":240,"Í":230,"Í":220,"Í":220,"Í":220,"Í":230,"Í":230,"Í":230,"Í":220,"Í":220,"Í":230,"Í":230,"Í":230,"Í":220,"Í":220,"Í":220,"Í":220,"Í":230,"Í":232,"Í":220,"Í":220,"Í":230,"Í":233,"Í":234,"Í":234,"Í":233,"Í ":234,"Í¡":234,"Í¢":233,"Í£":230,"Í¤":230,"Í¥":230,"Í¦":230,"Í§":230,"Í¨":230,"Í©":230,"Íª":230,"Í«":230,"Í¬":230,"Í­":230,"Í®":230,"Í¯":230,"Ò":230,"Ò":230,"Ò":230,"Ò":230,"Ò":230,"Ö":220,"Ö":230,"Ö":230,"Ö":230,"Ö":230,"Ö":220,"Ö":230,"Ö":230,"Ö":230,"Ö":222,"Ö":220,"Ö":230,"Ö":230,"Ö":230,"Ö":230,"Ö ":230,"Ö¡":230,"Ö¢":220,"Ö£":220,"Ö¤":220,"Ö¥":220,"Ö¦":220,"Ö§":220,"Ö¨":230,"Ö©":230,"Öª":220,"Ö«":230,"Ö¬":230,"Ö­":222,"Ö®":228,"Ö¯":230,"Ö°":10,"Ö±":11,"Ö²":12,"Ö³":13,"Ö´":14,"Öµ":15,"Ö¶":16,"Ö·":17,"Ö¸":18,"Ö¹":19,"Öº":19,"Ö»":20,"Ö¼":21,"Ö½":22,"Ö¿":23,"×":24,"×":25,"×":230,"×":220,"×":18,"Ø":230,"Ø":230,"Ø":230,"Ø":230,"Ø":230,"Ø":230,"Ø":230,"Ø":230,"Ø":30,"Ø":31,"Ø":32,"Ù":27,"Ù":28,"Ù":29,"Ù":30,"Ù":31,"Ù":32,"Ù":33,"Ù":34,"Ù":230,"Ù":230,"Ù":220,"Ù":220,"Ù":230,"Ù":230,"Ù":230,"Ù":230,"Ù":230,"Ù":220,"Ù":230,"Ù":230,"Ù":220,"Ù°":35,"Û":230,"Û":230,"Û":230,"Û":230,"Û":230,"Û":230,"Û":230,"Û":230,"Û ":230,"Û¡":230,"Û¢":230,"Û£":220,"Û¤":230,"Û§":230,"Û¨":230,"Ûª":220,"Û«":230,"Û¬":230,"Û­":220,"Ü":36,"Ü°":230,"Ü±":220,"Ü²":230,"Ü³":230,"Ü´":220,"Üµ":230,"Ü¶":230,"Ü·":220,"Ü¸":220,"Ü¹":220,"Üº":230,"Ü»":220,"Ü¼":220,"Ü½":230,"Ü¾":220,"Ü¿":230,"Ý":230,"Ý":230,"Ý":220,"Ý":230,"Ý":220,"Ý":230,"Ý":220,"Ý":230,"Ý":220,"Ý":230,"Ý":230,"ß«":230,"ß¬":230,"ß­":230,"ß®":230,"ß¯":230,"ß°":230,"ß±":230,"ß²":220,"ß³":230,"à ":230,"à ":230,"à ":230,"à ":230,"à ":230,"à ":230,"à ":230,"à ":230,"à ":230,"à  ":230,"à ¡":230,"à ¢":230,"à £":230,"à ¥":230,"à ¦":230,"à §":230,"à ©":230,"à ª":230,"à «":230,"à ¬":230,"à ­":230,"à¡":220,"à¡":220,"à¡":220,"à£¤":230,"à£¥":230,"à£¦":220,"à£§":230,"à£¨":230,"à£©":220,"à£ª":230,"à£«":230,"à£¬":230,"à£­":220,"à£®":220,"à£¯":220,"à£°":27,"à£±":28,"à£²":29,"à£³":230,"à£´":230,"à£µ":230,"à£¶":220,"à£·":230,"à£¸":230,"à£¹":220,"à£º":220,"à£»":230,"à£¼":230,"à£½":230,"à£¾":230,"à¤¼":7,"à¥":9,"à¥":230,"à¥":220,"à¥":230,"à¥":230,"à¦¼":7,"à§":9,"à¨¼":7,"à©":9,"àª¼":7,"à«":9,"à¬¼":7,"à­":9,"à¯":9,"à±":9,"à±":84,"à±":91,"à²¼":7,"à³":9,"àµ":9,"à·":9,"à¸¸":103,"à¸¹":103,"à¸º":9,"à¹":107,"à¹":107,"à¹":107,"à¹":107,"àº¸":118,"àº¹":118,"à»":122,"à»":122,"à»":122,"à»":122,"à¼":220,"à¼":220,"à¼µ":220,"à¼·":220,"à¼¹":216,"à½±":129,"à½²":130,"à½´":132,"à½º":130,"à½»":130,"à½¼":130,"à½½":130,"à¾":130,"à¾":230,"à¾":230,"à¾":9,"à¾":230,"à¾":230,"à¿":220,"á·":7,"á¹":9,"áº":9,"á":220,"á":230,"á":230,"á":230,"á":9,"á´":9,"á":9,"á":230,"á¢©":228,"á¤¹":222,"á¤º":230,"á¤»":220,"á¨":230,"á¨":220,"á© ":9,"á©µ":230,"á©¶":230,"á©·":230,"á©¸":230,"á©¹":230,"á©º":230,"á©»":230,"á©¼":230,"á©¿":220,"á¬´":7,"á­":9,"á­«":230,"á­¬":220,"á­­":230,"á­®":230,"á­¯":230,"á­°":230,"á­±":230,"á­²":230,"á­³":230,"á®ª":9,"á®«":9,"á¯¦":7,"á¯²":9,"á¯³":9,"á°·":7,"á³":230,"á³":230,"á³":230,"á³":1,"á³":220,"á³":220,"á³":220,"á³":220,"á³":220,"á³":230,"á³":230,"á³":220,"á³":220,"á³":220,"á³":220,"á³ ":230,"á³¢":1,"á³£":1,"á³¤":1,"á³¥":1,"á³¦":1,"á³§":1,"á³¨":1,"á³­":220,"á³´":230,"á·":230,"á·":230,"á·":220,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":220,"á·":230,"á·":230,"á·":234,"á·":214,"á·":220,"á·":202,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á·":230,"á· ":230,"á·¡":230,"á·¢":230,"á·£":230,"á·¤":230,"á·¥":230,"á·¦":230,"á·¼":233,"á·½":220,"á·¾":230,"á·¿":220,"â":230,"â":230,"â":1,"â":1,"â":230,"â":230,"â":230,"â":230,"â":1,"â":1,"â":1,"â":230,"â":230,"â¡":230,"â¥":1,"â¦":1,"â§":230,"â¨":220,"â©":230,"âª":1,"â«":1,"â¬":220,"â­":220,"â®":220,"â¯":220,"â°":230,"â³¯":230,"â³°":230,"â³±":230,"âµ¿":9,"â· ":230,"â·¡":230,"â·¢":230,"â·£":230,"â·¤":230,"â·¥":230,"â·¦":230,"â·§":230,"â·¨":230,"â·©":230,"â·ª":230,"â·«":230,"â·¬":230,"â·­":230,"â·®":230,"â·¯":230,"â·°":230,"â·±":230,"â·²":230,"â·³":230,"â·´":230,"â·µ":230,"â·¶":230,"â··":230,"â·¸":230,"â·¹":230,"â·º":230,"â·»":230,"â·¼":230,"â·½":230,"â·¾":230,"â·¿":230,"ãª":218,"ã«":228,"ã¬":232,"ã­":222,"ã®":224,"ã¯":224,"ã":8,"ã":8,"ê¯":230,"ê´":230,"êµ":230,"ê¶":230,"ê·":230,"ê¸":230,"ê¹":230,"êº":230,"ê»":230,"ê¼":230,"ê½":230,"ê":230,"ê°":230,"ê±":230,"ê ":9,"ê£":9,"ê£ ":230,"ê£¡":230,"ê£¢":230,"ê££":230,"ê£¤":230,"ê£¥":230,"ê£¦":230,"ê£§":230,"ê£¨":230,"ê£©":230,"ê£ª":230,"ê£«":230,"ê£¬":230,"ê£­":230,"ê£®":230,"ê£¯":230,"ê£°":230,"ê£±":230,"ê¤«":220,"ê¤¬":220,"ê¤­":220,"ê¥":9,"ê¦³":7,"ê§":9,"êª°":230,"êª²":230,"êª³":230,"êª´":220,"êª·":230,"êª¸":230,"êª¾":230,"êª¿":230,"ê«":230,"ê«¶":9,"ê¯­":9,"ï¬":26,"ï¸ ":230,"ï¸¡":230,"ï¸¢":230,"ï¸£":230,"ï¸¤":230,"ï¸¥":230,"ï¸¦":230,"ð½":220,"ð¨":220,"ð¨":230,"ð¨¸":230,"ð¨¹":1,"ð¨º":220,"ð¨¿":9,"ð":9,"ð¹":9,"ðº":7,"ð":230,"ð":230,"ð":230,"ð³":9,"ð´":9,"ð":9,"ð¶":9,"ð·":7,"ð¥":216,"ð¦":216,"ð§":1,"ð¨":1,"ð©":1,"ð­":226,"ð®":216,"ð¯":216,"ð°":216,"ð±":216,"ð²":216,"ð»":220,"ð¼":220,"ð½":220,"ð¾":220,"ð¿":220,"ð":220,"ð":220,"ð":220,"ð":230,"ð":230,"ð":230,"ð":230,"ð":230,"ð":220,"ð":220,"ðª":230,"ð«":230,"ð¬":230,"ð­":230,"ð":230,"ð":230,"ð":230},"nfc":{"AÌ":"Ã","AÌ":"Ã","AÌ":"Ã","AÌ":"Ã","AÌ":"Ã","AÌ":"Ã","CÌ§":"Ã","EÌ":"Ã","EÌ":"Ã","EÌ":"Ã","EÌ":"Ã","IÌ":"Ã","IÌ":"Ã","IÌ":"Ã","IÌ":"Ã","NÌ":"Ã","OÌ":"Ã","OÌ":"Ã","OÌ":"Ã","OÌ":"Ã","OÌ":"Ã","UÌ":"Ã","UÌ":"Ã","UÌ":"Ã","UÌ":"Ã","YÌ":"Ã","aÌ":"Ã ","aÌ":"Ã¡","aÌ":"Ã¢","aÌ":"Ã£","aÌ":"Ã¤","aÌ":"Ã¥","cÌ§":"Ã§","eÌ":"Ã¨","eÌ":"Ã©","eÌ":"Ãª","eÌ":"Ã«","iÌ":"Ã¬","iÌ":"Ã­","iÌ":"Ã®","iÌ":"Ã¯","nÌ":"Ã±","oÌ":"Ã²","oÌ":"Ã³","oÌ":"Ã´","oÌ":"Ãµ","oÌ":"Ã¶","uÌ":"Ã¹","uÌ":"Ãº","uÌ":"Ã»","uÌ":"Ã¼","yÌ":"Ã½","yÌ":"Ã¿","AÌ":"Ä","aÌ":"Ä","AÌ":"Ä","aÌ":"Ä","AÌ¨":"Ä","aÌ¨":"Ä","CÌ":"Ä","cÌ":"Ä","CÌ":"Ä","cÌ":"Ä","CÌ":"Ä","cÌ":"Ä","CÌ":"Ä","cÌ":"Ä","DÌ":"Ä","dÌ":"Ä","EÌ":"Ä","eÌ":"Ä","EÌ":"Ä","eÌ":"Ä","EÌ":"Ä","eÌ":"Ä","EÌ¨":"Ä","eÌ¨":"Ä","EÌ":"Ä","eÌ":"Ä","GÌ":"Ä","gÌ":"Ä","GÌ":"Ä","gÌ":"Ä","GÌ":"Ä ","gÌ":"Ä¡","GÌ§":"Ä¢","gÌ§":"Ä£","HÌ":"Ä¤","hÌ":"Ä¥","IÌ":"Ä¨","iÌ":"Ä©","IÌ":"Äª","iÌ":"Ä«","IÌ":"Ä¬","iÌ":"Ä­","IÌ¨":"Ä®","iÌ¨":"Ä¯","IÌ":"Ä°","JÌ":"Ä´","jÌ":"Äµ","KÌ§":"Ä¶","kÌ§":"Ä·","LÌ":"Ä¹","lÌ":"Äº","LÌ§":"Ä»","lÌ§":"Ä¼","LÌ":"Ä½","lÌ":"Ä¾","NÌ":"Å","nÌ":"Å","NÌ§":"Å","nÌ§":"Å","NÌ":"Å","nÌ":"Å","OÌ":"Å","oÌ":"Å","OÌ":"Å","oÌ":"Å","OÌ":"Å","oÌ":"Å","RÌ":"Å","rÌ":"Å","RÌ§":"Å","rÌ§":"Å","RÌ":"Å","rÌ":"Å","SÌ":"Å","sÌ":"Å","SÌ":"Å","sÌ":"Å","SÌ§":"Å","sÌ§":"Å","SÌ":"Å ","sÌ":"Å¡","TÌ§":"Å¢","tÌ§":"Å£","TÌ":"Å¤","tÌ":"Å¥","UÌ":"Å¨","uÌ":"Å©","UÌ":"Åª","uÌ":"Å«","UÌ":"Å¬","uÌ":"Å­","UÌ":"Å®","uÌ":"Å¯","UÌ":"Å°","uÌ":"Å±","UÌ¨":"Å²","uÌ¨":"Å³","WÌ":"Å´","wÌ":"Åµ","YÌ":"Å¶","yÌ":"Å·","YÌ":"Å¸","ZÌ":"Å¹","zÌ":"Åº","ZÌ":"Å»","zÌ":"Å¼","ZÌ":"Å½","zÌ":"Å¾","OÌ":"Æ ","oÌ":"Æ¡","UÌ":"Æ¯","uÌ":"Æ°","AÌ":"Ç","aÌ":"Ç","IÌ":"Ç","iÌ":"Ç","OÌ":"Ç","oÌ":"Ç","UÌ":"Ç","uÌ":"Ç","ÃÌ":"Ç","Ã¼Ì":"Ç","ÃÌ":"Ç","Ã¼Ì":"Ç","ÃÌ":"Ç","Ã¼Ì":"Ç","ÃÌ":"Ç","Ã¼Ì":"Ç","ÃÌ":"Ç","Ã¤Ì":"Ç","È¦Ì":"Ç ","È§Ì":"Ç¡","ÃÌ":"Ç¢","Ã¦Ì":"Ç£","GÌ":"Ç¦","gÌ":"Ç§","KÌ":"Ç¨","kÌ":"Ç©","OÌ¨":"Çª","oÌ¨":"Ç«","ÇªÌ":"Ç¬","Ç«Ì":"Ç­","Æ·Ì":"Ç®","ÊÌ":"Ç¯","jÌ":"Ç°","GÌ":"Ç´","gÌ":"Çµ","NÌ":"Ç¸","nÌ":"Ç¹","ÃÌ":"Çº","Ã¥Ì":"Ç»","ÃÌ":"Ç¼","Ã¦Ì":"Ç½","ÃÌ":"Ç¾","Ã¸Ì":"Ç¿","AÌ":"È","aÌ":"È","AÌ":"È","aÌ":"È","EÌ":"È","eÌ":"È","EÌ":"È","eÌ":"È","IÌ":"È","iÌ":"È","IÌ":"È","iÌ":"È","OÌ":"È","oÌ":"È","OÌ":"È","oÌ":"È","RÌ":"È","rÌ":"È","RÌ":"È","rÌ":"È","UÌ":"È","uÌ":"È","UÌ":"È","uÌ":"È","SÌ¦":"È","sÌ¦":"È","TÌ¦":"È","tÌ¦":"È","HÌ":"È","hÌ":"È","AÌ":"È¦","aÌ":"È§","EÌ§":"È¨","eÌ§":"È©","ÃÌ":"Èª","Ã¶Ì":"È«","ÃÌ":"È¬","ÃµÌ":"È­","OÌ":"È®","oÌ":"È¯","È®Ì":"È°","È¯Ì":"È±","YÌ":"È²","yÌ":"È³","Â¨Ì":"Î","ÎÌ":"Î","ÎÌ":"Î","ÎÌ":"Î","ÎÌ":"Î","ÎÌ":"Î","Î¥Ì":"Î","Î©Ì":"Î","ÏÌ":"Î","ÎÌ":"Îª","Î¥Ì":"Î«","Î±Ì":"Î¬","ÎµÌ":"Î­","Î·Ì":"Î®","Î¹Ì":"Î¯","ÏÌ":"Î°","Î¹Ì":"Ï","ÏÌ":"Ï","Î¿Ì":"Ï","ÏÌ":"Ï","ÏÌ":"Ï","ÏÌ":"Ï","ÏÌ":"Ï","ÐÌ":"Ð","ÐÌ":"Ð","ÐÌ":"Ð","ÐÌ":"Ð","ÐÌ":"Ð","ÐÌ":"Ð","Ð£Ì":"Ð","ÐÌ":"Ð","Ð¸Ì":"Ð¹","ÐµÌ":"Ñ","ÐµÌ":"Ñ","Ð³Ì":"Ñ","ÑÌ":"Ñ","ÐºÌ":"Ñ","Ð¸Ì":"Ñ","ÑÌ":"Ñ","Ñ´Ì":"Ñ¶","ÑµÌ":"Ñ·","ÐÌ":"Ó","Ð¶Ì":"Ó","ÐÌ":"Ó","Ð°Ì":"Ó","ÐÌ":"Ó","Ð°Ì":"Ó","ÐÌ":"Ó","ÐµÌ":"Ó","ÓÌ":"Ó","ÓÌ":"Ó","ÐÌ":"Ó","Ð¶Ì":"Ó","ÐÌ":"Ó","Ð·Ì":"Ó","ÐÌ":"Ó¢","Ð¸Ì":"Ó£","ÐÌ":"Ó¤","Ð¸Ì":"Ó¥","ÐÌ":"Ó¦","Ð¾Ì":"Ó§","Ó¨Ì":"Óª","Ó©Ì":"Ó«","Ð­Ì":"Ó¬","ÑÌ":"Ó­","Ð£Ì":"Ó®","ÑÌ":"Ó¯","Ð£Ì":"Ó°","ÑÌ":"Ó±","Ð£Ì":"Ó²","ÑÌ":"Ó³","Ð§Ì":"Ó´","ÑÌ":"Óµ","Ð«Ì":"Ó¸","ÑÌ":"Ó¹","Ø§Ù":"Ø¢","Ø§Ù":"Ø£","ÙÙ":"Ø¤","Ø§Ù":"Ø¥","ÙÙ":"Ø¦","ÛÙ":"Û","ÛÙ":"Û","ÛÙ":"Û","à¤¨à¤¼":"à¤©","à¤°à¤¼":"à¤±","à¤³à¤¼":"à¤´","à§à¦¾":"à§","à§à§":"à§","à­à­":"à­","à­à¬¾":"à­","à­à­":"à­","à®à¯":"à®","à¯à®¾":"à¯","à¯à®¾":"à¯","à¯à¯":"à¯","à±à±":"à±","à²¿à³":"à³","à³à³":"à³","à³à³":"à³","à³à³":"à³","à³à³":"à³","àµà´¾":"àµ","àµà´¾":"àµ","àµàµ":"àµ","à·à·":"à·","à·à·":"à·","à·à·":"à·","à·à·":"à·","á¥á®":"á¦","á¬á¬µ":"á¬","á¬á¬µ":"á¬","á¬á¬µ":"á¬","á¬á¬µ":"á¬","á¬á¬µ":"á¬","á¬á¬µ":"á¬","á¬ºá¬µ":"á¬»","á¬¼á¬µ":"á¬½","á¬¾á¬µ":"á­","á¬¿á¬µ":"á­","á­á¬µ":"á­","AÌ¥":"á¸","aÌ¥":"á¸","BÌ":"á¸","bÌ":"á¸","BÌ£":"á¸","bÌ£":"á¸","BÌ±":"á¸","bÌ±":"á¸","ÃÌ":"á¸","Ã§Ì":"á¸","DÌ":"á¸","dÌ":"á¸","DÌ£":"á¸","dÌ£":"á¸","DÌ±":"á¸","dÌ±":"á¸","DÌ§":"á¸","dÌ§":"á¸","DÌ­":"á¸","dÌ­":"á¸","ÄÌ":"á¸","ÄÌ":"á¸","ÄÌ":"á¸","ÄÌ":"á¸","EÌ­":"á¸","eÌ­":"á¸","EÌ°":"á¸","eÌ°":"á¸","È¨Ì":"á¸","È©Ì":"á¸","FÌ":"á¸","fÌ":"á¸","GÌ":"á¸ ","gÌ":"á¸¡","HÌ":"á¸¢","hÌ":"á¸£","HÌ£":"á¸¤","hÌ£":"á¸¥","HÌ":"á¸¦","hÌ":"á¸§","HÌ§":"á¸¨","hÌ§":"á¸©","HÌ®":"á¸ª","hÌ®":"á¸«","IÌ°":"á¸¬","iÌ°":"á¸­","ÃÌ":"á¸®","Ã¯Ì":"á¸¯","KÌ":"á¸°","kÌ":"á¸±","KÌ£":"á¸²","kÌ£":"á¸³","KÌ±":"á¸´","kÌ±":"á¸µ","LÌ£":"á¸¶","lÌ£":"á¸·","á¸¶Ì":"á¸¸","á¸·Ì":"á¸¹","LÌ±":"á¸º","lÌ±":"á¸»","LÌ­":"á¸¼","lÌ­":"á¸½","MÌ":"á¸¾","mÌ":"á¸¿","MÌ":"á¹","mÌ":"á¹","MÌ£":"á¹","mÌ£":"á¹","NÌ":"á¹","nÌ":"á¹","NÌ£":"á¹","nÌ£":"á¹","NÌ±":"á¹","nÌ±":"á¹","NÌ­":"á¹","nÌ­":"á¹","ÃÌ":"á¹","ÃµÌ":"á¹","ÃÌ":"á¹","ÃµÌ":"á¹","ÅÌ":"á¹","ÅÌ":"á¹","ÅÌ":"á¹","ÅÌ":"á¹","PÌ":"á¹","pÌ":"á¹","PÌ":"á¹","pÌ":"á¹","RÌ":"á¹","rÌ":"á¹","RÌ£":"á¹","rÌ£":"á¹","á¹Ì":"á¹","á¹Ì":"á¹","RÌ±":"á¹","rÌ±":"á¹","SÌ":"á¹ ","sÌ":"á¹¡","SÌ£":"á¹¢","sÌ£":"á¹£","ÅÌ":"á¹¤","ÅÌ":"á¹¥","Å Ì":"á¹¦","Å¡Ì":"á¹§","á¹¢Ì":"á¹¨","á¹£Ì":"á¹©","TÌ":"á¹ª","tÌ":"á¹«","TÌ£":"á¹¬","tÌ£":"á¹­","TÌ±":"á¹®","tÌ±":"á¹¯","TÌ­":"á¹°","tÌ­":"á¹±","UÌ¤":"á¹²","uÌ¤":"á¹³","UÌ°":"á¹´","uÌ°":"á¹µ","UÌ­":"á¹¶","uÌ­":"á¹·","Å¨Ì":"á¹¸","Å©Ì":"á¹¹","ÅªÌ":"á¹º","Å«Ì":"á¹»","VÌ":"á¹¼","vÌ":"á¹½","VÌ£":"á¹¾","vÌ£":"á¹¿","WÌ":"áº","wÌ":"áº","WÌ":"áº","wÌ":"áº","WÌ":"áº","wÌ":"áº","WÌ":"áº","wÌ":"áº","WÌ£":"áº","wÌ£":"áº","XÌ":"áº","xÌ":"áº","XÌ":"áº","xÌ":"áº","YÌ":"áº","yÌ":"áº","ZÌ":"áº","zÌ":"áº","ZÌ£":"áº","zÌ£":"áº","ZÌ±":"áº","zÌ±":"áº","hÌ±":"áº","tÌ":"áº","wÌ":"áº","yÌ":"áº","Å¿Ì":"áº","AÌ£":"áº ","aÌ£":"áº¡","AÌ":"áº¢","aÌ":"áº£","ÃÌ":"áº¤","Ã¢Ì":"áº¥","ÃÌ":"áº¦","Ã¢Ì":"áº§","ÃÌ":"áº¨","Ã¢Ì":"áº©","ÃÌ":"áºª","Ã¢Ì":"áº«","áº Ì":"áº¬","áº¡Ì":"áº­","ÄÌ":"áº®","ÄÌ":"áº¯","ÄÌ":"áº°","ÄÌ":"áº±","ÄÌ":"áº²","ÄÌ":"áº³","ÄÌ":"áº´","ÄÌ":"áºµ","áº Ì":"áº¶","áº¡Ì":"áº·","EÌ£":"áº¸","eÌ£":"áº¹","EÌ":"áºº","eÌ":"áº»","EÌ":"áº¼","eÌ":"áº½","ÃÌ":"áº¾","ÃªÌ":"áº¿","ÃÌ":"á»","ÃªÌ":"á»","ÃÌ":"á»","ÃªÌ":"á»","ÃÌ":"á»","ÃªÌ":"á»","áº¸Ì":"á»","áº¹Ì":"á»","IÌ":"á»","iÌ":"á»","IÌ£":"á»","iÌ£":"á»","OÌ£":"á»","oÌ£":"á»","OÌ":"á»","oÌ":"á»","ÃÌ":"á»","Ã´Ì":"á»","ÃÌ":"á»","Ã´Ì":"á»","ÃÌ":"á»","Ã´Ì":"á»","ÃÌ":"á»","Ã´Ì":"á»","á»Ì":"á»","á»Ì":"á»","Æ Ì":"á»","Æ¡Ì":"á»","Æ Ì":"á»","Æ¡Ì":"á»","Æ Ì":"á»","Æ¡Ì":"á»","Æ Ì":"á» ","Æ¡Ì":"á»¡","Æ Ì£":"á»¢","Æ¡Ì£":"á»£","UÌ£":"á»¤","uÌ£":"á»¥","UÌ":"á»¦","uÌ":"á»§","Æ¯Ì":"á»¨","Æ°Ì":"á»©","Æ¯Ì":"á»ª","Æ°Ì":"á»«","Æ¯Ì":"á»¬","Æ°Ì":"á»­","Æ¯Ì":"á»®","Æ°Ì":"á»¯","Æ¯Ì£":"á»°","Æ°Ì£":"á»±","YÌ":"á»²","yÌ":"á»³","YÌ£":"á»´","yÌ£":"á»µ","YÌ":"á»¶","yÌ":"á»·","YÌ":"á»¸","yÌ":"á»¹","Î±Ì":"á¼","Î±Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Í":"á¼","á¼Í":"á¼","ÎÌ":"á¼","ÎÌ":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Í":"á¼","á¼Í":"á¼","ÎµÌ":"á¼","ÎµÌ":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","ÎÌ":"á¼","ÎÌ":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","á¼Ì":"á¼","Î·Ì":"á¼ ","Î·Ì":"á¼¡","á¼ Ì":"á¼¢","á¼¡Ì":"á¼£","á¼ Ì":"á¼¤","á¼¡Ì":"á¼¥","á¼ Í":"á¼¦","á¼¡Í":"á¼§","ÎÌ":"á¼¨","ÎÌ":"á¼©","á¼¨Ì":"á¼ª","á¼©Ì":"á¼«","á¼¨Ì":"á¼¬","á¼©Ì":"á¼­","á¼¨Í":"á¼®","á¼©Í":"á¼¯","Î¹Ì":"á¼°","Î¹Ì":"á¼±","á¼°Ì":"á¼²","á¼±Ì":"á¼³","á¼°Ì":"á¼´","á¼±Ì":"á¼µ","á¼°Í":"á¼¶","á¼±Í":"á¼·","ÎÌ":"á¼¸","ÎÌ":"á¼¹","á¼¸Ì":"á¼º","á¼¹Ì":"á¼»","á¼¸Ì":"á¼¼","á¼¹Ì":"á¼½","á¼¸Í":"á¼¾","á¼¹Í":"á¼¿","Î¿Ì":"á½","Î¿Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","ÎÌ":"á½","ÎÌ":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","ÏÌ":"á½","ÏÌ":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Í":"á½","á½Í":"á½","Î¥Ì":"á½","á½Ì":"á½","á½Ì":"á½","á½Í":"á½","ÏÌ":"á½ ","ÏÌ":"á½¡","á½ Ì":"á½¢","á½¡Ì":"á½£","á½ Ì":"á½¤","á½¡Ì":"á½¥","á½ Í":"á½¦","á½¡Í":"á½§","Î©Ì":"á½¨","Î©Ì":"á½©","á½¨Ì":"á½ª","á½©Ì":"á½«","á½¨Ì":"á½¬","á½©Ì":"á½­","á½¨Í":"á½®","á½©Í":"á½¯","Î±Ì":"á½°","ÎµÌ":"á½²","Î·Ì":"á½´","Î¹Ì":"á½¶","Î¿Ì":"á½¸","ÏÌ":"á½º","ÏÌ":"á½¼","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼Í":"á¾","á¼ Í":"á¾","á¼¡Í":"á¾","á¼¢Í":"á¾","á¼£Í":"á¾","á¼¤Í":"á¾","á¼¥Í":"á¾","á¼¦Í":"á¾","á¼§Í":"á¾","á¼¨Í":"á¾","á¼©Í":"á¾","á¼ªÍ":"á¾","á¼«Í":"á¾","á¼¬Í":"á¾","á¼­Í":"á¾","á¼®Í":"á¾","á¼¯Í":"á¾","á½ Í":"á¾ ","á½¡Í":"á¾¡","á½¢Í":"á¾¢","á½£Í":"á¾£","á½¤Í":"á¾¤","á½¥Í":"á¾¥","á½¦Í":"á¾¦","á½§Í":"á¾§","á½¨Í":"á¾¨","á½©Í":"á¾©","á½ªÍ":"á¾ª","á½«Í":"á¾«","á½¬Í":"á¾¬","á½­Í":"á¾­","á½®Í":"á¾®","á½¯Í":"á¾¯","Î±Ì":"á¾°","Î±Ì":"á¾±","á½°Í":"á¾²","Î±Í":"á¾³","Î¬Í":"á¾´","Î±Í":"á¾¶","á¾¶Í":"á¾·","ÎÌ":"á¾¸","ÎÌ":"á¾¹","ÎÌ":"á¾º","ÎÍ":"á¾¼","Â¨Í":"á¿","á½´Í":"á¿","Î·Í":"á¿","Î®Í":"á¿","Î·Í":"á¿","á¿Í":"á¿","ÎÌ":"á¿","ÎÌ":"á¿","ÎÍ":"á¿","á¾¿Ì":"á¿","á¾¿Ì":"á¿","á¾¿Í":"á¿","Î¹Ì":"á¿","Î¹Ì":"á¿","ÏÌ":"á¿","Î¹Í":"á¿","ÏÍ":"á¿","ÎÌ":"á¿","ÎÌ":"á¿","ÎÌ":"á¿","á¿¾Ì":"á¿","á¿¾Ì":"á¿","á¿¾Í":"á¿","ÏÌ":"á¿ ","ÏÌ":"á¿¡","ÏÌ":"á¿¢","ÏÌ":"á¿¤","ÏÌ":"á¿¥","ÏÍ":"á¿¦","ÏÍ":"á¿§","Î¥Ì":"á¿¨","Î¥Ì":"á¿©","Î¥Ì":"á¿ª","Î¡Ì":"á¿¬","Â¨Ì":"á¿­","á½¼Í":"á¿²","ÏÍ":"á¿³","ÏÍ":"á¿´","ÏÍ":"á¿¶","á¿¶Í":"á¿·","ÎÌ":"á¿¸","Î©Ì":"á¿º","Î©Í":"á¿¼","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â®","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","â£Ì¸":"â¤","â¥Ì¸":"â¦","â¼Ì¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","=Ì¸":"â ","â¡Ì¸":"â¢","âÌ¸":"â­","<Ì¸":"â®",">Ì¸":"â¯","â¤Ì¸":"â°","â¥Ì¸":"â±","â²Ì¸":"â´","â³Ì¸":"âµ","â¶Ì¸":"â¸","â·Ì¸":"â¹","âºÌ¸":"â","â»Ì¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","âÌ¸":"â","â¢Ì¸":"â¬","â¨Ì¸":"â­","â©Ì¸":"â®","â«Ì¸":"â¯","â¼Ì¸":"â ","â½Ì¸":"â¡","âÌ¸":"â¢","âÌ¸":"â£","â²Ì¸":"âª","â³Ì¸":"â«","â´Ì¸":"â¬","âµÌ¸":"â­","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã ","ã¡ã":"ã¢","ã¤ã":"ã¥","ã¦ã":"ã§","ã¨ã":"ã©","ã¯ã":"ã°","ã¯ã":"ã±","ã²ã":"ã³","ã²ã":"ã´","ãµã":"ã¶","ãµã":"ã·","ã¸ã":"ã¹","ã¸ã":"ãº","ã»ã":"ã¼","ã»ã":"ã½","ãã":"ã","ãã":"ã","ã«ã":"ã¬","ã­ã":"ã®","ã¯ã":"ã°","ã±ã":"ã²","ã³ã":"ã´","ãµã":"ã¶","ã·ã":"ã¸","ã¹ã":"ãº","ã»ã":"ã¼","ã½ã":"ã¾","ã¿ã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ãã":"ã","ã¦ã":"ã´","ã¯ã":"ã·","ã°ã":"ã¸","ã±ã":"ã¹","ã²ã":"ãº","ã½ã":"ã¾","ððº":"ð","ððº":"ð","ð¥ðº":"ð«","ð±ð§":"ð®","ð²ð§":"ð¯"}};
ilib.data.ctype_m = {"Mn":[[768,879],[1155,1159],[1425,1469],[1471],[1473,1474],[1476,1477],[1479],[1552,1562],[1611,1631],[1648],[1750,1756],[1759,1764],[1767,1768],[1770,1773],[1809],[1840,1866],[1958,1968],[2027,2035],[2070,2073],[2075,2083],[2085,2087],[2089,2093],[2137,2139],[2276,2302],[2304,2306],[2362],[2364],[2369,2376],[2381],[2385,2391],[2402,2403],[2433],[2492],[2497,2500],[2509],[2530,2531],[2561,2562],[2620],[2625,2626],[2631,2632],[2635,2637],[2641],[2672,2673],[2677],[2689,2690],[2748],[2753,2757],[2759,2760],[2765],[2786,2787],[2817],[2876],[2879],[2881,2884],[2893],[2902],[2914,2915],[2946],[3008],[3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3170,3171],[3260],[3263],[3270],[3276,3277],[3298,3299],[3393,3396],[3405],[3426,3427],[3530],[3538,3540],[3542],[3633],[3636,3642],[3655,3662],[3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893],[3895],[3897],[3953,3966],[3968,3972],[3974,3975],[3981,3991],[3993,4028],[4038],[4141,4144],[4146,4151],[4153,4154],[4157,4158],[4184,4185],[4190,4192],[4209,4212],[4226],[4229,4230],[4237],[4253],[4957,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086],[6089,6099],[6109],[6155,6157],[6313],[6432,6434],[6439,6440],[6450],[6457,6459],[6679,6680],[6742],[6744,6750],[6752],[6754],[6757,6764],[6771,6780],[6783],[6912,6915],[6964],[6966,6970],[6972],[6978],[7019,7027],[7040,7041],[7074,7077],[7080,7081],[7083],[7142],[7144,7145],[7149],[7151,7153],[7212,7219],[7222,7223],[7376,7378],[7380,7392],[7394,7400],[7405],[7412],[7616,7654],[7676,7679],[8400,8412],[8417],[8421,8432],[11503,11505],[11647],[11744,11775],[12330,12333],[12441,12442],[42607],[42612,42621],[42655],[42736,42737],[43010],[43014],[43019],[43045,43046],[43204],[43232,43249],[43302,43309],[43335,43345],[43392,43394],[43443],[43446,43449],[43452],[43561,43566],[43569,43570],[43573,43574],[43587],[43596],[43696],[43698,43700],[43703,43704],[43710,43711],[43713],[43756,43757],[43766],[44005],[44008],[44013],[64286],[65024,65039],[65056,65062],[66045],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159],[69633],[69688,69702],[69760,69761],[69811,69814],[69817,69818],[69888,69890],[69927,69931],[69933,69940],[70016,70017],[70070,70078],[71339],[71341],[71344,71349],[71351],[94095,94098],[119143,119145],[119163,119170],[119173,119179],[119210,119213],[119362,119364],[917760,917999]],"Me":[[1160,1161],[8413,8416],[8418,8420],[42608,42610]],"Mc":[[2307],[2363],[2366,2368],[2377,2380],[2382,2383],[2434,2435],[2494,2496],[2503,2504],[2507,2508],[2519],[2563],[2622,2624],[2691],[2750,2752],[2761],[2763,2764],[2818,2819],[2878],[2880],[2887,2888],[2891,2892],[2903],[3006,3007],[3009,3010],[3014,3016],[3018,3020],[3031],[3073,3075],[3137,3140],[3202,3203],[3262],[3264,3268],[3271,3272],[3274,3275],[3285,3286],[3330,3331],[3390,3392],[3398,3400],[3402,3404],[3415],[3458,3459],[3535,3537],[3544,3551],[3570,3571],[3902,3903],[3967],[4139,4140],[4145],[4152],[4155,4156],[4182,4183],[4194,4196],[4199,4205],[4227,4228],[4231,4236],[4239],[4250,4252],[6070],[6078,6085],[6087,6088],[6435,6438],[6441,6443],[6448,6449],[6451,6456],[6576,6592],[6600,6601],[6681,6683],[6741],[6743],[6753],[6755,6756],[6765,6770],[6916],[6965],[6971],[6973,6977],[6979,6980],[7042],[7073],[7078,7079],[7082],[7084,7085],[7143],[7146,7148],[7150],[7154,7155],[7204,7211],[7220,7221],[7393],[7410,7411],[12334,12335],[43043,43044],[43047],[43136,43137],[43188,43203],[43346,43347],[43395],[43444,43445],[43450,43451],[43453,43456],[43567,43568],[43571,43572],[43597],[43643],[43755],[43758,43759],[43765],[44003,44004],[44006,44007],[44009,44010],[44012],[69632],[69634],[69762],[69808,69810],[69815,69816],[69932],[70018],[70067,70069],[70079,70080],[71340],[71342,71343],[71350],[94033,94078],[119141,119142],[119149,119154]]};
/*
 * glyphstring.js - ilib string subclass that allows you to access 
 * whole glyphs at a time
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends strings.js ctype.js
// !data norm ctype_m

/**
 * @class
 * Create a new glyph string instance. This string inherits from 
 * the ilib.String class, and adds methods that allow you to access
 * whole glyphs at a time. <p>
 * 
 * In Unicode, various accented characters can be created by using
 * a base character and one or more combining characters following
 * it. These appear on the screen to the user as a single glyph.
 * For example, the Latin character "a" (U+0061) followed by the
 * combining diaresis character "Â¨" (U+0308) combine together to
 * form the "a with diaresis" glyph "aÌ", which looks like a single
 * character on the screen.<p>
 * 
 * The big problem with combining characters for web developers is
 * that many CSS engines do not ellipsize text between glyphs. They
 * only deal with single Unicode characters. So if a particular space 
 * only allows for 4 characters, the CSS engine will truncate a
 * string at 4 Unicode characters and then add the ellipsis (...)
 * character. What if the fourth Unicode character is the "a" and
 * the fifth one is the diaresis? Then a string like "xxxaÌxxx" that
 * is ellipsized at 4 characters will appear as "xxxa..." on the 
 * screen instead of "xxxaÌ...".<p>
 * 
 * In the Latin script as it is commonly used, it is not so common
 * to form accented characters using combining accents, so the above
 * example is mostly for illustrative purposes. It is not unheard of
 * however. The situation is much, much worse in scripts such as Thai and 
 * Devanagari that normally make very heavy use of combining characters.
 * These scripts do so because Unicode does not include pre-composed 
 * versions of the accented characters like it does for Latin, so 
 * combining accents are the only way to create these accented and 
 * combined versions of the characters.<p>
 * 
 * The solution to thise problem is not to use the the CSS property 
 * "text-overflow: ellipsis" in your web site, ever. Instead, use
 * a glyph string to truncate text between glyphs instead of between
 * characters.<p>
 * 
 * Glyph strings are also useful for truncation, hyphenation, and 
 * line wrapping, as all of these should be done between glyphs instead
 * of between characters.<p>
 * 
 * The options parameter is optional, and may contain any combination
 * of the following properties:<p>
 * 
 * <ul>
 * <li><i>onLoad</i> - a callback function to call when the locale data are
 * fully loaded. When the onLoad option is given, this object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * 
 * Depends directive: !depends glyphstring.js
 * 
 * @constructor
 * @param {string|ilib.String=} str initialize this instance with this string 
 * @param {Object=} options options governing the way this instance works
 */
ilib.GlyphString = function (str, options) {
	ilib.String.call(this, str);
	
	var sync = true;
	var loadParams = {};
	if (options) {
		if (typeof(options.sync) === 'boolean') {
			sync = options.sync;
		}
		if (options.loadParams) {
			loadParams = options.loadParams;
		}
	}
	
	ilib.CType._load("ctype_m", sync, loadParams, function() {
		if (typeof(ilib.data.norm.ccc) === 'undefined') {
			ilib.loadData({
				object: ilib.GlyphString, 
				locale: "-", 
				name: "norm.json",
				nonlocale: true,
				sync: sync, 
				loadParams: loadParams, 
				callback: ilib.bind(this, function (norm) {
					ilib.data.norm = norm;
					if (options && typeof(options.onLoad) === 'function') {
						options.onLoad(this);
					}
				})
			});
		} else {
			if (options && typeof(options.onLoad) === 'function') {
				options.onLoad(this);
			}
		}
	});
};

ilib.GlyphString.prototype = new ilib.String();
ilib.GlyphString.parent = ilib.String;
ilib.GlyphString.prototype.constructor = ilib.GlyphString;

//ilib.GlyphString.prototype.iterator = function () {

//};

/**
 * Return true if the given character is a leading Jamo (Choseong) character.
 * 
 * @private
 * @static
 * @param {number} n code point to check
 * @return {boolean} true if the character is a leading Jamo character, 
 * false otherwise
 */
ilib.GlyphString._isJamoL = function (n) {
	return (n >= 0x1100 && n <= 0x1112);
};

/**
 * Return true if the given character is a vowel Jamo (Jungseong) character.
 * 
 * @private
 * @static
 * @param {number} n code point to check
 * @return {boolean} true if the character is a vowel Jamo character, 
 * false otherwise
 */
ilib.GlyphString._isJamoV = function (n) {
	return (n >= 0x1161 && n <= 0x1175);
};

/**
 * Return true if the given character is a trailing Jamo (Jongseong) character.
 * 
 * @private
 * @static
 * @param {number} n code point to check
 * @return {boolean} true if the character is a trailing Jamo character, 
 * false otherwise
 */
ilib.GlyphString._isJamoT = function (n) {
	return (n >= 0x11A8 && n <= 0x11C2);
};

/**
 * Return true if the given character is a precomposed Hangul character.
 * 
 * @private
 * @static
 * @param {number} n code point to check
 * @return {boolean} true if the character is a precomposed Hangul character, 
 * false otherwise
 */
ilib.GlyphString._isHangul = function (n) {
	return (n >= 0xAC00 && n <= 0xD7A3);
};

/**
 * Algorithmically compose an L and a V combining Jamo characters into
 * a precomposed Korean syllabic Hangul character. Both should already
 * be in the proper ranges for L and V characters. 
 * 
 * @private
 * @static
 * @param {number} lead the code point of the lead Jamo character to compose
 * @param {number} trail the code point of the trailing Jamo character to compose
 * @return {string} the composed Hangul character
 */
ilib.GlyphString._composeJamoLV = function (lead, trail) {
	var lindex = lead - 0x1100;
	var vindex = trail - 0x1161;
	return ilib.String.fromCodePoint(0xAC00 + (lindex * 21 + vindex) * 28);
};

/**
 * Algorithmically compose a Hangul LV and a combining Jamo T character 
 * into a precomposed Korean syllabic Hangul character. 
 * 
 * @private
 * @static
 * @param {number} lead the code point of the lead Hangul character to compose
 * @param {number} trail the code point of the trailing Jamo T character to compose
 * @return {string} the composed Hangul character
 */
ilib.GlyphString._composeJamoLVT = function (lead, trail) {
	return ilib.String.fromCodePoint(lead + (trail - 0x11A7));
};

/**
 * Compose one character out of a leading character and a 
 * trailing character. If the characters are Korean Jamo, they
 * will be composed algorithmically. If they are any other
 * characters, they will be looked up in the nfc tables.
 * 
 * @private
 * @static
 * @param {string} lead leading character to compose
 * @param {string} trail the trailing character to compose
 * @return {string} the fully composed character, or undefined if
 * there is no composition for those two characters
 */
ilib.GlyphString._compose = function (lead, trail) {
	var first = lead.charCodeAt(0);
	var last = trail.charCodeAt(0);
	if (ilib.GlyphString._isHangul(first) && ilib.GlyphString._isJamoT(last)) {
		return ilib.GlyphString._composeJamoLVT(first, last);
	} else if (ilib.GlyphString._isJamoL(first) && ilib.GlyphString._isJamoV(last)) {
		return ilib.GlyphString._composeJamoLV(first, last);
	}

	var c = lead + trail;
	return (ilib.data.norm.nfc && ilib.data.norm.nfc[c]);
};

/**
 * Return an iterator that will step through all of the characters
 * in the string one at a time, taking care to step through decomposed 
 * characters and through surrogate pairs in the UTF-16 encoding 
 * as single characters. <p>
 * 
 * The GlyphString class will return decomposed Unicode characters
 * as a single unit that a user might see on the screen as a single
 * glyph. If the 
 * next character in the iteration is a base character and it is 
 * followed by combining characters, the base and all its following 
 * combining characters are returned as a single unit.<p>
 * 
 * The standard Javascript String's charAt() method only
 * returns information about a particular 16-bit character in the 
 * UTF-16 encoding scheme.
 * If the index is pointing to a low- or high-surrogate character,
 * it will return that surrogate character rather 
 * than the surrogate pair which represents a character 
 * in the supplementary planes.<p>
 * 
 * The iterator instance returned has two methods, hasNext() which
 * returns true if the iterator has more characters to iterate through,
 * and next() which returns the next character.<p>
 * 
 * @override
 * @return {Object} an iterator 
 * that iterates through all the characters in the string
 */
ilib.GlyphString.prototype.charIterator = function() {
	var it = ilib.String.prototype.charIterator.call(this);
	
	/**
	 * @constructor
	 */
	function _chiterator (istring) {
		this.index = 0;
		this.spacingCombining = false;
		this.hasNext = function () {
			return !!this.nextChar || it.hasNext();
		};
		this.next = function () {
			var ch = this.nextChar || it.next(),
				prevCcc = ilib.data.norm.ccc[ch],
				nextCcc,
				composed = ch;
			
			this.nextChar = undefined;
			this.spacingCombining = false;
			
			if (ilib.data.norm.ccc && 
					(typeof(ilib.data.norm.ccc[ch]) === 'undefined' || ilib.data.norm.ccc[ch] === 0)) {
				// found a starter... find all the non-starters until the next starter. Must include
				// the next starter because under some odd circumstances, two starters sometimes recompose 
				// together to form another character
				var notdone = true;
				while (it.hasNext() && notdone) {
					this.nextChar = it.next();
					nextCcc = ilib.data.norm.ccc[this.nextChar];
					// Mn characters are Marks that are non-spacing. These do not take more room than an accent, so they should be 
					// considered part of the on-screen glyph, even if they are non-combining. Mc are marks that are spacing
					// and combining, which means they are part of the glyph, but they cause the glyph to use up more space than
					// just the base character alone.
					var isMn = ilib.CType._inRange(this.nextChar, "Mn", ilib.data.ctype_m);
					var isMc = ilib.CType._inRange(this.nextChar, "Mc", ilib.data.ctype_m);
					if (isMn || isMc || (typeof(nextCcc) !== 'undefined' && nextCcc !== 0)) {
						if (isMc) {
							this.spacingCombining = true;
						}
						ch += this.nextChar;
						this.nextChar = undefined;
					} else {
						// found the next starter. See if this can be composed with the previous starter
						var testChar = ilib.GlyphString._compose(composed, this.nextChar);
						if (prevCcc === 0 && typeof(testChar) !== 'undefined') { 
							// not blocked and there is a mapping 
							composed = testChar;
							ch += this.nextChar;
							this.nextChar = undefined;
						} else {
							// finished iterating, leave this.nextChar for the next next() call 
							notdone = false;
						}
					}
					prevCcc = nextCcc;
				}
			}
			return ch;
		};
		// Returns true if the last character returned by the "next" method included
		// spacing combining characters. If it does, then the character was wider than
		// just the base character alone, and the truncation code will not add it.
		this.wasSpacingCombining = function() {
			return this.spacingCombining;
		};
	};
	return new _chiterator(this);
};

/**
 * Truncate the current string at the given number of whole glyphs and return
 * the resulting string.
 * 
 * @param {number} length the number of whole glyphs to keep in the string
 * @return {string} a string truncated to the requested number of glyphs
 */
ilib.GlyphString.prototype.truncate = function(length) {
	var it = this.charIterator();
	var tr = "";
	for (var i = 0; i < length-1 && it.hasNext(); i++) {
		tr += it.next();
	}
	
	/*
	 * handle the last character separately. If it contains spacing combining
	 * accents, then we must assume that it uses up more horizontal space on
	 * the screen than just the base character by itself, and therefore this
	 * method will not truncate enough characters to fit in the given length.
	 * In this case, we have to chop off not only the combining characters, 
	 * but also the base character as well because the base without the
	 * combining accents is considered a different character.
	 */
	if (i < length && it.hasNext()) {
		var c = it.next();
		if (!it.wasSpacingCombining()) {
			tr += c;
		}
	}
	return tr;
};

/**
 * Truncate the current string at the given number of glyphs and add an ellipsis
 * to indicate that is more to the string. The ellipsis forms the last character
 * in the string, so the string is actually truncated at length-1 glyphs.
 * 
 * @param {number} length the number of whole glyphs to keep in the string 
 * including the ellipsis
 * @return {string} a string truncated to the requested number of glyphs
 * with an ellipsis
 */
ilib.GlyphString.prototype.ellipsize = function(length) {
	return this.truncate(length > 0 ? length-1 : 0) + "â¦";
};


/*
 * normstring.js - ilib normalized string subclass definition
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends strings.js glyphstring.js

/**
 * @class
 * Create a new normalized string instance. This string inherits from 
 * the ilib.GlyphString class, and adds the normalize method. It can be
 * used anywhere that a normal Javascript string is used. <p>
 * 
 * Depends directive: !depends normstring.js
 * 
 * @constructor
 * @param {string|ilib.String=} str initialize this instance with this string 
 */
ilib.NormString = function (str) {
	ilib.GlyphString.call(this, str);
};

ilib.NormString.prototype = new ilib.GlyphString();
ilib.NormString.parent = ilib.GlyphString;
ilib.NormString.prototype.constructor = ilib.NormString;

/**
 * Initialize the normalized string routines statically. This
 * is intended to be called in a dynamic-load version of ilib
 * to load the data need to normalize strings before any instances
 * of ilib.NormString are created.<p>
 * 
 * The options parameter may contain any of the following properties:
 * 
 * <ul>
 * <li><i>form</i> - {string} the normalization form to load
 * <li><i>script</i> - {string} load the normalization for this script. If the 
 * script is given as "all" then the normalization data for all scripts
 * is loaded at the same time
 * <li><i>sync</i> - {boolean} whether to load the files synchronously or not
 * <li><i>loadParams</i> - {Object} parameters to the loader function
 * <li><i>onLoad</i> - {function()} a function to call when the 
 * files are done being loaded
 * </ul>
 * 
 * @param {Object} options an object containing properties that govern 
 * how to initialize the data
 */
ilib.NormString.init = function(options) {
	if (!ilib._load || (typeof(ilib._load) !== 'function' && !(ilib._load instanceof ilib.Loader))) {
		// can't do anything
		return;
	}
	var form = "nfkc";
	var script = "all";
	var sync = true;
	var onLoad = undefined;
	var loadParams = undefined;
	if (options) {
		form = options.form || "nfkc";
		script = options.script || "all";
		sync = typeof(options.sync) !== 'undefined' ? options.sync : true;
		onLoad = typeof(options.onLoad) === 'function' ? options.onLoad : undefined;
		if (options.loadParams) {
			loadParams = options.loadParams;
		}
	}
	var formDependencies = {
		"nfd": ["nfd"],
		"nfc": ["nfd"],
		"nfkd": ["nfkd", "nfd"],
		"nfkc": ["nfkd", "nfd"]
	};
	var files = ["norm.json"];
	var forms = formDependencies[form];
	for (var f in forms) {
		files.push(forms[f] + "/" + script + ".json");
	}
	
	ilib._callLoadData(files, sync, loadParams, function(arr) {
		ilib.data.norm = arr[0];
		for (var i = 1; i < arr.length; i++) {
			if (typeof(arr[i]) !== 'undefined') {
				ilib.data.norm[forms[i-1]] = arr[i];
			}
		}
		
		if (onLoad) {
			onLoad(arr);
		}
	});
};

/**
 * Algorithmically decompose a precomposed Korean syllabic Hangul 
 * character into its individual combining Jamo characters. The given 
 * character must be in the range of Hangul characters U+AC00 to U+D7A3.
 * 
 * @private
 * @static
 * @param {number} cp code point of a Korean Hangul character to decompose
 * @return {string} the decomposed string of Jamo characters
 */
ilib.NormString._decomposeHangul = function (cp) {
	var sindex = cp - 0xAC00;
	var result = String.fromCharCode(0x1100 + sindex / 588) + 
			String.fromCharCode(0x1161 + (sindex % 588) / 28);
	var t = sindex % 28;
	if (t !== 0) {
		result += String.fromCharCode(0x11A7 + t);
	}
	return result;
};

/**
 * Expand one character according to the given canonical and 
 * compatibility mappings.
 *
 * @private
 * @static
 * @param {string} ch character to map
 * @param {Object} canon the canonical mappings to apply
 * @param {Object=} compat the compatibility mappings to apply, or undefined
 * if only the canonical mappings are needed
 * @return {string} the mapped character
 */
ilib.NormString._expand = function (ch, canon, compat) {
	var i, 
		expansion = "",
		n = ch.charCodeAt(0);
	if (ilib.GlyphString._isHangul(n)) {
		expansion = ilib.NormString._decomposeHangul(n);
	} else {
		var result = canon[ch];
		if (!result && compat) {
			result = compat[ch];
		}
		if (result && result !== ch) {
			for (i = 0; i < result.length; i++) {
				expansion += ilib.NormString._expand(result[i], canon, compat);
			}
		} else {
			expansion = ch;
		}
	}
	return expansion;
};

/**
 * Perform the Unicode Normalization Algorithm upon the string and return 
 * the resulting new string. The current string is not modified.
 * 
 * <h2>Forms</h2>
 * 
 * The forms of possible normalizations are defined by the <a 
 * href="http://www.unicode.org/reports/tr15/">Unicode Standard
 * Annex (UAX) 15</a>. The form parameter is a string that may have one 
 * of the following values:
 * 
 * <ul>
 * <li>nfd - Canonical decomposition. This decomposes characters into
 * their exactly equivalent forms. For example, "&uuml;" would decompose
 * into a "u" followed by the combining diaeresis character. 
 * <li>nfc - Canonical decomposition followed by canonical composition.
 * This decomposes and then recomposes character into their shortest
 * exactly equivalent forms by recomposing as many combining characters
 * as possible. For example, "&uuml;" followed by a combining 
 * macron character would decompose into a "u" followed by the combining 
 * macron characters the combining diaeresis character, and then be recomposed into
 * the u with macron and diaeresis "&#x1E7B;" character. The reason that
 * the "nfc" form decomposes and then recomposes is that combining characters
 * have a specific order under the Unicode Normalization Algorithm, and
 * partly composed characters such as the "&uuml;" followed by combining
 * marks may change the order of the combining marks when decomposed and
 * recomposed.
 * <li>nfkd - Compatibility decomposition. This decomposes characters
 * into compatible forms that may not be exactly equivalent semantically,
 * as well as performing canonical decomposition as well.
 * For example, the "&oelig;" ligature character decomposes to the two
 * characters "oe" because they are compatible even though they are not 
 * exactly the same semantically. 
 * <li>nfkc - Compatibility decomposition followed by canonical composition.
 * This decomposes characters into compatible forms, then recomposes
 * characters using the canonical composition. That is, it breaks down
 * characters into the compatible forms, and then recombines all combining
 * marks it can with their base characters. For example, the character
 * "&#x01FD;" would be normalized to "a&eacute;" by first decomposing
 * the character into "a" followed by "e" followed by the combining acute accent
 * combining mark, and then recomposed to an "a" followed by the "e"
 * with acute accent.
 * </ul>
 * 
 * <h2>Operation</h2>
 * 
 * Two strings a and b can be said to be canonically equivalent if 
 * normalize(a) = normalize(b)
 * under the nfc normalization form. Two strings can be said to be compatible if
 * normalize(a) = normalize(b) under the nfkc normalization form.<p>
 * 
 * The canonical normalization is often used to see if strings are 
 * equivalent to each other, and thus is useful when implementing parsing 
 * algorithms or exact matching algorithms. It can also be used to ensure
 * that any string output produces a predictable sequence of characters.<p>
 * 
 * Compatibility normalization 
 * does not always preserve the semantic meaning of all the characters, 
 * although this is sometimes the behaviour that you are after. It is useful, 
 * for example, when doing searches of user-input against text in documents 
 * where the matches are supposed to "fuzzy". In this case, both the query
 * string and the document string would be mapped to their compatibility 
 * normalized forms, and then compared.<p>
 * 
 * Compatibility normalization also does not guarantee round-trip conversion
 * to and from legacy character sets as the normalization is "lossy". It is 
 * akin to doing a lower- or upper-case conversion on text -- after casing,
 * you cannot tell what case each character is in the original string. It is 
 * good for matching and searching, but it rarely good for output because some 
 * distinctions or meanings in the original text have been lost.<p>
 * 
 * Note that W3C normalization for HTML also escapes and unescapes
 * HTML character entities such as "&amp;uuml;" for u with diaeresis. This
 * method does not do such escaping or unescaping. If normalization is required
 * for HTML strings with entities, unescaping should be performed on the string 
 * prior to calling this method.<p>
 * 
 * <h2>Data</h2>
 * 
 * Normalization requires a fair amount of mapping data, much of which you may 
 * not need for the characters expected in your texts. It is possible to assemble
 * a copy of ilib that saves space by only including normalization data for 
 * those scripts that you expect to encounter in your data.<p>
 * 
 * The normalization data is organized by normalization form and within there
 * by script. To include the normalization data for a particular script with
 * a particular normalization form, use the directive:
 * 
 * <pre><code>
 * !depends &lt;form&gt;/&lt;script&gt;.js
 * </code></pre>
 * 
 * Where &lt;form&gt is the normalization form ("nfd", "nfc", "nfkd", or "nfkc"), and
 * &lt;script&gt; is the ISO 15924 code for the script you would like to
 * support. Example: to load in the NFC data for Cyrillic, you would use:
 * 
 * <pre><code>
 * !depends nfc/Cyrl.js
 * </code></pre>
 * 
 * Note that because certain normalization forms include others in their algorithm, 
 * their data also depends on the data for the other forms. For example, if you 
 * include the "nfc" data for a script, you will automatically get the "nfd" data 
 * for that same script as well because the NFC algorithm does NFD normalization 
 * first. Here are the dependencies:<p>
 * 
 * <ul>
 * <li>NFD -> no dependencies
 * <li>NFC -> NFD
 * <li>NFKD -> NFD
 * <li>NFKC -> NFKD, NFD, NFC
 * </ul>
 * 
 * A special value for the script dependency is "all" which will cause the data for 
 * all scripts
 * to be loaded for that normalization form. This would be useful if you know that
 * you are going to normalize a lot of multilingual text or cannot predict which scripts
 * will appear in the input. Because the NFKC form depends on all others, you can 
 * get all of the data for all forms automatically by depending on "nfkc/all.js".
 * Note that the normalization data for practically all script automatically depend
 * on data for the Common script (code "Zyyy") which contains all of the characters
 * that are commonly used in many different scripts. Examples of characters in the
 * Common script are the ASCII punctuation characters, or the ASCII Arabic 
 * numerals "0" through "9".<p>
 * 
 * By default, none of the data for normalization is automatically 
 * included in the preassembled iliball.js file. 
 * If you would like to normalize strings, you must assemble
 * your own copy of ilib and explicitly include the normalization data
 * for those scripts as per the instructions above. This normalization method will 
 * produce output, even without the normalization data. However, the output will be 
 * simply the same thing as its input for all scripts 
 * except Korean Hangul and Jamo, which are decomposed and recomposed 
 * algorithmically and therefore do not rely on data.<p>
 * 
 * If characters are encountered for which there are no normalization data, they
 * will be passed through to the output string unmodified.
 * 
 * @param {string} form The normalization form requested
 * @return {ilib.String} a new instance of an ilib.String that has been normalized
 * according to the requested form. The current instance is not modified.
 */
ilib.NormString.prototype.normalize = function (form) {
	var i;
	
	if (typeof(form) !== 'string' || this.str.length === 0) {
		return new ilib.String(this.str);
	}
	
	var nfc = false,
		nfkd = false;
	
	switch (form) {
	default:
		break;
		
	case "nfc":
		nfc = true;
		break;
		
	case "nfkd":
		nfkd = true;
		break;
		
	case "nfkc":
		nfkd = true;
		nfc = true;
		break;
	}

	// decompose
	var decomp = "";
	
	if (nfkd) {
		var ch, it = ilib.String.prototype.charIterator.call(this);
		while (it.hasNext()) {
			ch = it.next();
			decomp += ilib.NormString._expand(ch, ilib.data.norm.nfd, ilib.data.norm.nfkd);
		}
	} else {
		var ch, it = ilib.String.prototype.charIterator.call(this);
		while (it.hasNext()) {
			ch = it.next();
			decomp += ilib.NormString._expand(ch, ilib.data.norm.nfd);
		}
	}

	// now put the combining marks in a fixed order by 
	// sorting on the combining class
	function compareByCCC(left, right) {
		return ilib.data.norm.ccc[left] - ilib.data.norm.ccc[right]; 
	}
	
	function ccc(c) {
		return ilib.data.norm.ccc[c] || 0;
	}
		
	var dstr = new ilib.String(decomp);
	var it = dstr.charIterator();
	var cpArray = [];

	// easier to deal with as an array of chars
	while (it.hasNext()) {
		cpArray.push(it.next());
	}
	
	i = 0;
	while (i < cpArray.length) {
		if (typeof(ilib.data.norm.ccc[cpArray[i]]) !== 'undefined' && ccc(cpArray[i]) !== 0) {
			// found a non-starter... rearrange all the non-starters until the next starter
			var end = i+1;
			while (end < cpArray.length &&
					typeof(ilib.data.norm.ccc[cpArray[end]]) !== 'undefined' && 
					ccc(cpArray[end]) !== 0) {
				end++;
			}
			
			// simple sort of the non-starter chars
			if (end - i > 1) {
				cpArray = cpArray.slice(0,i).concat(cpArray.slice(i, end).sort(compareByCCC), cpArray.slice(end));
			}
		}
		i++;
	}
	
	if (nfc) {
		i = 0;
		while (i < cpArray.length) {
			if (typeof(ilib.data.norm.ccc[cpArray[i]]) === 'undefined' || ilib.data.norm.ccc[cpArray[i]] === 0) {
				// found a starter... find all the non-starters until the next starter. Must include
				// the next starter because under some odd circumstances, two starters sometimes recompose 
				// together to form another character
				var end = i+1;
				var notdone = true;
				while (end < cpArray.length && notdone) {
					if (typeof(ilib.data.norm.ccc[cpArray[end]]) !== 'undefined' && 
						ilib.data.norm.ccc[cpArray[end]] !== 0) {
						if (ccc(cpArray[end-1]) < ccc(cpArray[end])) { 
							// not blocked 
							var testChar = ilib.GlyphString._compose(cpArray[i], cpArray[end]);
							if (typeof(testChar) !== 'undefined') {
								cpArray[i] = testChar;
								
								// delete the combining char
								cpArray.splice(end,1);	
								
								// restart the iteration, just in case there is more to recompose with the new char
								end = i;
							}
						}
						end++;
					} else {
						// found the next starter. See if this can be composed with the previous starter
						var testChar = ilib.GlyphString._compose(cpArray[i], cpArray[end]);
						if (ccc(cpArray[end-1]) === 0 && typeof(testChar) !== 'undefined') { 
							// not blocked and there is a mapping 
							cpArray[i] = testChar;
							
							// delete the combining char
							cpArray.splice(end,1);
							
							// restart the iteration, just in case there is more to recompose with the new char
							end = i+1;
						} else {
							// finished iterating 
							notdone = false;
						}
					}
				}
			}
			i++;
		}
	}
	
	return new ilib.String(cpArray.length > 0 ? cpArray.join("") : "");
};
	
/**
 * @override
 * Return an iterator that will step through all of the characters
 * in the string one at a time, taking care to step through decomposed 
 * characters and through surrogate pairs in UTF-16 encoding 
 * properly. <p>
 * 
 * The NormString class will return decomposed Unicode characters
 * as a single unit that a user might see on the screen. If the 
 * next character in the iteration is a base character and it is 
 * followed by combining characters, the base and all its following 
 * combining characters are returned as a single unit.<p>
 * 
 * The standard Javascript String's charAt() method only
 * returns information about a particular 16-bit character in the 
 * UTF-16 encoding scheme.
 * If the index is pointing to a low- or high-surrogate character,
 * it will return that surrogate character rather 
 * than the surrogate pair which represents a character 
 * in the supplementary planes.<p>
 * 
 * The iterator instance returned has two methods, hasNext() which
 * returns true if the iterator has more characters to iterate through,
 * and next() which returns the next character.<p>
 * 
 * @return {Object} an iterator 
 * that iterates through all the characters in the string
 */
ilib.NormString.prototype.charIterator = function() {
	var it = ilib.String.prototype.charIterator.call(this);
	
	/**
	 * @constructor
	 */
	function _chiterator (istring) {
		/**
		 * @private
		 */
		var ccc = function(c) {
			return ilib.data.norm.ccc[c] || 0;
		};

		this.index = 0;
		this.hasNext = function () {
			return !!this.nextChar || it.hasNext();
		};
		this.next = function () {
			var ch = this.nextChar || it.next(),
				prevCcc = ccc(ch),
				nextCcc,
				composed = ch;
			
			this.nextChar = undefined;
			
			if (ilib.data.norm.ccc && 
					(typeof(ilib.data.norm.ccc[ch]) === 'undefined' || ccc(ch) === 0)) {
				// found a starter... find all the non-starters until the next starter. Must include
				// the next starter because under some odd circumstances, two starters sometimes recompose 
				// together to form another character
				var notdone = true;
				while (it.hasNext() && notdone) {
					this.nextChar = it.next();
					nextCcc = ccc(this.nextChar);
					if (typeof(ilib.data.norm.ccc[this.nextChar]) !== 'undefined' && nextCcc !== 0) {
						ch += this.nextChar;
						this.nextChar = undefined;
					} else {
						// found the next starter. See if this can be composed with the previous starter
						var testChar = ilib.GlyphString._compose(composed, this.nextChar);
						if (prevCcc === 0 && typeof(testChar) !== 'undefined') { 
							// not blocked and there is a mapping 
							composed = testChar;
							ch += this.nextChar;
							this.nextChar = undefined;
						} else {
							// finished iterating, leave this.nextChar for the next next() call 
							notdone = false;
						}
					}
					prevCcc = nextCcc;
				}
			}
			return ch;
		};
	};
	return new _chiterator(this);
};


ilib.data.collation = {"standard":{"scripts":["Latn"],"bits":[5,3,1,1],"map":{"A":[0],"B":[1],"C":[2],"D":[3],"E":[4],"F":[5],"G":[6],"H":[7],"I":[8],"J":[9],"K":[10],"L":[11],"M":[12],"N":[13],"O":[14],"P":[15],"Q":[16],"R":[17],"S":[18],"T":[19],"U":[20],"V":[21],"W":[22],"X":[23],"Y":[24],"Z":[25],"a":[0,0,1],"b":[1,0,1],"c":[2,0,1],"d":[3,0,1],"e":[4,0,1],"f":[5,0,1],"g":[6,0,1],"h":[7,0,1],"i":[8,0,1],"j":[9,0,1],"k":[10,0,1],"l":[11,0,1],"m":[12,0,1],"n":[13,0,1],"o":[14,0,1],"p":[15,0,1],"q":[16,0,1],"r":[17,0,1],"s":[18,0,1],"t":[19,0,1],"u":[20,0,1],"v":[21,0,1],"w":[22,0,1],"x":[23,0,1],"y":[24,0,1],"z":[25,0,1],"Ã ":[0,1,1],"Ã¡":[0,2,1],"Ã¢":[0,3,1],"Ã£":[0,4,1],"Ã¤":[0,5,1],"Ã¥":[0,6,1],"Ã¦":[[0,7,1],[4,0,1]],"Ã§":[2,1,1],"Ã¨":[4,1,1],"Ã©":[4,2,1],"Ãª":[4,3,1],"Ã«":[4,4,1],"Ã°":[3,1,1],"Ã¾":[3,2,1],"Ã¬":[8,1,1],"Ã­":[8,2,1],"Ã®":[8,3,1],"Ã¯":[8,4,1],"Ã±":[13,1,1],"Ã²":[14,1,1],"Ã³":[14,2,1],"Ã´":[14,3,1],"Ãµ":[14,4,1],"Ã¶":[14,5,1],"Ã¸":[14,6,1],"Ã¹":[20,1,1],"Ãº":[20,2,1],"Ã»":[20,3,1],"Ã¼":[20,4,1],"Ã½":[24,1,1],"Ã¿":[24,2,1],"Ã":[0,1,0],"Ã":[0,2,0],"Ã":[0,3,0],"Ã":[0,4,0],"Ã":[0,5,0],"Ã":[0,6,0],"Ã":[[0,7,0],[4]],"Ã":[2,1,0],"Ã":[3,1,0],"Ã":[3,2,0],"Ã":[4,1,0],"Ã":[4,2,0],"Ã":[4,3,0],"Ã":[4,4,0],"Ã":[8,1,0],"Ã":[8,2,0],"Ã":[8,3,0],"Ã":[8,4,0],"Ã":[13,1,0],"Ã":[14,1,0],"Ã":[14,2,0],"Ã":[14,3,0],"Ã":[14,4,0],"Ã":[14,5,0],"Ã":[14,6,0],"Ã":[20,1,0],"Ã":[20,2,0],"Ã":[20,3,0],"Ã":[20,4,0],"Ã":[24,1,0],"Ã":[[18,1,1],[25,0,1]],"aÌ":[0,1,1,1],"aÌ":[0,2,1,1],"aÌ":[0,3,1,1],"aÌ":[0,4,1,1],"aÌ":[0,5,1,1],"aÌ":[0,6,1,1],"cÌ§":[2,1,1,1],"eÌ":[4,1,1,1],"eÌ":[4,2,1,1],"eÌ":[4,3,1,1],"eÌ":[4,4,1,1],"iÌ":[8,1,1,1],"iÌ":[8,2,1,1],"iÌ":[8,3,1,1],"iÌ":[8,4,1,1],"nÌ":[13,1,1,1],"oÌ":[14,1,1,1],"oÌ":[14,2,1,1],"oÌ":[14,3,1,1],"oÌ":[14,4,1,1],"oÌ":[14,5,1,1],"uÌ":[20,1,1,1],"uÌ":[20,2,1,1],"uÌ":[20,3,1,1],"uÌ":[20,4,1,1],"yÌ":[24,1,1,1],"yÌ":[24,2,1,1],"AÌ":[0,1,0,1],"AÌ":[0,2,0,1],"AÌ":[0,3,0,1],"AÌ":[0,4,0,1],"AÌ":[0,5,0,1],"AÌ":[0,6,0,1],"CÌ§":[2,1,0,1],"EÌ":[4,1,0,1],"EÌ":[4,2,0,1],"EÌ":[4,3,0,1],"EÌ":[4,4,0,1],"IÌ":[8,1,0,1],"IÌ":[8,2,0,1],"IÌ":[8,3,0,1],"IÌ":[8,4,0,1],"NÌ":[13,1,0,1],"OÌ":[14,1,0,1],"OÌ":[14,2,0,1],"OÌ":[14,3,0,1],"OÌ":[14,4,0,1],"OÌ":[14,5,0,1],"UÌ":[20,1,0,1],"UÌ":[20,2,0,1],"UÌ":[20,3,0,1],"UÌ":[20,4,0,1],"YÌ":[24,1,0,1]}}};
ilib.data.collation_de = {"phonebook":{"scripts":["Latn"],"bits":[5,3,1,1],"map":{"A":[0],"B":[1],"C":[2],"D":[3],"E":[4],"F":[5],"G":[6],"H":[7],"I":[8],"J":[9],"K":[10],"L":[11],"M":[12],"N":[13],"O":[14],"P":[15],"Q":[16],"R":[17],"S":[18],"T":[19],"U":[20],"V":[21],"W":[22],"X":[23],"Y":[24],"Z":[25],"a":[0,0,1],"b":[1,0,1],"c":[2,0,1],"d":[3,0,1],"e":[4,0,1],"f":[5,0,1],"g":[6,0,1],"h":[7,0,1],"i":[8,0,1],"j":[9,0,1],"k":[10,0,1],"l":[11,0,1],"m":[12,0,1],"n":[13,0,1],"o":[14,0,1],"p":[15,0,1],"q":[16,0,1],"r":[17,0,1],"s":[18,0,1],"t":[19,0,1],"u":[20,0,1],"v":[21,0,1],"w":[22,0,1],"x":[23,0,1],"y":[24,0,1],"z":[25,0,1],"Ã ":[0,1,1],"Ã¡":[0,2,1],"Ã¢":[0,3,1],"Ã£":[0,4,1],"Ã¤":[[0,0,1],[4,0,1]],"Ã¥":[0,6,1],"Ã¦":[[0,7,1],[4,0,1]],"Ã§":[2,1,1],"Ã¨":[4,1,1],"Ã©":[4,2,1],"Ãª":[4,3,1],"Ã«":[4,4,1],"Ã°":[3,1,1],"Ã¾":[3,2,1],"Ã¬":[8,1,1],"Ã­":[8,2,1],"Ã®":[8,3,1],"Ã¯":[8,4,1],"Ã±":[13,1,1],"Ã²":[14,1,1],"Ã³":[14,2,1],"Ã´":[14,3,1],"Ãµ":[14,4,1],"Ã¶":[[14,0,1],[4,0,1]],"Ã¸":[14,6,1],"Ã¹":[20,1,1],"Ãº":[20,2,1],"Ã»":[20,3,1],"Ã¼":[[20,0,1],[4,0,1]],"Ã½":[24,1,1],"Ã¿":[24,2,1],"Ã":[0,1,0],"Ã":[0,2,0],"Ã":[0,3,0],"Ã":[0,4,0],"Ã":[[0],[4]],"Ã":[0,6,0],"Ã":[[0,7,0],[4]],"Ã":[2,1,0],"Ã":[3,1,0],"Ã":[3,2,0],"Ã":[4,1,0],"Ã":[4,2,0],"Ã":[4,3,0],"Ã":[4,4,0],"Ã":[8,1,0],"Ã":[8,2,0],"Ã":[8,3,0],"Ã":[8,4,0],"Ã":[13,1,0],"Ã":[14,1,0],"Ã":[14,2,0],"Ã":[14,3,0],"Ã":[14,4,0],"Ã":[[14],[4]],"Ã":[14,6,0],"Ã":[20,1,0],"Ã":[20,2,0],"Ã":[20,3,0],"Ã":[[20],[4]],"Ã":[24,1,0],"Ã":[[18,1,1],[25,0,1]],"aÌ":[0,1,1,1],"aÌ":[0,2,1,1],"aÌ":[0,3,1,1],"aÌ":[0,4,1,1],"aÌ":[[0,0,1],[4,0,1]],"aÌ":[0,6,1,1],"cÌ§":[2,1,1,1],"eÌ":[4,1,1,1],"eÌ":[4,2,1,1],"eÌ":[4,3,1,1],"eÌ":[4,4,1,1],"iÌ":[8,1,1,1],"iÌ":[8,2,1,1],"iÌ":[8,3,1,1],"iÌ":[8,4,1,1],"nÌ":[13,1,1,1],"oÌ":[14,1,1,1],"oÌ":[14,2,1,1],"oÌ":[14,3,1,1],"oÌ":[14,4,1,1],"oÌ":[[14,0,1],[4,0,1]],"uÌ":[20,1,1,1],"uÌ":[20,2,1,1],"uÌ":[20,3,1,1],"uÌ":[[20,0,1],[4,0,1]],"yÌ":[24,1,1,1],"yÌ":[24,2,1,1],"AÌ":[0,1,0,1],"AÌ":[0,2,0,1],"AÌ":[0,3,0,1],"AÌ":[0,4,0,1],"AÌ":[[0],[4]],"AÌ":[0,6,0,1],"CÌ§":[2,1,0,1],"EÌ":[4,1,0,1],"EÌ":[4,2,0,1],"EÌ":[4,3,0,1],"EÌ":[4,4,0,1],"IÌ":[8,1,0,1],"IÌ":[8,2,0,1],"IÌ":[8,3,0,1],"IÌ":[8,4,0,1],"NÌ":[13,1,0,1],"OÌ":[14,1,0,1],"OÌ":[14,2,0,1],"OÌ":[14,3,0,1],"OÌ":[14,4,0,1],"OÌ":[[14],[4]],"UÌ":[20,1,0,1],"UÌ":[20,2,0,1],"UÌ":[20,3,0,1],"UÌ":[[20],[4]],"YÌ":[24,1,0,1]}}};
ilib.data.collation_es = {"traditional":{"scripts":["Latn"],"bits":[5,3,1,1],"map":{"A":[0],"B":[1],"C":[2],"Ch":[3,0,0,1],"CH":[3],"D":[4],"E":[5],"F":[6],"G":[7],"H":[8],"I":[9],"J":[10],"K":[11],"L":[12],"Ll":[13,0,0,1],"LL":[13],"M":[14],"N":[15],"Ã":[16],"O":[17],"P":[18],"Q":[19],"R":[20],"S":[21],"T":[22],"U":[23],"V":[24],"W":[25],"X":[26],"Y":[27],"Z":[28],"a":[0,0,1],"b":[1,0,1],"c":[2,0,1],"ch":[3,0,1],"d":[4,0,1],"e":[5,0,1],"f":[6,0,1],"g":[7,0,1],"h":[8,0,1],"i":[9,0,1],"j":[10,0,1],"k":[11,0,1],"l":[12,0,1],"ll":[13,0,1],"m":[14,0,1],"n":[15,0,1],"Ã±":[16,0,1],"o":[17,0,1],"p":[18,0,1],"q":[19,0,1],"r":[20,0,1],"s":[21,0,1],"t":[22,0,1],"u":[23,0,1],"v":[24,0,1],"w":[25,0,1],"x":[26,0,1],"y":[27,0,1],"z":[28,0,1],"Ã ":[0,1,1],"Ã¡":[0,2,1],"Ã¢":[0,3,1],"Ã£":[0,4,1],"Ã¤":[0,5,1],"Ã¥":[0,6,1],"Ã¦":[[0,7,1],[5,0,1]],"Ã§":[2,1,1],"Ã¨":[5,1,1],"Ã©":[5,2,1],"Ãª":[5,3,1],"Ã«":[5,4,1],"Ã°":[4,1,1],"Ã¾":[4,2,1],"Ã¬":[9,1,1],"Ã­":[9,2,1],"Ã®":[9,3,1],"Ã¯":[9,4,1],"Ã²":[17,1,1],"Ã³":[17,2,1],"Ã´":[17,3,1],"Ãµ":[17,4,1],"Ã¶":[17,5,1],"Ã¸":[17,6,1],"Ã¹":[23,1,1],"Ãº":[23,2,1],"Ã»":[23,3,1],"Ã¼":[23,4,1],"Ã½":[27,1,1],"Ã¿":[27,2,1],"Ã":[0,1,0],"Ã":[0,2,0],"Ã":[0,3,0],"Ã":[0,4,0],"Ã":[0,5,0],"Ã":[0,6,0],"Ã":[[0,7,0],[5]],"Ã":[2,1,0],"Ã":[4,1,0],"Ã":[4,2,0],"Ã":[5,1,0],"Ã":[5,2,0],"Ã":[5,3,0],"Ã":[5,4,0],"Ã":[9,1,0],"Ã":[9,2,0],"Ã":[9,3,0],"Ã":[9,4,0],"Ã":[17,1,0],"Ã":[17,2,0],"Ã":[17,3,0],"Ã":[17,4,0],"Ã":[17,5,0],"Ã":[17,6,0],"Ã":[23,1,0],"Ã":[23,2,0],"Ã":[23,3,0],"Ã":[23,4,0],"Ã":[27,1,0],"Ã":[[21,1,1],[28,0,1]],"aÌ":[0,1,1,1],"aÌ":[0,2,1,1],"aÌ":[0,3,1,1],"aÌ":[0,4,1,1],"aÌ":[0,5,1,1],"aÌ":[0,6,1,1],"cÌ§":[2,1,1,1],"eÌ":[5,1,1,1],"eÌ":[5,2,1,1],"eÌ":[5,3,1,1],"eÌ":[5,4,1,1],"iÌ":[9,1,1,1],"iÌ":[9,2,1,1],"iÌ":[9,3,1,1],"iÌ":[9,4,1,1],"nÌ":[16,1,1,1],"oÌ":[17,1,1,1],"oÌ":[17,2,1,1],"oÌ":[17,3,1,1],"oÌ":[17,4,1,1],"oÌ":[17,5,1,1],"uÌ":[23,1,1,1],"uÌ":[23,2,1,1],"uÌ":[23,3,1,1],"uÌ":[23,4,1,1],"yÌ":[27,1,1,1],"yÌ":[27,2,1,1],"AÌ":[0,1,0,1],"AÌ":[0,2,0,1],"AÌ":[0,3,0,1],"AÌ":[0,4,0,1],"AÌ":[0,5,0,1],"AÌ":[0,6,0,1],"CÌ§":[2,1,0,1],"EÌ":[5,1,0,1],"EÌ":[5,2,0,1],"EÌ":[5,3,0,1],"EÌ":[5,4,0,1],"IÌ":[9,1,0,1],"IÌ":[9,2,0,1],"IÌ":[9,3,0,1],"IÌ":[9,4,0,1],"NÌ":[16,1,0,1],"OÌ":[17,1,0,1],"OÌ":[17,2,0,1],"OÌ":[17,3,0,1],"OÌ":[17,4,0,1],"OÌ":[17,5,0,1],"UÌ":[23,1,0,1],"UÌ":[23,2,0,1],"UÌ":[23,3,0,1],"UÌ":[23,4,0,1],"YÌ":[27,1,0,1]}}};
ilib.data.collation_et = {"standard":{"scripts":["Latn"],"bits":[5,3,1,1],"map":{"A":[0],"B":[1],"C":[2],"D":[3],"E":[4],"F":[5],"G":[6],"H":[7],"I":[8],"J":[9],"K":[10],"L":[11],"M":[12],"N":[13],"O":[14],"P":[15],"Q":[16],"R":[17],"S":[18],"Å ":[19],"Z":[20],"Å½":[21],"T":[22],"U":[23],"V":[24],"W":[25],"Ã":[26],"Ã":[27],"Ã":[28],"Ã":[29],"X":[30],"Y":[31],"a":[0,0,1],"b":[1,0,1],"c":[2,0,1],"d":[3,0,1],"e":[4,0,1],"f":[5,0,1],"g":[6,0,1],"h":[7,0,1],"i":[8,0,1],"j":[9,0,1],"k":[10,0,1],"l":[11,0,1],"m":[12,0,1],"n":[13,0,1],"o":[14,0,1],"p":[15,0,1],"q":[16,0,1],"r":[17,0,1],"s":[18,0,1],"Å¡":[19,0,1],"z":[20,0,1],"Å¾":[21,0,1],"t":[22,0,1],"u":[23,0,1],"v":[24,0,1],"w":[25,0,1],"Ãµ":[26,0,1],"Ã¤":[27,0,1],"Ã¶":[28,0,1],"Ã¼":[29,0,1],"x":[30,0,1],"y":[31,0,1],"Ã ":[0,1,1],"Ã¡":[0,2,1],"Ã¢":[0,3,1],"Ã£":[0,4,1],"Ã¥":[0,5,1],"Ã¦":[[0,7,1],[4,0,1]],"Ã§":[2,1,1],"Ã¨":[4,1,1],"Ã©":[4,2,1],"Ãª":[4,3,1],"Ã«":[4,4,1],"Ã°":[3,1,1],"Ã¾":[3,2,1],"Ã¬":[8,1,1],"Ã­":[8,2,1],"Ã®":[8,3,1],"Ã¯":[8,4,1],"Ã±":[13,1,1],"Ã²":[14,1,1],"Ã³":[14,2,1],"Ã´":[14,3,1],"Ã¸":[14,4,1],"Ã¹":[23,1,1],"Ãº":[23,1,1],"Ã»":[23,3,1],"Ã½":[31,1,1],"Ã¿":[31,2,1],"Ã":[0,1,0],"Ã":[0,2,0],"Ã":[0,3,0],"Ã":[0,4,0],"Ã":[0,5,0],"Ã":[[0,7,0],[4]],"Ã":[2,1,0],"Ã":[3,1,0],"Ã":[3,2,0],"Ã":[4,1,0],"Ã":[4,2,0],"Ã":[4,3,0],"Ã":[4,4,0],"Ã":[8,1,0],"Ã":[8,2,0],"Ã":[8,3,0],"Ã":[8,4,0],"Ã":[13,1,0],"Ã":[14,1,0],"Ã":[14,2,0],"Ã":[14,3,0],"Ã":[14,4,0],"Ã":[23,1,0],"Ã":[23,2,0],"Ã":[23,3,0],"Ã":[31,1,0],"Ã":[[18,1,1],[25,0,1]],"aÌ":[0,1,1,1],"aÌ":[0,2,1,1],"aÌ":[0,3,1,1],"aÌ":[0,4,1,1],"aÌ":[0,5,1,1],"cÌ§":[2,1,1,1],"eÌ":[4,1,1,1],"eÌ":[4,2,1,1],"eÌ":[4,3,1,1],"eÌ":[4,4,1,1],"iÌ":[8,1,1,1],"iÌ":[8,2,1,1],"iÌ":[8,3,1,1],"iÌ":[8,4,1,1],"nÌ":[13,1,1,1],"oÌ":[14,1,1,1],"oÌ":[14,2,1,1],"oÌ":[14,3,1,1],"uÌ":[20,1,1,1],"uÌ":[20,2,1,1],"uÌ":[20,3,1,1],"yÌ":[24,1,1,1],"yÌ":[24,2,1,1],"AÌ":[0,1,0,1],"AÌ":[0,2,0,1],"AÌ":[0,3,0,1],"AÌ":[0,4,0,1],"AÌ":[0,5,0,1],"CÌ§":[2,1,0,1],"EÌ":[4,1,0,1],"EÌ":[4,2,0,1],"EÌ":[4,3,0,1],"EÌ":[4,4,0,1],"IÌ":[8,1,0,1],"IÌ":[8,2,0,1],"IÌ":[8,3,0,1],"IÌ":[8,4,0,1],"NÌ":[13,1,0,1],"OÌ":[14,1,0,1],"OÌ":[14,2,0,1],"OÌ":[14,3,0,1],"UÌ":[23,1,0,1],"UÌ":[23,2,0,1],"UÌ":[23,3,0,1],"YÌ":[31,1,0,1],"SÌ":[19,0,0,1],"ZÌ":[21,0,0,1],"OÌ":[26,0,0,1],"AÌ":[27,0,0,1],"OÌ":[28,0,0,1],"UÌ":[29,0,0,1],"sÌ":[19,0,1,1],"zÌ":[21,0,1,1],"oÌ":[26,0,1,1],"aÌ":[27,0,1,1],"oÌ":[28,0,1,1],"uÌ":[29,0,1,1]}}};
ilib.data.collation_lt = {"standard":{"scripts":["Latn"],"bits":[6,3,1,1],"map":{"A":[0],"Ä":[1],"B":[2],"C":[3],"Ä":[4],"D":[5],"E":[6],"Ä":[7],"Ä":[8],"F":[9],"G":[10],"H":[11],"I":[12],"Ä®":[13],"Y":[14],"J":[15],"K":[16],"L":[17],"M":[18],"N":[19],"O":[20],"P":[21],"R":[22],"S":[23],"Å ":[24],"T":[25],"U":[26],"Å²":[27],"Åª":[28],"V":[29],"Z":[30],"Å½":[31],"Q":[32],"W":[33],"X":[34],"a":[0,0,1],"Ä":[1,0,1],"b":[2,0,1],"c":[3,0,1],"Ä":[4,0,1],"d":[5,0,1],"e":[6,0,1],"Ä":[7,0,1],"Ä":[8,0,1],"f":[9,0,1],"g":[10,0,1],"h":[11,0,1],"i":[12,0,1],"Ä¯":[13,0,1],"y":[14,0,1],"j":[15,0,1],"k":[16,0,1],"l":[17,0,1],"m":[18,0,1],"n":[19,0,1],"o":[20,0,1],"p":[21,0,1],"r":[22,0,1],"s":[23,0,1],"Å¡":[24,0,1],"t":[25,0,1],"u":[26,0,1],"Å³":[27,0,1],"Å«":[28,0,1],"v":[29,0,1],"z":[30,0,1],"Å¾":[31,0,1],"q":[32,0,1],"w":[33,0,1],"x":[34,0,1],"Ã ":[0,1,1],"Ã¡":[0,2,1],"Ã¢":[0,3,1],"Ã£":[0,4,1],"Ã¤":[0,5,1],"Ã¥":[0,6,1],"Ã¦":[[0,7,1],[6,0,1]],"Ã§":[6,1,1],"Ã¨":[6,1,1],"Ã©":[6,2,1],"Ãª":[6,3,1],"Ã«":[6,4,1],"Ã°":[5,1,1],"Ã¾":[5,2,1],"Ã¬":[12,1,1],"Ã­":[12,2,1],"Ã®":[12,3,1],"Ã¯":[12,4,1],"Ã±":[19,1,1],"Ã²":[20,1,1],"Ã³":[20,2,1],"Ã´":[20,3,1],"Ãµ":[20,4,1],"Ã¶":[20,5,1],"Ã¸":[20,6,1],"Ã¹":[26,1,1],"Ãº":[26,2,1],"Ã»":[26,3,1],"Ã¼":[26,4,1],"Ã½":[14,1,1],"Ã¿":[14,2,1],"Ã":[0,1,0],"Ã":[0,2,0],"Ã":[0,3,0],"Ã":[0,4,0],"Ã":[0,5,0],"Ã":[0,6,0],"Ã":[[0,7,0],[6]],"Ã":[6,1,0],"Ã":[5,1,0],"Ã":[5,2,0],"Ã":[6,1,0],"Ã":[6,2,0],"Ã":[6,3,0],"Ã":[6,4,0],"Ã":[12,1,0],"Ã":[12,2,0],"Ã":[12,3,0],"Ã":[12,4,0],"Ã":[19,1,0],"Ã":[20,1,0],"Ã":[20,2,0],"Ã":[20,3,0],"Ã":[20,4,0],"Ã":[20,5,0],"Ã":[20,6,0],"Ã":[26,1,0],"Ã":[26,2,0],"Ã":[26,3,0],"Ã":[26,4,0],"Ã":[14,1,0],"Ã":[[23,1,1],[30,0,1]],"AÌ¨":[1,0,0,1],"CÌ":[4,0,0,1],"EÌ¨":[7,0,0,1],"EÌ":[8,0,0,1],"IÌ¨":[13,0,0,1],"SÌ":[24,0,0,1],"UÌ¨":[27,0,0,1],"UÌ":[28,0,0,1],"ZÌ":[31,0,0,1],"aÌ¨":[1,0,1,1],"cÌ":[4,0,1,1],"eÌ¨":[7,0,1,1],"eÌ":[8,0,1,1],"iÌ¨":[13,0,1,1],"sÌ":[24,0,1,1],"uÌ¨":[27,0,1,1],"uÌ":[28,0,1,1],"zÌ":[31,0,1,1],"aÌ":[0,1,1,1],"aÌ":[0,2,1,1],"aÌ":[0,3,1,1],"aÌ":[0,4,1,1],"aÌ":[0,5,1,1],"aÌ":[0,6,1,1],"cÌ§":[6,1,1,1],"eÌ":[6,1,1,1],"eÌ":[6,2,1,1],"eÌ":[6,3,1,1],"eÌ":[6,4,1,1],"iÌ":[12,1,1,1],"iÌ":[12,2,1,1],"iÌ":[12,3,1,1],"iÌ":[12,4,1,1],"nÌ":[19,1,1,1],"oÌ":[20,1,1,1],"oÌ":[20,2,1,1],"oÌ":[20,3,1,1],"oÌ":[20,4,1,1],"oÌ":[20,5,1,1],"uÌ":[26,1,1,1],"uÌ":[26,2,1,1],"uÌ":[26,3,1,1],"uÌ":[26,4,1,1],"yÌ":[14,1,1,1],"yÌ":[14,2,1,1],"AÌ":[0,1,0,1],"AÌ":[0,2,0,1],"AÌ":[0,3,0,1],"AÌ":[0,4,0,1],"AÌ":[0,5,0,1],"AÌ":[0,6,0,1],"CÌ§":[6,1,0,1],"EÌ":[6,1,0,1],"EÌ":[6,3,0,1],"EÌ":[6,4,0,1],"IÌ":[12,1,0,1],"IÌ":[12,2,0,1],"IÌ":[12,3,0,1],"IÌ":[12,4,0,1],"NÌ":[19,1,0,1],"OÌ":[20,1,0,1],"OÌ":[20,2,0,1],"OÌ":[20,3,0,1],"OÌ":[20,4,0,1],"OÌ":[20,5,0,1],"UÌ":[26,1,0,1],"UÌ":[26,2,0,1],"UÌ":[26,3,0,1],"UÌ":[26,4,0,1],"YÌ":[14,1,0,1]}}};
ilib.data.collation_lv = {"standard":{"scripts":["Latn"],"bits":[6,3,1,1],"map":{"A":[0],"Ä":[1],"B":[2],"C":[3],"Ä":[4],"D":[5],"E":[6],"Ä":[7],"F":[8],"G":[9],"Ä¢":[10],"H":[11],"I":[12],"Y":[12,1],"Äª":[13],"J":[14],"K":[15],"Ä¶":[16],"L":[17],"Ä»":[18],"M":[19],"N":[20],"Å":[21],"O":[22],"Å":[22,1],"P":[23],"Q":[24],"R":[25],"Å":[26],"S":[27],"Å ":[28],"T":[29],"U":[30],"Åª":[31],"V":[32],"Z":[33],"Å½":[34],"W":[35],"X":[36],"a":[0,0,1],"Ä":[1,0,1],"b":[2,0,1],"c":[3,0,1],"Ä":[4,0,1],"d":[5,0,1],"e":[6,0,1],"Ä":[7,0,1],"f":[8,0,1],"g":[9,0,1],"Ä£":[10,0,1],"h":[11,0,1],"i":[12,0,1],"y":[12,1,1],"Ä«":[13,0,1],"j":[14,0,1],"k":[15,0,1],"Ä·":[16,0,1],"l":[17,0,1],"Ä¼":[18,0,1],"m":[19,0,1],"n":[20,0,1],"Å":[21,0,1],"o":[22,0,1],"p":[23,0,1],"q":[24,0,1],"r":[25,0,1],"Å":[26,0,1],"s":[27,0,1],"Å¡":[28,0,1],"t":[29,0,1],"u":[30,0,1],"Å«":[31,0,1],"v":[32,0,1],"z":[33,0,1],"Å¾":[34,0,1],"w":[35,0,1],"x":[36,0,1],"Ã ":[0,1,1],"Ã¡":[0,2,1],"Ã¢":[0,3,1],"Ã£":[0,4,1],"Ã¤":[0,5,1],"Ã¥":[0,6,1],"Ã¦":[[0,0,1],[6,0,1]],"Ã§":[3,1,1],"Ã¨":[6,1,1],"Ã©":[6,2,1],"Ãª":[6,3,1],"Ã«":[6,4,1],"Ã°":[5,1,1],"Ã¾":[5,2,1],"Ã¬":[12,1,1],"Ã­":[12,2,1],"Ã®":[12,3,1],"Ã¯":[12,4,1],"Ã±":[20,1,1],"Ã²":[22,1,1],"Ã³":[22,2,1],"Ã´":[22,3,1],"Ãµ":[22,4,1],"Ã¶":[22,5,1],"Ã¸":[22,6,1],"Ã¹":[30,1,1],"Ãº":[30,2,1],"Ã»":[30,3,1],"Ã¼":[30,4,1],"Ã½":[12,2,1],"Ã¿":[12,3,1],"Ã":[0,1,0],"Ã":[0,2,0],"Ã":[0,3,0],"Ã":[0,4,0],"Ã":[0,5,0],"Ã":[0,6,0],"Ã":[[0],[6]],"Ã":[3,1,0],"Ã":[5,1,0],"Ã":[5,2,0],"Ã":[6,1,0],"Ã":[6,2,0],"Ã":[6,3,0],"Ã":[6,4,0],"Ã":[12,1,0],"Ã":[12,2,0],"Ã":[12,3,0],"Ã":[12,4,0],"Ã":[20,1,0],"Ã":[22,1,0],"Ã":[22,2,0],"Ã":[22,3,0],"Ã":[22,5,0],"Ã":[22,6,0],"Ã":[30,1,0],"Ã":[30,2,0],"Ã":[30,3,0],"Ã":[30,4,0],"Ã":[12,2,0],"Ã":[[27,1,1],[33,0,1]],"AÌ":[1,0,0,1],"CÌ":[4,0,0,1],"EÌ":[7,0,0,1],"GÌ§":[10,0,0,1],"IÌ":[13,0,0,1],"KÌ§":[16,0,0,1],"LÌ§":[18,0,0,1],"NÌ§":[21,0,0,1],"OÌ":[22,1,0,1],"RÌ§":[26,0,0,1],"SÌ":[28,0,0,1],"UÌ":[31,0,0,1],"ZÌ":[34,0,0,1],"aÌ":[1,0,1,1],"cÌ":[4,0,1,1],"eÌ":[7,0,1,1],"gÌ§":[10,0,1,1],"iÌ":[13,0,1,1],"kÌ§":[16,0,1,1],"lÌ§":[18,0,1,1],"nÌ§":[21,0,1,1],"rÌ§":[26,0,1,1],"sÌ":[28,0,1,1],"uÌ":[31,0,1,1],"zÌ":[34,0,1,1],"aÌ":[0,1,1,1],"aÌ":[0,2,1,1],"aÌ":[0,3,1,1],"aÌ":[0,4,1,1],"aÌ":[0,5,1,1],"aÌ":[0,6,1,1],"cÌ§":[3,1,1,1],"eÌ":[6,1,1,1],"eÌ":[6,2,1,1],"eÌ":[6,3,1,1],"eÌ":[6,4,1,1],"iÌ":[12,1,1,1],"iÌ":[12,2,1,1],"iÌ":[12,3,1,1],"iÌ":[12,4,1,1],"nÌ":[20,1,1,1],"oÌ":[22,1,1,1],"oÌ":[22,2,1,1],"oÌ":[22,3,1,1],"oÌ":[22,4,1,1],"oÌ":[22,5,1,1],"uÌ":[30,1,1,1],"uÌ":[30,2,1,1],"uÌ":[30,3,1,1],"uÌ":[30,4,1,1],"yÌ":[12,2,1,1],"yÌ":[12,3,1,1],"AÌ":[0,1,0,1],"AÌ":[0,2,0,1],"AÌ":[0,3,0,1],"AÌ":[0,4,0,1],"AÌ":[0,5,0,1],"AÌ":[0,6,0,1],"CÌ§":[3,1,0,1],"EÌ":[6,1,0,1],"EÌ":[6,2,0,1],"EÌ":[6,3,0,1],"EÌ":[6,4,0,1],"IÌ":[12,1,0,1],"IÌ":[12,2,0,1],"IÌ":[12,3,0,1],"IÌ":[12,4,0,1],"NÌ":[20,1,0,1],"OÌ":[22,1,0,1],"OÌ":[22,2,0,1],"OÌ":[22,3,0,1],"OÌ":[22,4,0,1],"OÌ":[22,5,0,1],"UÌ":[30,1,0,1],"UÌ":[30,2,0,1],"UÌ":[30,3,0,1],"UÌ":[30,4,0,1],"YÌ":[12,2,0,1]}}};
/*
 * collate.js - Collation routines
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends locale.js ilibglobal.js numprs.js ctype.ispunct.js normstring.js

// !data collation

/**
 * @class
 * Represents a buffered source of code points. The input string is first
 * normalized so that combining characters come out in a standardized order.
 * If the "ignorePunctuation" flag is turned on, then punctuation 
 * characters are skipped.
 * 
 * @constructor
 * @private
 * @param {ilib.NormString|string} str a string to get code points from
 * @param {boolean} ignorePunctuation whether or not to ignore punctuation
 * characters
 */
ilib.CodePointSource = function(str, ignorePunctuation) {
	this.chars = [];
	// first convert the string to a normalized sequence of characters
	var s = (typeof(str) === "string") ? new ilib.NormString(str) : str;
	this.it = s.charIterator();
	this.ignorePunctuation = typeof(ignorePunctuation) === "boolean" && ignorePunctuation;
};

/**
 * Return the first num code points in the source without advancing the
 * source pointer. If there are not enough code points left in the
 * string to satisfy the request, this method will return undefined. 
 * 
 * @param {number} num the number of characters to peek ahead
 * @return {string|undefined} a string formed out of up to num code points from
 * the start of the string, or undefined if there are not enough character left
 * in the source to complete the request
 */
ilib.CodePointSource.prototype.peek = function(num) {
	if (num < 1) {
		return undefined;
	}
	if (this.chars.length < num && this.it.hasNext()) {
		for (var i = 0; this.chars.length < 4 && this.it.hasNext(); i++) {
			var c = this.it.next();
			if (c && !this.ignorePunctuation || !ilib.CType.isPunct(c)) {
				this.chars.push(c);
			}
		}
	}
	if (this.chars.length < num) {
		return undefined;
	}
	return this.chars.slice(0, num).join("");
};
/**
 * Advance the source pointer by the given number of code points.
 * @param {number} num number of code points to advance
 */
ilib.CodePointSource.prototype.consume = function(num) {
	if (num > 0) {
		this.peek(num); // for the iterator to go forward if needed
		if (num < this.chars.length) {
			this.chars = this.chars.slice(num);
		} else {
			this.chars = [];
		}
	}
};


/**
 * @class
 * An iterator through a sequence of collation elements. This
 * iterator takes a source of code points, converts them into
 * collation elements, and allows the caller to get single
 * elements at a time.
 * 
 * @constructor
 * @private
 * @param {ilib.CodePointSource} source source of code points to 
 * convert to collation elements
 * @param {Object} map mapping from sequences of code points to
 * collation elements
 * @param {number} keysize size in bits of the collation elements
 */
ilib.ElementIterator = function (source, map, keysize) {
	this.elements = [];
	this.source = source;
	this.map = map;
	this.keysize = keysize;
};

/**
 * @private
 */
ilib.ElementIterator.prototype._fillBuffer = function () {
	var str = undefined;
	
	// peek ahead by up to 4 characters, which may combine
	// into 1 or more collation elements
	for (var i = 4; i > 0; i--) {
		str = this.source.peek(i);
		if (str && this.map[str]) {
			this.elements = this.elements.concat(this.map[str]);
			this.source.consume(i);
			return;
		}
	}
	
	if (str) {
		// no mappings for the first code point, so just use its
		// Unicode code point as a proxy for its sort order. Shift
		// it by the key size so that everything unknown sorts
		// after things that have mappings
		this.elements.push(str.charCodeAt(0) << this.keysize);
		this.source.consume(1);
	} else {
		// end of the string
		return undefined;
	}
};

/**
 * Return true if there are more collation elements left to
 * iterate through.
 * @returns {boolean} true if there are more elements left to
 * iterate through, and false otherwise
 */
ilib.ElementIterator.prototype.hasNext = function () {
	if (this.elements.length < 1) {
		this._fillBuffer();
	}
	return !!this.elements.length;
};

/**
 * Return the next collation element. If more than one collation 
 * element is generated from a sequence of code points 
 * (ie. an "expansion"), then this class will buffer the
 * other elements and return them on subsequent calls to 
 * this method.
 * 
 * @returns {number|undefined} the next collation element or
 * undefined for no more collation elements
 */
ilib.ElementIterator.prototype.next = function () {
	if (this.elements.length < 1) {
		this._fillBuffer();
	}
	var ret = this.elements[0];
	this.elements = this.elements.slice(1);
	return ret;
};


/**
 * @class
 * A class that implements a locale-sensitive comparator function 
 * for use with sorting function. The comparator function
 * assumes that the strings it is comparing contain Unicode characters
 * encoded in UTF-16.<p>
 * 
 * Collations usually depend only on the language, because most collation orders 
 * are shared between locales that speak the same language. There are, however, a
 * number of instances where a locale collates differently than other locales
 * that share the same language. There are also a number of instances where a
 * locale collates differently based on the script used. This object can handle
 * these cases automatically if a full locale is specified in the options rather
 * than just a language code.<p>
 * 
 * <h2>Options</h2>
 * 
 * The options parameter can contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - String|Locale. The locale which the comparator function 
 * will collate with. Default: the current iLib locale.
 * 
 * <li><i>sensitivity</i> - String. Sensitivity or strength of collator. This is one of 
 * "primary", "base", "secondary", "accent", "tertiary", "case", "quaternary", or 
 * "variant". Default: "primary"
 *   <ol>
 *   <li>base or primary - Only the primary distinctions between characters are significant.
 *   Another way of saying that is that the collator will be case-, accent-, and 
 *   variation-insensitive, and only distinguish between the base characters
 *   <li>case or secondary - Both the primary and secondary distinctions between characters
 *   are significant. That is, the collator will be accent- and variation-insensitive
 *   and will distinguish between base characters and character case.
 *   <li>accent or tertiary - The primary, secondary, and tertiary distinctions between
 *   characters are all significant. That is, the collator will be 
 *   variation-insensitive, but accent-, case-, and base-character-sensitive. 
 *   <li>variant or quaternary - All distinctions between characters are significant. That is,
 *   the algorithm is base character-, case-, accent-, and variation-sensitive.
 *   </ol>
 *   
 * <li><i>upperFirst</i> - boolean. When collating case-sensitively in a script that
 * has the concept of case, put upper-case
 * characters first, otherwise lower-case will come first. Default: true
 * 
 * <li><i>reverse</i> - boolean. Return the list sorted in reverse order. When the
 * upperFirst option is also set to true, upper-case characters would then come at 
 * the end of the list. Default: false.
 * 
 * <li><i>scriptOrder</i> - string. When collating strings in multiple scripts,
 * this property specifies what order those scripts should be sorted. The default
 * Unicode Collation Algorithm (UCA) already has a default order for scripts, but
 * this can be tailored via this property. The value of this option is a 
 * space-separated list of ISO 15924 scripts codes. If a code is specified in this
 * property, its default data must be included using the JS assembly tool. If the
 * data is not included, the ordering for the script will be ignored. Default:
 * the default order defined by the UCA. 
 * 
 * <li><i>style</i> - The value of the style parameter is dependent on the locale.
 * For some locales, there are different styles of collating strings depending
 * on what kind of strings are being collated or what the preference of the user 
 * is. For example, in German, there is a phonebook order and a dictionary ordering
 * that sort the same array of strings slightly differently.
 * The static method {@link ilib.Collator#getAvailableStyles} will return a list of styles that ilib
 * currently knows about for any given locale. If the value of the style option is 
 * not recognized for a locale, it will be ignored. Default style is "standard".<p>
 * 
 * <li><i>usage</i> - Whether this collator will be used for searching or sorting.
 * Valid values are simply the strings "sort" or "search". When used for sorting,
 * it is good idea if a collator produces a stable sort. That is, the order of the 
 * sorted array of strings should not depend on the order of the strings in the
 * input array. As such, when a collator is supposed to act case insensitively, 
 * it nonetheless still distinguishes between case after all other criteria
 * are satisfied so that strings that are distinguished only by case do not sort
 * randomly. For searching, we would like to match two strings that different only 
 * by case, so the collator must return equals in that situation instead of 
 * further distinguishing by case. Default is "sort".
 * 
 * <li><i>numeric</i> - Treat the left and right strings as if they started with
 * numbers and sort them numerically rather than lexically.
 * 
 * <li><i>ignorePunctuation</i> - Skip punctuation characters when comparing the
 * strings.
 *  
 * <li>onLoad - a callback function to call when the collator object is fully 
 * loaded. When the onLoad option is given, the collator object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * 
 * <li><i>useNative</i> - when this option is true, use the native Intl object
 * provided by the Javascript engine, if it exists, to implement this class. If
 * it doesn't exist, or if this parameter is false, then this class uses a pure 
 * Javascript implementation, which is slower and uses a lot more memory, but 
 * works everywhere that ilib works. Default is "true".
 * </ul>
 * 
 * <h2>Operation</h2>
 * 
 * The Collator constructor returns a collator object tailored with the above 
 * options. The object contains an internal compare() method which compares two 
 * strings according to those options. This can be used directly to compare
 * two strings, but is not useful for passing to the javascript sort function
 * because then it will not have its collation data available. Instead, use the 
 * getComparator() method to retrieve a function that is bound to the collator
 * object. (You could also bind it yourself using ilib.bind()). The bound function 
 * can be used with the standard Javascript array sorting algorithm, or as a 
 * comparator with your own sorting algorithm.<p>
 * 
 * Example using the standard Javascript array sorting call with the bound
 * function:<p>
 * 
 * <code>
 * <pre>
 * var arr = ["Ã¶", "oe", "Ã¼", "o", "a", "ae", "u", "Ã", "Ã¤"];
 * var collator = ilib.Collator({locale: 'de-DE', style: "dictionary"});
 * arr.sort(collator.getComparator());
 * console.log(JSON.stringify(arr));
 * </pre>
 * </code>
 * <p>
 * 
 * Would give the output:<p>
 * 
 * <code>
 * <pre>
 * ["a", "ae", "Ã¤", "o", "oe", "Ã¶", "Ã", "u", "Ã¼"]
 * </pre>
 * </code>
 * 
 * When sorting an array of Javascript objects according to one of the 
 * string properties of the objects, wrap the collator's compare function 
 * in your own comparator function that knows the structure of the objects
 * being sorted:<p>
 * 
 * <code>
 * <pre>
 * var collator = ilib.Collator({locale: 'de-DE'});
 * var myComparator = function (collator) {
 *   var comparator = collator.getComparator();
 *   // left and right are your own objects
 *   return function (left, right) {
 *   	return comparator(left.x.y.textProperty, right.x.y.textProperty);
 *   };
 * };
 * arr.sort(myComparator(collator));
 * </pre>
 * </code>
 * <p>
 * 
 * <h2>Sort Keys</h2>
 * 
 * The collator class also has a method to retrieve the sort key for a
 * string. The sort key is an array of values that represent how each  
 * character in the string should be collated according to the characteristics
 * of the collation algorithm and the given options. Thus, sort keys can be 
 * compared directly value-for-value with other sort keys that were generated 
 * by the same collator, and the resulting ordering is guaranteed to be the 
 * same as if the original strings were compared by the collator.
 * Sort keys generated by different collators are not guaranteed to give
 * any reasonable results when compared together unless the two collators 
 * were constructed with 
 * exactly the same options and therefore end up representing the exact same 
 * collation sequence.<p>
 * 
 * A good rule of thumb is that you would use a sort key if you had 10 or more
 * items to sort or if your array might be resorted arbitrarily. For example, if your 
 * user interface was displaying a table with 100 rows in it, and each row had
 * 4 sortable text columns which could be sorted in acending or descending order,
 * the recommended practice would be to generate a sort key for each of the 4
 * sortable fields in each row and store that in the Javascript representation of the
 * table data. Then, when the user clicks on a column header to resort the
 * table according to that column, the resorting would be relatively quick 
 * because it would only be comparing arrays of values, and not recalculating 
 * the collation values for each character in each string for every comparison.<p>
 * 
 * For tables that are large, it is usually a better idea to do the sorting
 * on the server side, especially if the table is the result of a database
 * query. In this case, the table is usually a view of the cursor of a large
 * results set, and only a few entries are sent to the front end at a time.
 * In order to sort the set efficiently, it should be done on the database
 * level instead.
 * 
 * <h2>Data</h2>
 * 
 * Doing correct collation entails a huge amount of mapping data, much of which is
 * not necessary when collating in one language with one script, which is the most
 * common case. Thus, ilib implements a number of ways to include the data you
 * need or leave out the data you don't need using the JS assembly tool:
 * 
 * <ol>
 * <li>Full multilingual data - if you are sorting multilingual data and need to collate 
 * text written in multiple scripts, you can use the directive "!data collation/ducet" to 
 * load in the full collation data.  This allows the collator to perform the entire 
 * Unicode Collation Algorithm (UCA) based on the Default Unicode Collation Element 
 * Table (DUCET). The data is very large, on the order of multiple megabytes, but 
 * sometimes it is necessary.
 * <li>A few scripts - if you are sorting text written in only a few scripts, you may 
 * want to include only the data for those scripts. Each ISO 15924 script code has its
 * own data available in a separate file, so you can use the data directive to include
 * only the data for the scripts you need. For example, use  
 * "!data collation/Latn" to retrieve the collation information for the Latin script.
 * Because the "ducet" table mentioned in the previous point is a superset of the 
 * tables for all other scripts, you do not need to include explicitly the data for 
 * any particular script when using "ducet". That is, you either include "ducet" or 
 * you include a specific list of scripts.
 * <li>Only one script - if you are sorting text written only in one script, you can
 * either include the data directly as in the previous point, or you can rely on the 
 * locale to include the correct data for you. In this case, you can use the directive
 * "!data collate" to load in the locale's collation data for its most common script.
 * </ol>
 *   
 * With any of the above ways of including the data, the collator will only perform the
 * correct language-sensitive sorting for the given locale. All other scripts will be
 * sorted in the default manner according to the UCA. For example, if you include the
 * "ducet" data and pass in "de-DE" (German for Germany) as the locale spec, then
 * only the Latin script (the default script for German) will be sorted according to
 * German rules. All other scripts in the DUCET, such as Japanese or Arabic, will use 
 * the default UCA collation rules.<p>
 * 
 * If this collator encounters a character for which it has no collation data, it will
 * sort those characters by pure Unicode value after all characters for which it does have
 * collation data. For example, if you only loaded in the German collation data (ie. the
 * data for the Latin script tailored to German) to sort a list of person names, but that
 * list happens to include the names of a few Japanese people written in Japanese 
 * characters, the Japanese names will sort at the end of the list after all German names,
 * and will sort according to the Unicode values of the characters.
 * 
 * @constructor
 * @param {Object} options options governing how the resulting comparator 
 * function will operate
 */
ilib.Collator = function(options) {
	var sync = true,
		loadParams = undefined,
		useNative = true;

	// defaults
	/** @type ilib.Locale */
	this.locale = new ilib.Locale(ilib.getLocale());
	this.caseFirst = "upper";
	this.sensitivity = "variant";
	this.level = 4;
	this.usage = "sort";
	this.reverse = false;
	this.numeric = false;
	this.style = "standard";
	
	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		if (options.sensitivity) {
			switch (options.sensitivity) {
				case 'primary':
				case 'base':
					this.sensitivity = "base";
					this.level = 1;
					break;
				case 'secondary':
				case 'case':
					this.sensitivity = "case";
					this.level = 2;
					break;
				case 'tertiary':
				case 'accent':
					this.sensitivity = "accent";
					this.level = 3;
					break;
				case 'quaternary':
				case 'variant':
					this.sensitivity = "variant";
					this.level = 4;
					break;
			}
		}
		if (typeof(options.upperFirst) !== 'undefined') {
			/** @type string */
			this.caseFirst = options.upperFirst ? "upper" : "lower"; 
		}
		
		if (typeof(options.ignorePunctuation) !== 'undefined') {
			/** @type boolean */
			this.ignorePunctuation = options.ignorePunctuation;
		}
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		loadParams = options.loadParams;
		if (typeof(options.useNative) !== 'undefined') {
			useNative = options.useNative;
		}
		
		if (options.usage === "sort" || options.usage === "search") {
			this.usage = options.usage;
		}
		
		if (typeof(options.reverse) === 'boolean') {
			this.reverse = options.reverse;
		}

		if (typeof(options.numeric) === 'boolean') {
			this.numeric = options.numeric;
		}
		
		if (typeof(options.style) === 'string') {
			this.style = options.style;
		}
	}

	if (this.usage === "sort") {
		// produces a stable sort
		this.level = 4;
	}

	if (useNative && typeof(Intl) !== 'undefined' && Intl) {
		// this engine is modern and supports the new Intl object!
		//console.log("implemented natively");
		/** @type {{compare:function(string,string)}} */
		this.collator = new Intl.Collator(this.locale.getSpec(), this);
		
		if (options && typeof(options.onLoad) === 'function') {
			options.onLoad(this);
		}
	} else {
		//console.log("implemented in pure JS");
		if (!ilib.Collator.cache) {
			ilib.Collator.cache = {};
		}

		// else implement in pure Javascript
		ilib.loadData({
			object: ilib.Collator, 
			locale: this.locale, 
			name: "collation.json",
			replace: true,
			sync: sync,
			loadParams: loadParams, 
			callback: ilib.bind(this, function (collation) {
				if (!collation) {
					collation = ilib.data.collation;
					var spec = this.locale.getSpec().replace(/-/g, '_');
					ilib.Collator.cache[spec] = collation;
				}
				this._init(collation);
				new ilib.LocaleInfo(this.locale, {
					sync: sync,
					loadParams: loadParams,
					onLoad: ilib.bind(this, function(li) {
						this.li = li;
						if (this.ignorePunctuation) {
			    			ilib.CType.isPunct._init(sync, loadParams, ilib.bind(this, function() {
								if (options && typeof(options.onLoad) === 'function') {
									options.onLoad(this);
								}
			    			}));
		    			} else {
							if (options && typeof(options.onLoad) === 'function') {
								options.onLoad(this);
							}
		    			}
		    		})
				});
			})
		});
	}
};

ilib.Collator.prototype = {
	/**
	 * @private
	 * Bit pack an array of values into a single number
	 * @param {number|null|Array.<number>} arr array of values to bit pack
	 */
	_pack: function (arr) {
		var value = 0;
		if (arr) {
			if (typeof(arr) === 'number') {
				arr = [ arr ];
			}
			for (var i = 0; i < this.level; i++) {
				if (i > 0) {
					value <<= this.collation.bits[i];	
				}
				if (i === 2 && this.caseFirst === "lower") {
					// sort the lower case first instead of upper
					value = value | (1 - (typeof(arr[i]) !== "undefined" ? arr[i] : 0));
				} else {
					value = value | arr[i];
				}
			}
		}
		return value;
	},
	
	/**
	 * @private
	 * Return the rule packed into an array of collation elements.
	 * @param {Array.<number|null|Array.<number>>} rule
	 * @return {Array.<number>} a bit-packed array of numbers
	 */
	_packRule: function(rule) {
		if (rule[0] instanceof Array) {
			var ret = [];
			for (var i = 0; i < rule.length; i++) {
				ret.push(this._pack(rule[i]));
			}
			return ret;
		} else {
			return [ this._pack(rule) ];
		}
	},
    	
	/**
     * @private
     */
    _init: function(rules) {
    	/** @type {{scripts:Array.<string>,bits:Array.<number>,maxes:Array.<number>,bases:Array.<number>,map:Object.<string,Array.<number|null|Array.<number>>>}} */
    	this.collation = rules[this.style];
    	this.map = {};
    	this.keysize = 0;
    	for (var i = 0; i < this.level; i++) {
    		this.keysize += this.collation.bits[i];
    	}
    	var remainder = ilib.mod(this.keysize, 4);
    	this.keysize += (remainder > 0) ? (4 - remainder) : 0; // round to the nearest 4 to find how many bits to use in hex
    	
    	for (var r in this.collation.map) {
    		if (r) {
    			this.map[r] = this._packRule(this.collation.map[r]);
    		}
    	}
    },
    
    /**
     * @private
     */
    _basicCompare: function(left, right) {
		if (this.numeric) {
			var lvalue = new ilib.Number(left, {locale: this.locale});
			var rvalue = new ilib.Number(right, {locale: this.locale});
			if (isNaN(lvalue.valueOf())) {
				if (isNaN(rvalue.valueOf())) {
					return 0;
				}
				return 1;
			} else if (isNaN(rvalue.valueOf())) {
				return -1;
			}
			return lvalue.valueOf() - rvalue.valueOf();
		} else {
			var l = (left instanceof ilib.NormString) ? left : new ilib.NormString(left),
				r = (right instanceof ilib.NormString) ? right : new ilib.NormString(right),
				lelements,
				relements;
				
			// if the reverse sort is on, switch the char sources so that the result comes out swapped
			lelements = new ilib.ElementIterator(new ilib.CodePointSource(l, this.ignorePunctuation), this.map, this.keysize);
			relements = new ilib.ElementIterator(new ilib.CodePointSource(r, this.ignorePunctuation), this.map, this.keysize);
			
			while (lelements.hasNext() && relements.hasNext()) {
				var diff = lelements.next() - relements.next();
				if (diff) {
					return diff;
				}
			}
			if (!lelements.hasNext() && !relements.hasNext()) {
				return 0;
			} else if (lelements.hasNext()) {
				return 1;
			} else {
				return -1;
			}
		}
    },
    
	/**
	 * Compare two strings together according to the rules of this 
	 * collator instance. Do not use this function directly with 
	 * Array.sort, as it will not have its collation data available
	 * and therefore will not function properly. Use the function
	 * returned by getComparator() instead.
	 * 
	 * @param {string} left the left string to compare
	 * @param {string} right the right string to compare
	 * @return {number} a negative number if left comes before right, a
	 * positive number if right comes before left, and zero if left and 
	 * right are equivalent according to this collator
	 */
	compare: function (left, right) {
		// last resort: use the "C" locale
		if (this.collator) {
			// implemented by the core engine
			return this.collator.compare(left, right);
		}

		var ret = this._basicCompare(left, right);
		return this.reverse ? -ret : ret;
	},
	
	/**
	 * Return a comparator function that can compare two strings together
	 * according to the rules of this collator instance. The function 
	 * returns a negative number if the left 
	 * string comes before right, a positive number if the right string comes 
	 * before the left, and zero if left and right are equivalent. If the
	 * reverse property was given as true to the collator constructor, this 
	 * function will
	 * switch the sign of those values to cause sorting to happen in the
	 * reverse order.
	 * 
	 * @return {function(...)|undefined} a comparator function that 
	 * can compare two strings together according to the rules of this 
	 * collator instance
	 */
	getComparator: function() {
		// bind the function to this instance so that we have the collation
		// rules available to do the work
		if (this.collator) {
			// implemented by the core engine
			return this.collator.compare;
		}
		
		return /** @type function(string,string):number */ ilib.bind(this, this.compare);
	},
	
	/**
	 * Return a sort key string for the given string. The sort key
	 * string is a list of values that represent each character 
	 * in the original string. The sort key
	 * values for any particular character consists of 3 numbers that
	 * encode the primary, secondary, and tertiary characteristics
	 * of that character. The values of each characteristic are 
	 * modified according to the strength of this collator instance 
	 * to give the correct collation order. The idea is that this
	 * sort key string is directly comparable byte-for-byte to 
	 * other sort key strings generated by this collator without
	 * any further knowledge of the collation rules for the locale.
	 * More formally, if a < b according to the rules of this collation, 
	 * then it is guaranteed that sortkey(a) < sortkey(b) when compared
	 * byte-for-byte. The sort key string can therefore be used
	 * without the collator to sort an array of strings efficiently
	 * because the work of determining the applicability of various
	 * collation rules is done once up-front when generating 
	 * the sort key.<p>
	 * 
	 * The sort key string can be treated as a regular, albeit somewhat
	 * odd-looking, string. That is, it can be pass to regular 
	 * Javascript functions without problems.  
	 * 
	 * @param {string} str the original string to generate the sort key for
	 * @return {string} a sort key string for the given string
	 */
	sortKey: function (str) {
		if (!str) {
			return "";
		}
		
		if (this.collator) {
			// native, no sort keys available
			return str;
		}
		
		function pad(str, limit) {
			return "0000000000000000".substring(0, limit - str.length) + str;
		}
		
		if (this.numeric) {
			var v = new ilib.Number(str, {locale: this.locale});
			var s = isNaN(v.valueOf()) ? "" : v.valueOf().toString(16);
			return pad(s, 16);	
		} else {
			var n = (typeof(str) === "string") ? new ilib.NormString(str) : str,
				ret = "",
				lelements = new ilib.ElementIterator(new ilib.CodePointSource(n, this.ignorePunctuation), this.map, this.keysize),
				element;
			
			while (lelements.hasNext()) {
				element = lelements.next();
				if (this.reverse) {
					element = (1 << this.keysize) - element;
				}
				ret += pad(element.toString(16), this.keysize/4);	
			}
		}
		return ret;
	}
};

/**
 * Retrieve the list of collation style names that are available for the 
 * given locale. This list varies depending on the locale, and depending
 * on whether or not the data for that locale was assembled into this copy
 * of ilib.
 * 
 * @param {ilib.Locale|string=} locale The locale for which the available
 * styles are being sought
 * @return Array.<string> an array of style names that are available for
 * the given locale
 */
ilib.Collator.getAvailableStyles = function (locale) {
	return [ "standard" ];
};

/**
 * Retrieve the list of ISO 15924 script codes that are available in this
 * copy of ilib. This list varies depending on whether or not the data for 
 * various scripts was assembled into this copy of ilib. If the "ducet"
 * data is assembled into this copy of ilib, this method will report the
 * entire list of scripts as being available. If a collator instance is
 * instantiated with a script code that is not on the list returned by this
 * function, it will be ignored and text in that script will be sorted by
 * numeric Unicode values of the characters.
 * 
 * @return Array.<string> an array of ISO 15924 script codes that are 
 * available
 */
ilib.Collator.getAvailableScripts = function () {
	return [ "Latn" ];
};

ilib.data.nfd_all = {"Ã":"AÌ","Ã":"AÌ","Ã":"AÌ","Ã":"AÌ","Ã":"AÌ","Ã":"AÌ","Ã":"CÌ§","Ã":"EÌ","Ã":"EÌ","Ã":"EÌ","Ã":"EÌ","Ã":"IÌ","Ã":"IÌ","Ã":"IÌ","Ã":"IÌ","Ã":"NÌ","Ã":"OÌ","Ã":"OÌ","Ã":"OÌ","Ã":"OÌ","Ã":"OÌ","Ã":"UÌ","Ã":"UÌ","Ã":"UÌ","Ã":"UÌ","Ã":"YÌ","Ã ":"aÌ","Ã¡":"aÌ","Ã¢":"aÌ","Ã£":"aÌ","Ã¤":"aÌ","Ã¥":"aÌ","Ã§":"cÌ§","Ã¨":"eÌ","Ã©":"eÌ","Ãª":"eÌ","Ã«":"eÌ","Ã¬":"iÌ","Ã­":"iÌ","Ã®":"iÌ","Ã¯":"iÌ","Ã±":"nÌ","Ã²":"oÌ","Ã³":"oÌ","Ã´":"oÌ","Ãµ":"oÌ","Ã¶":"oÌ","Ã¹":"uÌ","Ãº":"uÌ","Ã»":"uÌ","Ã¼":"uÌ","Ã½":"yÌ","Ã¿":"yÌ","Ä":"AÌ","Ä":"aÌ","Ä":"AÌ","Ä":"aÌ","Ä":"AÌ¨","Ä":"aÌ¨","Ä":"CÌ","Ä":"cÌ","Ä":"CÌ","Ä":"cÌ","Ä":"CÌ","Ä":"cÌ","Ä":"CÌ","Ä":"cÌ","Ä":"DÌ","Ä":"dÌ","Ä":"EÌ","Ä":"eÌ","Ä":"EÌ","Ä":"eÌ","Ä":"EÌ","Ä":"eÌ","Ä":"EÌ¨","Ä":"eÌ¨","Ä":"EÌ","Ä":"eÌ","Ä":"GÌ","Ä":"gÌ","Ä":"GÌ","Ä":"gÌ","Ä ":"GÌ","Ä¡":"gÌ","Ä¢":"GÌ§","Ä£":"gÌ§","Ä¤":"HÌ","Ä¥":"hÌ","Ä¨":"IÌ","Ä©":"iÌ","Äª":"IÌ","Ä«":"iÌ","Ä¬":"IÌ","Ä­":"iÌ","Ä®":"IÌ¨","Ä¯":"iÌ¨","Ä°":"IÌ","Ä´":"JÌ","Äµ":"jÌ","Ä¶":"KÌ§","Ä·":"kÌ§","Ä¹":"LÌ","Äº":"lÌ","Ä»":"LÌ§","Ä¼":"lÌ§","Ä½":"LÌ","Ä¾":"lÌ","Å":"NÌ","Å":"nÌ","Å":"NÌ§","Å":"nÌ§","Å":"NÌ","Å":"nÌ","Å":"OÌ","Å":"oÌ","Å":"OÌ","Å":"oÌ","Å":"OÌ","Å":"oÌ","Å":"RÌ","Å":"rÌ","Å":"RÌ§","Å":"rÌ§","Å":"RÌ","Å":"rÌ","Å":"SÌ","Å":"sÌ","Å":"SÌ","Å":"sÌ","Å":"SÌ§","Å":"sÌ§","Å ":"SÌ","Å¡":"sÌ","Å¢":"TÌ§","Å£":"tÌ§","Å¤":"TÌ","Å¥":"tÌ","Å¨":"UÌ","Å©":"uÌ","Åª":"UÌ","Å«":"uÌ","Å¬":"UÌ","Å­":"uÌ","Å®":"UÌ","Å¯":"uÌ","Å°":"UÌ","Å±":"uÌ","Å²":"UÌ¨","Å³":"uÌ¨","Å´":"WÌ","Åµ":"wÌ","Å¶":"YÌ","Å·":"yÌ","Å¸":"YÌ","Å¹":"ZÌ","Åº":"zÌ","Å»":"ZÌ","Å¼":"zÌ","Å½":"ZÌ","Å¾":"zÌ","Æ ":"OÌ","Æ¡":"oÌ","Æ¯":"UÌ","Æ°":"uÌ","Ç":"AÌ","Ç":"aÌ","Ç":"IÌ","Ç":"iÌ","Ç":"OÌ","Ç":"oÌ","Ç":"UÌ","Ç":"uÌ","Ç":"UÌÌ","Ç":"uÌÌ","Ç":"UÌÌ","Ç":"uÌÌ","Ç":"UÌÌ","Ç":"uÌÌ","Ç":"UÌÌ","Ç":"uÌÌ","Ç":"AÌÌ","Ç":"aÌÌ","Ç ":"AÌÌ","Ç¡":"aÌÌ","Ç¢":"ÃÌ","Ç£":"Ã¦Ì","Ç¦":"GÌ","Ç§":"gÌ","Ç¨":"KÌ","Ç©":"kÌ","Çª":"OÌ¨","Ç«":"oÌ¨","Ç¬":"OÌ¨Ì","Ç­":"oÌ¨Ì","Ç®":"Æ·Ì","Ç¯":"ÊÌ","Ç°":"jÌ","Ç´":"GÌ","Çµ":"gÌ","Ç¸":"NÌ","Ç¹":"nÌ","Çº":"AÌÌ","Ç»":"aÌÌ","Ç¼":"ÃÌ","Ç½":"Ã¦Ì","Ç¾":"ÃÌ","Ç¿":"Ã¸Ì","È":"AÌ","È":"aÌ","È":"AÌ","È":"aÌ","È":"EÌ","È":"eÌ","È":"EÌ","È":"eÌ","È":"IÌ","È":"iÌ","È":"IÌ","È":"iÌ","È":"OÌ","È":"oÌ","È":"OÌ","È":"oÌ","È":"RÌ","È":"rÌ","È":"RÌ","È":"rÌ","È":"UÌ","È":"uÌ","È":"UÌ","È":"uÌ","È":"SÌ¦","È":"sÌ¦","È":"TÌ¦","È":"tÌ¦","È":"HÌ","È":"hÌ","È¦":"AÌ","È§":"aÌ","È¨":"EÌ§","È©":"eÌ§","Èª":"OÌÌ","È«":"oÌÌ","È¬":"OÌÌ","È­":"oÌÌ","È®":"OÌ","È¯":"oÌ","È°":"OÌÌ","È±":"oÌÌ","È²":"YÌ","È³":"yÌ","Í":"Ì","Í":"Ì","Í":"Ì","Í":"ÌÌ","Í´":"Ê¹","Í¾":";","Î":"Â¨Ì","Î":"ÎÌ","Î":"Â·","Î":"ÎÌ","Î":"ÎÌ","Î":"ÎÌ","Î":"ÎÌ","Î":"Î¥Ì","Î":"Î©Ì","Î":"Î¹ÌÌ","Îª":"ÎÌ","Î«":"Î¥Ì","Î¬":"Î±Ì","Î­":"ÎµÌ","Î®":"Î·Ì","Î¯":"Î¹Ì","Î°":"ÏÌÌ","Ï":"Î¹Ì","Ï":"ÏÌ","Ï":"Î¿Ì","Ï":"ÏÌ","Ï":"ÏÌ","Ï":"ÏÌ","Ï":"ÏÌ","Ð":"ÐÌ","Ð":"ÐÌ","Ð":"ÐÌ","Ð":"ÐÌ","Ð":"ÐÌ","Ð":"ÐÌ","Ð":"Ð£Ì","Ð":"ÐÌ","Ð¹":"Ð¸Ì","Ñ":"ÐµÌ","Ñ":"ÐµÌ","Ñ":"Ð³Ì","Ñ":"ÑÌ","Ñ":"ÐºÌ","Ñ":"Ð¸Ì","Ñ":"ÑÌ","Ñ¶":"Ñ´Ì","Ñ·":"ÑµÌ","Ó":"ÐÌ","Ó":"Ð¶Ì","Ó":"ÐÌ","Ó":"Ð°Ì","Ó":"ÐÌ","Ó":"Ð°Ì","Ó":"ÐÌ","Ó":"ÐµÌ","Ó":"ÓÌ","Ó":"ÓÌ","Ó":"ÐÌ","Ó":"Ð¶Ì","Ó":"ÐÌ","Ó":"Ð·Ì","Ó¢":"ÐÌ","Ó£":"Ð¸Ì","Ó¤":"ÐÌ","Ó¥":"Ð¸Ì","Ó¦":"ÐÌ","Ó§":"Ð¾Ì","Óª":"Ó¨Ì","Ó«":"Ó©Ì","Ó¬":"Ð­Ì","Ó­":"ÑÌ","Ó®":"Ð£Ì","Ó¯":"ÑÌ","Ó°":"Ð£Ì","Ó±":"ÑÌ","Ó²":"Ð£Ì","Ó³":"ÑÌ","Ó´":"Ð§Ì","Óµ":"ÑÌ","Ó¸":"Ð«Ì","Ó¹":"ÑÌ","Ø¢":"Ø§Ù","Ø£":"Ø§Ù","Ø¤":"ÙÙ","Ø¥":"Ø§Ù","Ø¦":"ÙÙ","Û":"ÛÙ","Û":"ÛÙ","Û":"ÛÙ","à¤©":"à¤¨à¤¼","à¤±":"à¤°à¤¼","à¤´":"à¤³à¤¼","à¥":"à¤à¤¼","à¥":"à¤à¤¼","à¥":"à¤à¤¼","à¥":"à¤à¤¼","à¥":"à¤¡à¤¼","à¥":"à¤¢à¤¼","à¥":"à¤«à¤¼","à¥":"à¤¯à¤¼","à§":"à§à¦¾","à§":"à§à§","à§":"à¦¡à¦¼","à§":"à¦¢à¦¼","à§":"à¦¯à¦¼","à¨³":"à¨²à¨¼","à¨¶":"à¨¸à¨¼","à©":"à¨à¨¼","à©":"à¨à¨¼","à©":"à¨à¨¼","à©":"à¨«à¨¼","à­":"à­à­","à­":"à­à¬¾","à­":"à­à­","à­":"à¬¡à¬¼","à­":"à¬¢à¬¼","à®":"à®à¯","à¯":"à¯à®¾","à¯":"à¯à®¾","à¯":"à¯à¯","à±":"à±à±","à³":"à²¿à³","à³":"à³à³","à³":"à³à³","à³":"à³à³","à³":"à³à³à³","àµ":"àµà´¾","àµ":"àµà´¾","àµ":"àµàµ","à·":"à·à·","à·":"à·à·","à·":"à·à·à·","à·":"à·à·","à½":"à½à¾·","à½":"à½à¾·","à½":"à½à¾·","à½":"à½à¾·","à½":"à½à¾·","à½©":"à½à¾µ","à½³":"à½±à½²","à½µ":"à½±à½´","à½¶":"à¾²à¾","à½¸":"à¾³à¾","à¾":"à½±à¾","à¾":"à¾à¾·","à¾":"à¾à¾·","à¾¢":"à¾¡à¾·","à¾§":"à¾¦à¾·","à¾¬":"à¾«à¾·","à¾¹":"à¾à¾µ","á¦":"á¥á®","á¬":"á¬á¬µ","á¬":"á¬á¬µ","á¬":"á¬á¬µ","á¬":"á¬á¬µ","á¬":"á¬á¬µ","á¬":"á¬á¬µ","á¬»":"á¬ºá¬µ","á¬½":"á¬¼á¬µ","á­":"á¬¾á¬µ","á­":"á¬¿á¬µ","á­":"á­á¬µ","á¸":"AÌ¥","á¸":"aÌ¥","á¸":"BÌ","á¸":"bÌ","á¸":"BÌ£","á¸":"bÌ£","á¸":"BÌ±","á¸":"bÌ±","á¸":"CÌ§Ì","á¸":"cÌ§Ì","á¸":"DÌ","á¸":"dÌ","á¸":"DÌ£","á¸":"dÌ£","á¸":"DÌ±","á¸":"dÌ±","á¸":"DÌ§","á¸":"dÌ§","á¸":"DÌ­","á¸":"dÌ­","á¸":"EÌÌ","á¸":"eÌÌ","á¸":"EÌÌ","á¸":"eÌÌ","á¸":"EÌ­","á¸":"eÌ­","á¸":"EÌ°","á¸":"eÌ°","á¸":"EÌ§Ì","á¸":"eÌ§Ì","á¸":"FÌ","á¸":"fÌ","á¸ ":"GÌ","á¸¡":"gÌ","á¸¢":"HÌ","á¸£":"hÌ","á¸¤":"HÌ£","á¸¥":"hÌ£","á¸¦":"HÌ","á¸§":"hÌ","á¸¨":"HÌ§","á¸©":"hÌ§","á¸ª":"HÌ®","á¸«":"hÌ®","á¸¬":"IÌ°","á¸­":"iÌ°","á¸®":"IÌÌ","á¸¯":"iÌÌ","á¸°":"KÌ","á¸±":"kÌ","á¸²":"KÌ£","á¸³":"kÌ£","á¸´":"KÌ±","á¸µ":"kÌ±","á¸¶":"LÌ£","á¸·":"lÌ£","á¸¸":"LÌ£Ì","á¸¹":"lÌ£Ì","á¸º":"LÌ±","á¸»":"lÌ±","á¸¼":"LÌ­","á¸½":"lÌ­","á¸¾":"MÌ","á¸¿":"mÌ","á¹":"MÌ","á¹":"mÌ","á¹":"MÌ£","á¹":"mÌ£","á¹":"NÌ","á¹":"nÌ","á¹":"NÌ£","á¹":"nÌ£","á¹":"NÌ±","á¹":"nÌ±","á¹":"NÌ­","á¹":"nÌ­","á¹":"OÌÌ","á¹":"oÌÌ","á¹":"OÌÌ","á¹":"oÌÌ","á¹":"OÌÌ","á¹":"oÌÌ","á¹":"OÌÌ","á¹":"oÌÌ","á¹":"PÌ","á¹":"pÌ","á¹":"PÌ","á¹":"pÌ","á¹":"RÌ","á¹":"rÌ","á¹":"RÌ£","á¹":"rÌ£","á¹":"RÌ£Ì","á¹":"rÌ£Ì","á¹":"RÌ±","á¹":"rÌ±","á¹ ":"SÌ","á¹¡":"sÌ","á¹¢":"SÌ£","á¹£":"sÌ£","á¹¤":"SÌÌ","á¹¥":"sÌÌ","á¹¦":"SÌÌ","á¹§":"sÌÌ","á¹¨":"SÌ£Ì","á¹©":"sÌ£Ì","á¹ª":"TÌ","á¹«":"tÌ","á¹¬":"TÌ£","á¹­":"tÌ£","á¹®":"TÌ±","á¹¯":"tÌ±","á¹°":"TÌ­","á¹±":"tÌ­","á¹²":"UÌ¤","á¹³":"uÌ¤","á¹´":"UÌ°","á¹µ":"uÌ°","á¹¶":"UÌ­","á¹·":"uÌ­","á¹¸":"UÌÌ","á¹¹":"uÌÌ","á¹º":"UÌÌ","á¹»":"uÌÌ","á¹¼":"VÌ","á¹½":"vÌ","á¹¾":"VÌ£","á¹¿":"vÌ£","áº":"WÌ","áº":"wÌ","áº":"WÌ","áº":"wÌ","áº":"WÌ","áº":"wÌ","áº":"WÌ","áº":"wÌ","áº":"WÌ£","áº":"wÌ£","áº":"XÌ","áº":"xÌ","áº":"XÌ","áº":"xÌ","áº":"YÌ","áº":"yÌ","áº":"ZÌ","áº":"zÌ","áº":"ZÌ£","áº":"zÌ£","áº":"ZÌ±","áº":"zÌ±","áº":"hÌ±","áº":"tÌ","áº":"wÌ","áº":"yÌ","áº":"Å¿Ì","áº ":"AÌ£","áº¡":"aÌ£","áº¢":"AÌ","áº£":"aÌ","áº¤":"AÌÌ","áº¥":"aÌÌ","áº¦":"AÌÌ","áº§":"aÌÌ","áº¨":"AÌÌ","áº©":"aÌÌ","áºª":"AÌÌ","áº«":"aÌÌ","áº¬":"AÌ£Ì","áº­":"aÌ£Ì","áº®":"AÌÌ","áº¯":"aÌÌ","áº°":"AÌÌ","áº±":"aÌÌ","áº²":"AÌÌ","áº³":"aÌÌ","áº´":"AÌÌ","áºµ":"aÌÌ","áº¶":"AÌ£Ì","áº·":"aÌ£Ì","áº¸":"EÌ£","áº¹":"eÌ£","áºº":"EÌ","áº»":"eÌ","áº¼":"EÌ","áº½":"eÌ","áº¾":"EÌÌ","áº¿":"eÌÌ","á»":"EÌÌ","á»":"eÌÌ","á»":"EÌÌ","á»":"eÌÌ","á»":"EÌÌ","á»":"eÌÌ","á»":"EÌ£Ì","á»":"eÌ£Ì","á»":"IÌ","á»":"iÌ","á»":"IÌ£","á»":"iÌ£","á»":"OÌ£","á»":"oÌ£","á»":"OÌ","á»":"oÌ","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌ£Ì","á»":"oÌ£Ì","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌÌ","á»":"oÌÌ","á»":"OÌÌ","á»":"oÌÌ","á» ":"OÌÌ","á»¡":"oÌÌ","á»¢":"OÌÌ£","á»£":"oÌÌ£","á»¤":"UÌ£","á»¥":"uÌ£","á»¦":"UÌ","á»§":"uÌ","á»¨":"UÌÌ","á»©":"uÌÌ","á»ª":"UÌÌ","á»«":"uÌÌ","á»¬":"UÌÌ","á»­":"uÌÌ","á»®":"UÌÌ","á»¯":"uÌÌ","á»°":"UÌÌ£","á»±":"uÌÌ£","á»²":"YÌ","á»³":"yÌ","á»´":"YÌ£","á»µ":"yÌ£","á»¶":"YÌ","á»·":"yÌ","á»¸":"YÌ","á»¹":"yÌ","á¼":"Î±Ì","á¼":"Î±Ì","á¼":"Î±ÌÌ","á¼":"Î±ÌÌ","á¼":"Î±ÌÌ","á¼":"Î±ÌÌ","á¼":"Î±ÌÍ","á¼":"Î±ÌÍ","á¼":"ÎÌ","á¼":"ÎÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼":"ÎÌÍ","á¼":"ÎÌÍ","á¼":"ÎµÌ","á¼":"ÎµÌ","á¼":"ÎµÌÌ","á¼":"ÎµÌÌ","á¼":"ÎµÌÌ","á¼":"ÎµÌÌ","á¼":"ÎÌ","á¼":"ÎÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼":"ÎÌÌ","á¼ ":"Î·Ì","á¼¡":"Î·Ì","á¼¢":"Î·ÌÌ","á¼£":"Î·ÌÌ","á¼¤":"Î·ÌÌ","á¼¥":"Î·ÌÌ","á¼¦":"Î·ÌÍ","á¼§":"Î·ÌÍ","á¼¨":"ÎÌ","á¼©":"ÎÌ","á¼ª":"ÎÌÌ","á¼«":"ÎÌÌ","á¼¬":"ÎÌÌ","á¼­":"ÎÌÌ","á¼®":"ÎÌÍ","á¼¯":"ÎÌÍ","á¼°":"Î¹Ì","á¼±":"Î¹Ì","á¼²":"Î¹ÌÌ","á¼³":"Î¹ÌÌ","á¼´":"Î¹ÌÌ","á¼µ":"Î¹ÌÌ","á¼¶":"Î¹ÌÍ","á¼·":"Î¹ÌÍ","á¼¸":"ÎÌ","á¼¹":"ÎÌ","á¼º":"ÎÌÌ","á¼»":"ÎÌÌ","á¼¼":"ÎÌÌ","á¼½":"ÎÌÌ","á¼¾":"ÎÌÍ","á¼¿":"ÎÌÍ","á½":"Î¿Ì","á½":"Î¿Ì","á½":"Î¿ÌÌ","á½":"Î¿ÌÌ","á½":"Î¿ÌÌ","á½":"Î¿ÌÌ","á½":"ÎÌ","á½":"ÎÌ","á½":"ÎÌÌ","á½":"ÎÌÌ","á½":"ÎÌÌ","á½":"ÎÌÌ","á½":"ÏÌ","á½":"ÏÌ","á½":"ÏÌÌ","á½":"ÏÌÌ","á½":"ÏÌÌ","á½":"ÏÌÌ","á½":"ÏÌÍ","á½":"ÏÌÍ","á½":"Î¥Ì","á½":"Î¥ÌÌ","á½":"Î¥ÌÌ","á½":"Î¥ÌÍ","á½ ":"ÏÌ","á½¡":"ÏÌ","á½¢":"ÏÌÌ","á½£":"ÏÌÌ","á½¤":"ÏÌÌ","á½¥":"ÏÌÌ","á½¦":"ÏÌÍ","á½§":"ÏÌÍ","á½¨":"Î©Ì","á½©":"Î©Ì","á½ª":"Î©ÌÌ","á½«":"Î©ÌÌ","á½¬":"Î©ÌÌ","á½­":"Î©ÌÌ","á½®":"Î©ÌÍ","á½¯":"Î©ÌÍ","á½°":"Î±Ì","á½±":"Î±Ì","á½²":"ÎµÌ","á½³":"ÎµÌ","á½´":"Î·Ì","á½µ":"Î·Ì","á½¶":"Î¹Ì","á½·":"Î¹Ì","á½¸":"Î¿Ì","á½¹":"Î¿Ì","á½º":"ÏÌ","á½»":"ÏÌ","á½¼":"ÏÌ","á½½":"ÏÌ","á¾":"Î±ÌÍ","á¾":"Î±ÌÍ","á¾":"Î±ÌÌÍ","á¾":"Î±ÌÌÍ","á¾":"Î±ÌÌÍ","á¾":"Î±ÌÌÍ","á¾":"Î±ÌÍÍ","á¾":"Î±ÌÍÍ","á¾":"ÎÌÍ","á¾":"ÎÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÍÍ","á¾":"ÎÌÍÍ","á¾":"Î·ÌÍ","á¾":"Î·ÌÍ","á¾":"Î·ÌÌÍ","á¾":"Î·ÌÌÍ","á¾":"Î·ÌÌÍ","á¾":"Î·ÌÌÍ","á¾":"Î·ÌÍÍ","á¾":"Î·ÌÍÍ","á¾":"ÎÌÍ","á¾":"ÎÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÌÍ","á¾":"ÎÌÍÍ","á¾":"ÎÌÍÍ","á¾ ":"ÏÌÍ","á¾¡":"ÏÌÍ","á¾¢":"ÏÌÌÍ","á¾£":"ÏÌÌÍ","á¾¤":"ÏÌÌÍ","á¾¥":"ÏÌÌÍ","á¾¦":"ÏÌÍÍ","á¾§":"ÏÌÍÍ","á¾¨":"Î©ÌÍ","á¾©":"Î©ÌÍ","á¾ª":"Î©ÌÌÍ","á¾«":"Î©ÌÌÍ","á¾¬":"Î©ÌÌÍ","á¾­":"Î©ÌÌÍ","á¾®":"Î©ÌÍÍ","á¾¯":"Î©ÌÍÍ","á¾°":"Î±Ì","á¾±":"Î±Ì","á¾²":"Î±ÌÍ","á¾³":"Î±Í","á¾´":"Î±ÌÍ","á¾¶":"Î±Í","á¾·":"Î±ÍÍ","á¾¸":"ÎÌ","á¾¹":"ÎÌ","á¾º":"ÎÌ","á¾»":"ÎÌ","á¾¼":"ÎÍ","á¾¾":"Î¹","á¿":"Â¨Í","á¿":"Î·ÌÍ","á¿":"Î·Í","á¿":"Î·ÌÍ","á¿":"Î·Í","á¿":"Î·ÍÍ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"ÎÍ","á¿":"á¾¿Ì","á¿":"á¾¿Ì","á¿":"á¾¿Í","á¿":"Î¹Ì","á¿":"Î¹Ì","á¿":"Î¹ÌÌ","á¿":"Î¹ÌÌ","á¿":"Î¹Í","á¿":"Î¹ÌÍ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"ÎÌ","á¿":"á¿¾Ì","á¿":"á¿¾Ì","á¿":"á¿¾Í","á¿ ":"ÏÌ","á¿¡":"ÏÌ","á¿¢":"ÏÌÌ","á¿£":"ÏÌÌ","á¿¤":"ÏÌ","á¿¥":"ÏÌ","á¿¦":"ÏÍ","á¿§":"ÏÌÍ","á¿¨":"Î¥Ì","á¿©":"Î¥Ì","á¿ª":"Î¥Ì","á¿«":"Î¥Ì","á¿¬":"Î¡Ì","á¿­":"Â¨Ì","á¿®":"Â¨Ì","á¿¯":"`","á¿²":"ÏÌÍ","á¿³":"ÏÍ","á¿´":"ÏÌÍ","á¿¶":"ÏÍ","á¿·":"ÏÍÍ","á¿¸":"ÎÌ","á¿¹":"ÎÌ","á¿º":"Î©Ì","á¿»":"Î©Ì","á¿¼":"Î©Í","á¿½":"Â´","â":"â","â":"â","â¦":"Î©","âª":"K","â«":"AÌ","â":"âÌ¸","â":"âÌ¸","â®":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â¤":"â£Ì¸","â¦":"â¥Ì¸","â":"â¼Ì¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â ":"=Ì¸","â¢":"â¡Ì¸","â­":"âÌ¸","â®":"<Ì¸","â¯":">Ì¸","â°":"â¤Ì¸","â±":"â¥Ì¸","â´":"â²Ì¸","âµ":"â³Ì¸","â¸":"â¶Ì¸","â¹":"â·Ì¸","â":"âºÌ¸","â":"â»Ì¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â":"âÌ¸","â¬":"â¢Ì¸","â­":"â¨Ì¸","â®":"â©Ì¸","â¯":"â«Ì¸","â ":"â¼Ì¸","â¡":"â½Ì¸","â¢":"âÌ¸","â£":"âÌ¸","âª":"â²Ì¸","â«":"â³Ì¸","â¬":"â´Ì¸","â­":"âµÌ¸","â©":"ã","âª":"ã","â«":"â«Ì¸","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã ":"ãã","ã¢":"ã¡ã","ã¥":"ã¤ã","ã§":"ã¦ã","ã©":"ã¨ã","ã°":"ã¯ã","ã±":"ã¯ã","ã³":"ã²ã","ã´":"ã²ã","ã¶":"ãµã","ã·":"ãµã","ã¹":"ã¸ã","ãº":"ã¸ã","ã¼":"ã»ã","ã½":"ã»ã","ã":"ãã","ã":"ãã","ã¬":"ã«ã","ã®":"ã­ã","ã°":"ã¯ã","ã²":"ã±ã","ã´":"ã³ã","ã¶":"ãµã","ã¸":"ã·ã","ãº":"ã¹ã","ã¼":"ã»ã","ã¾":"ã½ã","ã":"ã¿ã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã":"ãã","ã´":"ã¦ã","ã·":"ã¯ã","ã¸":"ã°ã","ã¹":"ã±ã","ãº":"ã²ã","ã¾":"ã½ã","ï¤":"è±","ï¤":"æ´","ï¤":"è»","ï¤":"è³","ï¤":"æ»","ï¤":"ä¸²","ï¤":"å¥","ï¤":"é¾","ï¤":"é¾","ï¤":"å¥","ï¤":"é","ï¤":"å","ï¤":"å¥","ï¤":"æ¶","ï¤":"ç©","ï¤":"ç¾","ï¤":"è¿","ï¤":"èº","ï¤":"è£¸","ï¤":"é","ï¤":"æ¨","ï¤":"æ´","ï¤":"ç","ï¤":"ç","ï¤":"è½","ï¤":"éª","ï¤":"é§±","ï¤":"äº","ï¤":"åµ","ï¤":"æ¬","ï¤":"ç","ï¤":"è­","ï¤ ":"é¸","ï¤¡":"åµ","ï¤¢":"æ¿«","ï¤£":"è","ï¤¤":"è¥¤","ï¤¥":"æ","ï¤¦":"è","ï¤§":"è ","ï¤¨":"å»","ï¤©":"æ","ï¤ª":"æµª","ï¤«":"ç¼","ï¤¬":"é","ï¤­":"ä¾","ï¤®":"å·","ï¤¯":"å","ï¤°":"æ","ï¤±":"æ«","ï¤²":"ç","ï¤³":"ç§","ï¤´":"è","ï¤µ":"è","ï¤¶":"è","ï¤·":"è·¯","ï¤¸":"é²","ï¤¹":"é­¯","ï¤º":"é·º","ï¤»":"ç¢","ï¤¼":"ç¥¿","ï¤½":"ç¶ ","ï¤¾":"è","ï¤¿":"é","ï¥":"é¹¿","ï¥":"è«","ï¥":"å£","ï¥":"å¼","ï¥":"ç± ","ï¥":"è¾","ï¥":"ç¢","ï¥":"ç£","ï¥":"è³","ï¥":"é·","ï¥":"å£","ï¥":"å±¢","ï¥":"æ¨","ï¥":"æ·","ï¥":"æ¼","ï¥":"ç´¯","ï¥":"ç¸·","ï¥":"é","ï¥":"å","ï¥":"è","ï¥":"å","ï¥":"å","ï¥":"ç¨","ï¥":"ç¶¾","ï¥":"è±","ï¥":"éµ","ï¥":"è®","ï¥":"æ","ï¥":"æ¨","ï¥":"è«¾","ï¥":"ä¸¹","ï¥":"å¯§","ï¥ ":"æ","ï¥¡":"ç","ï¥¢":"ç°","ï¥£":"å","ï¥¤":"ç£»","ï¥¥":"ä¾¿","ï¥¦":"å¾©","ï¥§":"ä¸","ï¥¨":"æ³","ï¥©":"æ¸","ï¥ª":"ç´¢","ï¥«":"å","ï¥¬":"å¡","ï¥­":"ç","ï¥®":"è","ï¥¯":"èªª","ï¥°":"æ®º","ï¥±":"è¾°","ï¥²":"æ²","ï¥³":"æ¾","ï¥´":"è¥","ï¥µ":"æ ","ï¥¶":"ç¥","ï¥·":"äº®","ï¥¸":"å©","ï¥¹":"å","ï¥º":"æ¢","ï¥»":"ç³§","ï¥¼":"è¯","ï¥½":"è«","ï¥¾":"é","ï¥¿":"åµ","ï¦":"å","ï¦":"å¥³","ï¦":"å»¬","ï¦":"æ","ï¦":"æ¿¾","ï¦":"ç¤ª","ï¦":"é­","ï¦":"é©ª","ï¦":"éº","ï¦":"é»","ï¦":"å","ï¦":"æ","ï¦":"æ­·","ï¦":"è½¢","ï¦":"å¹´","ï¦":"æ","ï¦":"æ","ï¦":"æ","ï¦":"æ¼£","ï¦":"ç","ï¦":"ç","ï¦":"ç§","ï¦":"ç·´","ï¦":"è¯","ï¦":"è¼¦","ï¦":"è®","ï¦":"é£","ï¦":"é","ï¦":"å","ï¦":"å£","ï¦":"å½","ï¦":"ç","ï¦ ":"è£","ï¦¡":"èªª","ï¦¢":"å»","ï¦£":"å¿µ","ï¦¤":"æ»","ï¦¥":"æ®®","ï¦¦":"ç°¾","ï¦§":"çµ","ï¦¨":"ä»¤","ï¦©":"å¹","ï¦ª":"å¯§","ï¦«":"å¶º","ï¦¬":"æ","ï¦­":"ç²","ï¦®":"ç©","ï¦¯":"ç¾","ï¦°":"è","ï¦±":"é´","ï¦²":"é¶","ï¦³":"é","ï¦´":"é ","ï¦µ":"ä¾","ï¦¶":"ç¦®","ï¦·":"é´","ï¦¸":"é¸","ï¦¹":"æ¡","ï¦º":"äº","ï¦»":"å","ï¦¼":"å¯®","ï¦½":"å°¿","ï¦¾":"æ","ï¦¿":"æ¨","ï§":"ç","ï§":"ç","ï§":"è¼","ï§":"é¼","ï§":"é¾","ï§":"æ","ï§":"é®","ï§":"å","ï§":"æ»","ï§":"æ³","ï§":"æµ","ï§":"æº","ï§":"ç","ï§":"ç","ï§":"ç¡«","ï§":"ç´","ï§":"é¡","ï§":"å­","ï§":"æ®","ï§":"é¸","ï§":"å«","ï§":"å´","ï§":"æ·ª","ï§":"è¼ª","ï§":"å¾","ï§":"æ","ï§":"æ ","ï§":"ç","ï§":"é","ï§":"å©","ï§":"å","ï§":"å±¥","ï§ ":"æ","ï§¡":"æ","ï§¢":"æ¢¨","ï§£":"æ³¥","ï§¤":"ç","ï§¥":"ç¢","ï§¦":"ç½¹","ï§§":"è£","ï§¨":"è£¡","ï§©":"é","ï§ª":"é¢","ï§«":"å¿","ï§¬":"æºº","ï§­":"å","ï§®":"ç","ï§¯":"ç","ï§°":"èº","ï§±":"é£","ï§²":"é±","ï§³":"éº","ï§´":"æ","ï§µ":"æ·","ï§¶":"è¨","ï§·":"ç«","ï§¸":"ç¬ ","ï§¹":"ç²","ï§º":"ç","ï§»":"ç","ï§¼":"è­","ï§½":"ä»","ï§¾":"è¶","ï§¿":"åº","ï¨":"å","ï¨":"åº¦","ï¨":"æ","ï¨":"ç³","ï¨":"å®","ï¨":"æ´","ï¨":"æ´","ï¨":"è¼»","ï¨":"è¡","ï¨":"é","ï¨":"è¦","ï¨":"å»","ï¨":"å","ï¨":"å","ï¨":"å¡","ï¨":"æ´","ï¨":"å","ï¨":"çª","ï¨":"ç","ï¨":"ç¤¼","ï¨":"ç¥","ï¨":"ç¥¥","ï¨":"ç¦","ï¨":"é","ï¨":"ç²¾","ï¨":"ç¾½","ï¨ ":"è","ï¨¢":"è«¸","ï¨¥":"é¸","ï¨¦":"é½","ï¨ª":"é£¯","ï¨«":"é£¼","ï¨¬":"é¤¨","ï¨­":"é¶´","ï¨®":"é","ï¨¯":"é·","ï¨°":"ä¾®","ï¨±":"å§","ï¨²":"å","ï¨³":"å","ï¨´":"å¤","ï¨µ":"å","ï¨¶":"å","ï¨·":"å","ï¨¸":"å¨","ï¨¹":"å¡","ï¨º":"å¢¨","ï¨»":"å±¤","ï¨¼":"å±®","ï¨½":"æ","ï¨¾":"æ¨","ï¨¿":"æ","ï©":"æ²","ï©":"æ","ï©":"æ¢","ï©":"æ","ï©":"æ¢","ï©":"æµ·","ï©":"æ¸","ï©":"æ¼¢","ï©":"ç®","ï©":"ç«","ï©":"ç¢","ï©":"ç¢","ï©":"ç¤¾","ï©":"ç¥","ï©":"ç¥","ï©":"ç¥","ï©":"ç¥","ï©":"ç¥","ï©":"ç¦","ï©":"ç¦","ï©":"ç©","ï©":"çª","ï©":"ç¯","ï©":"ç·´","ï©":"ç¸","ï©":"ç¹","ï©":"ç½²","ï©":"è","ï©":"è­","ï©":"è¹","ï©":"è¹","ï©":"è","ï© ":"è¤","ï©¡":"è¦","ï©¢":"è¬","ï©£":"è¬¹","ï©¤":"è³","ï©¥":"è´","ï©¦":"è¾¶","ï©§":"é¸","ï©¨":"é£","ï©©":"é¿","ï©ª":"é »","ï©«":"æµ","ï©¬":"ð¤®","ï©­":"è","ï©°":"ä¸¦","ï©±":"åµ","ï©²":"å¨","ï©³":"ä¾","ï©´":"å","ï©µ":"å","ï©¶":"å","ï©·":"åº","ï©¸":"å","ï©¹":"å","ï©º":"å","ï©»":"å¢","ï©¼":"å¡","ï©½":"å¢³","ï©¾":"å¥","ï©¿":"å¥","ïª":"å©¢","ïª":"å¬¨","ïª":"å»","ïª":"å»","ïª":"å½©","ïª":"å¾­","ïª":"æ","ïª":"æ","ïª":"æ","ïª":"æ","ïª":"æ ","ïª":"æ²","ïª":"æ´","ïª":"æ","ïª":"æ","ïª":"æ","ïª":"æ","ïª":"æ´","ïª":"æ","ïª":"æ","ïª":"æ","ïª":"æ­¹","ïª":"æ®º","ïª":"æµ","ïª":"æ»","ïª":"æ»","ïª":"æ¼¢","ïª":"ç","ïª":"ç®","ïª":"ç§","ïª":"çµ","ïª":"ç¯","ïª ":"çª","ïª¡":"ç±","ïª¢":"ç","ïª£":"ç»","ïª¤":"ç","ïª¥":"ç","ïª¦":"ç","ïª§":"ç","ïª¨":"ç´","ïª©":"ç","ïªª":"ç","ïª«":"ç£","ïª¬":"çª±","ïª­":"ç¯","ïª®":"ç±»","ïª¯":"çµ","ïª°":"ç·´","ïª±":"ç¼¾","ïª²":"è","ïª³":"è","ïª´":"è¯","ïªµ":"è¹","ïª¶":"è¥","ïª·":"è¦","ïª¸":"è¦","ïª¹":"èª¿","ïªº":"è«¸","ïª»":"è«","ïª¼":"è¬","ïª½":"è«¾","ïª¾":"è«­","ïª¿":"è¬¹","ï«":"è®","ï«":"è´","ï«":"è¼¸","ï«":"é²","ï«":"é","ï«":"é¶","ï«":"é¼","ï«":"é£","ï«":"é","ï«":"é","ï«":"é¿","ï«":"é ","ï«":"é »","ï«":"é¬","ï«":"é¾","ï«":"ð¢¡","ï«":"ð¢¡","ï«":"ð£","ï«":"ã®","ï«":"ä","ï«":"ä¹","ï«":"ð¥","ï«":"ð¥³","ï«":"ð§»","ï«":"é½","ï«":"é¾","ï¬":"×Ö´","ï¬":"×²Ö·","ï¬ª":"×©×","ï¬«":"×©×","ï¬¬":"×©Ö¼×","ï¬­":"×©Ö¼×","ï¬®":"×Ö·","ï¬¯":"×Ö¸","ï¬°":"×Ö¼","ï¬±":"×Ö¼","ï¬²":"×Ö¼","ï¬³":"×Ö¼","ï¬´":"×Ö¼","ï¬µ":"×Ö¼","ï¬¶":"×Ö¼","ï¬¸":"×Ö¼","ï¬¹":"×Ö¼","ï¬º":"×Ö¼","ï¬»":"×Ö¼","ï¬¼":"×Ö¼","ï¬¾":"×Ö¼","ï­":"× Ö¼","ï­":"×¡Ö¼","ï­":"×£Ö¼","ï­":"×¤Ö¼","ï­":"×¦Ö¼","ï­":"×§Ö¼","ï­":"×¨Ö¼","ï­":"×©Ö¼","ï­":"×ªÖ¼","ï­":"×Ö¹","ï­":"×Ö¿","ï­":"×Ö¿","ï­":"×¤Ö¿","ð":"ððº","ð":"ððº","ð«":"ð¥ðº","ð®":"ð±ð§","ð¯":"ð²ð§","ð":"ðð¥","ð":"ðð¥","ð ":"ðð¥ð®","ð¡":"ðð¥ð¯","ð¢":"ðð¥ð°","ð£":"ðð¥ð±","ð¤":"ðð¥ð²","ð»":"ð¹ð¥","ð¼":"ðºð¥","ð½":"ð¹ð¥ð®","ð¾":"ðºð¥ð®","ð¿":"ð¹ð¥ð¯","ð":"ðºð¥ð¯","ð¯ ":"ä¸½","ð¯ ":"ä¸¸","ð¯ ":"ä¹","ð¯ ":"ð ¢","ð¯ ":"ä½ ","ð¯ ":"ä¾®","ð¯ ":"ä¾»","ð¯ ":"å","ð¯ ":"åº","ð¯ ":"å","ð¯ ":"å§","ð¯ ":"å","ð¯ ":"ã","ð¯ ":"ð º","ð¯ ":"å","ð¯ ":"å","ð¯ ":"å¤","ð¯ ":"å·","ð¯ ":"ð ","ð¯ ":"ã¹","ð¯ ":"å§","ð¯ ":"å","ð¯ ":"ð ","ð¯ ":"å","ð¯ ":"å¤","ð¯ ":"ä»","ð¯ ":"å¬","ð¯ ":"åµ","ð¯ ":"ð©","ð¯ ":"åµ","ð¯ ":"å","ð¯ ":"ã","ð¯  ":"å»","ð¯ ¡":"å","ð¯ ¢":"å²","ð¯ £":"å·","ð¯ ¤":"ã","ð¯ ¥":"å","ð¯ ¦":"å","ð¯ §":"å¤","ð¯ ¨":"åº","ð¯ ©":"å","ð¯ ª":"å","ð¯ «":"å","ð¯ ¬":"å","ð¯ ­":"å","ð¯ ®":"å","ð¯ ¯":"å³","ð¯ °":"å½","ð¯ ±":"å¿","ð¯ ²":"å¿","ð¯ ³":"å¿","ð¯ ´":"ð ¨¬","ð¯ µ":"ç°","ð¯ ¶":"å","ð¯ ·":"å","ð¯ ¸":"ð ­£","ð¯ ¹":"å«","ð¯ º":"å±","ð¯ »":"å","ð¯ ¼":"å","ð¯ ½":"å¸","ð¯ ¾":"å","ð¯ ¿":"å¨","ð¯¡":"å¢","ð¯¡":"å¶","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å£","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å«","ð¯¡":"å³","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å","ð¯¡":"å´","ð¯¡":"å","ð¯¡":"å£®","ð¯¡":"å","ð¯¡":"å´","ð¯¡":"å ","ð¯¡":"å","ð¯¡":"å ²","ð¯¡":"å ±","ð¯¡":"å¢¬","ð¯¡":"ð¡¤","ð¯¡":"å£²","ð¯¡":"å£·","ð¯¡":"å¤","ð¯¡":"å¤","ð¯¡":"å¤¢","ð¯¡":"å¥¢","ð¯¡ ":"ð¡¨","ð¯¡¡":"ð¡ª","ð¯¡¢":"å§¬","ð¯¡£":"å¨","ð¯¡¤":"å¨§","ð¯¡¥":"å§","ð¯¡¦":"å©¦","ð¯¡§":"ã®","ð¯¡¨":"ã¼","ð¯¡©":"å¬","ð¯¡ª":"å¬¾","ð¯¡«":"å¬¾","ð¯¡¬":"ð¡§","ð¯¡­":"å¯","ð¯¡®":"å¯","ð¯¡¯":"å¯§","ð¯¡°":"å¯³","ð¯¡±":"ð¡¬","ð¯¡²":"å¯¿","ð¯¡³":"å°","ð¯¡´":"å½","ð¯¡µ":"å°¢","ð¯¡¶":"ã","ð¯¡·":"å± ","ð¯¡¸":"å±®","ð¯¡¹":"å³","ð¯¡º":"å²","ð¯¡»":"ð¡·¤","ð¯¡¼":"åµ","ð¯¡½":"ð¡·¦","ð¯¡¾":"åµ®","ð¯¡¿":"åµ«","ð¯¢":"åµ¼","ð¯¢":"å·¡","ð¯¢":"å·¢","ð¯¢":"ã ¯","ð¯¢":"å·½","ð¯¢":"å¸¨","ð¯¢":"å¸½","ð¯¢":"å¹©","ð¯¢":"ã¡¢","ð¯¢":"ð¢","ð¯¢":"ã¡¼","ð¯¢":"åº°","ð¯¢":"åº³","ð¯¢":"åº¶","ð¯¢":"å»","ð¯¢":"ðª","ð¯¢":"å»¾","ð¯¢":"ð¢±","ð¯¢":"ð¢±","ð¯¢":"è","ð¯¢":"å¼¢","ð¯¢":"å¼¢","ð¯¢":"ã£","ð¯¢":"ð£¸","ð¯¢":"ð¦","ð¯¢":"å½¢","ð¯¢":"å½«","ð¯¢":"ã££","ð¯¢":"å¾","ð¯¢":"å¿","ð¯¢":"å¿","ð¯¢":"å¿¹","ð¯¢ ":"æ","ð¯¢¡":"ã¤º","ð¯¢¢":"ã¤","ð¯¢£":"æ","ð¯¢¤":"ð¢","ð¯¢¥":"æ","ð¯¢¦":"æ","ð¯¢§":"æ","ð¯¢¨":"æ","ð¯¢©":"æ","ð¯¢ª":"æº","ð¯¢«":"æ","ð¯¢¬":"æ²","ð¯¢­":"æ¤","ð¯¢®":"æ¯","ð¯¢¯":"æ","ð¯¢°":"æ²","ð¯¢±":"æ¶","ð¯¢²":"æ","ð¯¢³":"æ","ð¯¢´":"æ","ð¯¢µ":"æ±","ð¯¢¶":"æ","ð¯¢·":"æ","ð¯¢¸":"ð¢¬","ð¯¢¹":"æ½","ð¯¢º":"æ¼","ð¯¢»":"æ¨","ð¯¢¼":"æ","ð¯¢½":"æ¤","ð¯¢¾":"ð¢¯±","ð¯¢¿":"æ¢","ð¯£":"æ","ð¯£":"æ©","ð¯£":"ã¨®","ð¯£":"æ©","ð¯£":"æ¾","ð¯£":"æ","ð¯£":"æ·","ð¯£":"ã©¬","ð¯£":"æ","ð¯£":"æ¬","ð¯£":"ð£","ð¯£":"æ£","ð¯£":"æ¸","ð¯£":"æ","ð¯£":"ã¬","ð¯£":"æ","ð¯£":"ã¬","ð¯£":"ã«¤","ð¯£":"å","ð¯£":"å","ð¯£":"æ","ð¯£":"æ","ð¯£":"è­","ð¯£":"ä","ð¯£":"æ","ð¯£":"æ","ð¯£":"æ¡","ð¯£":"æ","ð¯£":"æ","ð¯£":"ð£","ð¯£":"ã­","ð¯£":"æº","ð¯£ ":"æ","ð¯£¡":"æ¡","ð¯£¢":"æ¢","ð¯££":"ð£­","ð¯£¤":"æ¢","ð¯£¥":"æ ","ð¯£¦":"æ¤","ð¯£§":"ã®","ð¯£¨":"æ¥","ð¯£©":"æ¦£","ð¯£ª":"æ§ª","ð¯£«":"æª¨","ð¯£¬":"ð££","ð¯£­":"æ«","ð¯£®":"ã°","ð¯£¯":"æ¬¡","ð¯£°":"ð£¢§","ð¯£±":"æ­","ð¯£²":"ã±","ð¯£³":"æ­²","ð¯£´":"æ®","ð¯£µ":"æ®º","ð¯£¶":"æ®»","ð¯£·":"ð£ª","ð¯£¸":"ð¡´","ð¯£¹":"ð£«º","ð¯£º":"æ±","ð¯£»":"ð£²¼","ð¯£¼":"æ²¿","ð¯£½":"æ³","ð¯£¾":"æ±§","ð¯£¿":"æ´","ð¯¤":"æ´¾","ð¯¤":"æµ·","ð¯¤":"æµ","ð¯¤":"æµ©","ð¯¤":"æµ¸","ð¯¤":"æ¶","ð¯¤":"ð£´","ð¯¤":"æ´´","ð¯¤":"æ¸¯","ð¯¤":"æ¹®","ð¯¤":"ã´³","ð¯¤":"æ»","ð¯¤":"æ»","ð¯¤":"ð£»","ð¯¤":"æ·¹","ð¯¤":"æ½®","ð¯¤":"ð£½","ð¯¤":"ð£¾","ð¯¤":"æ¿","ð¯¤":"ç¹","ð¯¤":"ç","ð¯¤":"ç","ð¯¤":"ã¶","ð¯¤":"ç","ð¯¤":"ç½","ð¯¤":"ç·","ð¯¤":"ç­","ð¯¤":"ð ¥","ð¯¤":"ç","ð¯¤":"ð¤£","ð¯¤":"ç","ð¯¤":"ð¤«","ð¯¤ ":"ç¨","ð¯¤¡":"çµ","ð¯¤¢":"ç","ð¯¤£":"ð¤","ð¯¤¤":"ç","ð¯¤¥":"ç","ð¯¤¦":"ð¤µ","ð¯¤§":"ð¤ ","ð¯¤¨":"çº","ð¯¤©":"ç","ð¯¤ª":"ãº¬","ð¯¤«":"ç¥","ð¯¤¬":"ãº¸","ð¯¤­":"ãº¸","ð¯¤®":"ç","ð¯¤¯":"ç","ð¯¤°":"ç±","ð¯¤±":"ç","ð¯¤²":"ç","ð¯¤³":"ã¼","ð¯¤´":"ç¤","ð¯¤µ":"ð¤°¶","ð¯¤¶":"ç¾","ð¯¤·":"ð¤²","ð¯¤¸":"ç°","ð¯¤¹":"ð¢","ð¯¤º":"ç","ð¯¤»":"ð¤¾¡","ð¯¤¼":"ð¤¾¸","ð¯¤½":"ð¥","ð¯¤¾":"ã¿¼","ð¯¤¿":"ä","ð¯¥":"ç´","ð¯¥":"ð¥³","ð¯¥":"ð¥²","ð¯¥":"ð¥","ð¯¥":"ð¥³","ð¯¥":"ç","ð¯¥":"ç","ð¯¥":"ç","ð¯¥":"ç","ð¯¥":"ä¹","ð¯¥":"ç","ð¯¥":"ä","ð¯¥":"ä","ð¯¥":"ð¥","ð¯¥":"ç¡","ð¯¥":"ç¢","ð¯¥":"ç£","ð¯¥":"ä£","ð¯¥":"ð¥¦","ð¯¥":"ç¥","ð¯¥":"ð¥","ð¯¥":"ð¥","ð¯¥":"ç¦","ð¯¥":"ç§«","ð¯¥":"ä¯","ð¯¥":"ç©","ð¯¥":"ç©","ð¯¥":"ç©","ð¯¥":"ð¥¥¼","ð¯¥":"ð¥ª§","ð¯¥":"ð¥ª§","ð¯¥":"ç«®","ð¯¥ ":"ä","ð¯¥¡":"ð¥®«","ð¯¥¢":"ç¯","ð¯¥£":"ç¯","ð¯¥¤":"ä§","ð¯¥¥":"ð¥²","ð¯¥¦":"ç³","ð¯¥§":"ä ","ð¯¥¨":"ç³¨","ð¯¥©":"ç³£","ð¯¥ª":"ç´","ð¯¥«":"ð¥¾","ð¯¥¬":"çµ£","ð¯¥­":"ä","ð¯¥®":"ç·","ð¯¥¯":"ç¸","ð¯¥°":"ç¹","ð¯¥±":"ä´","ð¯¥²":"ð¦¨","ð¯¥³":"ð¦","ð¯¥´":"ä","ð¯¥µ":"ð¦","ð¯¥¶":"ç½º","ð¯¥·":"ð¦¾","ð¯¥¸":"ç¾","ð¯¥¹":"ç¿º","ð¯¥º":"è","ð¯¥»":"ð¦","ð¯¥¼":"ð¦£","ð¯¥½":"è ","ð¯¥¾":"ð¦¨","ð¯¥¿":"è°","ð¯¦":"ð£","ð¯¦":"ä","ð¯¦":"è²","ð¯¦":"è","ð¯¦":"ä","ð¯¦":"è¾","ð¯¦":"åªµ","ð¯¦":"ð¦§","ð¯¦":"ð¦µ","ð¯¦":"ð£","ð¯¦":"ð£","ð¯¦":"è","ð¯¦":"è","ð¯¦":"è¾","ð¯¦":"ä«","ð¯¦":"è","ð¯¦":"è","ð¯¦":"è","ð¯¦":"å³","ð¯¦":"è±","ð¯¦":"è³","ð¯¦":"è½","ð¯¦":"è¦","ð¯¦":"ð¦¬¼","ð¯¦":"è¥","ð¯¦":"è","ð¯¦":"è£","ð¯¦":"è­","ð¯¦":"è£","ð¯¦":"è½","ð¯¦":"è§","ð¯¦":"è","ð¯¦ ":"è","ð¯¦¡":"è","ð¯¦¢":"è","ð¯¦£":"è","ð¯¦¤":"ð¦°¶","ð¯¦¥":"ð¦µ«","ð¯¦¦":"ð¦³","ð¯¦§":"ä«","ð¯¦¨":"è±","ð¯¦©":"è³","ð¯¦ª":"è","ð¯¦«":"ð§","ð¯¦¬":"è¤","ð¯¦­":"ð¦¼¬","ð¯¦®":"ä","ð¯¦¯":"ä¡","ð¯¦°":"ð¦¾±","ð¯¦±":"ð§","ð¯¦²":"ä«","ð¯¦³":"è","ð¯¦´":"è","ð¯¦µ":"è§","ð¯¦¶":"è©","ð¯¦·":"è©","ð¯¦¸":"è","ð¯¦¹":"è","ð¯¦º":"è¢","ð¯¦»":"è¹","ð¯¦¼":"è¨","ð¯¦½":"è«","ð¯¦¾":"è","ð¯¦¿":"ä","ð¯§":"è¡","ð¯§":"è ","ð¯§":"ä¹","ð¯§":"è¡ ","ð¯§":"è¡£","ð¯§":"ð§§","ð¯§":"è£","ð¯§":"è£","ð¯§":"äµ","ð¯§":"è£º","ð¯§":"ã»","ð¯§":"ð§¢®","ð¯§":"ð§¥¦","ð¯§":"ä¾","ð¯§":"ä","ð¯§":"èª ","ð¯§":"è«­","ð¯§":"è®","ð¯§":"è±","ð¯§":"ð§²¨","ð¯§":"è²«","ð¯§":"è³","ð¯§":"è´","ð¯§":"èµ·","ð¯§":"ð§¼¯","ð¯§":"ð  ","ð¯§":"è·","ð¯§":"è¶¼","ð¯§":"è·°","ð¯§":"ð £","ð¯§":"è»","ð¯§":"è¼¸","ð¯§ ":"ð¨","ð¯§¡":"ð¨­","ð¯§¢":"é","ð¯§£":"é±","ð¯§¤":"é","ð¯§¥":"ð¨®","ð¯§¦":"é","ð¯§§":"é¸","ð¯§¨":"é","ð¯§©":"é","ð¯§ª":"é¼","ð¯§«":"é¹","ð¯§¬":"é","ð¯§­":"ð¨¯º","ð¯§®":"é","ð¯§¯":"ä¦","ð¯§°":"é·","ð¯§±":"ð¨µ·","ð¯§²":"ä§¦","ð¯§³":"é","ð¯§´":"å¶²","ð¯§µ":"é£","ð¯§¶":"ð©","ð¯§·":"ð©","ð¯§¸":"ä©®","ð¯§¹":"ä©¶","ð¯§º":"é ","ð¯§»":"ð©","ð¯§¼":"äª²","ð¯§½":"ð©","ð¯§¾":"é ","ð¯§¿":"é ","ð¯¨":"é ©","ð¯¨":"ð©¶","ð¯¨":"é£¢","ð¯¨":"ä¬³","ð¯¨":"é¤©","ð¯¨":"é¦§","ð¯¨":"é§","ð¯¨":"é§¾","ð¯¨":"ä¯","ð¯¨":"ð©¬°","ð¯¨":"é¬","ð¯¨":"é±","ð¯¨":"é³½","ð¯¨":"ä³","ð¯¨":"ä³­","ð¯¨":"éµ§","ð¯¨":"ðª","ð¯¨":"ä³¸","ð¯¨":"ðª","ð¯¨":"ðª","ð¯¨":"ðª","ð¯¨":"éº»","ð¯¨":"äµ","ð¯¨":"é»¹","ð¯¨":"é»¾","ð¯¨":"é¼","ð¯¨":"é¼","ð¯¨":"é¼","ð¯¨":"é¼»","ð¯¨":"ðª"};
/*
 * all.js - include file for normalization data for a particular script
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */
// !depends util/utils.js 
// !data norm nfd/all
ilib.data.norm.nfd = ilib.merge(ilib.data.norm.nfd || {}, ilib.data.nfd_all);
ilib.data.nfd_all = undefined;
/*
 * all.js - include file for normalization data for a particular script
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */
// !depends util/utils.js 
// !depends nfd/all.js
// !data norm

ilib.data.nfkd_all = {"Â ":" ","Â¨":" Ì","Âª":"a","Â¯":" Ì","Â²":"2","Â³":"3","Â´":" Ì","Âµ":"Î¼","Â¸":" Ì§","Â¹":"1","Âº":"o","Â¼":"1â4","Â½":"1â2","Â¾":"3â4","Ä²":"IJ","Ä³":"ij","Ä¿":"LÂ·","Å":"lÂ·","Å":"Ê¼n","Å¿":"s","Ç":"DZÌ","Ç":"DzÌ","Ç":"dzÌ","Ç":"LJ","Ç":"Lj","Ç":"lj","Ç":"NJ","Ç":"Nj","Ç":"nj","Ç±":"DZ","Ç²":"Dz","Ç³":"dz","Ê°":"h","Ê±":"É¦","Ê²":"j","Ê³":"r","Ê´":"É¹","Êµ":"É»","Ê¶":"Ê","Ê·":"w","Ê¸":"y","Ë":" Ì","Ë":" Ì","Ë":" Ì","Ë":" Ì¨","Ë":" Ì","Ë":" Ì","Ë ":"É£","Ë¡":"l","Ë¢":"s","Ë£":"x","Ë¤":"Ê","Íº":" Í","Î":" Ì","Ï":"Î²","Ï":"Î¸","Ï":"Î¥","Ï":"Ï","Ï":"Ï","Ï°":"Îº","Ï±":"Ï","Ï²":"Ï","Ï´":"Î","Ïµ":"Îµ","Ï¹":"Î£","Ö":"Õ¥Ö","Ùµ":"Ø§Ù´","Ù¶":"ÙÙ´","Ù·":"ÛÙ´","Ù¸":"ÙÙ´","à¸³":"à¹à¸²","àº³":"à»àº²","à»":"àº«àº","à»":"àº«àº¡","à¼":"à¼","à½·":"à¾²à½±à¾","à½¹":"à¾³à½±à¾","á¼":"á","á´¬":"A","á´­":"Ã","á´®":"B","á´°":"D","á´±":"E","á´²":"Æ","á´³":"G","á´´":"H","á´µ":"I","á´¶":"J","á´·":"K","á´¸":"L","á´¹":"M","á´º":"N","á´¼":"O","á´½":"È¢","á´¾":"P","á´¿":"R","áµ":"T","áµ":"U","áµ":"W","áµ":"a","áµ":"É","áµ":"É","áµ":"á´","áµ":"b","áµ":"d","áµ":"e","áµ":"É","áµ":"É","áµ":"É","áµ":"g","áµ":"k","áµ":"m","áµ":"Å","áµ":"o","áµ":"É","áµ":"á´","áµ":"á´","áµ":"p","áµ":"t","áµ":"u","áµ":"á´","áµ":"É¯","áµ":"v","áµ":"á´¥","áµ":"Î²","áµ":"Î³","áµ":"Î´","áµ ":"Ï","áµ¡":"Ï","áµ¢":"i","áµ£":"r","áµ¤":"u","áµ¥":"v","áµ¦":"Î²","áµ§":"Î³","áµ¨":"Ï","áµ©":"Ï","áµª":"Ï","áµ¸":"Ð½","á¶":"É","á¶":"c","á¶":"É","á¶":"Ã°","á¶":"É","á¶ ":"f","á¶¡":"É","á¶¢":"É¡","á¶£":"É¥","á¶¤":"É¨","á¶¥":"É©","á¶¦":"Éª","á¶§":"áµ»","á¶¨":"Ê","á¶©":"É­","á¶ª":"á¶","á¶«":"Ê","á¶¬":"É±","á¶­":"É°","á¶®":"É²","á¶¯":"É³","á¶°":"É´","á¶±":"Éµ","á¶²":"É¸","á¶³":"Ê","á¶´":"Ê","á¶µ":"Æ«","á¶¶":"Ê","á¶·":"Ê","á¶¸":"á´","á¶¹":"Ê","á¶º":"Ê","á¶»":"z","á¶¼":"Ê","á¶½":"Ê","á¶¾":"Ê","á¶¿":"Î¸","áº":"aÊ¾","á¾½":" Ì","á¾¿":" Ì","á¿":" Í","á¿¾":" Ì","â":" ","â":" ","â":" ","â":" ","â":" ","â":" ","â":" ","â":" ","â":" ","â":"â","â":" Ì³","â¤":".","â¥":"..","â¦":"...","â¯":" ","â³":"â²â²","â´":"â²â²â²","â¶":"âµâµ","â·":"âµâµâµ","â¼":"!!","â¾":" Ì","â":"??","â":"?!","â":"!?","â":"â²â²â²â²","â":" ","â°":"0","â±":"i","â´":"4","âµ":"5","â¶":"6","â·":"7","â¸":"8","â¹":"9","âº":"+","â»":"â","â¼":"=","â½":"(","â¾":")","â¿":"n","â":"0","â":"1","â":"2","â":"3","â":"4","â":"5","â":"6","â":"7","â":"8","â":"9","â":"+","â":"â","â":"=","â":"(","â":")","â":"a","â":"e","â":"o","â":"x","â":"É","â":"h","â":"k","â":"l","â":"m","â":"n","â":"p","â":"s","â":"t","â¨":"Rs","â":"a/c","â":"a/s","â":"C","â":"Â°C","â":"c/o","â":"c/u","â":"Æ","â":"Â°F","â":"g","â":"H","â":"H","â":"H","â":"h","â":"Ä§","â":"I","â":"I","â":"L","â":"l","â":"N","â":"No","â":"P","â":"Q","â":"R","â":"R","â":"R","â ":"SM","â¡":"TEL","â¢":"TM","â¤":"Z","â¨":"Z","â¬":"B","â­":"C","â¯":"e","â°":"E","â±":"F","â³":"M","â´":"o","âµ":"×","â¶":"×","â·":"×","â¸":"×","â¹":"i","â»":"FAX","â¼":"Ï","â½":"Î³","â¾":"Î","â¿":"Î ","â":"â","â":"D","â":"d","â":"e","â":"i","â":"j","â":"1â7","â":"1â9","â":"1â10","â":"1â3","â":"2â3","â":"1â5","â":"2â5","â":"3â5","â":"4â5","â":"1â6","â":"5â6","â":"1â8","â":"3â8","â":"5â8","â":"7â8","â":"1â","â ":"I","â¡":"II","â¢":"III","â£":"IV","â¤":"V","â¥":"VI","â¦":"VII","â§":"VIII","â¨":"IX","â©":"X","âª":"XI","â«":"XII","â¬":"L","â­":"C","â®":"D","â¯":"M","â°":"i","â±":"ii","â²":"iii","â³":"iv","â´":"v","âµ":"vi","â¶":"vii","â·":"viii","â¸":"ix","â¹":"x","âº":"xi","â»":"xii","â¼":"l","â½":"c","â¾":"d","â¿":"m","â":"0â3","â¬":"â«â«","â­":"â«â«â«","â¯":"â®â®","â°":"â®â®â®","â ":"1","â¡":"2","â¢":"3","â£":"4","â¤":"5","â¥":"6","â¦":"7","â§":"8","â¨":"9","â©":"10","âª":"11","â«":"12","â¬":"13","â­":"14","â®":"15","â¯":"16","â°":"17","â±":"18","â²":"19","â³":"20","â´":"(1)","âµ":"(2)","â¶":"(3)","â·":"(4)","â¸":"(5)","â¹":"(6)","âº":"(7)","â»":"(8)","â¼":"(9)","â½":"(10)","â¾":"(11)","â¿":"(12)","â":"(13)","â":"(14)","â":"(15)","â":"(16)","â":"(17)","â":"(18)","â":"(19)","â":"(20)","â":"1.","â":"2.","â":"3.","â":"4.","â":"5.","â":"6.","â":"7.","â":"8.","â":"9.","â":"10.","â":"11.","â":"12.","â":"13.","â":"14.","â":"15.","â":"16.","â":"17.","â":"18.","â":"19.","â":"20.","â":"(a)","â":"(b)","â":"(c)","â":"(d)","â ":"(e)","â¡":"(f)","â¢":"(g)","â£":"(h)","â¤":"(i)","â¥":"(j)","â¦":"(k)","â§":"(l)","â¨":"(m)","â©":"(n)","âª":"(o)","â«":"(p)","â¬":"(q)","â­":"(r)","â®":"(s)","â¯":"(t)","â°":"(u)","â±":"(v)","â²":"(w)","â³":"(x)","â´":"(y)","âµ":"(z)","â¶":"A","â·":"B","â¸":"C","â¹":"D","âº":"E","â»":"F","â¼":"G","â½":"H","â¾":"I","â¿":"J","â":"K","â":"L","â":"M","â":"N","â":"O","â":"P","â":"Q","â":"R","â":"S","â":"T","â":"U","â":"V","â":"W","â":"X","â":"Y","â":"Z","â":"a","â":"b","â":"c","â":"d","â":"e","â":"f","â":"g","â":"h","â":"i","â":"j","â":"k","â":"l","â":"m","â":"n","â":"o","â":"p","â ":"q","â¡":"r","â¢":"s","â£":"t","â¤":"u","â¥":"v","â¦":"w","â§":"x","â¨":"y","â©":"z","âª":"0","â¨":"â«â«â«â«","â©´":"::=","â©µ":"==","â©¶":"===","â±¼":"j","â±½":"V","âµ¯":"âµ¡","âº":"æ¯","â»³":"é¾","â¼":"ä¸","â¼":"ä¸¨","â¼":"ä¸¶","â¼":"ä¸¿","â¼":"ä¹","â¼":"äº","â¼":"äº","â¼":"äº ","â¼":"äºº","â¼":"å¿","â¼":"å¥","â¼":"å«","â¼":"å","â¼":"å","â¼":"å«","â¼":"å ","â¼":"åµ","â¼":"å","â¼":"å","â¼":"å¹","â¼":"å","â¼":"å","â¼":"å¸","â¼":"å","â¼":"å","â¼":"å©","â¼":"å","â¼":"å¶","â¼":"å","â¼":"å£","â¼":"å","â¼":"å","â¼ ":"å£«","â¼¡":"å¤","â¼¢":"å¤","â¼£":"å¤","â¼¤":"å¤§","â¼¥":"å¥³","â¼¦":"å­","â¼§":"å®","â¼¨":"å¯¸","â¼©":"å°","â¼ª":"å°¢","â¼«":"å°¸","â¼¬":"å±®","â¼­":"å±±","â¼®":"å·","â¼¯":"å·¥","â¼°":"å·±","â¼±":"å·¾","â¼²":"å¹²","â¼³":"å¹º","â¼´":"å¹¿","â¼µ":"å»´","â¼¶":"å»¾","â¼·":"å¼","â¼¸":"å¼","â¼¹":"å½","â¼º":"å½¡","â¼»":"å½³","â¼¼":"å¿","â¼½":"æ","â¼¾":"æ¶","â¼¿":"æ","â½":"æ¯","â½":"æ´","â½":"æ","â½":"æ","â½":"æ¤","â½":"æ¹","â½":"æ ","â½":"æ¥","â½":"æ°","â½":"æ","â½":"æ¨","â½":"æ¬ ","â½":"æ­¢","â½":"æ­¹","â½":"æ®³","â½":"æ¯","â½":"æ¯","â½":"æ¯","â½":"æ°","â½":"æ°","â½":"æ°´","â½":"ç«","â½":"çª","â½":"ç¶","â½":"ç»","â½":"ç¿","â½":"ç","â½":"ç","â½":"ç","â½":"ç¬","â½":"ç","â½":"ç","â½ ":"ç","â½¡":"ç¦","â½¢":"ç","â½£":"ç","â½¤":"ç¨","â½¥":"ç°","â½¦":"ç","â½§":"ç","â½¨":"ç¶","â½©":"ç½","â½ª":"ç®","â½«":"ç¿","â½¬":"ç®","â½­":"ç","â½®":"ç¢","â½¯":"ç³","â½°":"ç¤º","â½±":"ç¦¸","â½²":"ç¦¾","â½³":"ç©´","â½´":"ç«","â½µ":"ç«¹","â½¶":"ç±³","â½·":"ç³¸","â½¸":"ç¼¶","â½¹":"ç½","â½º":"ç¾","â½»":"ç¾½","â½¼":"è","â½½":"è","â½¾":"è","â½¿":"è³","â¾":"è¿","â¾":"è","â¾":"è£","â¾":"èª","â¾":"è³","â¾":"è¼","â¾":"è","â¾":"è","â¾":"è","â¾":"è®","â¾":"è²","â¾":"è¸","â¾":"è","â¾":"è«","â¾":"è¡","â¾":"è¡","â¾":"è¡£","â¾":"è¥¾","â¾":"è¦","â¾":"è§","â¾":"è¨","â¾":"è°·","â¾":"è±","â¾":"è±","â¾":"è±¸","â¾":"è²","â¾":"èµ¤","â¾":"èµ°","â¾":"è¶³","â¾":"èº«","â¾":"è»","â¾":"è¾","â¾ ":"è¾°","â¾¡":"è¾µ","â¾¢":"é","â¾£":"é","â¾¤":"é","â¾¥":"é","â¾¦":"é","â¾§":"é·","â¾¨":"é","â¾©":"é","â¾ª":"é¶","â¾«":"é¹","â¾¬":"é¨","â¾­":"é","â¾®":"é","â¾¯":"é¢","â¾°":"é©","â¾±":"é","â¾²":"é­","â¾³":"é³","â¾´":"é ","â¾µ":"é¢¨","â¾¶":"é£","â¾·":"é£","â¾¸":"é¦","â¾¹":"é¦","â¾º":"é¦¬","â¾»":"éª¨","â¾¼":"é«","â¾½":"é«","â¾¾":"é¬¥","â¾¿":"é¬¯","â¿":"é¬²","â¿":"é¬¼","â¿":"é­","â¿":"é³¥","â¿":"é¹µ","â¿":"é¹¿","â¿":"éº¥","â¿":"éº»","â¿":"é»","â¿":"é»","â¿":"é»","â¿":"é»¹","â¿":"é»½","â¿":"é¼","â¿":"é¼","â¿":"é¼ ","â¿":"é¼»","â¿":"é½","â¿":"é½","â¿":"é¾","â¿":"é¾","â¿":"é¾ ","ã":" ","ã¶":"ã","ã¸":"å","ã¹":"å","ãº":"å","ã":" ã","ã":" ã","ã":"ãã","ã¿":"ã³ã","ã±":"á","ã²":"á","ã³":"áª","ã´":"á","ãµ":"á¬","ã¶":"á­","ã·":"á","ã¸":"á","ã¹":"á","ãº":"á°","ã»":"á±","ã¼":"á²","ã½":"á³","ã¾":"á´","ã¿":"áµ","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á¡","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á¡","ã":"á¢","ã":"á£","ã":"á¤","ã":"á¥","ã":"á¦","ã":"á§","ã":"á¨","ã":"á©","ã":"áª","ã":"á«","ã":"á¬","ã":"á­","ã":"á®","ã":"á¯","ã":"á°","ã":"á±","ã ":"á²","ã¡":"á³","ã¢":"á´","ã£":"áµ","ã¤":"á ","ã¥":"á","ã¦":"á","ã§":"á","ã¨":"á","ã©":"á","ãª":"á","ã«":"á","ã¬":"á","ã­":"á","ã®":"á","ã¯":"á","ã°":"á","ã±":"á","ã²":"á","ã³":"á ","ã´":"á¢","ãµ":"á£","ã¶":"á§","ã·":"á©","ã¸":"á«","ã¹":"á¬","ãº":"á­","ã»":"á®","ã¼":"á¯","ã½":"á²","ã¾":"á¶","ã¿":"á","ã":"á","ã":"á","ã":"á±","ã":"á²","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á","ã":"á¡","ã":"ä¸","ã":"äº","ã":"ä¸","ã":"å","ã":"ä¸","ã":"ä¸­","ã":"ä¸","ã":"ç²","ã":"ä¹","ã":"ä¸","ã":"ä¸","ã":"å¤©","ã":"å°","ã":"äºº","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(á)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá¡)","ã":"(áá®)","ã":"(áá©áá¥á«)","ã":"(áá©áá®)","ã ":"(ä¸)","ã¡":"(äº)","ã¢":"(ä¸)","ã£":"(å)","ã¤":"(äº)","ã¥":"(å­)","ã¦":"(ä¸)","ã§":"(å«)","ã¨":"(ä¹)","ã©":"(å)","ãª":"(æ)","ã«":"(ç«)","ã¬":"(æ°´)","ã­":"(æ¨)","ã®":"(é)","ã¯":"(å)","ã°":"(æ¥)","ã±":"(æ ª)","ã²":"(æ)","ã³":"(ç¤¾)","ã´":"(å)","ãµ":"(ç¹)","ã¶":"(è²¡)","ã·":"(ç¥)","ã¸":"(å´)","ã¹":"(ä»£)","ãº":"(å¼)","ã»":"(å­¦)","ã¼":"(ç£)","ã½":"(ä¼)","ã¾":"(è³)","ã¿":"(å)","ã":"(ç¥­)","ã":"(ä¼)","ã":"(èª)","ã":"(è³)","ã":"å","ã":"å¹¼","ã":"æ","ã":"ç®","ã":"PTE","ã":"21","ã":"22","ã":"23","ã":"24","ã":"25","ã":"26","ã":"27","ã":"28","ã":"29","ã":"30","ã":"31","ã":"32","ã":"33","ã":"34","ã":"35","ã ":"á","ã¡":"á","ã¢":"á","ã£":"á","ã¤":"á","ã¥":"á","ã¦":"á","ã§":"á","ã¨":"á","ã©":"á","ãª":"á","ã«":"á","ã¬":"á","ã­":"á","ã®":"áá¡","ã¯":"áá¡","ã°":"áá¡","ã±":"áá¡","ã²":"áá¡","ã³":"áá¡","ã´":"áá¡","ãµ":"áá¡","ã¶":"áá¡","ã·":"áá¡","ã¸":"áá¡","ã¹":"áá¡","ãº":"áá¡","ã»":"áá¡","ã¼":"áá¡á·áá©","ã½":"áá®áá´","ã¾":"áá®","ã":"ä¸","ã":"äº","ã":"ä¸","ã":"å","ã":"äº","ã":"å­","ã":"ä¸","ã":"å«","ã":"ä¹","ã":"å","ã":"æ","ã":"ç«","ã":"æ°´","ã":"æ¨","ã":"é","ã":"å","ã":"æ¥","ã":"æ ª","ã":"æ","ã":"ç¤¾","ã":"å","ã":"ç¹","ã":"è²¡","ã":"ç¥","ã":"å´","ã":"ç§","ã":"ç·","ã":"å¥³","ã":"é©","ã":"åª","ã":"å°","ã":"æ³¨","ã ":"é ","ã¡":"ä¼","ã¢":"å","ã£":"æ­£","ã¤":"ä¸","ã¥":"ä¸­","ã¦":"ä¸","ã§":"å·¦","ã¨":"å³","ã©":"å»","ãª":"å®","ã«":"å­¦","ã¬":"ç£","ã­":"ä¼","ã®":"è³","ã¯":"å","ã°":"å¤","ã±":"36","ã²":"37","ã³":"38","ã´":"39","ãµ":"40","ã¶":"41","ã·":"42","ã¸":"43","ã¹":"44","ãº":"45","ã»":"46","ã¼":"47","ã½":"48","ã¾":"49","ã¿":"50","ã":"1æ","ã":"2æ","ã":"3æ","ã":"4æ","ã":"5æ","ã":"6æ","ã":"7æ","ã":"8æ","ã":"9æ","ã":"10æ","ã":"11æ","ã":"12æ","ã":"Hg","ã":"erg","ã":"eV","ã":"LTD","ã":"ã¢","ã":"ã¤","ã":"ã¦","ã":"ã¨","ã":"ãª","ã":"ã«","ã":"ã­","ã":"ã¯","ã":"ã±","ã":"ã³","ã":"ãµ","ã":"ã·","ã":"ã¹","ã":"ã»","ã":"ã½","ã":"ã¿","ã ":"ã","ã¡":"ã","ã¢":"ã","ã£":"ã","ã¤":"ã","ã¥":"ã","ã¦":"ã","ã§":"ã","ã¨":"ã","ã©":"ã","ãª":"ã","ã«":"ã","ã¬":"ã","ã­":"ã","ã®":"ã","ã¯":"ã","ã°":"ã ","ã±":"ã¡","ã²":"ã¢","ã³":"ã¤","ã´":"ã¦","ãµ":"ã¨","ã¶":"ã©","ã·":"ãª","ã¸":"ã«","ã¹":"ã¬","ãº":"ã­","ã»":"ã¯","ã¼":"ã°","ã½":"ã±","ã¾":"ã²","ã":"ã¢ããã¼ã","ã":"ã¢ã«ãã¡","ã":"ã¢ã³ããã¢","ã":"ã¢ã¼ã«","ã":"ã¤ãã³ã¯ã","ã":"ã¤ã³ã","ã":"ã¦ã©ã³","ã":"ã¨ã¹ã¯ã¼ãã","ã":"ã¨ã¼ã«ã¼","ã":"ãªã³ã¹","ã":"ãªã¼ã ","ã":"ã«ã¤ãª","ã":"ã«ã©ãã","ã":"ã«ã­ãªã¼","ã":"ã«ãã­ã³","ã":"ã«ãã³ã","ã":"ã­ãã«ã","ã":"ã­ããã¼","ã":"ã­ã¥ãªã¼","ã":"ã­ãã«ã¿ãã¼","ã":"ã­ã­","ã":"ã­ã­ã¯ãã©ã ","ã":"ã­ã­ã¡ã¼ãã«","ã":"ã­ã­ã¯ãã","ã":"ã¯ãã©ã ","ã":"ã¯ãã©ã ãã³","ã":"ã¯ã«ã»ãã¤ã­","ã":"ã¯ã­ã¼ã","ã":"ã±ã¼ã¹","ã":"ã³ã«ã","ã":"ã³ã¼ãã","ã":"ãµã¤ã¯ã«","ã ":"ãµã³ãã¼ã ","ã¡":"ã·ãªã³ã¯ã","ã¢":"ã»ã³ã","ã£":"ã»ã³ã","ã¤":"ã¿ãã¼ã¹","ã¥":"ããã·","ã¦":"ããã«","ã§":"ãã³","ã¨":"ãã","ã©":"ããã","ãª":"ãã¤ã","ã«":"ããã¼ã»ã³ã","ã¬":"ããã¼ã","ã­":"ããã¼ã¬ã«","ã®":"ããã¢ã¹ãã«","ã¯":"ããã¯ã«","ã°":"ããã³","ã±":"ããã«","ã²":"ãã¡ã©ããã","ã³":"ãã£ã¼ã","ã´":"ãããã·ã§ã«","ãµ":"ãã©ã³","ã¶":"ãã¯ã¿ã¼ã«","ã·":"ããã½","ã¸":"ãããã","ã¹":"ãã«ã","ãº":"ããã³ã¹","ã»":"ããã¼ã·ã","ã¼":"ããã¼ã¿","ã½":"ããã¤ã³ã","ã¾":"ããã«ã","ã¿":"ãã³","ã":"ããã³ãã","ã":"ãã¼ã«","ã":"ãã¼ã³","ã":"ãã¤ã¯ã­","ã":"ãã¤ã«","ã":"ããã","ã":"ãã«ã¯","ã":"ãã³ã·ã§ã³","ã":"ãã¯ã­ã³","ã":"ããª","ã":"ããªããã¼ã«","ã":"ã¡ã«ã","ã":"ã¡ã«ããã³","ã":"ã¡ã¼ãã«","ã":"ã¤ã¼ãã","ã":"ã¤ã¼ã«","ã":"ã¦ã¢ã³","ã":"ãªããã«","ã":"ãªã©","ã":"ã«ããã¼","ã":"ã«ã¼ããã«","ã":"ã¬ã ","ã":"ã¬ã³ãã±ãã³","ã":"ã¯ãã","ã":"0ç¹","ã":"1ç¹","ã":"2ç¹","ã":"3ç¹","ã":"4ç¹","ã":"5ç¹","ã":"6ç¹","ã":"7ç¹","ã ":"8ç¹","ã¡":"9ç¹","ã¢":"10ç¹","ã£":"11ç¹","ã¤":"12ç¹","ã¥":"13ç¹","ã¦":"14ç¹","ã§":"15ç¹","ã¨":"16ç¹","ã©":"17ç¹","ãª":"18ç¹","ã«":"19ç¹","ã¬":"20ç¹","ã­":"21ç¹","ã®":"22ç¹","ã¯":"23ç¹","ã°":"24ç¹","ã±":"hPa","ã²":"da","ã³":"AU","ã´":"bar","ãµ":"oV","ã¶":"pc","ã·":"dm","ã¸":"dm2","ã¹":"dm3","ãº":"IU","ã»":"å¹³æ","ã¼":"æ­å","ã½":"å¤§æ­£","ã¾":"ææ²»","ã¿":"æ ªå¼ä¼ç¤¾","ã":"pA","ã":"nA","ã":"Î¼A","ã":"mA","ã":"kA","ã":"KB","ã":"MB","ã":"GB","ã":"cal","ã":"kcal","ã":"pF","ã":"nF","ã":"Î¼F","ã":"Î¼g","ã":"mg","ã":"kg","ã":"Hz","ã":"kHz","ã":"MHz","ã":"GHz","ã":"THz","ã":"Î¼l","ã":"ml","ã":"dl","ã":"kl","ã":"fm","ã":"nm","ã":"Î¼m","ã":"mm","ã":"cm","ã":"km","ã":"mm2","ã ":"cm2","ã¡":"m2","ã¢":"km2","ã£":"mm3","ã¤":"cm3","ã¥":"m3","ã¦":"km3","ã§":"mâs","ã¨":"mâs2","ã©":"Pa","ãª":"kPa","ã«":"MPa","ã¬":"GPa","ã­":"rad","ã®":"radâs","ã¯":"radâs2","ã°":"ps","ã±":"ns","ã²":"Î¼s","ã³":"ms","ã´":"pV","ãµ":"nV","ã¶":"Î¼V","ã·":"mV","ã¸":"kV","ã¹":"MV","ãº":"pW","ã»":"nW","ã¼":"Î¼W","ã½":"mW","ã¾":"kW","ã¿":"MW","ã":"kÎ©","ã":"MÎ©","ã":"a.m.","ã":"Bq","ã":"cc","ã":"cd","ã":"Câkg","ã":"Co.","ã":"dB","ã":"Gy","ã":"ha","ã":"HP","ã":"in","ã":"KK","ã":"KM","ã":"kt","ã":"lm","ã":"ln","ã":"log","ã":"lx","ã":"mb","ã":"mil","ã":"mol","ã":"PH","ã":"p.m.","ã":"PPM","ã":"PR","ã":"sr","ã":"Sv","ã":"Wb","ã":"Vâm","ã":"Aâm","ã ":"1æ¥","ã¡":"2æ¥","ã¢":"3æ¥","ã£":"4æ¥","ã¤":"5æ¥","ã¥":"6æ¥","ã¦":"7æ¥","ã§":"8æ¥","ã¨":"9æ¥","ã©":"10æ¥","ãª":"11æ¥","ã«":"12æ¥","ã¬":"13æ¥","ã­":"14æ¥","ã®":"15æ¥","ã¯":"16æ¥","ã°":"17æ¥","ã±":"18æ¥","ã²":"19æ¥","ã³":"20æ¥","ã´":"21æ¥","ãµ":"22æ¥","ã¶":"23æ¥","ã·":"24æ¥","ã¸":"25æ¥","ã¹":"26æ¥","ãº":"27æ¥","ã»":"28æ¥","ã¼":"29æ¥","ã½":"30æ¥","ã¾":"31æ¥","ã¿":"gal","ê°":"ê¯","ê¸":"Ä¦","ê¹":"Å","ï¬":"ff","ï¬":"fi","ï¬":"fl","ï¬":"ffi","ï¬":"ffl","ï¬":"st","ï¬":"st","ï¬":"Õ´Õ¶","ï¬":"Õ´Õ¥","ï¬":"Õ´Õ«","ï¬":"Õ¾Õ¶","ï¬":"Õ´Õ­","ï¬ ":"×¢","ï¬¡":"×","ï¬¢":"×","ï¬£":"×","ï¬¤":"×","ï¬¥":"×","ï¬¦":"×","ï¬§":"×¨","ï¬¨":"×ª","ï¬©":"+","ï­":"××","ï­":"Ù±","ï­":"Ù±","ï­":"Ù»","ï­":"Ù»","ï­":"Ù»","ï­":"Ù»","ï­":"Ù¾","ï­":"Ù¾","ï­":"Ù¾","ï­":"Ù¾","ï­":"Ú","ï­":"Ú","ï­":"Ú","ï­":"Ú","ï­":"Ùº","ï­":"Ùº","ï­ ":"Ùº","ï­¡":"Ùº","ï­¢":"Ù¿","ï­£":"Ù¿","ï­¤":"Ù¿","ï­¥":"Ù¿","ï­¦":"Ù¹","ï­§":"Ù¹","ï­¨":"Ù¹","ï­©":"Ù¹","ï­ª":"Ú¤","ï­«":"Ú¤","ï­¬":"Ú¤","ï­­":"Ú¤","ï­®":"Ú¦","ï­¯":"Ú¦","ï­°":"Ú¦","ï­±":"Ú¦","ï­²":"Ú","ï­³":"Ú","ï­´":"Ú","ï­µ":"Ú","ï­¶":"Ú","ï­·":"Ú","ï­¸":"Ú","ï­¹":"Ú","ï­º":"Ú","ï­»":"Ú","ï­¼":"Ú","ï­½":"Ú","ï­¾":"Ú","ï­¿":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú","ï®":"Ú©","ï®":"Ú©","ï®":"Ú©","ï®":"Ú©","ï®":"Ú¯","ï®":"Ú¯","ï®":"Ú¯","ï®":"Ú¯","ï®":"Ú³","ï®":"Ú³","ï®":"Ú³","ï®":"Ú³","ï®":"Ú±","ï®":"Ú±","ï®":"Ú±","ï®":"Ú±","ï®":"Úº","ï®":"Úº","ï® ":"Ú»","ï®¡":"Ú»","ï®¢":"Ú»","ï®£":"Ú»","ï®¤":"ÛÙ","ï®¥":"ÛÙ","ï®¦":"Û","ï®§":"Û","ï®¨":"Û","ï®©":"Û","ï®ª":"Ú¾","ï®«":"Ú¾","ï®¬":"Ú¾","ï®­":"Ú¾","ï®®":"Û","ï®¯":"Û","ï®°":"ÛÙ","ï®±":"ÛÙ","ï¯":"Ú­","ï¯":"Ú­","ï¯":"Ú­","ï¯":"Ú­","ï¯":"Û","ï¯":"Û","ï¯":"Û","ï¯":"Û","ï¯":"Û","ï¯":"Û","ï¯":"ÛÙ´","ï¯":"Û","ï¯":"Û","ï¯ ":"Û","ï¯¡":"Û","ï¯¢":"Û","ï¯£":"Û","ï¯¤":"Û","ï¯¥":"Û","ï¯¦":"Û","ï¯§":"Û","ï¯¨":"Ù","ï¯©":"Ù","ï¯ª":"ÙÙØ§","ï¯«":"ÙÙØ§","ï¯¬":"ÙÙÛ","ï¯­":"ÙÙÛ","ï¯®":"ÙÙÙ","ï¯¯":"ÙÙÙ","ï¯°":"ÙÙÛ","ï¯±":"ÙÙÛ","ï¯²":"ÙÙÛ","ï¯³":"ÙÙÛ","ï¯´":"ÙÙÛ","ï¯µ":"ÙÙÛ","ï¯¶":"ÙÙÛ","ï¯·":"ÙÙÛ","ï¯¸":"ÙÙÛ","ï¯¹":"ÙÙÙ","ï¯º":"ÙÙÙ","ï¯»":"ÙÙÙ","ï¯¼":"Û","ï¯½":"Û","ï¯¾":"Û","ï¯¿":"Û","ï°":"ÙÙØ¬","ï°":"ÙÙØ­","ï°":"ÙÙÙ","ï°":"ÙÙÙ","ï°":"ÙÙÙ","ï°":"Ø¨Ø¬","ï°":"Ø¨Ø­","ï°":"Ø¨Ø®","ï°":"Ø¨Ù","ï°":"Ø¨Ù","ï°":"Ø¨Ù","ï°":"ØªØ¬","ï°":"ØªØ­","ï°":"ØªØ®","ï°":"ØªÙ","ï°":"ØªÙ","ï°":"ØªÙ","ï°":"Ø«Ø¬","ï°":"Ø«Ù","ï°":"Ø«Ù","ï°":"Ø«Ù","ï°":"Ø¬Ø­","ï°":"Ø¬Ù","ï°":"Ø­Ø¬","ï°":"Ø­Ù","ï°":"Ø®Ø¬","ï°":"Ø®Ø­","ï°":"Ø®Ù","ï°":"Ø³Ø¬","ï°":"Ø³Ø­","ï°":"Ø³Ø®","ï°":"Ø³Ù","ï° ":"ØµØ­","ï°¡":"ØµÙ","ï°¢":"Ø¶Ø¬","ï°£":"Ø¶Ø­","ï°¤":"Ø¶Ø®","ï°¥":"Ø¶Ù","ï°¦":"Ø·Ø­","ï°§":"Ø·Ù","ï°¨":"Ø¸Ù","ï°©":"Ø¹Ø¬","ï°ª":"Ø¹Ù","ï°«":"ØºØ¬","ï°¬":"ØºÙ","ï°­":"ÙØ¬","ï°®":"ÙØ­","ï°¯":"ÙØ®","ï°°":"ÙÙ","ï°±":"ÙÙ","ï°²":"ÙÙ","ï°³":"ÙØ­","ï°´":"ÙÙ","ï°µ":"ÙÙ","ï°¶":"ÙÙ","ï°·":"ÙØ§","ï°¸":"ÙØ¬","ï°¹":"ÙØ­","ï°º":"ÙØ®","ï°»":"ÙÙ","ï°¼":"ÙÙ","ï°½":"ÙÙ","ï°¾":"ÙÙ","ï°¿":"ÙØ¬","ï±":"ÙØ­","ï±":"ÙØ®","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙØ¬","ï±":"ÙØ­","ï±":"ÙØ®","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙØ¬","ï±":"ÙØ­","ï±":"ÙØ®","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙØ¬","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙØ¬","ï±":"ÙØ­","ï±":"ÙØ®","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"ÙÙ","ï±":"Ø°Ù°","ï±":"Ø±Ù°","ï±":"ÙÙ°","ï±":" ÙÙ","ï±":" ÙÙ","ï± ":" ÙÙ","ï±¡":" ÙÙ","ï±¢":" ÙÙ","ï±£":" ÙÙ°","ï±¤":"ÙÙØ±","ï±¥":"ÙÙØ²","ï±¦":"ÙÙÙ","ï±§":"ÙÙÙ","ï±¨":"ÙÙÙ","ï±©":"ÙÙÙ","ï±ª":"Ø¨Ø±","ï±«":"Ø¨Ø²","ï±¬":"Ø¨Ù","ï±­":"Ø¨Ù","ï±®":"Ø¨Ù","ï±¯":"Ø¨Ù","ï±°":"ØªØ±","ï±±":"ØªØ²","ï±²":"ØªÙ","ï±³":"ØªÙ","ï±´":"ØªÙ","ï±µ":"ØªÙ","ï±¶":"Ø«Ø±","ï±·":"Ø«Ø²","ï±¸":"Ø«Ù","ï±¹":"Ø«Ù","ï±º":"Ø«Ù","ï±»":"Ø«Ù","ï±¼":"ÙÙ","ï±½":"ÙÙ","ï±¾":"ÙÙ","ï±¿":"ÙÙ","ï²":"ÙØ§","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙØ§","ï²":"ÙÙ","ï²":"ÙØ±","ï²":"ÙØ²","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ°","ï²":"ÙØ±","ï²":"ÙØ²","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙ","ï²":"ÙÙØ¬","ï²":"ÙÙØ­","ï²":"ÙÙØ®","ï²":"ÙÙÙ","ï²":"ÙÙÙ","ï²":"Ø¨Ø¬","ï²":"Ø¨Ø­","ï²":"Ø¨Ø®","ï²":"Ø¨Ù","ï² ":"Ø¨Ù","ï²¡":"ØªØ¬","ï²¢":"ØªØ­","ï²£":"ØªØ®","ï²¤":"ØªÙ","ï²¥":"ØªÙ","ï²¦":"Ø«Ù","ï²§":"Ø¬Ø­","ï²¨":"Ø¬Ù","ï²©":"Ø­Ø¬","ï²ª":"Ø­Ù","ï²«":"Ø®Ø¬","ï²¬":"Ø®Ù","ï²­":"Ø³Ø¬","ï²®":"Ø³Ø­","ï²¯":"Ø³Ø®","ï²°":"Ø³Ù","ï²±":"ØµØ­","ï²²":"ØµØ®","ï²³":"ØµÙ","ï²´":"Ø¶Ø¬","ï²µ":"Ø¶Ø­","ï²¶":"Ø¶Ø®","ï²·":"Ø¶Ù","ï²¸":"Ø·Ø­","ï²¹":"Ø¸Ù","ï²º":"Ø¹Ø¬","ï²»":"Ø¹Ù","ï²¼":"ØºØ¬","ï²½":"ØºÙ","ï²¾":"ÙØ¬","ï²¿":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙØ­","ï³":"ÙÙ","ï³":"ÙØ¬","ï³":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙÙ","ï³":"ÙØ¬","ï³":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙÙ","ï³":"ÙØ¬","ï³":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙØ¬","ï³":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙÙ","ï³":"ÙØ¬","ï³":"ÙÙ","ï³":"ÙÙ°","ï³":"ÙØ¬","ï³":"ÙØ­","ï³":"ÙØ®","ï³":"ÙÙ","ï³":"ÙÙ","ï³":"ÙÙÙ","ï³ ":"ÙÙÙ","ï³¡":"Ø¨Ù","ï³¢":"Ø¨Ù","ï³£":"ØªÙ","ï³¤":"ØªÙ","ï³¥":"Ø«Ù","ï³¦":"Ø«Ù","ï³§":"Ø³Ù","ï³¨":"Ø³Ù","ï³©":"Ø´Ù","ï³ª":"Ø´Ù","ï³«":"ÙÙ","ï³¬":"ÙÙ","ï³­":"ÙÙ","ï³®":"ÙÙ","ï³¯":"ÙÙ","ï³°":"ÙÙ","ï³±":"ÙÙ","ï³²":"ÙÙÙ","ï³³":"ÙÙÙ","ï³´":"ÙÙÙ","ï³µ":"Ø·Ù","ï³¶":"Ø·Ù","ï³·":"Ø¹Ù","ï³¸":"Ø¹Ù","ï³¹":"ØºÙ","ï³º":"ØºÙ","ï³»":"Ø³Ù","ï³¼":"Ø³Ù","ï³½":"Ø´Ù","ï³¾":"Ø´Ù","ï³¿":"Ø­Ù","ï´":"Ø­Ù","ï´":"Ø¬Ù","ï´":"Ø¬Ù","ï´":"Ø®Ù","ï´":"Ø®Ù","ï´":"ØµÙ","ï´":"ØµÙ","ï´":"Ø¶Ù","ï´":"Ø¶Ù","ï´":"Ø´Ø¬","ï´":"Ø´Ø­","ï´":"Ø´Ø®","ï´":"Ø´Ù","ï´":"Ø´Ø±","ï´":"Ø³Ø±","ï´":"ØµØ±","ï´":"Ø¶Ø±","ï´":"Ø·Ù","ï´":"Ø·Ù","ï´":"Ø¹Ù","ï´":"Ø¹Ù","ï´":"ØºÙ","ï´":"ØºÙ","ï´":"Ø³Ù","ï´":"Ø³Ù","ï´":"Ø´Ù","ï´":"Ø´Ù","ï´":"Ø­Ù","ï´":"Ø­Ù","ï´":"Ø¬Ù","ï´":"Ø¬Ù","ï´":"Ø®Ù","ï´ ":"Ø®Ù","ï´¡":"ØµÙ","ï´¢":"ØµÙ","ï´£":"Ø¶Ù","ï´¤":"Ø¶Ù","ï´¥":"Ø´Ø¬","ï´¦":"Ø´Ø­","ï´§":"Ø´Ø®","ï´¨":"Ø´Ù","ï´©":"Ø´Ø±","ï´ª":"Ø³Ø±","ï´«":"ØµØ±","ï´¬":"Ø¶Ø±","ï´­":"Ø´Ø¬","ï´®":"Ø´Ø­","ï´¯":"Ø´Ø®","ï´°":"Ø´Ù","ï´±":"Ø³Ù","ï´²":"Ø´Ù","ï´³":"Ø·Ù","ï´´":"Ø³Ø¬","ï´µ":"Ø³Ø­","ï´¶":"Ø³Ø®","ï´·":"Ø´Ø¬","ï´¸":"Ø´Ø­","ï´¹":"Ø´Ø®","ï´º":"Ø·Ù","ï´»":"Ø¸Ù","ï´¼":"Ø§Ù","ï´½":"Ø§Ù","ïµ":"ØªØ¬Ù","ïµ":"ØªØ­Ø¬","ïµ":"ØªØ­Ø¬","ïµ":"ØªØ­Ù","ïµ":"ØªØ®Ù","ïµ":"ØªÙØ¬","ïµ":"ØªÙØ­","ïµ":"ØªÙØ®","ïµ":"Ø¬ÙØ­","ïµ":"Ø¬ÙØ­","ïµ":"Ø­ÙÙ","ïµ":"Ø­ÙÙ","ïµ":"Ø³Ø­Ø¬","ïµ":"Ø³Ø¬Ø­","ïµ":"Ø³Ø¬Ù","ïµ":"Ø³ÙØ­","ïµ ":"Ø³ÙØ­","ïµ¡":"Ø³ÙØ¬","ïµ¢":"Ø³ÙÙ","ïµ£":"Ø³ÙÙ","ïµ¤":"ØµØ­Ø­","ïµ¥":"ØµØ­Ø­","ïµ¦":"ØµÙÙ","ïµ§":"Ø´Ø­Ù","ïµ¨":"Ø´Ø­Ù","ïµ©":"Ø´Ø¬Ù","ïµª":"Ø´ÙØ®","ïµ«":"Ø´ÙØ®","ïµ¬":"Ø´ÙÙ","ïµ­":"Ø´ÙÙ","ïµ®":"Ø¶Ø­Ù","ïµ¯":"Ø¶Ø®Ù","ïµ°":"Ø¶Ø®Ù","ïµ±":"Ø·ÙØ­","ïµ²":"Ø·ÙØ­","ïµ³":"Ø·ÙÙ","ïµ´":"Ø·ÙÙ","ïµµ":"Ø¹Ø¬Ù","ïµ¶":"Ø¹ÙÙ","ïµ·":"Ø¹ÙÙ","ïµ¸":"Ø¹ÙÙ","ïµ¹":"ØºÙÙ","ïµº":"ØºÙÙ","ïµ»":"ØºÙÙ","ïµ¼":"ÙØ®Ù","ïµ½":"ÙØ®Ù","ïµ¾":"ÙÙØ­","ïµ¿":"ÙÙÙ","ï¶":"ÙØ­Ù","ï¶":"ÙØ­Ù","ï¶":"ÙØ­Ù","ï¶":"ÙØ¬Ø¬","ï¶":"ÙØ¬Ø¬","ï¶":"ÙØ®Ù","ï¶":"ÙØ®Ù","ï¶":"ÙÙØ­","ï¶":"ÙÙØ­","ï¶":"ÙØ­Ø¬","ï¶":"ÙØ­Ù","ï¶":"ÙØ­Ù","ï¶":"ÙØ¬Ø­","ï¶":"ÙØ¬Ù","ï¶":"ÙØ®Ø¬","ï¶":"ÙØ®Ù","ï¶":"ÙØ¬Ø®","ï¶":"ÙÙØ¬","ï¶":"ÙÙÙ","ï¶":"ÙØ­Ù","ï¶":"ÙØ­Ù","ï¶":"ÙØ¬Ù","ï¶":"ÙØ¬Ù","ï¶":"ÙØ¬Ù","ï¶":"ÙÙÙ","ï¶":"ÙÙÙ","ï¶":"ÙÙÙ","ï¶":"ÙÙÙ","ï¶":"Ø¨Ø®Ù","ï¶":"ØªØ¬Ù","ï¶ ":"ØªØ¬Ù","ï¶¡":"ØªØ®Ù","ï¶¢":"ØªØ®Ù","ï¶£":"ØªÙÙ","ï¶¤":"ØªÙÙ","ï¶¥":"Ø¬ÙÙ","ï¶¦":"Ø¬Ø­Ù","ï¶§":"Ø¬ÙÙ","ï¶¨":"Ø³Ø®Ù","ï¶©":"ØµØ­Ù","ï¶ª":"Ø´Ø­Ù","ï¶«":"Ø¶Ø­Ù","ï¶¬":"ÙØ¬Ù","ï¶­":"ÙÙÙ","ï¶®":"ÙØ­Ù","ï¶¯":"ÙØ¬Ù","ï¶°":"ÙÙÙ","ï¶±":"ÙÙÙ","ï¶²":"ÙÙÙ","ï¶³":"ÙØ­Ù","ï¶´":"ÙÙØ­","ï¶µ":"ÙØ­Ù","ï¶¶":"Ø¹ÙÙ","ï¶·":"ÙÙÙ","ï¶¸":"ÙØ¬Ø­","ï¶¹":"ÙØ®Ù","ï¶º":"ÙØ¬Ù","ï¶»":"ÙÙÙ","ï¶¼":"ÙØ¬Ù","ï¶½":"ÙØ¬Ø­","ï¶¾":"Ø¬Ø­Ù","ï¶¿":"Ø­Ø¬Ù","ï·":"ÙØ¬Ù","ï·":"ÙÙÙ","ï·":"Ø¨Ø­Ù","ï·":"ÙÙÙ","ï·":"Ø¹Ø¬Ù","ï·":"ØµÙÙ","ï·":"Ø³Ø®Ù","ï·":"ÙØ¬Ù","ï·°":"ØµÙÛ","ï·±":"ÙÙÛ","ï·²":"Ø§ÙÙÙ","ï·³":"Ø§ÙØ¨Ø±","ï·´":"ÙØ­ÙØ¯","ï·µ":"ØµÙØ¹Ù","ï·¶":"Ø±Ø³ÙÙ","ï··":"Ø¹ÙÙÙ","ï·¸":"ÙØ³ÙÙ","ï·¹":"ØµÙÙ","ï·º":"ØµÙÙ Ø§ÙÙÙ Ø¹ÙÙÙ ÙØ³ÙÙ","ï·»":"Ø¬Ù Ø¬ÙØ§ÙÙ","ï·¼":"Ø±ÛØ§Ù","ï¸":",","ï¸":"ã","ï¸":"ã","ï¸":":","ï¸":";","ï¸":"!","ï¸":"?","ï¸":"ã","ï¸":"ã","ï¸":"...","ï¸°":"..","ï¸±":"â","ï¸²":"â","ï¸³":"_","ï¸´":"_","ï¸µ":"(","ï¸¶":")","ï¸·":"{","ï¸¸":"}","ï¸¹":"ã","ï¸º":"ã","ï¸»":"ã","ï¸¼":"ã","ï¸½":"ã","ï¸¾":"ã","ï¸¿":"ã","ï¹":"ã","ï¹":"ã","ï¹":"ã","ï¹":"ã","ï¹":"ã","ï¹":"[","ï¹":"]","ï¹":" Ì","ï¹":" Ì","ï¹":" Ì","ï¹":" Ì","ï¹":"_","ï¹":"_","ï¹":"_","ï¹":",","ï¹":"ã","ï¹":".","ï¹":";","ï¹":":","ï¹":"?","ï¹":"!","ï¹":"â","ï¹":"(","ï¹":")","ï¹":"{","ï¹":"}","ï¹":"ã","ï¹":"ã","ï¹":"#","ï¹ ":"&","ï¹¡":"*","ï¹¢":"+","ï¹£":"-","ï¹¤":"<","ï¹¥":">","ï¹¦":"=","ï¹¨":"\\","ï¹©":"$","ï¹ª":"%","ï¹«":"@","ï¹°":" Ù","ï¹±":"ÙÙ","ï¹²":" Ù","ï¹´":" Ù","ï¹¶":" Ù","ï¹·":"ÙÙ","ï¹¸":" Ù","ï¹¹":"ÙÙ","ï¹º":" Ù","ï¹»":"ÙÙ","ï¹¼":" Ù","ï¹½":"ÙÙ","ï¹¾":" Ù","ï¹¿":"ÙÙ","ïº":"Ø¡","ïº":"Ø§Ù","ïº":"Ø§Ù","ïº":"Ø§Ù","ïº":"Ø§Ù","ïº":"ÙÙ","ïº":"ÙÙ","ïº":"Ø§Ù","ïº":"Ø§Ù","ïº":"ÙÙ","ïº":"ÙÙ","ïº":"ÙÙ","ïº":"ÙÙ","ïº":"Ø§","ïº":"Ø§","ïº":"Ø¨","ïº":"Ø¨","ïº":"Ø¨","ïº":"Ø¨","ïº":"Ø©","ïº":"Ø©","ïº":"Øª","ïº":"Øª","ïº":"Øª","ïº":"Øª","ïº":"Ø«","ïº":"Ø«","ïº":"Ø«","ïº":"Ø«","ïº":"Ø¬","ïº":"Ø¬","ïº":"Ø¬","ïº ":"Ø¬","ïº¡":"Ø­","ïº¢":"Ø­","ïº£":"Ø­","ïº¤":"Ø­","ïº¥":"Ø®","ïº¦":"Ø®","ïº§":"Ø®","ïº¨":"Ø®","ïº©":"Ø¯","ïºª":"Ø¯","ïº«":"Ø°","ïº¬":"Ø°","ïº­":"Ø±","ïº®":"Ø±","ïº¯":"Ø²","ïº°":"Ø²","ïº±":"Ø³","ïº²":"Ø³","ïº³":"Ø³","ïº´":"Ø³","ïºµ":"Ø´","ïº¶":"Ø´","ïº·":"Ø´","ïº¸":"Ø´","ïº¹":"Øµ","ïºº":"Øµ","ïº»":"Øµ","ïº¼":"Øµ","ïº½":"Ø¶","ïº¾":"Ø¶","ïº¿":"Ø¶","ï»":"Ø¶","ï»":"Ø·","ï»":"Ø·","ï»":"Ø·","ï»":"Ø·","ï»":"Ø¸","ï»":"Ø¸","ï»":"Ø¸","ï»":"Ø¸","ï»":"Ø¹","ï»":"Ø¹","ï»":"Ø¹","ï»":"Ø¹","ï»":"Øº","ï»":"Øº","ï»":"Øº","ï»":"Øº","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï»":"Ù","ï» ":"Ù","ï»¡":"Ù","ï»¢":"Ù","ï»£":"Ù","ï»¤":"Ù","ï»¥":"Ù","ï»¦":"Ù","ï»§":"Ù","ï»¨":"Ù","ï»©":"Ù","ï»ª":"Ù","ï»«":"Ù","ï»¬":"Ù","ï»­":"Ù","ï»®":"Ù","ï»¯":"Ù","ï»°":"Ù","ï»±":"Ù","ï»²":"Ù","ï»³":"Ù","ï»´":"Ù","ï»µ":"ÙØ§Ù","ï»¶":"ÙØ§Ù","ï»·":"ÙØ§Ù","ï»¸":"ÙØ§Ù","ï»¹":"ÙØ§Ù","ï»º":"ÙØ§Ù","ï»»":"ÙØ§","ï»¼":"ÙØ§","ï¼":"!","ï¼":"\"","ï¼":"#","ï¼":"$","ï¼":"%","ï¼":"&","ï¼":"'","ï¼":"(","ï¼":")","ï¼":"*","ï¼":"+","ï¼":",","ï¼":"-","ï¼":".","ï¼":"/","ï¼":"0","ï¼":"1","ï¼":"2","ï¼":"3","ï¼":"4","ï¼":"5","ï¼":"6","ï¼":"7","ï¼":"8","ï¼":"9","ï¼":":","ï¼":";","ï¼":"<","ï¼":"=","ï¼":">","ï¼":"?","ï¼ ":"@","ï¼¡":"A","ï¼¢":"B","ï¼£":"C","ï¼¤":"D","ï¼¥":"E","ï¼¦":"F","ï¼§":"G","ï¼¨":"H","ï¼©":"I","ï¼ª":"J","ï¼«":"K","ï¼¬":"L","ï¼­":"M","ï¼®":"N","ï¼¯":"O","ï¼°":"P","ï¼±":"Q","ï¼²":"R","ï¼³":"S","ï¼´":"T","ï¼µ":"U","ï¼¶":"V","ï¼·":"W","ï¼¸":"X","ï¼¹":"Y","ï¼º":"Z","ï¼»":"[","ï¼¼":"\\","ï¼½":"]","ï¼¾":"^","ï¼¿":"_","ï½":"`","ï½":"a","ï½":"b","ï½":"c","ï½":"d","ï½":"e","ï½":"f","ï½":"g","ï½":"h","ï½":"i","ï½":"j","ï½":"k","ï½":"l","ï½":"m","ï½":"n","ï½":"o","ï½":"p","ï½":"q","ï½":"r","ï½":"s","ï½":"t","ï½":"u","ï½":"v","ï½":"w","ï½":"x","ï½":"y","ï½":"z","ï½":"{","ï½":"|","ï½":"}","ï½":"~","ï½":"â¦","ï½ ":"â¦","ï½¡":"ã","ï½¢":"ã","ï½£":"ã","ï½¤":"ã","ï½¥":"ã»","ï½¦":"ã²","ï½§":"ã¡","ï½¨":"ã£","ï½©":"ã¥","ï½ª":"ã§","ï½«":"ã©","ï½¬":"ã£","ï½­":"ã¥","ï½®":"ã§","ï½¯":"ã","ï½°":"ã¼","ï½±":"ã¢","ï½²":"ã¤","ï½³":"ã¦","ï½´":"ã¨","ï½µ":"ãª","ï½¶":"ã«","ï½·":"ã­","ï½¸":"ã¯","ï½¹":"ã±","ï½º":"ã³","ï½»":"ãµ","ï½¼":"ã·","ï½½":"ã¹","ï½¾":"ã»","ï½¿":"ã½","ï¾":"ã¿","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã","ï¾":"ã ","ï¾":"ã¡","ï¾":"ã¢","ï¾":"ã¤","ï¾":"ã¦","ï¾":"ã¨","ï¾":"ã©","ï¾":"ãª","ï¾":"ã«","ï¾":"ã¬","ï¾":"ã­","ï¾":"ã¯","ï¾":"ã³","ï¾":"ã","ï¾":"ã","ï¾ ":"á ","ï¾¡":"á","ï¾¢":"á","ï¾£":"áª","ï¾¤":"á","ï¾¥":"á¬","ï¾¦":"á­","ï¾§":"á","ï¾¨":"á","ï¾©":"á","ï¾ª":"á°","ï¾«":"á±","ï¾¬":"á²","ï¾­":"á³","ï¾®":"á´","ï¾¯":"áµ","ï¾°":"á","ï¾±":"á","ï¾²":"á","ï¾³":"á","ï¾´":"á¡","ï¾µ":"á","ï¾¶":"á","ï¾·":"á","ï¾¸":"á","ï¾¹":"á","ï¾º":"á","ï¾»":"á","ï¾¼":"á","ï¾½":"á","ï¾¾":"á","ï¿":"á¡","ï¿":"á¢","ï¿":"á£","ï¿":"á¤","ï¿":"á¥","ï¿":"á¦","ï¿":"á§","ï¿":"á¨","ï¿":"á©","ï¿":"áª","ï¿":"á«","ï¿":"á¬","ï¿":"á­","ï¿":"á®","ï¿":"á¯","ï¿":"á°","ï¿":"á±","ï¿":"á²","ï¿":"á³","ï¿":"á´","ï¿":"áµ","ï¿ ":"Â¢","ï¿¡":"Â£","ï¿¢":"Â¬","ï¿£":" Ì","ï¿¤":"Â¦","ï¿¥":"Â¥","ï¿¦":"â©","ï¿¨":"â","ï¿©":"â","ï¿ª":"â","ï¿«":"â","ï¿¬":"â","ï¿­":"â ","ï¿®":"â","ð":"A","ð":"B","ð":"C","ð":"D","ð":"E","ð":"F","ð":"G","ð":"H","ð":"I","ð":"J","ð":"K","ð":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð ":"g","ð¡":"h","ð¢":"i","ð£":"j","ð¤":"k","ð¥":"l","ð¦":"m","ð§":"n","ð¨":"o","ð©":"p","ðª":"q","ð«":"r","ð¬":"s","ð­":"t","ð®":"u","ð¯":"v","ð°":"w","ð±":"x","ð²":"y","ð³":"z","ð´":"A","ðµ":"B","ð¶":"C","ð·":"D","ð¸":"E","ð¹":"F","ðº":"G","ð»":"H","ð¼":"I","ð½":"J","ð¾":"K","ð¿":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"o","ð":"p","ð":"q","ð":"r","ð ":"s","ð¡":"t","ð¢":"u","ð£":"v","ð¤":"w","ð¥":"x","ð¦":"y","ð§":"z","ð¨":"A","ð©":"B","ðª":"C","ð«":"D","ð¬":"E","ð­":"F","ð®":"G","ð¯":"H","ð°":"I","ð±":"J","ð²":"K","ð³":"L","ð´":"M","ðµ":"N","ð¶":"O","ð·":"P","ð¸":"Q","ð¹":"R","ðº":"S","ð»":"T","ð¼":"U","ð½":"V","ð¾":"W","ð¿":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"o","ð":"p","ð":"q","ð":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð":"A","ð":"C","ð":"D","ð¢":"G","ð¥":"J","ð¦":"K","ð©":"N","ðª":"O","ð«":"P","ð¬":"Q","ð®":"S","ð¯":"T","ð°":"U","ð±":"V","ð²":"W","ð³":"X","ð´":"Y","ðµ":"Z","ð¶":"a","ð·":"b","ð¸":"c","ð¹":"d","ð»":"f","ð½":"h","ð¾":"i","ð¿":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"p","ð":"q","ð":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð":"A","ð":"B","ð":"C","ð":"D","ð":"E","ð":"F","ð":"G","ð":"H","ð":"I","ð":"J","ð":"K","ð":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð ":"Q","ð¡":"R","ð¢":"S","ð£":"T","ð¤":"U","ð¥":"V","ð¦":"W","ð§":"X","ð¨":"Y","ð©":"Z","ðª":"a","ð«":"b","ð¬":"c","ð­":"d","ð®":"e","ð¯":"f","ð°":"g","ð±":"h","ð²":"i","ð³":"j","ð´":"k","ðµ":"l","ð¶":"m","ð·":"n","ð¸":"o","ð¹":"p","ðº":"q","ð»":"r","ð¼":"s","ð½":"t","ð¾":"u","ð¿":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð":"A","ð":"B","ð":"D","ð":"E","ð":"F","ð":"G","ð":"J","ð":"K","ð":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð":"Q","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"a","ð":"b","ð ":"c","ð¡":"d","ð¢":"e","ð£":"f","ð¤":"g","ð¥":"h","ð¦":"i","ð§":"j","ð¨":"k","ð©":"l","ðª":"m","ð«":"n","ð¬":"o","ð­":"p","ð®":"q","ð¯":"r","ð°":"s","ð±":"t","ð²":"u","ð³":"v","ð´":"w","ðµ":"x","ð¶":"y","ð·":"z","ð¸":"A","ð¹":"B","ð»":"D","ð¼":"E","ð½":"F","ð¾":"G","ð":"I","ð":"J","ð":"K","ð":"L","ð":"M","ð":"O","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð ":"o","ð¡":"p","ð¢":"q","ð£":"r","ð¤":"s","ð¥":"t","ð¦":"u","ð§":"v","ð¨":"w","ð©":"x","ðª":"y","ð«":"z","ð¬":"A","ð­":"B","ð®":"C","ð¯":"D","ð°":"E","ð±":"F","ð²":"G","ð³":"H","ð´":"I","ðµ":"J","ð¶":"K","ð·":"L","ð¸":"M","ð¹":"N","ðº":"O","ð»":"P","ð¼":"Q","ð½":"R","ð¾":"S","ð¿":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"o","ð":"p","ð":"q","ð":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð ":"A","ð¡":"B","ð¢":"C","ð£":"D","ð¤":"E","ð¥":"F","ð¦":"G","ð§":"H","ð¨":"I","ð©":"J","ðª":"K","ð«":"L","ð¬":"M","ð­":"N","ð®":"O","ð¯":"P","ð°":"Q","ð±":"R","ð²":"S","ð³":"T","ð´":"U","ðµ":"V","ð¶":"W","ð·":"X","ð¸":"Y","ð¹":"Z","ðº":"a","ð»":"b","ð¼":"c","ð½":"d","ð¾":"e","ð¿":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"o","ð":"p","ð":"q","ð":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð":"A","ð":"B","ð":"C","ð":"D","ð":"E","ð":"F","ð":"G","ð":"H","ð":"I","ð":"J","ð":"K","ð":"L","ð ":"M","ð¡":"N","ð¢":"O","ð£":"P","ð¤":"Q","ð¥":"R","ð¦":"S","ð§":"T","ð¨":"U","ð©":"V","ðª":"W","ð«":"X","ð¬":"Y","ð­":"Z","ð®":"a","ð¯":"b","ð°":"c","ð±":"d","ð²":"e","ð³":"f","ð´":"g","ðµ":"h","ð¶":"i","ð·":"j","ð¸":"k","ð¹":"l","ðº":"m","ð»":"n","ð¼":"o","ð½":"p","ð¾":"q","ð¿":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð":"w","ð":"x","ð":"y","ð":"z","ð":"A","ð":"B","ð":"C","ð":"D","ð":"E","ð":"F","ð":"G","ð":"H","ð":"I","ð":"J","ð":"K","ð":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð ":"Y","ð¡":"Z","ð¢":"a","ð£":"b","ð¤":"c","ð¥":"d","ð¦":"e","ð§":"f","ð¨":"g","ð©":"h","ðª":"i","ð«":"j","ð¬":"k","ð­":"l","ð®":"m","ð¯":"n","ð°":"o","ð±":"p","ð²":"q","ð³":"r","ð´":"s","ðµ":"t","ð¶":"u","ð·":"v","ð¸":"w","ð¹":"x","ðº":"y","ð»":"z","ð¼":"A","ð½":"B","ð¾":"C","ð¿":"D","ð":"E","ð":"F","ð":"G","ð":"H","ð":"I","ð":"J","ð":"K","ð":"L","ð":"M","ð":"N","ð":"O","ð":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð ":"k","ð¡":"l","ð¢":"m","ð£":"n","ð¤":"o","ð¥":"p","ð¦":"q","ð§":"r","ð¨":"s","ð©":"t","ðª":"u","ð«":"v","ð¬":"w","ð­":"x","ð®":"y","ð¯":"z","ð°":"A","ð±":"B","ð²":"C","ð³":"D","ð´":"E","ðµ":"F","ð¶":"G","ð·":"H","ð¸":"I","ð¹":"J","ðº":"K","ð»":"L","ð¼":"M","ð½":"N","ð¾":"O","ð¿":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"a","ð":"b","ð":"c","ð":"d","ð":"e","ð":"f","ð":"g","ð":"h","ð":"i","ð":"j","ð":"k","ð":"l","ð":"m","ð":"n","ð":"o","ð":"p","ð":"q","ð":"r","ð":"s","ð":"t","ð":"u","ð":"v","ð ":"w","ð¡":"x","ð¢":"y","ð£":"z","ð¤":"Ä±","ð¥":"È·","ð¨":"Î","ð©":"Î","ðª":"Î","ð«":"Î","ð¬":"Î","ð­":"Î","ð®":"Î","ð¯":"Î","ð°":"Î","ð±":"Î","ð²":"Î","ð³":"Î","ð´":"Î","ðµ":"Î","ð¶":"Î","ð·":"Î ","ð¸":"Î¡","ð¹":"Î","ðº":"Î£","ð»":"Î¤","ð¼":"Î¥","ð½":"Î¦","ð¾":"Î§","ð¿":"Î¨","ð":"Î©","ð":"â","ð":"Î±","ð":"Î²","ð":"Î³","ð":"Î´","ð":"Îµ","ð":"Î¶","ð":"Î·","ð":"Î¸","ð":"Î¹","ð":"Îº","ð":"Î»","ð":"Î¼","ð":"Î½","ð":"Î¾","ð":"Î¿","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"â","ð":"Îµ","ð":"Î¸","ð":"Îº","ð":"Ï","ð ":"Ï","ð¡":"Ï","ð¢":"Î","ð£":"Î","ð¤":"Î","ð¥":"Î","ð¦":"Î","ð§":"Î","ð¨":"Î","ð©":"Î","ðª":"Î","ð«":"Î","ð¬":"Î","ð­":"Î","ð®":"Î","ð¯":"Î","ð°":"Î","ð±":"Î ","ð²":"Î¡","ð³":"Î","ð´":"Î£","ðµ":"Î¤","ð¶":"Î¥","ð·":"Î¦","ð¸":"Î§","ð¹":"Î¨","ðº":"Î©","ð»":"â","ð¼":"Î±","ð½":"Î²","ð¾":"Î³","ð¿":"Î´","ð":"Îµ","ð":"Î¶","ð":"Î·","ð":"Î¸","ð":"Î¹","ð":"Îº","ð":"Î»","ð":"Î¼","ð":"Î½","ð":"Î¾","ð":"Î¿","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"â","ð":"Îµ","ð":"Î¸","ð":"Îº","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð ":"Î","ð¡":"Î","ð¢":"Î","ð£":"Î","ð¤":"Î","ð¥":"Î","ð¦":"Î","ð§":"Î","ð¨":"Î","ð©":"Î","ðª":"Î","ð«":"Î ","ð¬":"Î¡","ð­":"Î","ð®":"Î£","ð¯":"Î¤","ð°":"Î¥","ð±":"Î¦","ð²":"Î§","ð³":"Î¨","ð´":"Î©","ðµ":"â","ð¶":"Î±","ð·":"Î²","ð¸":"Î³","ð¹":"Î´","ðº":"Îµ","ð»":"Î¶","ð¼":"Î·","ð½":"Î¸","ð¾":"Î¹","ð¿":"Îº","ð":"Î»","ð":"Î¼","ð":"Î½","ð":"Î¾","ð":"Î¿","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"â","ð":"Îµ","ð":"Î¸","ð":"Îº","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð ":"Î","ð¡":"Î","ð¢":"Î","ð£":"Î","ð¤":"Î","ð¥":"Î ","ð¦":"Î¡","ð§":"Î","ð¨":"Î£","ð©":"Î¤","ðª":"Î¥","ð«":"Î¦","ð¬":"Î§","ð­":"Î¨","ð®":"Î©","ð¯":"â","ð°":"Î±","ð±":"Î²","ð²":"Î³","ð³":"Î´","ð´":"Îµ","ðµ":"Î¶","ð¶":"Î·","ð·":"Î¸","ð¸":"Î¹","ð¹":"Îº","ðº":"Î»","ð»":"Î¼","ð¼":"Î½","ð½":"Î¾","ð¾":"Î¿","ð¿":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"â","ð":"Îµ","ð":"Î¸","ð":"Îº","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î","ð":"Î ","ð ":"Î¡","ð¡":"Î","ð¢":"Î£","ð£":"Î¤","ð¤":"Î¥","ð¥":"Î¦","ð¦":"Î§","ð§":"Î¨","ð¨":"Î©","ð©":"â","ðª":"Î±","ð«":"Î²","ð¬":"Î³","ð­":"Î´","ð®":"Îµ","ð¯":"Î¶","ð°":"Î·","ð±":"Î¸","ð²":"Î¹","ð³":"Îº","ð´":"Î»","ðµ":"Î¼","ð¶":"Î½","ð·":"Î¾","ð¸":"Î¿","ð¹":"Ï","ðº":"Ï","ð»":"Ï","ð¼":"Ï","ð½":"Ï","ð¾":"Ï","ð¿":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"â","ð":"Îµ","ð":"Î¸","ð":"Îº","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"Ï","ð":"0","ð":"1","ð":"2","ð":"3","ð":"4","ð":"5","ð":"6","ð":"7","ð":"8","ð":"9","ð":"0","ð":"1","ð":"2","ð":"3","ð":"4","ð":"5","ð":"6","ð":"7","ð ":"8","ð¡":"9","ð¢":"0","ð£":"1","ð¤":"2","ð¥":"3","ð¦":"4","ð§":"5","ð¨":"6","ð©":"7","ðª":"8","ð«":"9","ð¬":"0","ð­":"1","ð®":"2","ð¯":"3","ð°":"4","ð±":"5","ð²":"6","ð³":"7","ð´":"8","ðµ":"9","ð¶":"0","ð·":"1","ð¸":"2","ð¹":"3","ðº":"4","ð»":"5","ð¼":"6","ð½":"7","ð¾":"8","ð¿":"9","ð¸":"Ø§","ð¸":"Ø¨","ð¸":"Ø¬","ð¸":"Ø¯","ð¸":"Ù","ð¸":"Ø²","ð¸":"Ø­","ð¸":"Ø·","ð¸":"Ù","ð¸":"Ù","ð¸":"Ù","ð¸":"Ù","ð¸":"Ù","ð¸":"Ø³","ð¸":"Ø¹","ð¸":"Ù","ð¸":"Øµ","ð¸":"Ù","ð¸":"Ø±","ð¸":"Ø´","ð¸":"Øª","ð¸":"Ø«","ð¸":"Ø®","ð¸":"Ø°","ð¸":"Ø¶","ð¸":"Ø¸","ð¸":"Øº","ð¸":"Ù®","ð¸":"Úº","ð¸":"Ú¡","ð¸":"Ù¯","ð¸¡":"Ø¨","ð¸¢":"Ø¬","ð¸¤":"Ù","ð¸§":"Ø­","ð¸©":"Ù","ð¸ª":"Ù","ð¸«":"Ù","ð¸¬":"Ù","ð¸­":"Ù","ð¸®":"Ø³","ð¸¯":"Ø¹","ð¸°":"Ù","ð¸±":"Øµ","ð¸²":"Ù","ð¸´":"Ø´","ð¸µ":"Øª","ð¸¶":"Ø«","ð¸·":"Ø®","ð¸¹":"Ø¶","ð¸»":"Øº","ð¹":"Ø¬","ð¹":"Ø­","ð¹":"Ù","ð¹":"Ù","ð¹":"Ù","ð¹":"Ø³","ð¹":"Ø¹","ð¹":"Øµ","ð¹":"Ù","ð¹":"Ø´","ð¹":"Ø®","ð¹":"Ø¶","ð¹":"Øº","ð¹":"Úº","ð¹":"Ù¯","ð¹¡":"Ø¨","ð¹¢":"Ø¬","ð¹¤":"Ù","ð¹§":"Ø­","ð¹¨":"Ø·","ð¹©":"Ù","ð¹ª":"Ù","ð¹¬":"Ù","ð¹­":"Ù","ð¹®":"Ø³","ð¹¯":"Ø¹","ð¹°":"Ù","ð¹±":"Øµ","ð¹²":"Ù","ð¹´":"Ø´","ð¹µ":"Øª","ð¹¶":"Ø«","ð¹·":"Ø®","ð¹¹":"Ø¶","ð¹º":"Ø¸","ð¹»":"Øº","ð¹¼":"Ù®","ð¹¾":"Ú¡","ðº":"Ø§","ðº":"Ø¨","ðº":"Ø¬","ðº":"Ø¯","ðº":"Ù","ðº":"Ù","ðº":"Ø²","ðº":"Ø­","ðº":"Ø·","ðº":"Ù","ðº":"Ù","ðº":"Ù","ðº":"Ù","ðº":"Ø³","ðº":"Ø¹","ðº":"Ù","ðº":"Øµ","ðº":"Ù","ðº":"Ø±","ðº":"Ø´","ðº":"Øª","ðº":"Ø«","ðº":"Ø®","ðº":"Ø°","ðº":"Ø¶","ðº":"Ø¸","ðº":"Øº","ðº¡":"Ø¨","ðº¢":"Ø¬","ðº£":"Ø¯","ðº¥":"Ù","ðº¦":"Ø²","ðº§":"Ø­","ðº¨":"Ø·","ðº©":"Ù","ðº«":"Ù","ðº¬":"Ù","ðº­":"Ù","ðº®":"Ø³","ðº¯":"Ø¹","ðº°":"Ù","ðº±":"Øµ","ðº²":"Ù","ðº³":"Ø±","ðº´":"Ø´","ðºµ":"Øª","ðº¶":"Ø«","ðº·":"Ø®","ðº¸":"Ø°","ðº¹":"Ø¶","ðºº":"Ø¸","ðº»":"Øº","ð":"0.","ð":"0,","ð":"1,","ð":"2,","ð":"3,","ð":"4,","ð":"5,","ð":"6,","ð":"7,","ð":"8,","ð":"9,","ð":"(A)","ð":"(B)","ð":"(C)","ð":"(D)","ð":"(E)","ð":"(F)","ð":"(G)","ð":"(H)","ð":"(I)","ð":"(J)","ð":"(K)","ð":"(L)","ð":"(M)","ð":"(N)","ð":"(O)","ð":"(P)","ð ":"(Q)","ð¡":"(R)","ð¢":"(S)","ð£":"(T)","ð¤":"(U)","ð¥":"(V)","ð¦":"(W)","ð§":"(X)","ð¨":"(Y)","ð©":"(Z)","ðª":"ãSã","ð«":"C","ð¬":"R","ð­":"CD","ð®":"WZ","ð°":"A","ð±":"B","ð²":"C","ð³":"D","ð´":"E","ðµ":"F","ð¶":"G","ð·":"H","ð¸":"I","ð¹":"J","ðº":"K","ð»":"L","ð¼":"M","ð½":"N","ð¾":"O","ð¿":"P","ð":"Q","ð":"R","ð":"S","ð":"T","ð":"U","ð":"V","ð":"W","ð":"X","ð":"Y","ð":"Z","ð":"HV","ð":"MV","ð":"SD","ð":"SS","ð":"PPV","ð":"WC","ðª":"MC","ð«":"MD","ð":"DJ","ð":"ã»ã","ð":"ã³ã³","ð":"ãµ","ð":"æ","ð":"å­","ð":"å","ð":"ãã","ð":"äº","ð":"å¤","ð":"è§£","ð":"å¤©","ð":"äº¤","ð":"æ ","ð":"ç¡","ð":"æ","ð":"å","ð":"å¾","ð":"å","ð":"æ°","ð ":"å","ð¡":"çµ","ð¢":"ç","ð£":"è²©","ð¤":"å£°","ð¥":"å¹","ð¦":"æ¼","ð§":"æ","ð¨":"æ","ð©":"ä¸","ðª":"ä¸","ð«":"é","ð¬":"å·¦","ð­":"ä¸­","ð®":"å³","ð¯":"æ","ð°":"èµ°","ð±":"æ","ð²":"ç¦","ð³":"ç©º","ð´":"å","ðµ":"æº","ð¶":"æ","ð·":"æ","ð¸":"ç³","ð¹":"å²","ðº":"å¶","ð":"ãæ¬ã","ð":"ãä¸ã","ð":"ãäºã","ð":"ãå®ã","ð":"ãç¹ã","ð":"ãæã","ð":"ãçã","ð":"ãåã","ð":"ãæã","ð":"å¾","ð":"å¯"};
/*
 * all.js - include file for normalization data for a particular script
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */
// !depends util/utils.js 
// !depends nfd/all.js
// !data norm nfkd/all
ilib.data.norm.nfkd = ilib.merge(ilib.data.norm.nfkd || {}, ilib.data.nfkd_all);
ilib.data.nfkd_all = undefined;
/*
 * all.js - include file for normalization data for a particular script
 * 
 * Copyright Â© 2012, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* WARNING: THIS IS A FILE GENERATED BY gennorm.js. DO NOT EDIT BY HAND. */
// !depends util/utils.js 
// !depends nfd/all.js nfc/all.js nfkd/all.js
// !data norm

ilib.data.likelylocales = {"aa":"aa-Latn-ET","ab":"ab-Cyrl-GE","ady":"ady-Cyrl-RU","af":"af-Latn-ZA","agq":"agq-Latn-CM","ak":"ak-Latn-GH","am":"am-Ethi-ET","ar":"ar-Arab-EG","as":"as-Beng-IN","asa":"asa-Latn-TZ","ast":"ast-Latn-ES","av":"av-Cyrl-RU","ay":"ay-Latn-BO","az":"az-Latn-AZ","az-Arab":"az-Arab-IR","az-IR":"az-Arab-IR","ba":"ba-Cyrl-RU","bas":"bas-Latn-CM","be":"be-Cyrl-BY","bem":"bem-Latn-ZM","bez":"bez-Latn-TZ","bg":"bg-Cyrl-BG","bi":"bi-Latn-VU","bm":"bm-Latn-ML","bn":"bn-Beng-BD","bo":"bo-Tibt-CN","br":"br-Latn-FR","brx":"brx-Deva-IN","bs":"bs-Latn-BA","byn":"byn-Ethi-ER","ca":"ca-Latn-ES","cch":"cch-Latn-NG","ce":"ce-Cyrl-RU","ceb":"ceb-Latn-PH","cgg":"cgg-Latn-UG","ch":"ch-Latn-GU","chk":"chk-Latn-FM","chr":"chr-Cher-US","ckb":"ckb-Arab-IQ","cs":"cs-Latn-CZ","csb":"csb-Latn-PL","cy":"cy-Latn-GB","da":"da-Latn-DK","dav":"dav-Latn-KE","de":"de-Latn-DE","dje":"dje-Latn-NE","dua":"dua-Latn-CM","dv":"dv-Thaa-MV","dyo":"dyo-Latn-SN","dz":"dz-Tibt-BT","ebu":"ebu-Latn-KE","ee":"ee-Latn-GH","efi":"efi-Latn-NG","el":"el-Grek-GR","en":"en-Latn-US","eo":"eo-Latn-001","es":"es-Latn-ES","et":"et-Latn-EE","eu":"eu-Latn-ES","ewo":"ewo-Latn-CM","fa":"fa-Arab-IR","ff":"ff-Latn-SN","fi":"fi-Latn-FI","fil":"fil-Latn-PH","fj":"fj-Latn-FJ","fo":"fo-Latn-FO","fr":"fr-Latn-FR","fur":"fur-Latn-IT","fy":"fy-Latn-NL","ga":"ga-Latn-IE","gaa":"gaa-Latn-GH","gag":"gag-Latn-MD","gd":"gd-Latn-GB","gil":"gil-Latn-KI","gl":"gl-Latn-ES","gn":"gn-Latn-PY","gsw":"gsw-Latn-CH","gu":"gu-Gujr-IN","guz":"guz-Latn-KE","gv":"gv-Latn-GB","gv-Latn":"gv-Latn-IM","ha":"ha-Latn-NG","haw":"haw-Latn-US","he":"he-Hebr-IL","hi":"hi-Deva-IN","hil":"hil-Latn-PH","ho":"ho-Latn-PG","hr":"hr-Latn-HR","ht":"ht-Latn-HT","hu":"hu-Latn-HU","hy":"hy-Armn-AM","ia":"ia-Latn-001","id":"id-Latn-ID","ig":"ig-Latn-NG","ii":"ii-Yiii-CN","ilo":"ilo-Latn-PH","inh":"inh-Cyrl-RU","is":"is-Latn-IS","it":"it-Latn-IT","ja":"ja-Jpan-JP","jgo":"jgo-Latn-CM","jmc":"jmc-Latn-TZ","jv":"jv-Latn-ID","ka":"ka-Geor-GE","kab":"kab-Latn-DZ","kaj":"kaj-Latn-NG","kam":"kam-Latn-KE","kbd":"kbd-Cyrl-RU","kcg":"kcg-Latn-NG","kde":"kde-Latn-TZ","kea":"kea-Latn-CV","kg":"kg-Latn-CD","kha":"kha-Latn-IN","khq":"khq-Latn-ML","ki":"ki-Latn-KE","kj":"kj-Latn-NA","kk":"kk-Cyrl-KZ","kkj":"kkj-Latn-CM","kl":"kl-Latn-GL","kln":"kln-Latn-KE","km":"km-Khmr-KH","kn":"kn-Knda-IN","ko":"ko-Kore-KR","koi":"koi-Cyrl-RU","kok":"kok-Deva-IN","kos":"kos-Latn-FM","kpe":"kpe-Latn-LR","kpv":"kpv-Cyrl-RU","krc":"krc-Cyrl-RU","ks":"ks-Arab-IN","ksb":"ksb-Latn-TZ","ksf":"ksf-Latn-CM","ksh":"ksh-Latn-DE","ku":"ku-Latn-TR","ku-Arab":"ku-Arab-IQ","ku-IQ":"ku-Arab-IQ","kum":"kum-Cyrl-RU","kv":"kv-Cyrl-RU","kw":"kw-Latn-GB","ky":"ky-Cyrl-KG","la":"la-Latn-VA","lag":"lag-Latn-TZ","lah":"lah-Arab-PK","lb":"lb-Latn-LU","lbe":"lbe-Cyrl-RU","lez":"lez-Cyrl-RU","lg":"lg-Latn-UG","ln":"ln-Latn-CD","lo":"lo-Laoo-LA","lt":"lt-Latn-LT","lu":"lu-Latn-CD","lua":"lua-Latn-CD","luo":"luo-Latn-KE","luy":"luy-Latn-KE","lv":"lv-Latn-LV","mai":"mai-Deva-IN","mas":"mas-Latn-KE","mdf":"mdf-Cyrl-RU","mdh":"mdh-Latn-PH","mer":"mer-Latn-KE","mfe":"mfe-Latn-MU","mg":"mg-Latn-MG","mgh":"mgh-Latn-MZ","mgo":"mgo-Latn-CM","mh":"mh-Latn-MH","mi":"mi-Latn-NZ","mk":"mk-Cyrl-MK","ml":"ml-Mlym-IN","mn":"mn-Cyrl-MN","mn-CN":"mn-Mong-CN","mn-Mong":"mn-Mong-CN","mr":"mr-Deva-IN","ms":"ms-Latn-MY","mt":"mt-Latn-MT","mua":"mua-Latn-CM","my":"my-Mymr-MM","myv":"myv-Cyrl-RU","na":"na-Latn-NR","naq":"naq-Latn-NA","nb":"nb-Latn-NO","nd":"nd-Latn-ZW","nds":"nds-Latn-DE","ne":"ne-Deva-NP","niu":"niu-Latn-NU","nl":"nl-Latn-NL","nmg":"nmg-Latn-CM","nn":"nn-Latn-NO","nnh":"nnh-Latn-CM","nr":"nr-Latn-ZA","nso":"nso-Latn-ZA","nus":"nus-Latn-SD","ny":"ny-Latn-MW","nyn":"nyn-Latn-UG","oc":"oc-Latn-FR","om":"om-Latn-ET","or":"or-Orya-IN","os":"os-Cyrl-GE","pa":"pa-Guru-IN","pa-Arab":"pa-Arab-PK","pa-PK":"pa-Arab-PK","pag":"pag-Latn-PH","pap":"pap-Latn-AN","pau":"pau-Latn-PW","pl":"pl-Latn-PL","pon":"pon-Latn-FM","ps":"ps-Arab-AF","pt":"pt-Latn-BR","qu":"qu-Latn-PE","rm":"rm-Latn-CH","rn":"rn-Latn-BI","ro":"ro-Latn-RO","rof":"rof-Latn-TZ","ru":"ru-Cyrl-RU","rw":"rw-Latn-RW","rwk":"rwk-Latn-TZ","sa":"sa-Deva-IN","sah":"sah-Cyrl-RU","saq":"saq-Latn-KE","sat":"sat-Latn-IN","sbp":"sbp-Latn-TZ","sd":"sd-Arab-IN","se":"se-Latn-NO","seh":"seh-Latn-MZ","ses":"ses-Latn-ML","sg":"sg-Latn-CF","shi":"shi-Tfng-MA","shi-MA":"shi-Latn-MA","si":"si-Sinh-LK","sid":"sid-Latn-ET","sk":"sk-Latn-SK","sl":"sl-Latn-SI","sm":"sm-Latn-WS","sn":"sn-Latn-ZW","so":"so-Latn-SO","sq":"sq-Latn-AL","sr":"sr-Cyrl-RS","sr-ME":"sr-Latn-ME","ss":"ss-Latn-ZA","ssy":"ssy-Latn-ER","st":"st-Latn-ZA","su":"su-Latn-ID","sv":"sv-Latn-SE","sw":"sw-Latn-TZ","swc":"swc-Latn-CD","ta":"ta-Taml-IN","te":"te-Telu-IN","teo":"teo-Latn-UG","tet":"tet-Latn-TL","tg":"tg-Cyrl-TJ","th":"th-Thai-TH","ti":"ti-Ethi-ET","tig":"tig-Ethi-ER","tk":"tk-Latn-TM","tkl":"tkl-Latn-TK","tl":"tl-Latn-PH","tn":"tn-Latn-ZA","to":"to-Latn-TO","tpi":"tpi-Latn-PG","tr":"tr-Latn-TR","trv":"trv-Latn-TW","ts":"ts-Latn-ZA","tsg":"tsg-Latn-PH","tt":"tt-Cyrl-RU","tvl":"tvl-Latn-TV","twq":"twq-Latn-NE","ty":"ty-Latn-PF","tyv":"tyv-Cyrl-RU","tzm":"tzm-Latn-MA","udm":"udm-Cyrl-RU","ug":"ug-Arab-CN","uk":"uk-Cyrl-UA","uli":"uli-Latn-FM","und":"en-Latn-US","AD":"ca-Latn-AD","AE":"ar-Arab-AE","AF":"fa-Arab-AF","AL":"sq-Latn-AL","AM":"hy-Armn-AM","AN":"pap-Latn-AN","AO":"pt-Latn-AO","AR":"es-Latn-AR","Arab":"ar-Arab-EG","Arab-CN":"ug-Arab-CN","Arab-IN":"ur-Arab-IN","Arab-NG":"ha-Arab-NG","Arab-PK":"ur-Arab-PK","Armi":"arc-Armi-IR","Armn":"hy-Armn-AM","AS":"sm-Latn-AS","AT":"de-Latn-AT","Avst":"ae-Avst-IR","AW":"nl-Latn-AW","AX":"sv-Latn-AX","AZ":"az-Latn-AZ","BA":"bs-Latn-BA","Bali":"ban-Bali-ID","Bamu":"bax-Bamu-CM","Batk":"bbc-Batk-ID","BD":"bn-Beng-BD","BE":"nl-Latn-BE","Beng":"bn-Beng-BD","BF":"fr-Latn-BF","BG":"bg-Cyrl-BG","BH":"ar-Arab-BH","BI":"rn-Latn-BI","BJ":"fr-Latn-BJ","BL":"fr-Latn-BL","BN":"ms-Latn-BN","BO":"es-Latn-BO","Bopo":"zh-Bopo-TW","BR":"pt-Latn-BR","Brah":"pra-Brah-IN","Brai":"und-Brai-FR","BT":"dz-Tibt-BT","Bugi":"bug-Bugi-ID","Buhd":"bku-Buhd-PH","BY":"be-Cyrl-BY","Cakm":"ccp-Cakm-BD","Cans":"cr-Cans-CA","Cari":"xcr-Cari-TR","CD":"sw-Latn-CD","CF":"fr-Latn-CF","CG":"fr-Latn-CG","CH":"de-Latn-CH","Cham":"cjm-Cham-VN","Cher":"chr-Cher-US","CI":"fr-Latn-CI","CL":"es-Latn-CL","CM":"fr-Latn-CM","CN":"zh-Hans-CN","CO":"es-Latn-CO","Copt":"cop-Copt-EG","CP":"fr-Latn-CP","Cprt":"grc-Cprt-CY","CR":"es-Latn-CR","CU":"es-Latn-CU","CV":"pt-Latn-CV","CY":"el-Grek-CY","Cyrl":"ru-Cyrl-RU","Cyrl-BA":"sr-Cyrl-BA","Cyrl-GE":"ab-Cyrl-GE","CZ":"cs-Latn-CZ","DE":"de-Latn-DE","Deva":"hi-Deva-IN","DJ":"aa-Latn-DJ","DK":"da-Latn-DK","DO":"es-Latn-DO","DZ":"ar-Arab-DZ","EA":"es-Latn-EA","EC":"es-Latn-EC","EE":"et-Latn-EE","EG":"ar-Arab-EG","Egyp":"egy-Egyp-EG","EH":"ar-Arab-EH","ER":"ti-Ethi-ER","ES":"es-Latn-ES","Ethi":"am-Ethi-ET","FI":"fi-Latn-FI","FM":"chk-Latn-FM","FO":"fo-Latn-FO","FR":"fr-Latn-FR","GA":"fr-Latn-GA","GE":"ka-Geor-GE","Geor":"ka-Geor-GE","GF":"fr-Latn-GF","GH":"ak-Latn-GH","GL":"kl-Latn-GL","Glag":"cu-Glag-BG","GN":"fr-Latn-GN","Goth":"got-Goth-UA","GP":"fr-Latn-GP","GQ":"es-Latn-GQ","GR":"el-Grek-GR","Grek":"el-Grek-GR","GT":"es-Latn-GT","Gujr":"gu-Gujr-IN","Guru":"pa-Guru-IN","GW":"pt-Latn-GW","Hang":"ko-Hang-KR","Hani":"zh-Hans-CN","Hano":"hnn-Hano-PH","Hans":"zh-Hans-CN","Hant":"zh-Hant-TW","Hebr":"he-Hebr-IL","Hira":"ja-Hira-JP","HK":"zh-Hant-HK","HN":"es-Latn-HN","HR":"hr-Latn-HR","HT":"ht-Latn-HT","HU":"hu-Latn-HU","IC":"es-Latn-IC","ID":"id-Latn-ID","IL":"he-Hebr-IL","IN":"hi-Deva-IN","IQ":"ar-Arab-IQ","IR":"fa-Arab-IR","IS":"is-Latn-IS","IT":"it-Latn-IT","Ital":"ett-Ital-IT","Java":"jv-Java-ID","JO":"ar-Arab-JO","JP":"ja-Jpan-JP","Jpan":"ja-Jpan-JP","Kali":"eky-Kali-MM","Kana":"ja-Kana-JP","KG":"ky-Cyrl-KG","KH":"km-Khmr-KH","Khar":"pra-Khar-PK","Khmr":"km-Khmr-KH","KM":"ar-Arab-KM","Knda":"kn-Knda-IN","Kore":"ko-Kore-KR","KP":"ko-Kore-KP","KR":"ko-Kore-KR","Kthi":"bh-Kthi-IN","KW":"ar-Arab-KW","KZ":"ru-Cyrl-KZ","LA":"lo-Laoo-LA","Lana":"nod-Lana-TH","Laoo":"lo-Laoo-LA","Latn-CN":"za-Latn-CN","Latn-CY":"tr-Latn-CY","Latn-DZ":"fr-Latn-DZ","Latn-ER":"aa-Latn-ER","Latn-KM":"fr-Latn-KM","Latn-MA":"fr-Latn-MA","Latn-MK":"sq-Latn-MK","Latn-MR":"fr-Latn-MR","Latn-SY":"fr-Latn-SY","Latn-TN":"fr-Latn-TN","LB":"ar-Arab-LB","Lepc":"lep-Lepc-IN","LI":"de-Latn-LI","Limb":"lif-Limb-IN","Linb":"grc-Linb-GR","Lisu":"lis-Lisu-CN","LK":"si-Sinh-LK","LS":"st-Latn-LS","LT":"lt-Latn-LT","LU":"fr-Latn-LU","LV":"lv-Latn-LV","LY":"ar-Arab-LY","Lyci":"xlc-Lyci-TR","Lydi":"xld-Lydi-TR","MA":"ar-Arab-MA","Mand":"myz-Mand-IR","MC":"fr-Latn-MC","MD":"ro-Latn-MD","ME":"sr-Latn-ME","Merc":"xmr-Merc-SD","Mero":"xmr-Mero-SD","MF":"fr-Latn-MF","MG":"mg-Latn-MG","MK":"mk-Cyrl-MK","ML":"bm-Latn-ML","Mlym":"ml-Mlym-IN","MM":"my-Mymr-MM","MN":"mn-Cyrl-MN","MO":"zh-Hant-MO","Mong":"mn-Mong-CN","MQ":"fr-Latn-MQ","MR":"ar-Arab-MR","MT":"mt-Latn-MT","Mtei":"mni-Mtei-IN","MU":"mfe-Latn-MU","MV":"dv-Thaa-MV","MX":"es-Latn-MX","MY":"ms-Latn-MY","Mymr":"my-Mymr-MM","MZ":"pt-Latn-MZ","NA":"kj-Latn-NA","NC":"fr-Latn-NC","NE":"ha-Latn-NE","NI":"es-Latn-NI","Nkoo":"man-Nkoo-GN","NL":"nl-Latn-NL","NO":"nb-Latn-NO","NP":"ne-Deva-NP","Ogam":"sga-Ogam-IE","Olck":"sat-Olck-IN","OM":"ar-Arab-OM","Orkh":"otk-Orkh-MN","Orya":"or-Orya-IN","Osma":"so-Osma-SO","PA":"es-Latn-PA","PE":"es-Latn-PE","PF":"fr-Latn-PF","PG":"tpi-Latn-PG","PH":"fil-Latn-PH","Phag":"lzh-Phag-CN","Phli":"pal-Phli-IR","Phnx":"phn-Phnx-LB","PK":"ur-Arab-PK","PL":"pl-Latn-PL","Plrd":"hmd-Plrd-CN","PM":"fr-Latn-PM","PR":"es-Latn-PR","Prti":"xpr-Prti-IR","PS":"ar-Arab-PS","PT":"pt-Latn-PT","PW":"pau-Latn-PW","PY":"gn-Latn-PY","QA":"ar-Arab-QA","RE":"fr-Latn-RE","Rjng":"rej-Rjng-ID","RO":"ro-Latn-RO","RS":"sr-Cyrl-RS","RU":"ru-Cyrl-RU","Runr":"non-Runr-SE","RW":"rw-Latn-RW","SA":"ar-Arab-SA","Samr":"smp-Samr-IL","Sarb":"xsa-Sarb-YE","Saur":"saz-Saur-IN","SC":"fr-Latn-SC","SD":"ar-Arab-SD","SE":"sv-Latn-SE","Shaw":"en-Shaw-GB","Shrd":"sa-Shrd-IN","SI":"sl-Latn-SI","Sinh":"si-Sinh-LK","SJ":"nb-Latn-SJ","SK":"sk-Latn-SK","SM":"it-Latn-SM","SN":"fr-Latn-SN","SO":"so-Latn-SO","Sora":"srb-Sora-IN","SR":"nl-Latn-SR","ST":"pt-Latn-ST","Sund":"su-Sund-ID","SV":"es-Latn-SV","SY":"ar-Arab-SY","Sylo":"syl-Sylo-BD","Syrc":"syr-Syrc-SY","Tagb":"tbw-Tagb-PH","Takr":"doi-Takr-IN","Tale":"tdd-Tale-CN","Talu":"khb-Talu-CN","Taml":"ta-Taml-IN","Tavt":"blt-Tavt-VN","TD":"fr-Latn-TD","Telu":"te-Telu-IN","Tfng":"shi-Tfng-TN","TG":"fr-Latn-TG","Tglg":"fil-Tglg-PH","TH":"th-Thai-TH","Thaa":"dv-Thaa-MV","Thai":"th-Thai-TH","Tibt":"bo-Tibt-CN","TJ":"tg-Cyrl-TJ","TK":"tkl-Latn-TK","TL":"pt-Latn-TL","TM":"tk-Latn-TM","TN":"ar-Arab-TN","TO":"to-Latn-TO","TR":"tr-Latn-TR","TV":"tvl-Latn-TV","TW":"zh-Hant-TW","TZ":"sw-Latn-TZ","UA":"uk-Cyrl-UA","UG":"sw-Latn-UG","Ugar":"uga-Ugar-SY","UY":"es-Latn-UY","UZ":"uz-Cyrl-UZ","VA":"la-Latn-VA","Vaii":"vai-Vaii-LR","VE":"es-Latn-VE","VN":"vi-Latn-VN","VU":"bi-Latn-VU","WF":"fr-Latn-WF","WS":"sm-Latn-WS","Xpeo":"peo-Xpeo-IR","Xsux":"akk-Xsux-IQ","YE":"ar-Arab-YE","Yiii":"ii-Yiii-CN","YT":"fr-Latn-YT","ur":"ur-Arab-PK","uz":"uz-Cyrl-UZ","uz-AF":"uz-Arab-AF","uz-Arab":"uz-Arab-AF","vai":"vai-Vaii-LR","ve":"ve-Latn-ZA","vi":"vi-Latn-VN","vo":"vo-Latn-001","vun":"vun-Latn-TZ","wae":"wae-Latn-CH","wal":"wal-Ethi-ET","war":"war-Latn-PH","wo":"wo-Latn-SN","xh":"xh-Latn-ZA","xog":"xog-Latn-UG","yap":"yap-Latn-FM","yav":"yav-Latn-CM","yi":"yi-Hebr-IL","yo":"yo-Latn-NG","za":"za-Latn-CN","zh":"zh-Hans-CN","zh-Hani":"zh-Hans-CN","zh-Hant":"zh-Hant-TW","zh-HK":"zh-Hant-HK","zh-MO":"zh-Hant-MO","zh-TW":"zh-Hant-TW","zu":"zu-Latn-ZA"};
/*
 * localematch.js - Locale matcher definition
 * 
 * Copyright Â© 2013-2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends ilibglobal.js locale.js
// !data likelylocales

/**
 * @class
 * Create a new locale matcher instance. This is used
 * to see which locales can be matched with each other in
 * various ways.<p>
 * 
 * The options object may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - the locale to match
 * 
 * <li><i>onLoad</i> - a callback function to call when the locale matcher object is fully 
 * loaded. When the onLoad option is given, the locale matcher object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Depends directive: !depends localematch.js
 * 
 * @constructor
 * @param {Object} options parameters to initialize this matcher 
 */
ilib.LocaleMatcher = function(options) {
	var sync = true,
	    loadParams = undefined;
	
	this.locale = new ilib.Locale();
	
	if (options) {
		if (typeof(options.locale) !== 'undefined') {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (typeof(options.loadParams) !== 'undefined') {
			loadParams = options.loadParams;
		}
	}

	if (!ilib.LocaleMatcher.cache) {
		ilib.LocaleMatcher.cache = {};
	}

	if (typeof(ilib.data.likelylocales) === 'undefined') {
		ilib.loadData({
			object: ilib.LocaleMatcher, 
			locale: "-", 
			name: "likelylocales.json", 
			sync: sync, 
			loadParams: loadParams, 
			callback: ilib.bind(this, function (info) {
				if (!info) {
					info = {};
					var spec = this.locale.getSpec().replace(/-/g, "_");
					ilib.LocaleMatcher.cache[spec] = info;
				}
				/** @type {Object.<string,string>} */
				this.info = info;
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(this);
				}
			})
		});
	} else {
		this.info = /** @type {Object.<string,string>} */ ilib.data.likelylocales;
	}
};


ilib.LocaleMatcher.prototype = {
	/**
	 * Return the locale used to construct this instance. 
	 * @return {ilib.Locale|undefined} the locale for this matcher
	 */
	getLocale: function() {
		return this.locale;
	},
	
	/**
	 * Return an ilib.Locale instance that is fully specified based on partial information
	 * given to the constructor of this locale matcher instance. For example, if the locale
	 * spec given to this locale matcher instance is simply "ru" (for the Russian language), 
	 * then it will fill in the missing region and script tags and return a locale with 
	 * the specifier "ru-Cyrl-RU". (ie. Russian language, Cyrillic, Russian Federation).
	 * Any one or two of the language, script, or region parts may be left unspecified,
	 * and the other one or two parts will be filled in automatically. If this
	 * class has no information about the given locale, then the locale of this
	 * locale matcher instance is returned unchanged.
	 * 
	 * @returns {ilib.Locale} the most likely completion of the partial locale given
	 * to the constructor of this locale matcher instance
	 */
	getLikelyLocale: function () {
		if (typeof(this.info[this.locale.getSpec()]) === 'undefined') {
			return this.locale;
		}
		
		return new ilib.Locale(this.info[this.locale.getSpec()]);
	}
};


/*
 * casemapper.js - define upper- and lower-case mapper
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// !depends locale.js util/utils.js

/**
 * @class
 * Create a new string mapper instance that maps strings to upper or
 * lower case. This mapping will work for any string as characters 
 * that have no case will be returned unchanged.<p>
 * 
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale to use when loading the mapper. Some maps are 
 * locale-dependent, and this locale selects the right one. Default if this is
 * not specified is the current locale.
 * 
 * <li><i>direction</i> - "toupper" for upper-casing, or "tolower" for lower-casing.
 * Default if not specified is "toupper".
 * </ul>
 * 
 * Depends directive: !depends casemapper.js
 * 
 * @constructor
 * @param {Object=} options options to initialize this mapper 
 */
ilib.CaseMapper = function (options) {
	this.up = true;
	this.locale = new ilib.Locale();
	
	if (options) {
		if (typeof(options.locale) !== 'undefined') {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		this.up = (!options.direction || options.direction === "toupper");
	}

	this.charMapper = function(string) {
		var input;
		if (!string) {
			return string;
		}
		if (typeof(string) === 'string') {
			input = new ilib.String(string);
		} else {
			input = string.toString();
		}
		var ret = "";
		var it = input.charIterator();
		var c;
		
		while (it.hasNext()) {
			c = it.next();
			if (this.mapData[c]) {
				ret += this.mapData[c];
			} else {
				ret += this.up ? c.toUpperCase() : c.toLowerCase();
			}
		}
		
		return ret;
	};
	
	switch (this.locale.getLanguage()) {
		case "az":
		case "tr":
		case "crh":
		case "kk":
		case "krc":
		case "tt":
			this.mapData = this.up ?  {
				"i": "Ä°",
				"Ä±": "I"
			} : {
				"Ä°": "i",
				"I": "Ä±"
			};
			this.mapper = this.charMapper;
			break;
		case "fr":
			if (this.up && this.locale.getRegion() !== "CA") {
				this.mapData = {
					'Ã ': 'A',
					'Ã¡': 'A',
					'Ã¢': 'A',
					'Ã£': 'A',
					'Ã¤': 'A',
					'Ã§': 'C',
					'Ã¨': 'E',
					'Ã©': 'E',
					'Ãª': 'E',
					'Ã«': 'E',
					'Ã¬': 'I',
					'Ã­': 'I',
					'Ã®': 'I',
					'Ã¯': 'I',
					'Ã±': 'N',
					'Ã²': 'O',
					'Ã³': 'O',
					'Ã´': 'O',
					'Ã¶': 'O',
					'Ã¹': 'U',
					'Ãº': 'U',
					'Ã»': 'U',
					'Ã¼': 'U'
				};
				this.mapper = this.charMapper;
			}
			break;
		case "el":
			if (this.up) {
				this.mapData = {
					'Î': 'Î',
					'Î¬': 'Î',
					'Î­': 'Î',
					'Î®': 'Î',
					'Î¯': 'Î',
					'Î°': 'Î¥',
					'Ï': 'Î',
					'Ï': 'Î¥',
					'Ï': 'Î',
					'Ï': 'Î¥',
					'Ï': 'Î©'	
				};
				this.mapper = this.charMapper;
			}
			break;
		case "abq":
		case "ady":
		case "av":
		case "ce":
		case "dar":
		case "inh":
		case "kbd":
		case "lbe":
		case "lez":
		case "tab":
		case "ru":
			if (!this.up) {
				this.mapData = {
					'Ó': 'Ó'	
				};
				this.mapper = this.charMapper;
			}
			break;
	}
	
	if (!this.mapper) {
		this.mapper = function(string) {
			return this.up ? string.toUpperCase() : string.toLowerCase();
		};
	}
};

ilib.CaseMapper.prototype = {
	/**
	 * Return the locale that this mapper was constructed with. 
	 * @returns {ilib.Locale} the locale that this mapper was constructed with
	 */
	getLocale: function () {
		return this.locale;
	},
		
	/**
	 * Map a string to lower case in a locale-sensitive manner.
	 * 
	 * @param {string|undefined} string
	 * @return {string|undefined}
	 */
	map: function (string) {
		return this.mapper(string);
	}
};
ilib.data.numplan = {"region":"XX","skipTrunk":false,"trunkCode":"0","iddCode":"00","dialingPlan":"closed","commonFormatChars":" ()-./","fieldLengths":{"areaCode":0,"cic":0,"mobilePrefix":0,"serviceCode":0}};
ilib.data.numplan_DJ = {"region":"DJ","countryCode":"253","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_NA = {"region":"NA","countryCode":"264","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_ZA = {"region":"ZA","countryCode":"27","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"closed"};
ilib.data.numplan_CM = {"region":"CM","countryCode":"237","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_GH = {"region":"GH","countryCode":"233","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_ET = {"region":"ET","countryCode":"251","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_AE = {"region":"AE","countryCode":"971","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_BH = {"region":"BH","countryCode":"973","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_DZ = {"region":"DZ","countryCode":"213","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_EG = {"region":"EG","countryCode":"20","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_IQ = {"region":"IQ","countryCode":"964","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_JO = {"region":"JO","countryCode":"962","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_KW = {"region":"KW","countryCode":"965","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_LB = {"region":"LB","countryCode":"961","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_LY = {"region":"LY","countryCode":"218","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_MA = {"region":"MA","countryCode":"212","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"closed"};
ilib.data.numplan_MR = {"region":"MR","countryCode":"222","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_OM = {"region":"OM","countryCode":"968","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_QA = {"region":"QA","countryCode":"974","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_SA = {"region":"SA","countryCode":"966","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_SD = {"region":"SD","countryCode":"249","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_SY = {"region":"SY","countryCode":"963","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_TN = {"region":"TN","countryCode":"216","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_YE = {"region":"YE","countryCode":"967","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_TZ = {"region":"TZ","countryCode":"255","iddCode":"000","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_IN = {"region":"IN","skipTrunk":true,"trunkCode":"0","iddCode":"00","dialingPlan":"open","commonFormatChars":" ()-","fieldLengths":{"areaCode":0,"mobilePrefix":3,"serviceCode":0,"emergency":0,"cic":4,"minLocalLength":6,"maxLocalLength":8}};
ilib.data.numplan_AZ = {"region":"AZ","countryCode":"994","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_BY = {"region":"BY","countryCode":"375","iddCode":"810","trunkCode":"8","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_ZM = {"region":"ZM","countryCode":"260","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_BG = {"region":"BG","countryCode":"359","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_ML = {"region":"ML","countryCode":"223","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_FR = {"region":"FR","skipTrunk":true,"trunkCode":"0","iddCode":"00","dialingPlan":"closed","trunkRequired":true,"commonFormatChars":" ().-","fieldLengths":{"areaCode":1,"cic":0,"mobilePrefix":1,"serviceCode":1,"minLocalLength":8,"special":0,"service2":0}};
ilib.data.numplan_BA = {"region":"BA","countryCode":"387","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_ME = {"region":"ME","countryCode":"382","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_CZ = {"region":"CZ","countryCode":"420","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_DK = {"region":"DK","countryCode":"45","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_AT = {"region":"AT","countryCode":"43","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_CH = {"region":"CH","countryCode":"41","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"closed"};
ilib.data.numplan_DE = {"region":"DE","skipTrunk":true,"trunkCode":"0","findExtensions":true,"iddCode":"00","dialingPlan":"open","commonFormatChars":" ()-/.","fieldLengths":{"areaCode":0,"cic":0,"mobilePrefix":-1,"serviceCode":0,"personal":0,"service2":6,"service3":7,"emergency":0,"minLocalLength":3,"premium":0}};
ilib.data.numplan_GR = {"region":"GR","countryCode":"30","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"closed"};
ilib.data.numplan_AU = {"region":"AU","skipTrunk":true,"trunkCode":"0","iddCode":"0011","dialingPlan":"open","extendedAreaCodes":true,"commonFormatChars":" ()","fieldLengths":{"areaCode":1,"cic":0,"mobilePrefix":4,"serviceCode":0,"emergency":0,"vsc":0,"minLocalLength":8,"maxLocalLength":8}};
ilib.data.numplan_GB = {"region":"GB","skipTrunk":true,"trunkCode":"0","contextFree":false,"iddCode":"00","dialingPlan":"open","commonFormatChars":" ()-","fieldLengths":{"areaCode":0,"cic":0,"vsc":0,"mobilePrefix":4,"serviceCode":0,"personal":0,"minLocalLength":4,"emergency":0}};
ilib.data.numplan_GM = {"region":"GM","countryCode":"220","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_HK = {"region":"HK","countryCode":"852","iddCode":"001","dialingPlan":"closed","skipTrunk":false,"findExtensions":false,"commonFormatChars":" ()-/","fieldLengths":{"mobilePrefix":1,"serviceCode":1,"premium":0,"minLocalLength":7,"maxLocalLength":8,"emergency":0}};
ilib.data.numplan_IE = {"region":"IE","skipTrunk":true,"trunkCode":"0","iddCode":"00","dialingPlan":"open","commonFormatChars":" ()-","fieldLengths":{"areaCode":0,"cic":0,"mobilePrefix":0,"emergency":0,"serviceCode":0,"minLocalLength":5,"premium":0}};
ilib.data.numplan_KE = {"region":"KE","countryCode":"254","iddCode":"000","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_LK = {"region":"LK","countryCode":"94","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_LR = {"region":"LR","countryCode":"231","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_MW = {"region":"MW","countryCode":"265","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_MY = {"region":"MY","countryCode":"60","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_NG = {"region":"NG","countryCode":"234","iddCode":"009","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_NZ = {"region":"NZ","skipTrunk":true,"trunkCode":"0","extendedAreaCodes":true,"iddCode":"00","dialingPlan":"open","commonFormatChars":" ()-.","fieldLengths":{"areaCode":1,"cic":0,"mobilePrefix":0,"serviceCode":0,"emergency":0,"vsc":0,"minLocalLength":7}};
ilib.data.numplan_PH = {"region":"PH","countryCode":"63","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_PK = {"region":"PK","countryCode":"92","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_RW = {"region":"RW","countryCode":"250","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_SG = {"region":"SG","skipTrunk":false,"trunkCode":"0","iddCode":"00","dialingPlan":"closed","findExtensions":false,"commonFormatChars":" ()-/","fieldLengths":{"mobilePrefix":-2,"serviceCode":0,"premium":0,"minLocalLength":8,"emergency":0}};
ilib.data.numplan_SL = {"region":"SL","countryCode":"232","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_UG = {"region":"UG","countryCode":"256","iddCode":"000","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_US = {"region":"US","skipTrunk":true,"trunkCode":"1","iddCode":"011","dialingPlan":"closed","commonFormatChars":" ()-.","fieldLengths":{"areaCode":3,"vsc":0,"cic":7,"mobilePrefix":0,"serviceCode":0,"minLocalLength":7,"maxLocalLength":7,"emergency":0,"special":0}};
ilib.data.numplan_AR = {"region":"AR","countryCode":"54","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_CO = {"region":"CO","countryCode":"57","iddCode":"009","trunkCode":"09","skipTrunk":true};
ilib.data.numplan_CR = {"region":"CR","countryCode":"506","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_EC = {"region":"EC","countryCode":"593","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_ES = {"region":"ES","skipTrunk":true,"trunkCode":"0","iddCode":"00","dialingPlan":"closed","commonFormatChars":" ()-","fieldLengths":{"areaCode":0,"cic":4,"mobilePrefix":3,"serviceCode":3,"emergency":0,"minLocalLength":9,"personal":3}};
ilib.data.numplan_GQ = {"region":"GQ","countryCode":"240","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_GT = {"region":"GT","countryCode":"502","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_HN = {"region":"HN","countryCode":"504","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_MX = {"region":"MX","skipTrunk":true,"trunkCode":"01","iddCode":"00","dialingPlan":"open","commonFormatChars":" ()-/","fieldLengths":{"areaCode":0,"cic":0,"mobilePrefix":0,"serviceCode":0,"minLocalLength":7,"maxLocalLength":8}};
ilib.data.numplan_SV = {"region":"SV","countryCode":"503","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_UY = {"region":"UY","countryCode":"598","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_VE = {"region":"VE","countryCode":"58","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_EE = {"region":"EE","countryCode":"372","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_AF = {"region":"AF","countryCode":"93","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_IR = {"region":"IR","countryCode":"98","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_SN = {"region":"SN","countryCode":"221","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_FI = {"region":"FI","countryCode":"358","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_FJ = {"region":"FJ","countryCode":"679","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_AD = {"region":"AD","countryCode":"376","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_BE = {"region":"BE","skipTrunk":true,"trunkCode":"0","iddCode":"00","dialingPlan":"open","findExtensions":true,"contextFree":false,"commonFormatChars":" ()-/","fieldLengths":{"areaCode":0,"cic":4,"cic2":5,"emergency":0,"mobilePrefix":-1,"serviceCode":0,"personal":0,"service2":6,"service3":7,"minLocalLength":6,"premium":0}};
ilib.data.numplan_BF = {"region":"BF","countryCode":"226","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_BJ = {"region":"BJ","countryCode":"229","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_CD = {"region":"CD","countryCode":"243","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_CF = {"region":"CF","countryCode":"236","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_CG = {"region":"CG","countryCode":"242","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_CI = {"region":"CI","countryCode":"225","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_GA = {"region":"GA","countryCode":"241","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_GN = {"region":"GN","countryCode":"224","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_LU = {"region":"LU","skipTrunk":false,"trunkCode":"0","findExtensions":false,"iddCode":"00","dialingPlan":"closed","commonFormatChars":" ()-","fieldLengths":{"areaCode":0,"cic":5,"mobilePrefix":0,"emergency":0,"serviceCode":0,"personal":4,"service2":5,"service3":4,"minLocalLength":3,"premium":5}};
ilib.data.numplan_MG = {"region":"MG","countryCode":"261","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_TG = {"region":"TG","countryCode":"228","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_YT = {"region":"YT","countryCode":"269","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_IL = {"region":"IL","countryCode":"972","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_HR = {"region":"HR","countryCode":"385","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_HU = {"region":"HU","countryCode":"36","iddCode":"00","trunkCode":"06","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_ID = {"region":"ID","countryCode":"62","iddCode":"001","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_IT = {"region":"IT","skipTrunk":false,"trunkCode":"0","iddCode":"00","dialingPlan":"open","commonFormatChars":" ()-/","fieldLengths":{"areaCode":0,"cic":0,"mobilePrefix":3,"serviceCode":0,"service2":2,"service3":3,"service4":4,"emergency":0,"minLocalLength":4,"premium":0}};
ilib.data.numplan_SM = {"region":"SM","countryCode":"378","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_JP = {"region":"JP","countryCode":"81","iddCode":"010","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_KZ = {"region":"KZ","countryCode":"7","iddCode":"810","trunkCode":"8","skipTrunk":true};
ilib.data.numplan_KR = {"region":"KR","countryCode":"82","iddCode":"001","trunkCode":"0","skipTrunk":true,"dialingPlan":"closed","commonFormatChars":" ()-.","fieldLengths":{"areaCode":0,"vsc":0,"cic":0,"mobilePrefix":0,"serviceCode":0,"minLocalLength":7,"maxLocalLength":8,"emergency":0,"special":0}};
ilib.data.numplan_LT = {"region":"LT","countryCode":"370","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_LV = {"region":"LV","countryCode":"371","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_CK = {"region":"CK","countryCode":"682","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_MK = {"region":"MK","countryCode":"389","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_CN = {"region":"CN","skipTrunk":true,"trunkCode":"0","iddCode":"00","dialingPlan":"open","commonFormatChars":" ()-","fieldLengths":{"areaCode":0,"mobilePrefix":0,"serviceCode":0,"premium":0,"minLocalLength":7,"emergency":0}};
ilib.data.numplan_BN = {"region":"BN","countryCode":"673","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_NO = {"region":"NO","countryCode":"47","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_GF = {"region":"GF","countryCode":"594","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_NL = {"region":"NL","skipTrunk":true,"trunkCode":"0","findExtensions":false,"iddCode":"00","dialingPlan":"open","commonFormatChars":" ()-/","fieldLengths":{"areaCode":0,"mobilePrefix":0,"serviceCode":0,"service2":4,"premium":0,"minLocalLength":6,"emergency":0}};
ilib.data.numplan_SR = {"region":"SR","countryCode":"597","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_RU = {"region":"RU","countryCode":"7","iddCode":"810","trunkCode":"8","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_PL = {"region":"PL","countryCode":"48","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"closed"};
ilib.data.numplan_AO = {"region":"AO","countryCode":"244","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_BR = {"region":"BR","countryCode":"55","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_CV = {"region":"CV","countryCode":"238","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_GW = {"region":"GW","countryCode":"245","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_MO = {"region":"MO","countryCode":"853","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_MZ = {"region":"MZ","countryCode":"258","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_PT = {"region":"PT","countryCode":"351","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_ST = {"region":"ST","countryCode":"239","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_TL = {"region":"TL","countryCode":"670","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_RO = {"region":"RO","countryCode":"40","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"closed"};
ilib.data.numplan_RS = {"region":"RS","countryCode":"381","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_KG = {"region":"KG","countryCode":"996","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_TM = {"region":"TM","countryCode":"993","iddCode":"810","trunkCode":"8","skipTrunk":true};
ilib.data.numplan_SK = {"region":"SK","countryCode":"421","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_SI = {"region":"SI","countryCode":"386","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_SO = {"region":"SO","countryCode":"252","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_AL = {"region":"AL","countryCode":"355","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_LS = {"region":"LS","countryCode":"266","iddCode":"00","dialingPlan":"closed"};
ilib.data.numplan_SE = {"region":"SE","countryCode":"46","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_TH = {"region":"TH","countryCode":"66","iddCode":"001","trunkCode":"0","skipTrunk":true,"dialingPlan":"closed"};
ilib.data.numplan_TR = {"region":"TR","countryCode":"90","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"closed"};
ilib.data.numplan_UA = {"region":"UA","countryCode":"380","iddCode":"00","trunkCode":"0","skipTrunk":true,"dialingPlan":"open"};
ilib.data.numplan_UZ = {"region":"UZ","countryCode":"998","iddCode":"810","trunkCode":"8","skipTrunk":true};
ilib.data.numplan_VN = {"region":"VN","countryCode":"84","iddCode":"00","trunkCode":"0","skipTrunk":true};
ilib.data.numplan_TW = {"region":"TW","countryCode":"886","iddCode":"002","trunkCode":"0","skipTrunk":true};
/*
 * numplan.js - Represent a phone numbering plan.
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
localeinfo.js
*/

// !data numplan

/**
 * @class
 * Create a numbering plan information instance for a particular country's plan.<p>
 * 
 * The options may contain any of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> - locale for which the numbering plan is sought. This locale
 * will be mapped to the actual numbering plan, which may be shared amongst a
 * number of countries.
 *
 * <li>onLoad - a callback function to call when the date format object is fully 
 * loaded. When the onLoad option is given, the DateFmt object will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * 
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 *  
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * Depends directive: !depends phone/numplan.js
 * 
 * @constructor
 * @package
 * @param {Object} options options governing the way this plan is loaded
 */
ilib.NumPlan = function (options) {
	var sync = true,
	    loadParams = {};
	
	this.locale = new ilib.Locale();

	if (options) {
		if (options.locale) {
			this.locale = (typeof(options.locale) === 'string') ? new ilib.Locale(options.locale) : options.locale;
		}
		
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (options.loadParams) {
			loadParams = options.loadParams;
		}
	}	

	ilib.loadData({
		name: "numplan.json",
		object: ilib.NumPlan,
		locale: this.locale,
		sync: sync, 
		loadParams: loadParams, 
		callback: ilib.bind(this, function (npdata) {
			if (!npdata) {
				npdata = {
					"region": "XX",
					"skipTrunk": false,
					"trunkCode": "0",
					"iddCode": "00",
					"dialingPlan": "closed",
					"commonFormatChars": " ()-./",
					"fieldLengths": {
						"areaCode": 0,
						"cic": 0,
						"mobilePrefix": 0,
						"serviceCode": 0
					}
				};
			}

			/** 
			 * @type {{
			 *   region:string,
			 *   skipTrunk:boolean,
			 *   trunkCode:string,
			 *   iddCode:string,
			 *   dialingPlan:string,
			 *   commonFormatChars:string,
			 *   fieldLengths:Object.<string,number>,
			 *   contextFree:boolean,
			 *   findExtensions:boolean,
			 *   trunkRequired:boolean,
			 *   extendedAreaCodes:boolean
			 * }}
			 */
			this.npdata = npdata;
			if (options && typeof(options.onLoad) === 'function') {
				options.onLoad(this);
			}
		})
	});
};

ilib.NumPlan.prototype = {
	/**
	 * Return the name of this plan. This may be different than the 
	 * name of the region because sometimes multiple countries share 
	 * the same plan.
	 * @return {string} the name of the plan
	 */
	getName: function() {
		return this.npdata.region;
	},

	/**
	 * Return the trunk code of the current plan as a string.
	 * @return {string|undefined} the trunk code of the plan or
	 * undefined if there is no trunk code in this plan
	 */
	getTrunkCode: function() {
		return this.npdata.trunkCode;
	},
	
	/**
	 * Return the international direct dialing code of this plan.
	 * @return {string} the IDD code of this plan
	 */
	getIDDCode: function() {
		return this.npdata.iddCode;	
	},
	
	/**
	 * Return the plan style for this plan. The plan style may be
	 * one of:
	 * 
	 * <ul>
	 * <li>"open" - area codes may be left off if the caller is 
	 * dialing to another number within the same area code
	 * <li>"closed" - the area code must always be specified, even
	 * if calling another number within the same area code
	 * </ul>
	 * 
	 * @return {string} the plan style, "open" or "closed"
	 */
	getPlanStyle: function() {	
		return this.npdata.dialingPlan;
	},
	/** [Need Comment]
	 * Return a contextFree
	 *
	 * @return {boolean}
	 */
	getContextFree: function() {
		return this.npdata.contextFree;
	},
	/** [Need Comment]
	 * Return a findExtensions
	 * 
	 * @return {boolean}
	 */
	getFindExtensions: function() {
		return this.npdata.findExtensions;
	},
	/** [Need Comment]
	 * Return a skipTrunk
	 * 
	 * @return {boolean}
	 */
	getSkipTrunk: function() {
		return this.npdata.skipTrunk;
	},
	/** [Need Comment]
	 * Return a skipTrunk
	 * 
	 * @return {boolean}
	 */
	getTrunkRequired: function() {
		return this.npdata.trunkRequired;
	},
	/**
	 * Return true if this plan uses extended area codes.
	 * @return {boolean} true if the plan uses extended area codes
	 */
	getExtendedAreaCode: function() {
		return this.npdata.extendedAreaCodes;
	},
	/**
	 * Return a string containing all of the common format characters
	 * used to format numbers.
	 * @return {string} the common format characters fused in this locale
	 */
	getCommonFormatChars: function() {
		return this.npdata.commonFormatChars;
	},
	
	/**
	 * Return the length of the field with the given name. If the length
	 * is returned as 0, this means it is variable length.
	 * 
	 * @param {string} field name of the field for which the length is 
	 * being sought
	 * @return {number} if positive, this gives the length of the given 
	 * field. If zero, the field is variable length. If negative, the
	 * field is not known.
	 */
	getFieldLength: function (field) {
		var dataField = this.npdata.fieldLengths;
		
		return dataField[field];
	}
};

ilib.data.phoneloc = {"mcc2reg":{"202":"GR","204":"NL","206":"BE","208":"FR","212":"MC","213":"AD","214":"ES","216":"HU","218":"BA","219":"HR","220":"RS","222":"IT","225":"VA","226":"RO","228":"CH","230":"CZ","231":"SK","232":"AT","234":"GB","235":"GB","238":"DK","240":"SE","242":"NO","244":"FI","246":"LT","247":"LV","248":"EE","250":"RU","255":"UA","257":"BY","259":"MD","260":"PL","262":"DE","266":"GI","268":"PT","270":"LU","272":"IE","274":"IS","276":"AL","278":"MT","280":"CY","282":"GE","283":"AM","284":"BG","286":"TR","288":"FO","290":"GL","292":"SM","293":"SI","294":"MK","295":"LI","297":"ME","302":"CA","308":"PM","310":"US","311":"US","312":"US","313":"US","314":"US","315":"US","316":"US","330":"PR","332":"VI","334":"MX","338":"JM","340":"MQ","342":"BB","344":"AG","346":"KY","348":"VG","350":"BM","352":"GD","354":"MS","356":"KN","358":"LC","360":"VC","362":"AN","363":"AW","364":"BS","365":"AI","366":"DM","368":"CU","370":"DO","372":"HT","374":"TT","376":"TC","400":"AZ","401":"KZ","402":"BT","404":"IN","405":"IN","406":"IN","410":"PK","412":"AF","413":"LK","414":"MM","415":"LB","416":"JO","417":"SY","418":"IQ","419":"KW","420":"SA","421":"YE","422":"OM","423":"PS","424":"AE","425":"IL","426":"BH","427":"QA","428":"MN","429":"NP","430":"AE","431":"AE","432":"IR","434":"UZ","436":"TJ","437":"KG","438":"TM","440":"JP","441":"JP","450":"KR","452":"VN","454":"HK","455":"MO","456":"KH","457":"LA","460":"CN","461":"CN","466":"TW","467":"KP","470":"BD","472":"MV","502":"MY","505":"AU","510":"ID","514":"TL","515":"PH","520":"TH","525":"SG","528":"BN","530":"NZ","534":"MP","535":"GU","536":"NR","537":"PG","539":"TO","540":"SB","541":"VU","542":"FJ","543":"WF","544":"AS","545":"KI","546":"NC","547":"PF","548":"CK","549":"WS","550":"FM","551":"MH","552":"PW","602":"EG","603":"DZ","604":"MA","605":"TN","606":"LY","607":"GM","608":"SN","609":"MR","610":"ML","611":"GN","612":"CI","613":"BF","614":"NE","615":"TG","616":"BJ","617":"MU","618":"LR","619":"SL","620":"GH","621":"NG","622":"TD","623":"CF","624":"CM","625":"CV","626":"ST","627":"GQ","628":"GA","629":"CG","630":"CD","631":"AO","632":"GW","633":"SC","634":"SD","635":"RW","636":"ET","637":"SO","638":"DJ","639":"KE","640":"TZ","641":"UG","642":"BI","643":"MZ","645":"ZM","646":"MG","647":"RE","648":"ZW","649":"NA","650":"MW","651":"LS","652":"BW","653":"SZ","654":"KM","655":"ZA","657":"ER","702":"BZ","704":"GT","706":"SV","708":"HN","710":"NI","712":"CR","714":"PA","716":"PE","722":"AR","724":"BR","730":"CL","732":"CO","734":"VE","736":"BO","738":"GY","740":"EC","742":"GF","744":"PY","746":"SR","748":"UY","750":"FK","971":"AE"},"mcc2cc":{"202":"30","204":"31","206":"32","208":"33","212":"377","213":"376","214":"34","216":"36","218":"387","219":"385","220":"381","222":"39","225":"379","226":"40","228":"41","230":"420","231":"421","232":"43","234":"44","235":"44","238":"45","240":"46","242":"47","244":"358","246":"370","247":"371","248":"372","250":"7","255":"380","257":"375","259":"373","260":"48","262":"49","266":"350","268":"351","270":"352","272":"353","274":"354","276":"355","278":"356","280":"357","282":"995","283":"374","284":"359","286":"90","288":"298","290":"299","292":"378","293":"386","294":"389","295":"423","297":"382","302":"1","308":"508","310":"1","311":"1","312":"1","313":"1","314":"1","315":"1","316":"1","330":"1","332":"1","334":"52","338":"1","340":"596","342":"1","344":"1","346":"1","348":"1","350":"1","352":"1","354":"1","356":"1","358":"1","360":"1","362":"599","363":"297","364":"1","365":"1","366":"1","368":"53","370":"1","372":"509","374":"1","376":"1","400":"994","401":"7","402":"975","404":"91","405":"91","410":"92","412":"93","413":"94","414":"95","415":"961","416":"962","417":"963","418":"964","419":"965","420":"966","421":"967","422":"968","423":"970","424":"971","425":"972","426":"973","427":"974","428":"976","429":"977","430":"971","431":"971","432":"98","434":"998","436":"992","437":"996","438":"993","440":"81","441":"81","450":"82","452":"84","454":"852","455":"853","456":"855","457":"856","460":"86","466":"886","467":"850","470":"880","472":"960","502":"60","505":"61","510":"62","514":"670","515":"63","520":"66","525":"65","528":"673","530":"64","534":"1","535":"1","536":"674","537":"675","539":"676","540":"677","541":"678","542":"679","543":"681","544":"1","545":"686","546":"687","547":"689","548":"682","549":"685","550":"691","551":"692","552":"680","602":"20","603":"213","604":"212","605":"216","606":"218","607":"220","608":"221","609":"222","610":"223","611":"224","612":"225","613":"226","614":"227","615":"228","616":"229","617":"230","618":"231","619":"232","620":"233","621":"234","622":"235","623":"236","624":"237","625":"238","626":"239","627":"240","628":"241","629":"242","630":"243","631":"244","632":"245","633":"248","634":"249","635":"250","636":"251","637":"252","638":"253","639":"254","640":"255","641":"256","642":"257","643":"258","645":"260","646":"261","647":"262","648":"263","649":"264","650":"265","651":"266","652":"267","653":"268","654":"269","655":"27","657":"291","702":"501","704":"502","706":"503","708":"504","710":"505","712":"506","714":"507","716":"51","722":"54","724":"55","730":"56","732":"57","734":"58","736":"591","738":"592","740":"593","742":"594","744":"595","746":"597","748":"598","750":"500"},"cc2reg":{"1":"US","7":"RU","20":"EG","27":"ZA","28":"unknown","30":"GR","31":"NL","32":"BE","33":"FR","34":"ES","36":"HU","39":"IT","40":"RO","41":"CH","43":"AT","44":"GB","45":"DK","46":"SE","47":"NO","48":"PL","49":"DE","51":"PE","52":"MX","53":"CU","54":"AR","55":"BR","56":"CL","57":"CO","58":"VE","60":"MY","61":"AU","62":"ID","63":"PH","64":"NZ","65":"SG","66":"TH","81":"JP","82":"KR","83":"unknown","84":"VN","86":"CN","89":"unknown","90":"TR","91":"IN","92":"PK","93":"AF","94":"LK","95":"MM","98":"IR","210":"unknown","211":"unknown","212":"MA","213":"DZ","214":"unknown","215":"unknown","216":"TN","217":"unknown","218":"LY","219":"unknown","220":"GM","221":"SN","222":"MR","223":"ML","224":"GN","225":"CI","226":"BF","227":"NE","228":"TG","229":"BJ","230":"MU","231":"LR","232":"SL","233":"GH","234":"NG","235":"TD","236":"CF","237":"CM","238":"CV","239":"ST","240":"GQ","241":"GA","242":"CG","243":"CD","244":"AO","245":"GW","246":"IO","247":"AC","248":"SC","249":"SD","250":"RW","251":"ET","252":"SO","253":"DJ","254":"KE","255":"TZ","256":"UG","257":"BI","258":"MZ","259":"unknown","260":"ZM","261":"MG","262":"RE","263":"ZW","264":"NA","265":"MW","266":"LS","267":"BW","268":"SZ","269":"KM","290":"SH","291":"ER","292":"unknown","293":"unknown","294":"unknown","295":"unknown","296":"unknown","297":"AW","298":"FO","299":"GL","350":"GI","351":"PT","352":"LU","353":"IE","354":"IS","355":"AL","356":"MT","357":"CY","358":"FI","359":"BG","370":"LT","371":"LV","372":"EE","373":"MD","374":"AM","375":"BY","376":"AD","377":"MC","378":"SM","379":"VA","380":"UA","381":"RS","382":"ME","383":"unknown","384":"unknown","385":"HR","386":"SI","387":"BA","388":"EU","389":"MK","420":"CZ","421":"SK","422":"unknown","423":"LI","424":"unknown","425":"unknown","426":"unknown","427":"unknown","428":"unknown","429":"unknown","500":"FK","501":"BZ","502":"GT","503":"SV","504":"HN","505":"NI","506":"CR","507":"PA","508":"PM","509":"HT","590":"GP","591":"BO","592":"GY","593":"EC","594":"GF","595":"PY","596":"MQ","597":"SR","598":"UY","599":"AN","670":"TL","671":"unknown","672":"NF","673":"BN","674":"NR","675":"PG","676":"TO","677":"SB","678":"VU","679":"FJ","680":"PW","681":"WF","682":"CK","683":"NU","684":"unknown","685":"WS","686":"KI","687":"NC","688":"TV","689":"PF","690":"TK","691":"FM","692":"MH","693":"unknown","694":"unknown","695":"unknown","696":"unknown","697":"unknown","698":"unknown","699":"unknown","800":"XT","801":"unknown","802":"unknown","803":"unknown","804":"unknown","805":"unknown","806":"unknown","807":"unknown","808":"XS","809":"unknown","850":"KP","851":"unknown","852":"HK","853":"MO","854":"unknown","855":"KH","856":"LA","857":"unknown","858":"unknown","859":"unknown","870":"XN","871":"unknown","872":"PN","873":"unknown","874":"unknown","875":"unknown","876":"unknown","877":"unknown","878":"XP","879":"unknown","880":"BD","881":"XG","882":"XV","883":"XL","884":"unknown","885":"unknown","886":"TW","887":"unknown","888":"XD","889":"unknown","960":"MV","961":"LB","962":"JO","963":"SY","964":"IQ","965":"KW","966":"SA","967":"YE","968":"OM","969":"unknown","970":"PS","971":"AE","972":"IL","973":"BH","974":"QA","975":"BT","976":"MN","977":"NP","978":"unknown","979":"XR","990":"unknown","991":"XC","992":"TJ","993":"TM","994":"AZ","995":"GE","996":"KG","997":"unknown","998":"UZ","999":"unknown"},"reg2cc":{"US":"1","EG":"20","unknown":"0","MA":"212","DZ":"213","TN":"216","LY":"218","GM":"220","SN":"221","MR":"222","ML":"223","GN":"224","CI":"225","BF":"226","NE":"227","TG":"228","BJ":"229","MU":"230","LR":"231","SL":"232","GH":"233","NG":"234","TD":"235","CF":"236","CM":"237","CV":"238","ST":"239","GQ":"240","GA":"241","CG":"242","CD":"243","AO":"244","GW":"245","IO":"246","AC":"247","SC":"248","SD":"249","RW":"250","ET":"251","SO":"252","DJ":"253","KE":"254","TZ":"255","UG":"256","BI":"257","MZ":"258","ZM":"260","MG":"261","RE":"262","ZW":"263","NA":"264","MW":"265","LS":"266","BW":"267","SZ":"268","KM":"269","ZA":"27","SH":"290","ER":"291","AW":"297","FO":"298","GL":"299","GR":"30","NL":"31","BE":"32","FR":"33","ES":"34","GI":"350","PT":"351","LU":"352","IE":"353","IS":"354","AL":"355","MT":"356","CY":"357","FI":"358","BG":"359","HU":"36","LT":"370","LV":"371","EE":"372","MD":"373","AM":"374","BY":"375","AD":"376","MC":"377","SM":"378","VA":"379","UA":"380","RS":"381","ME":"382","HR":"385","SI":"386","BA":"387","EU":"388","MK":"389","IT":"39","RO":"40","CH":"41","CZ":"420","SK":"421","LI":"423","AT":"43","GB":"44","DK":"45","SE":"46","NO":"47","PL":"48","DE":"49","FK":"500","BZ":"501","GT":"502","SV":"503","HN":"504","NI":"505","CR":"506","PA":"507","PM":"508","HT":"509","PE":"51","MX":"52","CU":"53","AR":"54","BR":"55","CL":"56","CO":"57","VE":"58","GP":"590","BO":"591","GY":"592","EC":"593","GF":"594","PY":"595","MQ":"596","SR":"597","UY":"598","AN":"599","MY":"60","AU":"61","ID":"62","PH":"63","NZ":"64","SG":"65","TH":"66","TL":"1","NF":"672","BN":"673","NR":"674","PG":"675","TO":"676","SB":"677","VU":"678","FJ":"679","PW":"680","WF":"681","CK":"682","NU":"683","WS":"685","KI":"686","NC":"687","TV":"688","PF":"689","TK":"690","FM":"691","MH":"692","RU":"7","XT":"800","XS":"808","JP":"81","KR":"82","VN":"84","KP":"850","HK":"852","MO":"853","KH":"855","LA":"856","CN":"86","XN":"870","PN":"872","XP":"878","BD":"880","XG":"881","XV":"882","XL":"883","TW":"886","XD":"888","TR":"90","IN":"91","PK":"92","AF":"93","LK":"94","MM":"95","MV":"960","LB":"961","JO":"962","SY":"963","IQ":"964","KW":"965","SA":"966","YE":"967","OM":"968","PS":"970","AE":"971","IL":"972","BH":"973","QA":"974","BT":"975","MN":"976","NP":"977","XR":"979","IR":"98","XC":"991","TJ":"992","TM":"993","AZ":"994","GE":"995","KG":"996","UZ":"998","CA":"1","AG":"1","BS":"1","BB":"1","DM":"1","DO":"1","GD":"1","JM":"1","KN":"1","LC":"1","VC":"1","TT":"1","AI":"1","BM":"1","VG":"1","KY":"1","MS":"1","TC":"1","AS":"1","VI":"1","PR":"1","MP":"1","GU":"1"},"area2reg":{"1":{"204":"CA","226":"CA","242":"BS","246":"BB","250":"CA","264":"AI","268":"AG","284":"VG","289":"CA","306":"CA","340":"VI","343":"CA","345":"KY","403":"CA","416":"CA","418":"CA","438":"CA","441":"BM","450":"CA","473":"GD","506":"CA","514":"CA","519":"CA","579":"CA","581":"CA","587":"CA","604":"CA","613":"CA","647":"CA","649":"TC","664":"MS","670":"MP","671":"GU","684":"AS","705":"CA","709":"CA","721":"AN","758":"LC","767":"DM","778":"CA","780":"CA","784":"VC","787":"PR","807":"CA","809":"DO","819":"CA","829":"DO","849":"DO","867":"CA","868":"TT","869":"KN","876":"JM","902":"CA","905":"CA","939":"PR","default":"US"},"33":{"262":"RE","508":"PM","590":"GP","594":"GF","596":"MQ","default":"FR"},"39":{"549":"SM","default":"IT"}}};
/*
 * phoneloc.js - Represent a phone locale object.
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
localeinfo.js
*/

// !data phoneloc

/**
 * @class
 *
 * @param {Object} options Options that govern how this phone locale works
 * @constructor
 * @private
 * @extends ilib.Locale
 */
ilib.Locale.PhoneLoc = function(options) {
	var region,
		mcc,
		cc,
		sync = true,
		loadParams = {},
		locale;
	
	locale = (options && options.locale) || ilib.getLocale();

	this.parent.call(this, locale);
	
	region = this.region;
	
	if (options) {
		if (typeof(options.mcc) !== 'undefined') {
			mcc = options.mcc;
		}
		
		if (typeof(options.countryCode) !== 'undefined') {
			cc = options.countryCode;
		}

		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (options.loadParams) {
			loadParams = options.loadParams;
		}
	}

	ilib.loadData({
		name: "phoneloc.json",
		object: ilib.Locale.PhoneLoc,
		nonlocale: true,
		sync: sync, 
		loadParams: loadParams, 
		callback: ilib.bind(this, function (data) {
			/** @type {{mcc2reg:Object.<string,string>,cc2reg:Object.<string,string>,reg2cc:Object.<string,string>,area2reg:Object.<string,string>}} */
			this.mappings = data;
			
			if (typeof(mcc) !== 'undefined') {
				region = this.mappings.mcc2reg[mcc];	
			}

			if (typeof(cc) !== 'undefined') {
				region = this.mappings.cc2reg[cc];
			}

			if (!region) {
				region = "XX";
			}

			this.region = this._normPhoneReg(region);
			this._genSpec();

			if (options && typeof(options.onLoad) === 'function') {
				options.onLoad(this);
			}									
		})
	});
};

ilib.Locale.PhoneLoc.prototype = new ilib.Locale();
ilib.Locale.PhoneLoc.prototype.parent = ilib.Locale;
ilib.Locale.PhoneLoc.prototype.constructor = ilib.Locale.PhoneLoc;

/**
 * Map a mobile carrier code to a region code.
 *
 * @static
 * @package
 * @param {string|undefined} mcc the MCC to map
 * @return {string|undefined} the region code
 */

ilib.Locale.PhoneLoc.prototype._mapMCCtoRegion = function(mcc) {
	if (!mcc) {
		return undefined;
	}
	return this.mappings.mcc2reg && this.mappings.mcc2reg[mcc] || "XX";
};

/**
 * Map a country code to a region code.
 *
 * @static
 * @package
 * @param {string|undefined} cc the country code to map
 * @return {string|undefined} the region code
 */
ilib.Locale.PhoneLoc.prototype._mapCCtoRegion = function(cc) {
	if (!cc) {
		return undefined;
	}
	return this.mappings.cc2reg && this.mappings.cc2reg[cc] || "XX";
};

/**
 * Map a region code to a country code.
 *
 * @static
 * @package
 * @param {string|undefined} region the region code to map
 * @return {string|undefined} the country code
 */
ilib.Locale.PhoneLoc.prototype._mapRegiontoCC = function(region) {
	if (!region) {
		return undefined;
	}
	return this.mappings.reg2cc && this.mappings.reg2cc[region] || "0";
};

/**
 * Map a country code to a region code.
 *
 * @static
 * @package
 * @param {string|undefined} cc the country code to map
 * @param {string|undefined} area the area code within the country code's numbering plan
 * @return {string|undefined} the region code
 */
ilib.Locale.PhoneLoc.prototype._mapAreatoRegion = function(cc, area) {
	if (!cc) {
		return undefined;
	}
	if (cc in this.mappings.area2reg) {
		return this.mappings.area2reg[cc][area] || this.mappings.area2reg[cc]["default"];
	} else {
		return this.mappings.cc2reg[cc];
	}
};

/**
 * Return the region that controls the dialing plan in the given
 * region. (ie. the "normalized phone region".)
 * 
 * @static
 * @package
 * @param {string} region the region code to normalize
 * @return {string} the normalized region code
 */
ilib.Locale.PhoneLoc.prototype._normPhoneReg = function(region) {
	var norm;
	
	// Map all NANP regions to the right region, so that they get parsed using the 
	// correct state table
	switch (region) {
		case "US": // usa
		case "CA": // canada
		case "AG": // antigua and barbuda
		case "BS": // bahamas
		case "BB": // barbados
		case "DM": // dominica
		case "DO": // dominican republic
		case "GD": // grenada
		case "JM": // jamaica
		case "KN": // st. kitts and nevis
		case "LC": // st. lucia
		case "VC": // st. vincent and the grenadines
		case "TT": // trinidad and tobago
		case "AI": // anguilla
		case "BM": // bermuda
		case "VG": // british virgin islands
		case "KY": // cayman islands
		case "MS": // montserrat
		case "TC": // turks and caicos
		case "AS": // American Samoa 
		case "VI": // Virgin Islands, U.S.
		case "PR": // Puerto Rico
		case "MP": // Northern Mariana Islands
		case "T:": // East Timor
		case "GU": // Guam
			norm = "US";
			break;
		
		// these all use the Italian dialling plan
		case "IT": // italy
		case "SM": // san marino
		case "VA": // vatican city
			norm = "IT";
			break;
		
		// all the French dependencies are on the French dialling plan
		case "FR": // france
		case "GF": // french guiana
		case "MQ": // martinique
		case "GP": // guadeloupe, 
		case "BL": // saint barthÃ©lemy
		case "MF": // saint martin
		case "RE": // rÃ©union, mayotte
			norm = "FR";
			break;
		default:
			norm = region;
			break;
	}	
	return norm;
};
/*
 * handler.js - Handle phone number parse states
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
phone/phoneloc.js
*/

/**
 * @class
 * [Need Comments] globals console ilib PhoneLoc 
 *
 * @private
 * @constructor
 */
ilib.StateHandler = function _StateHandler () {
	return this;
};

ilib.StateHandler.prototype = {
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	processSubscriberNumber: function(number, fields, regionSettings) {
		var last;
		
		last = number.search(/[xwtp]/i);	// last digit of the local number

		if ( last > -1 ) {
			if ( last > 0 ) {
				fields.subscriberNumber = number.substring(0, last);
			}
			// strip x's which are there to indicate a break between the local subscriber number and the extension, but
			// are not themselves a dialable character
			fields.extension = number.substring(last).replace('x', '');
		} else {
			fields.subscriberNumber = number;
		}
		
		if (regionSettings.plan.getFieldLength('maxLocalLength') &&
				fields.subscriberNumber &&
				fields.subscriberNumber.length > regionSettings.plan.getFieldLength('maxLocalLength')) {
			fields.invalid = true;
		}
	},
	/**
	 * @private
	 * @param {string} fieldName 
	 * @param {number} length length of phone number
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 * @param {boolean} noExtractTrunk 
	 */
	processFieldWithSubscriberNumber: function(fieldName, length, number, currentChar, fields, regionSettings, noExtractTrunk) {
		var ret, end, last;
		
		last = number.search(/[xwtp]/i);	// last digit of the local number
		
		if ( length !== undefined && length > 0 ) {
			// fixed length
			end = length;
			if ( regionSettings.plan.getTrunkCode() === "0" && number.charAt(0) === "0" ) {
				end += regionSettings.plan.getTrunkCode().length;  // also extract the trunk access code
			}
		} else {
			// variable length
			// the setting is the negative of the length to add, so subtract to make it positive
			end = currentChar + 1 - length;
		}
		
		if ( fields[fieldName] !== undefined ) {
			// we have a spurious recognition, because this number already contains that field! So, just put
			// everything into the subscriberNumber as the default
			this.processSubscriberNumber(number, fields, regionSettings);
		} else {
			// substring() extracts the part of the string up to but not including the end character,
			// so add one to compensate
			if ( !noExtractTrunk && regionSettings.plan.getTrunkCode() === "0" && number.charAt(0) === "0" ) {
				fields.trunkAccess = number.charAt(0);
				fields[fieldName] = number.substring(1, end);
			} else {
				fields[fieldName] = number.substring(0, end);
			}
			
			if ( number.length > end ) {
				this.processSubscriberNumber(number.substring(end), fields, regionSettings);
			}
		}
		
		ret = {
			number: ""
		};

		return ret;
	},
	/**
	 * @private
	 * @param {string} fieldName 
	 * @param {number} length length of phone number
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	processField: function(fieldName, length, number, currentChar, fields, regionSettings) {
		var ret = {}, end;
		
		if ( length !== undefined && length > 0 ) {
			// fixed length
			end = length;
			if ( regionSettings.plan.getTrunkCode() === "0" && number.charAt(0) === "0" ) {
				end += regionSettings.plan.getTrunkCode().length;  // also extract the trunk access code
			}
		} else {
			// variable length
			// the setting is the negative of the length to add, so subtract to make it positive
			end = currentChar + 1 - length;
		}
		
		if ( fields[fieldName] !== undefined ) {
			// we have a spurious recognition, because this number already contains that field! So, just put
			// everything into the subscriberNumber as the default
			this.processSubscriberNumber(number, fields, regionSettings);
			ret.number = "";
		} else {
			// substring() extracts the part of the string up to but not including the end character,
			// so add one to compensate
			if ( regionSettings.plan.getTrunkCode() === "0" && number.charAt(0) === "0" ) {
				fields.trunkAccess = number.charAt(0);
				fields[fieldName] = number.substring(1, end);
				ret.skipTrunk = true;
			} else {
				fields[fieldName] = number.substring(0, end);
			}
			
			ret.number = (number.length > end) ? number.substring(end) : "";
		}
		
		return ret;
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	trunk: function(number, currentChar, fields, regionSettings) {
		var ret, trunkLength;
		
		if ( fields.trunkAccess !== undefined ) {
			// What? We already have one? Okay, put the rest of this in the subscriber number as the default behaviour then.
			this.processSubscriberNumber(number, fields, regionSettings);
			number = "";
		} else {
			trunkLength = regionSettings.plan.getTrunkCode().length;
			fields.trunkAccess = number.substring(0, trunkLength);
			number = (number.length > trunkLength) ? number.substring(trunkLength) : "";
		}
		
		ret = {
			number: number
		};
		
		return ret;
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	plus: function(number, currentChar, fields, regionSettings) {
		var ret = {};
		
		if ( fields.iddPrefix !== undefined ) {
			// What? We already have one? Okay, put the rest of this in the subscriber number as the default behaviour then.
			this.processSubscriberNumber(number, fields, regionSettings);
			ret.number = "";
		} else {
			// found the idd prefix, so save it and cause the function to parse the next part
			// of the number with the idd table
			fields.iddPrefix = number.substring(0, 1);
	
			ret = {
				number: number.substring(1),
				table: 'idd'    // shared subtable that parses the country code
			};
		}		
		return ret;
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	idd: function(number, currentChar, fields, regionSettings) {
		var ret = {};
		
		if ( fields.iddPrefix !== undefined ) {
			// What? We already have one? Okay, put the rest of this in the subscriber number as the default behaviour then.
			this.processSubscriberNumber(number, fields, regionSettings);
			ret.number = "";
		} else {
			// found the idd prefix, so save it and cause the function to parse the next part
			// of the number with the idd table
			fields.iddPrefix = number.substring(0, currentChar+1);
	
			ret = {
				number: number.substring(currentChar+1),
				table: 'idd'    // shared subtable that parses the country code
			};
		}
		
		return ret;
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */	
	country: function(number, currentChar, fields, regionSettings) {
		var ret, cc;
		
		// found the country code of an IDD number, so save it and cause the function to 
		// parse the rest of the number with the regular table for this locale
		fields.countryCode = number.substring(0, currentChar+1);
		cc = fields.countryCode.replace(/[wWpPtT\+#\*]/g, ''); // fix for NOV-108200
		// console.log("Found country code " + fields.countryCode + ". Switching to country " + locale.region + " to parse the rest of the number");
		
		ret = {
			number: number.substring(currentChar+1),
			countryCode: cc
		};
		
		return ret;
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	cic: function(number, currentChar, fields, regionSettings) {
		return this.processField('cic', regionSettings.plan.getFieldLength('cic'), number, currentChar, fields, regionSettings);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	service: function(number, currentChar, fields, regionSettings) {
		return this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('serviceCode'), number, currentChar, fields, regionSettings, false);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	area: function(number, currentChar, fields, regionSettings) {
		var ret, last, end, localLength;
		
		last = number.search(/[xwtp]/i);	// last digit of the local number
		localLength = (last > -1) ? last : number.length;

		if ( regionSettings.plan.getFieldLength('areaCode') > 0 ) {
			// fixed length
			end = regionSettings.plan.getFieldLength('areaCode');
			if ( regionSettings.plan.getTrunkCode() === number.charAt(0) ) {
				end += regionSettings.plan.getTrunkCode().length;  // also extract the trunk access code
				localLength -= regionSettings.plan.getTrunkCode().length;
			}
		} else {
			// variable length
			// the setting is the negative of the length to add, so subtract to make it positive
			end = currentChar + 1 - regionSettings.plan.getFieldLength('areaCode');
		}
		
		// substring() extracts the part of the string up to but not including the end character,
		// so add one to compensate
		if ( regionSettings.plan.getTrunkCode() === number.charAt(0) ) {
			fields.trunkAccess = number.charAt(0);
			if ( number.length > 1 ) {
				fields.areaCode = number.substring(1, end);
			}
			if ( number.length > end ) {
				this.processSubscriberNumber(number.substring(end), fields, regionSettings);
			}
		} else if ( regionSettings.plan.getFieldLength('maxLocalLength') !== undefined ) {
			if ( fields.trunkAccess !== undefined || fields.mobilePrefix !== undefined ||
					fields.countryCode !== undefined ||
					localLength > regionSettings.plan.getFieldLength('maxLocalLength') ) {
				// too long for a local number by itself, or a different final state already parsed out the trunk
				// or mobile prefix, then consider the rest of this number to be an area code + part of the subscriber number
				fields.areaCode = number.substring(0, end);
				if ( number.length > end ) {
					this.processSubscriberNumber(number.substring(end), fields, regionSettings);
				}
			} else {
				// shorter than the length needed for a local number, so just consider it a local number
				this.processSubscriberNumber(number, fields, regionSettings);
			}
		} else {
			fields.areaCode = number.substring(0, end);
			if ( number.length > end ) {
				this.processSubscriberNumber(number.substring(end), fields, regionSettings);
			}
		}
		
		// extensions are separated from the number by a dash in Germany
		if (regionSettings.plan.getFindExtensions() !== undefined && fields.subscriberNumber !== undefined) {
			var dash = fields.subscriberNumber.indexOf("-");
			if (dash > -1) {
				fields.subscriberNumber = fields.subscriberNumber.substring(0, dash);
				fields.extension = fields.subscriberNumber.substring(dash+1);
			}
		}

		ret = {
			number: ""
		};

		return ret;
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	none: function(number, currentChar, fields, regionSettings) {
		var ret;
		
		// this is a last resort function that is called when nothing is recognized.
		// When this happens, just put the whole stripped number into the subscriber number
		if ( regionSettings.plan && number.charAt(0) === regionSettings.plan.getTrunkCode()) {
			fields.trunkAccess = number.charAt(0);
			number = number.substring(1);
			//currentChar--;
		} 
			
		if (number.length > 0) {
			this.processSubscriberNumber(number, fields, regionSettings);
			if ( currentChar > 0 && currentChar < number.length ) {
				// if we were part-way through parsing, and we hit an invalid digit,
				// indicate that the number could not be parsed properly
				fields.invalid = true;
			}
		}
		
		ret = {
			number:""
		};
		
		return ret;
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	vsc: function(number, currentChar, fields, regionSettings) {
		var ret, length, end;

		if ( fields.vsc === undefined ) {
			length = regionSettings.plan.getFieldLength('vsc') || 0;
			if ( length !== undefined && length > 0 ) {
				// fixed length
				end = length;
			} else {
				// variable length
				// the setting is the negative of the length to add, so subtract to make it positive
				end = currentChar + 1 - length;
			}
			
			// found a VSC code (ie. a "star code"), so save it and cause the function to 
			// parse the rest of the number with the same table for this locale
			fields.vsc = number.substring(0, end);
			number = (number.length > end) ? "^" + number.substring(end) : "";
		} else {
			// got it twice??? Okay, this is a bogus number then. Just put everything else into the subscriber number as the default
			this.processSubscriberNumber(number, fields, regionSettings);
			number = "";
		}

		// treat the rest of the number as if it were a completely new number
		ret = {
			number: number
		};

		return ret;
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	cell: function(number, currentChar, fields, regionSettings) {
		return this.processFieldWithSubscriberNumber('mobilePrefix', regionSettings.plan.getFieldLength('mobilePrefix'), number, currentChar, fields, regionSettings, false);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	personal: function(number, currentChar, fields, regionSettings) {
		return this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('personal'), number, currentChar, fields, regionSettings, false);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	emergency: function(number, currentChar, fields, regionSettings) {
		return this.processFieldWithSubscriberNumber('emergency', regionSettings.plan.getFieldLength('emergency'), number, currentChar, fields, regionSettings, true);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	premium: function(number, currentChar, fields, regionSettings) {
		return this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('premium'), number, currentChar, fields, regionSettings, false);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	special: function(number, currentChar, fields, regionSettings) {
		return this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('special'), number, currentChar, fields, regionSettings, false);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	service2: function(number, currentChar, fields, regionSettings) {
		return this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('service2'), number, currentChar, fields, regionSettings, false);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	service3: function(number, currentChar, fields, regionSettings) {
		return this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('service3'), number, currentChar, fields, regionSettings, false);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	service4: function(number, currentChar, fields, regionSettings) {
		return this.processFieldWithSubscriberNumber('serviceCode', regionSettings.plan.getFieldLength('service4'), number, currentChar, fields, regionSettings, false);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	cic2: function(number, currentChar, fields, regionSettings) {
		return this.processField('cic', regionSettings.plan.getFieldLength('cic2'), number, currentChar, fields, regionSettings);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	cic3: function(number, currentChar, fields, regionSettings) {
		return this.processField('cic', regionSettings.plan.getFieldLength('cic3'), number, currentChar, fields, regionSettings);
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	start: function(number, currentChar, fields, regionSettings) {
		// don't do anything except transition to the next state
		return {
			number: number
		};
	},
	/**
	 * @private
	 * @param {string} number phone number
	 * @param {number} currentChar currentChar to be parsed
	 * @param {Object} fields the fields that have been extracted so far
	 * @param {Object} regionSettings settings used to parse the rest of the number
	 */
	local: function(number, currentChar, fields, regionSettings) {
		// in open dialling plans, we can tell that this number is a local subscriber number because it
		// starts with a digit that indicates as such
		this.processSubscriberNumber(number, fields, regionSettings);
		return {
			number: ""
		};
	}
};

// context-sensitive handler
/**
 * @class
 * @private
 * @constructor
 */
ilib.CSStateHandler = function () {
	return this;
};

ilib.CSStateHandler.prototype = new ilib.StateHandler();
ilib.CSStateHandler.prototype.special = function (number, currentChar, fields, regionSettings) {
	var ret;
	
	// found a special area code that is both a node and a leaf. In
	// this state, we have found the leaf, so chop off the end 
	// character to make it a leaf.
	if (number.charAt(0) === "0") {
		fields.trunkAccess = number.charAt(0);
		fields.areaCode = number.substring(1, currentChar);
	} else {
		fields.areaCode = number.substring(0, currentChar);
	}
	this.processSubscriberNumber(number.substring(currentChar), fields, regionSettings);
	
	ret = {
		number: ""
	};
	
	return ret;
};

/**
 * @class
 * @private
 * @constructor
 */
ilib.USStateHandler = function () {
	return this;
};

ilib.USStateHandler.prototype = new ilib.StateHandler();
ilib.USStateHandler.prototype.vsc = function (number, currentChar, fields, regionSettings) {
	var ret, length, end;

	// found a VSC code (ie. a "star code")
	fields.vsc = number;

	// treat the rest of the number as if it were a completely new number
	ret = {
		number: ""
	};

	return ret;
};

/**
 * @protected
 * @static
 */
ilib._handlerFactory = function (locale, plan) {
	if (plan.getContextFree() !== undefined && typeof(plan.getContextFree()) === 'boolean' && plan.getContextFree() === false) {
		return new ilib.CSStateHandler();
	}
	var region = (locale && locale.getRegion()) || "ZZ";
	switch (region) {
	case 'US':
		return new ilib.USStateHandler();
		break;
	default:
		return new ilib.StateHandler();
	}
};
ilib.data.states = {"states":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1],[2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]};
ilib.data.states_IN = {"states":[[-1,10,70,130,173,213,266,314,383,-7,-1,-1,-1,1,-1],[2,3,-22,-22,-22,-22,-22,-1,-1,-7,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13],[6,9,7,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1],[5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-15,-15,-15,-15,-15,-1,-1,-1,-15,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-15,-1,-1,-1,-1,-1,-1],[-1,-1,-15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-5,-8,11,17,24,31,40,48,55,61,-1,-1,-1,-1,-1],[-8,-8,-8,12,-8,13,14,15,16,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,18,19,-8,20,21,22,23,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,25,26,-8,-8,27,28,29,30,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[32,-8,33,34,-8,35,36,37,38,39,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,41,42,-8,43,44,45,46,47,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[49,-8,-8,50,51,-8,52,-8,53,54,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-8,-8,56,-8,-8,57,-8,58,59,60,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[62,-8,63,64,-8,65,66,67,68,69,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-1,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,71,-8,78,85,93,99,106,114,121,-1,-1,-1,-1,-1],[-1,72,-8,73,74,-8,75,-8,76,77,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,79,-8,80,81,82,83,84,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,86,87,88,89,90,91,92,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,94,-8,-1,95,96,-8,97,98,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,100,101,102,-8,103,104,-8,105,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,107,-1,108,109,110,111,112,-8,113,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[115,-8,116,117,118,-8,-8,119,-8,120,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[122,-8,123,124,-8,125,126,127,128,129,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[131,133,136,-8,141,146,153,159,165,-1,-1,-1,-1,-1,-1],[-1,132,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,134,-1,135,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,137,138,-1,139,140,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,142,143,144,145,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,147,148,-8,-8,149,150,-1,151,152,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,154,155,-8,156,157,158,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,160,-8,-8,-8,161,-8,162,163,164,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[166,-8,167,168,169,-8,170,171,172,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,174,180,186,-8,192,197,200,203,208,-1,-1,-1,-1,-1],[-1,175,-1,-8,176,177,-8,178,179,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[181,-8,-8,-8,-8,182,183,-8,184,185,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,187,188,189,-8,190,191,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,193,194,195,196,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,198,-1,199,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,201,202,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,204,-8,-8,-8,205,-8,206,207,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,209,210,-8,-8,-8,-8,211,212,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,214,221,228,233,239,243,250,254,262,-1,-1,-1,-1,-1],[-1,215,-8,-1,216,-8,217,218,219,220,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,222,-8,-1,223,224,225,226,227,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,229,-8,230,231,-8,232,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,234,-8,-1,235,236,237,-1,-8,238,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,240,-1,241,-1,242,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,244,-8,-1,245,-8,246,247,248,249,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,251,252,253,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,255,256,257,258,259,260,261,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,263,-1,264,-8,265,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,267,272,277,281,287,295,301,308,-1,-1,-1,-1,-1,-1],[-1,268,-8,269,-1,270,-1,-1,271,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,273,-1,274,275,-1,276,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,278,279,280,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,282,283,-1,284,285,286,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,288,289,290,291,292,-8,293,294,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,296,-8,297,298,-1,299,300,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,302,303,-8,304,305,-1,306,307,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,309,310,-1,311,312,313,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,315,325,334,339,347,355,365,375,-8,-1,-1,-1,-1,-1],[316,317,-8,318,319,320,321,322,323,324,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[326,-8,327,328,-8,329,330,331,332,333,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,335,-8,-8,-1,336,337,-1,338,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,340,341,342,-8,343,344,-8,345,346,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,348,349,350,-8,351,352,353,354,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[356,-8,357,358,359,360,361,362,363,364,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[366,-8,367,368,369,370,371,372,373,374,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[376,377,378,379,380,381,382,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,384,391,398,406,416,427,434,441,446,-1,-1,-1,-1,-1],[-1,385,-1,386,-1,387,-8,388,389,390,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-8,392,393,-8,394,395,396,397,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1],[399,-8,-8,400,401,402,-8,403,404,405,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[407,408,409,-1,410,411,412,413,414,415,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[417,418,419,420,421,422,423,424,425,426,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,428,-8,429,430,-8,431,432,433,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,435,436,437,438,439,440,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,442,443,-8,-8,444,445,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,447,448,449,450,451,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1]]};
ilib.data.states_FR = {"states":[[-1,-8,3,-8,-8,5,8,-7,11,-8,-1,-1,-1,1,-1],[2,-22,-22,-22,-22,-22,-22,-22,-22,-22,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13],[-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[6,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-12,-1,-1,-1,-1,-1,-8],[-12,-1,-1,-1,-12,-1,-12,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,9,-1,-1,-1,-1,-1,10,-1,-1,-1,-1,-7],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-7],[-6,-1,-1,-1,-6,-1,-6,-1,-1,-1,-1,-1,-1,-1,-7],[13,14,15,-1,-1,-1,-1,-1,-1,16,-1,-1,-1,-1,12],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16],[-16,-16,-16,-16,-1,-16,-1,-1,-1,-16,-1,-1,-1,-1,-16],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-16,-1,-1,-1,-1,-16],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16]]};
ilib.data.states_DE = {"states":[[-1,3,29,14,331,413,506,15,17,19,-1,-1,-1,1,-1],[2,21,-22,-22,-22,-22,-22,-22,-22,-22,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13],[4,-6,-6,8,-1,-7,-7,-7,10,12,-1,-1,-1,-1,-1],[5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-5],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-5],[-1,-1,-1,-1,-1,-1,-1,9,-14,-1,-1,-1,-1,-1,-1],[-1,-14,-14,-14,-14,-14,-14,-14,-14,-14,-1,-1,-1,-1,-1],[11,-6,-6,-14,-14,-14,-14,-14,-14,-14,-1,-1,-1,-1,-1],[-1,-14,-14,-14,-14,-14,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-6,-6,-6,-6,-1,-1,-1,13,-6,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-6,-6,-6,-1,-1,-1,-1,-1],[-8,-1,-6,115,151,175,210,246,263,293,-1,-1,-1,-1,-1],[16,592,601,609,619,628,637,646,654,660,-1,-1,-1,-1,-1],[-11,-11,585,586,587,588,589,590,591,-1,-1,-1,-1,-1,-1],[18,675,683,693,702,709,718,725,731,-8,-1,-1,-1,-1,-1],[-14,-1,667,668,669,670,671,672,673,674,-1,-1,-1,-1,-1],[20,740,750,760,770,780,788,797,804,812,-1,-1,-1,-1,-1],[-14,-1,-1,-1,-1,-1,-8,737,738,739,-1,-1,-1,-1,-1],[-1,22,-1,-1,-1,-1,-1,-1,-1,23,-1,-1,-1,-1,-1],[-15,-1,-15,-1,-1,-15,-16,-1,26,-1,-1,-1,-1,-1,-1],[-1,-1,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[30,34,44,53,62,38,80,90,97,105,-1,-1,-1,-1,-1],[-1,-8,-8,-8,31,32,33,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[35,-8,-8,36,-8,37,40,41,42,43,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-1,-8,-1,-1,-1,-1,-1],[71,39,72,73,74,75,76,77,78,79,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[45,-8,46,47,48,49,50,51,-8,52,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[54,-8,55,56,-8,57,58,59,60,61,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[63,-8,64,65,66,67,68,69,70,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[81,-8,82,83,84,85,86,87,88,89,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,91,92,93,94,95,96,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[98,-8,99,100,101,102,103,104,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[106,-8,107,108,109,110,111,112,113,114,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[116,-8,120,123,127,-8,131,136,141,145,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,117,-8,-8,118,119,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[121,-8,-8,122,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,124,-8,-8,125,-8,-8,126,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,128,-8,129,-8,130,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[132,-8,-8,133,-8,134,-8,135,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[137,-8,-8,138,139,-8,140,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,142,143,-8,-8,144,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,146,147,-8,-8,148,149,150,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-8,-8,152,158,163,-8,165,166,-1,170,-1,-1,-1,-1,-1],[153,-8,154,-8,155,-8,156,-1,-1,157,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,159,-8,160,-8,161,-8,162,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,164,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,167,-8,168,-8,-8,169,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1],[171,-8,172,-8,-8,173,-8,174,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[176,-8,180,184,189,-8,193,196,201,206,-1,-1,-1,-1,-1],[-1,-8,177,178,-8,179,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[181,-8,-8,-8,182,-8,183,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,185,-8,186,-8,187,-8,188,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,190,-8,191,-8,192,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[194,-8,-8,-8,-8,-1,-1,-1,-1,195,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,197,-8,-8,198,-8,199,-8,200,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,202,-8,203,-8,-8,204,-8,205,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,207,-8,208,-8,209,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[211,-8,216,219,222,-8,227,233,239,242,-1,-1,-1,-1,-1],[-1,-8,212,-8,213,-8,-8,214,215,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[217,-8,-8,-8,-8,218,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,220,-8,-8,-8,221,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,223,-8,-8,224,225,-8,226,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[228,-8,229,-8,230,231,-1,-1,-1,232,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[234,-8,-8,235,236,-8,237,-8,238,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,240,-8,-8,241,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,243,-8,244,-8,245,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,247,250,255,-8,259,261,-1,-1,-1,-1,-1,-1,-1],[248,-8,-8,-8,-8,-8,-8,-8,-1,249,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,251,-8,252,-8,253,-8,254,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,256,257,-8,-8,258,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[260,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,262,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,264,269,276,-8,281,282,288,-1,-1,-1,-1,-1,-1],[265,-8,266,267,-1,-1,-1,-1,-1,268,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[270,-8,271,272,-8,273,-8,274,-8,275,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,277,-8,-8,278,279,-8,280,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,283,284,-8,285,-8,-8,286,287,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,289,-8,290,291,-8,292,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[294,-8,295,301,307,-8,312,314,319,325,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[296,-8,297,-8,298,-8,299,-1,-8,300,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,302,-8,303,-8,304,-8,305,306,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[308,-8,309,-8,-8,310,-8,-8,311,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[313,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,315,-8,316,317,-8,318,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,320,321,-8,322,323,-1,324,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,326,327,-8,328,-8,329,-8,330,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,332,342,352,362,372,380,388,397,405,-1,-1,-1,-1,-1],[333,-1,334,335,336,337,338,339,340,341,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[343,-8,344,345,346,347,348,349,350,351,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[353,-8,354,355,356,357,358,359,360,361,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[363,-8,364,365,366,367,368,369,370,371,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[373,374,375,376,377,378,379,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,381,382,383,384,385,386,387,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[389,-8,390,391,392,393,394,395,-1,396,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[398,-8,399,400,401,402,403,-1,404,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[406,-8,407,408,409,410,411,412,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[414,422,432,442,451,461,471,481,489,498,-1,-1,-1,-1,-1],[-1,-1,415,416,417,418,419,420,421,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[423,-8,424,425,426,427,428,429,430,431,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[433,-8,434,435,436,437,438,439,440,441,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[443,-8,444,445,446,447,448,449,450,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[452,-8,453,454,455,456,457,458,459,460,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[462,-8,463,464,465,466,467,468,469,470,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[472,-8,473,474,475,476,477,478,479,480,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[482,-8,483,484,485,486,487,488,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[490,-8,491,492,493,494,495,496,497,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[499,-8,500,501,502,503,504,505,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[507,517,527,537,545,554,563,569,576,-8,-1,-1,-1,-1,-1],[508,-1,509,510,511,512,513,514,515,516,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[518,-8,519,520,521,522,523,524,525,526,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-1,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[528,-8,529,530,531,532,533,534,535,536,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[538,-8,539,540,541,542,-1,543,544,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[546,-8,547,548,549,550,551,552,553,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[555,-8,-1,556,557,558,559,560,561,562,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,564,-1,565,566,567,-1,-1,568,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,570,571,572,573,574,-1,575,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,577,578,579,580,581,582,583,584,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,593,594,595,596,597,598,599,600,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[602,-8,603,604,605,606,607,608,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[610,-8,611,612,613,614,615,616,617,618,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[620,-8,621,622,623,624,625,626,627,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[629,-8,630,631,632,633,634,635,636,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[638,-8,639,640,641,642,643,644,645,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[647,-8,648,649,650,651,652,653,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[655,-8,656,657,658,659,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[661,-8,-1,662,663,664,665,666,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[676,-8,677,678,679,680,681,682,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[684,-8,685,686,687,688,689,690,691,692,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[694,-8,695,696,697,-1,698,699,700,701,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[703,-8,704,705,706,707,708,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[710,-8,-1,711,712,713,714,715,716,717,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,719,720,-1,721,722,723,724,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[726,-8,-1,727,728,-1,729,-1,730,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[732,-8,733,-1,734,735,736,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1],[741,-8,742,743,744,745,746,747,748,749,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[751,-8,752,753,754,755,756,757,758,759,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[761,-8,762,763,764,765,766,767,768,769,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-1,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[771,-8,772,773,774,775,776,777,778,779,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[781,-8,782,783,784,785,786,787,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[789,-8,790,791,792,793,794,795,796,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[798,-8,799,800,801,-1,802,803,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[805,-8,806,807,808,809,810,811,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[813,-8,814,815,816,817,818,819,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1]]};
ilib.data.states_AU = {"states":[[5,8,-8,-8,-7,11,-1,-8,-8,-1,-1,-1,-1,1,-1],[2,14,-1,-1,-1,-1,-1,-1,-1,-1,-3,-1,-1,-1,-1],[3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13],[-15,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-4],[6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-4],[-1,-1,-1,-1,-1,-1,-1,-1,9,10,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-6,-1,-1,-1,-1,-1,-1],[12,-1,-1,-1,-1,13,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[15,16,19,31,34,-6,-1,-1,36,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-15,-1,-1,-1,-1,-1,-1,-1,-1],[17,-1,-15,-1,-6,-1,-1,-1,-1,18,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,20,21,22,24,27,-6,29,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,25],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,26],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[32,-1,-1,-1,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,35],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-5],[37,-1,-1,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-9]]};
ilib.data.states_GB = {"states":[[-13,23,22,10,-1,15,-1,6,17,-1,-1,-1,-1,1,-1],[2,3,-22,-22,-22,-22,-22,-22,-22,8,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13],[-1,7,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-9,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1],[-9,-9,-1,-1,-1,-9,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-11,-1,-1,-1,-1,-7,-7,-7,-7,-7,-1,-1,-1,-1,-1],[-1,-1,-15,-1,-1,-15,-15,-1,-15,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-22],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-15,-1,-1,-1,-1,-1],[11,-1,-1,12,13,-1,-1,14,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[16,-1,-1,-1,-1,-6,-6,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[18,-1,19,-1,20,-1,-1,21,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-6,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-6,-6,-6,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-6,-6,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-8,-8,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-1,25,24,26,27,28,29,80,91,30,-1,-1,-1,-1,-1],[31,-8,32,33,34,35,36,37,38,39,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[40,-8,41,42,43,44,45,46,47,49,-1,-1,-1,-1,-1],[50,-8,51,52,53,54,55,56,57,58,-1,-1,-1,-1,-1],[59,-8,60,62,64,65,66,67,68,69,-1,-1,-1,-1,-1],[70,-8,71,72,73,74,75,76,77,78,-1,-1,-1,-1,-1],[101,-8,102,103,104,106,107,108,109,110,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,48,-8,-8,-1,-1,-1,-1,-1],[-12,-12,-12,-8,-12,-12,-12,-12,-12,-12,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,61,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-12,-12,-8,-12,-12,-12,-12,-12,-12,-12,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,63,-1,-1,-1,-1,-1],[-12,-12,-12,-12,-8,-8,-8,-12,-12,-12,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,79,-8,-8,-1,-1,-1,-1,-1],[-12,-12,-12,-8,-8,-12,-12,-8,-12,-12,-1,-1,-1,-1,-1],[81,111,82,83,84,85,86,88,89,90,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,87,-8,-1,-1,-1,-1,-1],[-12,-1,-1,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[92,112,93,94,95,96,97,98,99,100,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,105,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-12,-12,-12,-12,-12,-12,-8,-12,-12,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1]]};
ilib.data.states_HK = {"states":[[-1,-6,-22,-22,-1,-7,-7,-7,-6,5,-1,-1,-1,1,-1],[2,4,-22,-22,-1,-7,-7,-7,-6,6,-3,-1,-1,-1,-1],[3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-7],[-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-7],[-1,-1,-15,-1,-1,-1,-1,-1,-1,-15,-1,-1,-1,-1,-1],[-1,-1,-15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]};
ilib.data.states_IE = {"states":[[-1,-8,32,46,33,35,37,38,40,39,-1,-1,-1,1,-1],[2,3,-22,-22,-22,-22,-22,-22,-22,5,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13],[-1,4,-1,9,12,13,-1,21,23,27,-1,-1,-1,-1,-1],[-1,-1,-15,-1,-6,-1,-15,-1,7,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-22],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-15,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-5],[-1,-9,-9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,14,-1,15,16,17,18,19,20,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-14],[-14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-14,-1,-1,-1,-1,-1,-1,-1,-1,-14,-1,-1,-1,-1,-1],[-14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,22,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[24,-1,-1,-1,-1,25,-1,-1,-1,26,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-6,-6,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[28,29,-1,-1,-1,-1,-1,-1,30,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[42,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[34,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[36,-8,-8,-8,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[44,-8,-1,-1,-8,-1,-6,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-6,45,41,-7,-7,-7,-7,-7,-7,-7,-1,-1,-1,-1,-1],[-1,-1,-7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,43,-1,-1,-1,-1,-1],[-1,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-6,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-6,-1,-1,-1,-1,-1,-1],[-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-1,-1,-1,-1,-1]]};
ilib.data.states_NZ = {"states":[[-1,8,11,-8,-8,14,-8,10,16,19,-1,-1,-1,1,-1],[2,3,-22,-22,-22,-22,-22,-22,-22,-22,-3,21,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13],[-1,4,5,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-15,-15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-6,-1,-1,-1,-1,-1,-1,9,-6,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-7,-7,-7,-7,-7,-7,-1,-7,12,-7,-1,-1,-1,-1,-1],[-7,-1,-1,-7,-1,-1,-1,-1,13,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-7,-1,-1,-1,-1,-1,-1,-1,-1,-1],[15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-6,-1,-1,-1,-1,-1,-1],[17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,22],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-9]]};
ilib.data.states_SG = {"states":[[-1,-1,-1,-22,-1,-1,-22,-22,16,-22,-1,-1,-1,1,-1],[2,5,-1,-22,-1,-1,-22,-22,18,20,-3,-1,-1,-1,-1],[-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4],[-1,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-4],[-1,-1,-1,6,-1,-1,8,10,12,14,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,11],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,13],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-14],[17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-22],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-22],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,21,-1,-1,-1,-1,-22],[-1,-1,-1,-15,-1,-15,-1,-1,-1,-15,-1,-1,-1,-1,-1]]};
ilib.data.states_US = {"states":[[-1,-1,7,9,11,13,15,17,19,21,-1,-1,-1,1,-1],[2,4,-1,-1,-1,-1,-1,-1,-1,-1,-3,-9,-9,-1,-21],[-4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[5,6,23,25,27,29,31,33,35,37,-1,-1,-1,-1,-13],[-1,-5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-9],[47,8,48,49,50,51,52,53,54,109,-1,-1,-1,-1,39],[-8,-6,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[55,10,56,57,58,59,60,110,61,111,-1,-1,-1,-1,40],[-8,-6,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[62,12,63,64,65,66,67,68,69,112,-1,-1,-1,-1,41],[-8,-6,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[70,14,71,72,73,74,75,76,77,113,-1,-1,-1,-1,42],[-8,-6,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[78,16,79,80,81,82,83,84,85,114,-1,-1,-1,-1,43],[-8,-6,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[86,18,87,88,89,90,91,92,93,115,-1,-1,-1,-1,44],[-8,-6,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[94,20,95,96,97,98,99,100,101,116,-1,-1,-1,-1,45],[-8,-6,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[102,22,103,104,105,106,117,107,108,118,-1,-1,-1,-1,46],[-8,-15,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,24],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,26],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,34],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,36],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,38],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1]]};
ilib.data.states_ES = {"states":[[-1,-1,-8,-8,-8,-11,-7,5,6,7,-1,-1,-1,1,-1],[2,3,-1,-1,-1,-1,-1,-1,-1,-1,-3,-1,-1,-1,-21],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-5,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-15,-1,-1,-1,-1,-1,-15,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-7],[-6,-6,8,-1,9,10,11,12,13,-1,-1,-1,-1,-1,-1],[-6,14,15,16,17,18,19,20,21,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1]]};
ilib.data.states_MX = {"states":[[-1,-1,11,18,26,36,39,49,9,65,-1,-1,-1,1,-1],[2,-7,-1,-1,-1,-1,-1,-1,-1,-1,-3,-1,-1,-1,-21],[-4,-13,-6,4,3,5,6,7,8,-4,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-7,-7,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-6,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[10,-8,59,60,61,-1,62,63,-1,64,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,12,13,14,-1,-1,15,16,17,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,19,20,-8,21,22,-1,23,24,25,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,27,28,29,30,31,32,33,34,35,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,37,38,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,40,41,42,43,44,45,46,47,48,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,50,51,52,53,54,55,56,57,58,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-1,66,67,68,-1,69,70,71,72,73,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1]]};
ilib.data.states_BE = {"states":[[-1,5,-8,-8,7,12,13,6,8,10,-1,-1,-1,1,-1],[2,3,-22,-22,-22,-22,-22,-22,-22,-22,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13],[-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-15,-1,-1,-1,-6,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-7,-6,-8,-1,-1,-1,-1,-1],[-6,-8,-6,-6,-1,-7,-1,-14,-6,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-7,-7,-7,-1,-1,-1,-1,-1],[9,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-6,-12,-12,-12,-12,-12,-12,-12,-12,-12,-1,-1,-1,-1,-1],[11,-12,-12,-12,-12,-12,-12,-12,-12,-12,-1,-1,-1,-1,-1],[-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1]]};
ilib.data.states_LU = {"states":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1],[2,3,5,-22,-22,-22,7,6,13,15,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,4,-16,-17,-1,-5,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-15,-15,-1,-1,-1,-1,-16,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-22],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-22],[8,-1,10,-1,-1,-1,11,-1,-1,12,-1,-1,-1,-1,-1],[-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-7,-1,-1,-1,-1,-1,-1,-7,-1,-1,-1,-1,-1,-1],[-1,-7,-1,-1,-1,-1,-1,-1,-7,-1,-1,-1,-1,-1,-1],[-1,-7,-1,-1,-1,-1,-1,-1,-7,-1,-1,-1,-1,-1,-1],[14,-6,-1,-6,-6,-6,-6,-6,-6,-6,-1,-1,-1,-1,-1],[-16,-17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[16,-1,-6,-6,-6,-6,-1,-6,-1,-6,-1,-1,-1,-1,-1],[-14,-14,-1,-1,-1,-14,-1,-1,-6,-6,-1,-1,-1,-1,-1]]};
ilib.data.states_IT = {"states":[[3,55,-1,-7,-6,-1,-1,63,65,-1,-1,-1,-1,1,-1],[2,53,-1,-1,-1,-1,-1,-1,-1,-1,-3,-1,-1,-1,-21],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-21],[-1,4,-8,11,18,25,-8,32,39,45,-1,-1,-1,-1,-1],[-8,-8,5,6,7,-8,8,9,10,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,12,13,14,-8,15,16,17,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,19,20,21,-8,22,23,24,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,26,27,28,-8,29,30,31,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,33,34,35,-8,36,37,38,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-8,-8,40,41,-1,-8,42,43,44,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,46,47,48,49,50,51,52,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-15,-15,-1,-15,-1,-15,-15,-1,-1,-1,-1,-1,-1],[-1,-1,56,-1,60,58,61,62,-16,-16,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,57],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-18],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,59],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-18],[-1,-1,-1,-1,-14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-14,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-11,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,64],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-17],[66,-1,-1,-1,67,-1,-1,-1,-1,68,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-14],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-14],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-14]]};
ilib.data.states_KR = {"states":[[-1,16,-8,10,11,12,13,14,15,-1,-1,-1,-1,1,-1],[2,23,-22,-22,-22,-22,-22,-22,-22,-22,-3,-9,-9,-1,-21],[3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13],[-1,-4,-4,4,-1,-4,-4,6,-4,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-4,-1,-1,-1,-1,-1,-1,-1,-1,-1],[7,-1,8,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-4,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-6,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-5,-5,-5,-5,21,-5,-1,-1,-1,-1,-1,-1,-1,-1],[-7,-7,-7,17,19,-7,-7,-7,-7,-7,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-7],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,20],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-7],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,22],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-5],[24,25,26,27,35,-1,-1,-1,36,-1,-1,-1,-1,-1,-1],[-6,-6,-1,-1,-1,-6,-6,-6,-6,-6,-1,-1,-1,-1,-1],[-1,-6,-15,-6,-1,-6,-6,-6,-6,-15,-1,-1,-1,-1,-1],[-6,-6,-15,-6,-1,-6,-1,-6,-6,-6,-1,-1,-1,-1,-1],[28,-1,-6,29,-6,30,31,32,33,34,-1,-1,-1,-1,-1],[-6,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-6,-6,-6,-1,-6,-6,-6,-6,-15,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-6,-1,-6,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-6,-6,-1,-1,-6,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-6,-1,-6,-1,-1,-1,-1,-1],[-1,-1,-6,-1,-1,-6,-1,-1,-6,-6,-1,-1,-1,-1,-1],[-6,-6,-1,-1,-1,-1,-1,-1,-6,-6,-1,-1,-1,-1,-1],[-1,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-6,-1,-1,-1,-1,-1,-6,-1,-1,-1,-1,-1,-1]]};
ilib.data.states_CN = {"states":[[-1,16,25,40,45,22,27,29,36,32,-1,-1,-1,1,-1],[2,3,-1,-1,-1,-1,-1,-1,-1,6,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13],[-1,4,5,11,13,14,-1,-1,15,-1,-1,-1,-1,-1,-1],[-15,-1,-1,-1,-6,-1,-1,-1,-1,-15,-1,-1,-1,-1,-1],[-15,8,-15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-6,-1,-1,-1,-1,-1],[-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-14,-1,-1,-1,-1,-1,-1,-1],[-1,-14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-7,-7,-7,-7,12,-7,-7,-7,-7,-7,-1,-1,-1,-1,-1],[-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-7,-1,-7,-1,-1,-1,-1,-1,-1,-1],[-7,-7,-7,-7,-1,-7,-7,-7,-7,-7,-1,-1,-1,-1,-1],[-7,-1,-7,-1,-1,-7,-7,-7,-7,-7,-1,-1,-1,-1,-1],[-8,-1,-1,17,19,20,-1,-1,21,-1,-1,-1,-1,-1,-1],[-7,-7,-7,-7,18,-7,-7,-7,-7,-7,-1,-1,-1,-1,-1],[-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-7,-1,-7,-1,-1,-1,-1,-1,-1,-1],[-7,-7,-7,-7,-1,-7,-7,-7,-7,-7,-1,-1,-1,-1,-1],[-7,-1,-7,-1,-1,-7,-7,-7,-7,-7,-1,-1,-1,-1,-1],[-1,52,53,65,66,23,24,81,82,26,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,67,-1,-1,28,-1,-1,78,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[54,38,39,48,49,30,31,35,-1,55,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-1,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1],[71,68,-1,33,34,60,-1,61,-1,72,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[73,62,63,64,-1,37,-1,79,80,50,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,41,-1,42,69,70,-1,43,-1,44,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,56,57,51,-1,46,47,58,59,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,74,-1,-1,-1,75,76,77,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-8,-1,-1,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]};
ilib.data.states_NL = {"states":[[-1,3,8,12,16,21,-7,28,29,31,-1,-1,-1,1,-1],[2,33,-1,-1,-1,-1,-1,-1,-1,-1,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-13],[-8,4,-1,-8,-6,-8,5,6,7,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-1,9,-8,-8,10,-8,-1,-1,11,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-8,13,14,-8,15,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,17,-1,-8,-1,-8,-8,18,19,20,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-8,22,23,-8,24,-8,25,26,-8,27,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[30,-1,-6,-1,-6,-6,-1,-6,-6,-1,-1,-1,-1,-1,-1],[-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-14,-1,-1,-1,-1,-1,-14,-1,-1,-14,-1,-1,-1,-1,-1],[-6,34,35,39,48,-1,-16,-1,-16,-1,-1,-1,-1,-1,-1],[-1,-1,-15,-1,-1,-1,-15,-1,-1,-1,-1,-1,-1,-1,-1],[36,-1,-1,37,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-6,-6,-6,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-6,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[40,-6,-6,41,42,43,44,45,46,47,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6],[-1,-1,-1,-16,-16,-16,-16,-16,-16,-16,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16],[49,-1,-1,-1,-1,51,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-6,-6,-6,-6,-6,-6,-1,-6,50,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-6,-1,-1,-1,-1,-1,-1],[-1,-6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]};
ilib.data.states_XX = {"states":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1],[2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]};
ilib.data.idd = {"states":[[-1,-10,1,9,13,15,18,-10,22,27,-1,-1,-1,-1,-1],[-10,2,3,4,5,6,7,-10,-10,8,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,10,-10,11,12,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,14,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[16,-10,-10,-10,-10,-10,-10,-10,-10,17,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,19,20,21,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[23,-10,-10,-10,-10,24,-10,25,26,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,28,29,-10,30,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1],[-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-1,-1,-1,-1,-1]]};
ilib.data.mnc = {"states":[[1,-1,12,26,5,62,16,43,-1,866,-1,-1,-1,-1,-1],[2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[76,6,82,397,425,146,194,85,-1,-1,-1,-1,-1,-1,-1],[562,-1,7,668,523,464,437,683,401,456,-1,-1,-1,-1,-1],[8,-1,9,-1,10,11,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[98,20,411,72,261,95,289,13,56,304,-1,-1,-1,-1,-1],[478,-1,406,-1,353,-1,14,-1,497,-1,-1,-1,-1,-1,-1],[15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[17,106,150,23,142,121,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,252,18,519,708,471,282,634,501,-1,-1,-1,-1,-1],[19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,452,21,664,-1,349,-1,118,215,-1,-1,-1,-1,-1],[22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[226,24,335,638,670,605,264,653,236,443,-1,-1,-1,-1,-1],[25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[153,315,-1,39,33,109,27,243,-1,-1,-1,-1,-1,-1,-1],[619,-1,534,60,79,28,238,-1,218,-1,-1,-1,-1,-1,-1],[29,-1,-1,-1,-1,-1,-1,-1,31,-1,-1,-1,-1,-1,-1],[-1,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[312,-1,88,-1,34,-1,183,-1,129,-1,-1,-1,-1,-1,-1],[35,-1,-1,-1,-1,-1,-1,-1,-1,37,-1,-1,-1,-1,-1],[-1,-1,-1,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[588,-1,-1,-1,507,-1,-1,-1,40,-1,-1,-1,-1,-1,-1],[41,423,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,421,-1,-1,-8,-1,422,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[103,212,44,115,249,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,45,-1,124,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[46,-1,-1,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,47,48,-1,-1,-1,-1,49,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,51,52,53,54,55,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[220,-1,284,57,138,-1,710,-1,266,286,-1,-1,-1,-1,-1],[58,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[63,246,134,540,209,509,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,491,-1,-1,64,-1,-1,-1,-1,-1,-1,-1,-1,-1],[65,66,67,68,-1,-1,-1,69,70,71,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[223,647,73,-1,330,-1,-1,-1,229,-1,-1,-1,-1,-1,-1],[74,75,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[77,440,112,-1,356,367,-1,-1,-1,-1,-1,-1,-1,-1,-1],[78,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,80,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,81,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[632,860,560,567,726,408,83,590,514,527,-1,-1,-1,-1,-1],[84,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[86,-1,493,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[87,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,89,91,93,-1,-1,-1,-1,-1,-1],[90,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,92,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,94,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[598,-1,-1,-1,-1,723,-1,96,-1,512,-1,-1,-1,-1,-1],[97,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[732,-1,301,-1,529,-1,99,-1,275,-1,-1,-1,-1,-1,-1],[100,101,102,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,104,-1,328,-1,254,-1,341,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,105,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1],[495,333,419,140,549,699,107,504,468,641,-1,-1,-1,-1,-1],[108,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[110,-1,307,-1,-1,-1,607,-1,612,-1,-1,-1,-1,-1,-1],[111,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,113,-1,-1,-1,-1,-1,114,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[190,-1,198,-1,856,-1,116,-1,337,-1,-1,-1,-1,-1,-1],[117,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[119,-1,-1,-1,-1,-1,-1,-1,-1,120,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[488,466,122,674,204,659,-1,259,-1,-1,-1,-1,-1,-1,-1],[123,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[125,126,127,128,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,130,-1,-1,-1,132,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,131,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,133,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[694,-1,-1,-1,-1,644,-1,-1,135,-1,-1,-1,-1,-1,-1],[136,137,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[139,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[141,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[692,719,143,521,-1,862,486,592,864,525,-1,-1,-1,-1,-1],[144,-1,-1,-1,-1,-1,-1,-1,145,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[450,-1,858,-1,345,482,147,460,-1,-1,-1,-1,-1,-1,-1],[148,149,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[297,551,188,186,151,181,630,257,280,206,-1,-1,-1,-1,-1],[152,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,154,-1,-1,-1,-1,-1,617,-1,-1,-1,-1,-1,-1],[-1,-1,155,158,163,165,168,174,179,-1,-1,-1,-1,-1,-1],[-1,-1,156,-1,-1,-1,-1,-1,-1,157,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,159,160,161,162,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,164,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[166,167,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,169,170,-1,171,172,-1,-1,173,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[175,176,177,-1,-1,-1,-1,-1,178,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,180,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[182,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,184,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,185,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[187,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[189,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[191,192,-1,-1,-1,-1,-1,-1,-1,193,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[195,-1,-1,-1,-1,-1,685,447,-1,-1,-1,-1,-1,-1,-1],[196,-1,197,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[199,201,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[200,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[202,203,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[205,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[207,208,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[652,854,268,-1,-1,445,538,-1,210,625,-1,-1,-1,-1,-1],[211,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[545,-1,213,-1,569,-1,575,-1,-1,-1,-1,-1,-1,-1,-1],[214,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[216,217,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[219,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[221,222,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[224,-1,-1,-1,-1,-1,-1,-1,-1,225,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1],[227,-1,-1,-1,-1,-1,-1,-1,228,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1],[230,231,232,233,234,-1,-1,235,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[237,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[239,241,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,240,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,242,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[244,-1,339,-1,705,-1,714,-1,-1,-1,-1,-1,-1,-1,-1],[245,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[391,-1,-1,-1,247,578,-1,-1,-1,-1,-1,-1,-1,-1,-1],[248,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[250,-1,-1,-1,573,-1,672,-1,849,-1,-1,-1,-1,-1,-1],[251,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[253,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[255,256,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[258,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[260,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[676,-1,557,-1,270,-1,476,462,262,-1,-1,-1,-1,-1,-1],[263,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[265,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[267,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[269,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[271,272,273,-1,-1,-1,-1,-1,-1,274,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[276,277,278,-1,-1,-1,-1,-1,279,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[281,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[283,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[285,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,287,-1,288,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[582,-1,290,-1,-1,-1,299,-1,585,-1,-1,-1,-1,-1,-1],[291,292,-1,-1,-1,-1,293,294,-1,295,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[296,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[298,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[300,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[302,303,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[305,-1,628,454,484,473,-1,517,-1,-1,-1,-1,-1,-1,-1],[306,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[308,310,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,309,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,311,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[313,-1,314,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[316,323,-1,-1,-1,-1,846,-1,-1,-1,-1,-1,-1,-1,-1],[317,319,752,321,326,780,790,800,807,814,-1,-1,-1,-1,-1],[736,737,738,318,739,-1,740,741,742,743,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[744,745,746,-1,320,747,748,749,750,751,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[763,764,765,766,767,768,-1,322,769,770,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[823,834,324,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,845,-1,-1,-1,325,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[771,772,773,774,775,776,777,327,778,779,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[329,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[332,728,729,730,-1,331,-1,731,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1],[334,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[336,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[338,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[340,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[342,-1,-1,343,344,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[346,347,348,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[350,-1,-1,351,-1,-1,-1,352,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[354,355,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[357,358,359,360,361,362,363,364,365,366,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[368,369,-1,-1,-1,373,374,375,378,388,-1,-1,-1,-1,-1],[-1,-1,370,371,372,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,376,-1,-1,-1,377,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[379,380,381,383,384,385,386,387,382,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,389,390,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1],[392,393,394,-1,-1,-1,-1,-1,395,396,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-1,398,-1,852,-1,690,458,712,-1,-1,-1,-1,-1,-1],[-1,399,-1,400,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[404,-1,402,403,405,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[407,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1],[409,-1,-1,-1,-1,-1,-1,410,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[636,-1,412,-1,-1,-1,595,-1,680,-1,-1,-1,-1,-1,-1],[413,414,-1,415,-1,-1,-1,416,417,418,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1],[420,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,424,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[426,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[427,428,429,430,431,432,433,434,435,436,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[438,-1,-1,-1,-1,-1,-1,439,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[441,-1,-1,-1,-1,-1,-1,442,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[444,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[446,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,448,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,449,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[451,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1],[453,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,455,-1,650,651,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[457,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[459,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1],[461,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[463,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[465,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[467,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[469,-1,470,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[472,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[474,-1,-1,-1,-1,-1,-1,475,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[477,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[479,-1,-1,-1,-1,-1,-1,480,-1,481,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[483,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[485,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[487,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[489,490,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,492,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1],[494,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[496,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[498,-1,499,-1,-1,-1,-1,500,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[502,503,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[505,506,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[508,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[510,-1,564,717,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[511,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[513,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,516,515,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[518,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[520,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[522,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[524,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[526,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[528,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[530,531,532,-1,-1,-1,533,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,535,536,-1,-1,537,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[539,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[541,-1,-1,-1,-1,-1,-1,571,-1,701,-1,-1,-1,-1,-1],[542,543,544,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,546,547,-1,-1,-1,548,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[550,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,552,553,554,555,556,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[558,-1,559,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[561,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[563,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[565,-1,-1,-1,-1,-1,-1,-1,566,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[568,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[570,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[572,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[574,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[576,577,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[579,580,-1,-1,-1,-1,-1,-1,581,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[583,584,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[586,-1,587,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,589,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[591,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[593,594,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[596,597,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[599,600,601,602,603,-1,-1,-1,-1,604,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-1,-1,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,606,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[608,610,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,609,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,611,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[613,615,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,614,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,616,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[618,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[620,622,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,621,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[623,624,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[626,-1,627,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[629,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[631,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[633,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[635,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[637,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[639,640,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[642,-1,643,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[645,646,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[648,-1,-1,-1,-1,-1,-1,-1,-1,649,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[654,655,656,657,-1,-1,-1,-1,658,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[660,661,662,663,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[665,666,667,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[669,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[671,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[673,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,675,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[677,678,679,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[681,-1,-1,-1,-1,682,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[684,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[686,687,-1,-1,-1,-1,-1,-1,688,689,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1],[691,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[693,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[695,696,697,-1,-1,-1,-1,-1,-1,698,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[700,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[702,-1,-1,-1,703,-1,-1,-1,704,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-1,706,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,707,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[709,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[711,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[713,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,715,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,716,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[718,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[720,721,722,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[724,-1,725,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[727,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[733,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,734,735,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-12,-12,-12,-8,-12,-12,-12,-12,-12,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[753,754,755,756,757,758,759,760,761,762,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[781,782,783,784,785,-1,786,787,788,789,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,791,792,793,794,795,796,797,798,799,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,801,802,-1,803,804,805,806,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[808,-1,-1,809,-1,810,-1,811,812,813,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[815,816,-1,-1,817,818,819,820,821,822,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[824,825,826,827,828,829,830,831,832,833,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[835,836,837,838,839,840,841,842,843,844,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[847,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,848,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[850,851,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[853,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1],[855,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[857,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[859,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1],[861,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[863,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[865,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[867,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,868,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[869,870,871,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1]]};
/*
 * phonenum.js - Represent a phone number.
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js
locale.js 
localeinfo.js
phone/numplan.js
phone/phoneloc.js
phone/handler.js
*/

// !data states idd mnc

/**
 * @class
 * Create a new phone number instance that parses the phone number parameter for its 
 * constituent parts, and store them as separate fields in the returned object.
 * 
 * The options object may include any of these properties:
 * 
 * <ul>
 * <li><i>locale</i> The locale with which to parse the number. This gives a clue as to which
 * numbering plan to use.
 * <li><i>mcc</i> The mobile carrier code (MCC) associated with the carrier that the phone is 
 * currently connected to, if known. This also can give a clue as to which numbering plan to
 * use
 * <li>onLoad - a callback function to call when this instance is fully 
 * loaded. When the onLoad option is given, this class will attempt to
 * load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two.
 * <li>sync - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while.
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * This function is locale-sensitive, and will assume any number passed to it is
 * appropriate for the given locale. If the MCC is given, this method will assume
 * that numbers without an explicit country code have been dialled within the country
 * given by the MCC. This affects how things like area codes are parsed. If the MCC
 * is not given, this method will use the given locale to determine the country
 * code. If the locale is not explicitly given either, then this function uses the 
 * region of current locale as the default.<p>
 * 
 * The input number may contain any formatting characters for the given locale. Each 
 * field that is returned in the json object is a simple string of digits with
 * all formatting and whitespace characters removed.<p>
 * 
 * The number is decomposed into its parts, regardless if the number
 * contains formatting characters. If a particular part cannot be extracted from given 
 * number, the field will not be returned as a field in the object. If no fields can be
 * extracted from the number at all, then all digits found in the string will be 
 * returned in the subscriberNumber field. If the number parameter contains no 
 * digits, an empty object is returned.<p>
 * 
 * This instance can contain any of the following fields after parsing is done:
 * 
 * <ul>
 * <li>vsc - if this number starts with a VSC (Vertical Service Code, or "star code"), this field will contain the star and the code together
 * <li>iddPrefix - the prefix for international direct dialing. This can either be in the form of a plus character or the IDD access code for the given locale
 * <li>countryCode - if this number is an international direct dial number, this is the country code
 * <li>cic - for "dial-around" services (access to other carriers), this is the prefix used as the carrier identification code
 * <li>emergency - an emergency services number
 * <li>mobilePrefix - prefix that introduces a mobile phone number
 * <li>trunkAccess - trunk access code (long-distance access)
 * <li>serviceCode - like a geographic area code, but it is a required prefix for various services
 * <li>areaCode - geographic area codes
 * <li>subscriberNumber - the unique number of the person or company that pays for this phone line
 * <li>extension - in some countries, extensions are dialed directly without going through an operator or a voice prompt system. If the number includes an extension, it is given in this field.
 * <li>invalid - this property is added and set to true if the parser found that the number is invalid in the numbering plan for the country. This method will make its best effort at parsing, but any digits after the error will go into the subscriberNumber field
 * </ul>
 * 
 * The following rules determine how the number is parsed:
 * 
 * <ol>
 * <li>If the number starts with a character that is alphabetic instead of numeric, do
 * not parse the number at all. There is a good chance that it is not really a phone number.
 * In this case, an empty instance will be returned.
 * <li>If the phone number uses the plus notation or explicitly uses the international direct
 * dialing prefix for the given locale, then the country code is identified in 
 * the number. The rules of given locale are used to parse the IDD prefix, and then the rules
 * of the country in the prefix are used to parse the rest of the number.
 * <li>If a country code is provided as an argument to the function call, use that country's
 * parsing rules for the number. This is intended for programs like a Contacts application that 
 * know what the country is of the person that owns the phone number and can pass that on as 
 * a hint.
 * <li>If the appropriate locale cannot be easily determined, default to using the rules 
 * for the current user's region.
 * </ol>
 * 
 * Example: parsing the number "+49 02101345345-78" will give the following properties in the
 * resulting phone number instance:
 * 
 * <pre>
 *      {
 *        iddPrefix: "+",
 *        countryCode: "49",
 *        areaCode: "02101",
 *        subscriberNumber: "345345",
 *        extension: "78"
 *      }
 * </pre>
 *  
 * Note that in this example, because international direct dialing is explicitly used 
 * in the number, the part of this number after the IDD prefix and country code will be 
 * parsed exactly the same way in all locales with German rules (country code 49).
 *  
 * Regions currently supported are:
 *  
 * <ul>
 * <li>NANP (North American Numbering Plan) countries - USA, Canada, Bermuda, various Caribbean nations
 * <li>UK
 * <li>Republic of Ireland
 * <li>Germany
 * <li>France
 * <li>Spain
 * <li>Italy
 * <li>Mexico
 * <li>India
 * <li>People's Republic of China
 * <li>Netherlands
 * <li>Belgium
 * <li>Luxembourg
 * <li>Australia
 * <li>New Zealand
 * <li>Singapore
 * <li>Korea
 * </ul>
 * 
 * @constructor
 * @param {!string|ilib.PhoneNumber} number A free-form phone number to be parsed, or another phone
 * number instance to copy
 * @param {Object=} options options that guide the parser in parsing the number
 */
ilib.PhoneNumber = function(number, options) {
	var stateData,
		regionSettings;

	this.sync = true;
	this.loadParams = {};
	
	if (!number || (typeof number === "string" && number.length === 0)) {
		return this;
	}

	if (options) {
		if (typeof(options.sync) === 'boolean') {
			this.sync = options.sync;
		}

		if (options.loadParams) {
			this.loadParams = options.loadParams;
		}

		if (typeof(options.onLoad) === 'function') {
			/** @type {function(ilib.PhoneNumber)} */
			this.onLoad = options.onLoad;
		}
	}

	if (typeof number === "object") {
		/** @type {string|undefined} */
		this.vsc = number.vsc;

		/** @type {string} */
		this.iddPrefix = number.iddPrefix;
		
		/** @type {string|undefined} */
		this.countryCode = number.countryCode;
		
		/** @type {string|undefined} */
		this.trunkAccess = number.trunkAccess;
		
		/** @type {string|undefined} */
		this.cic = number.cic;
		
		/** @type {string|undefined} */
		this.emergency = number.emergency;
		
		/** @type {string|undefined} */
		this.mobilePrefix = number.mobilePrefix;
		
		/** @type {string|undefined} */
		this.serviceCode = number.serviceCode;
		
		/** @type {string|undefined} */
		this.areaCode = number.areaCode;
		
		/** @type {string|undefined} */
		this.subscriberNumber = number.subscriberNumber;
		
		/** @type {string|undefined} */
		this.extension = number.extension;
		
		/**
		 * @protected
		 * @type {boolean} 
		 */
		this.invalid = number.invalid;

		if (number.plan && number.locale) {
			/** 
			 * @protected
			 * @type {ilib.NumPlan} 
			 */
			this.plan = number.plan;
			
			/** 
			 * @protected
			 * @type {ilib.Locale.PhoneLoc} 
			 */
			this.locale = number.locale;
	
			/** 
			 * @protected
			 * @type {ilib.NumPlan} 
			 */
			this.destinationPlan = number.destinationPlan;
			
			/** 
			 * @protected
			 * @type {ilib.Locale.PhoneLoc} 
			 */
			this.destinationLocale = number.destinationLocale;
	
			if (options && typeof(options.onLoad) === 'function') {
				options.onLoad(this);
			}
			return;
		}
	}

	new ilib.Locale.PhoneLoc({
		locale: options && options.locale,
		mcc: options && options.mcc,
		sync: this.sync,
		loadParams: this.loadParams,
		onLoad: ilib.bind(this, function(loc) {
			this.locale = this.destinationLocale = loc;
			new ilib.NumPlan({
				locale: this.locale,
				sync: this.sync,
				loadParms: this.loadParams,
				onLoad: ilib.bind(this, function (plan) {
					this.plan = this.destinationPlan = plan;
			
					if (typeof number === "object") {
						// the copy constructor code above did not find the locale 
						// or plan before, but now they are loaded, so we can return 
						// already without going further
						return;
					}
					ilib.loadData({
						name: "states.json",
						object: ilib.PhoneNumber,
						locale: this.locale,
						sync: this.sync,
						loadParams: ilib.merge(this.loadParams, {
							returnOne: true
						}),
						callback: ilib.bind(this, function (stdata) {
							if (!stdata) {
								stdata = {"states" : [[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1],[2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]};
							}
		
							stateData = stdata;

							regionSettings = {
								stateData: stateData,
								plan: plan,
								handler: ilib._handlerFactory(this.locale, plan)
							};
							
							// use ^ to indicate the beginning of the number, because certain things only match at the beginning
							number = "^" + number.replace(/\^/g, '');
							number = ilib.PhoneNumber._stripFormatting(number);

							this._parseNumber(number, regionSettings, options);
						})
					});
				})
			});
		})
	});
};

/**
 * Parse an International Mobile Subscriber Identity (IMSI) number into its 3 constituent parts:
 * 
 * <ol>
 * <li>mcc - Mobile Country Code, which identifies the country where the phone is currently receiving 
 * service.
 * <li>mnc - Mobile Network Code, which identifies the carrier which is currently providing service to the phone 
 * <li>msin - Mobile Subscription Identifier Number. This is a unique number identifying the mobile phone on 
 * the network, which usually maps to an account/subscriber in the carrier's database.
 * </ol>
 * 
 * Because this function may need to load data to identify the above parts, you can pass an options
 * object that controls how the data is loaded. The options may contain any of the following properties:
 *
 * <ul>
 * <li>onLoad - a callback function to call when the parsing is done. When the onLoad option is given, 
 * this method will attempt to load the locale data using the ilib loader callback. When it is done
 * (even if the data is already preassembled), the onLoad function is called with the parsing results
 * as a parameter, so this callback can be used with preassembled or dynamic, synchronous or 
 * asynchronous loading or a mix of the above.
 * <li>sync - tell whether to load any missing locale data synchronously or asynchronously. If this 
 * option is given as "false", then the "onLoad" callback must be given, as the results returned from 
 * this constructor will not be usable for a while.
 * <li><i>loadParams</i> - an object containing parameters to pass to the loader callback function 
 * when locale data is missing. The parameters are not interpretted or modified in any way. They are 
 * simply passed along. The object may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 *
 * @static
 * @param {string} imsi IMSI number to parse
 * @param {Object} options options controlling the loading of the locale data
 * @return {{mcc:string,mnc:string,msin:string}|undefined} components of the IMSI number, when the locale data
 * is loaded synchronously, or undefined if asynchronous
 */
ilib.PhoneNumber.parseImsi = function(imsi, options) {
	var sync = true,
		loadParams = {},
		fields = {};
	
	if (!imsi) {
		return undefined;
	}

	if (options) {
		if (typeof(options.sync) !== 'undefined') {
			sync = (options.sync == true);
		}
		
		if (options.loadParams) {
			loadParams = options.loadParams;
		}
	}	

	if (ilib.data.mnc) {
		fields = ilib.PhoneNumber._parseImsi(ilib.data.mnc, imsi);
		
		if (options && typeof(options.onLoad) === 'function') {
			options.onLoad(fields);
		}
	} else {
		ilib.loadData({
			name: "mnc.json", 
			object: ilib.PhoneNumber, 
			nonlocale: true, 
			sync: sync, 
			loadParams: loadParams, 
			callback: ilib.bind(this, function(data) {
				ilib.data.mnc = data;
				fields = ilib.PhoneNumber._parseImsi(data, imsi);
				
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(fields);
				}
			})
		});
	}
	return fields;
};


/**
 * @static
 * @protected
 */
ilib.PhoneNumber._parseImsi = function(data, imsi) {
	var ch, 
		i,
		stateTable, 
		end, 
		handlerMethod,
		state = 0,
		newState,
		fields = {};
	
	stateTable = data;
	if (!stateTable) {
		// can't parse anything
		return undefined;
	}
	i = 0;
	while ( i < imsi.length ) {
		ch = ilib.PhoneNumber._getCharacterCode(imsi.charAt(i));
		// console.info("parsing char " + imsi.charAt(i) + " code: " + ch);
		if (ch >= 0) {
			newState = stateTable.states[state][ch];
			
			if (newState < 0) {
				// reached a final state. First convert the state to a positive array index
				// in order to look up the name of the handler function name in the array
				state = newState;
				newState = -newState - 1;
				handlerMethod = ilib.PhoneNumber._states[newState];
				// console.info("reached final state " + newState + " handler method is " + handlerMethod + " and i is " + i);

				// deal with syntactic ambiguity by using the "special" end state instead of "area"
				if ( handlerMethod === "area" ) {
					end = i+1;
				} else if ( handlerMethod === "special" ) {
					end = i;
				} else {
					// unrecognized imsi, so just assume the mnc is 3 digits
					end = 6;
				}
				
				fields.mcc = imsi.substring(0,3);
				fields.mnc = imsi.substring(3,end);
				fields.msin = imsi.substring(end);

				break;
			} else {
				// console.info("recognized digit " + optionalch + " continuing...");
				// recognized digit, so continue parsing
				state = newState;
				i++;
			}
		} else if ( ch === -1 ) {
			// non-transition character, continue parsing in the same state
			i++;
		} else {
			// should not happen
			// console.info("skipping character " + ch);
			// not a digit, plus, pound, or star, so this is probably a formatting char. Skip it.
			i++;
		}
	}
		
	if ( state > 0 ) {
		if ( i >= imsi.length && i >= 6 ) {
			// we reached the end of the imsi, but did not finish recognizing anything. 
			// Default to last resort and assume 3 digit mnc
			fields.mcc = imsi.substring(0,3);
			fields.mnc = imsi.substring(3,6);
			fields.msin = imsi.substring(6);
		} else {
			// unknown or not enough characters for a real imsi 
			fields = undefined;
		}
	}
		
	// console.info("Globalization.Phone.parseImsi: final result is: " + JSON.stringify(fields));
	return fields;
};

/**
 * @static
 * @private
 */
ilib.PhoneNumber._stripFormatting = function(str) {
	var ret = "";
	var i;

	for (i = 0; i < str.length; i++) {
		if (ilib.PhoneNumber._getCharacterCode(str.charAt(i)) >= -1) {
			ret += str.charAt(i);
		}
	}
	return ret;
};

/**
 * @static
 * @protected
 */
ilib.PhoneNumber._getCharacterCode = function(ch) {
	if (ch >= '0' && ch <= '9') {
			return ch - '0';
		}
	switch (ch) {
	case '+':
		return 10;
	case '*':
		return 11;
	case '#':
		return 12;
	case '^':
		return 13;
	case 'p':		// pause chars
	case 'P':
	case 't':
	case 'T':
	case 'w':
	case 'W':
		return -1;
	case 'x':
	case 'X':		// extension char
		return -1;
	}
	return -2;
};

/**
 * @private
 */
ilib.PhoneNumber._states = [
	"none",
	"unknown",
	"plus",
	"idd",
	"cic",
	"service",
	"cell",
	"area",
	"vsc",
	"country",
	"personal",
	"special",
	"trunk",
	"premium",
	"emergency",
	"service2",
	"service3",
	"service4",
	"cic2",
	"cic3",
	"start",
	"local"
];

/**
 * @private
 */
ilib.PhoneNumber._fieldOrder = [
	"vsc",
	"iddPrefix",
	"countryCode",
	"trunkAccess",
	"cic",
	"emergency",
	"mobilePrefix",
	"serviceCode",
	"areaCode",
	"subscriberNumber",
	"extension"
];

ilib.PhoneNumber.prototype = {
	/**
	 * @protected
	 * @param {string} number
	 * @param {Object} regionData
	 * @param {Object} options
	 * @param {string} countryCode
	 */
	_parseOtherCountry: function(number, regionData, options, countryCode) {
		new ilib.Locale.PhoneLoc({
			locale: this.locale,
			countryCode: countryCode,
			sync: this.sync,
			loadParms: this.loadParams,
			onLoad: ilib.bind(this, function (loc) {
				/*
				 * this.locale is the locale where this number is being parsed,
				 * and is used to parse the IDD prefix, if any, and this.destinationLocale is 
				 * the locale of the rest of this number after the IDD prefix.
				 */
				/** @type {ilib.Locale.PhoneLoc} */
				this.destinationLocale = loc;

				ilib.loadData({
					name: "states.json",
					object: ilib.PhoneNumber,
					locale: this.destinationLocale,
					sync: this.sync,
					loadParams: ilib.merge(this.loadParams, {
						returnOne: true
					}),
					callback: ilib.bind(this, function (stateData) {
						if (!stateData) {
							stateData = {"states" : [[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1],[2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]};
						}
						
						new ilib.NumPlan({
							locale: this.destinationLocale,
							sync: this.sync,
							loadParms: this.loadParams,
							onLoad: ilib.bind(this, function (plan) {
								/*
								 * this.plan is the plan where this number is being parsed,
								 * and is used to parse the IDD prefix, if any, and this.destinationPlan is 
								 * the plan of the rest of this number after the IDD prefix in the 
								 * destination locale.
								 */
								/** @type {ilib.NumPlan} */
								this.destinationPlan = plan;

								var regionSettings = {
									stateData: stateData,
									plan: plan,
									handler: ilib._handlerFactory(this.destinationLocale, plan)
								};
								
								// recursively call the parser with the new states data
								// to finish the parsing
								this._parseNumber(number, regionSettings, options);
							})
						});
					})
				});
			})
		});
	},
	
	/**
	 * @protected
	 * @param {string} number
	 * @param {Object} regionData
	 * @param {Object} options
	 */
	_parseNumber: function(number, regionData, options) {
		var stateData,
			i, ch,
			regionSettings,
			state = 0, //begin state
			newState,
			dot,
			handlerMethod,
			result,
			loadName,
			loadLocale;

		regionSettings = regionData;
		stateData = regionSettings.stateData;
		dot = 14; // special transition which matches all characters. See AreaCodeTableMaker.java

		i = 0;
		while (i < number.length) {
			ch = ilib.PhoneNumber._getCharacterCode(number.charAt(i));
			if (ch >= 0) {
				newState = stateData.states[state][ch];
	
				if (newState === -1 && stateData.states[state][dot] !== -1 ) {
					// check if this character can match the dot instead
					newState = stateData.states[state][dot];
					//console.log("char " + ch + " doesn't have a transition. Using dot to transition to state " + newState);
				}
	
				if (newState < 0) {
					// this final state. First convert the state to a positive array index
					// in order to look up the name of the handler function name in the array
					newState = -newState -1;
					handlerMethod = ilib.PhoneNumber._states[newState];

					if (number.charAt(0) === '^') {
						result = regionSettings.handler[handlerMethod](number.slice(1), i-1, this, regionSettings);
					} else {
						result = regionSettings.handler[handlerMethod](number, i, this, regionSettings);
					}
	
					// reparse whatever is left
					number = result.number;
					i= 0;
					//console.log("reparsing with new number: " +  number);
					state = 0;
					// if the handler requested a special sub-table, use it for this round of parsing,
					// otherwise, set it back to the regular table to continue parsing

					if (result.countryCode !== undefined) {
						this._parseOtherCountry(number, regionData, options, result.countryCode);
						// don't process any further -- let the work be done in the onLoad callbacks
						return;
					} else if (result.table !== undefined) {
						ilib.loadData({
							name: result.table + ".json",
							object: ilib.PhoneNumber,
							nonlocale: true,
							sync: this.sync,
							loadParams: this.loadParams,
							callback: ilib.bind(this, function (data) {
								if (!data) {
									data = {"states" : [[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1],[2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-3,-1,-1,-1,-1],[-4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]};
								}

								regionSettings = {
									stateData : data,
									plan: regionSettings.plan,
									handler: regionSettings.handler
								};
								
								// recursively call the parser with the new states data
								// to finish the parsing
								this._parseNumber(number, regionSettings, options);
							})
						});
						// don't process any further -- let the work be done in the onLoad callbacks
						return;
					} else if (result.skipTrunk !== undefined) {
						ch = ilib.PhoneNumber._getCharacterCode(regionSettings.plan.getTrunkCode());
						state = stateData[state][ch];
					}
				} else {
					// console.info("recognized digit " + ch + " continuing...");
					// recognized digit, so continue parsing
					state = newState;
					i++;
				}
			} else if (ch === -1) {
				// non-transition character, continue parsing in the same state
				i++;
			} else {
				// should not happen
				// console.info("skipping character " + ch);
				// not a digit, plus, pound, or star, so this is probably a formatting char. Skip it.
				i++;
			}
		}
		if (state > 0 && i > 0) {
			// we reached the end of the phone number, but did not finish recognizing anything. 
			// Default to last resort and put everything that is left into the subscriber number
			//console.log("Reached end of number before parsing was complete. Using handler for method none.")
			if (number.charAt(0) === '^') {
				result = regionSettings.handler.none(number.slice(1), i-1, this, regionSettings);
			} else {
				result = regionSettings.handler.none(number, i, this, regionSettings);
			}
		}

		// let the caller know we are done parsing
		if (this.onLoad) {
			this.onLoad(this);
		}
	},
	/**
	 * @protected
	 */
	_getPrefix: function() {
		return this.areaCode || this.serviceCode || this.mobilePrefix || "";
	},
	
	/**
	 * @protected
	 */
	_hasPrefix: function() {
		return (this._getPrefix() !== "");
	},
	
	/**
	 * Exclusive or -- return true, if one is defined and the other isn't
	 * @protected
	 */
	_xor : function(left, right) {
		if ((left === undefined && right === undefined ) || (left !== undefined && right !== undefined)) {
			return false;
		} else {
			return true;
		}
	},
	
	/**
	 * return a version of the phone number that contains only the dialable digits in the correct order 
	 * @protected
	 */
	_join: function () {
		var fieldName, formatted = "";
		
		try {
			for (var field in ilib.PhoneNumber._fieldOrder) {
				if (typeof field === 'string' && typeof ilib.PhoneNumber._fieldOrder[field] === 'string') {
					fieldName = ilib.PhoneNumber._fieldOrder[field];
					// console.info("normalize: formatting field " + fieldName);
					if (this[fieldName] !== undefined) {
						formatted += this[fieldName];
					}
				}
			}
		} catch ( e ) {
			//console.warn("caught exception in _join: " + e);
			throw e;
		}
		return formatted;
	},

	/**
	 * This routine will compare the two phone numbers in an locale-sensitive
	 * manner to see if they possibly reference the same phone number.<p>
	 * 
	 * In many places,
	 * there are multiple ways to reach the same phone number. In North America for 
	 * example, you might have a number with the trunk access code of "1" and another
	 * without, and they reference the exact same phone number. This is considered a
	 * strong match. For a different pair of numbers, one may be a local number and
	 * the other a full phone number with area code, which may reference the same 
	 * phone number if the local number happens to be located in that area code. 
	 * However, you cannot say for sure if it is in that area code, so it will 
	 * be considered a somewhat weaker match.<p>
	 *  
	 * Similarly, in other countries, there are sometimes different ways of 
	 * reaching the same destination, and the way that numbers
	 * match depends on the locale.<p>
	 * 
	 * The various phone number fields are handled differently for matches. There
	 * are various fields that do not need to match at all. For example, you may
	 * type equally enter "00" or "+" into your phone to start international direct
	 * dialling, so the iddPrefix field does not need to match at all.<p> 
	 * 
	 * Typically, fields that require matches need to match exactly if both sides have a value 
	 * for that field. If both sides specify a value and those values differ, that is
	 * a strong non-match. If one side does not have a value and the other does, that 
	 * causes a partial match, because the number with the missing field may possibly
	 * have an implied value that matches the other number. For example, the numbers
	 * "650-555-1234" and "555-1234" have a partial match as the local number "555-1234"
	 * might possibly have the same 650 area code as the first number, and might possibly
	 * not. If both side do not specify a value for a particular field, that field is 
	 * considered matching.<p>
	 *  
	 * The values of following fields are ignored when performing matches:
	 * 
	 * <ul>
	 * <li>vsc
	 * <li>iddPrefix
	 * <li>cic
	 * <li>trunkAccess
	 * </ul>
	 * 
	 * The values of the following fields matter if they do not match:
	 *   
	 * <ul>
	 * <li>countryCode - A difference causes a moderately strong problem except for 
	 * certain countries where there is a way to access the same subscriber via IDD 
	 * and via intranetwork dialling
	 * <li>mobilePrefix - A difference causes a possible non-match
	 * <li>serviceCode - A difference causes a possible non-match
	 * <li>areaCode - A difference causes a possible non-match
	 * <li>subscriberNumber - A difference causes a very strong non-match
	 * <li>extension - A difference causes a minor non-match
	 * </ul>
	 *  
	 * @param {string|ilib.PhoneNumber} other other phone number to compare this one to
	 * @return {number} non-negative integer describing the percentage quality of the 
	 * match. 100 means a very strong match (100%), and lower numbers are less and 
	 * less strong, down to 0 meaning not at all a match. 
	 */
	compare: function (other) {
		var match = 100,
			FRdepartments = {"590":1, "594":1, "596":1, "262":1},
			ITcountries = {"378":1, "379":1},
			thisPrefix,
			otherPrefix,
			currentCountryCode = 0;

		if (typeof this.locale.region === "string") {
			currentCountryCode = this.locale._mapRegiontoCC(this.locale.region);
		}
		
		// subscriber number must be present and must match
		if (!this.subscriberNumber || !other.subscriberNumber || this.subscriberNumber !== other.subscriberNumber) {
			return 0;
		}

		// extension must match if it is present
		if (this._xor(this.extension, other.extension) || this.extension !== other.extension) {
			return 0;
		}

		if (this._xor(this.countryCode, other.countryCode)) {
			// if one doesn't have a country code, give it some demerit points, but if the
			// one that has the country code has something other than the current country
			// add even more. Ignore the special cases where you can dial the same number internationally or via 
			// the local numbering system
			switch (this.locale.getRegion()) {
			case 'FR':
				if (this.countryCode in FRdepartments || other.countryCode in FRdepartments) {
					if (this.areaCode !== other.areaCode || this.mobilePrefix !== other.mobilePrefix) {
						match -= 100;
					}
				} else {
					match -= 16;
				}
				break;
			case 'IT':
				if (this.countryCode in ITcountries || other.countryCode in ITcountries) { 
					if (this.areaCode !== other.areaCode) {
						match -= 100;
					}
				} else {
					match -= 16;
				}
				break;
			default:
				match -= 16;
				if ((this.countryCode !== undefined && this.countryCode !== currentCountryCode) || 
					(other.countryCode !== undefined && other.countryCode !== currentCountryCode)) {
					match -= 16;
				}
			}
		} else if (this.countryCode !== other.countryCode) {
			// ignore the special cases where you can dial the same number internationally or via 
			// the local numbering system
			if (other.countryCode === '33' || this.countryCode === '33') {
				// france
				if (this.countryCode in FRdepartments || other.countryCode in FRdepartments) {
					if (this.areaCode !== other.areaCode || this.mobilePrefix !== other.mobilePrefix) {
						match -= 100;
					}
				} else {
					match -= 100;
				}
			} else if (this.countryCode === '39' || other.countryCode === '39') {
				// italy
				if (this.countryCode in ITcountries || other.countryCode in ITcountries) { 
					if (this.areaCode !== other.areaCode) {
						match -= 100;
					}
				} else {
					match -= 100;
				}
			} else {
				match -= 100;
			}
		}

		if (this._xor(this.serviceCode, other.serviceCode)) {
			match -= 20;
		} else if (this.serviceCode !== other.serviceCode) {
			match -= 100;
		}

		if (this._xor(this.mobilePrefix, other.mobilePrefix)) {
			match -= 20;
		} else if (this.mobilePrefix !== other.mobilePrefix) {
			match -= 100;
		}

		if (this._xor(this.areaCode, other.areaCode)) {
			// one has an area code, the other doesn't, so dock some points. It could be a match if the local
			// number in the one number has the same implied area code as the explicit area code in the other number.
			match -= 12;
		} else if (this.areaCode !== other.areaCode) {
			match -= 100;
		}

		thisPrefix = this._getPrefix();
		otherPrefix = other._getPrefix();
		
		if (thisPrefix && otherPrefix && thisPrefix !== otherPrefix) {
			match -= 100;
		}
		
		// make sure we are between 0 and 100
		if (match < 0) {
			match = 0;	
		} else if (match > 100) {
			match = 100;
		}

		return match;
	},
	
	/**
	 * Determine whether or not the other phone number is exactly equal to the current one.<p>
	 *  
	 * The difference between the compare method and the equals method is that the compare 
	 * method compares normalized numbers with each other and returns the degree of match,
	 * whereas the equals operator returns true iff the two numbers contain the same fields
	 * and the fields are exactly the same. Functions and other non-phone number properties
	 * are not compared.
	 * @param {string|ilib.PhoneNumber} other another phone number to compare to this one
	 * @return {boolean} true if the numbers are the same, false otherwise
	 */
	equals: function equals(other) {
		if (other.locale && this.locale && !this.locale.equals(other.locale) && (!this.countryCode || !other.countryCode)) {
			return false;
		}
		
		for (var p in other) {
			if (p !== undefined && this[p] !== undefined && typeof(this[p]) !== 'object') {
				if (other[p] === undefined) {
					/*console.error("PhoneNumber.equals: other is missing property " + p + " which has the value " + this[p] + " in this");
					console.error("this is : " + JSON.stringify(this));
					console.error("other is: " + JSON.stringify(other));*/
					return false;
				}
				if (this[p] !== other[p]) {
					/*console.error("PhoneNumber.equals: difference in property " + p);
					console.error("this is : " + JSON.stringify(this));
					console.error("other is: " + JSON.stringify(other));*/
					return false;
				}
			}
		}
		for (var p in other) {
			if (p !== undefined && other[p] !== undefined && typeof(other[p]) !== 'object') {
				if (this[p] === undefined) {
					/*console.error("PhoneNumber.equals: this is missing property " + p + " which has the value " + other[p] + " in the other");
					console.error("this is : " + JSON.stringify(this));
					console.error("other is: " + JSON.stringify(other));*/
					return false;
				}
				if (this[p] !== other[p]) {
					/*console.error("PhoneNumber.equals: difference in property " + p);
					console.error("this is : " + JSON.stringify(this));
					console.error("other is: " + JSON.stringify(other));*/
					return false;
				}
			}
		}
		return true;
	},
	

	/**
	 * @private
	 * @param {{
	 *   mcc:string,
	 *   defaultAreaCode:string,
	 *   country:string,
	 *   networkType:string,
	 *   assistedDialing:boolean,
	 *   sms:boolean,
	 *   manualDialing:boolean
	 * }} options an object containing options to help in normalizing. 
	 * @param {ilib.PhoneNumber} norm
	 * @param {ilib.Locale.PhoneLoc} homeLocale
	 * @param {ilib.Locale.PhoneLoc} currentLocale
	 * @param {ilib.NumPlan} currentPlan
	 * @param {ilib.Locale.PhoneLoc} destinationLocale
	 * @param {ilib.NumPlan} destinationPlan
	 * @param {boolean} sync
	 * @param {Object|undefined} loadParams
	 */
	_doNormalize: function(options, norm, homeLocale, currentLocale, currentPlan, destinationLocale, destinationPlan, sync, loadParams) {
		var formatted = "";
		
		if (!norm.invalid && options && options.assistedDialing) {
			// don't normalize things that don't have subscriber numbers. Also, don't normalize
			// manually dialed local numbers. Do normalize local numbers in contact entries.
			if (norm.subscriberNumber && 
					(!options.manualDialing ||
					 norm.iddPrefix ||
					 norm.countryCode ||
					 norm.trunkAccess)) {
				// console.log("normalize: assisted dialling normalization of " + JSON.stringify(norm));
				if (currentLocale.getRegion() !== destinationLocale.getRegion()) {
					// we are currently calling internationally
					if (!norm._hasPrefix() && 
							options.defaultAreaCode && 
							destinationLocale.getRegion() === homeLocale.getRegion() &&
							(!destinationPlan.getFieldLength("minLocalLength") || 
								norm.subscriberNumber.length >= destinationPlan.getFieldLength("minLocalLength"))) {
						// area code is required when dialling from international, but only add it if we are dialing
						// to our home area. Otherwise, the default area code is not valid!
						norm.areaCode = options.defaultAreaCode;
						if (!destinationPlan.getSkipTrunk() && destinationPlan.getTrunkCode()) {
							// some phone systems require the trunk access code, even when dialling from international
							norm.trunkAccess = destinationPlan.getTrunkCode();
						}
					}
					
					if (norm.trunkAccess && destinationPlan.getSkipTrunk()) {
						// on some phone systems, the trunk access code is dropped when dialling from international
						delete norm.trunkAccess;
					}
					
					// make sure to get the country code for the destination region, not the current region!
					if (options.sms) {
						if (homeLocale.getRegion() === "US" && currentLocale.getRegion() !== "US") {
							if (destinationLocale.getRegion() !== "US") {
								norm.iddPrefix = "011"; // non-standard code to make it go through the US first
								norm.countryCode = norm.countryCode || homeLocale._mapRegiontoCC(destinationLocale.getRegion());
							} else if (options.networkType === "cdma") {
								delete norm.iddPrefix;
								delete norm.countryCode;
								if (norm.areaCode) {
									norm.trunkAccess = "1";
								}
							} else if (norm.areaCode) {
								norm.iddPrefix = "+";
								norm.countryCode = "1";
								delete norm.trunkAccess;
							}
						} else {
							norm.iddPrefix = (options.networkType === "cdma") ? currentPlan.getIDDCode() : "+";
							norm.countryCode = norm.countryCode || homeLocale._mapRegiontoCC(destinationLocale.region);
						}
					} else if (norm._hasPrefix() && !norm.countryCode) {
						norm.countryCode = homeLocale._mapRegiontoCC(destinationLocale.region);
					}

					if (norm.countryCode && !options.sms) {
						// for CDMA, make sure to get the international dialling access code for the current region, not the destination region
						// all umts carriers support plus dialing
						norm.iddPrefix = (options.networkType === "cdma") ? currentPlan.getIDDCode() : "+";
					}
				} else {
					// console.log("normalize: dialing within the country");
					if (options.defaultAreaCode) {
						if (destinationPlan.getPlanStyle() === "open") {
							if (!norm.trunkAccess && norm._hasPrefix() && destinationPlan.getTrunkCode()) {
								// call is not local to this area code, so you have to dial the trunk code and the area code
								norm.trunkAccess = destinationPlan.getTrunkCode();
							}
						} else {
							// In closed plans, you always have to dial the area code, even if the call is local.
							if (!norm._hasPrefix()) {
								if (destinationLocale.getRegion() === homeLocale.getRegion()) {
									norm.areaCode = options.defaultAreaCode;
									if (destinationPlan.getTrunkRequired() && destinationPlan.getTrunkCode()) {
										norm.trunkAccess = norm.trunkAccess || destinationPlan.getTrunkCode();
									}
								}
							} else {
								if (destinationPlan.getTrunkRequired() && destinationPlan.getTrunkCode()) {
									norm.trunkAccess = norm.trunkAccess || destinationPlan.getTrunkCode();
								}
							}
						}
					}
					
					if (options.sms &&
							homeLocale.getRegion() === "US" && 
							currentLocale.getRegion() !== "US") {
						norm.iddPrefix = "011"; // make it go through the US first
						if (destinationPlan.getSkipTrunk() && norm.trunkAccess) {
							delete norm.trunkAccess;
						}
					} else if (norm.iddPrefix || norm.countryCode) {
						// we are in our destination country, so strip the international dialling prefixes
						delete norm.iddPrefix;
						delete norm.countryCode;
						
						if ((destinationPlan.getPlanStyle() === "open" || destinationPlan.getTrunkRequired()) && destinationPlan.getTrunkCode()) {
							norm.trunkAccess = destinationPlan.getTrunkCode();
						}
					}
				}
			}
		} else if (!norm.invalid) {
			// console.log("normalize: non-assisted normalization");
			if (!norm._hasPrefix() && options && options.defaultAreaCode && destinationLocale.getRegion() === homeLocale.region) {
				norm.areaCode = options.defaultAreaCode;
			}
			
			if (!norm.countryCode && norm._hasPrefix()) {
				norm.countryCode = homeLocale._mapRegiontoCC(destinationLocale.getRegion());
			}

			if (norm.countryCode) {
				if (options && options.networkType && options.networkType === "cdma") {
					norm.iddPrefix = currentPlan.getIDDCode(); 
				} else {
					// all umts carriers support plus dialing
					norm.iddPrefix = "+";
				}
		
				if (destinationPlan.getSkipTrunk() && norm.trunkAccess) {
					delete norm.trunkAccess;
				} else if (!destinationPlan.getSkipTrunk() && !norm.trunkAccess && destinationPlan.getTrunkCode()) {
					norm.trunkAccess = destinationPlan.getTrunkCode();
				}
			}
		}
		
		// console.info("normalize: after normalization, the normalized phone number is: " + JSON.stringify(norm));
		formatted = norm._join();

		return formatted;
	},
	
	/**
	 * @private
	 * @param {{
	 *   mcc:string,
	 *   defaultAreaCode:string,
	 *   country:string,
	 *   networkType:string,
	 *   assistedDialing:boolean,
	 *   sms:boolean,
	 *   manualDialing:boolean
	 * }} options an object containing options to help in normalizing. 
	 * @param {ilib.PhoneNumber} norm
	 * @param {ilib.Locale.PhoneLoc} homeLocale
	 * @param {ilib.Locale.PhoneLoc} currentLocale
	 * @param {ilib.NumPlan} currentPlan
	 * @param {ilib.Locale.PhoneLoc} destinationLocale
	 * @param {ilib.NumPlan} destinationPlan
	 * @param {boolean} sync
	 * @param {Object|undefined} loadParams
	 * @param {function(string)} callback
	 */
	_doReparse: function(options, norm, homeLocale, currentLocale, currentPlan, destinationLocale, destinationPlan, sync, loadParams, callback) {
		var formatted, 
			tempRegion;
		
		if (options &&
				options.assistedDialing &&
				!norm.trunkAccess && 
				!norm.iddPrefix &&
				norm.subscriberNumber && 
				norm.subscriberNumber.length > destinationPlan.getFieldLength("maxLocalLength")) {

			// numbers that are too long are sometimes international direct dialed numbers that
			// are missing the IDD prefix. So, try reparsing it using a plus in front to see if that works.
			new ilib.PhoneNumber("+" + this._join(), {
				locale: this.locale,
				sync: sync,
				loadParms: loadParams,
				onLoad: ilib.bind(this, function (data) {
					tempRegion = (data.countryCode && data.locale._mapCCtoRegion(data.countryCode));

					if (tempRegion && tempRegion !== "unknown" && tempRegion !== "SG") {
						// only use it if it is a recognized country code. Singapore (SG) is a special case.
						norm = data;
						destinationLocale = data.destinationLocale;
						destinationPlan = data.destinationPlan;
					}
					
					formatted = this._doNormalize(options, norm, homeLocale, currentLocale, currentPlan, destinationLocale, destinationPlan, sync, loadParams);
					if (typeof(callback) === 'function') {
						callback(formatted);
					}
				})
			});
		} else if (options && options.assistedDialing && norm.invalid && currentLocale.region !== norm.locale.region) {
			// if this number is not valid for the locale it was parsed with, try again with the current locale
			// console.log("norm is invalid. Attempting to reparse with the current locale");

			new ilib.PhoneNumber(this._join(), {
				locale: currentLocale,
				sync: sync,
				loadParms: loadParams,
				onLoad: ilib.bind(this, function (data) {
					if (data && !data.invalid) {
						norm = data;
					}
					
					formatted = this._doNormalize(options, norm, homeLocale, currentLocale, currentPlan, destinationLocale, destinationPlan, sync, loadParams);
					if (typeof(callback) === 'function') {
						callback(formatted);
					}
				})
			});
		} else {
			formatted = this._doNormalize(options, norm, homeLocale, currentLocale, currentPlan, destinationLocale, destinationPlan, sync, loadParams);
			if (typeof(callback) === 'function') {
				callback(formatted);
			}
		}
	},
	
	/**
	 * This function normalizes the current phone number to a canonical format and returns a
	 * string with that phone number. If parts are missing, this function attempts to fill in 
	 * those parts.<p>
	 * 	  
	 * The options object contains a set of properties that can possibly help normalize
	 * this number by providing "extra" information to the algorithm. The options
	 * parameter may be null or an empty object if no hints can be determined before
	 * this call is made. If any particular hint is not
	 * available, it does not need to be present in the options object.<p>
	 * 
	 * The following is a list of hints that the algorithm will look for in the options
	 * object:
	 * 
	 * <ul>
	 * <li><i>mcc</i> the mobile carrier code of the current network upon which this 
	 * phone is operating. This is translated into an IDD country code. This is 
	 * useful if the number being normalized comes from CNAP (callerid) and the
	 * MCC is known.
	 * <li><i>defaultAreaCode</i> the area code of the phone number of the current
	 * device, if available. Local numbers in a person's contact list are most 
	 * probably in this same area code.
	 * <li><i>country</i> the 2 letter ISO 3166 code of the country if it is
	 * known from some other means such as parsing the physical address of the
	 * person associated with the phone number, or the from the domain name 
	 * of the person's email address
	 * <li><i>networkType</i> specifies whether the phone is currently connected to a
	 * CDMA network or a UMTS network. Valid values are the strings "cdma" and "umts".
	 * If one of those two strings are not specified, or if this property is left off
	 * completely, this method will assume UMTS.
	 * </ul>
	 * 
	 * The following are a list of options that control the behaviour of the normalization:
	 * 
	 * <ul>
	 * <li><i>assistedDialing</i> if this is set to true, the number will be normalized
	 * so that it can dialled directly on the type of network this phone is 
	 * currently connected to. This allows customers to dial numbers or use numbers 
	 * in their contact list that are specific to their "home" region when they are 
	 * roaming and those numbers would not otherwise work with the current roaming 
	 * carrier as they are. The home region is 
	 * specified as the phoneRegion system preference that is settable in the 
	 * regional settings app. With assisted dialling, this method will add or 
	 * remove international direct dialling prefixes and country codes, as well as
	 * national trunk access codes, as required by the current roaming carrier and the
	 * home region in order to dial the number properly. If it is not possible to 
	 * construct a full international dialling sequence from the options and hints given,
	 * this function will not modify the phone number, and will return "undefined".
	 * If assisted dialling is false or not specified, then this method will attempt
	 * to add all the information it can to the number so that it is as fully
	 * specified as possible. This allows two numbers to be compared more easily when
	 * those two numbers were otherwise only partially specified.
	 * <li><i>sms</i> set this option to true for the following conditions: 
	 *   <ul>
	 *   <li>assisted dialing is turned on
	 *   <li>the phone number represents the destination of an SMS message
	 *   <li>the phone is UMTS 
	 *   <li>the phone is SIM-locked to its carrier
	 *   </ul> 
	 * This enables special international direct dialling codes to route the SMS message to
	 * the correct carrier. If assisted dialling is not turned on, this option has no
	 * affect.
	 * <li><i>manualDialing</i> set this option to true if the user is entering this number on
	 * the keypad directly, and false when the number comes from a stored location like a 
	 * contact entry or a call log entry. When true, this option causes the normalizer to 
	 * not perform any normalization on numbers that look like local numbers in the home 
	 * country. If false, all numbers go through normalization. This option only has an effect
	 * when the assistedDialing option is true as well, otherwise it is ignored.
	 * </ul> 
	 * 
	 * If both a set of options and a locale are given, and they offer conflicting
	 * information, the options will take precedence. The idea is that the locale
	 * tells you the region setting that the user has chosen (probably in 
	 * firstuse), whereas the the hints are more current information such as
	 * where the phone is currently operating (the MCC).<p> 
	 * 
	 * This function performs the following types of normalizations with assisted
	 * dialling turned on:
	 * 
	 * <ol>
	 * <li>If the current location of the phone matches the home country, this is a
	 * domestic call.
	 *   <ul> 
	 *   <li>Remove any iddPrefix and countryCode fields, as they are not needed
	 *   <li>Add in a trunkAccess field that may be necessary to call a domestic numbers 
	 *     in the home country
	 *   </ul>
	 * <li> If the current location of the phone does not match the home country,
	 * attempt to form a whole international number.
	 *   <ul>
	 *   <li>Add in the area code if it is missing from the phone number and the area code
	 *     of the current phone is available in the hints
	 *   <li>Add the country dialling code for the home country if it is missing from the 
	 *     phone number
	 *   <li>Add or replace the iddPrefix with the correct one for the current country. The
	 *     phone number will have been parsed with the settings for the home country, so
	 *     the iddPrefix may be incorrect for the
	 *     current country. The iddPrefix for the current country can be "+" if the phone 
	 *     is connected to a UMTS network, and either a "+" or a country-dependent 
	 *     sequences of digits for CDMA networks.
	 *   </ul>
	 * </ol>
	 * 
	 * This function performs the following types of normalization with assisted
	 * dialling turned off:
	 * 
	 * <ul>
	 * <li>Normalize the international direct dialing prefix to be a plus or the
	 * international direct dialling access code for the current country, depending
	 * on the network type.
	 * <li>If a number is a local number (ie. it is missing its area code), 
	 * use a default area code from the hints if available. CDMA phones always know their area 
	 * code, and GSM/UMTS phones know their area code in many instances, but not always 
	 * (ie. not on Vodaphone or Telcel phones). If the default area code is not available, 
	 * do not add it.
	 * <li>In assisted dialling mode, if a number is missing its country code, 
	 * use the current MCC number if
	 * it is available to figure out the current country code, and prepend that 
	 * to the number. If it is not available, leave it off. Also, use that 
	 * country's settings to parse the number instead of the current format 
	 * locale.
	 * <li>For North American numbers with an area code but no trunk access 
	 * code, add in the trunk access code.
	 * <li>For other countries, if the country code is added in step 3, remove the 
	 * trunk access code when required by that country's conventions for 
	 * international calls. If the country requires a trunk access code for 
	 * international calls and it doesn't exist, add one.
	 * </ul>
	 *  
	 * This method modifies the current object, and also returns a string 
	 * containing the normalized phone number that can be compared directly against
	 * other normalized numbers. The canonical format for phone numbers that is 
	 * returned from thhomeLocaleis method is simply an uninterrupted and unformatted string 
	 * of dialable digits.
	 * 
	 * @param {{
	 *   mcc:string,
	 *   defaultAreaCode:string,
	 *   country:string,
	 *   networkType:string,
	 *   assistedDialing:boolean,
	 *   sms:boolean,
	 *   manualDialing:boolean
	 * }} options an object containing options to help in normalizing. 
	 * @return {string|undefined} the normalized string, or undefined if the number
	 * could not be normalized
	 */
	normalize: function(options) {
		var norm,
			sync = true,
			loadParams = {};
			

		if (options) {
			if (typeof(options.sync) !== 'undefined') {
				sync = (options.sync == true);
			}
			
			if (options.loadParams) {
				loadParams = options.loadParams;
			}
		}
		
		// Clone this number, so we don't mess with the original.
		// No need to do this asynchronously because it's a copy constructor which doesn't 
		// load any extra files.
		norm = new ilib.PhoneNumber(this);

		var normalized;
		
		if (options && (typeof(options.mcc) !== 'undefined' || typeof(options.country) !== 'undefined')) {
			new ilib.Locale.PhoneLoc({
				mcc: options.mcc,
				countryCode: options.countryCode,
				locale: this.locale,
				sync: sync,
				loadParams: loadParams,
				onLoad: ilib.bind(this, function(loc) {
					new ilib.NumPlan({
						locale: loc,
						sync: sync,
						loadParms: loadParams,
						onLoad: ilib.bind(this, function (plan) {
							this._doReparse(options, norm, this.locale, loc, plan, this.destinationLocale, this.destinationPlan, sync, loadParams, function (fmt) {
								normalized = fmt;
								
								if (options && typeof(options.onLoad) === 'function') {
									options.onLoad(fmt);
								}
							});
						})
					});
				})
			});
		} else {
			this._doReparse(options, norm, this.locale, this.locale, this.plan, this.destinationLocale, this.destinationPlan, sync, loadParams, function (fmt) {
				normalized = fmt;
				
				if (options && typeof(options.onLoad) === 'function') {
					options.onLoad(fmt);
				}
			});
		}

		// return the value for the synchronous case
		return normalized;
	}
};
ilib.data.phonefmt = {"international":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["X","XX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX","XXXXXXXXX","XXXXXXXXXX","XXXXXXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["X","XX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX","XXXXXXXXX","XXXXXXXXXX","XXXXXXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["X","XX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX","XXXXXXXXX","XXXXXXXXXX","XXXXXXXXXXX"]},"default":{"example":"87654321","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["X","XX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX","XXXXXXXXX","XXXXXXXXXX","XXXXXXXXXXX"]}};
ilib.data.phonefmt_IN = {"international":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX-"],"emergency":"XXX ","trunkAccess":"","mobilePrefix":["X","XX","XXX"],"areaCode":["X ","XX ","XXX ","XXXX "],"serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX","XXXXXXXXX","XXXXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX-"],"emergency":"XXX ","trunkAccess":"X","mobilePrefix":["X","XX","XXX"],"areaCode":["X-","XX-","XXX-","XXXX-"],"serviceCode":["X-","XX-","XXX-","XXXX-"],"subscriberNumber":["X","XX","XX-X","XX-XX","XX-XXX","XX-XXXX","XX-XXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX-"],"emergency":"XXX ","trunkAccess":"X","mobilePrefix":["X","XX","XXX"],"areaCode":["X ","XX ","XXX ","XXXX "],"serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XXX","XX XXXX","XX XXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"022-12345678","iddPrefix":["X","XX "],"countryCode":["X-","XX-","XXX-"],"cic":["X","XX","XXX","XXXX-"],"emergency":"XXX ","trunkAccess":"X","areaCode":["X-","XX-","XXX-","XXXX-"],"serviceCode":["X-","XX-","XXX-","XXXX-"],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"spaces":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX-"],"emergency":"XXX ","trunkAccess":"X","areaCode":["X ","XX ","XXX ","XXXX "],"serviceCode":["X","XX","XXX","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"hyphens":{"iddPrefix":["X","XX-"],"countryCode":["X-","XX-","XXX-"],"cic":["X","XX","XXX","XXXX-"],"emergency":"XXX ","trunkAccess":"X","areaCode":["X-","XX-","XXX-","XXXX-"],"serviceCode":["X","XX","XXX","XXXX-"],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX-XXX","XXX-XXXX","XXXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
ilib.data.phonefmt_FR = {"international":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"","mobilePrefix":"X ","areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XX XX XX X","XX XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":"X ","areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XX XX XX X","XX XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"","mobilePrefix":"X ","areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XX XX XX X","XX XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"service":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":"X ","areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"01 12 34 56 78","whole":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":"X ","areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XX XX XX","XX XX XX X","XX XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":"X ","areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XX XX XX X","XX XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"parenthÃ¨ses":{"example":"(0)1 12 34 56 78","whole":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"(X)","mobilePrefix":"X ","areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XX XX XX","XX XX XX X","XX XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"(X)","mobilePrefix":"X ","areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XX XX XX X","XX XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"comprimÃ©":{"example":"01 12345678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":"X ","areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"pÃ©riodes":{"example":"01.12.34.56.78","whole":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":"X.","areaCode":"X.","serviceCode":["X.","XX.","XXX.","XXXX."],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XX.XX.XX","XX.XX.XX.X","XX.XX.XX.XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":"X.","areaCode":"X.","serviceCode":["X.","XX.","XXX.","XXXX."],"subscriberNumber":["X","XX","XX.X","XX.XX","XX.XX.X","XX.XX.XX","XX.XX.XX.X","XX.XX.XX.XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}}};
ilib.data.phonefmt_DE = {"international":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX ","XXXXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XXX ","areaCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX ","XXXXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XXX ","areaCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX ","XXXXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XXX ","areaCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XX X","XXX XX XX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"030 12 34 56 78","partial":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX ","XXXXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XXX ","areaCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XX XX XX X","XX XX XX XX"],"extension":["-X","-XX","-XX X","-XX XX","-X XX XX"]},"whole":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX ","XXXXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XXX ","areaCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XX XX XX","XXX XX XX","XX XX XX XX"],"extension":["-X","-XX","-XX X","-XX XX","-X XX XX"]}},"alten":{"example":"030/1234 5678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XX XX ","XXX XX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XXX ","areaCode":["X/","XX/","XXX/","XXXX/","XXXXX/"],"serviceCode":["X/","XX/","XXX/","XXXX/","XXXXX "],"subscriberNumber":["X","XX","X XX","XX XX","X XX XX","XX XX XX","X XX XX XX","XX XX XX XX"],"extension":["-X","-XX","-XX X","-XX XX","-X XX XX"]},"Microsoft":{"example":"(030) 1234 5678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX ","XXXXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"(X","mobilePrefix":"XXX ","areaCode":["X) ","XX) ","XXX) ","XXXX) ","XXXXX) "],"serviceCode":["X) ","XX) ","XXX) ","XXXX) ","XXXXX) "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":["-X","-XX","-XXX","-XXXX","-XXXXX"]},"minimalistischen":{"example":"030 12345678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX ","XXXXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XXX ","areaCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":["-X","-XX","-XXX","-XXXX","-XXXXX"]},"alternitive":{"example":"030 1234 5678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX ","XXXXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XXX ","areaCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":["-X","-XX","-XXX","-XXXX","-XXXXX"]}};
ilib.data.phonefmt_AU = {"international":{"iddPrefix":["X","XX ","XXX ","XXXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"","areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXX X","XXXX XX","XXXX XXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX ","XXX ","XXXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":["X ","XX ","XXX ","XXX X"],"areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX ","XXX XX","XXX XXX"],"subscriberNumber":["X","XX","XX X","XX XX","XX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX ","XXX ","XXXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"","mobilePrefix":["X ","XX ","XXX ","XXX X"],"areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"service":{"iddPrefix":["X","XX ","XXX ","XXXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":["X ","XX ","XXX ","XXX X"],"areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"(02) 1234 5678","whole":{"iddPrefix":["X","XX ","XXX ","XXXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"(X","areaCode":"X) ","subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXX XXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"iddPrefix":["X","XX ","XXX ","XXXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"(X","areaCode":"X) ","subscriberNumber":["X","XX","XXX","XXXX","XXXX X","XXXX XX","XXXX XXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"nobrackets":{"example":"02 1234 5678","whole":{"iddPrefix":["X","XX ","XXX ","XXXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","areaCode":"X ","subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXX XXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"iddPrefix":["X","XX ","XXX ","XXXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","areaCode":"X ","subscriberNumber":["X","XX","XXX","XXXX","XXXX X","XXXX XX","XXXX XXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"compressed":{"example":"02 12345678","iddPrefix":["X","XX ","XXX ","XXXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","areaCode":"X ","subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
ilib.data.phonefmt_GB = {"international":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"emergency":"XXX ","trunkAccess":"","mobilePrefix":["X","XX ","XXX ","XXXX ","XXXXX "],"areaCode":["X","XX ","XXX ","XXXX ","XXX XX ","XXX XXX "],"serviceCode":["X","XX ","XXX ","XXXX ","XXX XX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"emergency":"XXX ","trunkAccess":"X","mobilePrefix":["X","XX ","XXX ","XXXX ","XXXXX "],"areaCode":["X","XX ","XXX ","XXXX ","XXXXX ","XXX XXX "],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"emergency":"XXX ","trunkAccess":"","mobilePrefix":["X","XX ","XXX ","XXXX ","XXXXX "],"areaCode":["X","XX ","XXX ","XXXX ","XXXXX ","XXX XXX "],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"(020) 1234 5678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"emergency":"XXX ","trunkAccess":"(X","areaCode":["X)","XX) ","XXX) ","XXXX) ","XXX XX) ","XXX XXX) "],"serviceCode":["X) ","XX) ","XXX) ","XXXX) "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"common":{"example":"020 1234 5678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"emergency":"XXX ","trunkAccess":"X","areaCode":["X","XX ","XXX ","XXXX ","XXX XX ","XXX XXX "],"serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"compressed":{"example":"020 12345678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"emergency":"XXX ","trunkAccess":"X","areaCode":["X","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
ilib.data.phonefmt_HK = {"international":{"iddPrefix":["X","XX ","XXX "],"emergency":"XXX ","countryCode":["X ","XX ","XXX "],"mobilePrefix":"X","serviceCode":"X","subscriberNumber":["X","XX","XXX","XXXX","XXXX X","XXXX XX","XXXX XXX","XXXX XXXX"]},"mobile":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"","emergency":"XXX ","mobilePrefix":"X","serviceCode":"X","subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"]},"service":{"iddPrefix":["X","XX ","XXX "],"trunkAccess":"","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"serviceCode":"X","subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"]},"internationalmobile":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"","emergency":"XXX ","mobilePrefix":"X","serviceCode":"X","subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"]},"default":{"example":"2123 4567","whole":{"iddPrefix":["X","XX ","XXX "],"trunkAccess":"","emergency":"XXX ","mobilePrefix":"X","countryCode":["X ","XX ","XXX "],"serviceCode":"X","subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"]},"partial":{"iddPrefix":["X","XX ","XXX "],"trunkAccess":"","emergency":"XXX ","mobilePrefix":"X","countryCode":["X ","XX ","XXX "],"serviceCode":"X","subscriberNumber":["X","XX","XXX","XXXX","XXXX X","XXXX XX","XXXX XXX","XXXX XXXX"]}}};
ilib.data.phonefmt_IE = {"international":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"","mobilePrefix":["X","XX "],"areaCode":["X ","XX ","XXX "],"emergency":["X","XX","XXX","XXXX","XXXXX","XXXXXX"],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":["X","XX "],"areaCode":["X ","XX ","XXX "],"emergency":["X","XX","XXX","XXXX","XXXXX","XXXXXX"],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"","mobilePrefix":["X","XX "],"areaCode":["X ","XX ","XXX "],"emergency":["X","XX","XXX","XXXX","XXXXX","XXXXXX"],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"service":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":["X","XX "],"areaCode":["X ","XX ","XXX "],"emergency":["X","XX","XXX","XXXX","XXXXX","XXXXXX"],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"(01) 123 4567","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"(X","areaCode":["X) ","XX) ","XXX) "],"emergency":["X","XX","XXX","XXXX","XXXXX","XXXXXX"],"serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"spaces":{"example":"01 123 4567","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","areaCode":["X ","XX ","XXX "],"emergency":["X","XX","XXX","XXXX","XXXXX","XXXXXX"],"serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
ilib.data.phonefmt_NZ = {"international":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"","areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":["X ","XX ","XXX ","XXXX "],"areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"","mobilePrefix":["X ","XX ","XXX ","XXXX "],"areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"service":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","mobilePrefix":["X ","XX ","XXX ","XXXX "],"areaCode":"X ","serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"(03) 987-6543","whole":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"(X","areaCode":"X) ","subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX-XXXX","XXXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"(X","areaCode":"X) ","subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX","XXXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"spaces":{"example":"03 987 6543","whole":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","areaCode":"X ","subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","areaCode":"X ","subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"compressed":{"example":"03 2345678","iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","areaCode":"X ","subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
ilib.data.phonefmt_SG = {"international":{"iddPrefix":["X","XX ","XXX "],"emergency":"XXX ","countryCode":["X ","XX ","XXX "],"serviceCode":["X","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXX X","XXXX XX","XXXX XXX","XXXX XXXX"]},"service":{"iddPrefix":["X","XX ","XXX "],"trunkAccess":"","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"]},"default":{"example":"6123 4567","whole":{"iddPrefix":["X","XX ","XXX "],"trunkAccess":"","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XX XXX","XXX XXX","XXX XXXX","XXXX XXXX"]},"partial":{"iddPrefix":["X","XX ","XXX "],"trunkAccess":"","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXX X","XXXX XX","XXXX XXX","XXXX XXXX"]}}};
ilib.data.phonefmt_US = {"international":{"vsc":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XX XX XXX "],"emergency":"XXX ","trunkAccess":"","areaCode":["X","XX","XXX "],"serviceCode":["X","XX","XXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"vsc":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XX-X","XX-XX","XX-XX-X","XX-XX-XX","XX-XX-XXX-"],"emergency":"XXX ","trunkAccess":"X ","areaCode":["(X)","(XX)","(XXX) "],"serviceCode":["(X)","(XX)","(XXX) "],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"vsc":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XX XX XXX "],"emergency":"XXX ","trunkAccess":"X ","areaCode":["X","XX","XXX "],"serviceCode":["X","XX","XXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"service":{"vsc":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XX XX XXX "],"emergency":"XXX ","trunkAccess":"X ","areaCode":["X","XX","XXX "],"serviceCode":["X","XX","XXX "],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"1 (650) 555-1234","whole":{"vsc":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"emergency":"XXX ","iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XX-X","XX-XX","XX-XX-X","XX-XX-XX","XX-XX-XXX "],"trunkAccess":"X ","areaCode":["(X)","(XX)","(XXX) "],"serviceCode":["(X)","(XX)","(XXX) "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"vsc":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"emergency":"XXX ","iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XX-X","XX-XX","XX-XX-X","XX-XX-XX","XX-XX-XXX "],"trunkAccess":"X ","areaCode":["(X)","(XX)","(XXX) "],"serviceCode":["(X)","(XX)","(XXX) "],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"dashes":{"example":"1-650-555-1234","whole":{"vsc":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"emergency":"XXX ","iddPrefix":["X","XX","XXX-"],"countryCode":["X-","XX-","XXX-"],"cic":["X","XX","XX-X","XX-XX","XX-XX-X","XX-XX-XX","XX-XX-XXX-"],"trunkAccess":"X-","areaCode":["X","XX","XXX-"],"serviceCode":["X","XX","XXX-"],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"vsc":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"emergency":"XXX ","iddPrefix":["X","XX","XXX-"],"countryCode":["X-","XX-","XXX-"],"cic":["X","XX","XX-X","XX-XX","XX-XX-X","XX-XX-XX","XX-XX-XXX-"],"trunkAccess":"X-","areaCode":["X","XX","XXX-"],"serviceCode":["X","XX","XXX-"],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"dots":{"example":"1.650.555.1234","whole":{"vsc":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"emergency":"XXX ","iddPrefix":["X","XX","XXX."],"countryCode":["X.","XX.","XXX."],"cic":["X","XX","XX.X","XX.XX","XX.XX.X","XX.XX.XX","XX.XX.XXX."],"trunkAccess":"X.","areaCode":["X","XX","XXX."],"serviceCode":["X","XX","XXX."],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX.XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"vsc":["X ","XX ","XXX ","XXXX ","XXXXX ","XXXXXX "],"emergency":"XXX ","iddPrefix":["X","XX","XXX."],"countryCode":["X.","XX.","XXX."],"cic":["X","XX","XX.X","XX.XX","XX.XX.X","XX.XX.XX","XX.XX.XXX."],"trunkAccess":"X.","areaCode":["X","XX","XXX."],"serviceCode":["X","XX","XXX."],"subscriberNumber":["X","XX","XXX","XXX.X","XXX.XX","XXX.XXX","XXX.XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}}};
ilib.data.phonefmt_ES = {"international":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX ","XXXX "],"emergency":"XXX ","areaCode":["X","XX ","XXX "],"mobilePrefix":["X","XX ","XXX "],"serviceCode":["X","XX","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX ","XXXX "],"emergency":"XXX ","areaCode":["X","XX ","XXX "],"mobilePrefix":["X","XX ","XXX "],"serviceCode":["X","XX","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX ","XXXX "],"emergency":"XXX ","areaCode":["X","XX ","XXX "],"mobilePrefix":["X","XX ","XXX "],"serviceCode":["X","XX","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"912 123 456","whole":{"trunkAccess":"X","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX "],"emergency":"XXX ","areaCode":["X","XX ","XXX "],"serviceCode":["X","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"trunkAccess":"X","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX "],"emergency":"XXX ","areaCode":["X","XX ","XXX "],"serviceCode":["X","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"dobles":{"example":"912 12 34 56","trunkAccess":"X","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX "],"emergency":"XXX ","areaCode":["X","XX ","XXX "],"serviceCode":["X","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"viejo":{"example":"91 212 34 56","trunkAccess":"X","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX "],"emergency":"XXX ","areaCode":["X","XX ","XX X"],"serviceCode":["X","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"compacto":{"example":"912 123456","trunkAccess":"X","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX "],"emergency":"XXX ","areaCode":["X","XX ","XXX "],"serviceCode":["X","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
ilib.data.phonefmt_MX = {"international":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["",""],"mobilePrefix":["1 ","1 ","1 "],"areaCode":["X","XX ","XXX "],"serviceCode":["X","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX-"],"countryCode":["X-","XX-","XXX-"],"trunkAccess":["X-","XX-"],"mobilePrefix":["X-","XX-","XXX-"],"areaCode":["X","XX-","XXX-"],"serviceCode":["X","XX-","XXX-"],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX","XXXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["",""],"mobilePrefix":["1 ","1 ","1 "],"areaCode":["X","XX ","XXX "],"serviceCode":["X","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"55-1234-5678","whole":{"iddPrefix":["X","XX-"],"countryCode":["X-","XX-","XXX-"],"trunkAccess":["X","XX-"],"areaCode":["X-","XX-","XXX-"],"serviceCode":["X-","XX-","XXX-"],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX-XXXX","XXXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"iddPrefix":["X","XX-"],"countryCode":["X-","XX-","XXX-"],"trunkAccess":["X","XX-"],"areaCode":["X-","XX-","XXX-"],"serviceCode":["X-","XX-","XXX-"],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX","XXXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"parÃ©ntesis":{"example":"(55) 1234-5678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["X","XX "],"areaCode":["(X) ","(XX) ","(XXX) "],"serviceCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX","XXXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"espacios":{"example":"55 12 34 56 78","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["X","XX "],"areaCode":["X","XX ","XXX "],"serviceCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XX X","XXX XX XX","XX XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"barras":{"example":"55/1234-5678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["X","XX "],"areaCode":["X/","XX/","XXX/"],"serviceCode":["X/","XX/","XXX/"],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX","XXXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"comprimido":{"example":"55 12345678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["X","XX "],"areaCode":["X","XX ","XXX "],"serviceCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
ilib.data.phonefmt_BE = {"international":{"iddPrefix":["X","XX "],"trunkAccess":"","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XX XX ","XX XXX "],"mobilePrefix":["X ","XX ","XXX "],"serviceCode":["X ","XX ","XXX "],"areaCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XXX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"trunkAccess":"X","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XX XX ","XX XXX "],"mobilePrefix":["X ","XX ","XXX "],"serviceCode":["X ","XX ","XXX "],"areaCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"trunkAccess":"","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XX XX ","XX XXX "],"mobilePrefix":["X ","XX ","XXX "],"serviceCode":["X ","XX ","XXX "],"areaCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"02 123 45 67","whole":{"iddPrefix":["X","XX "],"trunkAccess":"X","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XX XX ","XX XXX "],"serviceCode":["X","XX ","XXX ","XXXX "],"areaCode":["X","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XX XX X","XX XX XX","XXX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"iddPrefix":["X","XX "],"trunkAccess":"X","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XX XX ","XX XXX "],"serviceCode":["X","XX ","XXX ","XXXX "],"areaCode":["X","XX ","XXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XXX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"gecomprimeerd/comprimÃ©":{"example":"02 1234567","iddPrefix":["X","XX "],"trunkAccess":"X","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X","XX ","XXX ","XXXX "],"areaCode":["X","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"streepjes/tirets":{"example":"02-123-45-67","iddPrefix":["X","XX "],"trunkAccess":"X","countryCode":["X ","XX ","XXX "],"cic":["X","XX","XX-X","XX-XX","XX-XXX-"],"serviceCode":["X-","XX-","XXX-","XXXX-"],"areaCode":["X-","XX-","XXX-"],"subscriberNumber":["X","XX","XX-X","XX-XX","XX-XX-X","XX-XX-XX","XXX-XX-XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"japen/barres obliques":{"example":"02/123 45 67","iddPrefix":["X","XX "],"trunkAccess":"X","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XX XX ","XX XXX/"],"serviceCode":["X/","XX/","XXX/","XXXX/"],"areaCode":["X/","XX/","XXX/"],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XXX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
ilib.data.phonefmt_LU = {"international":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XXXX ","XXXXX "],"mobilePrefix":["X","XX ","XXX ","XXXX "],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XXXX ","XXXXX "],"mobilePrefix":["X","XX ","XXX ","XXXX "],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XXXX ","XXXXX "],"mobilePrefix":["X","XX ","XXX ","XXXX "],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"whole":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XXX ","XXXX ","XXXXX "],"mobilePrefix":["X","XX ","XXX ","XXXX "],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"areaCode":["X","XX ","XXX ","XX XX "],"subscriberNumber":["X","XX","XXX","XXXX","XXX XX","XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XXXX ","XXXXX "],"mobilePrefix":["X","XX ","XXX ","XXXX "],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"areaCode":["X","XX ","XXX ","XX XX "],"subscriberNumber":["X","XX","XXX","XX XX","XXX XX","XX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"komprimierte/comprimÃ©":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XXX ","XXXX ","XXXXX "],"mobilePrefix":["X","XX ","XXX ","XXXX "],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"Bindestrichen/tirets":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX-","XXX-","XXXX-","XXXXX-"],"mobilePrefix":["X-","XX-","XXX-","XXXX "],"serviceCode":["X-","XX-","XXX-","XXXX-","XXXXX-"],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
ilib.data.phonefmt_IT = {"international":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","emergency":"XXX ","mobilePrefix":["X ","XX ","XXX "],"areaCode":["X ","XX ","XXX "],"serviceCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X ","emergency":"XXX ","mobilePrefix":["X ","XX ","XXX "],"areaCode":["X ","XX ","XXX "],"serviceCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X ","emergency":"XXX ","mobilePrefix":["X ","XX ","XXX "],"areaCode":["X ","XX ","XXX "],"serviceCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"06 12345678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","emergency":"XXX ","areaCode":["X ","XX ","XXX "],"serviceCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"trattini":{"example":"06-12345678","iddPrefix":["X","XX "],"countryCode":["X-","XX-","XXX-"],"trunkAccess":"X","emergency":"XXX ","areaCode":["X-","XX-","XXX-"],"serviceCode":["X-","XX-","XXX-"],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"slash":{"example":"06/12345678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":"X","emergency":"XXX ","areaCode":["X/","XX/","XXX/"],"serviceCode":["X/","XX/","XXX/"],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
ilib.data.phonefmt_KR = {"international":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX ","XXXXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"mobilePrefix":["X-","XX-"],"areaCode":["X ","XX "],"serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX","XXX-"],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX ","XXXXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":["X-","XX-"],"subscriberNumber":["X","XX","XXX","XXXX","XXX-XX","XXX-XXX","XXX-XXXX","XXXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"cic":["X","XX","XXX","XXXX ","XXXXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"mobilePrefix":["X ","XX "],"areaCode":["X ","XX "],"serviceCode":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"033-1234-5678","partial":{"iddPrefix":["X","XX-","XXX-"],"countryCode":["X ","XX ","XXX "],"cic":["X","XX-","XXX-","XXXX-"],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XX-","areaCode":["X-","XX-"],"serviceCode":["X-","XX-","XXX-","XXXX-"],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX","XXXX-XXXX"],"extension":["-X","-XX","-XXX","-XXXX","-XXXXX"]},"whole":{"iddPrefix":["X","XX-","XXX-"],"countryCode":["X ","XX ","XXX "],"cic":["X","XX-","XXX-","XXXX-"],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XX-","areaCode":["X-","XX-"],"serviceCode":["X-","XX-","XXX-","XXXX-"],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXX-XXXX","XXXX-XXXX"],"extension":["-X","-XX","-XXX","-XXXX","-XXXXX"]}},"ë¸ë¼ì¼":{"example":"(033) 1234-5678","iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"(X","mobilePrefix":"XX)","areaCode":["X) ","XX) "],"serviceCode":["X) ","XX) "],"cic":["X) ","XX) ","XXX) ","XXXX) "],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX","XXXX-XXXX"],"extension":["-X","-XX","-XXX","-XXXX","-XXXXX"]},"ì ":{"example":"033.1234.5678","iddPrefix":["X","XX.","XXX."],"countryCode":["X ","XX ","XXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XX.","areaCode":["X.","XX."],"serviceCode":["X.","XX."],"cic":["X.","XX.","XXX.","XXXX."],"subscriberNumber":["X","XX","XXX","XXX.X","XXX.XX","XXX.XXX","XXX.XXXX","XXXX.XXXX"],"extension":[".X",".XX",".XXX",".XXXX",".XXXXX"]},"ê³µê°":{"example":"033 1234 5678","iddPrefix":["X","XX ","XXX "],"countryCode":["X ","XX ","XXX "],"emergency":["X","XX","XXX ","XXXX ","XXXXX "],"trunkAccess":"X","mobilePrefix":"XX ","areaCode":["X ","XX "],"serviceCode":["X ","XX "],"cic":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"]}};
ilib.data.phonefmt_CN = {"international":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["X","XX "],"emergency":"XXX ","mobilePrefix":["X ","XX ","XXX ","XXXX "],"areaCode":["X ","XX ","XXX ","XXXX "],"serviceCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["X","XX "],"emergency":"XXX ","mobilePrefix":["X ","XX ","XXX ","XXXX "],"areaCode":["X ","XX ","XXX ","XXXX "],"serviceCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"trunkAccess":["X","XX "],"emergency":"XXX ","mobilePrefix":["X ","XX ","XXX ","XXXX "],"areaCode":["X ","XX ","XXX ","XXXX "],"serviceCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"010 12345678","iddPrefix":["X","XX "],"countryCode":["X ","XX ","XXX "],"emergency":"XXX ","trunkAccess":["X","XX "],"areaCode":["X ","XX ","XXX ","XXXX "],"serviceCode":["X ","XX ","XXX "],"mobilePrefix":["X ","XX ","XXX ","XXXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"ç ´æå·":{"example":"010-12345678","iddPrefix":["X","XX-"],"countryCode":["X-","XX-","XXX-"],"emergency":"XXX ","trunkAccess":["X","XX-"],"areaCode":["X-","XX-","XXX-","XXXX-"],"serviceCode":["X-","XX-","XXX-"],"mobilePrefix":["X-","XX-","XXX-","XXXX-"],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
ilib.data.phonefmt_NL = {"international":{"iddPrefix":["X","XX "],"trunkAccess":"","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XX XX ","XX XXX "],"mobilePrefix":["X","XX "],"serviceCode":["X","XX ","XXX ","XXXX "],"areaCode":["X","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"mobile":{"iddPrefix":["X","XX "],"trunkAccess":"X","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XX XX ","XX XXX "],"mobilePrefix":["X ","XX "],"serviceCode":["X","XX ","XXX ","XXXX "],"areaCode":["X","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"internationalmobile":{"iddPrefix":["X","XX "],"trunkAccess":"","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XX XX ","XX XXX "],"mobilePrefix":["X ","XX "],"serviceCode":["X","XX ","XXX ","XXXX "],"areaCode":["X","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"service":{"iddPrefix":["X","XX "],"trunkAccess":"X","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"areaCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"default":{"example":"(020) 123 4567","whole":{"iddPrefix":["X","XX "],"trunkAccess":"(X","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X) ","XX) ","XXX) ","XXXX) ","XXXXX) "],"areaCode":["X) ","XX) ","XXX) "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"partial":{"iddPrefix":["X","XX "],"trunkAccess":"(X","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X) ","XX) ","XXX) ","XXXX) ","XXXXX) "],"areaCode":["X) ","XX) ","XXX) "],"subscriberNumber":["X","XX","XXX","XXX X","XXX XX","XXX XXX","XXX XXXX","XXXX XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}},"spatie":{"example":"020 123 4567","iddPrefix":["X","XX "],"trunkAccess":"X","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XX XX ","XX XXX "],"serviceCode":["X","XX ","XXX ","XXXX ","XXXXX "],"areaCode":["X","XX ","XXX "],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XXX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"gecomprimeerd":{"example":"020 1234567","iddPrefix":["X","XX "],"trunkAccess":"X","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XXX ","XXXX ","XXXXX "],"serviceCode":["X ","XX ","XXX ","XXXX ","XXXXX "],"areaCode":["X ","XX ","XXX "],"subscriberNumber":["X","XX","XXX","XXXX","XXXXX","XXXXXX","XXXXXXX","XXXXXXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"streepjes":{"example":"020-123-45-67","iddPrefix":["X","XX "],"trunkAccess":"X","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"cic":["X","XX","XX-X","XX-XX","XX-XXX-"],"serviceCode":["X-","XX-","XXX-","XXXX-","XXXXX-"],"areaCode":["X-","XX-","XXX-"],"subscriberNumber":["X","XX","XXX","XXX-X","XXX-XX","XXX-XXX","XXX-XXXX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]},"japen":{"example":"020/123 45 67","iddPrefix":["X","XX "],"trunkAccess":"X","emergency":"XXX ","countryCode":["X ","XX ","XXX "],"cic":["X","XX ","XX X ","XX XX ","XX XXX/"],"serviceCode":["X/","XX/","XXX/","XXXX/","XXXXX/"],"areaCode":["X/","XX/","XXX/"],"subscriberNumber":["X","XX","XX X","XX XX","XX XX X","XX XX XX","XXX XX XX"],"extension":[" X"," XX"," XXX"," XXXX"," XXXXX"," XXXXXX"," XXXXXXX"]}};
/*
 * phonefmt.js - Represent a phone number formatter.
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
localeinfo.js
phone/numplan.js
phone/phonenum.js
*/

// !data phonefmt

/**
 * @class
 * Create a new phone number formatter object that formats numbers according to the parameters.<p>
 * 
 * The options object can contain zero or more of the following parameters:
 *
 * <ul>
 * <li><i>locale</i> locale to use to format this number, or undefined to use the default locale
 * <li><i>style</i> the name of style to use to format numbers, or undefined to use the default style
 * <li><i>mcc</i> the MCC of the country to use if the number is a local number and the country code is not known
 *
 * <li><i>onLoad</i> - a callback function to call when the locale data is fully loaded and the address has been 
 * parsed. When the onLoad option is given, the address formatter object 
 * will attempt to load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 *
 * Some regions have more than one style of formatting, and the style parameter
 * selects which style the user prefers. An array of style names that this locale
 * supports can be found by calling {@link ilib.PhoneFmt.getAvailableStyles}. 
 * Example phone numbers can be retrieved for each style by calling 
 * {@link ilib.PhoneFmt.getStyleExample}.
 * <p>
 *
 * If the MCC is given, numbers will be formatted in the manner of the country
 * specified by the MCC. If it is not given, but the locale is, the manner of
 * the country in the locale will be used. If neither the locale or MCC are not given,
 * then the country of the current ilib locale is used. 
 *
 * @constructor
 * @param {Object} options properties that control how this formatter behaves
 */
ilib.PhoneFmt = function(options) {
	this.sync = true;
	this.styleName = 'default',
	this.loadParams = {};

	var locale = new ilib.Locale();

	if (options) {
		if (options.locale) {
			locale = options.locale;
		}

		if (typeof(options.sync) !== 'undefined') {
			this.sync = (options.sync == true);
		}

		if (options.loadParams) {
			this.loadParams = options.loadParams;
		}

		if (options.style) {
			this.style = options.style;
		}
	}

	new ilib.Locale.PhoneLoc({
		locale: locale,
		mcc: options && options.mcc,
		countryCode: options && options.countryCode,
		onLoad: ilib.bind(this, function (data) {
			/** @type {ilib.Locale.PhoneLoc} */
			this.locale = data;

			new ilib.NumPlan({
				locale: this.locale,
				sync: this.sync,
				loadParms: this.loadParams,
				onLoad: ilib.bind(this, function (plan) {
					/** @type {ilib.NumPlan} */
					this.plan = plan;

					ilib.loadData({
						name: "phonefmt.json",
						object: ilib.PhoneFmt,
						locale: this.locale, 
						sync: this.sync,
						loadParams: ilib.merge(this.loadParams, {
							returnOne: true
						}),
						callback: ilib.bind(this, function (fmtdata) {
							this.fmtdata = fmtdata;
							
							if (options && typeof(options.onLoad) === 'function') {
								options.onLoad(this);
							}
						})
					});
				})
			});
		})
	});
};

ilib.PhoneFmt.prototype = {
	/**
	 * 
	 * @protected
	 * @param {string} part
	 * @param {Object} formats
	 * @param {boolean} mustUseAll
	 */
	_substituteDigits: function(part, formats, mustUseAll) {
		var formatString,
			formatted = "",
			partIndex = 0,
			i;

		// console.info("Globalization.Phone._substituteDigits: typeof(formats) is " + typeof(formats));
		if (!part) {
			return formatted;
		}

		if (typeof(formats) === "object") {
			if (part.length > formats.length) {
				// too big, so just use last resort rule.
				throw "part " + part + " is too big. We do not have a format template to format it.";
			}
			// use the format in this array that corresponds to the digit length of this
			// part of the phone number
			formatString = formats[part.length-1];
			// console.info("Globalization.Phone._substituteDigits: formats is an Array: " + JSON.stringify(formats));
		} else {
			formatString = formats;
		}

		for (i = 0; i < formatString.length; i++) {
			if (formatString.charAt(i) === "X") {
				formatted += part.charAt(partIndex);
				partIndex++;
			} else {
				formatted += formatString.charAt(i);
			}
		}
		
		if (mustUseAll && partIndex < part.length-1) {
			// didn't use the whole thing in this format? Hmm... go to last resort rule
			throw "too many digits in " + part + " for format " + formatString;
		}
		
		return formatted;
	},
	
	/**
	 * Returns the style with the given name, or the default style if there
	 * is no style with that name.
	 * @protected
	 * @return {{example:string,whole:Object.<string,string>,partial:Object.<string,string>}|Object.<string,string>}
	 */
	_getStyle: function (name, fmtdata) {
		return fmtdata[name] || fmtdata["default"];
	},

	/**
	 * Do the actual work of formatting the phone number starting at the given
	 * field in the regular field order.
	 * 
	 * @param {!ilib.PhoneNumber} number
	 * @param {{
	 *   partial:boolean,
	 *   style:string,
	 *   mcc:string,
	 *   locale:(string|ilib.Locale),
	 *   sync:boolean,
	 *   loadParams:Object,
	 *   onLoad:function(string)
	 * }} options Parameters which control how to format the number
	 * @param {number} startField
	 */
	_doFormat: function(number, options, startField, locale, fmtdata, callback) {
		var sync = true,
			loadParams = {},
			temp, 
			templates, 
			fieldName, 
			countryCode, 
			isWhole, 
			style,
			formatted = "",
			styleTemplates;
	
		if (options) {
			if (typeof(options.sync) !== 'undefined') {
				sync = (options.sync == true);				
			}
		
			if (options.loadParams) {
				loadParams = options.loadParams;
			}
		}
	
		style = this.style; // default style for this formatter

		// figure out what style to use for this type of number
		if (number.countryCode) {
			// dialing from outside the country
			// check to see if it to a mobile number because they are often formatted differently
			style = (number.mobilePrefix) ? "internationalmobile" : "international";
		} else if (number.mobilePrefix !== undefined) {
			style = "mobile";
		} else if (number.serviceCode !== undefined && typeof(fmtdata["service"]) !== 'undefined') {
			// if there is a special format for service numbers, then use it
			style = "service";
		}

		isWhole = (!options || !options.partial);
		styleTemplates = this._getStyle(style, fmtdata);
		
		// console.log("Style ends up being " + style + " and using subtype " + (isWhole ? "whole" : "partial"));
		styleTemplates = (isWhole ? styleTemplates.whole : styleTemplates.partial) || styleTemplates;

		for (var i = startField; i < ilib.PhoneNumber._fieldOrder.length; i++) {
			fieldName = ilib.PhoneNumber._fieldOrder[i];
			// console.info("format: formatting field " + fieldName + " value: " + number[fieldName]);
			if (number[fieldName] !== undefined) {
				if (styleTemplates[fieldName] !== undefined) {
					templates = styleTemplates[fieldName];
					if (fieldName === "trunkAccess") {
						if (number.areaCode === undefined && number.serviceCode === undefined && number.mobilePrefix === undefined) {
							templates = "X";
						}
					}
					// console.info("format: formatting field " + fieldName + " with templates " + JSON.stringify(templates));
					temp = this._substituteDigits(number[fieldName], templates, (fieldName === "subscriberNumber"));
					// console.info("format: formatted is: " + temp);
					formatted += temp;
	
					if (fieldName === "countryCode") {
						// switch to the new country to format the rest of the number
						countryCode = number.countryCode.replace(/[wWpPtT\+#\*]/g, '');	// fix for NOV-108200

						new ilib.Locale.PhoneLoc({
							locale: this.locale,
							sync: sync,							
							loadParms: loadParams,
							countryCode: countryCode,
							onLoad: ilib.bind(this, function (/** @type {ilib.Locale.PhoneLoc} */ locale) {
								ilib.loadData({
									name: "phonefmt.json",
									object: ilib.PhoneFmt,
									locale: locale,
									sync: sync,
									loadParams: ilib.merge(loadParams, {
										returnOne: true
									}),
									callback: ilib.bind(this, function (fmtdata) {
										// console.info("format: switching to region " + locale.region + " and style " + style + " to format the rest of the number ");
										
										var subfmt = "";

										this._doFormat(number, options, i+1, locale, fmtdata, function (subformat) {
											subfmt = subformat;
											if (typeof(callback) === 'function') {
												callback(formatted + subformat);
											}
										});
										
										formatted += subfmt;
									})
								});
							})
						});
						return formatted;
					}
				} else {
					//console.warn("PhoneFmt.format: cannot find format template for field " + fieldName + ", region " + locale.region + ", style " + style);
					// use default of "minimal formatting" so we don't miss parts because of bugs in the format templates
					formatted += number[fieldName];
				}
			}
		}
		
		if (typeof(callback) === 'function') {
			callback(formatted);
		}

		return formatted;
	},
	
	/**
	 * Format the parts of a phone number appropriately according to the settings in 
	 * this formatter instance.
	 *  
	 * The options can contain zero or more of these properties:
	 * 
	 * <ul>
	 * <li><i>partial</i> boolean which tells whether or not this phone number 
	 * represents a partial number or not. The default is false, which means the number 
	 * represents a whole number. 
	 * <li><i>style</i> style to use to format the number, if different from the 
	 * default style or the style specified in the constructor
	 * <li><i>locale</i> The locale with which to parse the number. This gives a clue as to which
     * numbering plan to use.
     * <li><i>mcc</i> The mobile carrier code (MCC) associated with the carrier that the phone is 
     * currently connected to, if known. This also can give a clue as to which numbering plan to
     * use
     * <li><i>onLoad</i> - a callback function to call when the date format object is fully 
     * loaded. When the onLoad option is given, the DateFmt object will attempt to
     * load any missing locale data using the ilib loader callback.
     * When the constructor is done (even if the data is already preassembled), the 
     * onLoad function is called with the current instance as a parameter, so this
     * callback can be used with preassembled or dynamic loading or a mix of the two.
     * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
     * asynchronously. If this option is given as "false", then the "onLoad"
     * callback must be given, as the instance returned from this constructor will
     * not be usable for a while.
     * <li><i>loadParams</i> - an object containing parameters to pass to the 
     * loader callback function when locale data is missing. The parameters are not
     * interpretted or modified in any way. They are simply passed along. The object 
     * may contain any property/value pairs as long as the calling code is in
     * agreement with the loader callback function as to what those parameters mean.
	 * </ul>
	 *      
	 * The partial parameter specifies whether or not the phone number contains
	 * a partial phone number or if it is a whole phone number. A partial 
	 * number is usually a number as the user is entering it with a dial pad. The
	 * reason is that certain types of phone numbers should be formatted differently
	 * depending on whether or not it represents a whole number. Specifically, SMS
	 * short codes are formatted differently.<p>
	 * 
	 * Example: a subscriber number of "48773" in the US would get formatted as:
	 * 
	 * <ul>
	 * <li>partial: 487-73  (perhaps the user is in the process of typing a whole phone 
	 * number such as 487-7379)
	 * <li>whole:   48773   (this is the entire SMS short code)
	 * </ul>
	 * 
	 * Any place in the UI where the user types in phone numbers, such as the keypad in 
	 * the phone app, should pass in partial: true to this formatting routine. All other 
	 * places, such as the call log in the phone app, should pass in partial: false, or 
	 * leave the partial flag out of the parameters entirely. 
	 * 
	 * @param {!ilib.PhoneNumber} number object containing the phone number to format
	 * @param {{
	 *   partial:boolean,
	 *   style:string,
	 *   mcc:string,
	 *   locale:(string|ilib.Locale),
	 *   sync:boolean,
	 *   loadParams:Object,
	 *   onLoad:function(string)
	 * }} options Parameters which control how to format the number
	 * @return {string} Returns the formatted phone number as a string.
	 */
	format: function (number, options) {
		var formatted = "",
		    callback;

		callback = options && options.onLoad;

		try {
			this._doFormat(number, options, 0, this.locale, this.fmtdata, function (fmt) {
				formatted = fmt;
				
				if (typeof(callback) === 'function') {
					callback(fmt);
				}
			});
		} catch (e) {
			if (typeof(e) === 'string') { 
				// console.warn("caught exception: " + e + ". Using last resort rule.");
				// if there was some exception, use this last resort rule
				formatted = "";
				for (var field in ilib.PhoneNumber._fieldOrder) {
					if (typeof field === 'string' && typeof ilib.PhoneNumber._fieldOrder[field] === 'string' && number[ilib.PhoneNumber._fieldOrder[field]] !== undefined) {
						// just concatenate without any formatting
						formatted += number[ilib.PhoneNumber._fieldOrder[field]];
						if (ilib.PhoneNumber._fieldOrder[field] === 'countryCode') {
							formatted += ' ';		// fix for NOV-107894
						}
					}
				}
			} else {
				throw e;
			}
			
			if (typeof(callback) === 'function') {
				callback(formatted);
			}
		}
		return formatted;
	},
	
	/**
	 * Return an array of names of all available styles that can be used with the current 
	 * formatter.
	 * @return {Array.<string>} an array of names of styles that are supported by this formatter
	 */
	getAvailableStyles: function () {
		var ret = [],
			style;

		if (this.fmtdata) {
			for (style in this.fmtdata) {
				if (this.fmtdata[style].example) {
					ret.push(style);
				}
			}
		}
		return ret;
	},
	
	/**
	 * Return an example phone number formatted with the given style.
	 * 
	 * @param {string|undefined} style style to get an example of, or undefined to use
	 * the current default style for this formatter
	 * @return {string|undefined} an example phone number formatted according to the 
	 * given style, or undefined if the style is not recognized or does not have an 
	 * example 
	 */
	getStyleExample: function (style) {
		return this.fmtdata[style].example || undefined;
	}
};

ilib.data.iddarea = {"1":{"sn":"North America","ln":"North America and the Caribbean Islands"},"7":{"sn":"Russia","ln":"Russia, Kazakhstan"},"20":{"sn":"Egypt","ln":"Egypt"},"27":{"sn":"South Africa","ln":"South Africa"},"28":{"sn":"Unknown Country","ln":"Unknown Country"},"30":{"sn":"Greece","ln":"Greece"},"31":{"sn":"Netherlands","ln":"Netherlands"},"32":{"sn":"Belgium","ln":"Belgium"},"33":{"sn":"France","ln":"France"},"34":{"sn":"Spain","ln":"Spain"},"36":{"sn":"Hungary","ln":"Hungary"},"39":{"sn":"Italy","ln":"Italy, Vatican City"},"40":{"sn":"Romania","ln":"Romania"},"41":{"sn":"Switzerland","ln":"Switzerland"},"43":{"sn":"Austria","ln":"Austria"},"44":{"sn":"United Kingdom","ln":"United Kingdom, Guernsey, Isle of Man, Jersey"},"45":{"sn":"Denmark","ln":"Denmark"},"46":{"sn":"Sweden","ln":"Sweden"},"47":{"sn":"Norway","ln":"Norway, Svalbard and Jan Mayen"},"48":{"sn":"Poland","ln":"Poland"},"49":{"sn":"Germany","ln":"Germany"},"51":{"sn":"Peru","ln":"Peru"},"52":{"sn":"Mexico","ln":"Mexico"},"53":{"sn":"Cuba","ln":"Cuba"},"54":{"sn":"Argentina","ln":"Argentina"},"55":{"sn":"Brazil","ln":"Brazil"},"56":{"sn":"Chile","ln":"Chile"},"57":{"sn":"Colombia","ln":"Colombia"},"58":{"sn":"Venezuela","ln":"Venezuela"},"60":{"sn":"Malaysia","ln":"Malaysia"},"61":{"sn":"Australia","ln":"Australia, Christmas Island, Cocos Islands"},"62":{"sn":"Indonesia","ln":"Indonesia"},"63":{"sn":"Philippines","ln":"Philippines"},"64":{"sn":"New Zealand","ln":"New Zealand"},"65":{"sn":"Singapore","ln":"Republic of Singapore"},"66":{"sn":"Thailand","ln":"Thailand"},"81":{"sn":"Japan","ln":"Japan"},"82":{"sn":"South Korea","ln":"South Korea"},"83":{"sn":"Unknown Country","ln":"Unknown Country"},"84":{"sn":"Vietnam","ln":"Vietnam"},"86":{"sn":"China","ln":"People's Republic of China"},"89":{"sn":"Unknown Country","ln":"Unknown Country"},"90":{"sn":"Turkey","ln":"Turkey, Turkish Republic of Northern Cyprus"},"91":{"sn":"India","ln":"India"},"92":{"sn":"Pakistan","ln":"Pakistan"},"93":{"sn":"Afghanistan","ln":"Afghanistan"},"94":{"sn":"Sri Lanka","ln":"Sri Lanka"},"95":{"sn":"Burma","ln":"Burma"},"98":{"sn":"Iran","ln":"Iran"},"210":{"sn":"Unknown Country","ln":"Unknown Country"},"211":{"sn":"Unknown Country","ln":"Unknown Country"},"212":{"sn":"Morocco","ln":"Morocco, Western Sahara"},"213":{"sn":"Algeria","ln":"Algeria"},"214":{"sn":"Unknown Country","ln":"Unknown Country"},"215":{"sn":"Unknown Country","ln":"Unknown Country"},"216":{"sn":"Tunisia","ln":"Tunisia"},"217":{"sn":"Unknown Country","ln":"Unknown Country"},"218":{"sn":"Libya","ln":"Libya"},"219":{"sn":"Unknown Country","ln":"Unknown Country"},"220":{"sn":"Gambia","ln":"The Gambia"},"221":{"sn":"Senegal","ln":"Senegal"},"222":{"sn":"Mauritania","ln":"Mauritania"},"223":{"sn":"Mali","ln":"Mali"},"224":{"sn":"Guinea","ln":"Guinea"},"225":{"sn":"CÃ´te d'Ivoire","ln":"CÃ´te d'Ivoire"},"226":{"sn":"Burkina Faso","ln":"Burkina Faso"},"227":{"sn":"Niger","ln":"Niger"},"228":{"sn":"Togo","ln":"Togo"},"229":{"sn":"Benin","ln":"Benin"},"230":{"sn":"Mauritius","ln":"Mauritius"},"231":{"sn":"Liberia","ln":"Liberia"},"232":{"sn":"Sierra Leone","ln":"Sierra Leone"},"233":{"sn":"Ghana","ln":"Ghana"},"234":{"sn":"Nigeria","ln":"Nigeria"},"235":{"sn":"Chad","ln":"Chad"},"236":{"sn":"Central African Republic","ln":"Central African Republic"},"237":{"sn":"Cameroon","ln":"Cameroon"},"238":{"sn":"Cape Verde","ln":"Cape Verde"},"239":{"sn":"SÃ£o TomÃ© and PrÃ­ncipe","ln":"SÃ£o TomÃ© and PrÃ­ncipe"},"240":{"sn":"Equatorial Guinea","ln":"Equatorial Guinea"},"241":{"sn":"Gabon","ln":"Gabon"},"242":{"sn":"Republic of Congo","ln":"Republic of Congo"},"243":{"sn":"DRC","ln":"Democratic Republic of the Congo"},"244":{"sn":"Angola","ln":"Angola"},"245":{"sn":"Guinea-Bissau","ln":"Guinea-Bissau"},"246":{"sn":"British Indian Ocean","ln":"British Indian Ocean Territory"},"247":{"sn":"Ascension","ln":"Ascension Island"},"248":{"sn":"Seychelles","ln":"Seychelles"},"249":{"sn":"Sudan","ln":"Sudan"},"250":{"sn":"Rwanda","ln":"Rwanda"},"251":{"sn":"Ethiopia","ln":"Ethiopia"},"252":{"sn":"Somalia","ln":"Somalia, Somaliland"},"253":{"sn":"Djibouti","ln":"Djibouti"},"254":{"sn":"Kenya","ln":"Kenya"},"255":{"sn":"Tanzania","ln":"Tanzania"},"256":{"sn":"Uganda","ln":"Uganda"},"257":{"sn":"Burundi","ln":"Burundi"},"258":{"sn":"Mozambique","ln":"Mozambique"},"259":{"sn":"Unknown Country","ln":"Unknown Country"},"260":{"sn":"Zambia","ln":"Zambia"},"261":{"sn":"Madagascar","ln":"Madagascar"},"262":{"sn":"RÃ©union","ln":"RÃ©union, Mayotte"},"263":{"sn":"Zimbabwe","ln":"Zimbabwe"},"264":{"sn":"Namibia","ln":"Namibia"},"265":{"sn":"Malawi","ln":"Malawi"},"266":{"sn":"Lesotho","ln":"Lesotho"},"267":{"sn":"Botswana","ln":"Botswana"},"268":{"sn":"Swaziland","ln":"Swaziland"},"269":{"sn":"Comoros","ln":"Comoros"},"290":{"sn":"Saint Helena","ln":"Saint Helena, Tristan da Cunha"},"291":{"sn":"Eritrea","ln":"Eritrea"},"292":{"sn":"Unknown Country","ln":"Unknown Country"},"293":{"sn":"Unknown Country","ln":"Unknown Country"},"294":{"sn":"Unknown Country","ln":"Unknown Country"},"295":{"sn":"Unknown Country","ln":"Unknown Country"},"296":{"sn":"Unknown Country","ln":"Unknown Country"},"297":{"sn":"Aruba","ln":"Aruba"},"298":{"sn":"Faroe Islands","ln":"Faroe Islands"},"299":{"sn":"Greenland","ln":"Greenland"},"350":{"sn":"Gibraltar","ln":"Gibraltar"},"351":{"sn":"Portugal","ln":"Portugal"},"352":{"sn":"Luxembourg","ln":"Luxembourg"},"353":{"sn":"Ireland","ln":"Republic of Ireland"},"354":{"sn":"Iceland","ln":"Iceland"},"355":{"sn":"Albania","ln":"Albania"},"356":{"sn":"Malta","ln":"Malta"},"357":{"sn":"Cyprus","ln":"Cyprus"},"358":{"sn":"Finland","ln":"Finland, Ãland Islands"},"359":{"sn":"Bulgaria","ln":"Bulgaria"},"370":{"sn":"Lithuania","ln":"Lithuania"},"371":{"sn":"Latvia","ln":"Latvia"},"372":{"sn":"Estonia","ln":"Estonia"},"373":{"sn":"Moldova","ln":"Moldova"},"374":{"sn":"Armenia","ln":"Armenia, Nagorno-Karabakh"},"375":{"sn":"Belarus","ln":"Belarus"},"376":{"sn":"Andorra","ln":"Andorra"},"377":{"sn":"Monaco","ln":"Monaco"},"378":{"sn":"San Marino","ln":"San Marino"},"379":{"sn":"Vatican City","ln":"Vatican City"},"380":{"sn":"Ukraine","ln":"Ukraine"},"381":{"sn":"Serbia","ln":"Serbia"},"382":{"sn":"Montenegro","ln":"Montenegro"},"383":{"sn":"Unknown Country","ln":"Unknown Country"},"384":{"sn":"Unknown Country","ln":"Unknown Country"},"385":{"sn":"Croatia","ln":"Croatia"},"386":{"sn":"Slovenia","ln":"Slovenia"},"387":{"sn":"Bosnia and Herzegovina","ln":"Bosnia and Herzegovina"},"388":{"sn":"European Telephony","ln":"European Telephony Numbering Space"},"389":{"sn":"FYRoM","ln":"Former Yugoslav Republic of Macedonia"},"420":{"sn":"Czech Republic","ln":"Czech Republic"},"421":{"sn":"Slovakia","ln":"Slovakia"},"422":{"sn":"Unknown Country","ln":"Unknown Country"},"423":{"sn":"Liechtenstein","ln":"Liechtenstein"},"424":{"sn":"Unknown Country","ln":"Unknown Country"},"425":{"sn":"Unknown Country","ln":"Unknown Country"},"426":{"sn":"Unknown Country","ln":"Unknown Country"},"427":{"sn":"Unknown Country","ln":"Unknown Country"},"428":{"sn":"Unknown Country","ln":"Unknown Country"},"429":{"sn":"Unknown Country","ln":"Unknown Country"},"500":{"sn":"Falklands","ln":"Falkland Islands"},"501":{"sn":"Belize","ln":"Belize"},"502":{"sn":"Guatemala","ln":"Guatemala"},"503":{"sn":"El Salvador","ln":"El Salvador"},"504":{"sn":"Honduras","ln":"Honduras"},"505":{"sn":"Nicaragua","ln":"Nicaragua"},"506":{"sn":"Costa Rica","ln":"Costa Rica"},"507":{"sn":"Panama","ln":"Panama"},"508":{"sn":"St. Pierre and Miquelon","ln":"St. Pierre and Miquelon"},"509":{"sn":"Haiti","ln":"Haiti"},"590":{"sn":"Guadeloupe","ln":"Guadeloupe, Saint BarthÃ©lemy, Saint Martin"},"591":{"sn":"Bolivia","ln":"Bolivia"},"592":{"sn":"Guyana","ln":"Guyana"},"593":{"sn":"Ecuador","ln":"Ecuador"},"594":{"sn":"French Guiana","ln":"French Guiana"},"595":{"sn":"Paraguay","ln":"Paraguay"},"596":{"sn":"Martinique","ln":"Martinique"},"597":{"sn":"Suriname","ln":"Suriname"},"598":{"sn":"Uruguay","ln":"Uruguay"},"599":{"sn":"Netherlands Antilles","ln":"Netherlands Antilles"},"670":{"sn":"East Timor","ln":"East Timor"},"671":{"sn":"Unknown Country","ln":"Unknown Country"},"672":{"sn":"Norfolk Island","ln":"Norfolk Island, Australian Antarctic Territory"},"673":{"sn":"Brunei","ln":"Brunei Darussalam"},"674":{"sn":"Nauru","ln":"Nauru"},"675":{"sn":"Papua New Guinea","ln":"Papua New Guinea"},"676":{"sn":"Tonga","ln":"Tonga"},"677":{"sn":"Solomon Islands","ln":"Solomon Islands"},"678":{"sn":"Vanuatu","ln":"Vanuatu"},"679":{"sn":"Fiji","ln":"Fiji"},"680":{"sn":"Palau","ln":"Palau"},"681":{"sn":"Wallis and Futuna","ln":"Wallis and Futuna"},"682":{"sn":"Cook Islands","ln":"Cook Islands"},"683":{"sn":"Niue","ln":"Niue"},"684":{"sn":"Unknown Country","ln":"Unknown Country"},"685":{"sn":"Samoa","ln":"Samoa"},"686":{"sn":"Kiribati","ln":"Kiribati"},"687":{"sn":"New Caledonia","ln":"New Caledonia"},"688":{"sn":"Tuvalu","ln":"Tuvalu"},"689":{"sn":"French Polynesia","ln":"French Polynesia"},"690":{"sn":"Tokelau","ln":"Tokelau"},"691":{"sn":"Micronesia","ln":"Federated States of Micronesia"},"692":{"sn":"Marshall Islands","ln":"Marshall Islands"},"693":{"sn":"Unknown Country","ln":"Unknown Country"},"694":{"sn":"Unknown Country","ln":"Unknown Country"},"695":{"sn":"Unknown Country","ln":"Unknown Country"},"696":{"sn":"Unknown Country","ln":"Unknown Country"},"697":{"sn":"Unknown Country","ln":"Unknown Country"},"698":{"sn":"Unknown Country","ln":"Unknown Country"},"699":{"sn":"Unknown Country","ln":"Unknown Country"},"800":{"sn":"Freephone","ln":"Universal international freephone number"},"801":{"sn":"Unknown Country","ln":"Unknown Country"},"802":{"sn":"Unknown Country","ln":"Unknown Country"},"803":{"sn":"Unknown Country","ln":"Unknown Country"},"804":{"sn":"Unknown Country","ln":"Unknown Country"},"805":{"sn":"Unknown Country","ln":"Unknown Country"},"806":{"sn":"Unknown Country","ln":"Unknown Country"},"807":{"sn":"Unknown Country","ln":"Unknown Country"},"808":{"sn":"Shared Cost","ln":"Shared Cost Service"},"809":{"sn":"Unknown Country","ln":"Unknown Country"},"850":{"sn":"North Korea","ln":"North Korea"},"851":{"sn":"Unknown Country","ln":"Unknown Country"},"852":{"sn":"Hong Kong","ln":"Hong Kong"},"853":{"sn":"Macau","ln":"Macau"},"854":{"sn":"Unknown Country","ln":"Unknown Country"},"855":{"sn":"Cambodia","ln":"Cambodia"},"856":{"sn":"Laos","ln":"Laos"},"857":{"sn":"Unknown Country","ln":"Unknown Country"},"858":{"sn":"Unknown Country","ln":"Unknown Country"},"859":{"sn":"Unknown Country","ln":"Unknown Country"},"870":{"sn":"Inmarsat","ln":"Inmarsat"},"871":{"sn":"Unknown Country","ln":"Unknown Country"},"872":{"sn":"Pitcairn","ln":"Pitcairn"},"873":{"sn":"Unknown Country","ln":"Unknown Country"},"874":{"sn":"Unknown Country","ln":"Unknown Country"},"875":{"sn":"Unknown Country","ln":"Unknown Country"},"876":{"sn":"Unknown Country","ln":"Unknown Country"},"877":{"sn":"Unknown Country","ln":"Unknown Country"},"878":{"sn":"Universal Personal","ln":"Universal Personal Telecommunications"},"879":{"sn":"Unknown Country","ln":"Unknown Country"},"880":{"sn":"Bangladesh","ln":"Bangladesh"},"881":{"sn":"Global Satellite","ln":"Global Mobile Satellite System"},"882":{"sn":"International Networks","ln":"International Networks (country code)"},"883":{"sn":"National Rate","ln":"International National Rate Service"},"884":{"sn":"Unknown Country","ln":"Unknown Country"},"885":{"sn":"Unknown Country","ln":"Unknown Country"},"886":{"sn":"Taiwan","ln":"Republic of China"},"887":{"sn":"Unknown Country","ln":"Unknown Country"},"888":{"sn":"OCHA","ln":"OCHA"},"889":{"sn":"Unknown Country","ln":"Unknown Country"},"960":{"sn":"Maldives","ln":"Maldives"},"961":{"sn":"Lebanon","ln":"Lebanon"},"962":{"sn":"Jordan","ln":"Jordan"},"963":{"sn":"Syria","ln":"Syria"},"964":{"sn":"Iraq","ln":"Iraq"},"965":{"sn":"Kuwait","ln":"Kuwait"},"966":{"sn":"Saudi Arabia","ln":"Saudi Arabia"},"967":{"sn":"Yemen","ln":"Yemen"},"968":{"sn":"Oman","ln":"Oman"},"969":{"sn":"Unknown Country","ln":"Unknown Country"},"970":{"sn":"Palestinian Authority","ln":"Palestinian Authority"},"971":{"sn":"UAE","ln":"United Arab Emirates"},"972":{"sn":"Israel","ln":"Israel, Palestinian Authority"},"973":{"sn":"Bahrain","ln":"Bahrain"},"974":{"sn":"Qatar","ln":"Qatar"},"975":{"sn":"Bhutan","ln":"Bhutan"},"976":{"sn":"Mongolia","ln":"Mongolia"},"977":{"sn":"Nepal","ln":"Nepal"},"978":{"sn":"Unknown Country","ln":"Unknown Country"},"979":{"sn":"Premium Rate","ln":"International Premium Rate Service"},"990":{"sn":"Unknown Country","ln":"Unknown Country"},"991":{"sn":"ITPCS","ln":"ITPCS"},"992":{"sn":"Tajikistan","ln":"Tajikistan"},"993":{"sn":"Turkmenistan","ln":"Turkmenistan"},"994":{"sn":"Azerbaijan","ln":"Azerbaijan, Nagorno-Karabakh"},"995":{"sn":"Georgia","ln":"Georgia"},"996":{"sn":"Kyrgyzstan","ln":"Kyrgyzstan"},"997":{"sn":"Unknown Country","ln":"Unknown Country"},"998":{"sn":"Uzbekistan","ln":"Uzbekistan"},"999":{"sn":"Unknown Country","ln":"Unknown Country"}};
ilib.data.area_IN = {"11":{"ln":"New Delhi, New Delhi","sn":"New Delhi"},"20":{"ln":"Pune, Pune","sn":"Pune"},"22":{"ln":"Mumbai, Mumbai","sn":"Mumbai"},"33":{"ln":"Kolkata, Kolkata","sn":"Kolkata"},"40":{"ln":"Hyderabad Loc, Hyderabad","sn":"Hyderabad Loc"},"44":{"ln":"Chennai, Chennai","sn":"Chennai"},"79":{"ln":"Ahemdabad Local, Ahmedabad","sn":"Ahemdabad"},"80":{"ln":"Bangalore, Bangalore","sn":"Bangalore"},"120":{"ln":"Ghaziabad+Dadri, Ghaziabad","sn":"Ghaziabad+Dadri"},"121":{"ln":"Meerut, Meerut","sn":"Meerut"},"122":{"ln":"Hapur, Ghaziabad","sn":"Hapur"},"124":{"ln":"Gurgaon, Gurgaon","sn":"Gurgaon"},"129":{"ln":"Faridabad, Gurgaon","sn":"Faridabad"},"130":{"ln":"Sonipat, Sonipat","sn":"Sonipat"},"131":{"ln":"Muzaffar Nagar, Muzaffarnagar","sn":"Muzaffar Nagar"},"132":{"ln":"Saharanpur, Saharanpur","sn":"Saharanpur"},"135":{"ln":"Dehradun, Dehradun","sn":"Dehradun"},"141":{"ln":"Jaipur, Jaipur","sn":"Jaipur"},"144":{"ln":"Alwar, Alwar","sn":"Alwar"},"145":{"ln":"Ajmer, Ajmer","sn":"Ajmer"},"151":{"ln":"Bikaner (S), Bikaner","sn":"Bikaner (S)"},"154":{"ln":"Sriganganagar, Sriganganagar","sn":"Sriganganagar"},"160":{"ln":"Kharar, Ropar","sn":"Kharar"},"161":{"ln":"Ludhiana, Ludhiana","sn":"Ludhiana"},"164":{"ln":"Bhatinda, Bhatinda","sn":"Bhatinda"},"171":{"ln":"Ambala, Ambala","sn":"Ambala"},"172":{"ln":"Chandigarh, Chandigarh","sn":"Chandigarh"},"175":{"ln":"Patiala, Patiala","sn":"Patiala"},"177":{"ln":"Shimla, Shimla","sn":"Shimla"},"180":{"ln":"Panipat, Karnal","sn":"Panipat"},"181":{"ln":"Jallandhar, Jalandhar","sn":"Jallandhar"},"183":{"ln":"Amritsar, Amritsar","sn":"Amritsar"},"184":{"ln":"Karnal, Karnal","sn":"Karnal"},"186":{"ln":"Pathankot, Pathankot","sn":"Pathankot"},"191":{"ln":"Jammu, Jammu","sn":"Jammu"},"194":{"ln":"Srinagar, Srinagar","sn":"Srinagar"},"212":{"ln":"Chinchwad, Pune","sn":"Chinchwad"},"215":{"ln":"Navi Mumbai (Turbhe), Mumbai","sn":"Navi Mumbai"},"217":{"ln":"Sholapur, Sholapur","sn":"Sholapur"},"230":{"ln":"Khadakwasala, Pune","sn":"Khadakwasala"},"231":{"ln":"Kolhapur, Kolhapur","sn":"Kolhapur"},"233":{"ln":"Sangli, Sangli","sn":"Sangli"},"241":{"ln":"Ahmednagar, Ahmednagar","sn":"Ahmednagar"},"250":{"ln":"Bassein, Kalyan","sn":"Bassein"},"251":{"ln":"Kalyan, Kalyan","sn":"Kalyan"},"253":{"ln":"Nasikcity, Nasik","sn":"Nasikcity"},"257":{"ln":"Jalgaon, Jalgaon","sn":"Jalgaon"},"260":{"ln":"Vapi, Valsad","sn":"Vapi"},"261":{"ln":"Surat, Surat","sn":"Surat"},"265":{"ln":"Vadodara, Vadodara","sn":"Vadodara"},"268":{"ln":"Nadiad, Nadiad","sn":"Nadiad"},"278":{"ln":"Bhavnagar, Bhavnagar","sn":"Bhavnagar"},"281":{"ln":"Rajkot, Rajkot","sn":"Rajkot"},"285":{"ln":"Junagarh, Junagarh","sn":"Junagarh"},"286":{"ln":"Porbander, Junagarh","sn":"Porbander"},"288":{"ln":"Jamnagar, Jamnagar","sn":"Jamnagar"},"291":{"ln":"Jodhpur (E), Jodhpur","sn":"Jodhpur (E)"},"294":{"ln":"Girwa (Udaipur), Udaipur","sn":"Girwa"},"326":{"ln":"Dhanbad, Dhanbad","sn":"Dhanbad"},"341":{"ln":"Asansol, Asansol","sn":"Asansol"},"342":{"ln":"Burdwan, Asansol","sn":"Burdwan"},"343":{"ln":"Durgapur, Asansol","sn":"Durgapur"},"353":{"ln":"Siliguri, Darjeeling (Siliguri)","sn":"Siliguri"},"354":{"ln":"Darjeeling, Darjeeling (Siliguri)","sn":"Darjeeling"},"360":{"ln":"Itanagar, Arunachal-Pradesh (Zero)","sn":"Itanagar"},"361":{"ln":"Guwahati, Guwahati","sn":"Guwahati"},"364":{"ln":"Shillong, Meghalaya (Shillong)","sn":"Shillong"},"368":{"ln":"Passighat, Arunachal-Pradesh (Zero)","sn":"Passighat"},"369":{"ln":"Mokokchung, Nagaland (Kohima)","sn":"Mokokchung"},"370":{"ln":"Kohima, Nagaland (Kohima)","sn":"Kohima"},"372":{"ln":"Lungleh, Mizoram (Aizwal)","sn":"Lungleh"},"373":{"ln":"Dibrugarh, Tinsukia (Dibrugarh)","sn":"Dibrugarh"},"374":{"ln":"Tinsukhia, Tinsukia (Dibrugarh)","sn":"Tinsukhia"},"376":{"ln":"Jorhat, Jorhat","sn":"Jorhat"},"381":{"ln":"Agartala, Tripura (Agartala)","sn":"Agartala"},"385":{"ln":"Imphal, Manipur (Imphal)","sn":"Imphal"},"389":{"ln":"Aizawal-I, Mizoram (Aizwal)","sn":"Aizawal"},"413":{"ln":"Pondicherry, Pondichery","sn":"Pondicherry"},"416":{"ln":"Vellore, Vellore","sn":"Vellore"},"421":{"ln":"Tirupur, Coimbatore","sn":"Tirupur"},"422":{"ln":"Coimbatore, Coimbatore","sn":"Coimbatore"},"423":{"ln":"Ootacamund, Ooty","sn":"Ootacamund"},"424":{"ln":"Erode, Erode","sn":"Erode"},"427":{"ln":"Salem, Salem","sn":"Salem"},"431":{"ln":"Trichy, Trichy","sn":"Trichy"},"435":{"ln":"Kumbakonam, Thanjavur","sn":"Kumbakonam"},"451":{"ln":"Dindigul, Madurai","sn":"Dindigul"},"452":{"ln":"Madurai, Madurai","sn":"Madurai"},"461":{"ln":"Tuticorin, Tuticorin","sn":"Tuticorin"},"462":{"ln":"Tirunelvelli, Tirunelvelli","sn":"Tirunelvelli"},"469":{"ln":"Tiruvalla, Tiruvalla","sn":"Tiruvalla"},"470":{"ln":"Attingal, Thiruvananthapuram","sn":"Attingal"},"471":{"ln":"Thiruvananthapuram, Thiruvananthapuram","sn":"Thiruvananthapuram"},"474":{"ln":"Quilon, Quilon","sn":"Quilon"},"475":{"ln":"Punalur, Quilon","sn":"Punalur"},"476":{"ln":"Karunagapally, Quilon","sn":"Karunagapally"},"477":{"ln":"Alleppey, Alleppy","sn":"Alleppey"},"478":{"ln":"Shertallai, Alleppy","sn":"Shertallai"},"479":{"ln":"Mavelikkara, Alleppy","sn":"Mavelikkara"},"480":{"ln":"Irinjalakuda, Trichur","sn":"Irinjalakuda"},"481":{"ln":"Kottayam, Kottayam","sn":"Kottayam"},"483":{"ln":"Manjeri, Calicut (Kozhikode)","sn":"Manjeri"},"484":{"ln":"Ernakulam, Ernakulam","sn":"Ernakulam"},"485":{"ln":"Muvattupuzha, Ernakulam","sn":"Muvattupuzha"},"487":{"ln":"Trichur, Trichur","sn":"Trichur"},"490":{"ln":"Tellicherry, Cannanore","sn":"Tellicherry"},"491":{"ln":"Palghat, Palghat","sn":"Palghat"},"494":{"ln":"Tirur, Calicut (Kozhikode)","sn":"Tirur"},"495":{"ln":"Calicut, Calicut (Kozhikode)","sn":"Calicut"},"496":{"ln":"Badagara, Calicut (Kozhikode)","sn":"Badagara"},"497":{"ln":"Cannanore, Cannanore","sn":"Cannanore"},"512":{"ln":"Kanpur, Kanpur","sn":"Kanpur"},"515":{"ln":"Unnao, Unnao","sn":"Unnao"},"522":{"ln":"Lucknow, Lucknow","sn":"Lucknow"},"532":{"ln":"Allahabad, Allahabad","sn":"Allahabad"},"535":{"ln":"Raibareli, Raibareilly","sn":"Raibareli"},"542":{"ln":"Varansi, Varansi","sn":"Varansi"},"548":{"ln":"Ghazipur, Ghazipur","sn":"Ghazipur"},"551":{"ln":"Gorakhpur, Gorakhpur","sn":"Gorakhpur"},"562":{"ln":"Agra, Agra","sn":"Agra"},"565":{"ln":"Mathura, Mathura","sn":"Mathura"},"571":{"ln":"Aligarh, Aligarh","sn":"Aligarh"},"581":{"ln":"Bareilly, Bareilly","sn":"Bareilly"},"591":{"ln":"Moradabad, Moradabad","sn":"Moradabad"},"595":{"ln":"Rampur, Rampur","sn":"Rampur"},"612":{"ln":"Patna, Patna","sn":"Patna"},"621":{"ln":"Muzaffarpur, Muzaffarpur","sn":"Muzaffarpur"},"631":{"ln":"Gaya, Gaya","sn":"Gaya"},"641":{"ln":"Bhagalpur, Bhagalpur","sn":"Bhagalpur"},"651":{"ln":"Ranchi, Ranchi","sn":"Ranchi"},"657":{"ln":"Jamshedpur, Jamshedpur","sn":"Jamshedpur"},"661":{"ln":"Rourkela, Sundargarh (Rourkela)","sn":"Rourkela"},"663":{"ln":"Sambalpur, Sambalpur","sn":"Sambalpur"},"671":{"ln":"Cuttack, Cuttack","sn":"Cuttack"},"674":{"ln":"Bhubaneshwar, Bhubaneswar (Puri)","sn":"Bhubaneshwar"},"680":{"ln":"Berhampur, Berhampur","sn":"Berhampur"},"712":{"ln":"Nagpur, Nagpur","sn":"Nagpur"},"721":{"ln":"Amravati, Amravati","sn":"Amravati"},"724":{"ln":"Akola, Akola","sn":"Akola"},"731":{"ln":"Indore, Indore","sn":"Indore"},"733":{"ln":"Khandwa, Khandwa","sn":"Khandwa"},"734":{"ln":"Ujjain, Ujjain","sn":"Ujjain"},"744":{"ln":"Ladpura (Kota), Kota","sn":"Ladpura"},"747":{"ln":"Bundi, Bundi","sn":"Bundi"},"751":{"ln":"Gwalior, Gwalior","sn":"Gwalior"},"755":{"ln":"Bhopal, Bhopal","sn":"Bhopal"},"761":{"ln":"Jabalpur, Jabalpur","sn":"Jabalpur"},"771":{"ln":"Raipur, Raipur","sn":"Raipur"},"788":{"ln":"Durg, Durg","sn":"Durg"},"816":{"ln":"Tumkur, Tumkur","sn":"Tumkur"},"820":{"ln":"Udupi, Dakshin-Kanada (Mangalore)","sn":"Udupi"},"821":{"ln":"Mysore, Mysore","sn":"Mysore"},"824":{"ln":"Mangalore, Dakshin-Kanada (Mangalore)","sn":"Mangalore"},"831":{"ln":"Belgaum, Belgaum","sn":"Belgaum"},"832":{"ln":"Panji, Panji","sn":"Panji"},"836":{"ln":"Hubli, Hubli","sn":"Hubli"},"861":{"ln":"Nellore, Nellore","sn":"Nellore"},"863":{"ln":"Guntur, Guntur","sn":"Guntur"},"866":{"ln":"Vijayawada, Vijayawada","sn":"Vijayawada"},"870":{"ln":"Warangal, Warangal","sn":"Warangal"},"877":{"ln":"Tirupathi, Chittoor","sn":"Tirupathi"},"878":{"ln":"Karimnagar, Karimnagar","sn":"Karimnagar"},"883":{"ln":"Rajahmundri, Rajahmundri","sn":"Rajahmundri"},"884":{"ln":"Kakinada, Rajahmundri","sn":"Kakinada"},"891":{"ln":"Visakhapatnam, Visakhapatnam","sn":"Visakhapatnam"},"1232":{"ln":"Modinagar, Ghaziabad","sn":"Modinagar"},"1233":{"ln":"Mawana, Meerut","sn":"Mawana"},"1234":{"ln":"Baghpat-II (Baraut), Meerut","sn":"Baghpat"},"1237":{"ln":"Sardhana, Meerut","sn":"Sardhana"},"1250":{"ln":"Charkhidadri, Rohtak","sn":"Charkhidadri"},"1251":{"ln":"Jhajjar, Rohtak","sn":"Jhajjar"},"1252":{"ln":"Loharu, Rohtak","sn":"Loharu"},"1253":{"ln":"Tohsham, Rohtak","sn":"Tohsham"},"1254":{"ln":"Bawanikhera, Rohtak","sn":"Bawanikhera"},"1255":{"ln":"Siwani, Rohtak","sn":"Siwani"},"1257":{"ln":"Meham, Rohtak","sn":"Meham"},"1258":{"ln":"Kalanaur, Rohtak","sn":"Kalanaur"},"1259":{"ln":"Kosli, Narnaul","sn":"Kosli"},"1262":{"ln":"Rohtak, Rohtak","sn":"Rohtak"},"1263":{"ln":"Gohana, Sonipat","sn":"Gohana"},"1267":{"ln":"Nuh, Gurgaon","sn":"Nuh"},"1268":{"ln":"Ferojpur, Gurgaon","sn":"Ferojpur"},"1274":{"ln":"Rewari, Narnaul","sn":"Rewari"},"1275":{"ln":"Palwal, Gurgaon","sn":"Palwal"},"1276":{"ln":"Bahadurgarh, Rohtak","sn":"Bahadurgarh"},"1281":{"ln":"Jatusana, Narnaul","sn":"Jatusana"},"1282":{"ln":"Narnaul, Narnaul","sn":"Narnaul"},"1284":{"ln":"Bawal, Narnaul","sn":"Bawal"},"1285":{"ln":"Mohindergarh, Narnaul","sn":"Mohindergarh"},"1331":{"ln":"Nakur (Gangoh), Saharanpur","sn":"Nakur"},"1332":{"ln":"Roorkee-I, Saharanpur","sn":"Roorkee"},"1334":{"ln":"Roorkee-II (Hardwar), Saharanpur","sn":"Roorkee"},"1336":{"ln":"Deoband, Saharanpur","sn":"Deoband"},"1341":{"ln":"Najibabad, Bijnore","sn":"Najibabad"},"1342":{"ln":"Bijnore-I, Bijnore","sn":"Bijnore"},"1343":{"ln":"Nagina, Bijnore","sn":"Nagina"},"1344":{"ln":"Dhampur, Bijnore","sn":"Dhampur"},"1345":{"ln":"Bijnore-II (Chandpur), Bijnore","sn":"Bijnore"},"1346":{"ln":"Pauri-II (Bubakhal), Kotdwara","sn":"Pauri"},"1348":{"ln":"Lansdown-III (Syunsi), Kotdwara","sn":"Lansdown"},"1360":{"ln":"Chakrata (Dakpather), Dehradun","sn":"Chakrata"},"1363":{"ln":"Karan Prayag, Kotdwara","sn":"Karan Prayag"},"1364":{"ln":"Ukhimath (Guptkashi), Kotdwara","sn":"Ukhimath"},"1368":{"ln":"Pauri-I, Kotdwara","sn":"Pauri"},"1370":{"ln":"Deoprayag-II (Jakholi), Uttarkashi","sn":"Deoprayag"},"1371":{"ln":"Dunda, Uttarkashi","sn":"Dunda"},"1372":{"ln":"Chamoli, Kotdwara","sn":"Chamoli"},"1373":{"ln":"Purola, Uttarkashi","sn":"Purola"},"1374":{"ln":"Bhatwari-I (Uttarkashi), Uttarkashi","sn":"Bhatwari"},"1375":{"ln":"Rajgarhi, Uttarkashi","sn":"Rajgarhi"},"1376":{"ln":"Tehri, Uttarkashi","sn":"Tehri"},"1377":{"ln":"Bhatwari-I (Gangotri), Uttarkashi","sn":"Bhatwari"},"1378":{"ln":"Deoprayag-I, Uttarkashi","sn":"Deoprayag"},"1379":{"ln":"Partapnagar, Uttarkashi","sn":"Partapnagar"},"1381":{"ln":"Joshimath-II (Badrinath), Kotdwara","sn":"Joshimath"},"1382":{"ln":"Lansdown-II (Kotdwara), Kotdwara","sn":"Lansdown"},"1386":{"ln":"Lansdown-I, Kotdwara","sn":"Lansdown"},"1389":{"ln":"Joshimath-I, Kotdwara","sn":"Joshimath"},"1392":{"ln":"Budhana, Muzaffarnagar","sn":"Budhana"},"1396":{"ln":"Jansath (Khatauli), Muzaffarnagar","sn":"Jansath"},"1398":{"ln":"Kairana (Shamli), Muzaffarnagar","sn":"Kairana"},"1420":{"ln":"Baswa (Bandikui), Jaipur","sn":"Baswa"},"1421":{"ln":"Kotputli, Jaipur","sn":"Kotputli"},"1422":{"ln":"Viratnagar (Shahpura), Jaipur","sn":"Viratnagar"},"1423":{"ln":"Amber (Chomu), Jaipur","sn":"Amber"},"1424":{"ln":"Phulera (E) (Renwal), Jaipur","sn":"Phulera (E)"},"1425":{"ln":"Phulera (W) (Sambhar), Jaipur","sn":"Phulera (W)"},"1426":{"ln":"Jamwa-Ramgarh (Achrol), Jaipur","sn":"Jamwa-Ramgarh"},"1427":{"ln":"Dausa, Jaipur","sn":"Dausa"},"1428":{"ln":"Dudu, Jaipur","sn":"Dudu"},"1429":{"ln":"Bassi, Jaipur","sn":"Bassi"},"1430":{"ln":"Phagi, Jaipur","sn":"Phagi"},"1431":{"ln":"Lalsot, Jaipur","sn":"Lalsot"},"1432":{"ln":"Tonk (S), Tonk","sn":"Tonk (S)"},"1433":{"ln":"Todaraisingh, Tonk","sn":"Todaraisingh"},"1434":{"ln":"Deoli, Tonk","sn":"Deoli"},"1435":{"ln":"Tonk (N) (Piploo), Tonk","sn":"Tonk (N)"},"1436":{"ln":"Uniayara, Tonk","sn":"Uniayara"},"1437":{"ln":"Malpura, Tonk","sn":"Malpura"},"1438":{"ln":"Newai, Tonk","sn":"Newai"},"1460":{"ln":"Kishangarhbas (Khairthal), Alwar","sn":"Kishangarhbas"},"1461":{"ln":"Bansur, Alwar","sn":"Bansur"},"1462":{"ln":"Beawar, Ajmer","sn":"Beawar"},"1463":{"ln":"Kishangarh (S), Ajmer","sn":"Kishangarh (S)"},"1464":{"ln":"Rajgarh, Alwar","sn":"Rajgarh"},"1465":{"ln":"Thanaghazi, Alwar","sn":"Thanaghazi"},"1466":{"ln":"Kekri (W) (Bhinai), Ajmer","sn":"Kekri (W)"},"1467":{"ln":"Kekri (E), Ajmer","sn":"Kekri (E)"},"1468":{"ln":"Ramgarh, Alwar","sn":"Ramgarh"},"1469":{"ln":"Tijara (S), Alwar","sn":"Tijara (S)"},"1470":{"ln":"Dungla, Chittorgarh","sn":"Dungla"},"1471":{"ln":"Rashmi, Chittorgarh","sn":"Rashmi"},"1472":{"ln":"Chittorgarh, Chittorgarh","sn":"Chittorgarh"},"1473":{"ln":"Barisadri, Chittorgarh","sn":"Barisadri"},"1474":{"ln":"Begun (N), Chittorgarh","sn":"Begun (N)"},"1475":{"ln":"Begun (S) (Rawatbhata), Chittorgarh","sn":"Begun (S)"},"1476":{"ln":"Kapasan, Chittorgarh","sn":"Kapasan"},"1477":{"ln":"Nimbahera, Chittorgarh","sn":"Nimbahera"},"1478":{"ln":"Pratapgarh (N), Chittorgarh","sn":"Pratapgarh (N)"},"1479":{"ln":"Pratapgarh (S) (Arnod), Chittorgarh","sn":"Pratapgarh (S)"},"1480":{"ln":"Asind, Bhilwara","sn":"Asind"},"1481":{"ln":"Raipur, Bhilwara","sn":"Raipur"},"1482":{"ln":"Bhilwara, Bhilwara","sn":"Bhilwara"},"1483":{"ln":"Hurda (Gulabpura), Bhilwara","sn":"Hurda"},"1484":{"ln":"Shahapura, Bhilwara","sn":"Shahapura"},"1485":{"ln":"Jahazpur, Bhilwara","sn":"Jahazpur"},"1486":{"ln":"Mandal, Bhilwara","sn":"Mandal"},"1487":{"ln":"Banera, Bhilwara","sn":"Banera"},"1488":{"ln":"Kotri, Bhilwara","sn":"Kotri"},"1489":{"ln":"Mandalgarh, Bhilwara","sn":"Mandalgarh"},"1491":{"ln":"Nasirabad, Ajmer","sn":"Nasirabad"},"1492":{"ln":"Laxmangarh (Kherli), Alwar","sn":"Laxmangarh"},"1493":{"ln":"Tijara (N) (Bhiwadi), Alwar","sn":"Tijara (N)"},"1494":{"ln":"Behror, Alwar","sn":"Behror"},"1495":{"ln":"Mandawar, Alwar","sn":"Mandawar"},"1496":{"ln":"Sarwar, Ajmer","sn":"Sarwar"},"1497":{"ln":"Kishangarh (N) (Roopangarh), Ajmer","sn":"Kishangarh (N)"},"1498":{"ln":"Anupgarh (E), Sriganganagar","sn":"Anupgarh (E)"},"1499":{"ln":"Sangaria, Sriganganagar","sn":"Sangaria"},"1501":{"ln":"Srikaranpur, Sriganganagar","sn":"Srikaranpur"},"1502":{"ln":"Nohar (W) (Jedasar), Sriganganagar","sn":"Nohar (W)"},"1503":{"ln":"Sadulshahar, Sriganganagar","sn":"Sadulshahar"},"1504":{"ln":"Bhadra, Sriganganagar","sn":"Bhadra"},"1505":{"ln":"Padampur, Sriganganagar","sn":"Padampur"},"1506":{"ln":"Anupgarh (W) (Gharsana), Sriganganagar","sn":"Anupgarh (W)"},"1507":{"ln":"Raisinghnagar, Sriganganagar","sn":"Raisinghnagar"},"1508":{"ln":"Suratgarh (N) (Goluwala), Sriganganagar","sn":"Suratgarh (N)"},"1509":{"ln":"Suratgarh (S), Sriganganagar","sn":"Suratgarh (S)"},"1520":{"ln":"Bikaner (N) (Chhatargarh), Bikaner","sn":"Bikaner (N)"},"1521":{"ln":"Bikaner (C) (Jaimalsar), Bikaner","sn":"Bikaner (C)"},"1522":{"ln":"Bikaner(E) (Jamsar), Bikaner","sn":"Bikaner (E)"},"1523":{"ln":"Bikaner (W) (Poogal), Bikaner","sn":"Bikaner (W)"},"1526":{"ln":"Lunkaransar-II (Mahajan), Bikaner","sn":"Lunkaransar"},"1527":{"ln":"Lunkaransar-III (Rajasarb), Bikaner","sn":"Lunkaransar"},"1528":{"ln":"Lunkaransar-IV, Bikaner","sn":"Lunkaransar"},"1529":{"ln":"Lunkaransar-IV and -I (Kanholi), Bikaner","sn":"Lunkaransar"},"1531":{"ln":"Nokha (E), Bikaner","sn":"Nokha (E)"},"1532":{"ln":"Nokha (W) (Nathusar), Bikaner","sn":"Nokha (W)"},"1533":{"ln":"Kolayat-I (Goddo), Bikaner","sn":"Kolayat"},"1534":{"ln":"Kolayat-II, Bikaner","sn":"Kolayat"},"1535":{"ln":"Kolayat-II and -III (Bajju), Bikaner","sn":"Kolayat"},"1536":{"ln":"Kolayat-IV (Daitra), Bikaner","sn":"Kolayat"},"1537":{"ln":"Nohar (C) (Rawatsar), Sriganganagar","sn":"Nohar (C)"},"1539":{"ln":"Tibbi, Sriganganagar","sn":"Tibbi"},"1552":{"ln":"Hanumangarh, Sriganganagar","sn":"Hanumangarh"},"1555":{"ln":"Nohar (E), Sriganganagar","sn":"Nohar (E)"},"1559":{"ln":"Rajgarh, Churu","sn":"Rajgarh"},"1560":{"ln":"Sujangarh (C) (Bidasar), Churu","sn":"Sujangarh (C)"},"1561":{"ln":"Taranagar, Churu","sn":"Taranagar"},"1562":{"ln":"Churu, Churu","sn":"Churu"},"1563":{"ln":"Sardarshahar (N)-Jaitsisar, Churu","sn":"Sardarshahar (N)"},"1564":{"ln":"Sardarshahar (S), Churu","sn":"Sardarshahar (S)"},"1565":{"ln":"Sridungargarh (N)-Dungargh, Churu","sn":"Sridungargarh (N)"},"1566":{"ln":"Sridungargarh (S) (Sudsar), Churu","sn":"Sridungargarh (S)"},"1567":{"ln":"Ratangarh, Churu","sn":"Ratangarh"},"1568":{"ln":"Sujangarh (E), Churu","sn":"Sujangarh (E)"},"1569":{"ln":"Sujangarh (W) (Lalgarh), Churu","sn":"Sujangarh (W)"},"1570":{"ln":"Laxmangarh (W) (Nechwa), Sikar","sn":"Laxmangarh (W)"},"1571":{"ln":"Fatehpur, Sikar","sn":"Fatehpur"},"1572":{"ln":"Sikar, Sikar","sn":"Sikar"},"1573":{"ln":"Laxmangarh (E), Sikar","sn":"Laxmangarh (E)"},"1574":{"ln":"Neem Ka Thana, Sikar","sn":"Neem Ka Thana"},"1575":{"ln":"Srimadhopur, Sikar","sn":"Srimadhopur"},"1576":{"ln":"Dantaramgarh (E) (Shyamji), Sikar","sn":"Dantaramgarh (E)"},"1577":{"ln":"Dantaramgarh (W), Sikar","sn":"Dantaramgarh (W)"},"1580":{"ln":"Deedwana, Nagaur","sn":"Deedwana"},"1581":{"ln":"Ladnun, Nagaur","sn":"Ladnun"},"1582":{"ln":"Nagaur (N), Nagaur","sn":"Nagaur (N)"},"1583":{"ln":"Jayal, Nagaur","sn":"Jayal"},"1584":{"ln":"Nagaur (E) (Mundwa Marwar), Nagaur","sn":"Nagaur (E)"},"1585":{"ln":"Nagaur (W) (Khinwsar), Naguar","sn":"Nagaur (W)"},"1586":{"ln":"Nawa (Kuchamancity), Nagaur","sn":"Nawa"},"1587":{"ln":"Degana, Nagaur","sn":"Degana"},"1588":{"ln":"Parbatsar (N) (Makrana), Nagaur","sn":"Parbatsar (N)"},"1589":{"ln":"Parbatsar (S), Nagaur","sn":"Parbatsar (S)"},"1590":{"ln":"Merta (E) (Merta-City), Nagaur","sn":"Merta (E)"},"1591":{"ln":"Merta (W) (Gotan), Nagaur","sn":"Merta (W)"},"1592":{"ln":"Jhunjhunu (S), Jhunjhunu","sn":"Jhunjhunu (S)"},"1593":{"ln":"Khetri, Jhunjhunu","sn":"Khetri"},"1594":{"ln":"Udaipurwati, Jhunjhunu","sn":"Udaipurwati"},"1595":{"ln":"Jhunjhunu (N) (Bissau), Jhunjhunu","sn":"Jhunjhunu (N)"},"1596":{"ln":"Chirawa, Jhunjhunu","sn":"Chirawa"},"1624":{"ln":"Jagraon, Ludhiana","sn":"Jagraon"},"1628":{"ln":"Samrala, Ludhiana","sn":"Samrala"},"1632":{"ln":"Ferozepur, Ferozepur","sn":"Ferozepur"},"1633":{"ln":"Muktasar, Ferozepur","sn":"Muktasar"},"1634":{"ln":"Abohar, Ferozepur","sn":"Abohar"},"1635":{"ln":"Kotkapura, Ferozepur","sn":"Kotkapura"},"1636":{"ln":"Moga, Ferozepur","sn":"Moga"},"1637":{"ln":"Malaut, Ferozepur","sn":"Malaut"},"1638":{"ln":"Fazilka, Ferozepur","sn":"Fazilka"},"1639":{"ln":"Faridakot, Ferozepur","sn":"Faridakot"},"1651":{"ln":"Phulmandi, Bhatinda","sn":"Phulmandi"},"1652":{"ln":"Mansa, Bhatinda","sn":"Mansa"},"1655":{"ln":"Raman, Bhatinda","sn":"Raman"},"1659":{"ln":"Sardulgarh, Bhatinda","sn":"Sardulgarh"},"1662":{"ln":"Hissar, Hissar","sn":"Hissar"},"1663":{"ln":"Hansi, Hissar","sn":"Hansi"},"1664":{"ln":"Bhiwani, Rohtak","sn":"Bhiwani"},"1666":{"ln":"Sirsa, Hissar","sn":"Sirsa"},"1667":{"ln":"Fatehabad, Hissar","sn":"Fatehabad"},"1668":{"ln":"Dabwali, Hissar","sn":"Dabwali"},"1669":{"ln":"Adampur Mandi, Hissar","sn":"Adampur Mandi"},"1672":{"ln":"Sangrur, Sangrur","sn":"Sangrur"},"1675":{"ln":"Malerkotla, Sangrur","sn":"Malerkotla"},"1676":{"ln":"Sunam, Sangrur","sn":"Sunam"},"1679":{"ln":"Barnala, Sangrur","sn":"Barnala"},"1681":{"ln":"Jind, Jind","sn":"Jind"},"1682":{"ln":"Zira, Ferozepur","sn":"Zira"},"1683":{"ln":"Julana, Jind","sn":"Julana"},"1684":{"ln":"Narwana, Jind","sn":"Narwana"},"1685":{"ln":"Guruharsahai, Ferozepur","sn":"Guruharsahai"},"1686":{"ln":"Safidon, Jind","sn":"Safidon"},"1692":{"ln":"Tohana, Hissar","sn":"Tohana"},"1693":{"ln":"Barwala, Hissar","sn":"Barwala"},"1696":{"ln":"Kalanwali, Hissar","sn":"Kalanwali"},"1697":{"ln":"Ratia, Hissar","sn":"Ratia"},"1698":{"ln":"Ellenabad, Hissar","sn":"Ellenabad"},"1702":{"ln":"Nahan, Solan","sn":"Nahan"},"1704":{"ln":"Paonta, Solan","sn":"Paonta"},"1731":{"ln":"Barara, Ambala","sn":"Barara"},"1732":{"ln":"Jagadhari, Ambala","sn":"Jagadhari"},"1733":{"ln":"Kalka, Ambala","sn":"Kalka"},"1734":{"ln":"Naraingarh, Ambala","sn":"Naraingarh"},"1735":{"ln":"Chaaharauli, Ambala","sn":"Chaaharauli"},"1741":{"ln":"Pehowa, Karnal","sn":"Pehowa"},"1743":{"ln":"Cheeka, Karnal","sn":"Cheeka"},"1744":{"ln":"Kurukshetra, Karnal","sn":"Kurukshetra"},"1745":{"ln":"Nilokheri, Karnal","sn":"Nilokheri"},"1746":{"ln":"Kaithal, Karnal","sn":"Kaithal"},"1748":{"ln":"Gharaunda, Karnal","sn":"Gharaunda"},"1749":{"ln":"Assandh, Karnal","sn":"Assandh"},"1762":{"ln":"Rajpura, Patiala","sn":"Rajpura"},"1763":{"ln":"Sarhind, Patiala","sn":"Sarhind"},"1764":{"ln":"Samana, Patiala","sn":"Samana"},"1765":{"ln":"Nabha, Patiala","sn":"Nabha"},"1781":{"ln":"Rohru, Shimla","sn":"Rohru"},"1782":{"ln":"Rampur Bushahar, Shimla","sn":"Rampur Bushahar"},"1783":{"ln":"Theog, Shimla","sn":"Theog"},"1785":{"ln":"Pooh, Shimla","sn":"Pooh"},"1786":{"ln":"Kalpa, Shimla","sn":"Kalpa"},"1792":{"ln":"Solan, Solan","sn":"Solan"},"1795":{"ln":"Nalagarh, Solan","sn":"Nalagarh"},"1796":{"ln":"Arki, Solan","sn":"Arki"},"1799":{"ln":"Rajgarh, Solan","sn":"Rajgarh"},"1821":{"ln":"Nakodar, Jalandhar","sn":"Nakodar"},"1822":{"ln":"Kapurthala, Jalandhar","sn":"Kapurthala"},"1823":{"ln":"Nawanshahar, Jalandhar","sn":"Nawanshahar"},"1824":{"ln":"Phagwara, Jalandhar","sn":"Phagwara"},"1826":{"ln":"Phillaur, Jalandhar","sn":"Phillaur"},"1828":{"ln":"Sultanpur Lodhi, Jalandhar","sn":"Sultanpur Lodhi"},"1851":{"ln":"Patti, Amritsar","sn":"Patti"},"1852":{"ln":"Taran Taran, Amritsar","sn":"Taran Taran"},"1853":{"ln":"Rayya, Amritsar","sn":"Rayya"},"1858":{"ln":"Ajnala, Amritsar","sn":"Ajnala"},"1859":{"ln":"Goindwal, Amritsar","sn":"Goindwal"},"1870":{"ln":"Jugial, Pathankot","sn":"Jugial"},"1871":{"ln":"Batala, Pathankot","sn":"Batala"},"1872":{"ln":"Quadian, Pathankot","sn":"Quadian"},"1874":{"ln":"Gurdaspur, Pathankot","sn":"Gurdaspur"},"1875":{"ln":"Dinanagar, Pathankot","sn":"Dinanagar"},"1881":{"ln":"Ropar, Ropar","sn":"Ropar"},"1882":{"ln":"Hoshiarpur, Hosiarpur","sn":"Hoshiarpur"},"1883":{"ln":"Dasua, Hosiarpur","sn":"Dasua"},"1884":{"ln":"Garhashanker, Hosiarpur","sn":"Garhashanker"},"1885":{"ln":"Balachaur, Hosiarpur","sn":"Balachaur"},"1886":{"ln":"Tanda Urmar, Hosiarpur","sn":"Tanda Urmar"},"1887":{"ln":"Nangal, Ropar","sn":"Nangal"},"1892":{"ln":"Kangra (Dharamsala), Kangra (Dharamsala)","sn":"Kangra"},"1893":{"ln":"Nurpur, Kangra (Dharamsala)","sn":"Nurpur"},"1894":{"ln":"Palampur, Kangra (Dharamsala)","sn":"Palampur"},"1895":{"ln":"Bharmour, Kangra (Dharamsala)","sn":"Bharmour"},"1896":{"ln":"Churah (Tissa), Kangra (Dharamsala)","sn":"Churah"},"1897":{"ln":"Pangi (Killar), Kandra (Dharamsala)","sn":"Pangi"},"1899":{"ln":"Chamba, Kangra (Dharamsala)","sn":"Chamba"},"1900":{"ln":"Lahul (Keylong), Kullu","sn":"Lahul"},"1902":{"ln":"Kullu, Kullu","sn":"Kullu"},"1903":{"ln":"Banjar, Kullu","sn":"Banjar"},"1904":{"ln":"Nirmand, Kullu","sn":"Nirmand"},"1905":{"ln":"Mandi, Mandi","sn":"Mandi"},"1906":{"ln":"Spiti (Kaza), Kullu","sn":"Spiti"},"1907":{"ln":"Sundernagar, Mandi","sn":"Sundernagar"},"1908":{"ln":"Jogindernagar, Mandi","sn":"Jogindernagar"},"1909":{"ln":"Udaipur, Kullu","sn":"Udaipur"},"1921":{"ln":"Basholi, Jammu","sn":"Basholi"},"1922":{"ln":"Kathua, Jammu","sn":"Kathua"},"1923":{"ln":"Samba, Jammu","sn":"Samba"},"1924":{"ln":"Akhnoor, Jammu","sn":"Akhnoor"},"1931":{"ln":"Kulgam, Srinagar","sn":"Kulgam"},"1932":{"ln":"Anantnag, Srinagar","sn":"Anantnag"},"1933":{"ln":"Pulwama, Srinagar","sn":"Pulwama"},"1936":{"ln":"Pahalgam, Srinagar","sn":"Pahalgam"},"1951":{"ln":"Badgam, Srinagar","sn":"Badgam"},"1952":{"ln":"Baramulla, Srinagar","sn":"Baramulla"},"1954":{"ln":"Sopore, Srinagar","sn":"Sopore"},"1955":{"ln":"Kupwara, Srinagar","sn":"Kupwara"},"1956":{"ln":"Uri, Srinagar","sn":"Uri"},"1957":{"ln":"Bandipur, Srinagar","sn":"Bandipur"},"1958":{"ln":"Karnah, Srinagar","sn":"Karnah"},"1960":{"ln":"Nowshera, Rajouri","sn":"Nowshera"},"1962":{"ln":"Rajouri, Rajouri","sn":"Rajouri"},"1964":{"ln":"Kalakot, Rajouri","sn":"Kalakot"},"1965":{"ln":"Poonch, Rajouri","sn":"Poonch"},"1970":{"ln":"Dehra Gopipur, Kangra (Dharamsala)","sn":"Dehra Gopipur"},"1972":{"ln":"Hamirpur, Hamirpur","sn":"Hamirpur"},"1975":{"ln":"Una, Hamirpur","sn":"Una"},"1976":{"ln":"Amb, Hamirpur","sn":"Amb"},"1978":{"ln":"Bilaspur, Hamirpur","sn":"Bilaspur"},"1980":{"ln":"Nobra, Leh","sn":"Nobra"},"1981":{"ln":"Nyoma, Leh","sn":"Nyoma"},"1982":{"ln":"Leh, Leh","sn":"Leh"},"1983":{"ln":"Zanaskar, Leh","sn":"Zanaskar"},"1985":{"ln":"Kargil, Leh","sn":"Kargil"},"1990":{"ln":"Ramnagar, Udhampur","sn":"Ramnagar"},"1991":{"ln":"Reasi, Udhampur","sn":"Reasi"},"1992":{"ln":"Udhampur, Udhampur","sn":"Udhampur"},"1995":{"ln":"Kishtwar, Udhampur","sn":"Kishtwar"},"1996":{"ln":"Doda, Udhampur","sn":"Doda"},"1997":{"ln":"Bedarwah, Udhampur","sn":"Bedarwah"},"1998":{"ln":"Ramban, Udhampur","sn":"Ramban"},"1999":{"ln":"Mahore, Udhampur","sn":"Mahore"},"2111":{"ln":"Indapur, Pune","sn":"Indapur"},"2112":{"ln":"Baramati, Pune","sn":"Baramati"},"2113":{"ln":"Bhor, Pune","sn":"Bhor"},"2114":{"ln":"Lonavala, Pune","sn":"Lonavala"},"2115":{"ln":"Saswad, Pune","sn":"Saswad"},"2117":{"ln":"Daund, Pune","sn":"Daund"},"2118":{"ln":"Walchandnagar, Pune","sn":"Walchandnagar"},"2119":{"ln":"Kedgaon, Pune","sn":"Kedgaon"},"2130":{"ln":"Velhe, Pune","sn":"Velhe"},"2132":{"ln":"Junnar, Pune","sn":"Junnar"},"2133":{"ln":"Manchar, Pune","sn":"Manchar"},"2135":{"ln":"Rajgurunagar, Pune","sn":"Rajgurunagar"},"2136":{"ln":"Urlikanchan, Pune","sn":"Urlikanchan"},"2137":{"ln":"Nahavara, Pune","sn":"Nahavara"},"2138":{"ln":"Shirur, Pune","sn":"Shirur"},"2139":{"ln":"Pirangut, Pune","sn":"Pirangut"},"2140":{"ln":"Mangaon, Pen","sn":"Mangaon"},"2141":{"ln":"Alibagh, Pen","sn":"Alibagh"},"2142":{"ln":"Pali, Pen","sn":"Pali"},"2143":{"ln":"Pen, Pen","sn":"Pen"},"2144":{"ln":"Murud, Pen","sn":"Murud"},"2145":{"ln":"Mahad, Pen","sn":"Mahad"},"2147":{"ln":"Shrivardhan, Pen","sn":"Shrivardhan"},"2148":{"ln":"Karjat, Pen","sn":"Karjat"},"2149":{"ln":"Mahasala, Pen","sn":"Mahasala"},"2160":{"ln":"Sakarwadi, Satara","sn":"Sakarwadi"},"2161":{"ln":"Vaduj, Satara","sn":"Vaduj"},"2162":{"ln":"Satara, Satara","sn":"Satara"},"2163":{"ln":"Koregaon, Satara","sn":"Koregaon"},"2164":{"ln":"Karad, Satara","sn":"Karad"},"2165":{"ln":"Dhiwadi, Satara","sn":"Dhiwadi"},"2166":{"ln":"Phaltan, Satara","sn":"Phaltan"},"2167":{"ln":"Wai, Satara","sn":"Wai"},"2168":{"ln":"Mahabaleswar, Satara","sn":"Mahabaleswar"},"2169":{"ln":"Shirwal, Satara","sn":"Shirwal"},"2181":{"ln":"Akkalkot, Sholapur","sn":"Akkalkot"},"2182":{"ln":"Karmala, Sholapur","sn":"Karmala"},"2183":{"ln":"Madha, Sholapur","sn":"Madha"},"2184":{"ln":"Barsi, Sholapur","sn":"Barsi"},"2185":{"ln":"Malsuras, Sholapur","sn":"Malsuras"},"2186":{"ln":"Pandharpur, Sholapur","sn":"Pandharpur"},"2187":{"ln":"Sangola, Sholapur","sn":"Sangola"},"2188":{"ln":"Mangalwedha, Sholapur","sn":"Mangalwedha"},"2189":{"ln":"Mohol, Sholapur","sn":"Mohol"},"2191":{"ln":"Poladpur, Pen","sn":"Poladpur"},"2192":{"ln":"Khopoli, Pen","sn":"Khopoli"},"2194":{"ln":"Roha, Pen","sn":"Roha"},"2320":{"ln":"Chandgad, Kolhapur","sn":"Chandgad"},"2321":{"ln":"Radhanagar, Kolhapur","sn":"Radhanagar"},"2322":{"ln":"Shirol (Jalsingpur), Kolhapur","sn":"Shirol"},"2323":{"ln":"Ajara, Kolhapur","sn":"Ajara"},"2324":{"ln":"Hatkangale (Ichalkaranji), Kolhapur","sn":"Hatkangale"},"2325":{"ln":"Kagal (Murgud), Kolhapur","sn":"Kagal"},"2326":{"ln":"Gaganbavada, Kolhapur","sn":"Gaganbavada"},"2327":{"ln":"Gadhinglaj, Kolhapur","sn":"Gadhinglaj"},"2328":{"ln":"Panhala, Kolhapur","sn":"Panhala"},"2329":{"ln":"Shahuwadi (Malakapur), Kolhapur","sn":"Shahuwadi"},"2341":{"ln":"Kavathemankal, Sangli","sn":"Kavathemankal"},"2342":{"ln":"Islampur, Sangli","sn":"Islampur"},"2343":{"ln":"Atpadi, Sangli","sn":"Atpadi"},"2344":{"ln":"Jath, Sangli","sn":"Jath"},"2345":{"ln":"Shirala, Sangli","sn":"Shirala"},"2346":{"ln":"Tasgaon, Sangli","sn":"Tasgaon"},"2347":{"ln":"Vita, Sangli","sn":"Vita"},"2350":{"ln":"Madangad, Ratnagiri","sn":"Madangad"},"2351":{"ln":"Langa, Ratnagiri","sn":"Langa"},"2352":{"ln":"Ratnagiri, Ratnagiri","sn":"Ratnagiri"},"2353":{"ln":"Rajapur, Ratnagiri","sn":"Rajapur"},"2354":{"ln":"Sanganeshwar (Deorukh), Ratnagiri","sn":"Sanganeshwar"},"2355":{"ln":"Chiplun, Ratnagiri","sn":"Chiplun"},"2356":{"ln":"Khed, Ratnagiri","sn":"Khed"},"2357":{"ln":"Malgund, Ratnagiri","sn":"Malgund"},"2358":{"ln":"Dapoli, Ratnagiri","sn":"Dapoli"},"2359":{"ln":"Guhagar, Ratnagiri","sn":"Guhagar"},"2362":{"ln":"Kudal, Kudal","sn":"Kudal"},"2363":{"ln":"Sawantwadi, Kudal","sn":"Sawantwadi"},"2364":{"ln":"Deogad, Kudal","sn":"Deogad"},"2365":{"ln":"Malwan, Kudal","sn":"Malwan"},"2366":{"ln":"Vengurla, Kudal","sn":"Vengurla"},"2367":{"ln":"Kankavali, Kudal","sn":"Kankavali"},"2371":{"ln":"Wathar, Satara","sn":"Wathar"},"2372":{"ln":"Patan, Satara","sn":"Patan"},"2373":{"ln":"Mahaswad, Satara","sn":"Mahaswad"},"2375":{"ln":"Pusegaon, Satara","sn":"Pusegaon"},"2378":{"ln":"Medha, Satara","sn":"Medha"},"2381":{"ln":"Ahmedpur, Latur","sn":"Ahmedpur"},"2382":{"ln":"Latur, Latur","sn":"Latur"},"2383":{"ln":"Ausa, Latur","sn":"Ausa"},"2384":{"ln":"Nilanga, Latur","sn":"Nilanga"},"2385":{"ln":"Udgir, Latur","sn":"Udgir"},"2421":{"ln":"Jamkhed, Ahmednagar","sn":"Jamkhed"},"2422":{"ln":"Shri Rampur, Ahmednagar","sn":"Shri Rampur"},"2423":{"ln":"Koparagon, Ahmednagar","sn":"Koparagon"},"2424":{"ln":"Akole, Ahmednagar","sn":"Akole"},"2425":{"ln":"Sangamner, Ahmednagar","sn":"Sangamner"},"2426":{"ln":"Rahuri, Ahmednagar","sn":"Rahuri"},"2427":{"ln":"Newasa, Ahmednagar","sn":"Newasa"},"2428":{"ln":"Pathardi, Ahmednagar","sn":"Pathardi"},"2429":{"ln":"Shevgaon, Ahmednagar","sn":"Shevgaon"},"2430":{"ln":"Sillod, Aurangabad","sn":"Sillod"},"2431":{"ln":"Paithan, Aurangabad","sn":"Paithan"},"2432":{"ln":"Aurangabad, Aurangabad","sn":"Aurangabad"},"2433":{"ln":"Gangapur, Aurangabad","sn":"Gangapur"},"2435":{"ln":"Kannad, Aurangabad","sn":"Kannad"},"2436":{"ln":"Vijapur, Aurangabad","sn":"Vijapur"},"2437":{"ln":"Khultabad, Aurangabad","sn":"Khultabad"},"2438":{"ln":"Soyegaon, Aurangabad","sn":"Soyegaon"},"2439":{"ln":"Golegaon, Aurangabad","sn":"Golegaon"},"2441":{"ln":"Ashti, Bhir","sn":"Ashti"},"2442":{"ln":"Bhir, Bhir","sn":"Bhir"},"2443":{"ln":"Manjalegaon, Bhir","sn":"Manjalegaon"},"2444":{"ln":"Patoda, Bhir","sn":"Patoda"},"2445":{"ln":"Kaij, Bhir","sn":"Kaij"},"2446":{"ln":"Ambejogai, Bhir","sn":"Ambejogai"},"2447":{"ln":"Gevrai, Bhir","sn":"Gevrai"},"2451":{"ln":"Pathari, Parbhani","sn":"Pathari"},"2452":{"ln":"Parbhani, Parbhani","sn":"Parbhani"},"2453":{"ln":"Gangakhed, Parbhani","sn":"Gangakhed"},"2454":{"ln":"Basmatnagar, Parbhani","sn":"Basmatnagar"},"2455":{"ln":"Kalamnuri, Parbhani","sn":"Kalamnuri"},"2456":{"ln":"Hingoli, Parbhani","sn":"Hingoli"},"2457":{"ln":"Jintdor, Parbhani","sn":"Jintdor"},"2460":{"ln":"Delhi Tanda, Nanded","sn":"Delhi Tanda"},"2461":{"ln":"Mukhed, Nanded","sn":"Mukhed"},"2462":{"ln":"Nanded, Nanded","sn":"Nanded"},"2463":{"ln":"Degloor, Nanded","sn":"Degloor"},"2465":{"ln":"Billoli, Nanded","sn":"Billoli"},"2466":{"ln":"Kandhar, Nanded","sn":"Kandhar"},"2467":{"ln":"Bhokar, Nanded","sn":"Bhokar"},"2468":{"ln":"Hadgaon, Nanded","sn":"Hadgaon"},"2469":{"ln":"Kinwat, Nanded","sn":"Kinwat"},"2471":{"ln":"Tuljapur, Osmanabad","sn":"Tuljapur"},"2472":{"ln":"Osmanabad, Osmanabad","sn":"Osmanabad"},"2473":{"ln":"Kallam, Osmanabad","sn":"Kallam"},"2475":{"ln":"Omerga, Osmanabad","sn":"Omerga"},"2477":{"ln":"Paranda, Osmanabad","sn":"Paranda"},"2478":{"ln":"Bhoom, Osmanabad","sn":"Bhoom"},"2481":{"ln":"Ner, Jalna","sn":"Ner"},"2482":{"ln":"Jalna, Jalna","sn":"Jalna"},"2483":{"ln":"Ambad, Jalna","sn":"Ambad"},"2484":{"ln":"Partur, Jalna","sn":"Partur"},"2485":{"ln":"Bhokardan, Jalna","sn":"Bhokardan"},"2487":{"ln":"Shrigonda, Ahmednagar","sn":"Shrigonda"},"2488":{"ln":"Parner, Ahmednagar","sn":"Parner"},"2489":{"ln":"Karjat, Ahmednagar","sn":"Karjat"},"2520":{"ln":"Jawahar, Kalyan","sn":"Jawahar"},"2521":{"ln":"Talasari, Kalyan","sn":"Talasari"},"2522":{"ln":"Bhiwandi, Kalyan","sn":"Bhiwandi"},"2524":{"ln":"Murbad, Kalyan","sn":"Murbad"},"2525":{"ln":"Palghar, Kalyan","sn":"Palghar"},"2526":{"ln":"Wada, Kalyan","sn":"Wada"},"2527":{"ln":"Shahapur, Kalyan","sn":"Shahapur"},"2528":{"ln":"Dahanu, Kalyan","sn":"Dahanu"},"2529":{"ln":"Mokhada, Kalyan","sn":"Mokhada"},"2550":{"ln":"Niphad, Nasik","sn":"Niphad"},"2551":{"ln":"Sinnar, Nasik","sn":"Sinnar"},"2552":{"ln":"Nandgaon, Nasik","sn":"Nandgaon"},"2553":{"ln":"Igatpuri, Nasik","sn":"Igatpuri"},"2554":{"ln":"Malegaon, Nasik","sn":"Malegaon"},"2555":{"ln":"Satana, Nasik","sn":"Satana"},"2556":{"ln":"Chanwad, Nasik","sn":"Chanwad"},"2557":{"ln":"Dindori, Nasik","sn":"Dindori"},"2558":{"ln":"Peint, Nasik","sn":"Peint"},"2559":{"ln":"Yeola, Nasik","sn":"Yeola"},"2560":{"ln":"Kusumba, Dhulia","sn":"Kusumba"},"2561":{"ln":"Pimpalner, Dhulia","sn":"Pimpalner"},"2562":{"ln":"Dhule, Dhulia","sn":"Dhule"},"2563":{"ln":"Shirpur, Dhulia","sn":"Shirpur"},"2564":{"ln":"Nandurbar, Dhulia","sn":"Nandurbar"},"2565":{"ln":"Shahada, Dhulia","sn":"Shahada"},"2566":{"ln":"Sindkheda, Dhulia","sn":"Sindkheda"},"2567":{"ln":"Taloda, Dhulia","sn":"Taloda"},"2568":{"ln":"Sakri, Dhulia","sn":"Sakri"},"2569":{"ln":"Navapur, Dhulia","sn":"Navapur"},"2580":{"ln":"Jamner, Jalgaon","sn":"Jamner"},"2582":{"ln":"Bhusawal, Jalgaon","sn":"Bhusawal"},"2583":{"ln":"Edalabad, Jalgaon","sn":"Edalabad"},"2584":{"ln":"Raver, Jalgaon","sn":"Raver"},"2585":{"ln":"Yawal, Jalgaon","sn":"Yawal"},"2586":{"ln":"Chopda, Jalgaon","sn":"Chopda"},"2587":{"ln":"Amalner, Jalgaon","sn":"Amalner"},"2588":{"ln":"Erandul, Jalgaon","sn":"Erandul"},"2589":{"ln":"Chalisgaon, Jalgaon","sn":"Chalisgaon"},"2591":{"ln":"Manmad, Nasik","sn":"Manmad"},"2592":{"ln":"Kalwan, Nasik","sn":"Kalwan"},"2593":{"ln":"Surgena, Nasik","sn":"Surgena"},"2594":{"ln":"Trimbak, Nasik","sn":"Trimbak"},"2595":{"ln":"Dhadgaon, Dhulia","sn":"Dhadgaon"},"2596":{"ln":"Pachora, Jalgaon","sn":"Pachora"},"2597":{"ln":"Parola, Jalgaon","sn":"Parola"},"2598":{"ln":"Umrane, Nasik","sn":"Umrane"},"2599":{"ln":"Bhudargad (Gargoti), Kolhapur","sn":"Bhudargad"},"2621":{"ln":"Sayan, Surat","sn":"Sayan"},"2622":{"ln":"Bardoli, Surat","sn":"Bardoli"},"2623":{"ln":"Mandvi, Surat","sn":"Mandvi"},"2624":{"ln":"Fortsongadh, Surat","sn":"Fortsongadh"},"2625":{"ln":"Valod, Surat","sn":"Valod"},"2626":{"ln":"Vyara, Surat","sn":"Vyara"},"2628":{"ln":"Nizar, Surat","sn":"Nizar"},"2629":{"ln":"M. M. Mangrol, Surat","sn":"M. M. Mangrol"},"2630":{"ln":"Bansada, Valsad","sn":"Bansada"},"2631":{"ln":"Ahwa, Valsad","sn":"Ahwa"},"2632":{"ln":"Valsad, Valsad","sn":"Valsad"},"2633":{"ln":"Dharampur, Valsad","sn":"Dharampur"},"2634":{"ln":"Billimora, Valsad","sn":"Billimora"},"2637":{"ln":"Navsari, Valsad","sn":"Navsari"},"2640":{"ln":"Rajpipla, Bharuch","sn":"Rajpipla"},"2641":{"ln":"Amod, Bharuch","sn":"Amod"},"2642":{"ln":"Bharuch, Bharuch","sn":"Bharuch"},"2643":{"ln":"Valia, Bharuch","sn":"Valia"},"2644":{"ln":"Jambusar, Bharuch","sn":"Jambusar"},"2645":{"ln":"Jhagadia, Bharuch","sn":"Jhagadia"},"2646":{"ln":"Ankleshwar, Bharuch","sn":"Ankleshwar"},"2649":{"ln":"Dediapada, Bharuch","sn":"Dediapada"},"2661":{"ln":"Naswadi, Vadodara","sn":"Naswadi"},"2662":{"ln":"Padra, Vadodara","sn":"Padra"},"2663":{"ln":"Dabhoi, Vadodara","sn":"Dabhoi"},"2664":{"ln":"Pavijetpur, Vadodara","sn":"Pavijetpur"},"2665":{"ln":"Sankheda, Vadodara","sn":"Sankheda"},"2666":{"ln":"Miyagam, Vadodara","sn":"Miyagam"},"2667":{"ln":"Savli, Vadodara","sn":"Savli"},"2668":{"ln":"Waghodia, Vadodara","sn":"Waghodia"},"2669":{"ln":"Chhota Udaipur, Vadodara","sn":"Chhota Udaipur"},"2670":{"ln":"Shehra, Godhra","sn":"Shehra"},"2672":{"ln":"Godhra, Godhra","sn":"Godhra"},"2673":{"ln":"Dahod, Godhra","sn":"Dahod"},"2674":{"ln":"Lunavada, Godhra","sn":"Lunavada"},"2675":{"ln":"Santrampur, Godhra","sn":"Santrampur"},"2676":{"ln":"Halol, Godhra","sn":"Halol"},"2677":{"ln":"Limkheda, Godhra","sn":"Limkheda"},"2678":{"ln":"Devgadhbaria, Godhra","sn":"Devgadhbaria"},"2679":{"ln":"Jhalod, Godhra","sn":"Jhalod"},"2690":{"ln":"Balasinor, Nadiad","sn":"Balasinor"},"2691":{"ln":"Kapad Wanj, Nadiad","sn":"Kapad Wanj"},"2692":{"ln":"Anand, Nadiad","sn":"Anand"},"2694":{"ln":"Kheda, Nadiad","sn":"Kheda"},"2696":{"ln":"Borsad, Nadiad","sn":"Borsad"},"2697":{"ln":"Retlad, Nadiad","sn":"Retlad"},"2698":{"ln":"Khambat, Nadiad","sn":"Khambat"},"2699":{"ln":"Thasra, Nadiad","sn":"Thasra"},"2711":{"ln":"Barwala, Ahmedabad","sn":"Barwala"},"2712":{"ln":"Gandhi Nagar, Ahmedabad","sn":"Gandhi Nagar"},"2713":{"ln":"Dhandhuka, Ahmedabad","sn":"Dhandhuka"},"2714":{"ln":"Dholka, Ahmedabad","sn":"Dholka"},"2715":{"ln":"Viramgam, Ahmedabad","sn":"Viramgam"},"2716":{"ln":"Dehgam, Ahmedabad","sn":"Dehgam"},"2717":{"ln":"Sanand, Ahmedabad","sn":"Sanand"},"2718":{"ln":"Bareja, Ahmedabad","sn":"Bareja"},"2733":{"ln":"Harij, Mehsana","sn":"Harij"},"2734":{"ln":"Chanasma, Mehsana","sn":"Chanasma"},"2735":{"ln":"Deodar, Palanpur","sn":"Deodar"},"2737":{"ln":"Tharad, Palanpur","sn":"Tharad"},"2738":{"ln":"Santalpur, Palanpur","sn":"Santalpur"},"2739":{"ln":"Vadgam, Palanpur","sn":"Vadgam"},"2740":{"ln":"Vav, Palanpur","sn":"Vav"},"2742":{"ln":"Palanpur, Palanpur","sn":"Palanpur"},"2744":{"ln":"Deesa, Palanpur","sn":"Deesa"},"2746":{"ln":"Radhanpur, Palanpur","sn":"Radhanpur"},"2747":{"ln":"Thara, Palanpur","sn":"Thara"},"2748":{"ln":"Dhanera, Palanpur","sn":"Dhanera"},"2749":{"ln":"Danta, Palanpur","sn":"Danta"},"2751":{"ln":"Chotila, Surendranagar","sn":"Chotila"},"2752":{"ln":"Surendranagar, Surendranagar","sn":"Surendranagar"},"2753":{"ln":"Limbdi, Surendranagar","sn":"Limbdi"},"2754":{"ln":"Dhrangadhra, Surendranagar","sn":"Dhrangadhra"},"2755":{"ln":"Sayla, Surendranagar","sn":"Sayla"},"2756":{"ln":"Muli, Surendranagar","sn":"Muli"},"2757":{"ln":"Dasada, Surendranagar","sn":"Dasada"},"2758":{"ln":"Halvad, Surendranagar","sn":"Halvad"},"2759":{"ln":"Lakhtar, Surendranagar","sn":"Lakhtar"},"2761":{"ln":"Kheralu, Mehsana","sn":"Kheralu"},"2762":{"ln":"Mehsana, Mehsana","sn":"Mehsana"},"2763":{"ln":"Vijapur, Mehsana","sn":"Vijapur"},"2764":{"ln":"Kalol, Mehsana","sn":"Kalol"},"2765":{"ln":"Visnagar, Mehsana","sn":"Visnagar"},"2766":{"ln":"Patan, Mehsana","sn":"Patan"},"2767":{"ln":"Sidhpur, Mehsana","sn":"Sidhpur"},"2770":{"ln":"Prantij, Himatnagar","sn":"Prantij"},"2771":{"ln":"Bhiloda, Himatnagar","sn":"Bhiloda"},"2772":{"ln":"Himatnagar, Himatnagar","sn":"Himatnagar"},"2773":{"ln":"Malpur, Himatnagar","sn":"Malpur"},"2774":{"ln":"Modasa, Himatnagar","sn":"Modasa"},"2775":{"ln":"Khedbrahma, Himatnagar","sn":"Khedbrahma"},"2778":{"ln":"Idar, Himatnagar","sn":"Idar"},"2779":{"ln":"Bayad, Himatnagar","sn":"Bayad"},"2791":{"ln":"Babra, Amreli","sn":"Babra"},"2792":{"ln":"Amreli, Amreli","sn":"Amreli"},"2793":{"ln":"Damnagar, Amreli","sn":"Damnagar"},"2794":{"ln":"Rajula, Amreli","sn":"Rajula"},"2795":{"ln":"Kodinar, Junagarh","sn":"Kodinar"},"2796":{"ln":"Kunkawav, Amreli","sn":"Kunkawav"},"2797":{"ln":"Dhari, Amreli","sn":"Dhari"},"2801":{"ln":"Ranavav, Junagarh","sn":"Ranavav"},"2803":{"ln":"Khavda, Bhuj","sn":"Khavda"},"2804":{"ln":"Kutiyana, Junagarh","sn":"Kutiyana"},"2806":{"ln":"Gogodar, Bhuj","sn":"Gogodar"},"2808":{"ln":"Sumrasar, Bhuj","sn":"Sumrasar"},"2820":{"ln":"Paddhari, Rajkot","sn":"Paddhari"},"2821":{"ln":"Jasdan, Rajkot","sn":"Jasdan"},"2822":{"ln":"Morvi, Rajkot","sn":"Morvi"},"2823":{"ln":"Jetpur, Rajkot","sn":"Jetpur"},"2824":{"ln":"Dhoraji, Rajkot","sn":"Dhoraji"},"2825":{"ln":"Gondal, Rajkot","sn":"Gondal"},"2826":{"ln":"Upleta, Rajkot","sn":"Upleta"},"2827":{"ln":"Kotdasanghani, Rajkot","sn":"Kotdasanghani"},"2828":{"ln":"Wankaner, Rajkot","sn":"Wankaner"},"2829":{"ln":"Maliya Miyana, Rajkot","sn":"Maliya Miyana"},"2830":{"ln":"Rahpar, Bhuj","sn":"Rahpar"},"2831":{"ln":"Nalia, Bhuj","sn":"Nalia"},"2832":{"ln":"Bhuj, Bhuj","sn":"Bhuj"},"2833":{"ln":"Khambhalia, Jamnagar","sn":"Khambhalia"},"2834":{"ln":"Kutchmandvi, Bhuj","sn":"Kutchmandvi"},"2835":{"ln":"Nakhatrana, Bhuj","sn":"Nakhatrana"},"2836":{"ln":"Anjar (Gandhidham), Bhuj","sn":"Anjar"},"2837":{"ln":"Bhachav, Bhuj","sn":"Bhachav"},"2838":{"ln":"Mundra, Bhuj","sn":"Mundra"},"2839":{"ln":"Lakhpat, Bhuj","sn":"Lakhpat"},"2841":{"ln":"Vallabhipur, Bhavnagar","sn":"Vallabhipur"},"2842":{"ln":"Talaja, Bhavnagar","sn":"Talaja"},"2843":{"ln":"Gariadhar, Bhavnagar","sn":"Gariadhar"},"2844":{"ln":"Mahuva, Bhavnagar","sn":"Mahuva"},"2845":{"ln":"Savarkundla, Amreli","sn":"Savarkundla"},"2846":{"ln":"Sihor, Bhavnagar","sn":"Sihor"},"2847":{"ln":"Gadhada, Bhavnagar","sn":"Gadhada"},"2848":{"ln":"Palitana, Bhavnagar","sn":"Palitana"},"2849":{"ln":"Botad, Bhavnagar","sn":"Botad"},"2870":{"ln":"Malia-Hatina, Junagarh","sn":"Malia-Hatina"},"2871":{"ln":"Keshod, Junagarh","sn":"Keshod"},"2872":{"ln":"Vanthali, Junagarh","sn":"Vanthali"},"2873":{"ln":"Visavadar, Junagarh","sn":"Visavadar"},"2874":{"ln":"Manavadar, Junagarh","sn":"Manavadar"},"2875":{"ln":"Una-Diu, Junagarh","sn":"Una-Diu"},"2876":{"ln":"Veraval, Junagarh","sn":"Veraval"},"2877":{"ln":"Talala, Junagarh","sn":"Talala"},"2878":{"ln":"Mangrol, Junagarh","sn":"Mangrol"},"2891":{"ln":"Jamkalyanpur, Jamnagar","sn":"Jamkalyanpur"},"2892":{"ln":"Okha, Jamnagar","sn":"Okha"},"2893":{"ln":"Jodia, Jamnagar","sn":"Jodia"},"2894":{"ln":"Kalawad, Jamnagar","sn":"Kalawad"},"2895":{"ln":"Lalpur, Jamnagar","sn":"Lalpur"},"2896":{"ln":"Bhanvad, Jamnagar","sn":"Bhanvad"},"2897":{"ln":"Dhrol, Jamnagar","sn":"Dhrol"},"2898":{"ln":"Jamjodhpur, Jamnagar","sn":"Jamjodhpur"},"2900":{"ln":"Siwana (E) (Samdari), Barmer","sn":"Siwana (E)"},"2901":{"ln":"Siwana (W), Barmer","sn":"Siwana (W)"},"2902":{"ln":"Barmer (N) (Kanot), Barmer","sn":"Barmer (N)"},"2903":{"ln":"Chohtan (S) (Gangasar), Barmer","sn":"Chohtan (S)"},"2904":{"ln":"Deogarh, Udaipur","sn":"Deogarh"},"2905":{"ln":"Sarada (Chawand), Udaipur","sn":"Sarada"},"2906":{"ln":"Salumber, Udaipur","sn":"Salumber"},"2907":{"ln":"Kherwara, Udaipur","sn":"Kherwara"},"2908":{"ln":"Amet, Udaipur","sn":"Amet"},"2909":{"ln":"Bhim (S) (Dawer), Udaipur","sn":"Bhim (S)"},"2920":{"ln":"Bilara (N) (Bhopalgarh), Jodhpur","sn":"Bilara (N)"},"2921":{"ln":"Phalodi (N) (Bap), Jodhpur","sn":"Phalodi (N)"},"2922":{"ln":"Osian (N), Jodhpur","sn":"Osian (N)"},"2923":{"ln":"Phalodi (E) (Lohawat), Jodhpur","sn":"Phalodi (E)"},"2924":{"ln":"Phalodi (W) (Baroo), Jodhpur","sn":"Phalodi (W)"},"2925":{"ln":"Phalodi (S), Jodhpur","sn":"Phalodi (S)"},"2926":{"ln":"Osian (S) (Mathania), Jodhpur","sn":"Osian (S)"},"2927":{"ln":"Osian (E) (Dhanwara), Jodhpur","sn":"Osian (E)"},"2928":{"ln":"Shergarh (N) (Deechu), Jodhpur","sn":"Shergarh (N)"},"2929":{"ln":"Shergarh (N) (Balesar), Jodhpur","sn":"Shergarh (N)"},"2930":{"ln":"Bilara (S) (Piparcity), Jodhpur","sn":"Bilara (S)"},"2931":{"ln":"Jodhpur (W) (Jhanwar), Jodhpur","sn":"Jodhpur (W)"},"2932":{"ln":"Pali (S), Pali (Marwar)","sn":"Pali (S)"},"2933":{"ln":"Bali (N) (Sumerpur), Pali (Marwar)","sn":"Bali (N)"},"2934":{"ln":"Desuri (Rani), Pali (Marwar)","sn":"Desuri"},"2935":{"ln":"Marwar-JN, Pali (Marwar)","sn":"Marwar-JN"},"2936":{"ln":"Pali (N) (Rohat), Pali (Marwar)","sn":"Pali (N)"},"2937":{"ln":"Raipur, Pali (Marwar)","sn":"Raipur"},"2938":{"ln":"Bali (S), Pali (Marwar)","sn":"Bali (S)"},"2939":{"ln":"Jaitaran, Pali (Marwar)","sn":"Jaitaran"},"2950":{"ln":"Dhariawad, Udaipur","sn":"Dhariawad"},"2951":{"ln":"Bhim (N), Udaipur","sn":"Bhim (N)"},"2952":{"ln":"Rajsamand (Kankorli), Udaipur","sn":"Rajsamand"},"2953":{"ln":"Nathdwara, Udaipur","sn":"Nathdwara"},"2954":{"ln":"Kumbalgarh (Charbhujaji), Udaipur","sn":"Kumbalgarh"},"2955":{"ln":"Malvi (Fatehnagar), Udaipur","sn":"Malvi"},"2956":{"ln":"Gogunda, Udaipur","sn":"Gogunda"},"2957":{"ln":"Vallabhnagar, Udaipur","sn":"Vallabhnagar"},"2958":{"ln":"Kotra, Udaipur","sn":"Kotra"},"2959":{"ln":"Jhadol, Udaipur","sn":"Jhadol"},"2960":{"ln":"Sojat (Sojat-City), Pali (Marwar)","sn":"Sojat"},"2961":{"ln":"Ghatol, Banswara","sn":"Ghatol"},"2962":{"ln":"Banswara, Banswara","sn":"Banswara"},"2963":{"ln":"Gerhi (Partapur), Banswara","sn":"Gerhi"},"2964":{"ln":"Dungarpur, Banswara","sn":"Dungarpur"},"2965":{"ln":"Kushalgarh, Banswara","sn":"Kushalgarh"},"2966":{"ln":"Sagwara, Banswara","sn":"Sagwara"},"2967":{"ln":"Aspur, Banswara","sn":"Aspur"},"2968":{"ln":"Bagidora, Banswara","sn":"Bagidora"},"2969":{"ln":"Bhinmal (N), Sirohi (Abu-Road)","sn":"Bhinmal (N)"},"2970":{"ln":"Sanchore (W) (Hadecha), Sirohi (Abu-Road)","sn":"Sanchore (W)"},"2971":{"ln":"Pindwara, Sirohi (Abu-Road)","sn":"Pindwara"},"2972":{"ln":"Sirohi, Sirohi (Abu-Road)","sn":"Sirohi"},"2973":{"ln":"Jalore, Sirohi (Abu-Road)","sn":"Jalore"},"2974":{"ln":"Abu Road, Sirohi (Abu-Road)","sn":"Abu Road"},"2975":{"ln":"Reodar, Sirohi (Abu-Road)","sn":"Reodar"},"2976":{"ln":"Sheoganj (Posaliyan), Sirohi (Abu-Road)","sn":"Sheoganj"},"2977":{"ln":"Jalore (W) (Sayla), Sirohi (Abu-Road)","sn":"Jalore (W)"},"2978":{"ln":"Ahore, Sirohi (Abu-Road)","sn":"Ahore"},"2979":{"ln":"Sanchore (E), Sirohi (Abu-Road)","sn":"Sanchore (E)"},"2980":{"ln":"Pachpadra (E) (Korna), Barmer","sn":"Pachpadra (E)"},"2981":{"ln":"Sheo (W) (Harsani), Barmer","sn":"Sheo (W)"},"2982":{"ln":"Barmer (C), Barmer","sn":"Barmer (C)"},"2983":{"ln":"Barmer (E) (Gudda), Barmer","sn":"Barmer (E)"},"2984":{"ln":"Barmer (S) Sindari, Barmer","sn":"Barmer (S)"},"2985":{"ln":"Barmer (W) (Ramsar), Barmer","sn":"Barmer (W)"},"2986":{"ln":"Barmer (SW) (Dhorimanna), Barmer","sn":"Barmer (SW)"},"2987":{"ln":"Sheo (E), Barmer","sn":"Sheo (E)"},"2988":{"ln":"Pachpadra (W) (Balotra), Barmer","sn":"Pachpadra (W)"},"2989":{"ln":"Chohtan (N), Barmer","sn":"Chohtan (N)"},"2990":{"ln":"Bhinmal (S) (Jasawantpura), Sirohi (Abu-Road)","sn":"Bhinmal (S)"},"2991":{"ln":"Jaisalmer-1 (Ramgarh), Jaisalmer","sn":"Jaisalmer"},"2992":{"ln":"Jaisalmer-11 (Jaisalmer), Jaisalmer","sn":"Jaisalmer"},"2993":{"ln":"Jaisalmer-12 (Devikot), Jaisalmer","sn":"Jaisalmer"},"2994":{"ln":"Pokran-4 (Pokran), Jaisalmer","sn":"Pokran"},"2995":{"ln":"Pokran-1 (Nachna), Jaisalmer","sn":"Pokran"},"2996":{"ln":"Pokran-3 (Loharki), Jaisalmer","sn":"Pokran"},"2997":{"ln":"Jaisalmer-7 (Mohargarh), Jaisalmer","sn":"Jaisalmer"},"2998":{"ln":"Jaisalmer-5 (Khuiyals), Jaisalmer","sn":"Jaisalmer"},"2999":{"ln":"Jaisalmer-3 (Nehdai), Jaisalmer","sn":"Jaisalmer"},"3010":{"ln":"Jaisalmer-4 (Shahgarh), Jaisalmer","sn":"Jaisalmer"},"3011":{"ln":"Jaisalmer-6 (Pasewar), Jaisalmer","sn":"Jaisalmer"},"3012":{"ln":"Jaisalmer-8 (Mehsana), Jaisalmer","sn":"Jaisalmer"},"3013":{"ln":"Jaisalmer-9 (Dhanaua), Jaisalmer","sn":"Jaisalmer"},"3014":{"ln":"Jaisalmer-10 (Khuri), Jaisalmer","sn":"Jaisalmer"},"3015":{"ln":"Jaisalmer-13 (Myajlar), Jaisalmer","sn":"Jaisalmer"},"3016":{"ln":"Jaisalmer-14 (Jheenjaniyali), Jaisalmer","sn":"Jaisalmer"},"3017":{"ln":"Pokran-2 (Madasar), Jaisalmer","sn":"Pokran"},"3018":{"ln":"Jaisalmer-2 (Sadhna), Jaisalmer","sn":"Jaisalmer"},"3019":{"ln":"Pokran-5 (Phalsoond), Jaisalmer","sn":"Pokran"},"3174":{"ln":"Diamond Harbour, Kolkata","sn":"Diamond Harbour"},"3192":{"ln":"Andaman Islands, Andaman & Nicobar Islands","sn":"Andaman Islands"},"3193":{"ln":"Nicobar Islands, Andaman & Nicobar Islands","sn":"Nicobar Islands"},"3210":{"ln":"Kakdwip, Kolkata","sn":"Kakdwip"},"3211":{"ln":"Arambag, Kolkata","sn":"Arambag"},"3212":{"ln":"Champadanga, Kolkata","sn":"Champadanga"},"3213":{"ln":"Dhaniakhali, Kolkata","sn":"Dhaniakhali"},"3214":{"ln":"Jagatballavpur, Kolkata","sn":"Jagatballavpur"},"3215":{"ln":"Bongoan, Kolkata","sn":"Bongoan"},"3216":{"ln":"Habra, Kolkata","sn":"Habra"},"3217":{"ln":"Basirhat, Kolkata","sn":"Basirhat"},"3218":{"ln":"Canning, Kolkata","sn":"Canning"},"3220":{"ln":"Contai, Midnapur (Kharagpur)","sn":"Contai"},"3221":{"ln":"Jhargram, Midnapur (Kharagpur)","sn":"Jhargram"},"3222":{"ln":"Kharagpur, Midnapur (Kharagpur)","sn":"Kharagpur"},"3223":{"ln":"Nayagarh (Kultikri), Midnapur (Kharagpur)","sn":"Nayagarh"},"3224":{"ln":"Haldia, Midnapur (Kharagpur)","sn":"Haldia"},"3225":{"ln":"Ghatal, Midnapur (Kharagpur)","sn":"Ghatal"},"3227":{"ln":"Amlagora, Midnapur (Kharagpur)","sn":"Amlagora"},"3228":{"ln":"Tamluk, Midnapur (Kharagpur)","sn":"Tamluk"},"3229":{"ln":"Dantan, Midnapur (Kharagpur)","sn":"Dantan"},"3241":{"ln":"Gangajalghati, Bankura","sn":"Gangajalghati"},"3242":{"ln":"Bankura, Bankura","sn":"Bankura"},"3243":{"ln":"Khatra, Bankura","sn":"Khatra"},"3244":{"ln":"Bishnupur, Bankura","sn":"Bishnupur"},"3251":{"ln":"Adra, Purulia","sn":"Adra"},"3252":{"ln":"Purulia, Purulia","sn":"Purulia"},"3253":{"ln":"Manbazar, Purulia","sn":"Manbazar"},"3254":{"ln":"Jhalda, Purulia","sn":"Jhalda"},"3451":{"ln":"Seharabazar, Asansol","sn":"Seharabazar"},"3452":{"ln":"Guskara, Asansol","sn":"Guskara"},"3453":{"ln":"Katwa, Asansol","sn":"Katwa"},"3454":{"ln":"Kalna, Asansol","sn":"Kalna"},"3461":{"ln":"Rampur Hat, Suri","sn":"Rampur Hat"},"3462":{"ln":"Suri, Suri","sn":"Suri"},"3463":{"ln":"Bolpur, Suri","sn":"Bolpur"},"3465":{"ln":"Nalhati, Suri","sn":"Nalhati"},"3471":{"ln":"Karimpur, Krishnanagar","sn":"Karimpur"},"3472":{"ln":"Krishna Nagar, Krishnanagar","sn":"Krishna Nagar"},"3473":{"ln":"Ranaghat, Krishnanagar","sn":"Ranaghat"},"3474":{"ln":"Bethuadahari, Krishnanagar","sn":"Bethuadahari"},"3481":{"ln":"Islampur (M), Berhampur","sn":"Islampur (M)"},"3482":{"ln":"Berhampur, Berhampur","sn":"Berhampur"},"3483":{"ln":"Murshidabad (Jiaganj), Berhampur","sn":"Murshidabad"},"3484":{"ln":"Kandi, Berhampur","sn":"Kandi"},"3485":{"ln":"Dhuliyan, Berhampur","sn":"Dhuliyan"},"3511":{"ln":"Bubulchandi, Malda","sn":"Bubulchandi"},"3512":{"ln":"Malda, Malda","sn":"Malda"},"3513":{"ln":"Harishchandrapur, Malda","sn":"Harishchandrapur"},"3521":{"ln":"Gangarampur, Balurghat (Raiganj)","sn":"Gangarampur"},"3522":{"ln":"Balurghat, Balurghat (Raiganj)","sn":"Balurghat"},"3523":{"ln":"Raiganj, Balurghat (Raiganj)","sn":"Raiganj"},"3524":{"ln":"Harirampur, Balurghat (Raiganj)","sn":"Harirampur"},"3525":{"ln":"Dalkhola, Balurghat (Raiganj)","sn":"Dalkhola"},"3526":{"ln":"Islampur (Nd), Balurghat (Raiganj)","sn":"Islampur"},"3552":{"ln":"Kalimpong, Darjeeling (Siliguri)","sn":"Kalimpong"},"3561":{"ln":"Jalpaiguri, Jalpaiguri","sn":"Jalpaiguri"},"3562":{"ln":"Mal Bazar, Jalpaiguri","sn":"Mal Bazar"},"3563":{"ln":"Birpara, Jalpaiguri","sn":"Birpara"},"3564":{"ln":"Alipurduar, Jalpaiguri","sn":"Alipurduar"},"3565":{"ln":"Nagarakata, Jalpaiguri","sn":"Nagarakata"},"3566":{"ln":"Kalchini, Jalpaiguri","sn":"Kalchini"},"3581":{"ln":"Dinhata, Coochbehar","sn":"Dinhata"},"3582":{"ln":"Coochbehar, Coochbehar","sn":"Coochbehar"},"3583":{"ln":"Mathabhanga, Coochbehar","sn":"Mathabhanga"},"3584":{"ln":"Mekhliganj, Coochbehar","sn":"Mekhliganj"},"3592":{"ln":"Gangtok, Gangtok","sn":"Gangtok"},"3595":{"ln":"Gauzing (Nayabazar), Gangtok","sn":"Gauzing"},"3621":{"ln":"Boko, Guwahati","sn":"Boko"},"3623":{"ln":"Barama, Guwahati","sn":"Barama"},"3624":{"ln":"Nalbari, Guwahati","sn":"Nalbari"},"3637":{"ln":"Cherrapunjee, Meghalaya (Shillong)","sn":"Cherrapunjee"},"3638":{"ln":"Nongpoh, Meghalaya (Shillong)","sn":"Nongpoh"},"3639":{"ln":"Baghmara, Meghalaya (Shillong)","sn":"Baghmara"},"3650":{"ln":"Dadengiri (Phulbari), Meghalaya (Shillong)","sn":"Dadengiri"},"3651":{"ln":"Tura, Meghalaya (Shillong)","sn":"Tura"},"3652":{"ln":"Jowai, Meghalaya (Shillong)","sn":"Jowai"},"3653":{"ln":"Amlaren (Dawki), Meghalaya (Shillong)","sn":"Amlaren"},"3654":{"ln":"Nongstoin, Meghalaya (Shillong)","sn":"Nongstoin"},"3655":{"ln":"Khliehriat, Meghalaya (Shillong)","sn":"Khliehriat"},"3656":{"ln":"Mawkyrwat, Meghalaya (Shillong)","sn":"Mawkyrwat"},"3657":{"ln":"Mairang, Meghalaya (Shillong)","sn":"Mairang"},"3658":{"ln":"Williamnagar, Meghalaya (Shillong)","sn":"Williamnagar"},"3659":{"ln":"Resubelpara (Mendipathar), Meghalaya (Shillong)","sn":"Resubelpara"},"3661":{"ln":"Kokrajhar, Bongaigaon (Kokrajhar)","sn":"Kokrajhar"},"3662":{"ln":"Dhubri, Bongaigaon (Kokrajhar)","sn":"Dhubri"},"3663":{"ln":"Goalpara, Bongaigaon (Kokrajhar)","sn":"Goalpara"},"3664":{"ln":"Hajo, Guwahati","sn":"Hajo"},"3665":{"ln":"Tarabarihat, Guwahati","sn":"Tarabarihat"},"3666":{"ln":"Barpeta Road, Guwahati","sn":"Barpeta Road"},"3667":{"ln":"Bilasipara, Bongaigaon (Kokrajhar)","sn":"Bilasipara"},"3668":{"ln":"Bijni, Bongaigaon (Kokrajhar)","sn":"Bijni"},"3669":{"ln":"Abhayapuri, Bongaigaon (Kokrajhar)","sn":"Abhayapuri"},"3670":{"ln":"Maibong, Nagaon","sn":"Maibong"},"3671":{"ln":"Diphu, Nagaon","sn":"Diphu"},"3672":{"ln":"Nagaon, Nagaon","sn":"Nagaon"},"3673":{"ln":"Haflong, Nagaon","sn":"Haflong"},"3674":{"ln":"Hojai, Nagaon","sn":"Hojai"},"3675":{"ln":"Bokajan, Nagaon","sn":"Bokajan"},"3676":{"ln":"Howraghat, Nagaon","sn":"Howraghat"},"3677":{"ln":"Baithalangshu, Nagaon","sn":"Baithalangshu"},"3678":{"ln":"Morigaon, Nagaon","sn":"Morigaon"},"3711":{"ln":"Udalguri, Tezpur","sn":"Udalguri"},"3712":{"ln":"Tezpur, Tezpur","sn":"Tezpur"},"3713":{"ln":"Mangaldoi, Tezpur","sn":"Mangaldoi"},"3714":{"ln":"Rangapara, Tezpur","sn":"Rangapara"},"3715":{"ln":"Gohpur, Tezpur","sn":"Gohpur"},"3751":{"ln":"Digboi, Tinsukia (Dibrugarh)","sn":"Digboi"},"3752":{"ln":"North Lakhimpur, Tinsukia (Dibrugarh)","sn":"North Lakhimpur"},"3753":{"ln":"Dhemaji, Tinsukia (Dibrugarh)","sn":"Dhemaji"},"3754":{"ln":"Moranhat, Tinsukia (Dibrugarh)","sn":"Moranhat"},"3756":{"ln":"Sadiya, Tinsukia (Dibrugarh)","sn":"Sadiya"},"3758":{"ln":"Dhakuakhana, Tinsukia (Dibrugarh)","sn":"Dhakuakhana"},"3759":{"ln":"Bihupuria, Tinsukia (Dibrugarh)","sn":"Bihupuria"},"3771":{"ln":"Mariani, Jorhat","sn":"Mariani"},"3772":{"ln":"Sibsagar, Jorhat","sn":"Sibsagar"},"3774":{"ln":"Golaghat, Jorhat","sn":"Golaghat"},"3775":{"ln":"Majuli, Jorhat","sn":"Majuli"},"3776":{"ln":"Bokakhat, Jorhat","sn":"Bokakhat"},"3777":{"ln":"Yangkiyang, Arunachal-Pradesh (Zero)","sn":"Yangkiyang"},"3778":{"ln":"Pakkekesang, Arunachal-Pradesh (Zero)","sn":"Pakkekesang"},"3779":{"ln":"Roing-III (Mariso), Arunachal-Pradesh (Zero)","sn":"Roing"},"3780":{"ln":"Dirang, Arunachal-Pradesh (Zero)","sn":"Dirang"},"3782":{"ln":"Kalaktung (Bomdila), Arunachal-Pradesh (Zero)","sn":"Kalaktung"},"3783":{"ln":"Along, Arunachal-Pradesh (Zero)","sn":"Along"},"3784":{"ln":"Nefra, Arunachal-Pradesh (Zero)","sn":"Nefra"},"3785":{"ln":"Bameng, Arunachal-Pradesh (Zero)","sn":"Bameng"},"3786":{"ln":"Khonsa, Arunachal-Pradesh (Zero)","sn":"Khonsa"},"3787":{"ln":"Seppa, Arunachal-Pradesh (Zero)","sn":"Seppa"},"3788":{"ln":"Kolaring, Arunachal-Pradesh (Zero)","sn":"Kolaring"},"3789":{"ln":"Huri, Arunachal-Pradesh (Zero)","sn":"Huri"},"3790":{"ln":"Tali, Arunachal-Pradesh (Zero)","sn":"Tali"},"3791":{"ln":"Taliha, Arunachal-Pradesh (Zero)","sn":"Taliha"},"3792":{"ln":"Daporizo, Arunachal-Pradesh (Zero)","sn":"Daporizo"},"3793":{"ln":"Mechuka, Arunachal-Pradesh (Zero","sn":"Mechuka"},"3794":{"ln":"Tawang, Arunachal-Pradesh (Zero)","sn":"Tawang"},"3795":{"ln":"Basar, Arunachal-Pradesh (Zero)","sn":"Basar"},"3797":{"ln":"Pangin, Arunachal-Pradesh (Zero)","sn":"Pangin"},"3798":{"ln":"Mariyang, Arunachal-Pradesh (Zero)","sn":"Mariyang"},"3799":{"ln":"Tuting, Arunachal-Pradesh (Zero)","sn":"Tuting"},"3800":{"ln":"Jairampur, Arunachal-Pradesh (Zero)","sn":"Jairampur"},"3801":{"ln":"Anini, Arunachal-Pradesh (Zero)","sn":"Anini"},"3802":{"ln":"Roing-II (Arda), Arunachal-Pradesh (Zero)","sn":"Roing"},"3803":{"ln":"Roing-I, Arunachal-Pradesh (Zero)","sn":"Roing"},"3804":{"ln":"Tezu, Arunachal-Pradesh (Zero)","sn":"Tezu"},"3805":{"ln":"Hayuliang, Arunachal-Pradesh (Zero)","sn":"Hayuliang"},"3806":{"ln":"Chowkhem, Arunachal-Pradesh (Zero)","sn":"Chowkhem"},"3807":{"ln":"Miao, Arunachal-Pradesh (Zero)","sn":"Miao"},"3808":{"ln":"Changlang, Arunachal-Pradesh (Zero)","sn":"Changlang"},"3809":{"ln":"Sagalee, Arunachal-Pradesh (Zero)","sn":"Sagalee"},"3821":{"ln":"R. K. Pur, Tripura (Agartala)","sn":"R. K. Pur"},"3822":{"ln":"Dharam Nagar, Tripura (Agartala)","sn":"Dharam Nagar"},"3823":{"ln":"Belonia, Tripura (Agartala)","sn":"Belonia"},"3824":{"ln":"Kailsahar, Tripura (Agartala)","sn":"Kailsahar"},"3825":{"ln":"Khowai, Tripura (Agartala)","sn":"Khowai"},"3826":{"ln":"Ambasa, Tripura (Agartala)","sn":"Ambasa"},"3830":{"ln":"Champai-II (Chiapui), Mizoram (Aizwal)","sn":"Champai"},"3831":{"ln":"Champa-I, Mizoram (Aizwal)","sn":"Champa"},"3834":{"ln":"Demagiri, Mizoram (Aizwal)","sn":"Demagiri"},"3835":{"ln":"Saiha-I, Mizoram (Aizwal)","sn":"Saiha"},"3836":{"ln":"Saiha-II (Tuipang), Mizoram (Aizwal)","sn":"Saiha"},"3837":{"ln":"Kolasib, Mizoram (Aizwal)","sn":"Kolasib"},"3838":{"ln":"Aizwal-II (Serchip), Mizoram (Aizwal)","sn":"Aizwal"},"3839":{"ln":"Jalukie, Nagaland (Kohima)","sn":"Jalukie"},"3841":{"ln":"Vdarbondh, Silchar","sn":"Vdarbondh"},"3842":{"ln":"Silchar, Silchar","sn":"Silchar"},"3843":{"ln":"Karimganj, Silchar","sn":"Karimganj"},"3844":{"ln":"Hailakandi, Silchar","sn":"Hailakandi"},"3845":{"ln":"Ukhrul Central, Manipur (Imphal)","sn":"Ukhrul Central"},"3848":{"ln":"Thonbal, Manipur (Imphal)","sn":"Thonbal"},"3860":{"ln":"Wokha, Nagaland (Kohima)","sn":"Wokha"},"3861":{"ln":"Tuengsang, Nagaland (Kohima)","sn":"Tuengsang"},"3862":{"ln":"Dimapur, Nagaland (Kohima)","sn":"Dimapur"},"3863":{"ln":"Kiphire, Nagaland (Kohima)","sn":"Kiphire"},"3865":{"ln":"Phek, Nagaland (Kohima)","sn":"Phek"},"3867":{"ln":"Zuenheboto, Nagaland (Kohima)","sn":"Zuenheboto"},"3869":{"ln":"Mon, Nagaland (Kohima)","sn":"Mon"},"3870":{"ln":"Ukhrursouth (Kassemkhulen), Manipur (Imphal)","sn":"Ukhrursouth"},"3871":{"ln":"Mao (Korang), Manipur (Imphal)","sn":"Mao"},"3872":{"ln":"Chandel, Manipur (Imphal)","sn":"Chandel"},"3873":{"ln":"Thinghat, Manipur (Imphal)","sn":"Thinghat"},"3874":{"ln":"Churchandpur, Manipur (Imphal)","sn":"Churchandpur"},"3876":{"ln":"Jiribam, Manipur (Imphal)","sn":"Jiribam"},"3877":{"ln":"Tamenglong, Manipur (Imphal)","sn":"Tamenglong"},"3878":{"ln":"Chakpikarong, Manipur (Imphal)","sn":"Chakpikarong"},"3879":{"ln":"Bishenpur, Manipur (Imphal)","sn":"Bishenpur"},"3880":{"ln":"Sadarhills (Kangpokai), Manipur (Imphal)","sn":"Sadarhills"},"4111":{"ln":"Sriperumpudur, Chengalpattu (Kancheepuram)","sn":"Sriperumpudur"},"4112":{"ln":"Kancheepuram, Chengalpattu (Kancheepuram)","sn":"Kancheepuram"},"4114":{"ln":"Chengalpattu, Chengalpattu (Kancheepuram)","sn":"Chengalpattu"},"4115":{"ln":"Madurantagam, Chengalpattu (Kancheepuram)","sn":"Madurantagam"},"4116":{"ln":"Tiruvellore, Chengalpattu (Kancheepuram)","sn":"Tiruvellore"},"4118":{"ln":"Tiruttani, Chengalpattu (Kancheepuram)","sn":"Tiruttani"},"4119":{"ln":"Ponneri, Chengalpattu (Kancheepuram)","sn":"Ponneri"},"4142":{"ln":"Cuddalore, Cuddalore","sn":"Cuddalore"},"4143":{"ln":"Virudhachalam, Cuddalore","sn":"Virudhachalam"},"4144":{"ln":"Chidambaram, Cuddalore","sn":"Chidambaram"},"4145":{"ln":"Gingee, Cuddalore","sn":"Gingee"},"4146":{"ln":"Villupuram, Cuddalore","sn":"Villupuram"},"4147":{"ln":"Tindivanam, Cuddalore","sn":"Tindivanam"},"4149":{"ln":"Ulundurpet, Cuddalore","sn":"Ulundurpet"},"4151":{"ln":"Kallkurichi, Cuddalore","sn":"Kallkurichi"},"4153":{"ln":"Arakandanallur, Cuddalore","sn":"Arakandanallur"},"4171":{"ln":"Gudiyatham, Vellore","sn":"Gudiyatham"},"4172":{"ln":"Ranipet, Vellore","sn":"Ranipet"},"4173":{"ln":"Arni, Vellore","sn":"Arni"},"4174":{"ln":"Vaniyambadi, Vellore","sn":"Vaniyambadi"},"4175":{"ln":"Tiruvannamalai, Vellore","sn":"Tiruvannamalai"},"4177":{"ln":"Arkonam, Vellore","sn":"Arkonam"},"4179":{"ln":"Tirupattur, Vellore","sn":"Tirupattur"},"4181":{"ln":"Polur, Vellore","sn":"Polur"},"4182":{"ln":"Tiruvettipuram, Vellore","sn":"Tiruvettipuram"},"4183":{"ln":"Wandiwash, Vellore","sn":"Wandiwash"},"4188":{"ln":"Chengam, Vellore","sn":"Chengam"},"4202":{"ln":"Mulanur, Erode","sn":"Mulanur"},"4204":{"ln":"Kodumudi, Erode","sn":"Kodumudi"},"4252":{"ln":"Udumalpet, Coimbatore","sn":"Udumalpet"},"4253":{"ln":"Anamalai, Coimbatore","sn":"Anamalai"},"4254":{"ln":"Mettupalayam, Coimbatore","sn":"Mettupalayam"},"4255":{"ln":"Palladum, Coimbatore","sn":"Palladum"},"4256":{"ln":"Bhavani, Erode","sn":"Bhavani"},"4257":{"ln":"Kangayam, Erode","sn":"Kangayam"},"4258":{"ln":"Dharampuram, Erode","sn":"Dharampuram"},"4259":{"ln":"Pollachi, Coimbatore","sn":"Pollachi"},"4262":{"ln":"Gudalur, Ooty","sn":"Gudalur"},"4266":{"ln":"Kotagiri, Ooty","sn":"Kotagiri"},"4268":{"ln":"Velur, Salem","sn":"Velur"},"4281":{"ln":"Yercaud, Salem","sn":"Yercaud"},"4282":{"ln":"Attur, Salem","sn":"Attur"},"4283":{"ln":"Sankagiri, Salem","sn":"Sankagiri"},"4285":{"ln":"Gobichettipalayam, Erode","sn":"Gobichettipalayam"},"4286":{"ln":"Namakkal, Salem","sn":"Namakkal"},"4287":{"ln":"Rasipuram, Salem","sn":"Rasipuram"},"4288":{"ln":"Tiruchengode, Salem","sn":"Tiruchengode"},"4290":{"ln":"Omalur, Salem","sn":"Omalur"},"4292":{"ln":"Valapady, Salem","sn":"Valapady"},"4294":{"ln":"Perundurai, Erode","sn":"Perundurai"},"4295":{"ln":"Sathiyamangalam, Erode","sn":"Sathiyamangalam"},"4296":{"ln":"Avanashi, Coimbatore","sn":"Avanashi"},"4298":{"ln":"Metturdam, Salem","sn":"Metturdam"},"4320":{"ln":"Aravakurichi, Trichy","sn":"Aravakurichi"},"4322":{"ln":"Pudukkottai, Trichy","sn":"Pudukkottai"},"4323":{"ln":"Kulithalai, Trichy","sn":"Kulithalai"},"4324":{"ln":"Karur, Trichy","sn":"Karur"},"4326":{"ln":"Musiri, Trichy","sn":"Musiri"},"4327":{"ln":"Thuraiyure, Trichy","sn":"Thuraiyure"},"4328":{"ln":"Perambalur, Trichy","sn":"Perambalur"},"4329":{"ln":"Ariyalur, Trichy","sn":"Ariyalur"},"4331":{"ln":"Jayamkondan, Trichy","sn":"Jayamkondan"},"4332":{"ln":"Manaparai, Trichy","sn":"Manaparai"},"4333":{"ln":"Ponnamaravathi, Trichy","sn":"Ponnamaravathi"},"4339":{"ln":"Keeranur, Trichy","sn":"Keeranur"},"4341":{"ln":"Uthangarai, Dharmapuri","sn":"Uthangarai"},"4342":{"ln":"Dharmapuri, Dharmapuri","sn":"Dharmapuri"},"4343":{"ln":"Krishnagiri, Dharmapuri","sn":"Krishnagiri"},"4344":{"ln":"Hosur, Dharmapuri","sn":"Hosur"},"4346":{"ln":"Harur, Dharmapuri","sn":"Harur"},"4347":{"ln":"Denkanikoitah, Dharmapuri","sn":"Denkanikoitah"},"4348":{"ln":"Palacode, Dharmapuri","sn":"Palacode"},"4362":{"ln":"Thanjavur, Thanjavur","sn":"Thanjavur"},"4364":{"ln":"Mayiladuthurai, Thanjavur","sn":"Mayiladuthurai"},"4365":{"ln":"Nagapattinam, Thanjavur","sn":"Nagapattinam"},"4366":{"ln":"Tiruvarur, Thanjavur","sn":"Tiruvarur"},"4367":{"ln":"Mannargudi, Thanjavur","sn":"Mannargudi"},"4368":{"ln":"Karaikal, Thanjavur","sn":"Karaikal"},"4369":{"ln":"Thiruraipoondi, Thanjavur","sn":"Thiruraipoondi"},"4371":{"ln":"Arantangi, Trichy","sn":"Arantangi"},"4372":{"ln":"Orathanad, Thanjavur","sn":"Orathanad"},"4373":{"ln":"Pattukottai, Thanjavur","sn":"Pattukottai"},"4374":{"ln":"Papanasam, Thanjavur","sn":"Papanasam"},"4542":{"ln":"Kodaikanal, Madurai","sn":"Kodaikanal"},"4543":{"ln":"Batlagundu, Madurai","sn":"Batlagundu"},"4544":{"ln":"Natham, Madurai","sn":"Natham"},"4545":{"ln":"Palani, Madurai","sn":"Palani"},"4546":{"ln":"Theni, Madurai","sn":"Theni"},"4549":{"ln":"Thirumanglam, Madurai","sn":"Thirumanglam"},"4551":{"ln":"Vedasandur, Madurai","sn":"Vedasandur"},"4552":{"ln":"Usiliampatti, Madurai","sn":"Usiliampatti"},"4553":{"ln":"Oddanchatram, Madurai","sn":"Oddanchatram"},"4554":{"ln":"Cumbum, Madurai","sn":"Cumbum"},"4561":{"ln":"Devakottai, Karaikudi","sn":"Devakottai"},"4562":{"ln":"Virudhunagar, Virudhunagar","sn":"Virudhunagar"},"4563":{"ln":"Rajapalayam, Virudhunagar","sn":"Rajapalayam"},"4564":{"ln":"Paramakudi, Karaikudi","sn":"Paramakudi"},"4565":{"ln":"Karaikudi, Karaikudi","sn":"Karaikudi"},"4566":{"ln":"Aruppukottai, Virudhunagar","sn":"Aruppukottai"},"4567":{"ln":"Ramanathpuram, Karaikudi","sn":"Ramanathpuram"},"4573":{"ln":"Rameshwaram, Karaikudi","sn":"Rameshwaram"},"4574":{"ln":"Manamadurai, Karaikudi","sn":"Manamadurai"},"4575":{"ln":"Sivaganga, Karaikudi","sn":"Sivaganga"},"4576":{"ln":"Mudukulathur, Karaikudi","sn":"Mudukulathur"},"4577":{"ln":"Tirupathur, Karaikudi","sn":"Tirupathur"},"4630":{"ln":"Srivaikundam, Tuticorin","sn":"Srivaikundam"},"4632":{"ln":"Kovilpatti, Tuticorin","sn":"Kovilpatti"},"4633":{"ln":"Tenkasi, Tirunelvelli","sn":"Tenkasi"},"4634":{"ln":"Ambasamudram, Tirunelvelli","sn":"Ambasamudram"},"4635":{"ln":"Nanguneri, Tirunelvelli","sn":"Nanguneri"},"4636":{"ln":"Sankaran Koil, Tirunelvelli","sn":"Sankaran Koil"},"4637":{"ln":"Valliyoor, Tirunelvelli","sn":"Valliyoor"},"4638":{"ln":"Vilathikulam, Tuticorin","sn":"Vilathikulam"},"4639":{"ln":"Tiruchendur, Tuticorin","sn":"Tiruchendur"},"4651":{"ln":"Kuzhithurai, Nagarcoil","sn":"Kuzhithurai"},"4652":{"ln":"Nagercoil, Nagarcoil","sn":"Nagercoil"},"4728":{"ln":"Nedumandad, Thiruvananthapuram","sn":"Nedumandad"},"4733":{"ln":"Pathanamthitta, Tiruvalla","sn":"Pathanamthitta"},"4734":{"ln":"Adoor, Tiruvalla","sn":"Adoor"},"4735":{"ln":"Ranni, Tiruvalla","sn":"Ranni"},"4822":{"ln":"Palai, Kottayam","sn":"Palai"},"4828":{"ln":"Kanjirapally, Kottayam","sn":"Kanjirapally"},"4829":{"ln":"Vaikom, Kottayam","sn":"Vaikom"},"4862":{"ln":"Thodupuzha, Ernakulam","sn":"Thodupuzha"},"4864":{"ln":"Adimaly, Ernakulam","sn":"Adimaly"},"4865":{"ln":"Munnar, Ernakulam","sn":"Munnar"},"4868":{"ln":"Nedumgandam, Ernakulam","sn":"Nedumgandam"},"4869":{"ln":"Peermedu, Ernakulam","sn":"Peermedu"},"4884":{"ln":"Vadakkanchery, Trichur","sn":"Vadakkanchery"},"4885":{"ln":"Kunnamkulam, Trichur","sn":"Kunnamkulam"},"4890":{"ln":"Bitra, Kavarathy","sn":"Bitra"},"4891":{"ln":"Amini, Kavarathy","sn":"Amini"},"4892":{"ln":"Minicoy, Kavarathy","sn":"Minicoy"},"4893":{"ln":"Androth, Kavarathy","sn":"Androth"},"4894":{"ln":"Agathy, Kavarathy","sn":"Agathy"},"4895":{"ln":"Kalpeni, Kavarathy","sn":"Kalpeni"},"4896":{"ln":"Kavarathy, Kavarathy","sn":"Kavarathy"},"4897":{"ln":"Kadamath, Kavarathy","sn":"Kadamath"},"4898":{"ln":"Kiltan, Kavarathy","sn":"Kiltan"},"4899":{"ln":"Chetlat, Kavarathy","sn":"Chetlat"},"4922":{"ln":"Alathur, Palghat","sn":"Alathur"},"4923":{"ln":"Koduvayur, Palghat","sn":"Koduvayur"},"4924":{"ln":"Mannarghat, Palghat","sn":"Mannarghat"},"4926":{"ln":"Shoranur, Palghat","sn":"Shoranur"},"4931":{"ln":"Nilambur, Calicut (Kozhikode)","sn":"Nilambur"},"4933":{"ln":"Perinthalmanna, Calicut (Kozhikode)","sn":"Perinthalmanna"},"4935":{"ln":"Mananthody, Calicut (Kozhikode)","sn":"Mananthody"},"4936":{"ln":"Kalpetta, Calicut (Kozhikode)","sn":"Kalpetta"},"4982":{"ln":"Taliparamba, Cannanore","sn":"Taliparamba"},"4985":{"ln":"Payyanur, Cannanore","sn":"Payyanur"},"4994":{"ln":"Kasargode, Cannanore","sn":"Kasargode"},"4997":{"ln":"Kanhangad, Cannanore","sn":"Kanhangad"},"4998":{"ln":"Uppala, Cannanore","sn":"Uppala"},"5111":{"ln":"Akbarpur, Kanpur","sn":"Akbarpur"},"5112":{"ln":"Bilhaur, Kanpur","sn":"Bilhaur"},"5113":{"ln":"Bhognipur (Pakhrayan), Kanpur","sn":"Bhognipur"},"5114":{"ln":"Derapur (Jhinjak), Kanpur","sn":"Derapur"},"5115":{"ln":"Ghatampur, Kanpur","sn":"Ghatampur"},"5142":{"ln":"Purwa (Bighapur), Unnao","sn":"Purwa"},"5143":{"ln":"Hasanganj, Unnao","sn":"Hasanganj"},"5144":{"ln":"Safipur, Unnao","sn":"Safipur"},"5162":{"ln":"Orai, Orai","sn":"Orai"},"5164":{"ln":"Kalpi, Orai","sn":"Kalpi"},"5165":{"ln":"Konch, Orai","sn":"Konch"},"5168":{"ln":"Jalaun, Orai","sn":"Jalaun"},"5170":{"ln":"Chirgaon (Moth), Jhansi","sn":"Chirgaon"},"5171":{"ln":"Garauth, Jhansi","sn":"Garauth"},"5172":{"ln":"Mehraun, Jhansi","sn":"Mehraun"},"5174":{"ln":"Jhansi, Jhansi","sn":"Jhansi"},"5175":{"ln":"Lalitpur-II (Talbehat), Jhansi","sn":"Lalitpur"},"5176":{"ln":"Lalitpur-I (Lalitpur), Jhansi","sn":"Lalitpur"},"5178":{"ln":"Mauranipur, Jhansi","sn":"Mauranipur"},"5180":{"ln":"Fateh-Pur-I (Fatehpur), Fatehpur","sn":"Fateh-Pur"},"5181":{"ln":"Bindki, Fatehpur","sn":"Bindki"},"5182":{"ln":"Khaga, Fatehpur","sn":"Khaga"},"5183":{"ln":"Fatehpur-II (Gazipur), Fatehpur","sn":"Fatehpur"},"5190":{"ln":"Baberu, Banda","sn":"Baberu"},"5191":{"ln":"Naraini (Attarra), Banda","sn":"Naraini"},"5192":{"ln":"Banda, Banda","sn":"Banda"},"5194":{"ln":"Karvi-II (Manikpur), Banda","sn":"Karvi"},"5195":{"ln":"Mau (Rajapur), Banda","sn":"Mau"},"5198":{"ln":"Karvi -I (Karvi), Banda","sn":"Karvi "},"5212":{"ln":"Malihabad, Lucknow","sn":"Malihabad"},"5240":{"ln":"Fatehpur, Barabanki","sn":"Fatehpur"},"5241":{"ln":"Ramsanehi Ghat, Barabanki","sn":"Ramsanehi Ghat"},"5244":{"ln":"Haidergarh, Barabanki","sn":"Haidergarh"},"5248":{"ln":"Barabanki, Barabanki","sn":"Barabanki"},"5250":{"ln":"Bahraich-II (Bhinga), Bahraich","sn":"Bahraich"},"5251":{"ln":"Kaisarganj-I (Kaiserganj), Bahraich","sn":"Kaisarganj"},"5252":{"ln":"Bahraich-I (Bahrailh), Bahraich","sn":"Bahraich"},"5253":{"ln":"Nanpara-I (Nanpara), Bahraich","sn":"Nanpara"},"5254":{"ln":"Nanparah-II (Mihinpurwa), Bahraich","sn":"Nanparah"},"5255":{"ln":"Kaisarganh-II (Mahasi), Bahraich","sn":"Kaisarganh"},"5260":{"ln":"Tarabganj-I (Terabganj), Gonda","sn":"Tarabganj"},"5261":{"ln":"Tarabganj-II (Colonelganj), Gonda","sn":"Tarabganj"},"5262":{"ln":"Gonda, Gonda","sn":"Gonda"},"5263":{"ln":"Balarampur-I (Balrampur), Gonda","sn":"Balarampur"},"5264":{"ln":"Balarampur-II (Tulsipur), Gonda","sn":"Balarampur"},"5265":{"ln":"Utraula, Gonda","sn":"Utraula"},"5270":{"ln":"Bikapur, Faizabad","sn":"Bikapur"},"5271":{"ln":"Akbarpur-I (Akbarpur), Faizabad","sn":"Akbarpur"},"5273":{"ln":"Tandai-I (Tanda), Faizabad","sn":"Tandai"},"5274":{"ln":"Tanda-II (Baskhari), Faizabad","sn":"Tanda"},"5275":{"ln":"Akbarpur-II (Jalalpur), Faizabad","sn":"Akbarpur"},"5278":{"ln":"Faizabad, Faizabad","sn":"Faizabad"},"5280":{"ln":"Rath, Hamirpur","sn":"Rath"},"5281":{"ln":"Mahoba, Hamirpur","sn":"Mahoba"},"5282":{"ln":"Hamirpur, Hamirpur","sn":"Hamirpur"},"5283":{"ln":"Charkhari, Hamirpur","sn":"Charkhari"},"5284":{"ln":"Maudaha, Hamirpur","sn":"Maudaha"},"5311":{"ln":"Salon -I (Salon), Raibareilly","sn":"Salon "},"5313":{"ln":"Salon-II (Jais), Raibareilly","sn":"Salon"},"5315":{"ln":"Dalmau-II (Lalganj), Raibareilly","sn":"Dalmau"},"5317":{"ln":"Dalmau-I (Dalmau), Raibareilly","sn":"Dalmau"},"5331":{"ln":"Bharwari, Allahabad","sn":"Bharwari"},"5332":{"ln":"Phoolpur, Allahabad","sn":"Phoolpur"},"5333":{"ln":"Karchhana (Shankergarh), Allahabad","sn":"Karchhana"},"5334":{"ln":"Meja (Sirsa), Allahabad","sn":"Meja"},"5335":{"ln":"Soraon, Allahabad","sn":"Soraon"},"5341":{"ln":"Kunda, Pratapgarh","sn":"Kunda"},"5342":{"ln":"Pratapgarh, Pratapgarh","sn":"Pratapgarh"},"5343":{"ln":"Patti, Pratapgarh","sn":"Patti"},"5361":{"ln":"Musafirkhana, Sultanpur","sn":"Musafirkhana"},"5362":{"ln":"Sultanpur, Sultanpur","sn":"Sultanpur"},"5364":{"ln":"Kadipur, Sultanpur","sn":"Kadipur"},"5368":{"ln":"Amethi, Sultanpur","sn":"Amethi"},"5412":{"ln":"Chandauli (Mugalsarai), Varansi","sn":"Chandauli"},"5413":{"ln":"Chakia, Varansi","sn":"Chakia"},"5414":{"ln":"Bhadohi, Varansi","sn":"Bhadohi"},"5440":{"ln":"Mirzapur-II (Hallia), Mirzapur","sn":"Mirzapur"},"5442":{"ln":"Mirzapur-I (Mirzapur), Mirzapur","sn":"Mirzapur"},"5443":{"ln":"Chunur, Mirzapur","sn":"Chunur"},"5444":{"ln":"Robertsganj-I, Mirzapur","sn":"Robertsganj"},"5445":{"ln":"Robertsganj -II (Obra), Mirzapur","sn":"Robertsganj "},"5446":{"ln":"Dudhi-II (Pipri), Mirzapur","sn":"Dudhi"},"5447":{"ln":"Dudhi-I (Dudhi), Mirzapur","sn":"Dudhi"},"5450":{"ln":"Kerakat, Jaunpur","sn":"Kerakat"},"5451":{"ln":"Mariyahu, Jaunpur","sn":"Mariyahu"},"5452":{"ln":"Jaunpur, Jaunpur","sn":"Jaunpur"},"5453":{"ln":"Shahganj, Jaunpur","sn":"Shahganj"},"5454":{"ln":"Machlishahar, Jaunpur","sn":"Machlishahar"},"5460":{"ln":"Phulpur-I (Phulpur), Azamgarh","sn":"Phulpur"},"5461":{"ln":"Ghosi, Azamgarh","sn":"Ghosi"},"5462":{"ln":"Azamgarh, Azamgarh","sn":"Azamgarh"},"5463":{"ln":"Lalganj, Azamgarh","sn":"Lalganj"},"5464":{"ln":"Maunathbhanjan, Azamgarh","sn":"Maunathbhanjan"},"5465":{"ln":"Phulpur-II (Atrawlia), Azamgarh","sn":"Phulpur"},"5466":{"ln":"Sagri, Azamgarh","sn":"Sagri"},"5491":{"ln":"Rasara, Ballia","sn":"Rasara"},"5493":{"ln":"Mohamdabad, Ghazipur","sn":"Mohamdabad"},"5494":{"ln":"Bansdeeh, Ballia","sn":"Bansdeeh"},"5495":{"ln":"Saidpur, Ghazipur","sn":"Saidpur"},"5496":{"ln":"Ballia-II (Raniganj), Ballia","sn":"Ballia"},"5497":{"ln":"Zamania, Ghazipur","sn":"Zamania"},"5498":{"ln":"Ballia-I (Ballia), Ballia","sn":"Ballia"},"5521":{"ln":"Bansgaon-II (Barhal Ganj), Gorakhpur","sn":"Bansgaon"},"5522":{"ln":"Pharenda-I (Compierganj), Gorakhpur","sn":"Pharenda"},"5523":{"ln":"Maharajganj, Gorakhpur","sn":"Maharajganj"},"5524":{"ln":"Pharenda-II (Anand Nagar), Gorakhpur","sn":"Pharenda"},"5525":{"ln":"Bansgaon -I (Bansgaon), Gorakhpur","sn":"Bansgaon "},"5541":{"ln":"Domariyaganj, Basti","sn":"Domariyaganj"},"5542":{"ln":"Basti, Basti","sn":"Basti"},"5543":{"ln":"Naugarh-II (Barhani), Basti","sn":"Naugarh"},"5544":{"ln":"Naugarh-I (Tetribazar), Basti","sn":"Naugarh"},"5545":{"ln":"Bansi, Basti","sn":"Bansi"},"5546":{"ln":"Harraiya, Basti","sn":"Harraiya"},"5547":{"ln":"Khalilabad -I, Basti","sn":"Khalilabad "},"5548":{"ln":"Khalilabad-II (Mehdawal), Basti","sn":"Khalilabad"},"5561":{"ln":"Salempur-II (Barhaj), Deoria","sn":"Salempur"},"5563":{"ln":"Captanganj (Khadda), Deoria","sn":"Captanganj"},"5564":{"ln":"Padrauna, Deoria","sn":"Padrauna"},"5566":{"ln":"Salempur-I (Salempur), Deoria","sn":"Salempur"},"5567":{"ln":"Captanganj-I (Captanganj), Deoria","sn":"Captanganj"},"5568":{"ln":"Deoria, Deoria","sn":"Deoria"},"5612":{"ln":"Ferozabad, Agra","sn":"Ferozabad"},"5613":{"ln":"Achhnera, Agra","sn":"Achhnera"},"5614":{"ln":"Jarar, Agra","sn":"Jarar"},"5640":{"ln":"Kaman, Bharatpur","sn":"Kaman"},"5641":{"ln":"Deeg, Bharatpur","sn":"Deeg"},"5642":{"ln":"Dholpur, Bharatpur","sn":"Dholpur"},"5643":{"ln":"Nadbai, Bharatpur","sn":"Nadbai"},"5644":{"ln":"Bharatpur, Bharatpur","sn":"Bharatpur"},"5645":{"ln":"Rupbas, Bharatpur","sn":"Rupbas"},"5646":{"ln":"Baseri, Bharatpur","sn":"Baseri"},"5647":{"ln":"Bari, Bharatpur","sn":"Bari"},"5648":{"ln":"Bayana, Bharatpur","sn":"Bayana"},"5661":{"ln":"Sadabad, Mathura","sn":"Sadabad"},"5662":{"ln":"Chhata (Kosikalan), Mathura","sn":"Chhata"},"5664":{"ln":"Mant (Vrindavan), Mathura","sn":"Mant"},"5671":{"ln":"Jasrana, Mainpuri","sn":"Jasrana"},"5672":{"ln":"Mainpuri, Mainpuri","sn":"Mainpuri"},"5673":{"ln":"Bhogaon, Mainpuri","sn":"Bhogaon"},"5676":{"ln":"Shikohabad, Mainpuri","sn":"Shikohabad"},"5677":{"ln":"Karhal, Mainpuri","sn":"Karhal"},"5680":{"ln":"Bharthana, Etawah","sn":"Bharthana"},"5681":{"ln":"Bidhuna, Etawah","sn":"Bidhuna"},"5683":{"ln":"Auraiya, Etawah","sn":"Auraiya"},"5688":{"ln":"Etawah, Etawah","sn":"Etawah"},"5690":{"ln":"Kaimganj, Farrukhabad","sn":"Kaimganj"},"5691":{"ln":"Chhibramau, Farrukhabad","sn":"Chhibramau"},"5692":{"ln":"Farrukhabad (Fategarh), Farrukhabad","sn":"Farrukhabad"},"5694":{"ln":"Kannauj, Farrukhabad","sn":"Kannauj"},"5721":{"ln":"Sikandra Rao, Aligarh","sn":"Sikandra Rao"},"5722":{"ln":"Hathras, Aligarh","sn":"Hathras"},"5723":{"ln":"Atrauli, Aligarh","sn":"Atrauli"},"5724":{"ln":"Khair, Aligarh","sn":"Khair"},"5731":{"ln":"Garhmukteshwar, Ghaziabad","sn":"Garhmukteshwar"},"5732":{"ln":"Bulandshahr, Ghaziabad","sn":"Bulandshahr"},"5733":{"ln":"Pahasu, Ghaziabad","sn":"Pahasu"},"5734":{"ln":"Debai, Ghaziabad","sn":"Debai"},"5735":{"ln":"Sikandrabad, Ghaziabad","sn":"Sikandrabad"},"5736":{"ln":"Siyana, Ghaziabad","sn":"Siyana"},"5738":{"ln":"Khurja, Ghaziabad","sn":"Khurja"},"5740":{"ln":"Aliganj (Ganjdundwara), Etah","sn":"Aliganj"},"5742":{"ln":"Etah, Etah","sn":"Etah"},"5744":{"ln":"Kasganj, Etah","sn":"Kasganj"},"5745":{"ln":"Jalesar, Etah","sn":"Jalesar"},"5821":{"ln":"Pitamberpur, Bareilly","sn":"Pitamberpur"},"5822":{"ln":"Baheri, Bareilly","sn":"Baheri"},"5823":{"ln":"Aonla -I, Bareilly","sn":"Aonla "},"5824":{"ln":"Aonla-II (Ramnagar), Bareilly","sn":"Aonla"},"5825":{"ln":"Nawabganj, Bareilly","sn":"Nawabganj"},"5831":{"ln":"Dataganj, Badaun","sn":"Dataganj"},"5832":{"ln":"Badaun, Badaun","sn":"Badaun"},"5833":{"ln":"Sahaswan, Badaun","sn":"Sahaswan"},"5834":{"ln":"Bisauli, Badaun","sn":"Bisauli"},"5836":{"ln":"Gunnaur, Badaun","sn":"Gunnaur"},"5841":{"ln":"Tilhar, Sahjahanpur","sn":"Tilhar"},"5842":{"ln":"Shahjahanpur, Sahjahanpur","sn":"Shahjahanpur"},"5843":{"ln":"Jalalabad, Sahjahanpur","sn":"Jalalabad"},"5844":{"ln":"Powayan, Sahjahanpur","sn":"Powayan"},"5850":{"ln":"Hardoi-II (Baghavli), Hardoi","sn":"Hardoi"},"5851":{"ln":"Bilgam-I (Madhoganj), Hardoi","sn":"Bilgam"},"5852":{"ln":"Hardoi-I (Hardoi), Hardoi","sn":"Hardoi"},"5853":{"ln":"Shahabad, Hardoi","sn":"Shahabad"},"5854":{"ln":"Sandila, Hardoi","sn":"Sandila"},"5855":{"ln":"Bilgram-II (Sandi), Hardoi","sn":"Bilgram"},"5861":{"ln":"Misrikh-II (Aurangabad), Sitapur","sn":"Misrikh"},"5862":{"ln":"Sitapur, Sitapur","sn":"Sitapur"},"5863":{"ln":"Biswan, Sitapur","sn":"Biswan"},"5864":{"ln":"Sidhauli (Mahmodabad), Sitapur","sn":"Sidhauli"},"5865":{"ln":"Misrikh -I (Misrikh), Sitapur","sn":"Misrikh "},"5870":{"ln":"Kheri-II (Bhira), Lakhimpur-Kheri","sn":"Kheri"},"5871":{"ln":"Nighasan-I (Palliakalan), Lakhimpur-Kheri","sn":"Nighasan"},"5872":{"ln":"Kheri-I (Kheri), Lakhimpur-Kheri","sn":"Kheri"},"5873":{"ln":"Nighasan-II (Tikonia), Lakhimpur-Kheri","sn":"Nighasan"},"5874":{"ln":"Nighasan-III (Dhaurahra), Lakhimpur-Kheri","sn":"Nighasan"},"5875":{"ln":"Mohamdi-II (Maigalganj), Lakhimpur-Kheri","sn":"Mohamdi"},"5876":{"ln":"Mohamdi-I (Mohamdi), Lakhimpur-Kheri","sn":"Mohamdi"},"5880":{"ln":"Puranpur, Pilibhit","sn":"Puranpur"},"5881":{"ln":"Bisalpur, Pilibhit","sn":"Bisalpur"},"5882":{"ln":"Pilibhit, Pilibhit","sn":"Pilibhit"},"5921":{"ln":"Bilari, Moradabad","sn":"Bilari"},"5922":{"ln":"Amroha, Moradabad","sn":"Amroha"},"5923":{"ln":"Sambhal, Moradabad","sn":"Sambhal"},"5924":{"ln":"Hasanpur, Moradabad","sn":"Hasanpur"},"5942":{"ln":"Nainital, Nainital","sn":"Nainital"},"5943":{"ln":"Khatima, Nainital","sn":"Khatima"},"5944":{"ln":"Kichha-I (Rudrapur), Nainital","sn":"Kichha"},"5945":{"ln":"Haldwani-II (Chorgalian), Nainital","sn":"Haldwani"},"5946":{"ln":"Haldwani-I, Nainital","sn":"Haldwani"},"5947":{"ln":"Kashipur, Nainital","sn":"Kashipur"},"5948":{"ln":"Khatima-II (Sitarganj), Nainital","sn":"Khatima"},"5949":{"ln":"Kichha-II (Bazpur), Nainital","sn":"Kichha"},"5960":{"ln":"Shahabad, Rampur","sn":"Shahabad"},"5961":{"ln":"Munsiari, Almora","sn":"Munsiari"},"5962":{"ln":"Almora, Almora","sn":"Almora"},"5963":{"ln":"Bageshwar, Almora","sn":"Bageshwar"},"5964":{"ln":"Pithoragarh, Almora","sn":"Pithoragarh"},"5965":{"ln":"Champawat, Almora","sn":"Champawat"},"5966":{"ln":"Ranikhet, Almora","sn":"Ranikhet"},"5967":{"ln":"Dharchula, Almora","sn":"Dharchula"},"6111":{"ln":"Hilsa, Patna","sn":"Hilsa"},"6112":{"ln":"Biharsharif, Patna","sn":"Biharsharif"},"6114":{"ln":"Jahanabad, Gaya","sn":"Jahanabad"},"6115":{"ln":"Danapur, Patna","sn":"Danapur"},"6132":{"ln":"Barh, Patna","sn":"Barh"},"6135":{"ln":"Bikram, Patna","sn":"Bikram"},"6150":{"ln":"Hathua, Chapra","sn":"Hathua"},"6151":{"ln":"Sidhawalia, Chapra","sn":"Sidhawalia"},"6152":{"ln":"Chapra, Chapra","sn":"Chapra"},"6153":{"ln":"Maharajganj, Chapra","sn":"Maharajganj"},"6154":{"ln":"Siwan, Chapra","sn":"Siwan"},"6155":{"ln":"Ekma, Chapra","sn":"Ekma"},"6156":{"ln":"Gopalganj, Chapra","sn":"Gopalganj"},"6157":{"ln":"Mairwa, Chapra","sn":"Mairwa"},"6158":{"ln":"Sonepur, Chapra","sn":"Sonepur"},"6159":{"ln":"Masrakh, Chapra","sn":"Masrakh"},"6180":{"ln":"Adhaura, Sasaram","sn":"Adhaura"},"6181":{"ln":"Piro, Arrah","sn":"Piro"},"6182":{"ln":"Arrah, Arrah","sn":"Arrah"},"6183":{"ln":"Buxar, Arrah","sn":"Buxar"},"6184":{"ln":"Sasaram, Sasaram","sn":"Sasaram"},"6185":{"ln":"Bikramganj, Sasaram","sn":"Bikramganj"},"6186":{"ln":"Aurangabad, Gaya","sn":"Aurangabad"},"6187":{"ln":"Mohania, Sasaram","sn":"Mohania"},"6188":{"ln":"Rohtas, Sasaram","sn":"Rohtas"},"6189":{"ln":"Bhabhua, Sasaram","sn":"Bhabhua"},"6222":{"ln":"Sheohar, Muzaffarpur","sn":"Sheohar"},"6223":{"ln":"Motipur, Muzaffarpur","sn":"Motipur"},"6224":{"ln":"Hajipur, Muzaffarpur","sn":"Hajipur"},"6226":{"ln":"Sitamarhi, Muzaffarpur","sn":"Sitamarhi"},"6227":{"ln":"Mahua, Muzaffarpur","sn":"Mahua"},"6228":{"ln":"Pupri, Muzaffarpur","sn":"Pupri"},"6229":{"ln":"Bidupur, Muzaffarpur","sn":"Bidupur"},"6242":{"ln":"Benipur, Darbhanga","sn":"Benipur"},"6243":{"ln":"Begusarai, Darbhanga","sn":"Begusarai"},"6244":{"ln":"Khagaria, Darbhanga","sn":"Khagaria"},"6245":{"ln":"Gogri, Darbhanga","sn":"Gogri"},"6246":{"ln":"Jainagar, Darbhanga","sn":"Jainagar"},"6247":{"ln":"Singhwara, Darbhanga","sn":"Singhwara"},"6250":{"ln":"Dhaka, Motihari","sn":"Dhaka"},"6251":{"ln":"Bagaha, Motihari","sn":"Bagaha"},"6252":{"ln":"Motihari, Motihari","sn":"Motihari"},"6253":{"ln":"Narkatiaganj, Motihari","sn":"Narkatiaganj"},"6254":{"ln":"Bettiah, Motihari","sn":"Bettiah"},"6255":{"ln":"Raxaul, Motihari","sn":"Raxaul"},"6256":{"ln":"Ramnagar, Motihari","sn":"Ramnagar"},"6257":{"ln":"Barachakia, Motihari","sn":"Barachakia"},"6258":{"ln":"Areraj, Motihari","sn":"Areraj"},"6259":{"ln":"Pakridayal, Motihari","sn":"Pakridayal"},"6271":{"ln":"Benipatti, Darbhanga","sn":"Benipatti"},"6272":{"ln":"Darbhanga, Darbhanga","sn":"Darbhanga"},"6273":{"ln":"Jhajharpur, Darbhanga","sn":"Jhajharpur"},"6274":{"ln":"Samastipur, Darbhanga","sn":"Samastipur"},"6275":{"ln":"Rosera, Darbhanga","sn":"Rosera"},"6276":{"ln":"Madhubani, Darbhanga","sn":"Madhubani"},"6277":{"ln":"Phulparas, Darbhanga","sn":"Phulparas"},"6278":{"ln":"Dalsinghsarai, Darbhanga","sn":"Dalsinghsarai"},"6279":{"ln":"Barauni, Darbhanga","sn":"Barauni"},"6322":{"ln":"Wazirganj, Gaya","sn":"Wazirganj"},"6323":{"ln":"Dumraon, Arrah","sn":"Dumraon"},"6324":{"ln":"Nawada, Gaya","sn":"Nawada"},"6325":{"ln":"Pakribarwan, Gaya","sn":"Pakribarwan"},"6326":{"ln":"Sherghati, Gaya","sn":"Sherghati"},"6327":{"ln":"Rafiganj, Gaya","sn":"Rafiganj"},"6328":{"ln":"Daudnagar, Gaya","sn":"Daudnagar"},"6331":{"ln":"Imamganj, Gaya","sn":"Imamganj"},"6332":{"ln":"Nabinagar, Gaya","sn":"Nabinagar"},"6336":{"ln":"Rajauli, Gaya","sn":"Rajauli"},"6337":{"ln":"Arwal, Gaya","sn":"Arwal"},"6341":{"ln":"Seikhpura, Monghyr","sn":"Seikhpura"},"6342":{"ln":"H. Kharagpur, Monghyr","sn":"H. Kharagpur"},"6344":{"ln":"Monghyr, Monghyr","sn":"Monghyr"},"6345":{"ln":"Jamui, Monghyr","sn":"Jamui"},"6346":{"ln":"Lakhisarai, Monghyr","sn":"Lakhisarai"},"6347":{"ln":"Chakai, Monghyr","sn":"Chakai"},"6348":{"ln":"Mallehpur, Monghyr","sn":"Mallehpur"},"6349":{"ln":"Jhajha, Monghyr","sn":"Jhajha"},"6420":{"ln":"Amarpur, Bhagalpur","sn":"Amarpur"},"6421":{"ln":"Naugachia, Bhagalpur","sn":"Naugachia"},"6422":{"ln":"Godda, Deoghar (Dumka)","sn":"Godda"},"6423":{"ln":"Maheshpur Raj, Deoghar (Dumka)","sn":"Maheshpur Raj"},"6424":{"ln":"Banka, Bhagalpur","sn":"Banka"},"6425":{"ln":"Katoria, Bhagalpur","sn":"Katoria"},"6426":{"ln":"Rajmahal, Deoghar (Dumka)","sn":"Rajmahal"},"6427":{"ln":"Kathikund, Deoghar (Dumka)","sn":"Kathikund"},"6428":{"ln":"Nala, Deoghar (Dumka)","sn":"Nala"},"6429":{"ln":"Kahalgaon, Bhagalpur","sn":"Kahalgaon"},"6431":{"ln":"Jharmundi, Deoghar (Dumka)","sn":"Jharmundi"},"6432":{"ln":"Deoghar, Deoghar (Dumka)","sn":"Deoghar"},"6433":{"ln":"Jamtara, Deoghar (Dumka)","sn":"Jamtara"},"6434":{"ln":"Dumka, Deoghar (Dumka)","sn":"Dumka"},"6435":{"ln":"Pakur, Deoghar (Dumka)","sn":"Pakur"},"6436":{"ln":"Sahibganj, Deoghar (Dumka)","sn":"Sahibganj"},"6437":{"ln":"Mahagama, Deoghar (Dumka)","sn":"Mahagama"},"6438":{"ln":"Madhupur, Deoghar (Dumka)","sn":"Madhupur"},"6451":{"ln":"Barsoi, Katihar","sn":"Barsoi"},"6452":{"ln":"Katihar, Katihar","sn":"Katihar"},"6453":{"ln":"Araria, Katihar","sn":"Araria"},"6454":{"ln":"Purnea, Katihar","sn":"Purnea"},"6455":{"ln":"Forbesganj, Katihar","sn":"Forbesganj"},"6457":{"ln":"Korha, Katihar","sn":"Korha"},"6459":{"ln":"Thakurganj, Katihar","sn":"Thakurganj"},"6461":{"ln":"Raniganj, Katihar","sn":"Raniganj"},"6462":{"ln":"Dhamdaha, Katihar","sn":"Dhamdaha"},"6466":{"ln":"Kishanganj, Katihar","sn":"Kishanganj"},"6467":{"ln":"Banmankhi, Katihar","sn":"Banmankhi"},"6471":{"ln":"Birpur, Saharsa","sn":"Birpur"},"6473":{"ln":"Supaul, Saharsa","sn":"Supaul"},"6475":{"ln":"S. Bakhtiarpur, Saharsa","sn":"S. Bakhtiarpur"},"6476":{"ln":"Madhepura, Saharsa","sn":"Madhepura"},"6477":{"ln":"Triveniganj, Saharsa","sn":"Triveniganj"},"6478":{"ln":"Saharsa, Saharsa","sn":"Saharsa"},"6479":{"ln":"Udakishanganj, Saharsa","sn":"Udakishanganj"},"6522":{"ln":"Muri, Ranchi","sn":"Muri"},"6523":{"ln":"Ghaghra, Ranchi","sn":"Ghaghra"},"6524":{"ln":"Gumla, Ranchi","sn":"Gumla"},"6525":{"ln":"Simdega, Ranchi","sn":"Simdega"},"6526":{"ln":"Lohardaga, Ranchi","sn":"Lohardaga"},"6527":{"ln":"Kolebira, Ranchi","sn":"Kolebira"},"6528":{"ln":"Khunti, Ranchi","sn":"Khunti"},"6529":{"ln":"Itki, Ranchi","sn":"Itki"},"6530":{"ln":"Bundu, Ranchi","sn":"Bundu"},"6531":{"ln":"Mandar, Ranchi","sn":"Mandar"},"6532":{"ln":"Giridih, Hazaribagh","sn":"Giridih"},"6533":{"ln":"Basia, Ranchi","sn":"Basia"},"6534":{"ln":"Jhumaritalaiya, Hazaribagh","sn":"Jhumaritalaiya"},"6535":{"ln":"Chainpur, Ranchi","sn":"Chainpur"},"6536":{"ln":"Palkot, Ranchi","sn":"Palkot"},"6538":{"ln":"Torpa, Ranchi","sn":"Torpa"},"6539":{"ln":"Bolwa, Ranchi","sn":"Bolwa"},"6540":{"ln":"Govindpur, Dhanbad","sn":"Govindpur"},"6541":{"ln":"Chatra, Hazaribagh","sn":"Chatra"},"6542":{"ln":"Bokaro, Dhanbad","sn":"Bokaro"},"6543":{"ln":"Barhi, Hazaribagh","sn":"Barhi"},"6544":{"ln":"Gomia, Dhanbad","sn":"Gomia"},"6545":{"ln":"Mandu, Hazaribagh","sn":"Mandu"},"6546":{"ln":"Hazaribagh, Hazaribagh","sn":"Hazaribagh"},"6547":{"ln":"Chavparan, Hazaribagh","sn":"Chavparan"},"6548":{"ln":"Ichak, Hazaribagh","sn":"Ichak"},"6549":{"ln":"Bermo, Dhanbad","sn":"Bermo"},"6550":{"ln":"Hunterganj, Hazaribagh","sn":"Hunterganj"},"6551":{"ln":"Barkagaon, Hazaribagh","sn":"Barkagaon"},"6553":{"ln":"Ramgarh, Hazaribagh","sn":"Ramgarh"},"6554":{"ln":"Rajdhanwar, Hazaribagh","sn":"Rajdhanwar"},"6556":{"ln":"Tisri, Hazaribagh","sn":"Tisri"},"6557":{"ln":"Bagodar, Hazaribagh","sn":"Bagodar"},"6558":{"ln":"Dumri (Isribazar), Hazaribagh","sn":"Dumri"},"6559":{"ln":"Simaria, Hazaribagh","sn":"Simaria"},"6560":{"ln":"Patan, Daltonganj","sn":"Patan"},"6561":{"ln":"Garhwa, Daltonganj","sn":"Garhwa"},"6562":{"ln":"Daltonganj, Daltonganj","sn":"Daltonganj"},"6563":{"ln":"Bhawanathpur, Daltonganj","sn":"Bhawanathpur"},"6564":{"ln":"Nagarutari, Daltonganj","sn":"Nagarutari"},"6565":{"ln":"Latehar, Daltonganj","sn":"Latehar"},"6566":{"ln":"Japla, Daltonganj","sn":"Japla"},"6567":{"ln":"Barwadih, Daltonganj","sn":"Barwadih"},"6568":{"ln":"Balumath, Daltonganj","sn":"Balumath"},"6569":{"ln":"Garu, Daltonganj","sn":"Garu"},"6581":{"ln":"Bhandaria, Daltonganj","sn":"Bhandaria"},"6582":{"ln":"Chaibasa, Jamshedpur","sn":"Chaibasa"},"6583":{"ln":"Kharsawa, Jamshedpur","sn":"Kharsawa"},"6584":{"ln":"Bishrampur, Daltonganj","sn":"Bishrampur"},"6585":{"ln":"Ghatsila, Jamshedpur","sn":"Ghatsila"},"6586":{"ln":"Chainpur, Daltonganj","sn":"Chainpur"},"6587":{"ln":"Chakardharpur, Jamshedpur","sn":"Chakardharpur"},"6588":{"ln":"Jagarnathpur, Jamshedpur","sn":"Jagarnathpur"},"6589":{"ln":"Jhinkpani, Jamshedpur","sn":"Jhinkpani"},"6591":{"ln":"Chandil, Jamshedpur","sn":"Chandil"},"6593":{"ln":"Manoharpur, Jamshedpur","sn":"Manoharpur"},"6594":{"ln":"Baharagora, Jamshedpur","sn":"Baharagora"},"6596":{"ln":"Noamundi, Jamshedpur","sn":"Noamundi"},"6597":{"ln":"Saraikela (Adstyapur), Jamshedpur","sn":"Saraikela"},"6621":{"ln":"Hemgiri, Sundargarh (Rourkela)","sn":"Hemgiri"},"6622":{"ln":"Sundargarh, Sundargarh (Rourkela)","sn":"Sundargarh"},"6624":{"ln":"Rajgangpur, Sundargarh (Rourkela)","sn":"Rajgangpur"},"6625":{"ln":"Lahunipara, Sundargarh (Rourkela)","sn":"Lahunipara"},"6626":{"ln":"Banaigarh, Sundargarh (Rourkela)","sn":"Banaigarh"},"6640":{"ln":"Bagdihi, Sambalpur","sn":"Bagdihi"},"6641":{"ln":"Deodgarh, Sambalpur","sn":"Deodgarh"},"6642":{"ln":"Kuchinda, Sambalpur","sn":"Kuchinda"},"6643":{"ln":"Barkot, Sambalpur","sn":"Barkot"},"6644":{"ln":"Rairakhol, Sambalpur","sn":"Rairakhol"},"6645":{"ln":"Jharsuguda, Sambalpur","sn":"Jharsuguda"},"6646":{"ln":"Bargarh, Sambalpur","sn":"Bargarh"},"6647":{"ln":"Naktideul, Sambalpur","sn":"Naktideul"},"6648":{"ln":"Patnagarh, Balangir","sn":"Patnagarh"},"6649":{"ln":"Jamankira, Sambalpur","sn":"Jamankira"},"6651":{"ln":"Birmaharajpur, Balangir","sn":"Birmaharajpur"},"6652":{"ln":"Balangir, Balangir","sn":"Balangir"},"6653":{"ln":"Dunguripali, Balangir","sn":"Dunguripali"},"6654":{"ln":"Sonapur, Balangir","sn":"Sonapur"},"6655":{"ln":"Titlagarh, Balangir","sn":"Titlagarh"},"6657":{"ln":"Kantabhanji, Balangir","sn":"Kantabhanji"},"6670":{"ln":"Bhawanipatna, Bhawanipatna","sn":"Bhawanipatna"},"6671":{"ln":"Rajkhariar, Bhawanipatna","sn":"Rajkhariar"},"6672":{"ln":"Dharamgarh, Bhawanipatna","sn":"Dharamgarh"},"6673":{"ln":"Jayapatna, Bhawanipatna","sn":"Jayapatna"},"6675":{"ln":"T. Rampur, Bhawanipatna","sn":"T. Rampur"},"6676":{"ln":"M. Rampur, Bhawanipatna","sn":"M. Rampur"},"6677":{"ln":"Narlaroad, Bhawanipatna","sn":"Narlaroad"},"6678":{"ln":"Nowparatan, Bhawanipatna","sn":"Nowparatan"},"6679":{"ln":"Komana, Bhawanipatna","sn":"Komana"},"6681":{"ln":"Jujumura, Sambalpur","sn":"Jujumura"},"6682":{"ln":"Attabira, Sambalpur","sn":"Attabira"},"6683":{"ln":"Padmapur, Sambalpur","sn":"Padmapur"},"6684":{"ln":"Paikamal, Sambalpur","sn":"Paikamal"},"6685":{"ln":"Sohela, Sambalpur","sn":"Sohela"},"6721":{"ln":"Narsinghpur, Cuttack","sn":"Narsinghpur"},"6722":{"ln":"Pardip, Cuttack","sn":"Pardip"},"6723":{"ln":"Athgarh, Cuttack","sn":"Athgarh"},"6724":{"ln":"Jagatsinghpur, Cuttack","sn":"Jagatsinghpur"},"6725":{"ln":"Dhanmandal, Cuttack","sn":"Dhanmandal"},"6726":{"ln":"Jajapur Road, Cuttack","sn":"Jajapur Road"},"6727":{"ln":"Kendrapara, Cuttack","sn":"Kendrapara"},"6728":{"ln":"Jajapur Town, Cuttack","sn":"Jajapur Town"},"6729":{"ln":"Pattamundai, Cuttack","sn":"Pattamundai"},"6731":{"ln":"Anandapur, Dhenkanal","sn":"Anandapur"},"6732":{"ln":"Hindol, Dhenkanal","sn":"Hindol"},"6733":{"ln":"Ghatgaon, Dhenkanal","sn":"Ghatgaon"},"6735":{"ln":"Telkoi, Dhenkanal","sn":"Telkoi"},"6752":{"ln":"Puri, Bhubaneswar (Puri)","sn":"Puri"},"6753":{"ln":"Nayagarh, Bhubaneswar (Puri)","sn":"Nayagarh"},"6755":{"ln":"Khurda, Bhubaneswar (Puri)","sn":"Khurda"},"6756":{"ln":"Balugaon, Bhubaneswar (Puri)","sn":"Balugaon"},"6757":{"ln":"Daspalla, Bhubaneswar (Puri)","sn":"Daspalla"},"6758":{"ln":"Nimapara, Bhubaneswar (Puri)","sn":"Nimapara"},"6760":{"ln":"Talcher, Dhenkanal","sn":"Talcher"},"6761":{"ln":"Chhendipada, Dhenkanal","sn":"Chhendipada"},"6762":{"ln":"Dhenkanal, Dhenkanal","sn":"Dhenkanal"},"6763":{"ln":"Athmallik, Dhenkanal","sn":"Athmallik"},"6764":{"ln":"Anugul, Dhenkanal","sn":"Anugul"},"6765":{"ln":"Palla Hara, Dhenkanal","sn":"Palla Hara"},"6766":{"ln":"Keonjhar, Dhenkanal","sn":"Keonjhar"},"6767":{"ln":"Barbil, Dhenkanal","sn":"Barbil"},"6768":{"ln":"Parajang, Dhenkanal","sn":"Parajang"},"6769":{"ln":"Kamakhyanagar, Dhenkanal","sn":"Kamakhyanagar"},"6781":{"ln":"Basta, Balasore","sn":"Basta"},"6782":{"ln":"Balasore, Balasore","sn":"Balasore"},"6784":{"ln":"Bhadrak, Balasore","sn":"Bhadrak"},"6786":{"ln":"Chandbali, Balasore","sn":"Chandbali"},"6788":{"ln":"Soro, Balasore","sn":"Soro"},"6791":{"ln":"Bangiriposi, Baripada","sn":"Bangiriposi"},"6792":{"ln":"Baripada, Baripada","sn":"Baripada"},"6793":{"ln":"Betanati, Baripada","sn":"Betanati"},"6794":{"ln":"Rairangpur, Baripada","sn":"Rairangpur"},"6795":{"ln":"Udala, Baripada","sn":"Udala"},"6796":{"ln":"Karanjia, Baripada","sn":"Karanjia"},"6797":{"ln":"Jashipur, Baripada","sn":"Jashipur"},"6810":{"ln":"Khalikote, Berhampur","sn":"Khalikote"},"6811":{"ln":"Chhatrapur, Berhampur","sn":"Chhatrapur"},"6814":{"ln":"Digapahandi, Berhampur","sn":"Digapahandi"},"6815":{"ln":"Parlakhemundi, Berhampur","sn":"Parlakhemundi"},"6816":{"ln":"Mohana, Berhampur","sn":"Mohana"},"6817":{"ln":"R. Udayigiri, Berhampur","sn":"R. Udayigiri"},"6818":{"ln":"Buguda, Berhampur","sn":"Buguda"},"6819":{"ln":"Surada, Berhampur","sn":"Surada"},"6821":{"ln":"Bhanjanagar, Berhampur","sn":"Bhanjanagar"},"6822":{"ln":"Aska, Berhampur","sn":"Aska"},"6840":{"ln":"Tumudibandha, Phulbani","sn":"Tumudibandha"},"6841":{"ln":"Boudh, Phulbani","sn":"Boudh"},"6842":{"ln":"Phulbani, Phulbani","sn":"Phulbani"},"6843":{"ln":"Puruna Katak, Phulbani","sn":"Puruna Katak"},"6844":{"ln":"Kantamal, Phulbani","sn":"Kantamal"},"6845":{"ln":"Phiringia, Phulbani","sn":"Phiringia"},"6846":{"ln":"Baliguda, Phulbani","sn":"Baliguda"},"6847":{"ln":"G. Udayagiri, Phulbani","sn":"G. Udayagiri"},"6848":{"ln":"Kotagarh, Phulbani","sn":"Kotagarh"},"6849":{"ln":"Daringbadi, Phulbani","sn":"Daringbadi"},"6850":{"ln":"Kalimela, Koraput","sn":"Kalimela"},"6852":{"ln":"Koraput, Koraput","sn":"Koraput"},"6853":{"ln":"Sunabeda, Koraput","sn":"Sunabeda"},"6854":{"ln":"Jeypore, Koraput","sn":"Jeypore"},"6855":{"ln":"Laxmipur, Koraput","sn":"Laxmipur"},"6856":{"ln":"Rayagada, Koraput","sn":"Rayagada"},"6857":{"ln":"Gunupur, Koraput","sn":"Gunupur"},"6858":{"ln":"Nowrangapur, Koraput","sn":"Nowrangapur"},"6859":{"ln":"Motu, Koraput","sn":"Motu"},"6860":{"ln":"Boriguma, Koraput","sn":"Boriguma"},"6861":{"ln":"Malkangiri, Koraput","sn":"Malkangiri"},"6862":{"ln":"Gudari, Koraput","sn":"Gudari"},"6863":{"ln":"Bisam Cuttack, Koraput","sn":"Bisam Cuttack"},"6864":{"ln":"Mathili, Koraput","sn":"Mathili"},"6865":{"ln":"Kashipur, Koraput","sn":"Kashipur"},"6866":{"ln":"Umerkote, Koraput","sn":"Umerkote"},"6867":{"ln":"Jharigan, Koraput","sn":"Jharigan"},"6868":{"ln":"Nandapur, Koraput","sn":"Nandapur"},"6869":{"ln":"Papadhandi, Koraput","sn":"Papadhandi"},"7100":{"ln":"Kuhi, Nagpur","sn":"Kuhi"},"7102":{"ln":"Parseoni, Nagpur","sn":"Parseoni"},"7103":{"ln":"Butibori, Nagpur","sn":"Butibori"},"7104":{"ln":"Hingua, Nagpur","sn":"Hingua"},"7105":{"ln":"Narkhed, Nagpur","sn":"Narkhed"},"7106":{"ln":"Bhiwapur, Nagpur","sn":"Bhiwapur"},"7109":{"ln":"Kamptee, Nagpur","sn":"Kamptee"},"7112":{"ln":"Katol, Nagpur","sn":"Katol"},"7113":{"ln":"Saoner, Nagpur","sn":"Saoner"},"7114":{"ln":"Ramtek, Nagpur","sn":"Ramtek"},"7115":{"ln":"Mouda, Nagpur","sn":"Mouda"},"7116":{"ln":"Umrer, Nagpur","sn":"Umrer"},"7118":{"ln":"Kalmeshwar, Nagpur","sn":"Kalmeshwar"},"7131":{"ln":"Sironcha, Gadchiroli","sn":"Sironcha"},"7132":{"ln":"Gadchiroli, Gadchiroli","sn":"Gadchiroli"},"7133":{"ln":"Aheri, Gadchiroli","sn":"Aheri"},"7134":{"ln":"Bhamregadh, Gadchiroli","sn":"Bhamregadh"},"7135":{"ln":"Chamorshi, Gadchiroli","sn":"Chamorshi"},"7136":{"ln":"Etapalli, Gadchiroli","sn":"Etapalli"},"7137":{"ln":"Desaiganj, Gadchiroli","sn":"Desaiganj"},"7138":{"ln":"Dhanora, Gadchiroli","sn":"Dhanora"},"7139":{"ln":"Kurkheda, Gadchiroli","sn":"Kurkheda"},"7141":{"ln":"Betul, Betul","sn":"Betul"},"7142":{"ln":"Bhimpur, Betul","sn":"Bhimpur"},"7143":{"ln":"Bhainsdehi, Betul","sn":"Bhainsdehi"},"7144":{"ln":"Atner, Betul","sn":"Atner"},"7145":{"ln":"Chicholi, Betul","sn":"Chicholi"},"7146":{"ln":"Ghorandogri, Betul","sn":"Ghorandogri"},"7147":{"ln":"Multai, Betul","sn":"Multai"},"7148":{"ln":"Prabha Pattan, Betul","sn":"Prabha Pattan"},"7149":{"ln":"Tamia, Chhindwara","sn":"Tamia"},"7151":{"ln":"Samudrapur, Wardha","sn":"Samudrapur"},"7152":{"ln":"Wardha, Wardha","sn":"Wardha"},"7153":{"ln":"Hinganghat, Wardha","sn":"Hinganghat"},"7155":{"ln":"Seloo, Wardha","sn":"Seloo"},"7156":{"ln":"Talegaokarangal, Wardha","sn":"Talegaokarangal"},"7157":{"ln":"Arvi, Wardha","sn":"Arvi"},"7158":{"ln":"Deoli, Wardha","sn":"Deoli"},"7160":{"ln":"Jamai, Chhindwara","sn":"Jamai"},"7161":{"ln":"Parasia, Chhindwara","sn":"Parasia"},"7162":{"ln":"Chhindwara, Chhindwara","sn":"Chhindwara"},"7164":{"ln":"Pandhurna, Chhindwara","sn":"Pandhurna"},"7165":{"ln":"Saunsar, Chhindwara","sn":"Saunsar"},"7166":{"ln":"Chaurai, Chhindwara","sn":"Chaurai"},"7167":{"ln":"Amarwada, Chhindwara","sn":"Amarwada"},"7168":{"ln":"Harrai, Chhindwara","sn":"Harrai"},"7169":{"ln":"Batkakhapa, Chhindwara","sn":"Batkakhapa"},"7170":{"ln":"Chumur, Chandrapur","sn":"Chumur"},"7171":{"ln":"Gond Pipri, Chandrapur","sn":"Gond Pipri"},"7172":{"ln":"Chandrapur, Chandrapur","sn":"Chandrapur"},"7173":{"ln":"Rajura, Chandrapur","sn":"Rajura"},"7174":{"ln":"Mul, Chandrapur","sn":"Mul"},"7175":{"ln":"Bhadrawati, Chandrapur","sn":"Bhadrawati"},"7176":{"ln":"Warora, Chandrapur","sn":"Warora"},"7177":{"ln":"Brahmapuri, Chandrapur","sn":"Brahmapuri"},"7178":{"ln":"Sinderwahi, Chandrapur","sn":"Sinderwahi"},"7179":{"ln":"Nagbhir, Chandrapur","sn":"Nagbhir"},"7180":{"ln":"Salekasa, Bhandara","sn":"Salekasa"},"7181":{"ln":"Lakhandur, Bhandara","sn":"Lakhandur"},"7182":{"ln":"Gondia, Bhandara","sn":"Gondia"},"7183":{"ln":"Tumsar, Bhandara","sn":"Tumsar"},"7184":{"ln":"Bhandara, Bhandara","sn":"Bhandara"},"7185":{"ln":"Pauni, Bhandara","sn":"Pauni"},"7186":{"ln":"Sakoli, Bhandara","sn":"Sakoli"},"7187":{"ln":"Goregaon, Bhandara","sn":"Goregaon"},"7189":{"ln":"Amagaon, Bhandara","sn":"Amagaon"},"7196":{"ln":"Arjuni-Merogaon, Bhandara","sn":"Arjuni-Merogaon"},"7197":{"ln":"Mohadi, Bhandara","sn":"Mohadi"},"7198":{"ln":"Tirora, Bhandara","sn":"Tirora"},"7199":{"ln":"Deori, Bhandara","sn":"Deori"},"7201":{"ln":"Kalamb, Yeotmal","sn":"Kalamb"},"7202":{"ln":"Ralegaon, Yeotmal","sn":"Ralegaon"},"7203":{"ln":"Babhulgaon, Yeotmal","sn":"Babhulgaon"},"7220":{"ln":"Chhikaldara, Amravati","sn":"Chhikaldara"},"7221":{"ln":"Nandgaon, Amravati","sn":"Nandgaon"},"7222":{"ln":"Chandurrly, Amravati","sn":"Chandurrly"},"7223":{"ln":"Achalpur, Amravati","sn":"Achalpur"},"7224":{"ln":"Daryapur, Amravati","sn":"Daryapur"},"7225":{"ln":"Tiwasa, Amravati","sn":"Tiwasa"},"7226":{"ln":"Dharani, Amravati","sn":"Dharani"},"7227":{"ln":"Chandurbazar, Amravati","sn":"Chandurbazar"},"7228":{"ln":"Morshi, Amravati","sn":"Morshi"},"7229":{"ln":"Warlydwarud, Amravati","sn":"Warlydwarud"},"7230":{"ln":"Ghatanji, Yeotmal","sn":"Ghatanji"},"7231":{"ln":"Umarkhed, Yeotmal","sn":"Umarkhed"},"7232":{"ln":"Yeotmal, Yeotmal","sn":"Yeotmal"},"7233":{"ln":"Pusad, Yeotmal","sn":"Pusad"},"7234":{"ln":"Digras, Yeotmal","sn":"Digras"},"7235":{"ln":"Pandharkawada, Yeotmal","sn":"Pandharkawada"},"7236":{"ln":"Maregaon, Yeotmal","sn":"Maregaon"},"7237":{"ln":"Marigaon, Yeotmal","sn":"Marigaon"},"7238":{"ln":"Darwaha, Yeotmal","sn":"Darwaha"},"7239":{"ln":"Wani, Yeotmal","sn":"Wani"},"7251":{"ln":"Risod, Akola","sn":"Risod"},"7252":{"ln":"Washim, Akola","sn":"Washim"},"7253":{"ln":"Mangrulpur, Akola","sn":"Mangrulpur"},"7254":{"ln":"Malgaon, Akola","sn":"Malgaon"},"7255":{"ln":"Barshi Takli, Akola","sn":"Barshi Takli"},"7256":{"ln":"Murtizapur, Akola","sn":"Murtizapur"},"7257":{"ln":"Balapur, Akola","sn":"Balapur"},"7258":{"ln":"Akot, Akola","sn":"Akot"},"7260":{"ln":"Lonar, Buldhana","sn":"Lonar"},"7261":{"ln":"Deolgaonraja, Buldhana","sn":"Deolgaonraja"},"7262":{"ln":"Buldhana, Buldhana","sn":"Buldhana"},"7263":{"ln":"Khamgaon, Buldhana","sn":"Khamgaon"},"7264":{"ln":"Chikhali, Buldhana","sn":"Chikhali"},"7266":{"ln":"Jalgaonjamod, Buldhana","sn":"Jalgaonjamod"},"7267":{"ln":"Malkapur, Buldhana","sn":"Malkapur"},"7268":{"ln":"Mekhar, Buldhana","sn":"Mekhar"},"7269":{"ln":"Sindkhedaraja, Buldhana","sn":"Sindkhedaraja"},"7270":{"ln":"Sonkatch, Dewas","sn":"Sonkatch"},"7271":{"ln":"Bagli, Dewas","sn":"Bagli"},"7272":{"ln":"Dewas, Dewas","sn":"Dewas"},"7273":{"ln":"Kannod, Dewas","sn":"Kannod"},"7274":{"ln":"Khategaon, Dewas","sn":"Khategaon"},"7279":{"ln":"Nandnva, Buldhana","sn":"Nandnva"},"7280":{"ln":"Barwaha, Khargone","sn":"Barwaha"},"7281":{"ln":"Sendhwa, Khargone","sn":"Sendhwa"},"7282":{"ln":"Khargone, Khargone","sn":"Khargone"},"7283":{"ln":"Maheshwar, Khargone","sn":"Maheshwar"},"7284":{"ln":"Rajpur, Khargone","sn":"Rajpur"},"7285":{"ln":"Kasrawad, Khargone","sn":"Kasrawad"},"7286":{"ln":"Khetia, Khargone","sn":"Khetia"},"7287":{"ln":"Gogaon, Khargone","sn":"Gogaon"},"7288":{"ln":"Bhikangaon, Khargone","sn":"Bhikangaon"},"7289":{"ln":"Zhirnia, Khargone","sn":"Zhirnia"},"7290":{"ln":"Badwani, Khargone","sn":"Badwani"},"7291":{"ln":"Manawar, Dhar","sn":"Manawar"},"7292":{"ln":"Dhar, Dhar","sn":"Dhar"},"7294":{"ln":"Dharampuri, Dhar","sn":"Dharampuri"},"7295":{"ln":"Badnawar, Dhar","sn":"Badnawar"},"7296":{"ln":"Sardarpur, Dhar","sn":"Sardarpur"},"7297":{"ln":"Kukshi, Dhar","sn":"Kukshi"},"7320":{"ln":"Pandhana, Khandwa","sn":"Pandhana"},"7321":{"ln":"Sanwer, Indore","sn":"Sanwer"},"7322":{"ln":"Depalpur, Indore","sn":"Depalpur"},"7323":{"ln":"Punasa, Khandwa","sn":"Punasa"},"7324":{"ln":"Mhow, Indore","sn":"Mhow"},"7325":{"ln":"Burhanpur, Khandwa","sn":"Burhanpur"},"7326":{"ln":"Baldi, Khandwa","sn":"Baldi"},"7327":{"ln":"Harsud, Khandwa","sn":"Harsud"},"7328":{"ln":"Khalwa, Khandwa","sn":"Khalwa"},"7329":{"ln":"Khakner, Khandwa","sn":"Khakner"},"7360":{"ln":"Shujalpur, Shajapur","sn":"Shujalpur"},"7361":{"ln":"Susner, Shajapur","sn":"Susner"},"7362":{"ln":"Agar, Shajapur","sn":"Agar"},"7363":{"ln":"Berchha, Shajapur","sn":"Berchha"},"7364":{"ln":"Shajapur, Shajapur","sn":"Shajapur"},"7365":{"ln":"Mahidpurcity, Ujjain","sn":"Mahidpurcity"},"7366":{"ln":"Khachrod, Ujjain","sn":"Khachrod"},"7367":{"ln":"Badnagar, Ujjain","sn":"Badnagar"},"7368":{"ln":"Ghatia, Ujjain","sn":"Ghatia"},"7369":{"ln":"Tarana, Ujjain","sn":"Tarana"},"7370":{"ln":"Khilchipur, Rajgarh","sn":"Khilchipur"},"7371":{"ln":"Sarangpur, Rajgarh","sn":"Sarangpur"},"7372":{"ln":"Rajgarh, Rajgarh","sn":"Rajgarh"},"7374":{"ln":"Biaora, Rajgarh","sn":"Biaora"},"7375":{"ln":"Narsingharh, Rajgarh","sn":"Narsingharh"},"7390":{"ln":"Thandla, Jhabua","sn":"Thandla"},"7391":{"ln":"Petlawad, Jhabua","sn":"Petlawad"},"7392":{"ln":"Jhabua, Jhabua","sn":"Jhabua"},"7393":{"ln":"Jobat, Jhabua","sn":"Jobat"},"7394":{"ln":"Alirajpur, Jhabua","sn":"Alirajpur"},"7395":{"ln":"Sondhwa, Jhabua","sn":"Sondhwa"},"7410":{"ln":"Alot, Ratlam","sn":"Alot"},"7412":{"ln":"Ratlam, Ratlam","sn":"Ratlam"},"7413":{"ln":"Sailana, Ratlam","sn":"Sailana"},"7414":{"ln":"Jaora, Ratlam","sn":"Jaora"},"7420":{"ln":"Jawad, Mandsaur","sn":"Jawad"},"7421":{"ln":"Manasa, Mandsaur","sn":"Manasa"},"7422":{"ln":"Mandsaur, Mandsaur","sn":"Mandsaur"},"7423":{"ln":"Neemuch, Mandsaur","sn":"Neemuch"},"7424":{"ln":"Malhargarh, Mandsaur","sn":"Malhargarh"},"7425":{"ln":"Garoth, Mandsaur","sn":"Garoth"},"7426":{"ln":"Sitamau, Mandsaur","sn":"Sitamau"},"7427":{"ln":"Bhanpura, Mandsaur","sn":"Bhanpura"},"7430":{"ln":"Khanpur, Jhalawar","sn":"Khanpur"},"7431":{"ln":"Aklera, Jhalawar","sn":"Aklera"},"7432":{"ln":"Jhalawar, Jhalawar","sn":"Jhalawar"},"7433":{"ln":"Pachpahar (Bhawanimandi), Jhalawar","sn":"Pachpahar"},"7434":{"ln":"Pirawa (Raipur), Jhalawar","sn":"Pirawa"},"7435":{"ln":"Gangdhar, Jhalawar","sn":"Gangdhar"},"7436":{"ln":"Hindoli, Bundi","sn":"Hindoli"},"7437":{"ln":"Nainwa, Bundi","sn":"Nainwa"},"7438":{"ln":"Keshoraipatan (Patan), Bundi","sn":"Keshoraipatan"},"7450":{"ln":"Sangod, Kota","sn":"Sangod"},"7451":{"ln":"Atru, Kota","sn":"Atru"},"7452":{"ln":"Chhabra, Kota","sn":"Chhabra"},"7453":{"ln":"Baran, Kota","sn":"Baran"},"7454":{"ln":"Chhipaborad, Kota","sn":"Chhipaborad"},"7455":{"ln":"Digod (Sultanpur), Kota","sn":"Digod"},"7456":{"ln":"Kishanganj (Bhanwargarh), Kota","sn":"Kishanganj"},"7457":{"ln":"Mangrol, Kota","sn":"Mangrol"},"7458":{"ln":"Pipalda (Sumerganj Mandi), Kota","sn":"Pipalda"},"7459":{"ln":"Ramganj Mandi, Kota","sn":"Ramganj Mandi"},"7460":{"ln":"Sahabad, Kota","sn":"Sahabad"},"7461":{"ln":"Mahuwa, Sawaimadhopur","sn":"Mahuwa"},"7462":{"ln":"Sawaimadhopur, Sawaimadhopur","sn":"Sawaimadhopur"},"7463":{"ln":"Gangapur, Sawaimadhopur","sn":"Gangapur"},"7464":{"ln":"Karauli, Sawaimadhopur","sn":"Karauli"},"7465":{"ln":"Sapotra, Sawaimadhopur","sn":"Sapotra"},"7466":{"ln":"Bonli, Sawaimadhopur","sn":"Bonli"},"7467":{"ln":"Bamanwas, Sawaimadhopur","sn":"Bamanwas"},"7468":{"ln":"Khandar, Sawaimadhopur","sn":"Khandar"},"7469":{"ln":"Hindaun, Sawaimadhopur","sn":"Hindaun"},"7480":{"ln":"Goharganj, Raisen","sn":"Goharganj"},"7481":{"ln":"Gairatganj, Raisen","sn":"Gairatganj"},"7482":{"ln":"Raisen, Raisen","sn":"Raisen"},"7484":{"ln":"Silwani, Raisen","sn":"Silwani"},"7485":{"ln":"Udaipura, Raisen","sn":"Udaipura"},"7486":{"ln":"Bareli, Raisen","sn":"Bareli"},"7487":{"ln":"Begamganj, Raisen","sn":"Begamganj"},"7490":{"ln":"Pohari, Shivpuri","sn":"Pohari"},"7491":{"ln":"Narwar, Shivpuri","sn":"Narwar"},"7492":{"ln":"Shivpuri, Shivpuri","sn":"Shivpuri"},"7493":{"ln":"Karera, Shivpuri","sn":"Karera"},"7494":{"ln":"Kolaras, Shivpuri","sn":"Kolaras"},"7495":{"ln":"Badarwas, Shivpuri","sn":"Badarwas"},"7496":{"ln":"Pichhore, Shivpuri","sn":"Pichhore"},"7497":{"ln":"Khaniadhana, Shivpuri","sn":"Khaniadhana"},"7521":{"ln":"Seondha, Gwalior","sn":"Seondha"},"7522":{"ln":"Datia, Gwalior","sn":"Datia"},"7523":{"ln":"Bhander, Gwalior","sn":"Bhander"},"7524":{"ln":"Dabra, Gwalior","sn":"Dabra"},"7525":{"ln":"Bhitarwar, Gwalior","sn":"Bhitarwar"},"7526":{"ln":"Ghatigaon, Gwalior","sn":"Ghatigaon"},"7527":{"ln":"Mehgaon, Morena","sn":"Mehgaon"},"7528":{"ln":"Bijaypur, Morena","sn":"Bijaypur"},"7529":{"ln":"Laher, Morena","sn":"Laher"},"7530":{"ln":"Sheopurkalan, Morena","sn":"Sheopurkalan"},"7531":{"ln":"Baroda, Morena","sn":"Baroda"},"7532":{"ln":"Morena, Morena","sn":"Morena"},"7533":{"ln":"Karhal, Morena","sn":"Karhal"},"7534":{"ln":"Bhind, Morena","sn":"Bhind"},"7535":{"ln":"Raghunathpur, Morena","sn":"Raghunathpur"},"7536":{"ln":"Sabalgarh, Morena","sn":"Sabalgarh"},"7537":{"ln":"Jora, Morena","sn":"Jora"},"7538":{"ln":"Ambah, Morena","sn":"Ambah"},"7539":{"ln":"Gohad, Morena","sn":"Gohad"},"7540":{"ln":"Bamori, Guna","sn":"Bamori"},"7541":{"ln":"Isagarh, Guna","sn":"Isagarh"},"7542":{"ln":"Guna, Guna","sn":"Guna"},"7543":{"ln":"Ashoknagar, Guna","sn":"Ashoknagar"},"7544":{"ln":"Raghogarh, Guna","sn":"Raghogarh"},"7545":{"ln":"Arone, Guna","sn":"Arone"},"7546":{"ln":"Chachaura, Guna","sn":"Chachaura"},"7547":{"ln":"Chanderi, Guna","sn":"Chanderi"},"7548":{"ln":"Mungaoli, Guna","sn":"Mungaoli"},"7560":{"ln":"Ashta, Bhopal","sn":"Ashta"},"7561":{"ln":"Ichhawar, Bhopal","sn":"Ichhawar"},"7562":{"ln":"Sehore, Bhopal","sn":"Sehore"},"7563":{"ln":"Nasrullaganj, Bhopal","sn":"Nasrullaganj"},"7564":{"ln":"Budhni, Bhopal","sn":"Budhni"},"7565":{"ln":"Berasia, Bhopal","sn":"Berasia"},"7570":{"ln":"Seonimalwa, Itarsi","sn":"Seonimalwa"},"7571":{"ln":"Khirkiya, Itarsi","sn":"Khirkiya"},"7572":{"ln":"Itarsi, Itarsi","sn":"Itarsi"},"7573":{"ln":"Timarani, Itarsi","sn":"Timarani"},"7574":{"ln":"Hoshangabad, Itarsi","sn":"Hoshangabad"},"7575":{"ln":"Sohagpur, Itarsi","sn":"Sohagpur"},"7576":{"ln":"Piparia, Itarsi","sn":"Piparia"},"7577":{"ln":"Harda, Itarsi","sn":"Harda"},"7578":{"ln":"Pachmarhi, Itarsi","sn":"Pachmarhi"},"7580":{"ln":"Bina, Sagar","sn":"Bina"},"7581":{"ln":"Khurai, Sagar","sn":"Khurai"},"7582":{"ln":"Sagar, Sagar","sn":"Sagar"},"7583":{"ln":"Banda, Sagar","sn":"Banda"},"7584":{"ln":"Rahatgarh, Sagar","sn":"Rahatgarh"},"7585":{"ln":"Rehli, Sagar","sn":"Rehli"},"7586":{"ln":"Deori, Sagar","sn":"Deori"},"7590":{"ln":"Lateri, Vidisha","sn":"Lateri"},"7591":{"ln":"Sironj, Vidisha","sn":"Sironj"},"7592":{"ln":"Vidisha, Vidisha","sn":"Vidisha"},"7593":{"ln":"Kurwai, Vidisha","sn":"Kurwai"},"7594":{"ln":"Ganjbasoda, Vidisha","sn":"Ganjbasoda"},"7595":{"ln":"Nateran, Vidisha","sn":"Nateran"},"7596":{"ln":"Gyraspur, Vidisha","sn":"Gyraspur"},"7601":{"ln":"Patharia, Damoh","sn":"Patharia"},"7603":{"ln":"Tendukheda, Damoh","sn":"Tendukheda"},"7604":{"ln":"Hatta, Damoh","sn":"Hatta"},"7605":{"ln":"Patera, Damoh","sn":"Patera"},"7606":{"ln":"Jabera, Damoh","sn":"Jabera"},"7608":{"ln":"Bijawar, Chhatarpur","sn":"Bijawar"},"7609":{"ln":"Buxwaha, Chhatarpur","sn":"Buxwaha"},"7621":{"ln":"Patan, Jabalpur","sn":"Patan"},"7622":{"ln":"Katni, Jabalpur","sn":"Katni"},"7623":{"ln":"Kundam, Jabalpur","sn":"Kundam"},"7624":{"ln":"Sihora, Jabalpur","sn":"Sihora"},"7625":{"ln":"Umariapan, Jabalpur","sn":"Umariapan"},"7626":{"ln":"Vijayraghogarh, Jabalpur","sn":"Vijayraghogarh"},"7627":{"ln":"Manpur, Shahdol","sn":"Manpur"},"7628":{"ln":"Karpa, Shahdol","sn":"Karpa"},"7629":{"ln":"Pushprajgarh, Shahdol","sn":"Pushprajgarh"},"7630":{"ln":"Katangi, Balaghat","sn":"Katangi"},"7632":{"ln":"Balaghat, Balaghat","sn":"Balaghat"},"7633":{"ln":"Waraseoni, Balaghat","sn":"Waraseoni"},"7634":{"ln":"Lamta, Balaghat","sn":"Lamta"},"7635":{"ln":"Lanji, Balaghat","sn":"Lanji"},"7636":{"ln":"Baihar, Balaghat","sn":"Baihar"},"7637":{"ln":"Birsa, Balaghat","sn":"Birsa"},"7638":{"ln":"Damoh, Balaghat","sn":"Damoh"},"7640":{"ln":"Shahpur, Mandla","sn":"Shahpur"},"7641":{"ln":"Niwas, Mandla","sn":"Niwas"},"7642":{"ln":"Mandla, Mandla","sn":"Mandla"},"7643":{"ln":"Bijadandi, Mandla","sn":"Bijadandi"},"7644":{"ln":"Dindori, Mandla","sn":"Dindori"},"7645":{"ln":"Karanjia, Mandla","sn":"Karanjia"},"7646":{"ln":"Nainpur, Mandla","sn":"Nainpur"},"7647":{"ln":"Ghughari, Mandla","sn":"Ghughari"},"7648":{"ln":"Mawai, Mandla","sn":"Mawai"},"7649":{"ln":"Kakaiya, Mandla","sn":"Kakaiya"},"7650":{"ln":"Beohari, Shahdol","sn":"Beohari"},"7651":{"ln":"Jaisinghnagar, Shahdol","sn":"Jaisinghnagar"},"7652":{"ln":"Shahdol, Shahdol","sn":"Shahdol"},"7653":{"ln":"Bandhavgarh, Shahdol","sn":"Bandhavgarh"},"7655":{"ln":"Birsinghpur, Shahdol","sn":"Birsinghpur"},"7656":{"ln":"Kannodi, Shahdol","sn":"Kannodi"},"7657":{"ln":"Jaitpur, Shahdol","sn":"Jaitpur"},"7658":{"ln":"Kotma, Shahdol","sn":"Kotma"},"7659":{"ln":"Jaithari, Shahdol","sn":"Jaithari"},"7660":{"ln":"Sirmour, Rewa","sn":"Sirmour"},"7661":{"ln":"Teonthar, Rewa","sn":"Teonthar"},"7662":{"ln":"Rewa, Rewa","sn":"Rewa"},"7663":{"ln":"Mauganj, Rewa","sn":"Mauganj"},"7664":{"ln":"Hanumana, Rewa","sn":"Hanumana"},"7670":{"ln":"Majhagwan, Satna","sn":"Majhagwan"},"7671":{"ln":"Jaitwara, Satna","sn":"Jaitwara"},"7672":{"ln":"Satna, Satna","sn":"Satna"},"7673":{"ln":"Nagod, Satna","sn":"Nagod"},"7674":{"ln":"Maihar, Satna","sn":"Maihar"},"7675":{"ln":"Amarpatan, Satna","sn":"Amarpatan"},"7680":{"ln":"Niwari, Chhatarpur","sn":"Niwari"},"7681":{"ln":"Jatara, Chhatarpur","sn":"Jatara"},"7682":{"ln":"Chhatarpur, Chhatarpur","sn":"Chhatarpur"},"7683":{"ln":"Tikamgarh, Chhatarpur","sn":"Tikamgarh"},"7684":{"ln":"Baldeogarh, Chhatarpur","sn":"Baldeogarh"},"7685":{"ln":"Nowgaon, Chhatarpur","sn":"Nowgaon"},"7686":{"ln":"Khajuraho, Chhatarpur","sn":"Khajuraho"},"7687":{"ln":"Laundi, Chhatarpur","sn":"Laundi"},"7688":{"ln":"Gourihar, Chhatarpur","sn":"Gourihar"},"7689":{"ln":"Badamalhera, Chhatarpur","sn":"Badamalhera"},"7690":{"ln":"Lakhnadon, Seoni","sn":"Lakhnadon"},"7691":{"ln":"Chhapara, Seoni","sn":"Chhapara"},"7692":{"ln":"Seoni, Seoni","sn":"Seoni"},"7693":{"ln":"Ghansour, Seoni","sn":"Ghansour"},"7694":{"ln":"Keolari, Seoni","sn":"Keolari"},"7695":{"ln":"Gopalganj, Seoni","sn":"Gopalganj"},"7700":{"ln":"Nagri, Raipur","sn":"Nagri"},"7701":{"ln":"Pingeshwar, Raipur","sn":"Pingeshwar"},"7703":{"ln":"Manpur, Raipur","sn":"Manpur"},"7704":{"ln":"Deobhog, Raipur","sn":"Deobhog"},"7705":{"ln":"Kurud, Raipur","sn":"Kurud"},"7706":{"ln":"Gariaband, Raipur","sn":"Gariaband"},"7707":{"ln":"Bagbahera, Raipur","sn":"Bagbahera"},"7720":{"ln":"Arang, Raipur","sn":"Arang"},"7721":{"ln":"Neora, Raipur","sn":"Neora"},"7722":{"ln":"Dhamtari, Raipur","sn":"Dhamtari"},"7723":{"ln":"Mahasamund, Raipur","sn":"Mahasamund"},"7724":{"ln":"Basana, Raipur","sn":"Basana"},"7725":{"ln":"Saraipali, Raipur","sn":"Saraipali"},"7726":{"ln":"Bhatapara, Raipur","sn":"Bhatapara"},"7727":{"ln":"Balodabazar, Raipur","sn":"Balodabazar"},"7728":{"ln":"Kasdol, Raipur","sn":"Kasdol"},"7729":{"ln":"Bhilaigarh, Raipur","sn":"Bhilaigarh"},"7730":{"ln":"Ajaigarh, Panna","sn":"Ajaigarh"},"7731":{"ln":"Gunnore, Panna","sn":"Gunnore"},"7732":{"ln":"Panna, Panna","sn":"Panna"},"7733":{"ln":"Pawai, Panna","sn":"Pawai"},"7734":{"ln":"Shahnagar, Panna","sn":"Shahnagar"},"7740":{"ln":"Bodla, Durg","sn":"Bodla"},"7741":{"ln":"Kawardha, Durg","sn":"Kawardha"},"7743":{"ln":"Chuikhadan, Durg","sn":"Chuikhadan"},"7744":{"ln":"Rajandgaon, Durg","sn":"Rajandgaon"},"7745":{"ln":"Chhuriakala, Durg","sn":"Chhuriakala"},"7746":{"ln":"Manpur, Durg","sn":"Manpur"},"7747":{"ln":"Mohla, Durg","sn":"Mohla"},"7748":{"ln":"Dallirajhara, Durg","sn":"Dallirajhara"},"7749":{"ln":"Balod, Durg","sn":"Balod"},"7750":{"ln":"Marwahi, Bilaspur","sn":"Marwahi"},"7751":{"ln":"Pendra, Bilaspur","sn":"Pendra"},"7752":{"ln":"Bilaspur, Bilaspur","sn":"Bilaspur"},"7753":{"ln":"Kota, Bilaspur","sn":"Kota"},"7754":{"ln":"Pandaria, Bilaspur","sn":"Pandaria"},"7755":{"ln":"Mungeli, Bilaspur","sn":"Mungeli"},"7756":{"ln":"Lormi, Bilaspur","sn":"Lormi"},"7757":{"ln":"Shakti, Bilaspur","sn":"Shakti"},"7758":{"ln":"Dabhara, Bilaspur","sn":"Dabhara"},"7759":{"ln":"Korba, Bilaspur","sn":"Korba"},"7761":{"ln":"Tapkara, Raigarh","sn":"Tapkara"},"7762":{"ln":"Raigarh, Raigarh","sn":"Raigarh"},"7763":{"ln":"Jashpurnagar, Raigarh","sn":"Jashpurnagar"},"7764":{"ln":"Kunkuri, Raigarh","sn":"Kunkuri"},"7765":{"ln":"Pathalgaon, Raigarh","sn":"Pathalgaon"},"7766":{"ln":"Dharamjaigarh, Raigarh","sn":"Dharamjaigarh"},"7767":{"ln":"Gharghoda, Raigarh","sn":"Gharghoda"},"7768":{"ln":"Saranggarh, Raigarh","sn":"Saranggarh"},"7769":{"ln":"Bagicha, Raigarh","sn":"Bagicha"},"7770":{"ln":"Kathdol, Sarguja (Ambikapur)","sn":"Kathdol"},"7771":{"ln":"Manendragarh, Sarguja (Ambikapur)","sn":"Manendragarh"},"7772":{"ln":"Wadrainagar, Sarguja (Ambikapur)","sn":"Wadrainagar"},"7773":{"ln":"Odgi, Sarguja (Ambikapur)","sn":"Odgi"},"7774":{"ln":"Ambikapur, Sarguja (Ambikapur)","sn":"Ambikapur"},"7775":{"ln":"Surajpur, Sarguja (Ambikapur)","sn":"Surajpur"},"7776":{"ln":"Premnagar, Sarguja (Ambikapur)","sn":"Premnagar"},"7777":{"ln":"Pratappur, Sarguja (Ambikapur)","sn":"Pratappur"},"7778":{"ln":"Semaria, Sarguja (Ambikapur)","sn":"Semaria"},"7779":{"ln":"Ramchandrapur, Sarguja (Ambikapur)","sn":"Ramchandrapur"},"7781":{"ln":"Narainpur, Jagdalpur","sn":"Narainpur"},"7782":{"ln":"Jagdalpur, Jagdalpur","sn":"Jagdalpur"},"7783":{"ln":"Padamkot, Jagdalpur","sn":"Padamkot"},"7784":{"ln":"Parasgaon, Jagdalpur","sn":"Parasgaon"},"7785":{"ln":"Makodi, Jagdalpur","sn":"Makodi"},"7786":{"ln":"Kondagaon, Jagdalpur","sn":"Kondagaon"},"7787":{"ln":"Jarwa, Jagdalpur","sn":"Jarwa"},"7788":{"ln":"Luckwada, Jagdalpur","sn":"Luckwada"},"7789":{"ln":"Bhairongarh, Jagdalpur","sn":"Bhairongarh"},"7790":{"ln":"Babaichichli, Narsinghpur","sn":"Babaichichli"},"7791":{"ln":"Gadarwara, Narsinghpur","sn":"Gadarwara"},"7792":{"ln":"Narsinghpur, Narsinghpur","sn":"Narsinghpur"},"7793":{"ln":"Kareli, Narsinghpur","sn":"Kareli"},"7794":{"ln":"Gotegaon, Narsinghpur","sn":"Gotegaon"},"7801":{"ln":"Deosar, Sidhi","sn":"Deosar"},"7802":{"ln":"Churhat, Sidhi","sn":"Churhat"},"7803":{"ln":"Majholi, Sidhi","sn":"Majholi"},"7804":{"ln":"Kusmi, Sidhi","sn":"Kusmi"},"7805":{"ln":"Singrauli, Sidhi","sn":"Singrauli"},"7806":{"ln":"Chitrangi, Sidhi","sn":"Chitrangi"},"7810":{"ln":"Uproda, Bilaspur","sn":"Uproda"},"7811":{"ln":"Pasan, Bilaspur","sn":"Pasan"},"7812":{"ln":"Damoh, Damoh","sn":"Damoh"},"7813":{"ln":"Barpalli, Bilaspur","sn":"Barpalli"},"7815":{"ln":"Kathghora, Bilaspur","sn":"Kathghora"},"7816":{"ln":"Pali, Bilaspur","sn":"Pali"},"7817":{"ln":"Janjgir, Bilaspur","sn":"Janjgir"},"7818":{"ln":"Chandipara, Bilaspur","sn":"Chandipara"},"7819":{"ln":"Pandishankar, Bilaspur","sn":"Pandishankar"},"7820":{"ln":"Khairagarh, Durg","sn":"Khairagarh"},"7821":{"ln":"Dhamda, Durg","sn":"Dhamda"},"7822":{"ln":"Sidhi, Sidhi","sn":"Sidhi"},"7823":{"ln":"Dongargarh, Durg","sn":"Dongargarh"},"7824":{"ln":"Bemetara, Durg","sn":"Bemetara"},"7825":{"ln":"Berla, Durg","sn":"Berla"},"7826":{"ln":"Patan, Durg","sn":"Patan"},"7831":{"ln":"Balrampur, Sarguja (Ambikapur)","sn":"Balrampur"},"7832":{"ln":"Rajpur, Sarguja (Ambikapur)","sn":"Rajpur"},"7833":{"ln":"Udaipur, Sarguja (Ambikapur)","sn":"Udaipur"},"7834":{"ln":"Sitapur, Sarguja (Ambikapur)","sn":"Sitapur"},"7835":{"ln":"Bharathpur, Sarguja (Ambikapur)","sn":"Bharathpur"},"7836":{"ln":"Baikunthpur, Sarguja (Ambikapur)","sn":"Baikunthpur"},"7840":{"ln":"Koyelibeda, Jagdalpur","sn":"Koyelibeda"},"7841":{"ln":"Sarona, Jagdalpur","sn":"Sarona"},"7843":{"ln":"Durgakondal, Jagdalpur","sn":"Durgakondal"},"7844":{"ln":"Pakhanjur, Jagdalpur","sn":"Pakhanjur"},"7846":{"ln":"Garpa, Jagdalpur","sn":"Garpa"},"7847":{"ln":"Antagarh, Jagdalpur","sn":"Antagarh"},"7848":{"ln":"Keskal, Jagdalpur","sn":"Keskal"},"7849":{"ln":"Baderajpur, Jagdalpur","sn":"Baderajpur"},"7850":{"ln":"Bhanupratappur, Jagdalpur","sn":"Bhanupratappur"},"7851":{"ln":"Bhopalpatnam, Jagdalpur","sn":"Bhopalpatnam"},"7852":{"ln":"Toynar, Jagdalpur","sn":"Toynar"},"7853":{"ln":"Bijapur, Jagdalpur","sn":"Bijapur"},"7854":{"ln":"Ilamidi, Jagdalpur","sn":"Ilamidi"},"7855":{"ln":"Chingmut, Jagdalpur","sn":"Chingmut"},"7856":{"ln":"Dantewada, Jagdalpur","sn":"Dantewada"},"7857":{"ln":"Bacheli, Jagdalpur","sn":"Bacheli"},"7858":{"ln":"Kuakunda, Jagdalpur","sn":"Kuakunda"},"7859":{"ln":"Lohadigundah, Jagdalpur","sn":"Lohadigundah"},"7861":{"ln":"Netanar, Jagdalpur","sn":"Netanar"},"7862":{"ln":"Bastanar, Jagdalpur","sn":"Bastanar"},"7863":{"ln":"Chingamut, Jagdalpur","sn":"Chingamut"},"7864":{"ln":"Sukma, Jagdalpur","sn":"Sukma"},"7865":{"ln":"Gogunda, Jagdalpur","sn":"Gogunda"},"7866":{"ln":"Konta, Jagdalpur","sn":"Konta"},"7867":{"ln":"Bokaband, Jagdalpur","sn":"Bokaband"},"7868":{"ln":"Kanker, Jagdalpur","sn":"Kanker"},"8110":{"ln":"Anekal, Bangalore","sn":"Anekal"},"8111":{"ln":"Hosakote, Bangalore","sn":"Hosakote"},"8113":{"ln":"Channapatna, Bangalore","sn":"Channapatna"},"8117":{"ln":"Kanakapura, Bangalore","sn":"Kanakapura"},"8118":{"ln":"Nelamangala, Bangalore","sn":"Nelamangala"},"8119":{"ln":"Doddaballapur, Bangalore","sn":"Doddaballapur"},"8131":{"ln":"Gubbi, Tumkur","sn":"Gubbi"},"8132":{"ln":"Kunigal, Tumkur","sn":"Kunigal"},"8133":{"ln":"Chikkanayakanahalli, Tumkur","sn":"Chikkanayakanahalli"},"8134":{"ln":"Tiptur, Tumkur","sn":"Tiptur"},"8135":{"ln":"Sira, Tumkur","sn":"Sira"},"8136":{"ln":"Pavagada, Tumkur","sn":"Pavagada"},"8137":{"ln":"Madugiri, Tumkur","sn":"Madugiri"},"8138":{"ln":"Koratageri, Tumkur","sn":"Koratageri"},"8139":{"ln":"Turuvekere, Tumkur","sn":"Turuvekere"},"8150":{"ln":"Bagepalli, Kolar","sn":"Bagepalli"},"8151":{"ln":"Malur, Kolar","sn":"Malur"},"8152":{"ln":"Kolar, Kolar","sn":"Kolar"},"8153":{"ln":"Bangarpet, Kolar","sn":"Bangarpet"},"8154":{"ln":"Chintamani, Kolar","sn":"Chintamani"},"8155":{"ln":"Gowribidanur, Kolar","sn":"Gowribidanur"},"8156":{"ln":"Chikkaballapur, Kolar","sn":"Chikkaballapur"},"8157":{"ln":"Srinivasapur, Kolar","sn":"Srinivasapur"},"8158":{"ln":"Sidlaghatta, Kolar","sn":"Sidlaghatta"},"8159":{"ln":"Mulbagal, Kolar","sn":"Mulbagal"},"8170":{"ln":"Alur, Hassan","sn":"Alur"},"8172":{"ln":"Hassan, Hassan","sn":"Hassan"},"8173":{"ln":"Sakleshpur, Hassan","sn":"Sakleshpur"},"8174":{"ln":"Arsikere, Hassan","sn":"Arsikere"},"8175":{"ln":"Holenarasipur, Hassan","sn":"Holenarasipur"},"8176":{"ln":"Cannarayapatna, Hassan","sn":"Cannarayapatna"},"8177":{"ln":"Belur, Hassan","sn":"Belur"},"8180":{"ln":"Basavapatna, Shimoga","sn":"Basavapatna"},"8181":{"ln":"Thirthahalli, Shimoga","sn":"Thirthahalli"},"8182":{"ln":"Shimoga, Shimoga","sn":"Shimoga"},"8183":{"ln":"Sagar, Shimoga","sn":"Sagar"},"8184":{"ln":"Sorab, Shimoga","sn":"Sorab"},"8185":{"ln":"Hosanagara, Shimoga","sn":"Hosanagara"},"8186":{"ln":"Kargal, Shimoga","sn":"Kargal"},"8187":{"ln":"Shikaripura, Shimoga","sn":"Shikaripura"},"8188":{"ln":"Honnali, Shimoga","sn":"Honnali"},"8189":{"ln":"Channagiri, Shimoga","sn":"Channagiri"},"8190":{"ln":"Tallak, Devangere","sn":"Tallak"},"8191":{"ln":"Holalkere, Devangere","sn":"Holalkere"},"8192":{"ln":"Davangere, Devangere","sn":"Davangere"},"8193":{"ln":"Hiriyur, Devangere","sn":"Hiriyur"},"8194":{"ln":"Chitradurga, Devangere","sn":"Chitradurga"},"8195":{"ln":"Challakere, Devangere","sn":"Challakere"},"8196":{"ln":"Jagalur, Devangere","sn":"Jagalur"},"8198":{"ln":"Molkalmuru, Devangere","sn":"Molkalmuru"},"8199":{"ln":"Hosadurga, Devangere","sn":"Hosadurga"},"8221":{"ln":"Nanjangud, Mysore","sn":"Nanjangud"},"8222":{"ln":"Hunsur, Mysore","sn":"Hunsur"},"8223":{"ln":"K. R. Nagar, Mysore","sn":"K. R. Nagar"},"8224":{"ln":"Kollegal, Mysore","sn":"Kollegal"},"8225":{"ln":"Cowdahalli, Mysore","sn":"Cowdahalli"},"8226":{"ln":"Chamrajnagar, Mysore","sn":"Chamrajnagar"},"8227":{"ln":"T. Narsipur, Mysore","sn":"T. Narsipur"},"8228":{"ln":"H. D. Kote, Mysore","sn":"H. D. Kote"},"8229":{"ln":"Gundlupet, Mysore","sn":"Gundlupet"},"8230":{"ln":"Krishnarajapet, Mandya","sn":"Krishnarajapet"},"8231":{"ln":"Malavalli, Mandya","sn":"Malavalli"},"8232":{"ln":"Mandya, Mandya","sn":"Mandya"},"8234":{"ln":"Nagamangala, Mandya","sn":"Nagamangala"},"8236":{"ln":"Pandavpura, Mandya","sn":"Pandavpura"},"8251":{"ln":"Puttur, Dakshin-Kanada (Mangalore)","sn":"Puttur"},"8253":{"ln":"Hebri, Dakshin-Kanada (Mangalore)","sn":"Hebri"},"8254":{"ln":"Kundapur, Dakshin-Kanada (Mangalore)","sn":"Kundapur"},"8255":{"ln":"Bantwal, Dakshin-Kanada (Mangalore)","sn":"Bantwal"},"8256":{"ln":"Belthangady, Dakshin-Kanada (Mangalore)","sn":"Belthangady"},"8257":{"ln":"Sullia, Dakshin-Kanada (Mangalore)","sn":"Sullia"},"8258":{"ln":"Karkala, Dakshin-Kanada (Mangalore)","sn":"Karkala"},"8259":{"ln":"Shankarnarayana, Dakshin-Kanada (Mangalore)","sn":"Shankarnarayana"},"8261":{"ln":"Tarikere, Chikmagalur","sn":"Tarikere"},"8262":{"ln":"Chikmagalur, Chikmagalur","sn":"Chikmagalur"},"8263":{"ln":"Mudigere, Chikmagalur","sn":"Mudigere"},"8265":{"ln":"Koppa, Chikmagalur","sn":"Koppa"},"8266":{"ln":"Narsimharajapur, Chikmagalur","sn":"Narsimharajapur"},"8267":{"ln":"Kadur, Chikmagalur","sn":"Kadur"},"8272":{"ln":"Madikeri, Kodagu (Madikera)","sn":"Madikeri"},"8274":{"ln":"Virajpet, Kodagu (Madikera)","sn":"Virajpet"},"8276":{"ln":"Somwarpet, Kodagu (Madikera)","sn":"Somwarpet"},"8282":{"ln":"Bhadravati, Shimoga","sn":"Bhadravati"},"8283":{"ln":"Salkani, Uttar-Kanada (Karwar)","sn":"Salkani"},"8284":{"ln":"Haliyal, Uttar-Kanada (Karwar)","sn":"Haliyal"},"8288":{"ln":"Bailhongal, Belgaum","sn":"Bailhongal"},"8289":{"ln":"Athani, Belgaum","sn":"Athani"},"8301":{"ln":"Mundagod, Uttar-Kanada (Karwar)","sn":"Mundagod"},"8304":{"ln":"Kundgol, Hubli","sn":"Kundgol"},"8330":{"ln":"Saundatti, Belgaum","sn":"Saundatti"},"8331":{"ln":"Raibag (Kudchi), Belgaum","sn":"Raibag"},"8332":{"ln":"Gokak, Belgaum","sn":"Gokak"},"8333":{"ln":"Hukkeri (Sankeshwar), Belgaum","sn":"Hukkeri"},"8334":{"ln":"Mudalgi, Belgaum","sn":"Mudalgi"},"8335":{"ln":"Ramdurg, Belgaum","sn":"Ramdurg"},"8336":{"ln":"Khanapur, Belgaum","sn":"Khanapur"},"8337":{"ln":"Murugod, Belgaum","sn":"Murugod"},"8338":{"ln":"Chikkodi, Belgaum","sn":"Chikkodi"},"8339":{"ln":"Ainapur, Belgaum","sn":"Ainapur"},"8342":{"ln":"Margao, Panji","sn":"Margao"},"8343":{"ln":"Ponda, Panji","sn":"Ponda"},"8345":{"ln":"Sanguem, Panji","sn":"Sanguem"},"8346":{"ln":"Canacona (Quepem), Panji","sn":"Canacona"},"8350":{"ln":"Mudhol, Bijapur","sn":"Mudhol"},"8351":{"ln":"Hungund, Bijapur","sn":"Hungund"},"8352":{"ln":"Bijapur, Bijapur","sn":"Bijapur"},"8353":{"ln":"Jamkhandi, Bijapur","sn":"Jamkhandi"},"8354":{"ln":"Bagalkot, Bijapur","sn":"Bagalkot"},"8355":{"ln":"Bableshwar, Bijapur","sn":"Bableshwar"},"8356":{"ln":"Muddebihal, Bijapur","sn":"Muddebihal"},"8357":{"ln":"Badami, Bijapur","sn":"Badami"},"8358":{"ln":"Basavanabagewadi, Bijapur","sn":"Basavanabagewadi"},"8359":{"ln":"Indi, Bijapur","sn":"Indi"},"8370":{"ln":"Kalghatagi, Hubli","sn":"Kalghatagi"},"8371":{"ln":"Mundargi, Hubli","sn":"Mundargi"},"8372":{"ln":"Gadag, Hubli","sn":"Gadag"},"8373":{"ln":"Ranebennur, Hubli","sn":"Ranebennur"},"8375":{"ln":"Haveri, Hubli","sn":"Haveri"},"8376":{"ln":"Hirekerur, Hubli","sn":"Hirekerur"},"8377":{"ln":"Nargund, Hubli","sn":"Nargund"},"8378":{"ln":"Savanur, Hubli","sn":"Savanur"},"8379":{"ln":"Hangal, Hubli","sn":"Hangal"},"8380":{"ln":"Navalgund, Hubli","sn":"Navalgund"},"8381":{"ln":"Ron, Hubli","sn":"Ron"},"8382":{"ln":"Karwar, Uttar-Kanada (Karwar)","sn":"Karwar"},"8383":{"ln":"Joida, Uttar-Kanada (Karwar)","sn":"Joida"},"8384":{"ln":"Sirsi, Uttar-Kanada (Karwar)","sn":"Sirsi"},"8385":{"ln":"Bhatkal, Uttar-Kanada (Karwar)","sn":"Bhatkal"},"8386":{"ln":"Kumta, Uttar-Kanada (Karwar)","sn":"Kumta"},"8387":{"ln":"Honnavar, Uttar-Kanada (Karwar)","sn":"Honnavar"},"8388":{"ln":"Ankola, Uttar-Kanada (Karwar)","sn":"Ankola"},"8389":{"ln":"Siddapur, Uttar-Kanada (Karwar)","sn":"Siddapur"},"8391":{"ln":"Kudligi, Bellary","sn":"Kudligi"},"8392":{"ln":"Bellary, Bellary","sn":"Bellary"},"8393":{"ln":"Kurugodu, Bellary","sn":"Kurugodu"},"8394":{"ln":"Hospet, Bellary","sn":"Hospet"},"8395":{"ln":"Sandur, Bellary","sn":"Sandur"},"8396":{"ln":"Siruguppa, Bellary","sn":"Siruguppa"},"8397":{"ln":"H. B. Halli, Bellary","sn":"H. B. Halli"},"8398":{"ln":"Harapanahalli, Bellary","sn":"Harapanahalli"},"8399":{"ln":"Huvinahadagali, Bellary","sn":"Huvinahadagali"},"8402":{"ln":"Kanigiri, Ongole","sn":"Kanigiri"},"8403":{"ln":"Yerragondapalem, Ongole","sn":"Yerragondapalem"},"8404":{"ln":"Marturu, Ongole","sn":"Marturu"},"8405":{"ln":"Giddalur, Ongole","sn":"Giddalur"},"8406":{"ln":"Cumbum, Ongole","sn":"Cumbum"},"8407":{"ln":"Darsi, Ongole","sn":"Darsi"},"8408":{"ln":"Donakonda, Ongole","sn":"Donakonda"},"8411":{"ln":"Tanduru, Hyderabad","sn":"Tanduru"},"8412":{"ln":"Pargi, Hyderabad","sn":"Pargi"},"8413":{"ln":"Hyderabad West (Shamshabad), Hyderabad","sn":"Hyderabad"},"8414":{"ln":"Ibrahimpatnam, Hyderabad","sn":"Ibrahimpatnam"},"8415":{"ln":"Hyderabad East (Ghatkeswar), Hyderabad","sn":"Hyderabad"},"8416":{"ln":"Vikrabad, Hyderabad","sn":"Vikrabad"},"8417":{"ln":"Chevella, Hyderabad","sn":"Chevella"},"8418":{"ln":"Medchal, Hyderabad","sn":"Medchal"},"8419":{"ln":"Yellapur, Uttar-Kanada (Karwar)","sn":"Yellapur"},"8422":{"ln":"Chadchan, Bijapur","sn":"Chadchan"},"8424":{"ln":"Devarahippargi, Bijapur","sn":"Devarahippargi"},"8425":{"ln":"Biligi, Bijapur","sn":"Biligi"},"8426":{"ln":"Telgi, Bijapur","sn":"Telgi"},"8440":{"ln":"Nimburga, Gulbarga","sn":"Nimburga"},"8441":{"ln":"Sedam, Gulbarga","sn":"Sedam"},"8442":{"ln":"Jewargi, Gulbarga","sn":"Jewargi"},"8443":{"ln":"Shorapur, Gulbarga","sn":"Shorapur"},"8444":{"ln":"Hunsagi, Gulbarga","sn":"Hunsagi"},"8450":{"ln":"Andole (Jogipet), Sangareddy","sn":"Andole"},"8451":{"ln":"Zahirabad, Sangareddy","sn":"Zahirabad"},"8452":{"ln":"Medak, Sangareddy","sn":"Medak"},"8454":{"ln":"Gajwel, Sangareddy","sn":"Gajwel"},"8455":{"ln":"Sangareddy, Sangareddy","sn":"Sangareddy"},"8456":{"ln":"Narayankhed, Sangareddy","sn":"Narayankhed"},"8457":{"ln":"Siddipet, Sangareddy","sn":"Siddipet"},"8458":{"ln":"Narsapur, Sangareddy","sn":"Narsapur"},"8461":{"ln":"Dichpalli, Nizamabad","sn":"Dichpalli"},"8462":{"ln":"Nizamabad, Nizamabad","sn":"Nizamabad"},"8463":{"ln":"Armoor, Nizamabad","sn":"Armoor"},"8464":{"ln":"Madnur, Nizamabad","sn":"Madnur"},"8465":{"ln":"Yellareddy, Nizamabad","sn":"Yellareddy"},"8466":{"ln":"Banswada, Nizamabad","sn":"Banswada"},"8467":{"ln":"Bodhan, Nizamabad","sn":"Bodhan"},"8468":{"ln":"Kamareddy, Nizamabad","sn":"Kamareddy"},"8470":{"ln":"Afzalpur, Gulbarga","sn":"Afzalpur"},"8471":{"ln":"Mashal, Gulbarga","sn":"Mashal"},"8472":{"ln":"Gulbarga, Gulbarga","sn":"Gulbarga"},"8473":{"ln":"Yadgiri, Gulbarga","sn":"Yadgiri"},"8474":{"ln":"Chittapur, Gulbarga","sn":"Chittapur"},"8475":{"ln":"Chincholi, Gulbarga","sn":"Chincholi"},"8476":{"ln":"Wadi, Gulbarga","sn":"Wadi"},"8477":{"ln":"Aland, Gulbarga","sn":"Aland"},"8478":{"ln":"Kamalapur, Gulbarga","sn":"Kamalapur"},"8479":{"ln":"Shahapur, Gulbarga","sn":"Shahapur"},"8481":{"ln":"Basavakalyan, Bidar","sn":"Basavakalyan"},"8482":{"ln":"Bidar, Bidar","sn":"Bidar"},"8483":{"ln":"Humnabad, Bidar","sn":"Humnabad"},"8484":{"ln":"Bhalki, Bidar","sn":"Bhalki"},"8485":{"ln":"Aurad, Bidar","sn":"Aurad"},"8487":{"ln":"Shirahatti, Hubli","sn":"Shirahatti"},"8488":{"ln":"Sindagi, Bijapur","sn":"Sindagi"},"8490":{"ln":"Pamuru, Ongole","sn":"Pamuru"},"8491":{"ln":"Kanaganapalle, Anantpur (Guntakal)","sn":"Kanaganapalle"},"8492":{"ln":"Kambadur, Anantpur (Guntakal)","sn":"Kambadur"},"8493":{"ln":"Madakasira, Anantpur (Guntakal)","sn":"Madakasira"},"8494":{"ln":"Kadiri, Anantpur (Guntakal)","sn":"Kadiri"},"8495":{"ln":"Rayadurg, Anantpur (Guntakal)","sn":"Rayadurg"},"8496":{"ln":"Uravakonda, Anantpur (Guntakal)","sn":"Uravakonda"},"8497":{"ln":"Kalyandurg, Anantpur (Guntakal)","sn":"Kalyandurg"},"8498":{"ln":"Nallacheruvu (Tanakallu), Anantpur (Guntakal)","sn":"Nallacheruvu"},"8499":{"ln":"Podili, Ongole","sn":"Podili"},"8501":{"ln":"Kollapur, Mahabubnagar","sn":"Kollapur"},"8502":{"ln":"Alampur, Mahabubnagar","sn":"Alampur"},"8503":{"ln":"Makthal, Mahabubnagar","sn":"Makthal"},"8504":{"ln":"Atmakur, Mahabubnagar","sn":"Atmakur"},"8505":{"ln":"Kodangal, Mahabubnagar","sn":"Kodangal"},"8506":{"ln":"Narayanpet, Mahabubnagar","sn":"Narayanpet"},"8510":{"ln":"Koilkuntla, Kurnool","sn":"Koilkuntla"},"8512":{"ln":"Adoni, Kurnool","sn":"Adoni"},"8513":{"ln":"Nandikotkur, Kurnool","sn":"Nandikotkur"},"8514":{"ln":"Nandyal, Kurnool","sn":"Nandyal"},"8515":{"ln":"Banaganapalle, Kurnool","sn":"Banaganapalle"},"8516":{"ln":"Dronachalam, Kurnool","sn":"Dronachalam"},"8517":{"ln":"Atmakur, Kurnool","sn":"Atmakur"},"8518":{"ln":"Kurnool, Kurnool","sn":"Kurnool"},"8519":{"ln":"Allagadda, Kurnool","sn":"Allagadda"},"8520":{"ln":"Pattikonda, Kurnool","sn":"Pattikonda"},"8522":{"ln":"Peapalle, Kurnool","sn":"Peapalle"},"8523":{"ln":"Alur, Kurnool","sn":"Alur"},"8524":{"ln":"Srisailam, Kurnool","sn":"Srisailam"},"8525":{"ln":"Gudur (Kodumur), Kurnool","sn":"Gudur"},"8531":{"ln":"Deodurga, Raichur","sn":"Deodurga"},"8532":{"ln":"Raichur, Raichur","sn":"Raichur"},"8533":{"ln":"Gangavathi, Raichur","sn":"Gangavathi"},"8534":{"ln":"Yelburga, Raichur","sn":"Yelburga"},"8535":{"ln":"Sindhanur, Raichur","sn":"Sindhanur"},"8536":{"ln":"Kustagi, Raichur","sn":"Kustagi"},"8537":{"ln":"Lingsugur, Raichur","sn":"Lingsugur"},"8538":{"ln":"Manvi, Raichur","sn":"Manvi"},"8539":{"ln":"Koppal, Raichur","sn":"Koppal"},"8540":{"ln":"Nagarkurnool, Mahabubnagar","sn":"Nagarkurnool"},"8541":{"ln":"Achampet, Mahabubnagar","sn":"Achampet"},"8542":{"ln":"Mahabubnagar, Mahabubnagar","sn":"Mahabubnagar"},"8543":{"ln":"Wanaparthy, Mahabubnagar","sn":"Wanaparthy"},"8545":{"ln":"Amangallu, Mahabubnagar","sn":"Amangallu"},"8546":{"ln":"Gadwal, Mahabubnagar","sn":"Gadwal"},"8548":{"ln":"Shadnagar, Mahabubnagar","sn":"Shadnagar"},"8549":{"ln":"Kalwakurthy, Mahabubnagar","sn":"Kalwakurthy"},"8550":{"ln":"Yellanuru, Anantpur (Guntakal)","sn":"Yellanuru"},"8551":{"ln":"Garladinne, Anantpur (Guntakal)","sn":"Garladinne"},"8552":{"ln":"Gooty (Guntakal), Anantpur (Guntakal)","sn":"Gooty"},"8554":{"ln":"Anantapur, Anantpur (Guntakal)","sn":"Anantapur"},"8556":{"ln":"Hindupur, Anantpur (Guntakal)","sn":"Hindupur"},"8557":{"ln":"Penukonda, Anantpur (Guntakal)","sn":"Penukonda"},"8558":{"ln":"Tadipatri, Anantpur (Guntakal)","sn":"Tadipatri"},"8559":{"ln":"Dharmavaram, Anantpur (Guntakal)","sn":"Dharmavaram"},"8560":{"ln":"Jammalamadugu, Cuddapah","sn":"Jammalamadugu"},"8561":{"ln":"Rayachoti, Cuddapah","sn":"Rayachoti"},"8562":{"ln":"Cuddapah, Cuddapah","sn":"Cuddapah"},"8563":{"ln":"Kamalapuram (Yerraguntala), Cuddapah","sn":"Kamalapuram"},"8564":{"ln":"Proddatur, Cuddapah","sn":"Proddatur"},"8565":{"ln":"Rajampeta, Cuddapah","sn":"Rajampeta"},"8566":{"ln":"Koduru, Cuddapah","sn":"Koduru"},"8567":{"ln":"Lakkireddipalli, Cuddapah","sn":"Lakkireddipalli"},"8568":{"ln":"Pulivendla, Cuddapah","sn":"Pulivendla"},"8569":{"ln":"Badvel, Cuddapah","sn":"Badvel"},"8570":{"ln":"Kuppam, Chittoor","sn":"Kuppam"},"8571":{"ln":"Madanapalli, Chittoor","sn":"Madanapalli"},"8572":{"ln":"Chittoor, Chittoor","sn":"Chittoor"},"8573":{"ln":"Bangarupalem, Chittoor","sn":"Bangarupalem"},"8576":{"ln":"Satyavedu, Chittoor","sn":"Satyavedu"},"8577":{"ln":"Putturu, Chittoor","sn":"Putturu"},"8578":{"ln":"Srikalahasthi, Chittoor","sn":"Srikalahasthi"},"8579":{"ln":"Palmaneru, Chittoor","sn":"Palmaneru"},"8581":{"ln":"Punganur, Chittoor","sn":"Punganur"},"8582":{"ln":"B. Kothakota, Chittoor","sn":"B. Kothakota"},"8583":{"ln":"Sodam, Chittoor","sn":"Sodam"},"8584":{"ln":"Piler, Chittoor","sn":"Piler"},"8585":{"ln":"Pakala, Chittoor","sn":"Pakala"},"8586":{"ln":"Vayalpad, Chittoor","sn":"Vayalpad"},"8587":{"ln":"Venkatgirikota, Chittoor","sn":"Venkatgirikota"},"8588":{"ln":"Vaimpalli, Cuddapah","sn":"Vaimpalli"},"8589":{"ln":"Siddavattam, Cuddapah","sn":"Siddavattam"},"8592":{"ln":"Ongole, Ongole","sn":"Ongole"},"8593":{"ln":"Medarmetla, Ongole","sn":"Medarmetla"},"8594":{"ln":"Chirala, Ongole","sn":"Chirala"},"8596":{"ln":"Markapur, Ongole","sn":"Markapur"},"8598":{"ln":"Kandukuru, Ongole","sn":"Kandukuru"},"8599":{"ln":"Ulvapadu, Ongole","sn":"Ulvapadu"},"8620":{"ln":"Udaygiri, Nellore","sn":"Udaygiri"},"8621":{"ln":"Rapur (Podalakur), Nellore","sn":"Rapur"},"8622":{"ln":"Kovvur, Nellore","sn":"Kovvur"},"8623":{"ln":"Sullurpet, Nellore","sn":"Sullurpet"},"8624":{"ln":"Gudur, Nellore","sn":"Gudur"},"8625":{"ln":"Venkatgiri, Nellore","sn":"Venkatgiri"},"8626":{"ln":"Kavali, Nellore","sn":"Kavali"},"8627":{"ln":"Atmakur, Nellore","sn":"Atmakur"},"8628":{"ln":"Chejerla, Nellore","sn":"Chejerla"},"8629":{"ln":"Vinjamuru, Nellore","sn":"Vinjamuru"},"8640":{"ln":"Krosuru, Guntur","sn":"Krosuru"},"8641":{"ln":"Sattenapalli, Guntur","sn":"Sattenapalli"},"8642":{"ln":"Palnad (Macherala), Guntur","sn":"Palnad"},"8643":{"ln":"Bapatla, Guntur","sn":"Bapatla"},"8644":{"ln":"Tenali, Guntur","sn":"Tenali"},"8645":{"ln":"Mangalagiri, Guntur","sn":"Mangalagiri"},"8646":{"ln":"Vinukonda, Guntur","sn":"Vinukonda"},"8647":{"ln":"Narsaraopet, Guntur","sn":"Narsaraopet"},"8648":{"ln":"Repalle, Guntur","sn":"Repalle"},"8649":{"ln":"Piduguralla, Guntur","sn":"Piduguralla"},"8654":{"ln":"Jaggayyapet, Vijayawada","sn":"Jaggayyapet"},"8656":{"ln":"Nuzvidu, Vijayawada","sn":"Nuzvidu"},"8659":{"ln":"Mylavaram, Vijayawada","sn":"Mylavaram"},"8671":{"ln":"Divi (Challapalli), Vijayawada","sn":"Divi"},"8672":{"ln":"Bandar (Machilipatnam), Vijayawada","sn":"Bandar"},"8673":{"ln":"Tirivuru, Vijayawada","sn":"Tirivuru"},"8674":{"ln":"Gudivada, Vijayawada","sn":"Gudivada"},"8676":{"ln":"Vuyyuru, Vijayawada","sn":"Vuyyuru"},"8677":{"ln":"Kaikaluru, Vijayawada","sn":"Kaikaluru"},"8678":{"ln":"Nandigama, Vijayawada","sn":"Nandigama"},"8680":{"ln":"Nidamanur (Hillcolony), Nalgonda","sn":"Nidamanur"},"8681":{"ln":"Chandoor, Nalgonda","sn":"Chandoor"},"8682":{"ln":"Nalgonda, Nalgonda","sn":"Nalgonda"},"8683":{"ln":"Hazurnagar, Nalgonda","sn":"Hazurnagar"},"8684":{"ln":"Suryapet, Nalgonda","sn":"Suryapet"},"8685":{"ln":"Bhongir, Nalgonda","sn":"Bhongir"},"8689":{"ln":"Miryalguda, Nalgonda","sn":"Miryalguda"},"8691":{"ln":"Devarakonda, Nalgonda","sn":"Devarakonda"},"8692":{"ln":"Nampalle, Nalgonda","sn":"Nampalle"},"8693":{"ln":"Thungaturthy, Nalgonda","sn":"Thungaturthy"},"8694":{"ln":"Ramannapet, Nalgonda","sn":"Ramannapet"},"8710":{"ln":"Cherial, Warangal","sn":"Cherial"},"8711":{"ln":"Wardhannapet (Ghanapur), Warangal","sn":"Wardhannapet"},"8713":{"ln":"Parkal, Warangal","sn":"Parkal"},"8715":{"ln":"Mulug, Warangal","sn":"Mulug"},"8716":{"ln":"Jangaon, Warangal","sn":"Jangaon"},"8717":{"ln":"Eturnagaram, Warangal","sn":"Eturnagaram"},"8718":{"ln":"Narasampet, Warangal","sn":"Narasampet"},"8719":{"ln":"Mahabubbad, Warangal","sn":"Mahabubbad"},"8720":{"ln":"Mahadevapur, Karimnagar","sn":"Mahadevapur"},"8721":{"ln":"Husnabad, Karimnagar","sn":"Husnabad"},"8723":{"ln":"Sircilla, Karimnagar","sn":"Sircilla"},"8724":{"ln":"Jagtial, Karimnagar","sn":"Jagtial"},"8725":{"ln":"Metpalli, Karimnagar","sn":"Metpalli"},"8727":{"ln":"Huzurabad, Karimnagar","sn":"Huzurabad"},"8728":{"ln":"Peddapalli, Karimnagar","sn":"Peddapalli"},"8729":{"ln":"Manthani, Karimnagar","sn":"Manthani"},"8730":{"ln":"Khanapur (Ap), Adilabad","sn":"Khanapur"},"8731":{"ln":"Utnor, Adilabad","sn":"Utnor"},"8732":{"ln":"Adilabad, Adilabad","sn":"Adilabad"},"8733":{"ln":"Asifabad, Adilabad","sn":"Asifabad"},"8734":{"ln":"Nirmal, Adilabad","sn":"Nirmal"},"8735":{"ln":"Bellampalli, Adilabad","sn":"Bellampalli"},"8736":{"ln":"Mancherial, Adilabad","sn":"Mancherial"},"8737":{"ln":"Chinnor, Adilabad","sn":"Chinnor"},"8738":{"ln":"Sirpurkagaznagar, Adilabad","sn":"Sirpurkagaznagar"},"8739":{"ln":"Jannaram (Luxittipet), Adilabad","sn":"Jannaram"},"8740":{"ln":"Aswaraopet, Khammam","sn":"Aswaraopet"},"8741":{"ln":"Sudhimalla (Tekulapalli), Khammam","sn":"Sudhimalla"},"8742":{"ln":"Khammam, Khammam","sn":"Khammam"},"8743":{"ln":"Bhadrachalam, Khammam","sn":"Bhadrachalam"},"8744":{"ln":"Kothagudem, Khammam","sn":"Kothagudem"},"8745":{"ln":"Yellandu, Khammam","sn":"Yellandu"},"8746":{"ln":"Bhooragamphad (Manuguru), Khammam","sn":"Bhooragamphad"},"8747":{"ln":"Nuguru (Cherla), Khammam","sn":"Nuguru"},"8748":{"ln":"V. R. Puram, Khammam","sn":"V. R. Puram"},"8749":{"ln":"Madhira, Khammam","sn":"Madhira"},"8751":{"ln":"Boath (Echoda), Adilabad","sn":"Boath"},"8752":{"ln":"Bhainsa, Adilabad","sn":"Bhainsa"},"8753":{"ln":"Outsarangapalle, Adilabad","sn":"Outsarangapalle"},"8761":{"ln":"Sathupalli, Khammam","sn":"Sathupalli"},"8811":{"ln":"Polavaram, Eluru","sn":"Polavaram"},"8812":{"ln":"Eluru, Eluru","sn":"Eluru"},"8813":{"ln":"Kovvur (Nidadavolu), Eluru","sn":"Kovvur"},"8814":{"ln":"Narsapur (Palakole), Eluru","sn":"Narsapur"},"8816":{"ln":"Bhimavaram, Eluru","sn":"Bhimavaram"},"8818":{"ln":"Tadepalligudem, Eluru","sn":"Tadepalligudem"},"8819":{"ln":"Tanuku, Eluru","sn":"Tanuku"},"8821":{"ln":"Jangareddygudem, Eluru","sn":"Jangareddygudem"},"8823":{"ln":"Chintalapudi, Eluru","sn":"Chintalapudi"},"8829":{"ln":"Bhimadole, Eluru","sn":"Bhimadole"},"8852":{"ln":"Peddapuram, Rajahmundri","sn":"Peddapuram"},"8854":{"ln":"Tuni, Rajahmundri","sn":"Tuni"},"8855":{"ln":"Mandapeta (Ravulapalem), Rajahmundri","sn":"Mandapeta"},"8856":{"ln":"Amalapuram, Rajahmundri","sn":"Amalapuram"},"8857":{"ln":"Ramachandrapuram, Rajahmundri","sn":"Ramachandrapuram"},"8862":{"ln":"Razole, Rajahmundri","sn":"Razole"},"8863":{"ln":"Chavitidibbalu, Rajahmundri","sn":"Chavitidibbalu"},"8864":{"ln":"Rampachodavaram, Rajahmundri","sn":"Rampachodavaram"},"8865":{"ln":"Yelavaram, Rajahmundri","sn":"Yelavaram"},"8868":{"ln":"Yeleswaram, Rajahmundri","sn":"Yeleswaram"},"8869":{"ln":"Pithapuram, Rajahmundri","sn":"Pithapuram"},"8922":{"ln":"Vizayanagaram, Vizayanagaram","sn":"Vizayanagaram"},"8924":{"ln":"Anakapalle, Visakhapatnam","sn":"Anakapalle"},"8931":{"ln":"Yelamanchili, Visakhapatnam","sn":"Yelamanchili"},"8932":{"ln":"Narsipatnam, Visakhapatnam","sn":"Narsipatnam"},"8933":{"ln":"Bheemunipatnam, Visakhapatnam","sn":"Bheemunipatnam"},"8934":{"ln":"Chodavaram, Visakhapatnam","sn":"Chodavaram"},"8935":{"ln":"Paderu, Visakhapatnam","sn":"Paderu"},"8936":{"ln":"Araku, Visakhapatnam","sn":"Araku"},"8937":{"ln":"Chintapalle, Visakhapatnam","sn":"Chintapalle"},"8938":{"ln":"Sileru, Visakhapatnam","sn":"Sileru"},"8941":{"ln":"Palakonda (Rajam), Srikakulam","sn":"Palakonda"},"8942":{"ln":"Srikakulam, Srikakulam","sn":"Srikakulam"},"8944":{"ln":"Bobbili, Vizayanagaram","sn":"Bobbili"},"8945":{"ln":"Tekkali (Palasa), Srikakulam","sn":"Tekkali"},"8946":{"ln":"Pathapatnam (Hiramandalam), Srikakulam","sn":"Pathapatnam"},"8947":{"ln":"Sompeta, Srikakulam","sn":"Sompeta"},"8952":{"ln":"Chepurupalli (Garividi), Vizayanagaram","sn":"Chepurupalli"},"8963":{"ln":"Parvathipuram, Vizayanagaram","sn":"Parvathipuram"},"8964":{"ln":"Saluru, Vizayanagaram","sn":"Saluru"},"8965":{"ln":"Gajapathinagaram, Vizayanagaram","sn":"Gajapathinagaram"},"8966":{"ln":"Srungavarapukota (Kothvls), Vizayanagaram","sn":"Srungavarapukota"}};
ilib.data.area_FR = {"1":{"ln":"Paris (Ile-de-France area)","sn":"Paris"},"3":{"ln":"Northeast France","sn":"Northeast France"},"4":{"ln":"Southeast France","sn":"Southeast France"},"9":{"ln":"Voice over IP services","sn":"Voice over IP"},"262":{"ln":"Islands of RÃ©union and Mayotte","sn":"RÃ©union"},"508":{"ln":"Saint Pierre and Miquelon Islands","sn":"Saint Pierre and Miquelon"},"590":{"ln":"Guadaloupe Island","sn":"Guadaloupe"},"594":{"ln":"French Guiana","sn":"French Guiana"},"596":{"ln":"Martinique Island","sn":"Martinique"},"2.":{"ln":"Northwest France","sn":"Northwest France"},"26.":{"ln":"Northwest France","sn":"Northwest France"},"5.":{"ln":"Southwest France","sn":"Southwest France"},"50.":{"ln":"Southwest France","sn":"Southwest France"},"59.":{"ln":"Southwest France","sn":"Southwest France"}};
ilib.data.area_DE = {"30":{"ln":"Berlin","sn":"Berlin"},"40":{"ln":"Hamburg, Norderstedt, Neu Wulmstorf","sn":"Hamburg"},"69":{"ln":"Frankfurt am Main, Offenbach am Main","sn":"Frankfurt"},"89":{"ln":"Munich","sn":"Munich"},"201":{"ln":"Essen","sn":"Essen"},"202":{"ln":"Wuppertal","sn":"Wuppertal"},"203":{"ln":"Duisburg","sn":"Duisburg"},"208":{"ln":"MÃ¼lheim an der Ruhr/Oberhausen","sn":"MÃ¼lheim"},"209":{"ln":"Gelsenkirchen","sn":"Gelsenkirchen"},"211":{"ln":"DÃ¼sseldorf","sn":"DÃ¼sseldorf"},"212":{"ln":"Solingen","sn":"Solingen"},"214":{"ln":"Leverkusen","sn":"Leverkusen"},"221":{"ln":"Cologne","sn":"Cologne"},"228":{"ln":"Bonn, Niederkassel-Mondorf","sn":"Bonn"},"231":{"ln":"Dortmund/LÃ¼nen-Brambauer","sn":"Dortmund"},"234":{"ln":"Bochum","sn":"Bochum"},"241":{"ln":"Aachen","sn":"Aachen"},"251":{"ln":"MÃ¼nster","sn":"MÃ¼nster"},"261":{"ln":"Koblenz","sn":"Koblenz"},"271":{"ln":"Siegen","sn":"Siegen"},"281":{"ln":"Wesel","sn":"Wesel"},"291":{"ln":"Meschede","sn":"Meschede"},"331":{"ln":"Potsdam","sn":"Potsdam"},"335":{"ln":"Frankfurt (Oder)","sn":"Frankfurt"},"340":{"ln":"Dessau","sn":"Dessau"},"341":{"ln":"Leipzig","sn":"Leipzig"},"345":{"ln":"Halle (Saale)","sn":"Halle"},"351":{"ln":"Dresden","sn":"Dresden"},"355":{"ln":"Cottbus","sn":"Cottbus"},"361":{"ln":"Erfurt","sn":"Erfurt"},"365":{"ln":"Gera","sn":"Gera"},"371":{"ln":"Chemnitz","sn":"Chemnitz"},"375":{"ln":"Zwickau","sn":"Zwickau"},"381":{"ln":"Rostock","sn":"Rostock"},"385":{"ln":"Schwerin","sn":"Schwerin"},"391":{"ln":"Magdeburg","sn":"Magdeburg"},"395":{"ln":"Neubrandenburg","sn":"Neubrandenburg"},"421":{"ln":"Bremen","sn":"Bremen"},"431":{"ln":"Kiel","sn":"Kiel"},"441":{"ln":"Oldenburg (Oldb.)","sn":"Oldenburg"},"461":{"ln":"Flensburg","sn":"Flensburg"},"471":{"ln":"Bremerhaven","sn":"Bremerhaven"},"481":{"ln":"Heide","sn":"Heide"},"491":{"ln":"Leer","sn":"Leer"},"511":{"ln":"Hannover","sn":"Hannover"},"521":{"ln":"Bielefeld","sn":"Bielefeld"},"531":{"ln":"Braunschweig","sn":"Braunschweig"},"541":{"ln":"OsnabrÃ¼ck","sn":"OsnabrÃ¼ck"},"551":{"ln":"GÃ¶ttingen","sn":"GÃ¶ttingen"},"561":{"ln":"Kassel","sn":"Kassel"},"571":{"ln":"Minden","sn":"Minden"},"581":{"ln":"Uelzen","sn":"Uelzen"},"591":{"ln":"Lingen (Ems)","sn":"Lingen"},"611":{"ln":"Wiesbaden","sn":"Wiesbaden"},"621":{"ln":"Mannheim, Ilvesheim, Neu-Edingen, Ludwigshafen am Rhein","sn":"Mannheim"},"631":{"ln":"Kaiserslautern","sn":"Kaiserslautern"},"641":{"ln":"GieÃen, Heuchelheim (Hessen)","sn":"GieÃen"},"651":{"ln":"Trier","sn":"Trier"},"661":{"ln":"Fulda, KÃ¼nzell, Petersberg","sn":"Fulda"},"671":{"ln":"Bad Kreuznach","sn":"Bad Kreuznach"},"681":{"ln":"SaarbrÃ¼cken","sn":"SaarbrÃ¼cken"},"711":{"ln":"Stuttgart, Aichwald, Denkendorf, Esslingen am Neckar, Fellbach, Filderstadt-Bernhausen, Filderstadt-Bonlanden, Filderstadt-Plattenhardt, Korntal, Leinfelden-Echterdingen, Ostfildern-Kemnat, Ostfildern-Nellingen, Ostfildern-Ruit","sn":"Stuttgart"},"721":{"ln":"Karlsruhe, Eggenstein-Leopoldshafen, Pfinztal-Berghausen (Baden), Rheinstetten, Stutensee,","sn":"Karlsruhe"},"731":{"ln":"Ulm, Blaustein, Elchingen, Neu-Ulm","sn":"Ulm"},"741":{"ln":"Rottweil, DeiÃlingen, Dietingen, Villingendorf, Zimmern ob Rottweil","sn":"Rottweil"},"751":{"ln":"Ravensburg, Baienfurt, Baindt, Berg (Schussental), GrÃ¼nkraut, Schlier, Weingarten (WÃ¼rttemberg)","sn":"Ravensburg"},"761":{"ln":"Freiburg im Breisgau, Au, Gundelfingen, Horben, Kirchzarten, Merzhausen, SÃ¶lden, Wittnau","sn":"Freiburg"},"771":{"ln":"Donaueschingen, BrÃ¤unlingen, HÃ¼fingen","sn":"Donaueschingen"},"781":{"ln":"Offenburg, Durbach, Ortenberg, Schutterwald","sn":"Offenburg"},"791":{"ln":"SchwÃ¤bisch Hall, Braunsbach, Michelbach an der Bilz, Michelfeld, Rosengarten, UntermÃ¼nkheim","sn":"SchwÃ¤bisch Hall"},"811":{"ln":"Hallbergmoos","sn":"Hallbergmoos"},"821":{"ln":"Augsburg","sn":"Augsburg"},"831":{"ln":"Kempten AllgÃ¤u","sn":"Kempten"},"841":{"ln":"Ingolstadt","sn":"Ingolstadt"},"851":{"ln":"Passau","sn":"Passau"},"861":{"ln":"Traunstein","sn":"Traunstein"},"871":{"ln":"Landshut","sn":"Landshut"},"881":{"ln":"Weilheim in Oberbayern","sn":"Weilheim"},"906":{"ln":"DonauwÃ¶rth","sn":"DonauwÃ¶rth"},"911":{"ln":"NÃ¼rnberg/FÃ¼rth","sn":"NÃ¼rnberg"},"921":{"ln":"Bayreuth","sn":"Bayreuth"},"931":{"ln":"WÃ¼rzburg","sn":"WÃ¼rzburg"},"941":{"ln":"Regensburg","sn":"Regensburg"},"951":{"ln":"Bamberg","sn":"Bamberg"},"961":{"ln":"Weiden (Oberpfalz)","sn":"Weiden"},"971":{"ln":"Bad Kissingen","sn":"Bad Kissingen"},"981":{"ln":"Ansbach","sn":"Ansbach"},"991":{"ln":"Deggendorf","sn":"Deggendorf"},"2041":{"ln":"Bottrop","sn":"Bottrop"},"2043":{"ln":"Gladbeck","sn":"Gladbeck"},"2045":{"ln":"Bottrop-Kirchhellen","sn":"Bottrop-Kirchhellen"},"2051":{"ln":"Velbert","sn":"Velbert"},"2052":{"ln":"Velbert-Langenberg (Rheinland)","sn":"Velbert-Langenberg"},"2053":{"ln":"Velbert-Neviges","sn":"Velbert-Neviges"},"2054":{"ln":"Essen-Kettwig, MÃ¼lheim an der Ruhr-Mintard","sn":"Essen-Kettwig"},"2056":{"ln":"Heiligenhaus","sn":"Heiligenhaus"},"2058":{"ln":"WÃ¼lfrath","sn":"WÃ¼lfrath"},"2064":{"ln":"Dinslaken","sn":"Dinslaken"},"2065":{"ln":"Duisburg-Rheinhausen","sn":"Duisburg-Rheinhausen"},"2066":{"ln":"Duisburg-Homberg (Rheinland)","sn":"Duisburg-Homberg"},"2102":{"ln":"Ratingen","sn":"Ratingen"},"2103":{"ln":"Hilden","sn":"Hilden"},"2104":{"ln":"Mettmann","sn":"Mettmann"},"2131":{"ln":"Neuss, Kaarst","sn":"Neuss"},"2132":{"ln":"Meerbusch-BÃ¼derich (DÃ¼sseldorf)","sn":"Meerbusch-BÃ¼derich"},"2133":{"ln":"Dormagen","sn":"Dormagen"},"2137":{"ln":"Neuss-Norf","sn":"Neuss-Norf"},"2150":{"ln":"Meerbusch-Lank-Latum","sn":"Meerbusch-Lank-Latum"},"2151":{"ln":"Krefeld","sn":"Krefeld"},"2152":{"ln":"Kempen","sn":"Kempen"},"2153":{"ln":"Nettetal-Lobberich","sn":"Nettetal-Lobberich"},"2154":{"ln":"Willich","sn":"Willich"},"2156":{"ln":"Willich-Anrath","sn":"Willich-Anrath"},"2157":{"ln":"Nettetal-Kaldenkirchen/BrÃ¼ggen","sn":"Nettetal-Kaldenkirchen"},"2159":{"ln":"Meerbusch-Osterath","sn":"Meerbusch-Osterath"},"2161":{"ln":"MÃ¶nchengladbach","sn":"MÃ¶nchengladbach"},"2162":{"ln":"Viersen","sn":"Viersen"},"2163":{"ln":"Schwalmtal","sn":"Schwalmtal"},"2164":{"ln":"JÃ¼chen-Otzenrath","sn":"JÃ¼chen-Otzenrath"},"2165":{"ln":"JÃ¼chen","sn":"JÃ¼chen"},"2166":{"ln":"Rheydt","sn":"Rheydt"},"2171":{"ln":"Leverkusen-Opladen","sn":"Leverkusen-Opladen"},"2173":{"ln":"Langenfeld (Rheinland), Leverkusen-Hitdorf","sn":"Langenfeld"},"2174":{"ln":"Burscheid (Rheinland), Leichlingen-Witzhelden","sn":"Burscheid"},"2175":{"ln":"Leichlingen","sn":"Leichlingen"},"2181":{"ln":"Grevenbroich","sn":"Grevenbroich"},"2182":{"ln":"Grevenbroich-Kapellen","sn":"Grevenbroich-Kapellen"},"2183":{"ln":"Rommerskirchen","sn":"Rommerskirchen"},"2191":{"ln":"Remscheid","sn":"Remscheid"},"2192":{"ln":"HÃ¼ckeswagen","sn":"HÃ¼ckeswagen"},"2193":{"ln":"Wermelskirchen-Dabringhausen","sn":"Wermelskirchen-Dabringhausen"},"2195":{"ln":"Radevormwald","sn":"Radevormwald"},"2196":{"ln":"Wermelskirchen","sn":"Wermelskirchen"},"2202":{"ln":"Bergisch Gladbach","sn":"Bergisch Gladbach"},"2203":{"ln":"Cologne-Porz","sn":"Cologne-Porz"},"2204":{"ln":"Bergisch Gladbach-Bensberg, OT Untereschbach von Overath","sn":"Bergisch Gladbach"},"2205":{"ln":"RÃ¶srath","sn":"RÃ¶srath"},"2206":{"ln":"Overath, Lohmar","sn":"Overath"},"2207":{"ln":"DÃ¼rscheid, Overath","sn":"DÃ¼rscheid"},"2208":{"ln":"Niederkassel","sn":"Niederkassel"},"2222":{"ln":"Bornheim, Roisdorf","sn":"Bornheim"},"2223":{"ln":"KÃ¶nigswinter","sn":"KÃ¶nigswinter"},"2224":{"ln":"Bad Honnef","sn":"Bad Honnef"},"2225":{"ln":"Meckenheim (Rheinland), Wachtberg","sn":"Meckenheim"},"2226":{"ln":"Rheinbach","sn":"Rheinbach"},"2227":{"ln":"Merten, Walberberg, Sechtem","sn":"Merten"},"2228":{"ln":"Rolandseck","sn":"Rolandseck"},"2232":{"ln":"BrÃ¼hl (Rheinland), Berzdorf von Wesseling, Cologne-Meschenich","sn":"BrÃ¼hl"},"2233":{"ln":"HÃ¼rth (Rheinland), Cologne-Rondorf","sn":"HÃ¼rth"},"2234":{"ln":"Frechen, LÃ¶venich, Cologne-Marsdorf, Cologne-Weiden","sn":"Frechen"},"2235":{"ln":"Erftstadt","sn":"Erftstadt"},"2236":{"ln":"Wesseling (Rheinland), Cologne-Godorf, Cologne-Hahnwald, Cologne-Immendorf, Cologne-Rodenkirchen, Cologne-SÃ¼rth, Cologne-WeiÃ","sn":"Wesseling"},"2237":{"ln":"Kerpen (Rheinland)","sn":"Kerpen"},"2238":{"ln":"Pulheim","sn":"Pulheim"},"2241":{"ln":"Siegburg/Sankt Augustin/Troisdorf","sn":"Siegburg"},"2242":{"ln":"Hennef (Sieg)","sn":"Hennef"},"2243":{"ln":"Eitorf","sn":"Eitorf"},"2244":{"ln":"Oberpleis","sn":"Oberpleis"},"2245":{"ln":"Much","sn":"Much"},"2246":{"ln":"Lohmar","sn":"Lohmar"},"2247":{"ln":"Neunkirchen-Seelscheid","sn":"Neunkirchen-Seelscheid"},"2248":{"ln":"Uckerath","sn":"Uckerath"},"2251":{"ln":"Euskirchen","sn":"Euskirchen"},"2252":{"ln":"ZÃ¼lpich","sn":"ZÃ¼lpich"},"2253":{"ln":"Bad MÃ¼nstereifel","sn":"Bad MÃ¼nstereifel"},"2254":{"ln":"Weilerswist","sn":"Weilerswist"},"2255":{"ln":"Euskirchen-Flamersheim","sn":"Euskirchen-Flamersheim"},"2256":{"ln":"Mechernich-Satzvey","sn":"Mechernich-Satzvey"},"2257":{"ln":"Reckerscheid","sn":"Reckerscheid"},"2261":{"ln":"Gummersbach","sn":"Gummersbach"},"2262":{"ln":"Wiehl","sn":"Wiehl"},"2263":{"ln":"Engelskirchen","sn":"Engelskirchen"},"2264":{"ln":"Marienheide","sn":"Marienheide"},"2265":{"ln":"Eckenhagen","sn":"Eckenhagen"},"2266":{"ln":"Lindlar","sn":"Lindlar"},"2267":{"ln":"WipperfÃ¼rth","sn":"WipperfÃ¼rth"},"2268":{"ln":"KÃ¼rten","sn":"KÃ¼rten"},"2269":{"ln":"RÃ¶nsahl","sn":"RÃ¶nsahl"},"2271":{"ln":"Bergheim","sn":"Bergheim"},"2272":{"ln":"Bedburg","sn":"Bedburg"},"2273":{"ln":"Kerpen-Horrem","sn":"Kerpen-Horrem"},"2274":{"ln":"Elsdorf (Rheinland)","sn":"Elsdorf"},"2275":{"ln":"Kerpen-Buir","sn":"Kerpen-Buir"},"2291":{"ln":"WaldbrÃ¶l","sn":"WaldbrÃ¶l"},"2292":{"ln":"Windeck (Sieg)","sn":"Windeck"},"2293":{"ln":"NÃ¼mbrecht","sn":"NÃ¼mbrecht"},"2294":{"ln":"Morsbach (Sieg)","sn":"Morsbach"},"2295":{"ln":"Ruppichteroth","sn":"Ruppichteroth"},"2296":{"ln":"BrÃ¼chermÃ¼hle","sn":"BrÃ¼chermÃ¼hle"},"2297":{"ln":"WildbergerhÃ¼tte","sn":"WildbergerhÃ¼tte"},"2301":{"ln":"Holzwickede","sn":"Holzwickede"},"2302":{"ln":"Witten","sn":"Witten"},"2303":{"ln":"Unna","sn":"Unna"},"2304":{"ln":"Schwerte","sn":"Schwerte"},"2305":{"ln":"Castrop-Rauxel","sn":"Castrop-Rauxel"},"2306":{"ln":"LÃ¼nen","sn":"LÃ¼nen"},"2307":{"ln":"Kamen/Bergkamen","sn":"Kamen"},"2308":{"ln":"Unna-Hemmerde","sn":"Unna-Hemmerde"},"2309":{"ln":"Waltrop","sn":"Waltrop"},"2323":{"ln":"Herne","sn":"Herne"},"2324":{"ln":"Hattingen","sn":"Hattingen"},"2325":{"ln":"Herne-Wanne-Eickel","sn":"Herne-Wanne-Eickel"},"2327":{"ln":"Bochum-Wattenscheid","sn":"Bochum-Wattenscheid"},"2330":{"ln":"Herdecke","sn":"Herdecke"},"2331":{"ln":"Hagen","sn":"Hagen"},"2332":{"ln":"Gevelsberg","sn":"Gevelsberg"},"2333":{"ln":"Ennepetal","sn":"Ennepetal"},"2334":{"ln":"Hagen-Hohenlimburg","sn":"Hagen-Hohenlimburg"},"2335":{"ln":"Wetter","sn":"Wetter"},"2336":{"ln":"Schwelm","sn":"Schwelm"},"2337":{"ln":"Hagen-Dahl","sn":"Hagen-Dahl"},"2338":{"ln":"Breckerfeld","sn":"Breckerfeld"},"2339":{"ln":"SprockhÃ¶vel","sn":"SprockhÃ¶vel"},"2351":{"ln":"LÃ¼denscheid","sn":"LÃ¼denscheid"},"2352":{"ln":"Altena","sn":"Altena"},"2353":{"ln":"Halver","sn":"Halver"},"2354":{"ln":"Meinerzhagen","sn":"Meinerzhagen"},"2355":{"ln":"SchalksmÃ¼hle","sn":"SchalksmÃ¼hle"},"2357":{"ln":"Herscheid","sn":"Herscheid"},"2358":{"ln":"Valbert","sn":"Valbert"},"2359":{"ln":"Kierspe","sn":"Kierspe"},"2360":{"ln":"Lippramsdorf","sn":"Lippramsdorf"},"2361":{"ln":"Recklinghausen","sn":"Recklinghausen"},"2362":{"ln":"Dorsten","sn":"Dorsten"},"2363":{"ln":"Datteln","sn":"Datteln"},"2364":{"ln":"Haltern","sn":"Haltern"},"2365":{"ln":"Marl","sn":"Marl"},"2366":{"ln":"Herten/Rhade","sn":"Herten"},"2367":{"ln":"Castrop-Rauxel-Henrichenburg","sn":"Castrop-Rauxel-Henrichenburg"},"2368":{"ln":"Oer-Erkenschwick","sn":"Oer-Erkenschwick"},"2369":{"ln":"Dorsten-Wulfen/Dorsten-Lembeck","sn":"Dorsten-Wulfen"},"2371":{"ln":"Iserlohn","sn":"Iserlohn"},"2372":{"ln":"Hemer","sn":"Hemer"},"2373":{"ln":"Menden/FrÃ¶ndenberg","sn":"Menden"},"2374":{"ln":"Iserlohn-Letmathe","sn":"Iserlohn-Letmathe"},"2375":{"ln":"Balve","sn":"Balve"},"2377":{"ln":"Wickede (Ruhr)","sn":"Wickede"},"2378":{"ln":"FrÃ¶ndenberg-Langschede","sn":"FrÃ¶ndenberg-Langschede"},"2379":{"ln":"Menden-Asbeck","sn":"Menden-Asbeck"},"2381":{"ln":"Hamm","sn":"Hamm"},"2382":{"ln":"Ahlen (Westf.)","sn":"Ahlen"},"2383":{"ln":"BÃ¶nen","sn":"BÃ¶nen"},"2384":{"ln":"Welver","sn":"Welver"},"2385":{"ln":"Hamm-Rhynern","sn":"Hamm-Rhynern"},"2387":{"ln":"Walstedde","sn":"Walstedde"},"2388":{"ln":"Hamm-Uentrop","sn":"Hamm-Uentrop"},"2389":{"ln":"Werne","sn":"Werne"},"2391":{"ln":"Plettenberg","sn":"Plettenberg"},"2392":{"ln":"Werdohl/Neuenrade","sn":"Werdohl"},"2393":{"ln":"Allendorf","sn":"Allendorf"},"2394":{"ln":"Affeln","sn":"Affeln"},"2395":{"ln":"RÃ¶nkhausen","sn":"RÃ¶nkhausen"},"2401":{"ln":"Baesweiler","sn":"Baesweiler"},"2402":{"ln":"Stolberg (Rheinland)","sn":"Stolberg"},"2403":{"ln":"Eschweiler","sn":"Eschweiler"},"2404":{"ln":"Alsdorf","sn":"Alsdorf"},"2405":{"ln":"WÃ¼rselen","sn":"WÃ¼rselen"},"2406":{"ln":"Herzogenrath","sn":"Herzogenrath"},"2407":{"ln":"Herzogenrath-Kohlscheid","sn":"Herzogenrath-Kohlscheid"},"2408":{"ln":"Aachen-KornelimÃ¼nster","sn":"Aachen-KornelimÃ¼nster"},"2409":{"ln":"Gressenich","sn":"Gressenich"},"2421":{"ln":"DÃ¼ren","sn":"DÃ¼ren"},"2422":{"ln":"Kreuzau","sn":"Kreuzau"},"2423":{"ln":"Langerwehe","sn":"Langerwehe"},"2424":{"ln":"VettweiÃ","sn":"VettweiÃ"},"2425":{"ln":"Embken","sn":"Embken"},"2426":{"ln":"NÃ¶rvenich","sn":"NÃ¶rvenich"},"2427":{"ln":"Nideggen","sn":"Nideggen"},"2428":{"ln":"Niederzier","sn":"Niederzier"},"2429":{"ln":"HÃ¼rtgenwald","sn":"HÃ¼rtgenwald"},"2431":{"ln":"Erkelenz","sn":"Erkelenz"},"2432":{"ln":"Wassenberg","sn":"Wassenberg"},"2433":{"ln":"HÃ¼ckelhoven","sn":"HÃ¼ckelhoven"},"2434":{"ln":"Wegberg","sn":"Wegberg"},"2435":{"ln":"LÃ¶venich","sn":"LÃ¶venich"},"2436":{"ln":"Roedgen","sn":"Roedgen"},"2440":{"ln":"Nettersheim-Tondorf","sn":"Nettersheim-Tondorf"},"2441":{"ln":"Kall","sn":"Kall"},"2443":{"ln":"Mechernich","sn":"Mechernich"},"2444":{"ln":"GemÃ¼nd","sn":"GemÃ¼nd"},"2445":{"ln":"Schleiden","sn":"Schleiden"},"2446":{"ln":"Heimbach (Eifel)","sn":"Heimbach"},"2447":{"ln":"Dahlem","sn":"Dahlem"},"2448":{"ln":"Rescheid","sn":"Rescheid"},"2449":{"ln":"Blankenheim","sn":"Blankenheim"},"2451":{"ln":"Geilenkirchen/Ãbach-Palenberg","sn":"Geilenkirchen"},"2452":{"ln":"Heinsberg","sn":"Heinsberg"},"2453":{"ln":"Randerath","sn":"Randerath"},"2454":{"ln":"Gangelt","sn":"Gangelt"},"2455":{"ln":"Waldfeucht","sn":"Waldfeucht"},"2456":{"ln":"Selfkant","sn":"Selfkant"},"2461":{"ln":"JÃ¼lich","sn":"JÃ¼lich"},"2462":{"ln":"Linnich","sn":"Linnich"},"2463":{"ln":"Titz","sn":"Titz"},"2464":{"ln":"Aldenhoven","sn":"Aldenhoven"},"2465":{"ln":"Inden","sn":"Inden"},"2471":{"ln":"Roetgen","sn":"Roetgen"},"2472":{"ln":"Monschau","sn":"Monschau"},"2473":{"ln":"Simmerath","sn":"Simmerath"},"2474":{"ln":"Schmidt","sn":"Schmidt"},"2482":{"ln":"Hellenthal","sn":"Hellenthal"},"2484":{"ln":"Eiserfey","sn":"Eiserfey"},"2485":{"ln":"Dreiborn","sn":"Dreiborn"},"2486":{"ln":"Nettersheim","sn":"Nettersheim"},"2501":{"ln":"MÃ¼nster-Hiltrup, MÃ¼nster-AmelsbÃ¼ren","sn":"MÃ¼nster-Hiltrup"},"2502":{"ln":"Nottuln","sn":"Nottuln"},"2504":{"ln":"Telgte","sn":"Telgte"},"2505":{"ln":"Altenberge (Westf.)","sn":"Altenberge"},"2506":{"ln":"MÃ¼nster-Wolbeck","sn":"MÃ¼nster-Wolbeck"},"2507":{"ln":"Havixbeck","sn":"Havixbeck"},"2508":{"ln":"Drensteinfurt","sn":"Drensteinfurt"},"2509":{"ln":"Nottuln-AppelhÃ¼lsen","sn":"Nottuln-AppelhÃ¼lsen"},"2518":{"ln":"Grefrath/Nettetal","sn":"Grefrath"},"2520":{"ln":"Wadersloh-Diestedde","sn":"Wadersloh-Diestedde"},"2521":{"ln":"Beckum","sn":"Beckum"},"2522":{"ln":"Oelde","sn":"Oelde"},"2523":{"ln":"Wadersloh","sn":"Wadersloh"},"2524":{"ln":"Ennigerloh","sn":"Ennigerloh"},"2525":{"ln":"Neubeckum","sn":"Neubeckum"},"2526":{"ln":"Sendenhorst","sn":"Sendenhorst"},"2527":{"ln":"Lippetal","sn":"Lippetal"},"2528":{"ln":"Enniger","sn":"Enniger"},"2529":{"ln":"Stromberg, Oelde","sn":"Stromberg"},"2532":{"ln":"Ostbevern","sn":"Ostbevern"},"2533":{"ln":"MÃ¼nster-Nienberge","sn":"MÃ¼nster-Nienberge"},"2534":{"ln":"MÃ¼nster-Roxel","sn":"MÃ¼nster-Roxel"},"2535":{"ln":"Albersloh","sn":"Albersloh"},"2536":{"ln":"MÃ¼nster-Albachten","sn":"MÃ¼nster-Albachten"},"2538":{"ln":"Drensteinfurt-Rinkerode","sn":"Drensteinfurt-Rinkerode"},"2541":{"ln":"Coesfeld","sn":"Coesfeld"},"2542":{"ln":"Gescher","sn":"Gescher"},"2543":{"ln":"Billerbeck","sn":"Billerbeck"},"2545":{"ln":"Rosendahl","sn":"Rosendahl"},"2546":{"ln":"Lette, Coesfeld","sn":"Lette"},"2547":{"ln":"Osterwick","sn":"Osterwick"},"2548":{"ln":"Rorup","sn":"Rorup"},"2551":{"ln":"Steinfurt-Burgsteinfurt","sn":"Steinfurt-Burgsteinfurt"},"2552":{"ln":"Steinfurt-Borghorst","sn":"Steinfurt-Borghorst"},"2553":{"ln":"Ochtrup","sn":"Ochtrup"},"2554":{"ln":"Laer (ST)","sn":"Laer"},"2555":{"ln":"SchÃ¶ppingen","sn":"SchÃ¶ppingen"},"2556":{"ln":"Metelen","sn":"Metelen"},"2557":{"ln":"Wettringen (ST)","sn":"Wettringen"},"2558":{"ln":"Horstmar","sn":"Horstmar"},"2561":{"ln":"Ahaus","sn":"Ahaus"},"2562":{"ln":"Gronau (Westf.)","sn":"Gronau"},"2563":{"ln":"Stadtlohn","sn":"Stadtlohn"},"2564":{"ln":"Vreden","sn":"Vreden"},"2565":{"ln":"Epe","sn":"Epe"},"2566":{"ln":"Legden","sn":"Legden"},"2567":{"ln":"Ahaus-AlstÃ¤tte","sn":"Ahaus-AlstÃ¤tte"},"2568":{"ln":"Heek","sn":"Heek"},"2571":{"ln":"Greven","sn":"Greven"},"2572":{"ln":"Emsdetten","sn":"Emsdetten"},"2573":{"ln":"Nordwalde","sn":"Nordwalde"},"2574":{"ln":"Saerbeck","sn":"Saerbeck"},"2575":{"ln":"Reckenfeld","sn":"Reckenfeld"},"2581":{"ln":"Warendorf","sn":"Warendorf"},"2582":{"ln":"Everswinkel","sn":"Everswinkel"},"2583":{"ln":"Sassenberg","sn":"Sassenberg"},"2584":{"ln":"Milte","sn":"Milte"},"2585":{"ln":"Hoetmar","sn":"Hoetmar"},"2586":{"ln":"Beelen","sn":"Beelen"},"2587":{"ln":"Westkirchen (Westf)","sn":"Westkirchen"},"2588":{"ln":"Greffen","sn":"Greffen"},"2590":{"ln":"DÃ¼lmen-Buldern","sn":"DÃ¼lmen-Buldern"},"2591":{"ln":"LÃ¼dinghausen","sn":"LÃ¼dinghausen"},"2592":{"ln":"Selm","sn":"Selm"},"2593":{"ln":"Ascheberg","sn":"Ascheberg"},"2594":{"ln":"DÃ¼lmen","sn":"DÃ¼lmen"},"2595":{"ln":"Olfen","sn":"Olfen"},"2596":{"ln":"Nordkirchen","sn":"Nordkirchen"},"2597":{"ln":"Senden","sn":"Senden"},"2598":{"ln":"Ottmarsbocholt","sn":"Ottmarsbocholt"},"2599":{"ln":"Herbern","sn":"Herbern"},"2601":{"ln":"Nauort","sn":"Nauort"},"2602":{"ln":"Montabaur","sn":"Montabaur"},"2603":{"ln":"Bad Ems","sn":"Bad Ems"},"2604":{"ln":"Nassau (Lahn)","sn":"Nassau"},"2605":{"ln":"LÃ¶f","sn":"LÃ¶f"},"2606":{"ln":"Winningen","sn":"Winningen"},"2607":{"ln":"Kobern-Gondorf","sn":"Kobern-Gondorf"},"2608":{"ln":"Welschneudorf","sn":"Welschneudorf"},"2620":{"ln":"NeuhÃ¤usel (WW)","sn":"NeuhÃ¤usel"},"2621":{"ln":"Lahnstein","sn":"Lahnstein"},"2622":{"ln":"Bendorf","sn":"Bendorf"},"2623":{"ln":"Ransbach-Baumbach","sn":"Ransbach-Baumbach"},"2624":{"ln":"HÃ¶hr-Grenzhausen","sn":"HÃ¶hr-Grenzhausen"},"2625":{"ln":"Ochtendung","sn":"Ochtendung"},"2626":{"ln":"Selters (Westerwald)","sn":"Selters"},"2627":{"ln":"Braubach","sn":"Braubach"},"2628":{"ln":"Rhens","sn":"Rhens"},"2630":{"ln":"MÃ¼lheim-KÃ¤rlich","sn":"MÃ¼lheim-KÃ¤rlich"},"2631":{"ln":"Neuwied","sn":"Neuwied"},"2632":{"ln":"Andernach","sn":"Andernach"},"2633":{"ln":"Brohl-LÃ¼tzing","sn":"Brohl-LÃ¼tzing"},"2634":{"ln":"Rengsdorf","sn":"Rengsdorf"},"2635":{"ln":"Rheinbrohl","sn":"Rheinbrohl"},"2636":{"ln":"Burgbrohl","sn":"Burgbrohl"},"2637":{"ln":"Weissenthurm","sn":"Weissenthurm"},"2638":{"ln":"Waldbreitbach","sn":"Waldbreitbach"},"2639":{"ln":"Anhausen (Neuwied)","sn":"Anhausen"},"2641":{"ln":"Bad Neuenahr-Ahrweiler","sn":"Bad Neuenahr-Ahrweiler"},"2642":{"ln":"Remagen","sn":"Remagen"},"2643":{"ln":"Altenahr","sn":"Altenahr"},"2644":{"ln":"Linz am Rhein","sn":"Linz"},"2645":{"ln":"Vettelschoss","sn":"Vettelschoss"},"2646":{"ln":"KÃ¶nigsfeld (Eifel)","sn":"KÃ¶nigsfeld"},"2647":{"ln":"Kesseling","sn":"Kesseling"},"2651":{"ln":"Mayen","sn":"Mayen"},"2652":{"ln":"Mendig","sn":"Mendig"},"2653":{"ln":"Kaisersesch","sn":"Kaisersesch"},"2654":{"ln":"Polch","sn":"Polch"},"2655":{"ln":"Weibern","sn":"Weibern"},"2656":{"ln":"Virneburg","sn":"Virneburg"},"2657":{"ln":"Uersfeld","sn":"Uersfeld"},"2661":{"ln":"Bad Marienberg (WW)","sn":"Bad Marienberg"},"2662":{"ln":"Hachenburg","sn":"Hachenburg"},"2663":{"ln":"Westerburg","sn":"Westerburg"},"2664":{"ln":"Rennerod","sn":"Rennerod"},"2666":{"ln":"Freilingen (WW)","sn":"Freilingen"},"2667":{"ln":"Stein-Neukirch","sn":"Stein-Neukirch"},"2671":{"ln":"Cochem","sn":"Cochem"},"2672":{"ln":"Treis-Karden","sn":"Treis-Karden"},"2673":{"ln":"Poltersdorf","sn":"Poltersdorf"},"2674":{"ln":"Bad Bertrich","sn":"Bad Bertrich"},"2675":{"ln":"Ediger-Eller","sn":"Ediger-Eller"},"2676":{"ln":"Ulmen","sn":"Ulmen"},"2677":{"ln":"Lutzerath","sn":"Lutzerath"},"2678":{"ln":"Buechel (COC)","sn":"Buechel"},"2680":{"ln":"MÃ¼ndersbach","sn":"MÃ¼ndersbach"},"2681":{"ln":"Altenkirchen (Westerwald)","sn":"Altenkirchen"},"2682":{"ln":"Hamm (Sieg)","sn":"Hamm"},"2683":{"ln":"Asbach (Westerwald)","sn":"Asbach"},"2684":{"ln":"Puderbach (WW)","sn":"Puderbach"},"2685":{"ln":"Flammersfeld","sn":"Flammersfeld"},"2686":{"ln":"Weyerbusch","sn":"Weyerbusch"},"2687":{"ln":"Horhausen (Westerwald)","sn":"Horhausen"},"2688":{"ln":"Kroppach","sn":"Kroppach"},"2689":{"ln":"Dierdorf","sn":"Dierdorf"},"2691":{"ln":"Adenau","sn":"Adenau"},"2692":{"ln":"Kelberg","sn":"Kelberg"},"2693":{"ln":"Antweiler","sn":"Antweiler"},"2694":{"ln":"Wershofen","sn":"Wershofen"},"2695":{"ln":"Insul","sn":"Insul"},"2696":{"ln":"Nohn (Eifel)","sn":"Nohn"},"2697":{"ln":"AhrhÃ¼tte (Blankenheim)","sn":"AhrhÃ¼tte"},"2721":{"ln":"Lennestadt","sn":"Lennestadt"},"2722":{"ln":"Attendorn","sn":"Attendorn"},"2723":{"ln":"Kirchhundem","sn":"Kirchhundem"},"2724":{"ln":"Serkenrode","sn":"Serkenrode"},"2725":{"ln":"Oedingen","sn":"Oedingen"},"2732":{"ln":"Kreuztal","sn":"Kreuztal"},"2733":{"ln":"Hilchenbach","sn":"Hilchenbach"},"2734":{"ln":"Freudenberg","sn":"Freudenberg"},"2735":{"ln":"Neunkirchen","sn":"Neunkirchen"},"2736":{"ln":"Burbach","sn":"Burbach"},"2737":{"ln":"Deuz","sn":"Deuz"},"2738":{"ln":"Netphen","sn":"Netphen"},"2739":{"ln":"Wilnsdorf","sn":"Wilnsdorf"},"2741":{"ln":"Betzdorf","sn":"Betzdorf"},"2742":{"ln":"Wissen","sn":"Wissen"},"2743":{"ln":"Daaden","sn":"Daaden"},"2744":{"ln":"Herdorf","sn":"Herdorf"},"2745":{"ln":"Brachbach","sn":"Brachbach"},"2747":{"ln":"Molzhain","sn":"Molzhain"},"2750":{"ln":"Diedenshausen","sn":"Diedenshausen"},"2751":{"ln":"Bad Berleburg","sn":"Bad Berleburg"},"2752":{"ln":"Bad Laasphe","sn":"Bad Laasphe"},"2753":{"ln":"ErndtebrÃ¼ck","sn":"ErndtebrÃ¼ck"},"2754":{"ln":"Feudingen","sn":"Feudingen"},"2755":{"ln":"Schwarzenau","sn":"Schwarzenau"},"2758":{"ln":"Girkhausen","sn":"Girkhausen"},"2759":{"ln":"Aue","sn":"Aue"},"2761":{"ln":"Olpe","sn":"Olpe"},"2762":{"ln":"Wenden","sn":"Wenden"},"2763":{"ln":"Bleche","sn":"Bleche"},"2764":{"ln":"Welschen Ennest","sn":"Welschen"},"2770":{"ln":"Eschenburg","sn":"Eschenburg"},"2771":{"ln":"Dillenburg","sn":"Dillenburg"},"2772":{"ln":"Herborn","sn":"Herborn"},"2773":{"ln":"Haiger","sn":"Haiger"},"2774":{"ln":"DietzhÃ¶lztal","sn":"DietzhÃ¶lztal"},"2775":{"ln":"Driedorf","sn":"Driedorf"},"2776":{"ln":"Bad Endbach-Hartenrod","sn":"Bad Endbach-Hartenrod"},"2777":{"ln":"Breitscheid (Hess)","sn":"Breitscheid"},"2778":{"ln":"Siegbach","sn":"Siegbach"},"2779":{"ln":"Greifenstein-Beilstein","sn":"Greifenstein-Beilstein"},"2801":{"ln":"Xanten","sn":"Xanten"},"2802":{"ln":"Alpen","sn":"Alpen"},"2803":{"ln":"BÃ¼derich (Wesel)","sn":"BÃ¼derich"},"2804":{"ln":"Marienbaum","sn":"Marienbaum"},"2821":{"ln":"Kleve","sn":"Kleve"},"2822":{"ln":"Emmerich am Rhein","sn":"Emmerich"},"2823":{"ln":"Goch","sn":"Goch"},"2824":{"ln":"Kalkar","sn":"Kalkar"},"2825":{"ln":"Uedem","sn":"Uedem"},"2826":{"ln":"Kranenburg","sn":"Kranenburg"},"2827":{"ln":"Hassum","sn":"Hassum"},"2828":{"ln":"Elten (zu Emmerich am Rhein)","sn":"Elten"},"2831":{"ln":"Geldern","sn":"Geldern"},"2832":{"ln":"Kevelaer","sn":"Kevelaer"},"2833":{"ln":"Kerken","sn":"Kerken"},"2834":{"ln":"Straelen","sn":"Straelen"},"2835":{"ln":"Issum","sn":"Issum"},"2836":{"ln":"Wachtendonk","sn":"Wachtendonk"},"2837":{"ln":"Weeze","sn":"Weeze"},"2838":{"ln":"Sonsbeck","sn":"Sonsbeck"},"2839":{"ln":"Herongen","sn":"Herongen"},"2841":{"ln":"Moers","sn":"Moers"},"2842":{"ln":"Kamp-Lintfort","sn":"Kamp-Lintfort"},"2843":{"ln":"Rheinberg","sn":"Rheinberg"},"2844":{"ln":"Orsoy","sn":"Orsoy"},"2845":{"ln":"Neukirchen-Vluyn","sn":"Neukirchen-Vluyn"},"2850":{"ln":"Haldern","sn":"Haldern"},"2851":{"ln":"Rees","sn":"Rees"},"2852":{"ln":"Hamminkeln","sn":"Hamminkeln"},"2853":{"ln":"Schermbeck","sn":"Schermbeck"},"2855":{"ln":"Voerde (Rheinland)","sn":"Voerde"},"2856":{"ln":"BrÃ¼nen","sn":"BrÃ¼nen"},"2857":{"ln":"Mehr","sn":"Mehr"},"2858":{"ln":"HÃ¼nxe","sn":"HÃ¼nxe"},"2859":{"ln":"Bislich","sn":"Bislich"},"2861":{"ln":"Borken","sn":"Borken"},"2862":{"ln":"SÃ¼dlohn","sn":"SÃ¼dlohn"},"2863":{"ln":"Velen","sn":"Velen"},"2864":{"ln":"Reken","sn":"Reken"},"2865":{"ln":"Raesfeld","sn":"Raesfeld"},"2866":{"ln":"Dorsten","sn":"Dorsten"},"2867":{"ln":"Heiden (BOR)","sn":"Heiden"},"2871":{"ln":"Bocholt","sn":"Bocholt"},"2872":{"ln":"Rhede (Westf)","sn":"Rhede"},"2873":{"ln":"Werth","sn":"Werth"},"2874":{"ln":"Isselburg/Bocholt â Suderwick","sn":"Isselburg"},"2902":{"ln":"Warstein","sn":"Warstein"},"2903":{"ln":"Freienohl","sn":"Freienohl"},"2904":{"ln":"Bestwig","sn":"Bestwig"},"2905":{"ln":"Ramsbeck","sn":"Ramsbeck"},"2921":{"ln":"Soest","sn":"Soest"},"2922":{"ln":"Werl","sn":"Werl"},"2923":{"ln":"Herzfeld (Lippetal)","sn":"Herzfeld"},"2924":{"ln":"MÃ¶hnesee","sn":"MÃ¶hnesee"},"2925":{"ln":"Allagen","sn":"Allagen"},"2927":{"ln":"Bad Sassendorf/Lippborg","sn":"Bad Sassendorf"},"2928":{"ln":"OstÃ¶nnen","sn":"OstÃ¶nnen"},"2931":{"ln":"Arnsberg","sn":"Arnsberg"},"2932":{"ln":"Neheim-HÃ¼sten","sn":"Neheim-HÃ¼sten"},"2933":{"ln":"Sundern","sn":"Sundern"},"2934":{"ln":"Althellefeld","sn":"Althellefeld"},"2935":{"ln":"Hachen","sn":"Hachen"},"2937":{"ln":"Oeventrop","sn":"Oeventrop"},"2938":{"ln":"Ense","sn":"Ense"},"2941":{"ln":"Lippstadt","sn":"Lippstadt"},"2942":{"ln":"Geseke","sn":"Geseke"},"2943":{"ln":"Erwitte","sn":"Erwitte"},"2944":{"ln":"Rietberg-Mastholte","sn":"Rietberg-Mastholte"},"2945":{"ln":"Benninghausen","sn":"Benninghausen"},"2947":{"ln":"AnrÃ¶chte","sn":"AnrÃ¶chte"},"2948":{"ln":"Rebbeke","sn":"Rebbeke"},"2951":{"ln":"BÃ¼ren","sn":"BÃ¼ren"},"2952":{"ln":"RÃ¼then","sn":"RÃ¼then"},"2953":{"ln":"WÃ¼nnenberg","sn":"WÃ¼nnenberg"},"2954":{"ln":"Oestereiden","sn":"Oestereiden"},"2955":{"ln":"Wewelsburg","sn":"Wewelsburg"},"2957":{"ln":"Haaren","sn":"Haaren"},"2958":{"ln":"Harth","sn":"Harth"},"2961":{"ln":"Brilon","sn":"Brilon"},"2962":{"ln":"Olsberg","sn":"Olsberg"},"2963":{"ln":"Messinghausen","sn":"Messinghausen"},"2964":{"ln":"Alme (Brilon)","sn":"Alme"},"2970":{"ln":"Cobbenrode","sn":"Cobbenrode"},"2971":{"ln":"Dorlar","sn":"Dorlar"},"2972":{"ln":"Schmallenberg","sn":"Schmallenberg"},"2973":{"ln":"Eslohe (Sauerland)","sn":"Eslohe"},"2974":{"ln":"Bad Fredeburg","sn":"Bad Fredeburg"},"2975":{"ln":"Oberkirchen","sn":"Oberkirchen"},"2977":{"ln":"BÃ¶defeld","sn":"BÃ¶defeld"},"2978":{"ln":"Reiste","sn":"Reiste"},"2979":{"ln":"Kirchrarbach","sn":"Kirchrarbach"},"2981":{"ln":"Winterberg (Sauerld.)","sn":"Winterberg"},"2982":{"ln":"Medebach","sn":"Medebach"},"2983":{"ln":"Siedlinghausen","sn":"Siedlinghausen"},"2984":{"ln":"Hallenberg","sn":"Hallenberg"},"2985":{"ln":"Niedersfeld","sn":"Niedersfeld"},"2991":{"ln":"Bredelar","sn":"Bredelar"},"2992":{"ln":"Marsberg","sn":"Marsberg"},"2993":{"ln":"Canstein","sn":"Canstein"},"2994":{"ln":"Westheim","sn":"Westheim"},"3301":{"ln":"Oranienburg","sn":"Oranienburg"},"3302":{"ln":"Hennigsdorf","sn":"Hennigsdorf"},"3303":{"ln":"Birkenwerder","sn":"Birkenwerder"},"3304":{"ln":"Velten","sn":"Velten"},"3306":{"ln":"Gransee","sn":"Gransee"},"3307":{"ln":"Zehdenick","sn":"Zehdenick"},"3321":{"ln":"Nauen","sn":"Nauen"},"3322":{"ln":"Falkensee","sn":"Falkensee"},"3327":{"ln":"Werder (Havel)","sn":"Werder"},"3328":{"ln":"Teltow","sn":"Teltow"},"3329":{"ln":"Stahnsdorf","sn":"Stahnsdorf"},"3331":{"ln":"AngermÃ¼nde","sn":"AngermÃ¼nde"},"3332":{"ln":"Schwedt","sn":"Schwedt"},"3334":{"ln":"Eberswalde","sn":"Eberswalde"},"3335":{"ln":"Finowfurt","sn":"Finowfurt"},"3337":{"ln":"Biesenthal","sn":"Biesenthal"},"3338":{"ln":"Bernau","sn":"Bernau"},"3341":{"ln":"Strausberg","sn":"Strausberg"},"3342":{"ln":"Neuenhagen","sn":"Neuenhagen"},"3344":{"ln":"Bad Freienwalde","sn":"Bad Freienwalde"},"3346":{"ln":"Seelow","sn":"Seelow"},"3361":{"ln":"FÃ¼rstenwalde/Spree","sn":"FÃ¼rstenwalde"},"3362":{"ln":"Erkner","sn":"Erkner"},"3364":{"ln":"EisenhÃ¼ttenstadt","sn":"EisenhÃ¼ttenstadt"},"3366":{"ln":"Beeskow","sn":"Beeskow"},"3371":{"ln":"Luckenwalde","sn":"Luckenwalde"},"3372":{"ln":"JÃ¼terbog","sn":"JÃ¼terbog"},"3375":{"ln":"KÃ¶nigs Wusterhausen","sn":"KÃ¶nigs"},"3377":{"ln":"Zossen","sn":"Zossen"},"3378":{"ln":"Ludwigsfelde","sn":"Ludwigsfelde"},"3379":{"ln":"Mahlow","sn":"Mahlow"},"3381":{"ln":"Brandenburg an der Havel","sn":"Brandenburg"},"3382":{"ln":"Lehnin","sn":"Lehnin"},"3385":{"ln":"Rathenow","sn":"Rathenow"},"3386":{"ln":"Premnitz","sn":"Premnitz"},"3391":{"ln":"Neuruppin","sn":"Neuruppin"},"3394":{"ln":"Wittstock/Dosse","sn":"Wittstock"},"3395":{"ln":"Pritzwalk","sn":"Pritzwalk"},"3421":{"ln":"Torgau","sn":"Torgau"},"3423":{"ln":"Eilenburg","sn":"Eilenburg"},"3425":{"ln":"Wurzen","sn":"Wurzen"},"3431":{"ln":"DÃ¶beln","sn":"DÃ¶beln"},"3433":{"ln":"Borna","sn":"Borna"},"3435":{"ln":"Oschatz","sn":"Oschatz"},"3437":{"ln":"Grimma","sn":"Grimma"},"3441":{"ln":"Zeitz","sn":"Zeitz"},"3443":{"ln":"WeiÃenfels","sn":"WeiÃenfels"},"3445":{"ln":"Naumburg","sn":"Naumburg"},"3447":{"ln":"Altenburg","sn":"Altenburg"},"3448":{"ln":"Meuselwitz","sn":"Meuselwitz"},"3461":{"ln":"Merseburg","sn":"Merseburg"},"3462":{"ln":"Bad DÃ¼rrenberg","sn":"Bad DÃ¼rrenberg"},"3464":{"ln":"Sangerhausen","sn":"Sangerhausen"},"3466":{"ln":"Artern","sn":"Artern"},"3471":{"ln":"Bernburg","sn":"Bernburg"},"3473":{"ln":"Aschersleben","sn":"Aschersleben"},"3475":{"ln":"Lutherstadt Eisleben","sn":"Lutherstadt"},"3476":{"ln":"Hettstedt","sn":"Hettstedt"},"3491":{"ln":"Lutherstadt Wittenberg","sn":"Lutherstadt"},"3493":{"ln":"Bitterfeld","sn":"Bitterfeld"},"3494":{"ln":"Wolfen","sn":"Wolfen"},"3496":{"ln":"KÃ¶then (Anhalt)","sn":"KÃ¶then"},"3501":{"ln":"Pirna","sn":"Pirna"},"3504":{"ln":"Dippoldiswalde","sn":"Dippoldiswalde"},"3521":{"ln":"MeiÃen","sn":"MeiÃen"},"3522":{"ln":"GroÃenhain","sn":"GroÃenhain"},"3523":{"ln":"Coswig","sn":"Coswig"},"3525":{"ln":"Riesa","sn":"Riesa"},"3528":{"ln":"Radeberg","sn":"Radeberg"},"3529":{"ln":"Heidenau","sn":"Heidenau"},"3531":{"ln":"Finsterwalde","sn":"Finsterwalde"},"3533":{"ln":"Elsterwerda","sn":"Elsterwerda"},"3535":{"ln":"Herzberg (Elster)","sn":"Herzberg"},"3537":{"ln":"Jessen (Elster)","sn":"Jessen"},"3541":{"ln":"Calau","sn":"Calau"},"3542":{"ln":"LÃ¼bbenau","sn":"LÃ¼bbenau"},"3544":{"ln":"Luckau","sn":"Luckau"},"3546":{"ln":"LÃ¼bben (Spreewald)","sn":"LÃ¼bben"},"3561":{"ln":"Guben","sn":"Guben"},"3562":{"ln":"Forst (Lausitz)","sn":"Forst"},"3563":{"ln":"Spremberg","sn":"Spremberg"},"3564":{"ln":"Schwarze Pumpe","sn":"Schwarze"},"3571":{"ln":"Hoyerswerda","sn":"Hoyerswerda"},"3573":{"ln":"Senftenberg","sn":"Senftenberg"},"3574":{"ln":"Lauchhammer","sn":"Lauchhammer"},"3576":{"ln":"WeiÃwasser","sn":"WeiÃwasser"},"3578":{"ln":"Kamenz","sn":"Kamenz"},"3581":{"ln":"GÃ¶rlitz","sn":"GÃ¶rlitz"},"3583":{"ln":"Zittau","sn":"Zittau"},"3585":{"ln":"LÃ¶bau","sn":"LÃ¶bau"},"3586":{"ln":"Ebersbach/Sa., Neugersdorf (Sachsen)","sn":"Ebersbach"},"3588":{"ln":"Niesky","sn":"Niesky"},"3591":{"ln":"Bautzen","sn":"Bautzen"},"3592":{"ln":"Kirschau","sn":"Kirschau"},"3594":{"ln":"Bischofswerda","sn":"Bischofswerda"},"3596":{"ln":"Neustadt(Sachsen)","sn":"Neustadt"},"3601":{"ln":"MÃ¼hlhausen/ThÃ¼r.","sn":"MÃ¼hlhausen"},"3603":{"ln":"Bad Langensalza","sn":"Bad Langensalza"},"3605":{"ln":"Leinefelde","sn":"Leinefelde"},"3606":{"ln":"Heilbad Heiligenstadt","sn":"Heilbad"},"3621":{"ln":"Gotha","sn":"Gotha"},"3622":{"ln":"Waltershausen","sn":"Waltershausen"},"3623":{"ln":"Friedrichroda","sn":"Friedrichroda"},"3624":{"ln":"Ohrdruf","sn":"Ohrdruf"},"3628":{"ln":"Arnstadt","sn":"Arnstadt"},"3629":{"ln":"Stadtilm","sn":"Stadtilm"},"3631":{"ln":"Nordhausen","sn":"Nordhausen"},"3632":{"ln":"Sondershausen","sn":"Sondershausen"},"3634":{"ln":"SÃ¶mmerda","sn":"SÃ¶mmerda"},"3635":{"ln":"KÃ¶lleda","sn":"KÃ¶lleda"},"3636":{"ln":"GreuÃen","sn":"GreuÃen"},"3641":{"ln":"Jena","sn":"Jena"},"3643":{"ln":"Weimar","sn":"Weimar"},"3644":{"ln":"Apolda","sn":"Apolda"},"3647":{"ln":"PÃ¶Ãneck","sn":"PÃ¶Ãneck"},"3661":{"ln":"Greiz","sn":"Greiz"},"3663":{"ln":"Schleiz","sn":"Schleiz"},"3671":{"ln":"Saalfeld/Saale","sn":"Saalfeld"},"3672":{"ln":"Rudolstadt","sn":"Rudolstadt"},"3675":{"ln":"Sonneberg","sn":"Sonneberg"},"3677":{"ln":"Ilmenau","sn":"Ilmenau"},"3679":{"ln":"Neuhaus am Rennweg","sn":"Neuhaus"},"3681":{"ln":"Suhl","sn":"Suhl"},"3682":{"ln":"Zella-Mehlis","sn":"Zella-Mehlis"},"3683":{"ln":"Schmalkalden","sn":"Schmalkalden"},"3685":{"ln":"Hildburghausen","sn":"Hildburghausen"},"3686":{"ln":"Eisfeld","sn":"Eisfeld"},"3691":{"ln":"Eisenach","sn":"Eisenach"},"3693":{"ln":"Meiningen","sn":"Meiningen"},"3695":{"ln":"Bad Salzungen","sn":"Bad Salzungen"},"3721":{"ln":"Meinersdorf","sn":"Meinersdorf"},"3722":{"ln":"Limbach-Oberfrohna","sn":"Limbach-Oberfrohna"},"3723":{"ln":"Hohenstein-Ernstthal","sn":"Hohenstein-Ernstthal"},"3724":{"ln":"BurgstÃ¤dt","sn":"BurgstÃ¤dt"},"3725":{"ln":"Zschopau","sn":"Zschopau"},"3726":{"ln":"FlÃ¶ha","sn":"FlÃ¶ha"},"3727":{"ln":"Mittweida","sn":"Mittweida"},"3731":{"ln":"Freiberg (Sachsen)","sn":"Freiberg"},"3733":{"ln":"Annaberg-Buchholz","sn":"Annaberg-Buchholz"},"3735":{"ln":"Marienberg","sn":"Marienberg"},"3737":{"ln":"Rochlitz","sn":"Rochlitz"},"3741":{"ln":"Plauen","sn":"Plauen"},"3744":{"ln":"Auerbach/Vogtl.","sn":"Auerbach"},"3745":{"ln":"Falkenstein","sn":"Falkenstein"},"3761":{"ln":"Werdau (Sachsen)","sn":"Werdau"},"3762":{"ln":"Crimmitschau","sn":"Crimmitschau"},"3763":{"ln":"Glauchau","sn":"Glauchau"},"3764":{"ln":"Meerane","sn":"Meerane"},"3765":{"ln":"Reichenbach im Vogtland","sn":"Reichenbach"},"3771":{"ln":"Aue (Sachsen)","sn":"Aue"},"3772":{"ln":"Schneeberg (Erzgebirge)","sn":"Schneeberg"},"3773":{"ln":"Johanngeorgenstadt","sn":"Johanngeorgenstadt"},"3774":{"ln":"Schwarzenberg/Erzgeb.","sn":"Schwarzenberg"},"3821":{"ln":"Ribnitz-Damgarten, Ahrenshagen-Daskow","sn":"Ribnitz-Damgarten"},"3831":{"ln":"Stralsund, Kramerhof-GroÃ Kedingshagen, -Klein Kedingshagen, -Parow, -Vogelsang, LÃ¼ssow, Wendorf-GroÃ LÃ¼dershagen, -Neu LÃ¼dershagen, -Teschenhagen, -Zitterpenningshagen","sn":"Stralsund"},"3834":{"ln":"Greifswald","sn":"Greifswald"},"3836":{"ln":"Wolgast","sn":"Wolgast"},"3838":{"ln":"Bergen auf RÃ¼gen, Buschvitz, Parchtitz, Patzig, Ralswiek, Rappin, Sehlen","sn":"Bergen"},"3841":{"ln":"Wismar","sn":"Wismar"},"3843":{"ln":"GÃ¼strow","sn":"GÃ¼strow"},"3844":{"ln":"Schwaan","sn":"Schwaan"},"3847":{"ln":"Sternberg","sn":"Sternberg"},"3860":{"ln":"Raben Steinfeld","sn":"Raben"},"3861":{"ln":"Plate","sn":"Plate"},"3863":{"ln":"Crivitz","sn":"Crivitz"},"3865":{"ln":"Holthusen","sn":"Holthusen"},"3866":{"ln":"Cambs","sn":"Cambs"},"3867":{"ln":"LÃ¼bstorf","sn":"LÃ¼bstorf"},"3868":{"ln":"Rastow","sn":"Rastow"},"3869":{"ln":"DÃ¼mmer","sn":"DÃ¼mmer"},"3871":{"ln":"Parchim","sn":"Parchim"},"3874":{"ln":"Ludwigslust","sn":"Ludwigslust"},"3876":{"ln":"Perleberg","sn":"Perleberg"},"3877":{"ln":"Wittenberge","sn":"Wittenberge"},"3881":{"ln":"GrevesmÃ¼hlen","sn":"GrevesmÃ¼hlen"},"3883":{"ln":"Hagenow","sn":"Hagenow"},"3886":{"ln":"Gadebusch","sn":"Gadebusch"},"3901":{"ln":"Salzwedel","sn":"Salzwedel"},"3921":{"ln":"Burg bei Magdeburg","sn":"Burg bei Magdeburg"},"3923":{"ln":"Zerbst/Anhalt","sn":"Zerbst"},"3925":{"ln":"StaÃfurt","sn":"StaÃfurt"},"3928":{"ln":"SchÃ¶nebeck (Elbe)","sn":"SchÃ¶nebeck"},"3931":{"ln":"Stendal","sn":"Stendal"},"3933":{"ln":"Genthin","sn":"Genthin"},"3935":{"ln":"TangerhÃ¼tte","sn":"TangerhÃ¼tte"},"3937":{"ln":"Osterburg","sn":"Osterburg"},"3941":{"ln":"Halberstadt","sn":"Halberstadt"},"3943":{"ln":"Wernigerode","sn":"Wernigerode"},"3944":{"ln":"Blankenburg (Harz)","sn":"Blankenburg"},"3946":{"ln":"Quedlinburg","sn":"Quedlinburg"},"3947":{"ln":"Thale","sn":"Thale"},"3949":{"ln":"Oschersleben (Bode)","sn":"Oschersleben"},"3961":{"ln":"Altentreptow","sn":"Altentreptow"},"3962":{"ln":"Penzlin","sn":"Penzlin"},"3963":{"ln":"Woldegk","sn":"Woldegk"},"3964":{"ln":"Bredenfelde","sn":"Bredenfelde"},"3965":{"ln":"Burow","sn":"Burow"},"3966":{"ln":"CÃ¶lpin","sn":"CÃ¶lpin"},"3967":{"ln":"Oertzenhof (Mecklenburg-Strelitz)","sn":"Oertzenhof"},"3968":{"ln":"SchÃ¶nbeck","sn":"SchÃ¶nbeck"},"3969":{"ln":"Siedenbollentin","sn":"Siedenbollentin"},"3971":{"ln":"Anklam","sn":"Anklam"},"3973":{"ln":"Pasewalk","sn":"Pasewalk"},"3976":{"ln":"Torgelow","sn":"Torgelow"},"3981":{"ln":"Neustrelitz","sn":"Neustrelitz"},"3984":{"ln":"Prenzlau","sn":"Prenzlau"},"3991":{"ln":"Waren (MÃ¼ritz)","sn":"Waren"},"3994":{"ln":"Malchin","sn":"Malchin"},"3996":{"ln":"Teterow","sn":"Teterow"},"3998":{"ln":"Demmin","sn":"Demmin"},"4101":{"ln":"Pinneberg","sn":"Pinneberg"},"4102":{"ln":"Ahrensburg","sn":"Ahrensburg"},"4103":{"ln":"Wedel","sn":"Wedel"},"4104":{"ln":"AumÃ¼hle","sn":"AumÃ¼hle"},"4105":{"ln":"Seevetal","sn":"Seevetal"},"4106":{"ln":"Quickborn","sn":"Quickborn"},"4107":{"ln":"Siek","sn":"Siek"},"4108":{"ln":"Rosengarten","sn":"Rosengarten"},"4109":{"ln":"Tangstedt","sn":"Tangstedt"},"4120":{"ln":"Ellerhoop","sn":"Ellerhoop"},"4121":{"ln":"Elmshorn","sn":"Elmshorn"},"4122":{"ln":"Tornesch, Uetersen, Moorrege, Heist, Heidgraben, GroÃ Nordende","sn":"Tornesch"},"4123":{"ln":"Barmstedt","sn":"Barmstedt"},"4124":{"ln":"GlÃ¼ckstadt","sn":"GlÃ¼ckstadt"},"4125":{"ln":"SeestermÃ¼he","sn":"SeestermÃ¼he"},"4126":{"ln":"Horst","sn":"Horst"},"4127":{"ln":"Brande-HÃ¶rnerkirchen, Westerhorn","sn":"Brande-HÃ¶rnerkirchen"},"4128":{"ln":"Kollmar","sn":"Kollmar"},"4129":{"ln":"Haseldorf","sn":"Haseldorf"},"4131":{"ln":"LÃ¼neburg","sn":"LÃ¼neburg"},"4132":{"ln":"Amelinghausen","sn":"Amelinghausen"},"4133":{"ln":"Handorf, Wittorf","sn":"Handorf"},"4134":{"ln":"Embsen","sn":"Embsen"},"4135":{"ln":"Kirchgellersen","sn":"Kirchgellersen"},"4136":{"ln":"Scharnebeck","sn":"Scharnebeck"},"4137":{"ln":"Barendorf","sn":"Barendorf"},"4138":{"ln":"Betzendorf","sn":"Betzendorf"},"4139":{"ln":"Hohnstorf","sn":"Hohnstorf"},"4140":{"ln":"Estorf","sn":"Estorf"},"4141":{"ln":"Stade","sn":"Stade"},"4142":{"ln":"Steinkirchen","sn":"Steinkirchen"},"4143":{"ln":"Drochtersen","sn":"Drochtersen"},"4144":{"ln":"Himmelpforten","sn":"Himmelpforten"},"4146":{"ln":"Stade-BÃ¼tzfleth","sn":"Stade-BÃ¼tzfleth"},"4148":{"ln":"Drochtersen-Assel","sn":"Drochtersen-Assel"},"4149":{"ln":"Fredenbeck","sn":"Fredenbeck"},"4151":{"ln":"Schwarzenbek","sn":"Schwarzenbek"},"4152":{"ln":"Geesthacht","sn":"Geesthacht"},"4153":{"ln":"Lauenburg","sn":"Lauenburg"},"4154":{"ln":"Trittau","sn":"Trittau"},"4155":{"ln":"BÃ¼chen","sn":"BÃ¼chen"},"4156":{"ln":"Talkau","sn":"Talkau"},"4158":{"ln":"Roseburg","sn":"Roseburg"},"4159":{"ln":"Basthorst","sn":"Basthorst"},"4161":{"ln":"Buxtehude","sn":"Buxtehude"},"4162":{"ln":"Jork","sn":"Jork"},"4163":{"ln":"Horneburg","sn":"Horneburg"},"4164":{"ln":"Harsefeld","sn":"Harsefeld"},"4165":{"ln":"Hollenstedt","sn":"Hollenstedt"},"4166":{"ln":"Ahlerstedt","sn":"Ahlerstedt"},"4167":{"ln":"Apensen","sn":"Apensen"},"4168":{"ln":"Neu Wulmstorf-Elstorf","sn":"Neu"},"4169":{"ln":"Sauensiek","sn":"Sauensiek"},"4171":{"ln":"Winsen (Luhe)","sn":"Winsen"},"4172":{"ln":"Salzhausen","sn":"Salzhausen"},"4173":{"ln":"Wulfsen","sn":"Wulfsen"},"4174":{"ln":"Stelle (Landkreis Harburg)","sn":"Stelle"},"4175":{"ln":"Egestorf","sn":"Egestorf"},"4176":{"ln":"Marschacht","sn":"Marschacht"},"4177":{"ln":"Drage","sn":"Drage"},"4178":{"ln":"Radbruch","sn":"Radbruch"},"4179":{"ln":"Winsen-TÃ¶nnhausen","sn":"Winsen-TÃ¶nnhausen"},"4180":{"ln":"KÃ¶nigsmoor","sn":"KÃ¶nigsmoor"},"4181":{"ln":"Buchholz in der Nordheide","sn":"Buchholz"},"4182":{"ln":"Tostedt","sn":"Tostedt"},"4183":{"ln":"Jesteburg","sn":"Jesteburg"},"4184":{"ln":"Hanstedt","sn":"Hanstedt"},"4185":{"ln":"Marxen","sn":"Marxen"},"4186":{"ln":"Buchholz-Trelde, Buchholz-SprÃ¶tze","sn":"Buchholz-Trelde"},"4187":{"ln":"Holm-Seppensen","sn":"Holm-Seppensen"},"4188":{"ln":"Welle","sn":"Welle"},"4189":{"ln":"Undeloh","sn":"Undeloh"},"4191":{"ln":"Kaltenkirchen","sn":"Kaltenkirchen"},"4192":{"ln":"Bad Bramstedt","sn":"Bad Bramstedt"},"4193":{"ln":"Henstedt-Ulzburg","sn":"Henstedt-Ulzburg"},"4194":{"ln":"SievershÃ¼tten","sn":"SievershÃ¼tten"},"4195":{"ln":"Hartenholm","sn":"Hartenholm"},"4202":{"ln":"Achim","sn":"Achim"},"4203":{"ln":"Weyhe","sn":"Weyhe"},"4204":{"ln":"Thedinghausen","sn":"Thedinghausen"},"4205":{"ln":"Ottersberg","sn":"Ottersberg"},"4206":{"ln":"Stuhr-Heiligenrode","sn":"Stuhr-Heiligenrode"},"4207":{"ln":"Oyten","sn":"Oyten"},"4208":{"ln":"Grasberg","sn":"Grasberg"},"4209":{"ln":"Schwanewede","sn":"Schwanewede"},"4221":{"ln":"Delmenhorst","sn":"Delmenhorst"},"4222":{"ln":"Ganderkesee","sn":"Ganderkesee"},"4223":{"ln":"Ganderkesee-Bookholzberg","sn":"Ganderkesee-Bookholzberg"},"4224":{"ln":"GroÃ Ippener","sn":"GroÃ Ippener"},"4230":{"ln":"Verden (Aller)-Walle","sn":"Verden"},"4231":{"ln":"Verden (Aller)","sn":"Verden"},"4232":{"ln":"Langwedel (Kreis Verden (Aller))","sn":"Langwedel"},"4233":{"ln":"Blender","sn":"Blender"},"4234":{"ln":"DÃ¶rverden","sn":"DÃ¶rverden"},"4235":{"ln":"Langwedel (Kreis Verden (Aller))","sn":"Langwedel"},"4236":{"ln":"Kirchlinteln","sn":"Kirchlinteln"},"4237":{"ln":"Kirchlinteln-Bendingbostel","sn":"Kirchlinteln-Bendingbostel"},"4238":{"ln":"Kirchlinteln-Neddenaverbergen","sn":"Kirchlinteln-Neddenaverbergen"},"4239":{"ln":"DÃ¶rverden-Westen","sn":"DÃ¶rverden-Westen"},"4241":{"ln":"Bassum","sn":"Bassum"},"4242":{"ln":"Syke","sn":"Syke"},"4243":{"ln":"Twistringen","sn":"Twistringen"},"4244":{"ln":"Harpstedt","sn":"Harpstedt"},"4245":{"ln":"Scholen","sn":"Scholen"},"4246":{"ln":"Drentwede","sn":"Drentwede"},"4247":{"ln":"Sudwalde/Affinghausen","sn":"Sudwalde"},"4249":{"ln":"Nordwohlde","sn":"Nordwohlde"},"4251":{"ln":"Hoya","sn":"Hoya"},"4252":{"ln":"Bruchhausen-Vilsen","sn":"Bruchhausen-Vilsen"},"4253":{"ln":"Asendorf (Samtgemeinde Bruchhausen-Vilsen)","sn":"Asendorf"},"4254":{"ln":"Eystrup","sn":"Eystrup"},"4255":{"ln":"Martfeld (Samtgemeinde Bruchhausen-Vilsen)","sn":"Martfeld"},"4256":{"ln":"Hilgermissen","sn":"Hilgermissen"},"4257":{"ln":"Schweringen","sn":"Schweringen"},"4258":{"ln":"Schwarme (Samtgemeinde Bruchhausen-Vilsen)","sn":"Schwarme"},"4260":{"ln":"VisselhÃ¶vede-Wittorf","sn":"VisselhÃ¶vede-Wittorf"},"4261":{"ln":"Rotenburg (WÃ¼mme)","sn":"Rotenburg"},"4262":{"ln":"VisselhÃ¶vede","sn":"VisselhÃ¶vede"},"4263":{"ln":"ScheeÃel","sn":"ScheeÃel"},"4264":{"ln":"Sottrum (Kreis Rotenburg (WÃ¼mme)","sn":"Sottrum"},"4265":{"ln":"Fintel","sn":"Fintel"},"4266":{"ln":"Brockel (Samtgemeinde Bothel)","sn":"Brockel"},"4267":{"ln":"LauenbrÃ¼ck (Samtgemeinde Fintel)","sn":"LauenbrÃ¼ck"},"4268":{"ln":"BÃ¶tersen (Samtgemeinde Sottrum)","sn":"BÃ¶tersen"},"4269":{"ln":"Ahausen-Kirchwalsede (Samtgemeinden Bothel, Sottrum)","sn":"Ahausen-Kirchwalsede"},"4271":{"ln":"Sulingen","sn":"Sulingen"},"4272":{"ln":"Siedenburg","sn":"Siedenburg"},"4273":{"ln":"Kirchdorf","sn":"Kirchdorf"},"4274":{"ln":"Varrel (Samtgemeinde Kirchdorf)","sn":"Varrel"},"4275":{"ln":"Ehrenburg (Samtgemeinde SchwafÃ¶rden)","sn":"Ehrenburg"},"4276":{"ln":"Borstel (Samtgemeinde Siedenburg)","sn":"Borstel"},"4277":{"ln":"SchwafÃ¶rden","sn":"SchwafÃ¶rden"},"4281":{"ln":"Zeven","sn":"Zeven"},"4282":{"ln":"Sittensen","sn":"Sittensen"},"4283":{"ln":"Tarmstedt","sn":"Tarmstedt"},"4284":{"ln":"Selsingen","sn":"Selsingen"},"4285":{"ln":"Rhade (Samtgemeinde Selsingen)","sn":"Rhade"},"4286":{"ln":"Gyhum (Samtgemeinde Zeven)","sn":"Gyhum"},"4287":{"ln":"Heeslingen-Boitzen (Samtgemeinde Zeven)","sn":"Heeslingen-Boitzen"},"4288":{"ln":"Horstedt (Samtgemeinde Sottrum)","sn":"Horstedt"},"4289":{"ln":"Kirchtimke (Samtgemeinde Tarmstedt)","sn":"Kirchtimke"},"4292":{"ln":"Ritterhude","sn":"Ritterhude"},"4293":{"ln":"Ottersberg-Fischerhude","sn":"Ottersberg-Fischerhude"},"4294":{"ln":"Riede (Samtgemeinde Thedinghausen)","sn":"Riede"},"4295":{"ln":"Emtinghausen (Samtgemeinde Thedinghausen)","sn":"Emtinghausen"},"4296":{"ln":"Schwanewede-Aschwarden","sn":"Schwanewede-Aschwarden"},"4297":{"ln":"Ottersberg-Posthausen","sn":"Ottersberg-Posthausen"},"4298":{"ln":"Lilienthal","sn":"Lilienthal"},"4302":{"ln":"Kirchbarkau","sn":"Kirchbarkau"},"4303":{"ln":"Schlesen","sn":"Schlesen"},"4305":{"ln":"Westensee","sn":"Westensee"},"4307":{"ln":"Raisdorf","sn":"Raisdorf"},"4308":{"ln":"Schwedeneck","sn":"Schwedeneck"},"4320":{"ln":"HeidmÃ¼hlen","sn":"HeidmÃ¼hlen"},"4321":{"ln":"NeumÃ¼nster","sn":"NeumÃ¼nster"},"4322":{"ln":"Bordesholm","sn":"Bordesholm"},"4323":{"ln":"BornhÃ¶ved","sn":"BornhÃ¶ved"},"4324":{"ln":"Brokstedt","sn":"Brokstedt"},"4326":{"ln":"Wankendorf","sn":"Wankendorf"},"4327":{"ln":"GroÃenaspe","sn":"GroÃenaspe"},"4328":{"ln":"Rickling","sn":"Rickling"},"4329":{"ln":"Langwedel","sn":"Langwedel"},"4330":{"ln":"Emkendorf","sn":"Emkendorf"},"4331":{"ln":"Rendsburg","sn":"Rendsburg"},"4332":{"ln":"Hamdorf","sn":"Hamdorf"},"4333":{"ln":"Erfde","sn":"Erfde"},"4334":{"ln":"Bredenbek","sn":"Bredenbek"},"4335":{"ln":"Hohn","sn":"Hohn"},"4336":{"ln":"Owschlag","sn":"Owschlag"},"4337":{"ln":"Jevenstedt","sn":"Jevenstedt"},"4338":{"ln":"Alt Duvenstedt","sn":"Alt"},"4339":{"ln":"Christiansholm","sn":"Christiansholm"},"4340":{"ln":"Achterwehr","sn":"Achterwehr"},"4342":{"ln":"KÃ¼hren, Lehmkuhlen, Preetz","sn":"KÃ¼hren"},"4343":{"ln":"Laboe","sn":"Laboe"},"4344":{"ln":"SchÃ¶nberg","sn":"SchÃ¶nberg"},"4346":{"ln":"Gettorf","sn":"Gettorf"},"4347":{"ln":"Flintbek","sn":"Flintbek"},"4348":{"ln":"SchÃ¶nkirchen","sn":"SchÃ¶nkirchen"},"4349":{"ln":"DÃ¤nischenhagen","sn":"DÃ¤nischenhagen"},"4351":{"ln":"EckernfÃ¶rde","sn":"EckernfÃ¶rde"},"4352":{"ln":"Damp","sn":"Damp"},"4353":{"ln":"Ascheffel","sn":"Ascheffel"},"4354":{"ln":"Fleckeby","sn":"Fleckeby"},"4355":{"ln":"Rieseby","sn":"Rieseby"},"4356":{"ln":"GroÃ Wittensee","sn":"GroÃ Wittensee"},"4357":{"ln":"Sehestedt","sn":"Sehestedt"},"4358":{"ln":"Loose","sn":"Loose"},"4361":{"ln":"Oldenburg","sn":"Oldenburg"},"4362":{"ln":"Heiligenhafen","sn":"Heiligenhafen"},"4363":{"ln":"Lensahn","sn":"Lensahn"},"4364":{"ln":"Dahme","sn":"Dahme"},"4365":{"ln":"Heringsdorf","sn":"Heringsdorf"},"4366":{"ln":"GrÃ¶mitz-Cismar","sn":"GrÃ¶mitz-Cismar"},"4367":{"ln":"GroÃenbrode","sn":"GroÃenbrode"},"4371":{"ln":"Burg auf Fehmarn","sn":"Burg auf Fehmarn"},"4372":{"ln":"Fehmarn","sn":"Fehmarn"},"4381":{"ln":"LÃ¼tjenburg","sn":"LÃ¼tjenburg"},"4382":{"ln":"Wangels","sn":"Wangels"},"4383":{"ln":"Grebin","sn":"Grebin"},"4384":{"ln":"Selent","sn":"Selent"},"4385":{"ln":"Hohenfelde","sn":"Hohenfelde"},"4392":{"ln":"Nortorf","sn":"Nortorf"},"4393":{"ln":"Boostedt","sn":"Boostedt"},"4394":{"ln":"Bokhorst","sn":"Bokhorst"},"4401":{"ln":"Brake/Unterweser","sn":"Brake"},"4402":{"ln":"Rastede/Wiefelstede","sn":"Rastede"},"4404":{"ln":"Elsfleth","sn":"Elsfleth"},"4405":{"ln":"Edewecht","sn":"Edewecht"},"4406":{"ln":"Berne","sn":"Berne"},"4407":{"ln":"Wardenburg","sn":"Wardenburg"},"4408":{"ln":"Hude","sn":"Hude"},"4421":{"ln":"Wilhelmshaven","sn":"Wilhelmshaven"},"4422":{"ln":"Sande (Friesland) Kr.Friesl","sn":"Sande"},"4423":{"ln":"Fedderwarden (Wilhelmshaven)","sn":"Fedderwarden"},"4425":{"ln":"Wangerland-Hooksiel","sn":"Wangerland-Hooksiel"},"4426":{"ln":"Wangerland-Horumersiel","sn":"Wangerland-Horumersiel"},"4431":{"ln":"Wildeshausen","sn":"Wildeshausen"},"4432":{"ln":"Doetlingen-Brettorf","sn":"Doetlingen-Brettorf"},"4433":{"ln":"Doetlingen","sn":"Doetlingen"},"4434":{"ln":"Colnrade","sn":"Colnrade"},"4435":{"ln":"GroÃenkneten","sn":"GroÃenkneten"},"4441":{"ln":"Vechta","sn":"Vechta"},"4442":{"ln":"Lohne Oldb.","sn":"Lohne"},"4443":{"ln":"Dinklage","sn":"Dinklage"},"4444":{"ln":"Goldenstedt","sn":"Goldenstedt"},"4445":{"ln":"Visbek Kr.Vechta","sn":"Visbek"},"4446":{"ln":"Bakum Kr.Vechta","sn":"Bakum"},"4447":{"ln":"Vechta-LangfÃ¶rden","sn":"Vechta-LangfÃ¶rden"},"4451":{"ln":"Varel Jadebusen","sn":"Varel"},"4452":{"ln":"Zetel-Neuenburg","sn":"Zetel-Neuenburg"},"4453":{"ln":"Zetel","sn":"Zetel"},"4454":{"ln":"Jade","sn":"Jade"},"4455":{"ln":"Jade-Schweiburg","sn":"Jade-Schweiburg"},"4456":{"ln":"Varel-AltjÃ¼hrden","sn":"Varel-AltjÃ¼hrden"},"4458":{"ln":"Wiefelstede-Spohle","sn":"Wiefelstede-Spohle"},"4461":{"ln":"Jever","sn":"Jever"},"4462":{"ln":"Wittmund","sn":"Wittmund"},"4463":{"ln":"Wangerland","sn":"Wangerland"},"4464":{"ln":"Wittmund-Carolinensiel","sn":"Wittmund-Carolinensiel"},"4465":{"ln":"Friedeburg Ostfriesland","sn":"Friedeburg"},"4466":{"ln":"Wittmund-Ardorf","sn":"Wittmund-Ardorf"},"4467":{"ln":"Wittmund-Funnix","sn":"Wittmund-Funnix"},"4468":{"ln":"Friedeburg-Reepsholt","sn":"Friedeburg-Reepsholt"},"4469":{"ln":"Wangerooge","sn":"Wangerooge"},"4471":{"ln":"Cloppenburg","sn":"Cloppenburg"},"4472":{"ln":"Lastrup","sn":"Lastrup"},"4473":{"ln":"Emstek","sn":"Emstek"},"4474":{"ln":"Garrel","sn":"Garrel"},"4475":{"ln":"Molbergen","sn":"Molbergen"},"4477":{"ln":"Lastrup-Hemmelte","sn":"Lastrup-Hemmelte"},"4478":{"ln":"Cappeln Oldb.","sn":"Cappeln"},"4479":{"ln":"Molbergen-Peheim","sn":"Molbergen-Peheim"},"4480":{"ln":"Ovelgoenne-StrÃ¼ckhausen","sn":"Ovelgoenne-StrÃ¼ckhausen"},"4481":{"ln":"Hatten-Sandkrug","sn":"Hatten-Sandkrug"},"4482":{"ln":"Hatten","sn":"Hatten"},"4483":{"ln":"Ovelgoenne-Grossenmeer","sn":"Ovelgoenne-Grossenmeer"},"4484":{"ln":"Hude-WÃ¼sting","sn":"Hude-WÃ¼sting"},"4485":{"ln":"Elsfleth-Huntorf","sn":"Elsfleth-Huntorf"},"4486":{"ln":"Edewecht-Friedrichsfehn","sn":"Edewecht-Friedrichsfehn"},"4487":{"ln":"Grossenkneten-Huntlosen","sn":"Grossenkneten-Huntlosen"},"4488":{"ln":"Westerstede","sn":"Westerstede"},"4489":{"ln":"Apen","sn":"Apen"},"4491":{"ln":"Friesoythe","sn":"Friesoythe"},"4492":{"ln":"Saterland","sn":"Saterland"},"4493":{"ln":"Friesoythe-Gehlenberg","sn":"Friesoythe-Gehlenberg"},"4494":{"ln":"BÃ¶sel b.Friesoythe","sn":"BÃ¶sel"},"4495":{"ln":"Friesoythe-Thuele","sn":"Friesoythe-Thuele"},"4496":{"ln":"Friesoythe-Markhausen","sn":"Friesoythe-Markhausen"},"4497":{"ln":"BarÃel-HarkebrÃ¼gge","sn":"BarÃel-HarkebrÃ¼gge"},"4498":{"ln":"Saterland-Ramsloh","sn":"Saterland-Ramsloh"},"4499":{"ln":"BarÃel","sn":"BarÃel"},"4501":{"ln":"Kastorf","sn":"Kastorf"},"4502":{"ln":"LÃ¼beck-TravemÃ¼nde","sn":"LÃ¼beck-TravemÃ¼nde"},"4503":{"ln":"Timmendorfer Strand","sn":"Timmendorfer"},"4504":{"ln":"Ratekau","sn":"Ratekau"},"4505":{"ln":"Stockelsdorf-Curau","sn":"Stockelsdorf-Curau"},"4506":{"ln":"Heilshoop","sn":"Heilshoop"},"4508":{"ln":"Krummesse","sn":"Krummesse"},"4509":{"ln":"GroÃ GrÃ¶nau","sn":"GroÃ GrÃ¶nau"},"4511":{"ln":"LÃ¼beck, Bad Schwartau, Stockelsdorf","sn":"LÃ¼beck"},"4512":{"ln":"Bad Schwartau","sn":"Bad Schwartau"},"4513":{"ln":"St. Gertrud (Nord), Schlutup, KÃ¼cknitz","sn":"St. Gertrud"},"4514":{"ln":"St. Lorenz-Nord, Stockelsdorf","sn":"St. Lorenz"},"4515":{"ln":"St. JÃ¼rgen (SÃ¼d)","sn":"St. JÃ¼rgen"},"4516":{"ln":"St. Gertrud (SÃ¼d)","sn":"St. Gertrud"},"4517":{"ln":"Innenstadt, St. JÃ¼rgen (Nord)","sn":"Innenstadt"},"4518":{"ln":"St. Lorenz-SÃ¼d, Buntekuh, Moisling","sn":"St. Lorenz"},"4521":{"ln":"Eutin","sn":"Eutin"},"4522":{"ln":"PlÃ¶n","sn":"PlÃ¶n"},"4523":{"ln":"Bad Malente-GremsmÃ¼hlen","sn":"Bad Malente-GremsmÃ¼hlen"},"4524":{"ln":"SÃ¼sel","sn":"SÃ¼sel"},"4525":{"ln":"AhrensbÃ¶k","sn":"AhrensbÃ¶k"},"4526":{"ln":"Ascheberg","sn":"Ascheberg"},"4527":{"ln":"Bosau","sn":"Bosau"},"4528":{"ln":"SchÃ¶nwalde am Bungsberg","sn":"SchÃ¶nwalde"},"4531":{"ln":"Bad Oldesloe","sn":"Bad Oldesloe"},"4532":{"ln":"Bargteheide","sn":"Bargteheide"},"4533":{"ln":"Reinfeld in Holstein","sn":"Reinfeld"},"4534":{"ln":"SchÃ¶nberg, Kreis Herzogtum Lauenburg","sn":"SchÃ¶nberg"},"4535":{"ln":"Kayhude","sn":"Kayhude"},"4536":{"ln":"Sandesneben","sn":"Sandesneben"},"4537":{"ln":"Grabau","sn":"Grabau"},"4539":{"ln":"Rethwisch","sn":"Rethwisch"},"4541":{"ln":"Ratzeburg","sn":"Ratzeburg"},"4542":{"ln":"MÃ¶lln","sn":"MÃ¶lln"},"4543":{"ln":"Nusse","sn":"Nusse"},"4544":{"ln":"Berkenthin","sn":"Berkenthin"},"4545":{"ln":"Salem","sn":"Salem"},"4546":{"ln":"Mustin","sn":"Mustin"},"4547":{"ln":"Gudow in Lauenburg","sn":"Gudow"},"4551":{"ln":"Bad Segeberg","sn":"Bad Segeberg"},"4552":{"ln":"Bebensee","sn":"Bebensee"},"4553":{"ln":"Geschendorf","sn":"Geschendorf"},"4554":{"ln":"Wahlstedt","sn":"Wahlstedt"},"4555":{"ln":"Seedorf bei Bad Segeberg","sn":"Seedorf"},"4556":{"ln":"Travenhorst","sn":"Travenhorst"},"4557":{"ln":"Tensfeld","sn":"Tensfeld"},"4558":{"ln":"Fredesdorf","sn":"Fredesdorf"},"4559":{"ln":"Wensin","sn":"Wensin"},"4561":{"ln":"Neustadt in Holstein","sn":"Neustadt"},"4562":{"ln":"GrÃ¶mitz","sn":"GrÃ¶mitz"},"4563":{"ln":"Sierksdorf","sn":"Sierksdorf"},"4564":{"ln":"Schashagen","sn":"Schashagen"},"4621":{"ln":"Schleswig","sn":"Schleswig"},"4622":{"ln":"Taarstedt","sn":"Taarstedt"},"4623":{"ln":"BÃ¶klund","sn":"BÃ¶klund"},"4624":{"ln":"Kropp","sn":"Kropp"},"4625":{"ln":"JÃ¼bek","sn":"JÃ¼bek"},"4626":{"ln":"Treia","sn":"Treia"},"4627":{"ln":"DÃ¶rpstedt","sn":"DÃ¶rpstedt"},"4630":{"ln":"Barderup","sn":"Barderup"},"4631":{"ln":"GlÃ¼cksburg (Ostsee)","sn":"GlÃ¼cksburg"},"4632":{"ln":"Steinbergkirche","sn":"Steinbergkirche"},"4633":{"ln":"Satrup","sn":"Satrup"},"4634":{"ln":"Husby","sn":"Husby"},"4635":{"ln":"SÃ¶rup","sn":"SÃ¶rup"},"4636":{"ln":"Langballig","sn":"Langballig"},"4637":{"ln":"Sterup","sn":"Sterup"},"4638":{"ln":"Tarp","sn":"Tarp"},"4639":{"ln":"Schafflund","sn":"Schafflund"},"4641":{"ln":"SÃ¼derbrarup","sn":"SÃ¼derbrarup"},"4642":{"ln":"Kappeln an der Schlei","sn":"Kappeln"},"4643":{"ln":"Gelting (Angeln)","sn":"Gelting"},"4644":{"ln":"Karby Schwansen","sn":"Karby"},"4646":{"ln":"Mohrkirch","sn":"Mohrkirch"},"4651":{"ln":"Sylt","sn":"Sylt"},"4661":{"ln":"NiebÃ¼ll","sn":"NiebÃ¼ll"},"4662":{"ln":"Leck","sn":"Leck"},"4663":{"ln":"SÃ¼derlÃ¼gum","sn":"SÃ¼derlÃ¼gum"},"4664":{"ln":"Neukirchen bei NiebÃ¼ll","sn":"Neukirchen"},"4665":{"ln":"EmmelsbÃ¼ll-HorsbÃ¼ll","sn":"EmmelsbÃ¼ll-HorsbÃ¼ll"},"4666":{"ln":"Ladelund","sn":"Ladelund"},"4667":{"ln":"DagebÃ¼ll","sn":"DagebÃ¼ll"},"4668":{"ln":"KlanxbÃ¼ll","sn":"KlanxbÃ¼ll"},"4671":{"ln":"Bredstedt","sn":"Bredstedt"},"4672":{"ln":"Langenhorn","sn":"Langenhorn"},"4673":{"ln":"Joldelund","sn":"Joldelund"},"4674":{"ln":"Ockholm","sn":"Ockholm"},"4681":{"ln":"Wyk auf FÃ¶hr","sn":"Wyk"},"4682":{"ln":"Amrum","sn":"Amrum"},"4683":{"ln":"Oldsum","sn":"Oldsum"},"4684":{"ln":"LangeneÃ (Hallig)","sn":"LangeneÃ"},"4702":{"ln":"Sandstedt","sn":"Sandstedt"},"4703":{"ln":"Loxstedt-Donnern","sn":"Loxstedt-Donnern"},"4704":{"ln":"Drangstedt","sn":"Drangstedt"},"4705":{"ln":"Wremen","sn":"Wremen"},"4706":{"ln":"Schiffdorf","sn":"Schiffdorf"},"4707":{"ln":"Langen-Neuenwalde","sn":"Langen-Neuenwalde"},"4708":{"ln":"Ringstedt","sn":"Ringstedt"},"4721":{"ln":"Cuxhaven","sn":"Cuxhaven"},"4722":{"ln":"Cuxhaven-Altenbruch","sn":"Cuxhaven-Altenbruch"},"4723":{"ln":"Cuxhaven-Altenwalde","sn":"Cuxhaven-Altenwalde"},"4724":{"ln":"Cuxhaven-LÃ¼dingworth","sn":"Cuxhaven-LÃ¼dingworth"},"4725":{"ln":"Helgoland","sn":"Helgoland"},"4731":{"ln":"Nordenham","sn":"Nordenham"},"4732":{"ln":"Stadland-Rodenkirchen","sn":"Stadland-Rodenkirchen"},"4733":{"ln":"Butjadingen-Burhave","sn":"Butjadingen-Burhave"},"4734":{"ln":"Stadland-Seefeld","sn":"Stadland-Seefeld"},"4735":{"ln":"Butjadingen-Stollhamm","sn":"Butjadingen-Stollhamm"},"4736":{"ln":"Butjadingen-Tossens","sn":"Butjadingen-Tossens"},"4737":{"ln":"Stadland-Schwei","sn":"Stadland-Schwei"},"4740":{"ln":"Loxstedt-Dedesdorf","sn":"Loxstedt-Dedesdorf"},"4741":{"ln":"Nordholz b.Bremerhaven","sn":"Nordholz"},"4742":{"ln":"Dorum","sn":"Dorum"},"4743":{"ln":"Langen b.Bremerhaven","sn":"Langen"},"4744":{"ln":"Loxstedt","sn":"Loxstedt"},"4745":{"ln":"Bederkesa","sn":"Bederkesa"},"4746":{"ln":"Hagen b.Bremerhaven","sn":"Hagen"},"4747":{"ln":"Beverstedt","sn":"Beverstedt"},"4748":{"ln":"Stubben b.Bremerhaven","sn":"Stubben"},"4749":{"ln":"Schiffdorf-Geestenseth","sn":"Schiffdorf-Geestenseth"},"4751":{"ln":"Otterndorf","sn":"Otterndorf"},"4752":{"ln":"Neuhaus (Oste)","sn":"Neuhaus"},"4753":{"ln":"Balje","sn":"Balje"},"4754":{"ln":"BÃ¼lkau","sn":"BÃ¼lkau"},"4755":{"ln":"Ihlienworth","sn":"Ihlienworth"},"4756":{"ln":"Odisheim","sn":"Odisheim"},"4757":{"ln":"Wanna","sn":"Wanna"},"4758":{"ln":"Nordleda","sn":"Nordleda"},"4761":{"ln":"BremervÃ¶rde","sn":"BremervÃ¶rde"},"4762":{"ln":"Kutenholz","sn":"Kutenholz"},"4763":{"ln":"Gnarrenburg","sn":"Gnarrenburg"},"4764":{"ln":"Gnarrenburg-Klenkendorf","sn":"Gnarrenburg-Klenkendorf"},"4765":{"ln":"Ebersdorf b.BremervÃ¶rde","sn":"Ebersdorf"},"4766":{"ln":"Basdahl","sn":"Basdahl"},"4767":{"ln":"BremervÃ¶rde-Bevern","sn":"BremervÃ¶rde-Bevern"},"4768":{"ln":"Hipstedt","sn":"Hipstedt"},"4769":{"ln":"BremervÃ¶rde-Iselersheim","sn":"BremervÃ¶rde-Iselersheim"},"4770":{"ln":"Wischhafen","sn":"Wischhafen"},"4771":{"ln":"Hemmoor","sn":"Hemmoor"},"4772":{"ln":"Oberndorf Oste","sn":"Oberndorf"},"4773":{"ln":"Lamstedt","sn":"Lamstedt"},"4774":{"ln":"Hechthausen","sn":"Hechthausen"},"4775":{"ln":"GrossenwÃ¶rden","sn":"GrossenwÃ¶rden"},"4776":{"ln":"Osten-Altendorf","sn":"Osten-Altendorf"},"4777":{"ln":"Cadenberge","sn":"Cadenberge"},"4778":{"ln":"Wingst","sn":"Wingst"},"4779":{"ln":"Freiburg an der Elbe","sn":"Freiburg"},"4791":{"ln":"Osterholz-Scharmbeck","sn":"Osterholz-Scharmbeck"},"4792":{"ln":"Worpswede (Landkreis Osterholz)","sn":"Worpswede"},"4793":{"ln":"Hambergen","sn":"Hambergen"},"4794":{"ln":"Worpswede-Ostersode","sn":"Worpswede-Ostersode"},"4795":{"ln":"Garlstedt","sn":"Garlstedt"},"4796":{"ln":"Teufelsmoor","sn":"Teufelsmoor"},"4802":{"ln":"Dellstedt, Wrohm","sn":"Dellstedt"},"4803":{"ln":"Delve, Pahlen","sn":"Delve"},"4804":{"ln":"Nordhastedt","sn":"Nordhastedt"},"4805":{"ln":"Schafstedt","sn":"Schafstedt"},"4806":{"ln":"Bargenstedt, Odderade, SarzbÃ¼ttel","sn":"Bargenstedt"},"4821":{"ln":"Itzehoe","sn":"Itzehoe"},"4822":{"ln":"Kellinghusen","sn":"Kellinghusen"},"4823":{"ln":"Wilster","sn":"Wilster"},"4824":{"ln":"Krempe","sn":"Krempe"},"4825":{"ln":"Burg","sn":"Burg"},"4826":{"ln":"Hohenlockstedt","sn":"Hohenlockstedt"},"4827":{"ln":"Wacken","sn":"Wacken"},"4828":{"ln":"LÃ¤gerdorf","sn":"LÃ¤gerdorf"},"4829":{"ln":"Brokdorf","sn":"Brokdorf"},"4832":{"ln":"Meldorf","sn":"Meldorf"},"4837":{"ln":"Neuenkirchen","sn":"Neuenkirchen"},"4841":{"ln":"Husum","sn":"Husum"},"4845":{"ln":"Ostenfeld","sn":"Ostenfeld"},"4851":{"ln":"Marne","sn":"Marne"},"4852":{"ln":"BrunsbÃ¼ttel","sn":"BrunsbÃ¼ttel"},"4854":{"ln":"Friedrichskoog","sn":"Friedrichskoog"},"4861":{"ln":"TÃ¶nning","sn":"TÃ¶nning"},"4862":{"ln":"Garding","sn":"Garding"},"4863":{"ln":"Sankt Peter-Ording","sn":"Sankt"},"4864":{"ln":"Oldenswort","sn":"Oldenswort"},"4865":{"ln":"Osterhever","sn":"Osterhever"},"4881":{"ln":"Friedrichstadt","sn":"Friedrichstadt"},"4882":{"ln":"Lunden","sn":"Lunden"},"4902":{"ln":"Jemgum-Ditzum","sn":"Jemgum-Ditzum"},"4903":{"ln":"Wymeer","sn":"Wymeer"},"4920":{"ln":"Wirdum","sn":"Wirdum"},"4921":{"ln":"Emden","sn":"Emden"},"4922":{"ln":"Borkum","sn":"Borkum"},"4923":{"ln":"KrummhÃ¶rn-Pewsum","sn":"KrummhÃ¶rn-Pewsum"},"4924":{"ln":"Moormerland-Oldersum","sn":"Moormerland-Oldersum"},"4925":{"ln":"Hinte","sn":"Hinte"},"4926":{"ln":"KrummhÃ¶rn-Greetsiel","sn":"KrummhÃ¶rn-Greetsiel"},"4927":{"ln":"KrummhÃ¶rn-Loquard","sn":"KrummhÃ¶rn-Loquard"},"4928":{"ln":"Ihlow-Riepe","sn":"Ihlow-Riepe"},"4929":{"ln":"Ihlow","sn":"Ihlow"},"4931":{"ln":"Norden","sn":"Norden"},"4932":{"ln":"Norderney","sn":"Norderney"},"4933":{"ln":"Dornum Ostfriesland","sn":"Dornum"},"4934":{"ln":"Marienhafe","sn":"Marienhafe"},"4935":{"ln":"Juist","sn":"Juist"},"4936":{"ln":"Grossheide","sn":"Grossheide"},"4938":{"ln":"Hagermarsch","sn":"Hagermarsch"},"4939":{"ln":"Baltrum","sn":"Baltrum"},"4941":{"ln":"Aurich","sn":"Aurich"},"4942":{"ln":"SÃ¼dbrookmerland","sn":"SÃ¼dbrookmerland"},"4943":{"ln":"GroÃefehn","sn":"GroÃefehn"},"4944":{"ln":"Wiesmoor","sn":"Wiesmoor"},"4945":{"ln":"GroÃefehn-Timmel","sn":"GroÃefehn-Timmel"},"4946":{"ln":"GroÃefehn-Bagband","sn":"GroÃefehn-Bagband"},"4947":{"ln":"Aurich-Ogenbargen","sn":"Aurich-Ogenbargen"},"4948":{"ln":"Wiesmoor-Marcardsmoor","sn":"Wiesmoor-Marcardsmoor"},"4950":{"ln":"Holtland","sn":"Holtland"},"4951":{"ln":"Weener","sn":"Weener"},"4952":{"ln":"Rhauderfehn","sn":"Rhauderfehn"},"4953":{"ln":"Bunde","sn":"Bunde"},"4954":{"ln":"Moormerland","sn":"Moormerland"},"4955":{"ln":"Westoverledingen","sn":"Westoverledingen"},"4956":{"ln":"Uplengen","sn":"Uplengen"},"4957":{"ln":"Detern","sn":"Detern"},"4958":{"ln":"Jemgum","sn":"Jemgum"},"4959":{"ln":"Dollart","sn":"Dollart"},"4961":{"ln":"Papenburg","sn":"Papenburg"},"4962":{"ln":"Aschendorf","sn":"Aschendorf"},"4963":{"ln":"DÃ¶rpen","sn":"DÃ¶rpen"},"4964":{"ln":"Rhede (Ems)","sn":"Rhede"},"4965":{"ln":"Surwold","sn":"Surwold"},"4966":{"ln":"NeubÃ¶rger","sn":"NeubÃ¶rger"},"4967":{"ln":"Rhauderfehn-Burlage","sn":"Rhauderfehn-Burlage"},"4968":{"ln":"Neulehe","sn":"Neulehe"},"4971":{"ln":"Esens","sn":"Esens"},"4972":{"ln":"Langeoog","sn":"Langeoog"},"4973":{"ln":"Wittmund-Burhafe","sn":"Wittmund-Burhafe"},"4974":{"ln":"Neuharlingersiel","sn":"Neuharlingersiel"},"4975":{"ln":"Westerholt","sn":"Westerholt"},"4976":{"ln":"Spiekeroog","sn":"Spiekeroog"},"4977":{"ln":"Blomberg","sn":"Blomberg"},"5021":{"ln":"Nienburg (Weser)","sn":"Nienburg"},"5022":{"ln":"Wietzen","sn":"Wietzen"},"5023":{"ln":"Liebenau (bei Nienburg)","sn":"Liebenau"},"5024":{"ln":"Rohrsen","sn":"Rohrsen"},"5025":{"ln":"Estorf (Weser)","sn":"Estorf"},"5026":{"ln":"Steimbke","sn":"Steimbke"},"5027":{"ln":"Linsburg","sn":"Linsburg"},"5028":{"ln":"Pennigsehl","sn":"Pennigsehl"},"5031":{"ln":"Wunstorf","sn":"Wunstorf"},"5032":{"ln":"Neustadt am RÃ¼benberge","sn":"Neustadt"},"5033":{"ln":"GroÃenheidorn, Steinhude, Altenhagen/Hagenburg","sn":"GroÃenheidorn"},"5034":{"ln":"Hagen (bei Neustadt am RÃ¼benberge)","sn":"Hagen"},"5036":{"ln":"Schneeren","sn":"Schneeren"},"5037":{"ln":"Bad Rehburg","sn":"Bad Rehburg"},"5041":{"ln":"Springe (Deister)","sn":"Springe"},"5042":{"ln":"Bad MÃ¼nder am Deister","sn":"Bad MÃ¼nder"},"5043":{"ln":"Lauenau","sn":"Lauenau"},"5044":{"ln":"Eldagsen","sn":"Eldagsen"},"5045":{"ln":"Bennigsen","sn":"Bennigsen"},"5051":{"ln":"Bergen, Lower Saxony (bei Celle)","sn":"Bergen"},"5052":{"ln":"Hermannsburg","sn":"Hermannsburg"},"5053":{"ln":"MÃ¼den (Aller)","sn":"MÃ¼den"},"5054":{"ln":"SÃ¼lze","sn":"SÃ¼lze"},"5055":{"ln":"Fassberg","sn":"Fassberg"},"5056":{"ln":"Meissendorf","sn":"Meissendorf"},"5060":{"ln":"Bodenburg","sn":"Bodenburg"},"5062":{"ln":"Holle (bei Hildesheim)","sn":"Holle"},"5063":{"ln":"Bad Salzdetfurth","sn":"Bad Salzdetfurth"},"5064":{"ln":"GroÃ DÃ¼ngen","sn":"GroÃ DÃ¼ngen"},"5065":{"ln":"Sibbesse","sn":"Sibbesse"},"5066":{"ln":"Sarstedt","sn":"Sarstedt"},"5067":{"ln":"Bockenem","sn":"Bockenem"},"5068":{"ln":"Elze (Leine)","sn":"Elze"},"5069":{"ln":"Nordstemmen","sn":"Nordstemmen"},"5071":{"ln":"Schwarmstedt","sn":"Schwarmstedt"},"5072":{"ln":"Mandelsloh","sn":"Mandelsloh"},"5073":{"ln":"Esperke","sn":"Esperke"},"5074":{"ln":"Rodewald","sn":"Rodewald"},"5082":{"ln":"Langlingen","sn":"Langlingen"},"5083":{"ln":"Hohne (bei Celle)","sn":"Hohne"},"5084":{"ln":"HambÃ¼hren","sn":"HambÃ¼hren"},"5085":{"ln":"Ehlershausen","sn":"Ehlershausen"},"5086":{"ln":"Scheuen","sn":"Scheuen"},"5101":{"ln":"Pattensen","sn":"Pattensen"},"5102":{"ln":"Laatzen","sn":"Laatzen"},"5103":{"ln":"Wennigsen (Deister)","sn":"Wennigsen"},"5105":{"ln":"Barsinghausen","sn":"Barsinghausen"},"5108":{"ln":"Gehrden","sn":"Gehrden"},"5109":{"ln":"Ronnenberg","sn":"Ronnenberg"},"5121":{"ln":"Hildesheim","sn":"Hildesheim"},"5123":{"ln":"Schellerten","sn":"Schellerten"},"5126":{"ln":"Algermissen","sn":"Algermissen"},"5127":{"ln":"Harsum","sn":"Harsum"},"5128":{"ln":"Hohenhameln","sn":"Hohenhameln"},"5129":{"ln":"SÃ¶hlde","sn":"SÃ¶hlde"},"5130":{"ln":"Wedemark","sn":"Wedemark"},"5131":{"ln":"Garbsen","sn":"Garbsen"},"5132":{"ln":"Lehrte","sn":"Lehrte"},"5135":{"ln":"Fuhrberg","sn":"Fuhrberg"},"5136":{"ln":"Burgdorf (Hannover)","sn":"Burgdorf"},"5137":{"ln":"Seelze","sn":"Seelze"},"5138":{"ln":"Sehnde","sn":"Sehnde"},"5139":{"ln":"Burgwedel","sn":"Burgwedel"},"5141":{"ln":"Celle","sn":"Celle"},"5142":{"ln":"Eschede","sn":"Eschede"},"5143":{"ln":"Winsen (Aller)","sn":"Winsen"},"5144":{"ln":"Wathlingen","sn":"Wathlingen"},"5145":{"ln":"Beedenbostel","sn":"Beedenbostel"},"5147":{"ln":"HÃ¤ningsen","sn":"HÃ¤ningsen"},"5148":{"ln":"Steinhorst (Nieders.)","sn":"Steinhorst"},"5149":{"ln":"Wienhausen","sn":"Wienhausen"},"5151":{"ln":"Hameln","sn":"Hameln"},"5152":{"ln":"Hessisch Oldendorf","sn":"Hessisch Oldendorf"},"5153":{"ln":"Salzhemmendorf","sn":"Salzhemmendorf"},"5154":{"ln":"Aerzen","sn":"Aerzen"},"5155":{"ln":"Emmerthal","sn":"Emmerthal"},"5156":{"ln":"CoppenbrÃ¼gge","sn":"CoppenbrÃ¼gge"},"5157":{"ln":"BÃ¶rry","sn":"BÃ¶rry"},"5158":{"ln":"Hemeringen","sn":"Hemeringen"},"5159":{"ln":"Bisperode","sn":"Bisperode"},"5161":{"ln":"Walsrode","sn":"Walsrode"},"5162":{"ln":"Bad Fallingbostel","sn":"Bad Fallingbostel"},"5163":{"ln":"Dorfmark","sn":"Dorfmark"},"5164":{"ln":"Hodenhagen","sn":"Hodenhagen"},"5165":{"ln":"Rethem (Aller)","sn":"Rethem"},"5166":{"ln":"Kirchboitzen","sn":"Kirchboitzen"},"5167":{"ln":"Westenholz","sn":"Westenholz"},"5168":{"ln":"Stellichte","sn":"Stellichte"},"5171":{"ln":"Peine","sn":"Peine"},"5172":{"ln":"Ilsede","sn":"Ilsede"},"5173":{"ln":"Uetze","sn":"Uetze"},"5174":{"ln":"Lahstedt","sn":"Lahstedt"},"5175":{"ln":"Arpke","sn":"Arpke"},"5176":{"ln":"Edemissen","sn":"Edemissen"},"5177":{"ln":"Abbensen","sn":"Abbensen"},"5181":{"ln":"Alfeld (Leine)","sn":"Alfeld"},"5182":{"ln":"Gronau (Leine)","sn":"Gronau"},"5183":{"ln":"Lamspringe","sn":"Lamspringe"},"5184":{"ln":"Freden (Leine)","sn":"Freden"},"5185":{"ln":"Duingen","sn":"Duingen"},"5186":{"ln":"Wallensen","sn":"Wallensen"},"5187":{"ln":"Delligsen","sn":"Delligsen"},"5190":{"ln":"Emmingen","sn":"Emmingen"},"5191":{"ln":"Soltau","sn":"Soltau"},"5192":{"ln":"Munster","sn":"Munster"},"5193":{"ln":"Schneverdingen","sn":"Schneverdingen"},"5194":{"ln":"Bispingen","sn":"Bispingen"},"5196":{"ln":"Wietzendorf","sn":"Wietzendorf"},"5197":{"ln":"Frielingen","sn":"Frielingen"},"5198":{"ln":"Wintermoor","sn":"Wintermoor"},"5199":{"ln":"Heber","sn":"Heber"},"5201":{"ln":"Halle (Westf.)","sn":"Halle"},"5202":{"ln":"Oerlinghausen","sn":"Oerlinghausen"},"5203":{"ln":"Werther (Westfalen)","sn":"Werther"},"5204":{"ln":"Steinhagen (Westfalen)","sn":"Steinhagen"},"5205":{"ln":"Sennestadt (Stadt Bielefeld)","sn":"Sennestadt"},"5206":{"ln":"JÃ¶llenbeck, Theesen (Stadt Bielefeld)","sn":"JÃ¶llenbeck"},"5207":{"ln":"SchloÃ Holte-Stukenbrock","sn":"SchloÃ Holte-Stukenbrock"},"5208":{"ln":"LeopoldshÃ¶he","sn":"LeopoldshÃ¶he"},"5209":{"ln":"Friedrichsdorf (Stadt GÃ¼tersloh)","sn":"Friedrichsdorf"},"5221":{"ln":"Herford","sn":"Herford"},"5222":{"ln":"Bad Salzuflen","sn":"Bad Salzuflen"},"5223":{"ln":"BÃ¼nde","sn":"BÃ¼nde"},"5224":{"ln":"Enger (Westfalen)","sn":"Enger"},"5225":{"ln":"Spenge","sn":"Spenge"},"5226":{"ln":"BruchmÃ¼hlen (Westfalen, Gemeinde RÃ¶dinghausen/Nordrhein-Westfalen bzw. Stadt Melle/Niedersachsen)","sn":"BruchmÃ¼hlen"},"5228":{"ln":"Vlotho/Exter (Stadt Vlotho)","sn":"Vlotho"},"5231":{"ln":"Detmold","sn":"Detmold"},"5232":{"ln":"Lage","sn":"Lage"},"5233":{"ln":"Steinheim (Westfalen)","sn":"Steinheim"},"5234":{"ln":"Horn-Bad Meinberg","sn":"Horn-Bad Meinberg"},"5235":{"ln":"Blomberg (Lippe)","sn":"Blomberg"},"5236":{"ln":"GroÃenmarpe (Gemeinde Blomberg (Lippe)","sn":"GroÃenmarpe"},"5237":{"ln":"Augustdorf","sn":"Augustdorf"},"5238":{"ln":"Himmighausen (Gemeinde Nieheim)","sn":"Himmighausen"},"5241":{"ln":"GÃ¼tersloh","sn":"GÃ¼tersloh"},"5242":{"ln":"Rheda-WiedenbrÃ¼ck","sn":"Rheda-WiedenbrÃ¼ck"},"5244":{"ln":"Rietberg","sn":"Rietberg"},"5245":{"ln":"Herzebrock-Clarholz","sn":"Herzebrock-Clarholz"},"5246":{"ln":"Verl","sn":"Verl"},"5247":{"ln":"Harsewinkel","sn":"Harsewinkel"},"5248":{"ln":"Langenberg","sn":"Langenberg"},"5250":{"ln":"DelbrÃ¼ck (Westfalen)","sn":"DelbrÃ¼ck"},"5251":{"ln":"Paderborn","sn":"Paderborn"},"5252":{"ln":"Bad Lippspringe","sn":"Bad Lippspringe"},"5253":{"ln":"Bad Driburg","sn":"Bad Driburg"},"5254":{"ln":"SchloÃ Neuhaus (Stadt Paderborn)","sn":"SchloÃ Neuhaus"},"5255":{"ln":"Altenbeken","sn":"Altenbeken"},"5257":{"ln":"HÃ¶velhof","sn":"HÃ¶velhof"},"5258":{"ln":"Salzkotten","sn":"Salzkotten"},"5259":{"ln":"Neuenheerse (Stadt Bad Driburg)","sn":"Neuenheerse"},"5261":{"ln":"Lemgo","sn":"Lemgo"},"5262":{"ln":"Extertal","sn":"Extertal"},"5263":{"ln":"Barntrup","sn":"Barntrup"},"5264":{"ln":"Kalletal","sn":"Kalletal"},"5265":{"ln":"DÃ¶rentrup","sn":"DÃ¶rentrup"},"5266":{"ln":"Kirchheide (Stadt Lemgo)","sn":"Kirchheide"},"5271":{"ln":"HÃ¶xter, Boffzen, FÃ¼rstenberg","sn":"HÃ¶xter"},"5272":{"ln":"Brakel (Westfalen)","sn":"Brakel"},"5273":{"ln":"Beverungen, LauenfÃ¶rde, Derental","sn":"Beverungen"},"5274":{"ln":"Nieheim","sn":"Nieheim"},"5275":{"ln":"Ottbergen (Stadt HÃ¶xter)","sn":"Ottbergen"},"5276":{"ln":"MarienmÃ¼nster","sn":"MarienmÃ¼nster"},"5277":{"ln":"FÃ¼rstenau (Stadt HÃ¶xter)","sn":"FÃ¼rstenau"},"5278":{"ln":"Ovenhausen (Stadt HÃ¶xter)","sn":"Ovenhausen"},"5281":{"ln":"Bad Pyrmont","sn":"Bad Pyrmont"},"5282":{"ln":"Schieder-Schwalenberg","sn":"Schieder-Schwalenberg"},"5283":{"ln":"LÃ¼gde -Rischenau","sn":"LÃ¼gde"},"5284":{"ln":"Schwalenberg (Gemeinde Schieder-Schwalenberg)","sn":"Schwalenberg"},"5285":{"ln":"Kleinenberg","sn":"Kleinenberg"},"5286":{"ln":"Ottenstein","sn":"Ottenstein"},"5292":{"ln":"Atteln (Stadt Lichtenau)","sn":"Atteln"},"5293":{"ln":"Dahl (Stadt Paderborn)","sn":"Dahl"},"5294":{"ln":"Espeln (Gemeinde HÃ¶velhof)","sn":"Espeln"},"5295":{"ln":"Lichtenau","sn":"Lichtenau"},"5300":{"ln":"Ãfingen","sn":"Ãfingen"},"5301":{"ln":"Lehre-Essenrode","sn":"Lehre-Essenrode"},"5302":{"ln":"Vechelde","sn":"Vechelde"},"5303":{"ln":"Wendeburg","sn":"Wendeburg"},"5304":{"ln":"Meine","sn":"Meine"},"5305":{"ln":"Sickte","sn":"Sickte"},"5306":{"ln":"Cremlingen","sn":"Cremlingen"},"5307":{"ln":"Braunschweig-Wenden","sn":"Braunschweig-Wenden"},"5308":{"ln":"Lehre","sn":"Lehre"},"5309":{"ln":"Lehre-Wendhausen","sn":"Lehre-Wendhausen"},"5320":{"ln":"Torfhaus","sn":"Torfhaus"},"5321":{"ln":"Goslar","sn":"Goslar"},"5322":{"ln":"Bad Harzburg","sn":"Bad Harzburg"},"5323":{"ln":"Clausthal-Zellerfeld","sn":"Clausthal-Zellerfeld"},"5324":{"ln":"Vienenburg","sn":"Vienenburg"},"5325":{"ln":"Hahnenklee","sn":"Hahnenklee"},"5326":{"ln":"Langelsheim","sn":"Langelsheim"},"5327":{"ln":"Bad Grund (Harz)","sn":"Bad Grund"},"5328":{"ln":"Altenau (Harz)","sn":"Altenau"},"5329":{"ln":"Schulenberg (Oberharz)","sn":"Schulenberg"},"5331":{"ln":"WolfenbÃ¼ttel","sn":"WolfenbÃ¼ttel"},"5332":{"ln":"SchÃ¶ppenstedt","sn":"SchÃ¶ppenstedt"},"5333":{"ln":"Dettum","sn":"Dettum"},"5334":{"ln":"Hornburg (bei WolfenbÃ¼ttel)","sn":"Hornburg"},"5335":{"ln":"Schladen","sn":"Schladen"},"5336":{"ln":"Semmenstedt","sn":"Semmenstedt"},"5337":{"ln":"KissenbrÃ¼ck","sn":"KissenbrÃ¼ck"},"5339":{"ln":"Gielde","sn":"Gielde"},"5341":{"ln":"Salzgitter","sn":"Salzgitter"},"5344":{"ln":"Lengede","sn":"Lengede"},"5345":{"ln":"Baddeckenstedt","sn":"Baddeckenstedt"},"5346":{"ln":"Liebenburg","sn":"Liebenburg"},"5347":{"ln":"Burgdorf (bei Salzgitter)","sn":"Burgdorf"},"5351":{"ln":"Helmstedt","sn":"Helmstedt"},"5352":{"ln":"SchÃ¶ningen","sn":"SchÃ¶ningen"},"5353":{"ln":"KÃ¶nigslutter","sn":"KÃ¶nigslutter"},"5354":{"ln":"Jerxheim","sn":"Jerxheim"},"5355":{"ln":"Frellstedt","sn":"Frellstedt"},"5356":{"ln":"Helmstedt-Barmke","sn":"Helmstedt-Barmke"},"5357":{"ln":"Grasleben","sn":"Grasleben"},"5358":{"ln":"Bahrdorf-Mackendorf","sn":"Bahrdorf-Mackendorf"},"5361":{"ln":"Wolfsburg","sn":"Wolfsburg"},"5362":{"ln":"Wolfsburg-Fallersleben","sn":"Wolfsburg-Fallersleben"},"5363":{"ln":"Wolfsburg-Vorsfelde","sn":"Wolfsburg-Vorsfelde"},"5364":{"ln":"Velpke","sn":"Velpke"},"5365":{"ln":"Wolfsburg-Neindorf","sn":"Wolfsburg-Neindorf"},"5366":{"ln":"Jembke","sn":"Jembke"},"5367":{"ln":"RÃ¼hen","sn":"RÃ¼hen"},"5371":{"ln":"Gifhorn","sn":"Gifhorn"},"5372":{"ln":"Meinersen","sn":"Meinersen"},"5373":{"ln":"Hillerse","sn":"Hillerse"},"5374":{"ln":"IsenbÃ¼ttel","sn":"IsenbÃ¼ttel"},"5375":{"ln":"MÃ¼den (Aller)","sn":"MÃ¼den"},"5376":{"ln":"Wesendorf","sn":"Wesendorf"},"5378":{"ln":"Sassenburg-Platendorf","sn":"Sassenburg-Platendorf"},"5379":{"ln":"Sassenburg-Grussendorf","sn":"Sassenburg-Grussendorf"},"5381":{"ln":"Seesen","sn":"Seesen"},"5382":{"ln":"Bad Gandersheim","sn":"Bad Gandersheim"},"5383":{"ln":"Lutter am Barenberge","sn":"Lutter"},"5384":{"ln":"GroÃ RhÃ¼den","sn":"GroÃ RhÃ¼den"},"5401":{"ln":"GeorgsmarienhÃ¼tte","sn":"GeorgsmarienhÃ¼tte"},"5402":{"ln":"Bissendorf","sn":"Bissendorf"},"5403":{"ln":"Bad Iburg","sn":"Bad Iburg"},"5404":{"ln":"Westerkappeln","sn":"Westerkappeln"},"5405":{"ln":"Hasbergen (OsnabrÃ¼ck)","sn":"Hasbergen"},"5406":{"ln":"Belm","sn":"Belm"},"5407":{"ln":"Wallenhorst","sn":"Wallenhorst"},"5409":{"ln":"Hilter am Teutoburger Wald","sn":"Hilter"},"5421":{"ln":"Dissen am Teutoburger Wald","sn":"Dissen"},"5422":{"ln":"Melle","sn":"Melle"},"5423":{"ln":"Versmold","sn":"Versmold"},"5424":{"ln":"Bad Rothenfelde, Bad Laer, Hilter","sn":"Bad Rothenfelde"},"5425":{"ln":"Borgholzhausen","sn":"Borgholzhausen"},"5426":{"ln":"Glandorf","sn":"Glandorf"},"5427":{"ln":"Buer (Stadt Melle)","sn":"Buer"},"5428":{"ln":"Neuenkirchen (Stadt Melle)","sn":"Neuenkirchen"},"5429":{"ln":"Wellingholzhausen (Stadt Melle)","sn":"Wellingholzhausen"},"5432":{"ln":"LÃ¶ningen","sn":"LÃ¶ningen"},"5433":{"ln":"Badbergen","sn":"Badbergen"},"5434":{"ln":"Essen (Oldenburg)","sn":"Essen"},"5435":{"ln":"Berge (bei QuakenbrÃ¼ck)","sn":"Berge"},"5436":{"ln":"Nortrup","sn":"Nortrup"},"5437":{"ln":"Menslage","sn":"Menslage"},"5438":{"ln":"LÃ¼sche","sn":"LÃ¼sche"},"5439":{"ln":"BersenbrÃ¼ck","sn":"BersenbrÃ¼ck"},"5441":{"ln":"Diepholz","sn":"Diepholz"},"5442":{"ln":"Barnstorf","sn":"Barnstorf"},"5443":{"ln":"LemfÃ¶rde","sn":"LemfÃ¶rde"},"5444":{"ln":"Wagenfeld","sn":"Wagenfeld"},"5445":{"ln":"Drebber","sn":"Drebber"},"5446":{"ln":"Rehden","sn":"Rehden"},"5447":{"ln":"Lembruch","sn":"Lembruch"},"5448":{"ln":"Barver","sn":"Barver"},"5451":{"ln":"IbbenbÃ¼ren","sn":"IbbenbÃ¼ren"},"5452":{"ln":"Mettingen (Westfalen)","sn":"Mettingen"},"5453":{"ln":"Recke","sn":"Recke"},"5454":{"ln":"Riesenbeck","sn":"Riesenbeck"},"5455":{"ln":"Brochterbeck","sn":"Brochterbeck"},"5456":{"ln":"Velpe","sn":"Velpe"},"5457":{"ln":"Schale","sn":"Schale"},"5458":{"ln":"Hopsten","sn":"Hopsten"},"5459":{"ln":"HÃ¶rstel","sn":"HÃ¶rstel"},"5461":{"ln":"Bramsche","sn":"Bramsche"},"5462":{"ln":"Ankum","sn":"Ankum"},"5464":{"ln":"Alfhausen","sn":"Alfhausen"},"5465":{"ln":"Neuenkirchen (bei Bramsche)","sn":"Neuenkirchen"},"5466":{"ln":"Merzen","sn":"Merzen"},"5468":{"ln":"Engter","sn":"Engter"},"5471":{"ln":"Bohmte","sn":"Bohmte"},"5472":{"ln":"Bad Essen","sn":"Bad Essen"},"5473":{"ln":"Ostercappeln","sn":"Ostercappeln"},"5474":{"ln":"Stemwede-Dielingen (Gemeinde Stemwede)","sn":"Stemwede-Dielingen"},"5475":{"ln":"Hunteburg","sn":"Hunteburg"},"5476":{"ln":"Venne","sn":"Venne"},"5481":{"ln":"Lengerich (Westfalen)","sn":"Lengerich"},"5482":{"ln":"Tecklenburg","sn":"Tecklenburg"},"5483":{"ln":"Lienen","sn":"Lienen"},"5484":{"ln":"Kattenvenne","sn":"Kattenvenne"},"5485":{"ln":"Ladbergen","sn":"Ladbergen"},"5491":{"ln":"Damme (DÃ¼mmer)","sn":"Damme"},"5492":{"ln":"Steinfeld (Oldenburg)","sn":"Steinfeld"},"5493":{"ln":"Neuenkirchen (Old.)","sn":"Neuenkirchen"},"5494":{"ln":"Holdorf (Nieders.)","sn":"Holdorf"},"5495":{"ln":"VÃ¶rden","sn":"VÃ¶rden"},"5502":{"ln":"Dransfeld","sn":"Dransfeld"},"5503":{"ln":"NÃ¶rten-Hardenberg","sn":"NÃ¶rten-Hardenberg"},"5504":{"ln":"Friedland (bei GÃ¶ttingen)","sn":"Friedland"},"5505":{"ln":"Hardegsen","sn":"Hardegsen"},"5506":{"ln":"Adelebsen","sn":"Adelebsen"},"5507":{"ln":"EbergÃ¶tzen","sn":"EbergÃ¶tzen"},"5508":{"ln":"Rittmarshausen","sn":"Rittmarshausen"},"5509":{"ln":"Rosdorf","sn":"Rosdorf"},"5520":{"ln":"Braunlage","sn":"Braunlage"},"5521":{"ln":"Herzberg am Harz","sn":"Herzberg"},"5522":{"ln":"Osterode (Harz)","sn":"Osterode"},"5523":{"ln":"Bad Sachsa","sn":"Bad Sachsa"},"5524":{"ln":"Bad Lauterberg (Harz)","sn":"Bad Lauterberg"},"5525":{"ln":"Walkenried","sn":"Walkenried"},"5527":{"ln":"Duderstadt","sn":"Duderstadt"},"5528":{"ln":"Gieboldehausen","sn":"Gieboldehausen"},"5529":{"ln":"Rhumspringe","sn":"Rhumspringe"},"5531":{"ln":"Holzminden","sn":"Holzminden"},"5532":{"ln":"Stadtoldendorf","sn":"Stadtoldendorf"},"5533":{"ln":"Bodenwerder","sn":"Bodenwerder"},"5534":{"ln":"Eschershausen (an der Lenne) (Niedersachsen)","sn":"Eschershausen"},"5535":{"ln":"Polle","sn":"Polle"},"5536":{"ln":"Neuhaus (bei Holzminden)","sn":"Neuhaus"},"5541":{"ln":"Hann. MÃ¼nden","sn":"Hann"},"5542":{"ln":"Witzenhausen","sn":"Witzenhausen"},"5543":{"ln":"Staufenberg (Niedersachsen)","sn":"Staufenberg"},"5544":{"ln":"Reinhardshagen","sn":"Reinhardshagen"},"5545":{"ln":"HedemÃ¼nden","sn":"HedemÃ¼nden"},"5546":{"ln":"Scheden","sn":"Scheden"},"5551":{"ln":"Northeim","sn":"Northeim"},"5552":{"ln":"Katlenburg","sn":"Katlenburg"},"5553":{"ln":"Kalefeld","sn":"Kalefeld"},"5554":{"ln":"Moringen","sn":"Moringen"},"5555":{"ln":"Fredelsloh","sn":"Fredelsloh"},"5556":{"ln":"Lindau (Harz)","sn":"Lindau"},"5561":{"ln":"Einbeck","sn":"Einbeck"},"5562":{"ln":"Markoldendorf","sn":"Markoldendorf"},"5563":{"ln":"Kreiensen","sn":"Kreiensen"},"5564":{"ln":"Dassel","sn":"Dassel"},"5565":{"ln":"Wenzen","sn":"Wenzen"},"5571":{"ln":"Uslar","sn":"Uslar"},"5572":{"ln":"Bodenfelde","sn":"Bodenfelde"},"5573":{"ln":"Volpriehausen","sn":"Volpriehausen"},"5574":{"ln":"Oberweser","sn":"Oberweser"},"5582":{"ln":"Sankt Andreasberg","sn":"Sankt"},"5583":{"ln":"HohegeiÃ","sn":"HohegeiÃ"},"5584":{"ln":"Hattorf","sn":"Hattorf"},"5585":{"ln":"Sieber","sn":"Sieber"},"5592":{"ln":"Gleichen-Bremke","sn":"Gleichen-Bremke"},"5593":{"ln":"Lenglern (bei Bovenden)","sn":"Lenglern"},"5594":{"ln":"Reyershausen","sn":"Reyershausen"},"5601":{"ln":"Schauenburg","sn":"Schauenburg"},"5602":{"ln":"Hessisch Lichtenau, Eschenstruth","sn":"Hessisch Lichtenau"},"5603":{"ln":"Gudensberg","sn":"Gudensberg"},"5604":{"ln":"GroÃalmerode","sn":"GroÃalmerode"},"5605":{"ln":"Kaufungen","sn":"Kaufungen"},"5606":{"ln":"Zierenberg","sn":"Zierenberg"},"5607":{"ln":"Fuldatal","sn":"Fuldatal"},"5608":{"ln":"SÃ¶hrewald","sn":"SÃ¶hrewald"},"5609":{"ln":"Ahnatal","sn":"Ahnatal"},"5621":{"ln":"Bad Wildungen","sn":"Bad Wildungen"},"5622":{"ln":"Fritzlar","sn":"Fritzlar"},"5623":{"ln":"Edertal","sn":"Edertal"},"5624":{"ln":"Emstal","sn":"Emstal"},"5625":{"ln":"Naumburg (Hessen)","sn":"Naumburg"},"5626":{"ln":"Zwesten","sn":"Zwesten"},"5631":{"ln":"Korbach","sn":"Korbach"},"5632":{"ln":"Willingen (Upland)","sn":"Willingen"},"5633":{"ln":"Diemelsee","sn":"Diemelsee"},"5634":{"ln":"Waldeck","sn":"Waldeck"},"5635":{"ln":"Voehl","sn":"Voehl"},"5636":{"ln":"Lichtenfels-Goddelsheim","sn":"Lichtenfels-Goddelsheim"},"5641":{"ln":"Warburg","sn":"Warburg"},"5642":{"ln":"Scherfede","sn":"Scherfede"},"5643":{"ln":"Borgentreich","sn":"Borgentreich"},"5644":{"ln":"Peckelsheim","sn":"Peckelsheim"},"5645":{"ln":"Borgholz (bei Borgentreich)","sn":"Borgholz"},"5646":{"ln":"Willebadessen","sn":"Willebadessen"},"5647":{"ln":"Kleinenberg","sn":"Kleinenberg"},"5648":{"ln":"Gehrden","sn":"Gehrden"},"5650":{"ln":"Cornberg","sn":"Cornberg"},"5651":{"ln":"Eschwege","sn":"Eschwege"},"5652":{"ln":"Bad Sooden-Allendorf","sn":"Bad Sooden-Allendorf"},"5653":{"ln":"Sontra","sn":"Sontra"},"5654":{"ln":"Herleshausen","sn":"Herleshausen"},"5655":{"ln":"Wanfried","sn":"Wanfried"},"5656":{"ln":"Waldkappel","sn":"Waldkappel"},"5657":{"ln":"MeiÃner","sn":"MeiÃner"},"5658":{"ln":"Wehretal","sn":"Wehretal"},"5659":{"ln":"Ringgau","sn":"Ringgau"},"5661":{"ln":"Melsungen","sn":"Melsungen"},"5662":{"ln":"Felsberg (Hessen)","sn":"Felsberg"},"5663":{"ln":"Spangenberg","sn":"Spangenberg"},"5664":{"ln":"Morschen","sn":"Morschen"},"5665":{"ln":"Guxhagen","sn":"Guxhagen"},"5671":{"ln":"Hofgeismar","sn":"Hofgeismar"},"5672":{"ln":"Bad Karlshafen","sn":"Bad Karlshafen"},"5673":{"ln":"Immenhausen (Hessen)","sn":"Immenhausen"},"5674":{"ln":"Grebenstein","sn":"Grebenstein"},"5675":{"ln":"Trendelburg","sn":"Trendelburg"},"5676":{"ln":"Liebenau (Hessen)","sn":"Liebenau"},"5677":{"ln":"Calden-Westuffeln","sn":"Calden-Westuffeln"},"5681":{"ln":"Homberg (Efze)","sn":"Homberg"},"5682":{"ln":"Borken (Hessen)","sn":"Borken"},"5683":{"ln":"Wabern (Hessen)","sn":"Wabern"},"5684":{"ln":"Frielendorf","sn":"Frielendorf"},"5685":{"ln":"KnÃ¼llwald","sn":"KnÃ¼llwald"},"5686":{"ln":"Schwarzenborn","sn":"Schwarzenborn"},"5691":{"ln":"Bad Arolsen","sn":"Bad Arolsen"},"5692":{"ln":"Wolfhagen","sn":"Wolfhagen"},"5693":{"ln":"Volkmarsen","sn":"Volkmarsen"},"5694":{"ln":"Diemelstadt","sn":"Diemelstadt"},"5695":{"ln":"Twistetal","sn":"Twistetal"},"5696":{"ln":"Landau (bei Arolsen)","sn":"Landau"},"5702":{"ln":"Lahde (Stadt Petershagen)","sn":"Lahde"},"5703":{"ln":"Hille","sn":"Hille"},"5704":{"ln":"Friedewalde (Stadt Petershagen)","sn":"Friedewalde"},"5705":{"ln":"Windheim (Stadt Petershagen)","sn":"Windheim"},"5706":{"ln":"Porta Westfalica","sn":"Porta"},"5707":{"ln":"Petershagen","sn":"Petershagen"},"5721":{"ln":"Stadthagen","sn":"Stadthagen"},"5722":{"ln":"BÃ¼ckeburg","sn":"BÃ¼ckeburg"},"5723":{"ln":"Bad Nenndorf","sn":"Bad Nenndorf"},"5724":{"ln":"Obernkirchen","sn":"Obernkirchen"},"5725":{"ln":"Lindhorst (bei Stadthagen)","sn":"Lindhorst"},"5726":{"ln":"Wiedensahl","sn":"Wiedensahl"},"5731":{"ln":"Bad Oeynhausen","sn":"Bad Oeynhausen"},"5732":{"ln":"LÃ¶hne","sn":"LÃ¶hne"},"5733":{"ln":"Vlotho","sn":"Vlotho"},"5734":{"ln":"Bergkirchen (Westfalen) (Stadt Bad Oeynhausen)","sn":"Bergkirchen"},"5741":{"ln":"LÃ¼bbecke","sn":"LÃ¼bbecke"},"5742":{"ln":"PreuÃisch Oldendorf","sn":"PreuÃisch Oldendorf"},"5743":{"ln":"Gestringen (Stadt Espelkamp)","sn":"Gestringen"},"5744":{"ln":"HÃ¼llhorst","sn":"HÃ¼llhorst"},"5745":{"ln":"Levern (Gemeinde Stemwede)","sn":"Levern"},"5746":{"ln":"RÃ¶dinghausen","sn":"RÃ¶dinghausen"},"5751":{"ln":"Rinteln","sn":"Rinteln"},"5752":{"ln":"Hattendorf","sn":"Hattendorf"},"5753":{"ln":"Bernsen","sn":"Bernsen"},"5754":{"ln":"Bremke (Gemeinde Extertal)","sn":"Bremke"},"5755":{"ln":"Varenholz (Gemeinde Kalletal)","sn":"Varenholz"},"5761":{"ln":"Stolzenau","sn":"Stolzenau"},"5764":{"ln":"Steyerberg","sn":"Steyerberg"},"5765":{"ln":"Raddestorf","sn":"Raddestorf"},"5766":{"ln":"Loccum","sn":"Loccum"},"5767":{"ln":"Warmsen","sn":"Warmsen"},"5768":{"ln":"Heimsen (Stadt Petershagen)","sn":"Heimsen"},"5769":{"ln":"Voigtei","sn":"Voigtei"},"5771":{"ln":"Rahden (Westfalen)","sn":"Rahden"},"5772":{"ln":"Espelkamp","sn":"Espelkamp"},"5773":{"ln":"Wehdem (Gemeinde Stemwede)","sn":"Wehdem"},"5774":{"ln":"StrÃ¶hen","sn":"StrÃ¶hen"},"5775":{"ln":"Diepenau","sn":"Diepenau"},"5776":{"ln":"PreuÃisch StrÃ¶hen (Stadt Rahden)","sn":"PreuÃisch StrÃ¶hen"},"5777":{"ln":"Essern","sn":"Essern"},"5802":{"ln":"Wrestedt","sn":"Wrestedt"},"5803":{"ln":"Rosche","sn":"Rosche"},"5804":{"ln":"RÃ¤tzlingen","sn":"RÃ¤tzlingen"},"5805":{"ln":"Oetzen","sn":"Oetzen"},"5806":{"ln":"Barum","sn":"Barum"},"5807":{"ln":"Altenmedingen","sn":"Altenmedingen"},"5820":{"ln":"Suhlendorf","sn":"Suhlendorf"},"5821":{"ln":"Bad Bevensen","sn":"Bad Bevensen"},"5822":{"ln":"Ebstorf","sn":"Ebstorf"},"5823":{"ln":"BienenbÃ¼ttel","sn":"BienenbÃ¼ttel"},"5824":{"ln":"Bad Bodenteich","sn":"Bad Bodenteich"},"5825":{"ln":"Wieren","sn":"Wieren"},"5826":{"ln":"Suderburg","sn":"Suderburg"},"5827":{"ln":"UnterlÃ¼Ã","sn":"UnterlÃ¼Ã"},"5828":{"ln":"Himbergen","sn":"Himbergen"},"5829":{"ln":"Wriedel","sn":"Wriedel"},"5831":{"ln":"Wittingen","sn":"Wittingen"},"5832":{"ln":"HankensbÃ¼ttel","sn":"HankensbÃ¼ttel"},"5833":{"ln":"Brome","sn":"Brome"},"5834":{"ln":"Knesebeck","sn":"Knesebeck"},"5835":{"ln":"Wahrenholz","sn":"Wahrenholz"},"5836":{"ln":"Radenbeck","sn":"Radenbeck"},"5837":{"ln":"Sprakensehl","sn":"Sprakensehl"},"5838":{"ln":"GroÃ Oesingen","sn":"GroÃ Oesingen"},"5839":{"ln":"Ohrdorf","sn":"Ohrdorf"},"5840":{"ln":"Schnackenburg","sn":"Schnackenburg"},"5841":{"ln":"LÃ¼chow","sn":"LÃ¼chow"},"5842":{"ln":"Schnega","sn":"Schnega"},"5843":{"ln":"Wustrow (Wendland)","sn":"Wustrow"},"5844":{"ln":"Clenze","sn":"Clenze"},"5845":{"ln":"Bergen an der Dumme","sn":"Bergen"},"5846":{"ln":"Gartow","sn":"Gartow"},"5848":{"ln":"Trebel","sn":"Trebel"},"5849":{"ln":"Waddeweitz","sn":"Waddeweitz"},"5850":{"ln":"Neetze","sn":"Neetze"},"5851":{"ln":"Dahlenburg","sn":"Dahlenburg"},"5852":{"ln":"Bleckede","sn":"Bleckede"},"5853":{"ln":"Neu Darchau","sn":"Neu"},"5854":{"ln":"Barskamp","sn":"Barskamp"},"5855":{"ln":"Nahrendorf","sn":"Nahrendorf"},"5857":{"ln":"Brackede","sn":"Brackede"},"5858":{"ln":"Wietzetze","sn":"Wietzetze"},"5859":{"ln":"Thomasburg","sn":"Thomasburg"},"5861":{"ln":"Dannenberg (Elbe)","sn":"Dannenberg"},"5862":{"ln":"Hitzacker","sn":"Hitzacker"},"5863":{"ln":"Zernien","sn":"Zernien"},"5864":{"ln":"Jameln","sn":"Jameln"},"5865":{"ln":"Gusborn","sn":"Gusborn"},"5872":{"ln":"StÃ¶tze","sn":"StÃ¶tze"},"5874":{"ln":"Soltendieck","sn":"Soltendieck"},"5875":{"ln":"Emmendorf","sn":"Emmendorf"},"5882":{"ln":"Gorleben","sn":"Gorleben"},"5883":{"ln":"Lemgow","sn":"Lemgow"},"5901":{"ln":"FÃ¼rstenau","sn":"FÃ¼rstenau"},"5902":{"ln":"Freren","sn":"Freren"},"5903":{"ln":"EmsbÃ¼ren","sn":"EmsbÃ¼ren"},"5904":{"ln":"Lengerich (Emsland)","sn":"Lengerich"},"5905":{"ln":"Beesten","sn":"Beesten"},"5906":{"ln":"LÃ¼nne","sn":"LÃ¼nne"},"5907":{"ln":"Geeste","sn":"Geeste"},"5908":{"ln":"Lohne (Kreis Nordhorn)","sn":"Lohne"},"5909":{"ln":"Wettrup","sn":"Wettrup"},"5921":{"ln":"Nordhorn","sn":"Nordhorn"},"5922":{"ln":"Bad Bentheim","sn":"Bad Bentheim"},"5923":{"ln":"SchÃ¼ttorf","sn":"SchÃ¼ttorf"},"5924":{"ln":"Gildehaus","sn":"Gildehaus"},"5925":{"ln":"Wietmarschen","sn":"Wietmarschen"},"5926":{"ln":"Engden","sn":"Engden"},"5931":{"ln":"Meppen","sn":"Meppen"},"5932":{"ln":"Haren (Ems)","sn":"Haren"},"5933":{"ln":"Lathen","sn":"Lathen"},"5934":{"ln":"RÃ¼tenbrock","sn":"RÃ¼tenbrock"},"5935":{"ln":"SchÃ¶ninghsdorf","sn":"SchÃ¶ninghsdorf"},"5936":{"ln":"Twist","sn":"Twist"},"5937":{"ln":"GroÃ Hesepe","sn":"GroÃ Hesepe"},"5939":{"ln":"Sustrum","sn":"Sustrum"},"5941":{"ln":"Neuenhaus (Dinkel)","sn":"Neuenhaus"},"5942":{"ln":"Uelsen","sn":"Uelsen"},"5943":{"ln":"Emlichheim","sn":"Emlichheim"},"5944":{"ln":"Hoogstede","sn":"Hoogstede"},"5946":{"ln":"Georgsdorf","sn":"Georgsdorf"},"5947":{"ln":"Laar (Vechte)","sn":"Laar"},"5948":{"ln":"Itterbeck","sn":"Itterbeck"},"5951":{"ln":"Werlte","sn":"Werlte"},"5952":{"ln":"SÃ¶gel","sn":"SÃ¶gel"},"5954":{"ln":"Lorup","sn":"Lorup"},"5955":{"ln":"Esterwegen","sn":"Esterwegen"},"5956":{"ln":"Rastdorf","sn":"Rastdorf"},"5957":{"ln":"Lindern (Old.)","sn":"Lindern"},"5961":{"ln":"HaselÃ¼nne","sn":"HaselÃ¼nne"},"5962":{"ln":"Herzlake","sn":"Herzlake"},"5963":{"ln":"Bawinkel","sn":"Bawinkel"},"5964":{"ln":"LÃ¤hden","sn":"LÃ¤hden"},"5965":{"ln":"Klein BerÃen","sn":"Klein BerÃen"},"5966":{"ln":"Apeldorn","sn":"Apeldorn"},"5971":{"ln":"Rheine","sn":"Rheine"},"5973":{"ln":"Neuenkirchen (Kreis Steinfurt)","sn":"Neuenkirchen"},"5975":{"ln":"Mesum","sn":"Mesum"},"5976":{"ln":"Salzbergen","sn":"Salzbergen"},"5977":{"ln":"Spelle","sn":"Spelle"},"5978":{"ln":"Dreierwalde","sn":"Dreierwalde"},"6002":{"ln":"Ober-MÃ¶rlen","sn":"Ober-MÃ¶rlen"},"6003":{"ln":"Rosbach v.d. HÃ¶he","sn":"Rosbach"},"6004":{"ln":"Lich-Eberstadt","sn":"Lich-Eberstadt"},"6007":{"ln":"Rosbach-Rodheim, Friedrichsdorf-Burgholzhausen","sn":"Rosbach-Rodheim"},"6008":{"ln":"Echzell","sn":"Echzell"},"6020":{"ln":"HeigenbrÃ¼cken","sn":"HeigenbrÃ¼cken"},"6021":{"ln":"Aschaffenburg","sn":"Aschaffenburg"},"6022":{"ln":"Obernburg","sn":"Obernburg"},"6023":{"ln":"Alzenau","sn":"Alzenau"},"6024":{"ln":"SchÃ¶llkrippen, Kahlgrund","sn":"SchÃ¶llkrippen"},"6026":{"ln":"GroÃostheim","sn":"GroÃostheim"},"6027":{"ln":"Stockstadt, Kleinostheim","sn":"Stockstadt"},"6028":{"ln":"Niedernberg, Sulzbach","sn":"Niedernberg"},"6029":{"ln":"MÃ¶mbris, Johannesberg","sn":"MÃ¶mbris"},"6031":{"ln":"Friedberg (Hessen)","sn":"Friedberg"},"6032":{"ln":"Bad Nauheim","sn":"Bad Nauheim"},"6033":{"ln":"Butzbach","sn":"Butzbach"},"6034":{"ln":"WÃ¶llstadt, Niddatal, Karben-Burg-GrÃ¤fenrode","sn":"WÃ¶llstadt"},"6035":{"ln":"Florstadt, Reichelsheim (Wetterau)","sn":"Florstadt"},"6036":{"ln":"WÃ¶lfersheim","sn":"WÃ¶lfersheim"},"6039":{"ln":"Karben","sn":"Karben"},"6041":{"ln":"Glauburg","sn":"Glauburg"},"6042":{"ln":"BÃ¼dingen","sn":"BÃ¼dingen"},"6043":{"ln":"Nidda","sn":"Nidda"},"6044":{"ln":"Schotten","sn":"Schotten"},"6045":{"ln":"Gedern","sn":"Gedern"},"6046":{"ln":"Ortenberg","sn":"Ortenberg"},"6047":{"ln":"Altenstadt (Hessen)","sn":"Altenstadt"},"6048":{"ln":"BÃ¼dingen-Eckartshausen","sn":"BÃ¼dingen-Eckartshausen"},"6049":{"ln":"Kefenrod","sn":"Kefenrod"},"6050":{"ln":"BiebergemÃ¼nd","sn":"BiebergemÃ¼nd"},"6051":{"ln":"Gelnhausen, Linsengericht","sn":"Gelnhausen"},"6052":{"ln":"Bad Orb","sn":"Bad Orb"},"6053":{"ln":"WÃ¤chtersbach","sn":"WÃ¤chtersbach"},"6054":{"ln":"Birstein, Brachttal","sn":"Birstein"},"6055":{"ln":"Freigericht, Hasselroth","sn":"Freigericht"},"6056":{"ln":"Bad Soden-SalmÃ¼nster","sn":"Bad Soden-SalmÃ¼nster"},"6057":{"ln":"FlÃ¶rsbachtal","sn":"FlÃ¶rsbachtal"},"6058":{"ln":"GrÃ¼ndau","sn":"GrÃ¼ndau"},"6059":{"ln":"Jossgrund","sn":"Jossgrund"},"6061":{"ln":"Michelstadt","sn":"Michelstadt"},"6062":{"ln":"Erbach (Odenwald)","sn":"Erbach"},"6063":{"ln":"Bad KÃ¶nig","sn":"Bad KÃ¶nig"},"6066":{"ln":"Michelstadt-Vielbrunn","sn":"Michelstadt-Vielbrunn"},"6068":{"ln":"Beerfelden","sn":"Beerfelden"},"6071":{"ln":"Dieburg","sn":"Dieburg"},"6073":{"ln":"Babenhausen","sn":"Babenhausen"},"6074":{"ln":"RÃ¶dermark, Dietzenbach","sn":"RÃ¶dermark"},"6078":{"ln":"GroÃ-Umstadt","sn":"GroÃ-Umstadt"},"6081":{"ln":"Usingen, Neu-Anspach, Wehrheim","sn":"Usingen"},"6082":{"ln":"Niederreifenberg","sn":"Niederreifenberg"},"6083":{"ln":"Weilrod","sn":"Weilrod"},"6084":{"ln":"Schmitten","sn":"Schmitten"},"6085":{"ln":"Waldsolms","sn":"Waldsolms"},"6086":{"ln":"GrÃ¤venwiesbach","sn":"GrÃ¤venwiesbach"},"6087":{"ln":"Waldems","sn":"Waldems"},"6092":{"ln":"Heimbuchenthal","sn":"Heimbuchenthal"},"6093":{"ln":"Laufach","sn":"Laufach"},"6094":{"ln":"Weibersbrunn","sn":"Weibersbrunn"},"6095":{"ln":"Bessenbach","sn":"Bessenbach"},"6096":{"ln":"Wiesen (Unterfranken)","sn":"Wiesen"},"6101":{"ln":"Bad Vilbel, Niederdorfelden, Frankfurt-Nieder-Erlenbach, Frankfurt-Harheim","sn":"Bad Vilbel"},"6102":{"ln":"Neu-Isenburg","sn":"Neu-Isenburg"},"6103":{"ln":"Langen, Egelsbach","sn":"Langen"},"6104":{"ln":"Heusenstamm, Obertshausen","sn":"Heusenstamm"},"6105":{"ln":"MÃ¶rfelden-Walldorf","sn":"MÃ¶rfelden-Walldorf"},"6106":{"ln":"Rodgau, Heusenstamm","sn":"Rodgau"},"6107":{"ln":"Kelsterbach","sn":"Kelsterbach"},"6108":{"ln":"MÃ¼hlheim am Main","sn":"MÃ¼hlheim"},"6109":{"ln":"Frankfurt-Bergen-Enkheim","sn":"Frankfurt-Bergen-Enkheim"},"6120":{"ln":"Aarbergen","sn":"Aarbergen"},"6122":{"ln":"Hofheim-Wallau","sn":"Hofheim-Wallau"},"6123":{"ln":"Eltville, Walluf","sn":"Eltville"},"6124":{"ln":"Bad Schwalbach","sn":"Bad Schwalbach"},"6126":{"ln":"Idstein","sn":"Idstein"},"6127":{"ln":"Niedernhausen","sn":"Niedernhausen"},"6128":{"ln":"Taunusstein","sn":"Taunusstein"},"6129":{"ln":"Schlangenbad","sn":"Schlangenbad"},"6130":{"ln":"Schwabenheim an der Selz","sn":"Schwabenheim"},"6131":{"ln":"Mainz","sn":"Mainz"},"6132":{"ln":"Ingelheim am Rhein","sn":"Ingelheim"},"6133":{"ln":"Nierstein, Oppenheim","sn":"Nierstein"},"6134":{"ln":"Mainz-Kastel","sn":"Mainz-Kastel"},"6135":{"ln":"Bodenheim","sn":"Bodenheim"},"6136":{"ln":"Nieder-Olm","sn":"Nieder-Olm"},"6138":{"ln":"Mommenheim","sn":"Mommenheim"},"6139":{"ln":"Budenheim","sn":"Budenheim"},"6142":{"ln":"RÃ¼sselsheim, Raunheim","sn":"RÃ¼sselsheim"},"6144":{"ln":"Bischofsheim (Mainspitze)","sn":"Bischofsheim"},"6145":{"ln":"FlÃ¶rsheim am Main","sn":"FlÃ¶rsheim"},"6146":{"ln":"Hochheim am Main","sn":"Hochheim"},"6147":{"ln":"Trebur","sn":"Trebur"},"6150":{"ln":"Weiterstadt, Erzhausen, Darmstadt-Wixhausen","sn":"Weiterstadt"},"6151":{"ln":"Darmstadt","sn":"Darmstadt"},"6152":{"ln":"GroÃ-Gerau, BÃ¼ttelborn","sn":"GroÃ-Gerau"},"6154":{"ln":"Ober-Ramstadt","sn":"Ober-Ramstadt"},"6155":{"ln":"Griesheim (Hessen)","sn":"Griesheim"},"6157":{"ln":"Pfungstadt","sn":"Pfungstadt"},"6158":{"ln":"Riedstadt","sn":"Riedstadt"},"6159":{"ln":"Messel","sn":"Messel"},"6161":{"ln":"Brensbach","sn":"Brensbach"},"6162":{"ln":"GroÃ-Bieberau, Reinheim","sn":"GroÃ-Bieberau"},"6163":{"ln":"HÃ¶chst im Odenwald","sn":"HÃ¶chst"},"6164":{"ln":"Reichelsheim (Odenwald)","sn":"Reichelsheim"},"6165":{"ln":"Breuberg","sn":"Breuberg"},"6166":{"ln":"Fischbachtal","sn":"Fischbachtal"},"6167":{"ln":"Modautal","sn":"Modautal"},"6171":{"ln":"Oberursel","sn":"Oberursel"},"6172":{"ln":"Bad Homburg","sn":"Bad Homburg"},"6173":{"ln":"Kronberg im Taunus","sn":"Kronberg"},"6174":{"ln":"KÃ¶nigstein im Taunus","sn":"KÃ¶nigstein"},"6175":{"ln":"Friedrichsdorf (Taunus)","sn":"Friedrichsdorf"},"6181":{"ln":"Hanau","sn":"Hanau"},"6182":{"ln":"Seligenstadt","sn":"Seligenstadt"},"6183":{"ln":"Erlensee","sn":"Erlensee"},"6184":{"ln":"Langenselbold, Rodenbach (bei Hanau)","sn":"Langenselbold"},"6185":{"ln":"Hammersbach (Hessen)","sn":"Hammersbach"},"6186":{"ln":"GroÃkrotzenburg","sn":"GroÃkrotzenburg"},"6187":{"ln":"Nidderau, SchÃ¶neck (Hessen)","sn":"Nidderau"},"6190":{"ln":"Hattersheim am Main","sn":"Hattersheim"},"6192":{"ln":"Hofheim am Taunus, Kriftel","sn":"Hofheim"},"6195":{"ln":"Kelkheim","sn":"Kelkheim"},"6196":{"ln":"Bad Soden am Taunus, Eschborn, Liederbach am Taunus, Schwalbach am Taunus, Sulzbach","sn":"Bad Soden"},"6198":{"ln":"Eppstein","sn":"Eppstein"},"6201":{"ln":"Birkenau, Gorxheimertal, Hemsbach, Hirschberg an der BergstraÃe, Laudenbach, Weinheim","sn":"Birkenau"},"6202":{"ln":"BrÃ¼hl, Ketsch, Oftersheim, Plankstadt, Schwetzingen","sn":"BrÃ¼hl"},"6203":{"ln":"Edingen-Neckarhausen, Heddesheim, Ladenburg, Schriesheim","sn":"Edingen-Neckarhausen"},"6204":{"ln":"Viernheim","sn":"Viernheim"},"6205":{"ln":"AltluÃheim, Hockenheim, NeuluÃheim, Reilingen","sn":"AltluÃheim"},"6206":{"ln":"BÃ¼rstadt, Lampertheim","sn":"BÃ¼rstadt"},"6207":{"ln":"Wald-Michelbach","sn":"Wald-Michelbach"},"6209":{"ln":"MÃ¶rlenbach","sn":"MÃ¶rlenbach"},"6220":{"ln":"Heiligkreuzsteinach, Wilhelmsfeld","sn":"Heiligkreuzsteinach"},"6221":{"ln":"Heidelberg, Dossenheim, Eppelheim","sn":"Heidelberg"},"6222":{"ln":"Dielheim, MÃ¼hlhausen, Rauenberg, Wiesloch","sn":"Dielheim"},"6223":{"ln":"Bammental, Gaiberg, NeckargemÃ¼nd, Wiesenbach","sn":"Bammental"},"6224":{"ln":"Leimen, NuÃloch, Sandhausen","sn":"Leimen"},"6226":{"ln":"Eschelbronn, Lobbach, Mauer, Meckesheim, Spechbach, Zuzenhausen","sn":"Eschelbronn"},"6227":{"ln":"St. Leon-Rot, Walldorf","sn":"St. Leon-Rot"},"6228":{"ln":"SchÃ¶nau","sn":"SchÃ¶nau"},"6229":{"ln":"Neckarsteinach","sn":"Neckarsteinach"},"6231":{"ln":"Hochdorf-Assenheim","sn":"Hochdorf-Assenheim"},"6232":{"ln":"Speyer","sn":"Speyer"},"6233":{"ln":"Frankenthal","sn":"Frankenthal"},"6234":{"ln":"Mutterstadt","sn":"Mutterstadt"},"6235":{"ln":"Schifferstadt","sn":"Schifferstadt"},"6236":{"ln":"Limburgerhof, Neuhofen","sn":"Limburgerhof"},"6237":{"ln":"Ludwigshafen-Ruchheim, Maxdorf","sn":"Ludwigshafen-Ruchheim"},"6238":{"ln":"Gerolsheim","sn":"Gerolsheim"},"6239":{"ln":"Bobenheim-Roxheim","sn":"Bobenheim-Roxheim"},"6241":{"ln":"Worms","sn":"Worms"},"6242":{"ln":"Worms-Abenheim","sn":"Worms-Abenheim"},"6245":{"ln":"Biblis","sn":"Biblis"},"6247":{"ln":"Worms-Pfeddersheim","sn":"Worms-Pfeddersheim"},"6251":{"ln":"Bensheim","sn":"Bensheim"},"6252":{"ln":"Heppenheim","sn":"Heppenheim"},"6253":{"ln":"FÃ¼rth","sn":"FÃ¼rth"},"6254":{"ln":"Lautertal","sn":"Lautertal"},"6255":{"ln":"Lindenfels","sn":"Lindenfels"},"6256":{"ln":"Lampertheim-HÃ¼ttenfeld","sn":"Lampertheim-HÃ¼ttenfeld"},"6257":{"ln":"Seeheim-Jugenheim","sn":"Seeheim-Jugenheim"},"6258":{"ln":"Gernsheim","sn":"Gernsheim"},"6261":{"ln":"Elztal, Mosbach, Neckarzimmern, Obrigheim","sn":"Elztal"},"6262":{"ln":"Aglasterhausen, Neunkirchen, Reichartshausen, SchÃ¶nbrunn, Schwarzach","sn":"Aglasterhausen"},"6263":{"ln":"Neckargerach, Binau","sn":"Neckargerach"},"6264":{"ln":"Neudenau","sn":"Neudenau"},"6265":{"ln":"Billigheim","sn":"Billigheim"},"6266":{"ln":"HaÃmersheim","sn":"HaÃmersheim"},"6267":{"ln":"Fahrenbach","sn":"Fahrenbach"},"6268":{"ln":"HÃ¼ffenhardt","sn":"HÃ¼ffenhardt"},"6271":{"ln":"Eberbach","sn":"Eberbach"},"6272":{"ln":"Hirschhorn (Neckar)","sn":"Hirschhorn"},"6274":{"ln":"Waldbrunn","sn":"Waldbrunn"},"6275":{"ln":"Rothenberg","sn":"Rothenberg"},"6276":{"ln":"Hesseneck","sn":"Hesseneck"},"6281":{"ln":"Buchen (Odenwald)","sn":"Buchen"},"6282":{"ln":"WalldÃ¼rn","sn":"WalldÃ¼rn"},"6283":{"ln":"Hardheim, HÃ¶pfingen","sn":"Hardheim"},"6284":{"ln":"Mudau","sn":"Mudau"},"6285":{"ln":"WalldÃ¼rn-Altheim","sn":"WalldÃ¼rn-Altheim"},"6286":{"ln":"WalldÃ¼rn-Rippberg","sn":"WalldÃ¼rn-Rippberg"},"6287":{"ln":"Limbach","sn":"Limbach"},"6291":{"ln":"Adelsheim, Osterburken","sn":"Adelsheim"},"6292":{"ln":"Seckach","sn":"Seckach"},"6293":{"ln":"Schefflenz","sn":"Schefflenz"},"6295":{"ln":"Rosenberg","sn":"Rosenberg"},"6297":{"ln":"Ravenstein","sn":"Ravenstein"},"6298":{"ln":"MÃ¶ckmÃ¼hl","sn":"MÃ¶ckmÃ¼hl"},"6301":{"ln":"Otterbach","sn":"Otterbach"},"6302":{"ln":"Winnweiler","sn":"Winnweiler"},"6303":{"ln":"Enkenbach-Alsenborn, Mehlingen","sn":"Enkenbach-Alsenborn"},"6307":{"ln":"Geiselberg, Krickenbach, Linden, Schmalenberg, Schopp","sn":"Geiselberg"},"6321":{"ln":"Neustadt an der WeinstraÃe","sn":"Neustadt"},"6322":{"ln":"Bad DÃ¼rkheim","sn":"Bad DÃ¼rkheim"},"6323":{"ln":"Edenkoben, Edesheim, Flemlingen, GroÃfischlingen, Hainfeld (Pfalz), Rhodt unter Rietburg, Roschbach, Sankt Martin (Pfalz), Venningen, Weyher in der Pfalz","sn":"Edenkoben"},"6327":{"ln":"Lachen-Speyerdorf","sn":"Lachen-Speyerdorf"},"6331":{"ln":"HÃ¶heischweiler, Pirmasens","sn":"HÃ¶heischweiler"},"6333":{"ln":"Clausen, Donsieders, Heltersberg, Hermersberg, HÃ¶heinÃ¶d, Horbach, Steinalben, Waldfischbach-Burgalben, Weselberg","sn":"Clausen"},"6334":{"ln":"HÃ¶hfrÃ¶schen, MaÃweiler, Petersberg, Thaleischweiler-FrÃ¶schen","sn":"HÃ¶hfrÃ¶schen"},"6336":{"ln":"NÃ¼nschweiler, Rieschweiler-MÃ¼hlbach","sn":"NÃ¼nschweiler"},"6340":{"ln":"Dierbach, Freckenfeld, Kapsweyer, Niederotterbach, Steinfeld (Pfalz), Vollmersweiler, WÃ¶rth-Schaidt","sn":"Dierbach"},"6341":{"ln":"Landau in der Pfalz","sn":"Landau"},"6342":{"ln":"Schweigen-Rechtenbach","sn":"Schweigen-Rechtenbach"},"6343":{"ln":"Bad Bergzabern","sn":"Bad Bergzabern"},"6344":{"ln":"Schwegenheim","sn":"Schwegenheim"},"6345":{"ln":"Albersweiler","sn":"Albersweiler"},"6346":{"ln":"Annweiler am Trifels","sn":"Annweiler"},"6347":{"ln":"Hochstadt (Pfalz)","sn":"Hochstadt"},"6348":{"ln":"Offenbach an der Queich","sn":"Offenbach"},"6349":{"ln":"Billigheim-Ingenheim","sn":"Billigheim-Ingenheim"},"6351":{"ln":"Eisenberg, GÃ¶llheim","sn":"Eisenberg"},"6352":{"ln":"Kirchheimbolanden","sn":"Kirchheimbolanden"},"6353":{"ln":"Freinsheim, Weisenheim am Sand, Dackenheim, Bobenheim am Berg, Erpolzheim, Herxheim am Berg, Weisenheim am Berg","sn":"Freinsheim"},"6359":{"ln":"GrÃ¼nstadt","sn":"GrÃ¼nstadt"},"6371":{"ln":"Landstuhl, Obernheim-Kirchenarnbach","sn":"Landstuhl"},"6372":{"ln":"BruchmÃ¼hlbach-Miesau","sn":"BruchmÃ¼hlbach-Miesau"},"6373":{"ln":"Waldmohr, SchÃ¶nenberg-KÃ¼belberg","sn":"Waldmohr"},"6374":{"ln":"Weilerbach","sn":"Weilerbach"},"6375":{"ln":"Biedershausen, Herschberg, Hettenhausen, Knopp-Labach, Reifenberg, Saalstadt, Schauerberg, Schmitshausen, Wallhalben","sn":"Biedershausen"},"6385":{"ln":"Reichenbach-Steegen, Albersbach","sn":"Reichenbach-Steegen"},"6400":{"ln":"MÃ¼cke","sn":"MÃ¼cke"},"6401":{"ln":"GrÃ¼nberg","sn":"GrÃ¼nberg"},"6403":{"ln":"LanggÃ¶ns, Linden","sn":"LanggÃ¶ns"},"6404":{"ln":"Fernwald, Lich","sn":"Fernwald"},"6405":{"ln":"Laubach","sn":"Laubach"},"6406":{"ln":"Lollar, Staufenberg","sn":"Lollar"},"6407":{"ln":"Rabenau","sn":"Rabenau"},"6408":{"ln":"Buseck, Reiskirchen","sn":"Buseck"},"6409":{"ln":"Biebertal","sn":"Biebertal"},"6420":{"ln":"Lahntal (teilw.)","sn":"Lahntal"},"6421":{"ln":"Marburg, Weimar (Lahn) (teilw.), CÃ¶lbe (teilw.)","sn":"Marburg"},"6422":{"ln":"Kirchhain, AmÃ¶neburg","sn":"Kirchhain"},"6423":{"ln":"Wetter, Lahntal (teilw.), MÃ¼nchhausen (teilw.)","sn":"Wetter"},"6424":{"ln":"Ebsdorfergrund","sn":"Ebsdorfergrund"},"6425":{"ln":"Rauschenberg","sn":"Rauschenberg"},"6426":{"ln":"Weimar (Lahn) (teilw.), Fronhausen","sn":"Weimar"},"6427":{"ln":"CÃ¶lbe (teilw.)","sn":"CÃ¶lbe"},"6428":{"ln":"Stadtallendorf (teilw.)","sn":"Stadtallendorf"},"6429":{"ln":"Stadtallendorf (teilw.)","sn":"Stadtallendorf"},"6431":{"ln":"Limburg an der Lahn, Runkel","sn":"Limburg"},"6432":{"ln":"Diez","sn":"Diez"},"6433":{"ln":"Hadamar","sn":"Hadamar"},"6434":{"ln":"Bad Camberg","sn":"Bad Camberg"},"6435":{"ln":"Wallmerod","sn":"Wallmerod"},"6436":{"ln":"Dornburg (Hessen)","sn":"Dornburg"},"6438":{"ln":"HÃ¼nfelden","sn":"HÃ¼nfelden"},"6439":{"ln":"Holzappel","sn":"Holzappel"},"6441":{"ln":"Wetzlar","sn":"Wetzlar"},"6442":{"ln":"Braunfels","sn":"Braunfels"},"6443":{"ln":"Ehringshausen","sn":"Ehringshausen"},"6444":{"ln":"Bischoffen","sn":"Bischoffen"},"6445":{"ln":"SchÃ¶ffengrund","sn":"SchÃ¶ffengrund"},"6446":{"ln":"Hohenahr","sn":"Hohenahr"},"6447":{"ln":"LanggÃ¶ns-Niederkleen","sn":"LanggÃ¶ns-Niederkleen"},"6449":{"ln":"Ehringshausen-Katzenfurt","sn":"Ehringshausen-Katzenfurt"},"6451":{"ln":"Frankenberg (Eder)","sn":"Frankenberg"},"6452":{"ln":"Battenberg","sn":"Battenberg"},"6454":{"ln":"Wohratal","sn":"Wohratal"},"6457":{"ln":"Burgwald, MÃ¼nchhausen (teilw.)","sn":"Burgwald"},"6461":{"ln":"Biedenkopf","sn":"Biedenkopf"},"6462":{"ln":"Gladenbach, Lohra","sn":"Gladenbach"},"6464":{"ln":"Angelburg, Steffenberg","sn":"Angelburg"},"6465":{"ln":"Breidenbach","sn":"Breidenbach"},"6466":{"ln":"Dautphetal (teilw.)","sn":"Dautphetal"},"6467":{"ln":"Hatzfeld (Eder)","sn":"Hatzfeld"},"6468":{"ln":"Dautphetal (teilw.)","sn":"Dautphetal"},"6471":{"ln":"Weilburg an der Lahn","sn":"Weilburg"},"6472":{"ln":"WeilmÃ¼nster","sn":"WeilmÃ¼nster"},"6473":{"ln":"Leun","sn":"Leun"},"6474":{"ln":"Villmar","sn":"Villmar"},"6476":{"ln":"Mengerskirchen","sn":"Mengerskirchen"},"6477":{"ln":"Greifenstein-Nenderoth","sn":"Greifenstein-Nenderoth"},"6478":{"ln":"Greifenstein-Ulm","sn":"Greifenstein-Ulm"},"6479":{"ln":"Waldbrunn (Westerwald)","sn":"Waldbrunn"},"6482":{"ln":"Runkel","sn":"Runkel"},"6483":{"ln":"Selters (Taunus)","sn":"Selters"},"6484":{"ln":"Beselich","sn":"Beselich"},"6485":{"ln":"Nentershausen (Westerwald)","sn":"Nentershausen"},"6486":{"ln":"Katzenelnbogen","sn":"Katzenelnbogen"},"6501":{"ln":"Konz","sn":"Konz"},"6502":{"ln":"Schweich","sn":"Schweich"},"6531":{"ln":"Bernkastel-Kues","sn":"Bernkastel-Kues"},"6533":{"ln":"Morbach","sn":"Morbach"},"6535":{"ln":"Maring-Noviand, Osann-Monzel","sn":"Maring-Noviand"},"6541":{"ln":"Traben-Trarbach","sn":"Traben-Trarbach"},"6544":{"ln":"Rhaunen","sn":"Rhaunen"},"6551":{"ln":"PrÃ¼m","sn":"PrÃ¼m"},"6561":{"ln":"Bitburg","sn":"Bitburg"},"6571":{"ln":"Wittlich","sn":"Wittlich"},"6581":{"ln":"Saarburg","sn":"Saarburg"},"6588":{"ln":"Pluwig","sn":"Pluwig"},"6591":{"ln":"Gerolstein","sn":"Gerolstein"},"6592":{"ln":"Daun","sn":"Daun"},"6622":{"ln":"Bebra","sn":"Bebra"},"6641":{"ln":"Lauterbach (Hessen)","sn":"Lauterbach"},"6642":{"ln":"Schlitz","sn":"Schlitz"},"6643":{"ln":"Herbstein, Lautertal","sn":"Herbstein"},"6644":{"ln":"Grebenhain","sn":"Grebenhain"},"6645":{"ln":"Ulrichstein","sn":"Ulrichstein"},"6647":{"ln":"Herbstein-Stockhausen","sn":"Herbstein-Stockhausen"},"6648":{"ln":"Bad Salzschlirf, GroÃenlÃ¼der","sn":"Bad Salzschlirf"},"6656":{"ln":"Ebersburg","sn":"Ebersburg"},"6657":{"ln":"Hofbieber","sn":"Hofbieber"},"6658":{"ln":"Poppenhausen (Wasserkuppe)","sn":"Poppenhausen"},"6661":{"ln":"SchlÃ¼chtern","sn":"SchlÃ¼chtern"},"6692":{"ln":"Neustadt","sn":"Neustadt"},"6721":{"ln":"Bingen","sn":"Bingen"},"6722":{"ln":"RÃ¼desheim, Geisenheim, Johannisberg, Marienthal, Stephanshausen, Aulhausen, Assmannshausen","sn":"RÃ¼desheim"},"6723":{"ln":"Oestrich-Winkel, Mittelheim","sn":"Oestrich-Winkel"},"6724":{"ln":"Stromberg HunsrÃ¼ck","sn":"Stromberg"},"6725":{"ln":"Gau-Algesheim","sn":"Gau-Algesheim"},"6726":{"ln":"Lorch (Rheingau)","sn":"Lorch"},"6727":{"ln":"Gensingen","sn":"Gensingen"},"6728":{"ln":"Ober-Hilbersheim","sn":"Ober-Hilbersheim"},"6731":{"ln":"Alzey","sn":"Alzey"},"6732":{"ln":"Udenheim","sn":"Udenheim"},"6733":{"ln":"Gau-Odernheim","sn":"Gau-Odernheim"},"6746":{"ln":"Pfalzfeld","sn":"Pfalzfeld"},"6747":{"ln":"Emmelshausen","sn":"Emmelshausen"},"6751":{"ln":"Bad Sobernheim","sn":"Bad Sobernheim"},"6752":{"ln":"Kirn","sn":"Kirn"},"6753":{"ln":"Odenbach, Meisenheim","sn":"Odenbach"},"6754":{"ln":"Martinstein","sn":"Martinstein"},"6755":{"ln":"Odernheim am Glan","sn":"Odernheim"},"6756":{"ln":"Winterbach (Soonwald)","sn":"Winterbach"},"6757":{"ln":"Becherbach","sn":"Becherbach"},"6758":{"ln":"WaldbÃ¶ckelheim","sn":"WaldbÃ¶ckelheim"},"6761":{"ln":"Simmern (HunsrÃ¼ck)","sn":"Simmern"},"6781":{"ln":"Idar-Oberstein","sn":"Idar-Oberstein"},"6784":{"ln":"Idar-Oberstein (East)","sn":"Idar-Oberstein"},"6821":{"ln":"Neunkirchen (Saar)","sn":"Neunkirchen"},"6824":{"ln":"Ottweiler","sn":"Ottweiler"},"6825":{"ln":"Illingen (Saar)","sn":"Illingen"},"6826":{"ln":"Bexbach","sn":"Bexbach"},"6831":{"ln":"Saarlouis, Dillingen","sn":"Saarlouis"},"6832":{"ln":"Beckingen-Reimsbach","sn":"Beckingen-Reimsbach"},"6833":{"ln":"Rehlingen-Siersburg","sn":"Rehlingen-Siersburg"},"6834":{"ln":"Wadgassen","sn":"Wadgassen"},"6835":{"ln":"Beckingen","sn":"Beckingen"},"6836":{"ln":"Ãberherrn","sn":"Ãberherrn"},"6837":{"ln":"Wallerfangen","sn":"Wallerfangen"},"6838":{"ln":"Saarwellingen","sn":"Saarwellingen"},"6841":{"ln":"Homburg (Saar)","sn":"Homburg"},"6842":{"ln":"Blieskastel","sn":"Blieskastel"},"6849":{"ln":"Kirkel","sn":"Kirkel"},"6851":{"ln":"St. Wendel","sn":"St. Wendel"},"6853":{"ln":"Marpingen","sn":"Marpingen"},"6855":{"ln":"Freisen","sn":"Freisen"},"6857":{"ln":"Namborn","sn":"Namborn"},"6861":{"ln":"Merzig","sn":"Merzig"},"6864":{"ln":"Mettlach","sn":"Mettlach"},"6871":{"ln":"Wadern","sn":"Wadern"},"6872":{"ln":"Losheim am See","sn":"Losheim"},"6876":{"ln":"Weiskirchen","sn":"Weiskirchen"},"6881":{"ln":"Lebach, Eppelborn","sn":"Lebach"},"6887":{"ln":"Schmelz (Saar)","sn":"Schmelz"},"6894":{"ln":"St. Ingbert","sn":"St. Ingbert"},"6897":{"ln":"Dudweiler, Sulzbach","sn":"Dudweiler"},"6898":{"ln":"VÃ¶lklingen","sn":"VÃ¶lklingen"},"7021":{"ln":"Kirchheim unter Teck, Dettingen unter Teck, Notzingen, Owen, Schlierbach","sn":"Kirchheim"},"7022":{"ln":"NÃ¼rtingen, Frickenhausen, GroÃbettlingen, Oberboihingen, Unterensingen, Wolfschlugen","sn":"NÃ¼rtingen"},"7023":{"ln":"Weilheim an der Teck, Bissingen an der Teck, Holzmaden, Neidlingen, Ohmden","sn":"Weilheim"},"7024":{"ln":"Wendlingen am Neckar, KÃ¶ngen","sn":"Wendlingen"},"7025":{"ln":"Neuffen, Beuren, Frickenhausen-Linsenhofen, Kohlberg","sn":"Neuffen"},"7026":{"ln":"Lenningen, Erkenbrechtsweiler","sn":"Lenningen"},"7031":{"ln":"BÃ¶blingen, Altdorf, Holzgerlingen, SchÃ¶naich, Sindelfingen","sn":"BÃ¶blingen"},"7032":{"ln":"Herrenberg, Ammerbuch, GÃ¤ufelden, Jettingen, Nufringen","sn":"Herrenberg"},"7033":{"ln":"Weil der Stadt, Grafenau, Heimsheim, Ostelsheim, Simmozheim","sn":"Weil"},"7034":{"ln":"Ehningen, Aidlingen, GÃ¤rtringen, Hildrizhausen","sn":"Ehningen"},"7041":{"ln":"MÃ¼hlacker, Ãtisheim, Wiernsheim","sn":"MÃ¼hlacker"},"7042":{"ln":"Vaihingen an der Enz, Eberdingen, Illingen, MÃ¼hlacker, Oberriexingen, Sersheim","sn":"Vaihingen"},"7043":{"ln":"Maulbronn, Illingen, Knittlingen, Ãlbronn-DÃ¼rrn, Sternenfels","sn":"Maulbronn"},"7044":{"ln":"MÃ¶nsheim, Friolzheim, Heimsheim, Weissach, Wiernsheim, Wimsheim, Wurmberg","sn":"MÃ¶nsheim"},"7045":{"ln":"Oberderdingen, Sternenfels","sn":"Oberderdingen"},"7046":{"ln":"Zaberfeld, Pfaffenhofen, Sachsenheim","sn":"Zaberfeld"},"7051":{"ln":"Calw, Althengstett, Bad Teinach-Zavelstein, Oberreichenbach","sn":"Calw"},"7052":{"ln":"Bad Liebenzell","sn":"Bad Liebenzell"},"7053":{"ln":"Bad Teinach-Zavelstein, Calw, Neubulach, Oberreichenbach","sn":"Bad Teinach-Zavelstein"},"7054":{"ln":"Wildberg, Ebhausen","sn":"Wildberg"},"7055":{"ln":"Neuweiler, Bad Wildbad, Neubulach","sn":"Neuweiler"},"7056":{"ln":"Gechingen, Aidlingen, Deckenpfronn, Wildberg","sn":"Gechingen"},"7062":{"ln":"Beilstein, Abstatt, Ilsfeld, Neckarwestheim, Oberstenfeld","sn":"Beilstein"},"7063":{"ln":"Bad Wimpfen","sn":"Bad Wimpfen"},"7066":{"ln":"Bad Rappenau, Heilbronn","sn":"Bad Rappenau"},"7071":{"ln":"TÃ¼bingen, Kusterdingen","sn":"TÃ¼bingen"},"7072":{"ln":"Gomaringen, DuÃlingen, Kusterdingen-Immenhausen, Reutlingen-Bronnweiler, Reutlingen-GÃ¶nningen","sn":"Gomaringen"},"7073":{"ln":"Ammerbuch, Rottenburg am Neckar, TÃ¼bingen-Unterjesingen","sn":"Ammerbuch"},"7081":{"ln":"Bad Wildbad, Dobel, HÃ¶fen an der Enz","sn":"Bad Wildbad"},"7082":{"ln":"NeuenbÃ¼rg, Birkenfeld, Engelsbrand, Keltern, Straubenhardt","sn":"NeuenbÃ¼rg"},"7083":{"ln":"Bad Herrenalb, Dobel, Loffenau","sn":"Bad Herrenalb"},"7084":{"ln":"SchÃ¶mberg im Schwarzwald, Bad Liebenzell, Oberreichenbach","sn":"SchÃ¶mberg"},"7085":{"ln":"EnzklÃ¶sterle, Bad Wildbad","sn":"EnzklÃ¶sterle"},"7121":{"ln":"Reutlingen, Eningen unter Achalm, Kirchentellinsfurt, Pfullingen, Wannweil","sn":"Reutlingen"},"7122":{"ln":"St. Johann, Lichtenstein","sn":"St. Johann"},"7123":{"ln":"Metzingen, Bempflingen, Dettingen an der Erms, Frickenhausen-Tischardt, Grafenberg, Neuffen-KappishÃ¤usern, Riederich","sn":"Metzingen"},"7124":{"ln":"Trochtelfingen, Burladingen-HÃ¶rschwag, Gammertingen","sn":"Trochtelfingen"},"7125":{"ln":"Bad Urach, HÃ¼lben","sn":"Bad Urach"},"7126":{"ln":"Burladingen-Melchingen, Burladingen-Salmendingen, Burladingen-Stetten","sn":"Burladingen-Melchingen"},"7127":{"ln":"Neckartenzlingen, Aichtal, Altdorf, Altenriet, Neckartailfingen, Pliezhausen, Reutlingen-Mittelstadt, Schlaitdorf, WalddorfhÃ¤slach","sn":"Neckartenzlingen"},"7128":{"ln":"SonnenbÃ¼hl","sn":"SonnenbÃ¼hl"},"7129":{"ln":"Lichtenstein, Engstingen","sn":"Lichtenstein"},"7130":{"ln":"LÃ¶wenstein, Beilstein, Obersulm, Untergruppenbach, WÃ¼stenrot","sn":"LÃ¶wenstein"},"7131":{"ln":"Heilbronn, Flein, Leingarten, Untergruppenbach","sn":"Heilbronn"},"7132":{"ln":"Neckarsulm, Erlenbach, Oedheim, Untereisesheim","sn":"Neckarsulm"},"7133":{"ln":"Lauffen am Neckar, Ilsfeld, Neckarwestheim, Nordheim, Talheim","sn":"Lauffen"},"7134":{"ln":"Weinsberg, Eberstadt, Ellhofen, Lehrensteinsfeld, Obersulm","sn":"Weinsberg"},"7135":{"ln":"Brackenheim, Cleebronn, GÃ¼glingen, Nordheim","sn":"Brackenheim"},"7136":{"ln":"Bad Friedrichshall, Gundelsheim, Oedheim, Offenau","sn":"Bad Friedrichshall"},"7138":{"ln":"Schwaigern, Eppingen, Massenbachhausen","sn":"Schwaigern"},"7139":{"ln":"Hardthausen am Kocher, Langenbrettach, Neuenstadt am Kocher, Oedheim","sn":"Hardthausen"},"7141":{"ln":"Ludwigsburg, Asperg, Freiberg am Neckar, Kornwestheim, MÃ¶glingen, Remseck am Neckar, Tamm","sn":"Ludwigsburg"},"7142":{"ln":"Bietigheim-Bissingen, Ingersheim","sn":"Bietigheim-Bissingen"},"7143":{"ln":"Besigheim, BÃ¶nnigheim, Erligheim, Freudental, Gemmrigheim, Hessigheim, Kirchheim am Neckar, LÃ¶chgau, Mundelsheim, Walheim","sn":"Besigheim"},"7144":{"ln":"Marbach am Neckar, Affalterbach, Benningen am Neckar, Erdmannhausen, Kirchberg an der Murr, Ludwigsburg, Murr, Pleidelsheim, Steinheim an der Murr","sn":"Marbach"},"7145":{"ln":"MarkgrÃ¶ningen","sn":"MarkgrÃ¶ningen"},"7146":{"ln":"Remseck am Neckar, Waiblingen","sn":"Remseck"},"7147":{"ln":"Sachsenheim, Bietigheim-Bissingen, MarkgrÃ¶ningen","sn":"Sachsenheim"},"7148":{"ln":"GroÃbottwar, Aspach, Steinheim an der Murr","sn":"GroÃbottwar"},"7150":{"ln":"MÃ¼nchingen, Hemmingen, Schwieberdingen","sn":"MÃ¼nchingen"},"7151":{"ln":"Waiblingen, Kernen im Remstal, Korb, Remshalden, Weinstadt","sn":"Waiblingen"},"7152":{"ln":"Leonberg, Ditzingen, Rutesheim","sn":"Leonberg"},"7153":{"ln":"Plochingen, Altbach, Baltmannsweiler, Deizisau, Hochdorf, Lichtenwald, Reichenbach an der Fils, Wernau","sn":"Plochingen"},"7154":{"ln":"Kornwestheim","sn":"Kornwestheim"},"7156":{"ln":"Ditzingen, Gerlingen","sn":"Ditzingen"},"7157":{"ln":"Waldenbuch, Dettenhausen, Steinenbronn, Weil im SchÃ¶nbuch","sn":"Waldenbuch"},"7158":{"ln":"Neuhausen auf den Fildern, Filderstadt-Harthausen, Filderstadt-Sielmingen, Ostfildern-Scharnhausen","sn":"Neuhausen"},"7159":{"ln":"Renningen, Magstadt","sn":"Renningen"},"7161":{"ln":"GÃ¶ppingen, Albershausen, Birenbach, BÃ¶rtlingen, Eislingen/Fils, Eschenbach, Heiningen, Rechberghausen, Schlat, Uhingen, Wangen","sn":"GÃ¶ppingen"},"7162":{"ln":"SÃ¼Ãen, Donzdorf, Gingen an der Fils, Salach, Waldstetten","sn":"SÃ¼Ãen"},"7163":{"ln":"Ebersbach an der Fils, Uhingen","sn":"Ebersbach"},"7164":{"ln":"Boll, Aichelberg, DÃ¼rnau, Gammelshausen, Hattenhofen, Zell unter Aichelberg","sn":"Boll"},"7165":{"ln":"GÃ¶ppingen-Hohenstaufen, Eislingen/Fils, GÃ¶ppingen-Hohrein, Ottenbach","sn":"GÃ¶ppingen-Hohenstaufen"},"7166":{"ln":"Adelberg","sn":"Adelberg"},"7171":{"ln":"SchwÃ¤bisch GmÃ¼nd, Alfdorf-Adelstetten, Mutlangen, Waldstetten","sn":"SchwÃ¤bisch GmÃ¼nd"},"7172":{"ln":"Lorch, Adelberg, Alfdorf, BÃ¶rtlingen, WÃ¤schenbeuren","sn":"Lorch"},"7173":{"ln":"Heubach, BartholomÃ¤, BÃ¶bingen an der Rems, SchwÃ¤bisch GmÃ¼nd-Bargau","sn":"Heubach"},"7174":{"ln":"MÃ¶gglingen, Heuchlingen","sn":"MÃ¶gglingen"},"7175":{"ln":"Leinzell, Eschach, GÃ¶ggingen, Iggingen, Schechingen, TÃ¤ferrot","sn":"Leinzell"},"7176":{"ln":"Spraitbach, Alfdorf, Durlangen, Ruppertshofen, TÃ¤ferrot","sn":"Spraitbach"},"7181":{"ln":"Schorndorf, Berglen, PlÃ¼derhausen, Remshalden, Urbach, Winterbach","sn":"Schorndorf"},"7182":{"ln":"Welzheim, Alfdorf, Kaisersbach, PlÃ¼derhausen","sn":"Welzheim"},"7183":{"ln":"Rudersberg, AlthÃ¼tte","sn":"Rudersberg"},"7184":{"ln":"Kaisersbach, Murrhardt","sn":"Kaisersbach"},"7191":{"ln":"Backnang, Allmersbach im Tal, Aspach, Auenwald, Burgstetten, Oppenweiler, Weissach im Tal","sn":"Backnang"},"7192":{"ln":"Murrhardt, AlthÃ¼tte, Auenwald, GroÃerlach","sn":"Murrhardt"},"7193":{"ln":"Sulzbach an der Murr, GroÃerlach, Oppenweiler","sn":"Sulzbach"},"7194":{"ln":"Spiegelberg, Oberstenfeld, WÃ¼stenrot","sn":"Spiegelberg"},"7195":{"ln":"Winnenden, Berglen, Leutenbach, Schwaikheim","sn":"Winnenden"},"7202":{"ln":"Karlsbad","sn":"Karlsbad"},"7203":{"ln":"Walzbachtal","sn":"Walzbachtal"},"7204":{"ln":"Malsch-VÃ¶lkersbach, Gaggenau, Malsch","sn":"Malsch-VÃ¶lkersbach"},"7220":{"ln":"Forbach, Ottersweier","sn":"Forbach"},"7221":{"ln":"Baden-Baden, Sinzheim","sn":"Baden-Baden"},"7222":{"ln":"Rastatt, Bischweier, Gaggenau, Kuppenheim, Muggensturm, Ãtigheim, Steinmauern","sn":"Rastatt"},"7223":{"ln":"BÃ¼hl, Baden-Baden, BÃ¼hlertal, Ottersweier, Sinzheim","sn":"BÃ¼hl"},"7224":{"ln":"Gernsbach, Gaggenau, Weisenbach","sn":"Gernsbach"},"7225":{"ln":"Gaggenau, Kuppenheim","sn":"Gaggenau"},"7226":{"ln":"BÃ¼hl, BÃ¼hlertal, Forbach, Ottersweier, Sasbach","sn":"BÃ¼hl"},"7227":{"ln":"Lichtenau (Baden), BÃ¼hl, Rheinau, RheinmÃ¼nster","sn":"Lichtenau"},"7228":{"ln":"Forbach","sn":"Forbach"},"7229":{"ln":"Iffezheim, HÃ¼gelsheim, Rastatt","sn":"Iffezheim"},"7231":{"ln":"Pforzheim, Birkenfeld, Ispringen, KÃ¤mpfelbach, Kieselbronn","sn":"Pforzheim"},"7232":{"ln":"KÃ¶nigsbach-Stein, Eisingen, KÃ¤mpfelbach, Remchingen","sn":"KÃ¶nigsbach-Stein"},"7233":{"ln":"Niefern-Ãschelbronn","sn":"Niefern-Ãschelbronn"},"7234":{"ln":"Tiefenbronn, Neuhausen, Pforzheim","sn":"Tiefenbronn"},"7235":{"ln":"Unterreichenbach, Engelsbrand, SchÃ¶mberg im Schwarzwald","sn":"Unterreichenbach"},"7236":{"ln":"Keltern","sn":"Keltern"},"7237":{"ln":"Neulingen, Ãlbronn-DÃ¼rrn","sn":"Neulingen"},"7240":{"ln":"Pfinztal nur SÃ¶llingen, Kleinsteinbach, WÃ¶schbach","sn":"Pfinztal"},"7242":{"ln":"Rheinstetten","sn":"Rheinstetten"},"7243":{"ln":"Ettlingen, Waldbronn","sn":"Ettlingen"},"7244":{"ln":"Weingarten (Baden), Stutensee","sn":"Weingarten"},"7245":{"ln":"Durmersheim, Au am Rhein, Bietigheim, Elchesheim-Illingen","sn":"Durmersheim"},"7246":{"ln":"Malsch","sn":"Malsch"},"7247":{"ln":"Linkenheim-Hochstetten, Dettenheim, Eggenstein-Leopoldshafen","sn":"Linkenheim-Hochstetten"},"7248":{"ln":"Marxzell, Karlsbad-Ittersbach, Straubenhardt","sn":"Marxzell"},"7249":{"ln":"Stutensee","sn":"Stutensee"},"7250":{"ln":"Kraichtal","sn":"Kraichtal"},"7251":{"ln":"Bruchsal, Forst, Karlsdorf-Neuthard, Kraichtal, Ubstadt-Weiher","sn":"Bruchsal"},"7252":{"ln":"Bretten, Gondelsheim","sn":"Bretten"},"7253":{"ln":"Bad SchÃ¶nborn, Kronau, Malsch, MÃ¼hlhausen, Ãstringen, Rauenberg, Ubstadt-Weiher","sn":"Bad SchÃ¶nborn"},"7254":{"ln":"WaghÃ¤usel, Oberhausen-Rheinhausen","sn":"WaghÃ¤usel"},"7255":{"ln":"Graben-Neudorf, Dettenheim, HambrÃ¼cken","sn":"Graben-Neudorf"},"7256":{"ln":"Philippsburg","sn":"Philippsburg"},"7257":{"ln":"Bruchsal-Untergrombach, Bruchsal","sn":"Bruchsal-Untergrombach"},"7258":{"ln":"Oberderdingen-Flehingen, Bretten, Kraichtal, KÃ¼rnbach, Oberderdingen, Zaisenhausen","sn":"Oberderdingen-Flehingen"},"7259":{"ln":"Ãstringen-Odenheim, Kraichtal, Ãstringen","sn":"Ãstringen-Odenheim"},"7260":{"ln":"Eppingen, Sinsheim","sn":"Eppingen"},"7261":{"ln":"Sinsheim, Waibstadt","sn":"Sinsheim"},"7262":{"ln":"Eppingen","sn":"Eppingen"},"7263":{"ln":"Waibstadt, Epfenbach, Helmstadt-Bargen, Neckarbischofsheim, Neidenstein","sn":"Waibstadt"},"7264":{"ln":"Bad Rappenau, Siegelsbach","sn":"Bad Rappenau"},"7265":{"ln":"Angelbachtal, Sinsheim","sn":"Angelbachtal"},"7266":{"ln":"Kirchardt, Bad Rappenau, Ittlingen, Sinsheim","sn":"Kirchardt"},"7267":{"ln":"Gemmingen","sn":"Gemmingen"},"7268":{"ln":"Bad Rappenau, Neckarbischofsheim, Sinsheim","sn":"Bad Rappenau"},"7269":{"ln":"Sulzfeld","sn":"Sulzfeld"},"7271":{"ln":"WÃ¶rth am Rhein, Jockgrim","sn":"WÃ¶rth"},"7272":{"ln":"RÃ¼lzheim, Bellheim, HÃ¶rdt, Kuhardt, Leimersheim, Neupotz, Rheinzabern","sn":"RÃ¼lzheim"},"7273":{"ln":"Hagenbach, Berg, Neuburg am Rhein","sn":"Hagenbach"},"7274":{"ln":"Germersheim","sn":"Germersheim"},"7275":{"ln":"Kandel, Erlenbach bei Kandel, HatzenbÃ¼hl, Minfeld","sn":"Kandel"},"7276":{"ln":"Herxheim bei Landau/Pfalz, Herxheimweyher","sn":"Herxheim"},"7277":{"ln":"WÃ¶rth-BÃ¼chelberg, Scheibenhardt, WÃ¶rth am Rhein","sn":"WÃ¶rth-BÃ¼chelberg"},"7300":{"ln":"Roggenburg (Bayern)","sn":"Roggenburg"},"7302":{"ln":"Pfaffenhofen an der Roth, Holzheim","sn":"Pfaffenhofen"},"7303":{"ln":"Illertissen","sn":"Illertissen"},"7304":{"ln":"Blaustein, Dornstadt, Ulm","sn":"Blaustein"},"7305":{"ln":"Erbach, HÃ¼ttisheim, Oberdischingen, Ulm","sn":"Erbach"},"7306":{"ln":"VÃ¶hringen, Bellenberg, Illerrieden, WeiÃenhorn","sn":"VÃ¶hringen"},"7307":{"ln":"Senden, Neu-Ulm, VÃ¶hringen","sn":"Senden"},"7308":{"ln":"Nersingen, Elchingen, Neu-Ulm","sn":"Nersingen"},"7309":{"ln":"WeiÃenhorn, Senden","sn":"WeiÃenhorn"},"7321":{"ln":"Heidenheim an der Brenz, Nattheim","sn":"Heidenheim"},"7322":{"ln":"Giengen an der Brenz, Hermaringen","sn":"Giengen"},"7323":{"ln":"Gerstetten, Amstetten-BrÃ¤unisheim, Steinheim-SÃ¶hnstetten","sn":"Gerstetten"},"7324":{"ln":"Herbrechtingen, Gerstetten-Dettingen, Giengen-HÃ¼rben, Niederstotzingen-Lontal","sn":"Herbrechtingen"},"7325":{"ln":"Sontheim an der Brenz, BÃ¤chingen an der Brenz, Niederstotzingen","sn":"Sontheim"},"7326":{"ln":"Neresheim, Dischingen-Frickingen, Nattheim-Auernheim","sn":"Neresheim"},"7327":{"ln":"Dischingen, Nattheim-Fleinheim","sn":"Dischingen"},"7328":{"ln":"KÃ¶nigsbronn","sn":"KÃ¶nigsbronn"},"7329":{"ln":"Steinheim am Albuch","sn":"Steinheim"},"7331":{"ln":"Geislingen an der Steige, Amstetten, Bad Ãberkingen, Kuchen","sn":"Geislingen"},"7332":{"ln":"Lauterstein, BÃ¶hmenkirch, SchwÃ¤bisch GmÃ¼nd-Degenfeld","sn":"Lauterstein"},"7333":{"ln":"Laichingen, Westerheim","sn":"Laichingen"},"7334":{"ln":"Deggingen, Bad Ditzenbach, Bad Ãberkingen-Hausen, Bad Ãberkingen-UnterbÃ¶hringen, Geislingen an der Steige-Aufhausen","sn":"Deggingen"},"7335":{"ln":"Wiesensteig, Bad Ditzenbach-Gosbach, Drackenstein, Gruibingen, Hohenstadt, MÃ¼hlhausen im TÃ¤le","sn":"Wiesensteig"},"7336":{"ln":"Lonsee, Amstetten â Hofstett-Emerbuch, Amstetten â Reutti, Dornstadt-Scharenstetten, Westerstetten-Hinterdenkental","sn":"Lonsee"},"7337":{"ln":"Nellingen, Geislingen an der Steige-Aufhausen (WannenhÃ¶fe), Merklingen","sn":"Nellingen"},"7340":{"ln":"Neenstetten, Altheim (Alb), Ballendorf, BÃ¶rslingen, Breitingen, Holzkirch, Weidenstetten","sn":"Neenstetten"},"7343":{"ln":"Buch, Unterroth","sn":"Buch"},"7344":{"ln":"Blaubeuren, BerghÃ¼len, Erbach","sn":"Blaubeuren"},"7345":{"ln":"Langenau, Asselfingen, Nerenstetten, Ãllingen, Rammingen, Setzingen","sn":"Langenau"},"7346":{"ln":"Illerkirchberg, SchnÃ¼rpflingen, Staig, Ulm","sn":"Illerkirchberg"},"7347":{"ln":"Dietenheim, Balzheim, Schwendi","sn":"Dietenheim"},"7348":{"ln":"Beimerstetten, Bernstadt, Dornstadt, Langenau, Ulm, Westerstetten","sn":"Beimerstetten"},"7351":{"ln":"Biberach an der RiÃ, Maselheim, Mittelbiberach, Ummendorf, Warthausen","sn":"Biberach"},"7352":{"ln":"Ochsenhausen, Biberach an der RiÃ, Erlenmoos, Gutenzell-HÃ¼rbel, Maselheim, Steinhausen an der Rottum","sn":"Ochsenhausen"},"7353":{"ln":"Schwendi, Gutenzell-HÃ¼rbel, Maselheim, Mietingen, Wain","sn":"Schwendi"},"7354":{"ln":"Erolzheim, Berkheim, Dettingen an der Iller, Gutenzell-HÃ¼rbel, Kirchberg an der Iller, Kirchdorf an der Iller","sn":"Erolzheim"},"7355":{"ln":"Hochdorf, Eberhardzell, Ingoldingen, Ummendorf","sn":"Hochdorf"},"7356":{"ln":"Schemmerhofen, Maselheim, Mietingen, Warthausen","sn":"Schemmerhofen"},"7357":{"ln":"Attenweiler, Biberach an der RiÃ, Grundsheim, Oberstadion, Oggelshausen, Schemmerhofen, Uttenweiler, Warthausen","sn":"Attenweiler"},"7358":{"ln":"Eberhardzell, Bad Wurzach, Ochsenhausen, Rot an der Rot, Steinhausen an der Rottum","sn":"Eberhardzell"},"7361":{"ln":"Aalen, HÃ¼ttlingen, Rainau","sn":"Aalen"},"7362":{"ln":"Bopfingen, Kirchheim am Ries, Neresheim, RiesbÃ¼rg","sn":"Bopfingen"},"7363":{"ln":"Lauchheim, Westhausen","sn":"Lauchheim"},"7364":{"ln":"Oberkochen","sn":"Oberkochen"},"7365":{"ln":"Essingen","sn":"Essingen"},"7366":{"ln":"AbtsgmÃ¼nd, Aalen-Dewangen, Aalen-Fachsenfeld, HÃ¼ttlingen, Neuler, Schechingen-Leinweiler","sn":"AbtsgmÃ¼nd"},"7367":{"ln":"Aalen-Ebnat, Aalen-Waldhausen, Heidenheim-GroÃkuchen, Neresheim-Elchingen","sn":"Aalen-Ebnat"},"7371":{"ln":"Riedlingen, Altheim (bei Riedlingen), Betzenweiler, DÃ¼rmentingen, Ertingen, Langenenslingen, Unlingen","sn":"Riedlingen"},"7373":{"ln":"Zwiefalten, Emeringen, Pfronstetten, Riedlingen","sn":"Zwiefalten"},"7374":{"ln":"Uttenweiler, Alleshausen, Betzenweiler, Emerkingen, Seekirch, Unlingen","sn":"Uttenweiler"},"7375":{"ln":"Obermarchtal, Ehingen (Donau), Lauterach, Rechtenstein","sn":"Obermarchtal"},"7376":{"ln":"Langenenslingen","sn":"Langenenslingen"},"7381":{"ln":"MÃ¼nsingen, Bad Urach, Gutsbezirk MÃ¼nsingen, Mehrstetten","sn":"MÃ¼nsingen"},"7382":{"ln":"RÃ¶merstein, Grabenstetten","sn":"RÃ¶merstein"},"7383":{"ln":"MÃ¼nsingen-Buttenhausen, Hayingen, Hohenstein","sn":"MÃ¼nsingen-Buttenhausen"},"7384":{"ln":"Allmendingen, Ehingen (Donau), MÃ¼nsingen, Schelklingen","sn":"Allmendingen"},"7385":{"ln":"Gomadingen, Engstingen","sn":"Gomadingen"},"7386":{"ln":"Hayingen, Ehingen (Donau)","sn":"Hayingen"},"7387":{"ln":"Hohenstein","sn":"Hohenstein"},"7388":{"ln":"Pfronstetten, Trochtelfingen","sn":"Pfronstetten"},"7389":{"ln":"Heroldstatt, Gutsbezirk MÃ¼nsingen","sn":"Heroldstatt"},"7391":{"ln":"Ehingen (Donau), Allmendingen, Altheim (bei Ehingen), Griesingen, Ãpfingen","sn":"Ehingen"},"7392":{"ln":"Laupheim, Achstetten, Burgrieden, Ehingen (Donau), Mietingen","sn":"Laupheim"},"7393":{"ln":"Munderkingen, Ehingen (Donau), Emerkingen, Hausen am Bussen, Oberstadion, Rottenacker, Untermarchtal, Unterstadion, Unterwachingen","sn":"Munderkingen"},"7394":{"ln":"Schelklingen, Allmendingen, Blaubeuren, Erbach","sn":"Schelklingen"},"7395":{"ln":"Ehingen-DÃ¤chingen, Ehingen (Donau)","sn":"Ehingen-DÃ¤chingen"},"7402":{"ln":"Fluorn-Winzeln, Dunningen, Schramberg","sn":"Fluorn-Winzeln"},"7403":{"ln":"Dunningen, Eschbronn, Zimmern ob Rottweil","sn":"Dunningen"},"7404":{"ln":"Epfendorf, BÃ¶singen, Dietingen","sn":"Epfendorf"},"7420":{"ln":"DeiÃlingen","sn":"DeiÃlingen"},"7422":{"ln":"Schramberg, Aichhalden, Hardt, Lauterbach","sn":"Schramberg"},"7423":{"ln":"Oberndorf am Neckar, Dornhan","sn":"Oberndorf"},"7424":{"ln":"Spaichingen, Aldingen, Balgheim, Denkingen, DÃ¼rbheim, Gunningen, Hausen ob Verena, Rietheim-Weilheim","sn":"Spaichingen"},"7425":{"ln":"Trossingen, DeiÃlingen, Villingen-Schwenningen","sn":"Trossingen"},"7426":{"ln":"Gosheim, Deilingen, Frittlingen, Wehingen, Wellendingen","sn":"Gosheim"},"7427":{"ln":"SchÃ¶mberg (bei Balingen), Dautmergen, Dietingen, Dormettingen, Dotternhausen, Ratshausen, Rosenfeld, Rottweil, Weilen unter den Rinnen, Zimmern unter der Burg","sn":"SchÃ¶mberg"},"7428":{"ln":"Rosenfeld, Dietingen, Geislingen","sn":"Rosenfeld"},"7429":{"ln":"Egesheim, BÃ¶ttingen, Bubsheim, KÃ¶nigsheim, Mahlstetten, Nusplingen, Reichenbach am Heuberg, Renquishausen","sn":"Egesheim"},"7431":{"ln":"Albstadt, Bitz, MeÃstetten","sn":"Albstadt"},"7432":{"ln":"Albstadt","sn":"Albstadt"},"7433":{"ln":"Balingen, Geislingen","sn":"Balingen"},"7434":{"ln":"Winterlingen, StraÃberg","sn":"Winterlingen"},"7435":{"ln":"Albstadt, Balingen","sn":"Albstadt"},"7436":{"ln":"Hausen am Tann, MeÃstetten, Obernheim","sn":"Hausen"},"7440":{"ln":"Bad Rippoldsau-Schapbach","sn":"Bad Rippoldsau-Schapbach"},"7441":{"ln":"Freudenstadt","sn":"Freudenstadt"},"7442":{"ln":"Baiersbronn, Freudenstadt","sn":"Baiersbronn"},"7443":{"ln":"Dornstetten, Freudenstadt, Glatten, Schopfloch, Waldachtal","sn":"Dornstetten"},"7444":{"ln":"Alpirsbach, Aichhalden, LoÃburg","sn":"Alpirsbach"},"7445":{"ln":"Pfalzgrafenweiler, Waldachtal","sn":"Pfalzgrafenweiler"},"7446":{"ln":"LoÃburg","sn":"LoÃburg"},"7447":{"ln":"Baiersbronn-Schwarzenberg, Baiersbronn, Seewald","sn":"Baiersbronn-Schwarzenberg"},"7448":{"ln":"Seewald","sn":"Seewald"},"7449":{"ln":"Baiersbronn-Obertal, Baiersbronn","sn":"Baiersbronn-Obertal"},"7451":{"ln":"Horb am Neckar","sn":"Horb"},"7452":{"ln":"Nagold, Jettingen, MÃ¶tzingen, Rohrdorf","sn":"Nagold"},"7453":{"ln":"Altensteig, Egenhausen, GrÃ¶mbach, Simmersfeld, WÃ¶rnersberg","sn":"Altensteig"},"7454":{"ln":"Sulz am Neckar, VÃ¶hringen","sn":"Sulz"},"7455":{"ln":"Dornhan, Betzweiler-WÃ¤lde","sn":"Dornhan"},"7456":{"ln":"Haiterbach","sn":"Haiterbach"},"7457":{"ln":"Rottenburg-Ergenzingen, Bondorf, Eutingen im GÃ¤u, Neustetten, Rottenburg am Neckar, Starzach","sn":"Rottenburg-Ergenzingen"},"7458":{"ln":"Ebhausen, Altensteig","sn":"Ebhausen"},"7459":{"ln":"Nagold-Hochdorf, Eutingen im GÃ¤u, Nagold","sn":"Nagold-Hochdorf"},"7461":{"ln":"Tuttlingen, Rietheim-Weilheim, Wurmlingen","sn":"Tuttlingen"},"7462":{"ln":"Immendingen, Tuttlingen","sn":"Immendingen"},"7463":{"ln":"MÃ¼hlheim an der Donau, Fridingen an der Donau, Kolbingen","sn":"MÃ¼hlheim"},"7464":{"ln":"Talheim, Tuttlingen, Durchhausen, Seitingen-Oberflacht, Tuningen, Tuttlingen","sn":"Talheim"},"7465":{"ln":"Emmingen-Liptingen, Eigeltingen","sn":"Emmingen-Liptingen"},"7466":{"ln":"Beuron, BÃ¤renthal, Irndorf, Leibertingen","sn":"Beuron"},"7467":{"ln":"Neuhausen ob Eck","sn":"Neuhausen"},"7471":{"ln":"Hechingen, Bisingen, Bodelshausen, Rangendingen","sn":"Hechingen"},"7472":{"ln":"Rottenburg am Neckar, Neustetten, Starzach, TÃ¼bingen","sn":"Rottenburg"},"7473":{"ln":"MÃ¶ssingen, Nehren, Ofterdingen","sn":"MÃ¶ssingen"},"7474":{"ln":"Haigerloch","sn":"Haigerloch"},"7475":{"ln":"Burladingen","sn":"Burladingen"},"7476":{"ln":"Bisingen, Grosselfingen","sn":"Bisingen"},"7477":{"ln":"Jungingen, Burladingen, Hechingen","sn":"Jungingen"},"7478":{"ln":"Hirrlingen, Rangendingen, Rottenburg am Neckar, Starzach","sn":"Hirrlingen"},"7482":{"ln":"Horb-Dettingen, Sulz am Neckar","sn":"Horb-Dettingen"},"7483":{"ln":"Empfingen, Eutingen im GÃ¤u, Horb am Neckar, Starzach","sn":"Empfingen"},"7484":{"ln":"Simmersfeld","sn":"Simmersfeld"},"7485":{"ln":"Empfingen","sn":"Empfingen"},"7486":{"ln":"Horb am Neckar, Waldachtal","sn":"Horb"},"7502":{"ln":"Wolpertswende, Baindt, Fronreute","sn":"Wolpertswende"},"7503":{"ln":"Wilhelmsdorf, Guggenhausen, Horgenzell","sn":"Wilhelmsdorf"},"7504":{"ln":"Horgenzell, Berg (Schussental), Ravensburg, Wilhelmsdorf","sn":"Horgenzell"},"7505":{"ln":"Fronreute, Berg (Schussental), Fleischwangen, Guggenhausen, Unterwaldhausen, Wilhelmsdorf","sn":"Fronreute"},"7506":{"ln":"Wangen, Amtzell, KiÃlegg, Vogt","sn":"Wangen"},"7520":{"ln":"Bodnegg, Amtzell, GrÃ¼nkraut, Ravensburg","sn":"Bodnegg"},"7522":{"ln":"Wangen im AllgÃ¤u, Amtzell, ArgenbÃ¼hl, Hergatz, KiÃlegg","sn":"Wangen"},"7524":{"ln":"Bad Waldsee, Bad Wurzach, Eberhardzell","sn":"Bad Waldsee"},"7525":{"ln":"Aulendorf, Altshausen, Bad Schussenried, Bad Waldsee, Ebersbach-Musbach, Wolpertswende","sn":"Aulendorf"},"7527":{"ln":"Wolfegg, Bad Wurzach, Bergatreute, Vogt im AllgÃ¤u","sn":"Wolfegg"},"7528":{"ln":"Neukirch, Amtzell, Tettnang, Wangen im AllgÃ¤u","sn":"Neukirch"},"7529":{"ln":"Waldburg, Amtzell, Schlier, Vogt im AllgÃ¤u, Wangen im AllgÃ¤u","sn":"Waldburg"},"7531":{"ln":"Konstanz, Reichenau","sn":"Konstanz"},"7532":{"ln":"Meersburg, Daisendorf, Hagnau am Bodensee, Immenstaad am Bodensee, Stetten","sn":"Meersburg"},"7533":{"ln":"Allensbach, Konstanz-OT: Dettingen-Wallhausen, Dingelsdorf","sn":"Allensbach"},"7534":{"ln":"Reichenau","sn":"Reichenau"},"7541":{"ln":"Friedrichshafen, Eriskirch","sn":"Friedrichshafen"},"7542":{"ln":"Tettnang, Meckenbeuren","sn":"Tettnang"},"7543":{"ln":"Kressbronn, Langenargen","sn":"Kressbronn"},"7544":{"ln":"Markdorf, Bermatingen, Friedrichshafen-OT: Kluftern","sn":"Markdorf"},"7545":{"ln":"Immenstaad","sn":"Immenstaad"},"7546":{"ln":"Oberteuringen","sn":"Oberteuringen"},"7551":{"ln":"Ãberlingen, Owingen, Sipplingen","sn":"Ãberlingen"},"7552":{"ln":"Pfullendorf, Heiligenberg, Herdwangen-SchÃ¶nach, Ostrach","sn":"Pfullendorf"},"7553":{"ln":"Salem, Deggenhausertal, Ãberlingen","sn":"Salem"},"7554":{"ln":"Heiligenberg, Frickingen, Salem, Ãberlingen","sn":"Heiligenberg"},"7555":{"ln":"Deggenhausertal, Illmensee, Salem","sn":"Deggenhausertal"},"7556":{"ln":"Uhldingen-MÃ¼hlhofen, Salem","sn":"Uhldingen-MÃ¼hlhofen"},"7557":{"ln":"Herdwangen-SchÃ¶nach, Hohenfels, Owingen","sn":"Herdwangen-SchÃ¶nach"},"7558":{"ln":"Illmensee, Ostrach, Pfullendorf","sn":"Illmensee"},"7561":{"ln":"Leutkirch im AllgÃ¤u, Aichstetten, Bad Wurzach","sn":"Leutkirch"},"7562":{"ln":"Isny im AllgÃ¤u, ArgenbÃ¼hl, MaierhÃ¶fen","sn":"Isny"},"7563":{"ln":"KiÃlegg, ArgenbÃ¼hl, Leutkirch im AllgÃ¤u","sn":"KiÃlegg"},"7564":{"ln":"Bad Wurzach, Leutkirch im AllgÃ¤u","sn":"Bad Wurzach"},"7565":{"ln":"Aichstetten, Aitrach, Bad Wurzach, Leutkirch im AllgÃ¤u","sn":"Aichstetten"},"7566":{"ln":"ArgenbÃ¼hl, Heimenkirch, Isny im AllgÃ¤u, Leutkirch im AllgÃ¤u","sn":"ArgenbÃ¼hl"},"7567":{"ln":"Leutkirch, ArgenbÃ¼hl, Isny im AllgÃ¤u","sn":"Leutkirch"},"7568":{"ln":"Bad Wurzach-Hauerz, Aitrach, Bad Wurzach, Rot an der Rot, Steinhausen an der Rottum","sn":"Bad Wurzach-Hauerz"},"7569":{"ln":"Isny im AllgÃ¤u-Eisenbach, Buchenberg, Isny im AllgÃ¤u","sn":"Isny"},"7570":{"ln":"Sigmaringen-Gutenstein, Beuron, Leibertingen, MeÃkirch, Sigmaringen","sn":"Sigmaringen-Gutenstein"},"7571":{"ln":"Sigmaringen, Bingen, Inzigkofen, Sigmaringendorf, Stetten am kalten Markt","sn":"Sigmaringen"},"7572":{"ln":"Mengen, Altheim bei Riedlingen, Hohentengen, Scheer, Sigmaringendorf","sn":"Mengen"},"7573":{"ln":"Stetten am kalten Markt, Sigmaringen","sn":"Stetten"},"7574":{"ln":"Gammertingen, Hettingen, Langenenslingen, Neufra","sn":"Gammertingen"},"7575":{"ln":"MeÃkirch, Inzigkofen, Leibertingen, Sauldorf","sn":"MeÃkirch"},"7576":{"ln":"Krauchenwies, Mengen","sn":"Krauchenwies"},"7577":{"ln":"Veringenstadt, Hettingen, Sigmaringen, Winterlingen","sn":"Veringenstadt"},"7578":{"ln":"Wald, MeÃkirch, Sauldorf","sn":"Wald"},"7579":{"ln":"Schwenningen, Beuron, MeÃstetten","sn":"Schwenningen"},"7581":{"ln":"Bad Saulgau, Boms, Ebersbach-Musbach, Eichstegen","sn":"Bad Saulgau"},"7582":{"ln":"Bad Buchau, Alleshausen, Allmannsweiler, Biberach an der RiÃ, DÃ¼rnau, Kanzach, Moosburg, Oggelshausen, Seekirch, Tiefenbach","sn":"Bad Buchau"},"7583":{"ln":"Bad Schussenried, Ebersbach-Musbach, Ingoldingen, Bad Saulgau","sn":"Bad Schussenried"},"7584":{"ln":"Altshausen, Boms, Ebenweiler, Ebersbach-Musbach, Eichstegen, Fronreute, Guggenhausen","sn":"Altshausen"},"7585":{"ln":"Ostrach, Hohentengen","sn":"Ostrach"},"7586":{"ln":"Herbertingen, Ertingen, Hohentengen","sn":"Herbertingen"},"7587":{"ln":"HoÃkirch, Guggenhausen, KÃ¶nigseggwald, Ostrach, Riedhausen, Unterwaldhausen","sn":"HoÃkirch"},"7602":{"ln":"Oberried, Bollschweil, MÃ¼nstertal/Schwarzwald","sn":"Oberried"},"7620":{"ln":"Schopfheim","sn":"Schopfheim"},"7621":{"ln":"LÃ¶rrach, Binzen, Eimeldingen, Inzlingen, RÃ¼mmingen, Schallbach, Weil am Rhein, Wittlingen","sn":"LÃ¶rrach"},"7622":{"ln":"Schopfheim, Hausen im Wiesental, Maulburg, Rheinfelden-Nordschwaben, Wieslet","sn":"Schopfheim"},"7623":{"ln":"Rheinfelden (Baden), SchwÃ¶rstadt","sn":"Rheinfelden"},"7624":{"ln":"Grenzach-Wyhlen","sn":"Grenzach-Wyhlen"},"7625":{"ln":"Zell im Wiesental, HÃ¤g-Ehrsberg","sn":"Zell"},"7626":{"ln":"Kandern, Malsburg-Marzell, Schliengen","sn":"Kandern"},"7627":{"ln":"Steinen, Rheinfeden-Adelhausen","sn":"Steinen"},"7628":{"ln":"Efringen-Kirchen, Fischingen","sn":"Efringen-Kirchen"},"7629":{"ln":"Tegernau, BÃ¼rchau, Elbenschwand, Raich, Sallneck, Steinen-Endenburg, Wies","sn":"Tegernau"},"7631":{"ln":"MÃ¼llheim, Auggen, Buggingen, Neuenburg","sn":"MÃ¼llheim"},"7632":{"ln":"Badenweiler","sn":"Badenweiler"},"7633":{"ln":"Staufen im Breisgau, Bad Krozingen, Bollschweil, Ehrenkirchen, Hartheim, Heitersheim","sn":"Staufen"},"7634":{"ln":"Sulzburg, Ballrechten-Dottingen, Buggingen, Eschbach, Heitersheim, Neuenburg am Rhein","sn":"Sulzburg"},"7635":{"ln":"Schliengen, Bad Bellingen, Neuenburg am Rhein","sn":"Schliengen"},"7636":{"ln":"MÃ¼nstertal/Schwarzwald, Staufen im Breisgau","sn":"MÃ¼nstertal"},"7641":{"ln":"Emmendingen, Freiamt, Reute, Sexau, Teningen","sn":"Emmendingen"},"7642":{"ln":"Endingen am Kaiserstuhl, Forchheim, Riegel am Kaiserstuhl, Sasbach am Kaiserstuhl, Wyhl am Kaiserstuhl","sn":"Endingen"},"7643":{"ln":"Herbolzheim, Rheinhausen","sn":"Herbolzheim"},"7644":{"ln":"Kenzingen, Malterdingen","sn":"Kenzingen"},"7645":{"ln":"Freiamt, Gutach im Breisgau, Sexau","sn":"Freiamt"},"7646":{"ln":"Weisweil","sn":"Weisweil"},"7651":{"ln":"Titisee-Neustadt, Breitnau, Friedenweiler","sn":"Titisee-Neustadt"},"7652":{"ln":"Breitnau, Hinterzarten, Titisee-Neustadt","sn":"Breitnau"},"7653":{"ln":"Lenzkirch, Bonndorf im Schwarzwald","sn":"Lenzkirch"},"7654":{"ln":"LÃ¶ffingen, BrÃ¤unlingen-Unterbrend, Friedenweiler","sn":"LÃ¶ffingen"},"7655":{"ln":"Feldberg, Baden-WÃ¼rttemberg","sn":"Feldberg"},"7656":{"ln":"Schluchsee","sn":"Schluchsee"},"7657":{"ln":"Eisenbach (Hochschwarzwald), Titisee-Neustadt, VÃ¶hrenbach","sn":"Eisenbach"},"7660":{"ln":"St. Peter, Simonswald, Stegen","sn":"St. Peter"},"7661":{"ln":"Kirchzarten, Buchenbach, Oberried, Stegen","sn":"Kirchzarten"},"7662":{"ln":"Vogtsburg im Kaiserstuhl, Sasbach am Kaiserstuhl","sn":"Vogtsburg"},"7663":{"ln":"Eichstetten am Kaiserstuhl, Bahlingen am Kaiserstuhl, BÃ¶tzingen, Teningen","sn":"Eichstetten"},"7664":{"ln":"Freiburg-Tiengen, Breisach-Rimsingen, Ebringen, Ehrenkirchen, Freiburg-Munzingen, Pfaffenweiler, Schallstadt","sn":"Freiburg-Tiengen"},"7665":{"ln":"March, Gottenheim, Umkirch, Freiburg-Hochdorf","sn":"March"},"7666":{"ln":"Denzlingen, Heuweiler, VÃ¶rstetten","sn":"Denzlingen"},"7667":{"ln":"Breisach am Rhein","sn":"Breisach"},"7668":{"ln":"Ihringen, Breisach am Rhein, Merdingen","sn":"Ihringen"},"7669":{"ln":"St. MÃ¤rgen, Titisee-Neustadt-Waldau","sn":"St. MÃ¤rgen"},"7671":{"ln":"Todtnau","sn":"Todtnau"},"7672":{"ln":"St. Blasien, Dachsberg, HÃ¤usern, HÃ¶chenschwand, Ibach","sn":"St. Blasien"},"7673":{"ln":"SchÃ¶nau im Schwarzwald, Aitern, BÃ¶llen, FrÃ¶hnd, Neuenweg, SchÃ¶nenberg, Tunau, Utzenfeld, Wembach, Wieden","sn":"SchÃ¶nau"},"7674":{"ln":"Todtmoos, Ibach, Todtnau","sn":"Todtmoos"},"7675":{"ln":"Bernau, St. Blasien","sn":"Bernau"},"7676":{"ln":"Feldberg, Baden-WÃ¼rttemberg, Todtnau","sn":"Feldberg"},"7681":{"ln":"Waldkirch, Gutach im Breisgau","sn":"Waldkirch"},"7682":{"ln":"Elzach, Biederbach, Winden im Elztal","sn":"Elzach"},"7683":{"ln":"Simonswald","sn":"Simonswald"},"7684":{"ln":"Glottertal","sn":"Glottertal"},"7685":{"ln":"Gutach im Breisgau, Winden im Elztal","sn":"Gutach"},"7702":{"ln":"Blumberg","sn":"Blumberg"},"7703":{"ln":"Bonndorf im Schwarzwald, StÃ¼hlingen","sn":"Bonndorf"},"7704":{"ln":"Geisingen","sn":"Geisingen"},"7705":{"ln":"BrÃ¤unlingen-Mistelbrunn, Donaueschingen-OT: Hubertshofen, Wolterdingen, Villingen-Schwenningen-Tannheim","sn":"BrÃ¤unlingen-Mistelbrunn"},"7706":{"ln":"Bad DÃ¼rrheim-OT: Biesingen, Sunthausen, Oberbaldingen, Unterbaldingen, Ãfingen, Immendingen","sn":"Bad DÃ¼rrheim-OT"},"7707":{"ln":"BrÃ¤unlingen-DÃ¶ggingen, HÃ¼fingen-Hausen vor Wald, -Mundelfingen, LÃ¶ffingen","sn":"BrÃ¤unlingen-DÃ¶ggingen"},"7708":{"ln":"Geisingen","sn":"Geisingen"},"7709":{"ln":"Wutach, StÃ¼hlingen","sn":"Wutach"},"7720":{"ln":"Villingen-Schwenningen-OT: Schwenningen, MÃ¼hlhausen, Dauchingen","sn":"Villingen-Schwenningen-OT"},"7721":{"ln":"Villingen-Schwenningen-OT: Villingen, Pfaffenweiler, Obereschach, Herzogenweiler, Weilersbach, Brigachtal, MÃ¶nchweiler, Unterkirnach","sn":"Villingen-Schwenningen-OT"},"7722":{"ln":"Triberg im Schwarzwald, Furtwangen, Hornberg, Schonach im Schwarzwald, SchÃ¶nwald im Schwarzwald","sn":"Triberg"},"7723":{"ln":"Furtwangen, GÃ¼tenbach","sn":"Furtwangen"},"7724":{"ln":"St. Georgen im Schwarzwald, Unterkirnach","sn":"St. Georgen im Schwarzwald"},"7725":{"ln":"KÃ¶nigsfeld im Schwarzwald, Hardt, MÃ¶nchweiler, Niedereschach, St. Georgen im Schwarzwald, Unterkirnach, Villingen-Schwenningen","sn":"KÃ¶nigsfeld"},"7726":{"ln":"Bad DÃ¼rrheim, Brigachtal","sn":"Bad DÃ¼rrheim"},"7727":{"ln":"VÃ¶hrenbach, Unterkirnach, Villingen-Schwenningen","sn":"VÃ¶hrenbach"},"7728":{"ln":"Niedereschach, Dauchingen, Villingen-Schwenningen","sn":"Niedereschach"},"7729":{"ln":"Schramberg: OT Tennenbronn, Villingendorf","sn":"Schramberg"},"7731":{"ln":"Singen (Hohentwiel), Gottmadingen, Hilzingen, MÃ¼hlhausen-Ehingen, Rielasingen-Worblingen","sn":"Singen"},"7732":{"ln":"Radolfzell am Bodensee, Gaienhofen, Moos","sn":"Radolfzell"},"7733":{"ln":"Engen, Immendingen, MÃ¼hlhausen-Ehingen, Tengen","sn":"Engen"},"7734":{"ln":"Gailingen am Hochrhein, BÃ¼singen am Hochrhein, Gottmadingen","sn":"Gailingen"},"7735":{"ln":"Ãhningen, Gaienhofen","sn":"Ãhningen"},"7736":{"ln":"Tengen, Blumberg","sn":"Tengen"},"7738":{"ln":"SteiÃlingen, Radolfzell am Bodensee, Singen (Hohentwiel)","sn":"SteiÃlingen"},"7739":{"ln":"Hilzingen, Gottmadingen","sn":"Hilzingen"},"7741":{"ln":"Waldshut-Tiengen-OT: Tiengen, Aichen Gutenburg, Breitenfeld, Detzeln, Gurtweil, Indlekofen, Krenkingen, Oberalpfen, KÃ¼ssaberg, Lauchringen, Ãhlingen-Birkendorf, Weilheim","sn":"Waldshut-Tiengen-OT"},"7742":{"ln":"Klettgau, Dettighofen, Hohentengen am Hochrhein, KÃ¼ssaberg, Lauchringen","sn":"Klettgau"},"7743":{"ln":"Ãhlingen-Birkendorf, Grafenhausen, StÃ¼hlingen, Waldshut-Tiengen","sn":"Ãhlingen-Birkendorf"},"7744":{"ln":"StÃ¼hlingen","sn":"StÃ¼hlingen"},"7745":{"ln":"Jestetten, Dettighofen, Lottstetten","sn":"Jestetten"},"7746":{"ln":"Eggingen, WutÃ¶schingen","sn":"Eggingen"},"7747":{"ln":"Grafenhausen, Schluchsee, Ãhlingen-Birkendorf, Waldshut-Tiengen, Weilheim","sn":"Grafenhausen"},"7748":{"ln":"Grafenhausen","sn":"Grafenhausen"},"7751":{"ln":"Waldshut-Tiengen, Dogern","sn":"Waldshut-Tiengen"},"7753":{"ln":"Albbruck, Laufenburg (Baden)","sn":"Albbruck"},"7754":{"ln":"GÃ¶rwihl, Albbruck","sn":"GÃ¶rwihl"},"7755":{"ln":"Weilheim (Baden), Albbruck, Dachsberg (SÃ¼dschwarzwald), HÃ¶chenschwand, St. Blasien, Waldshut-Tiengen","sn":"Weilheim"},"7761":{"ln":"Bad SÃ¤ckingen, Rickenbach (Hotzenwald), Wehr (Baden)","sn":"Bad SÃ¤ckingen"},"7762":{"ln":"Wehr (Baden), Hasel, SchwÃ¶rstadt","sn":"Wehr"},"7763":{"ln":"Murg, Bad SÃ¤ckingen, Laufenburg (Baden)","sn":"Murg"},"7764":{"ln":"Herrischried, GÃ¶rwihl","sn":"Herrischried"},"7765":{"ln":"Rickenbach","sn":"Rickenbach"},"7771":{"ln":"Stockach, Bodman-Ludwigshafen, Eigeltingen, Hohenfels, Orsingen-Nenzingen","sn":"Stockach"},"7773":{"ln":"Bodman-Ludwigshafen, Stockach, Ãberlingen","sn":"Bodman-Ludwigshafen"},"7774":{"ln":"Eigeltingen, Aach, Orsingen-Nenzingen, Volkertshausen","sn":"Eigeltingen"},"7775":{"ln":"MÃ¼hlingen, Eigeltingen, Hohenfels, Stockach","sn":"MÃ¼hlingen"},"7777":{"ln":"Sauldorf, Buchheim, Leibertingen, Neuhausen ob Eck","sn":"Sauldorf"},"7802":{"ln":"Oberkirch, Lautenbach","sn":"Oberkirch"},"7803":{"ln":"Gengenbach, Berghaupten, Ohlsbach","sn":"Gengenbach"},"7804":{"ln":"Oppenau","sn":"Oppenau"},"7805":{"ln":"Appenweier, Oberkirch-NuÃbach, -Zusenhofen","sn":"Appenweier"},"7806":{"ln":"Bad Peterstal-Griesbach, Oppenau","sn":"Bad Peterstal-Griesbach"},"7807":{"ln":"Neuried (Rhein)","sn":"Neuried"},"7808":{"ln":"Hohberg, Friesenheim-Oberschopfheim, Neuried-Schutterzell","sn":"Hohberg"},"7821":{"ln":"Lahr/Schwarzwald, Friesenheim","sn":"Lahr"},"7822":{"ln":"Ettenheim, Kappel-Grafenhausen, Mahlberg-Orschweier, Ringsheim, Rust","sn":"Ettenheim"},"7823":{"ln":"Seelbach, Schuttertal","sn":"Seelbach"},"7824":{"ln":"Schwanau, MeiÃenheim","sn":"Schwanau"},"7825":{"ln":"Kippenheim, Lahr/Schwarzwald, Mahlberg","sn":"Kippenheim"},"7826":{"ln":"Schuttertal, Biederbach, Ettenheim, Hofstetten","sn":"Schuttertal"},"7831":{"ln":"Hausach, Gutach (Schwarzwaldbahn)","sn":"Hausach"},"7832":{"ln":"Haslach im Kinzigtal, Fischerbach, Hofstetten, MÃ¼hlenbach, Steinach","sn":"Haslach"},"7833":{"ln":"Hornberg, Gutach (Schwarzwaldbahn)","sn":"Hornberg"},"7834":{"ln":"Wolfach, Hausach, Oberwolfach, Schiltach","sn":"Wolfach"},"7835":{"ln":"Zell am Harmersbach, Biberach (Baden)","sn":"Zell"},"7836":{"ln":"Schiltach, Schenkenzell, Wolfach","sn":"Schiltach"},"7837":{"ln":"Oberharmersbach, Zell am Harmersbach","sn":"Oberharmersbach"},"7838":{"ln":"Nordrach","sn":"Nordrach"},"7839":{"ln":"Schapbach, Oberwolfach","sn":"Schapbach"},"7841":{"ln":"Achern, Lauf, Sasbach, Sasbachwalden","sn":"Achern"},"7842":{"ln":"Kappelrodeck, OttenhÃ¶fen im Schwarzwald, Seebach","sn":"Kappelrodeck"},"7843":{"ln":"Renchen, Achern-Wagshurst","sn":"Renchen"},"7844":{"ln":"Rheinau, Renchen","sn":"Rheinau"},"7851":{"ln":"Kehl","sn":"Kehl"},"7852":{"ln":"WillstÃ¤tt, Kehl-Odelshofen","sn":"WillstÃ¤tt"},"7853":{"ln":"Kehl-Bodersweier, -Querbach, -Zierolshofen, -Leutesheim, Rheinau-Linx","sn":"Kehl-Bodersweier"},"7854":{"ln":"Kehl-Goldscheuer, -Marlen, -Kittersburg, -Hohnhurst, WillstÃ¤tt-Eckartsweier","sn":"Kehl-Goldscheuer"},"7903":{"ln":"Mainhardt, GroÃerlach, Michelfeld, WÃ¼stenrot","sn":"Mainhardt"},"7904":{"ln":"Ilshofen, Braunsbach, Crailsheim, Kirchberg an der Jagst, Langenburg, SchwÃ¤bisch Hall, Vellberg, Wolpertshausen","sn":"Ilshofen"},"7905":{"ln":"Langenburg, Braunsbach, Gerabronn, Ilshofen, KÃ¼nzelsau","sn":"Langenburg"},"7906":{"ln":"Braunsbach, Ilshofen, Langenburg, SchwÃ¤bisch Hall, UntermÃ¼nkheim, Wolpertshausen","sn":"Braunsbach"},"7907":{"ln":"SchwÃ¤bisch Hall-Sulzdorf, Ilshofen, SchwÃ¤bisch Hall, Vellberg, Wolpertshausen","sn":"SchwÃ¤bisch Hall"},"7930":{"ln":"Boxberg, Ahorn, Bad Mergentheim","sn":"Boxberg"},"7931":{"ln":"Bad Mergentheim, Boxberg, DÃ¶rzbach, Igersheim, Mulfingen, Niederstetten","sn":"Bad Mergentheim"},"7932":{"ln":"Niederstetten, Bad Mergentheim, Creglingen, Schrozberg, Weikersheim","sn":"Niederstetten"},"7933":{"ln":"Creglingen, Niederstetten, Schrozberg","sn":"Creglingen"},"7934":{"ln":"Weikersheim, Niederstetten","sn":"Weikersheim"},"7935":{"ln":"Schrozberg, Niederstetten","sn":"Schrozberg"},"7936":{"ln":"Schrozberg-Bartenstein, Blaufelden, Mulfingen, Schrozberg","sn":"Schrozberg-Bartenstein"},"7937":{"ln":"DÃ¶rzbach, Bad Mergentheim, Krautheim, Mulfingen","sn":"DÃ¶rzbach"},"7938":{"ln":"Mulfingen, Bad Mergentheim, DÃ¶rzbach, Ingelfingen, Schrozberg","sn":"Mulfingen"},"7939":{"ln":"Schrozberg-Spielbach, Creglingen, Niederstetten, Schrozberg","sn":"Schrozberg-Spielbach"},"7940":{"ln":"KÃ¼nzelsau, Ingelfingen, Kupferzell, Langenburg, Niedernhall","sn":"KÃ¼nzelsau"},"7941":{"ln":"Ãhringen, Neuenstein, Pfedelbach, Zweiflingen","sn":"Ãhringen"},"7942":{"ln":"Neuenstein, Ãhringen, Waldenburg","sn":"Neuenstein"},"7943":{"ln":"Forchtenberg, Jagsthausen, SchÃ¶ntal, Widdern","sn":"Forchtenberg"},"7944":{"ln":"Kupferzell, KÃ¼nzelsau, UntermÃ¼nkheim","sn":"Kupferzell"},"7945":{"ln":"WÃ¼stenrot, Bretzfeld, Mainhardt","sn":"WÃ¼stenrot"},"7946":{"ln":"Bretzfeld, Langenbrettach, Obersulm, Pfedelbach, WÃ¼stenrot","sn":"Bretzfeld"},"7947":{"ln":"Forchtenberg, Ãhringen, SchÃ¶ntal, WeiÃbach, Zweiflingen","sn":"Forchtenberg"},"7948":{"ln":"Ãhringen-Ohrnberg, Forchtenberg, Ãhringen, Zweiflingen","sn":"Ãhringen-Ohrnberg"},"7949":{"ln":"Pfedelbach-Untersteinbach, Bretzfeld, Michelfeld, Ãhringen, Pfedelbach, Waldenburg","sn":"Pfedelbach-Untersteinbach"},"7950":{"ln":"Schnelldorf, Feuchtwangen, KreÃberg, Satteldorf, WÃ¶rnitz","sn":"Schnelldorf"},"7951":{"ln":"Crailsheim, Ilshofen, Kirchberg an der Jagst, KreÃberg, Satteldorf","sn":"Crailsheim"},"7952":{"ln":"Gerabronn, Blaufelden, Langenburg, Rot am See","sn":"Gerabronn"},"7953":{"ln":"Blaufelden, Gerabronn, Rot am See, Schrozberg","sn":"Blaufelden"},"7954":{"ln":"Kirchberg an der Jagst, Crailsheim, Ilshofen, Rot am See","sn":"Kirchberg"},"7955":{"ln":"Wallhausen, Rot am See, Satteldorf","sn":"Wallhausen"},"7957":{"ln":"KreÃberg, Crailsheim, Schnelldorf, Stimpfach","sn":"KreÃberg"},"7958":{"ln":"Rot am See-Brettheim, Blaufelden, Gerabronn, Kirchberg an der Jagst, Rot am See, Wallhausen","sn":"Rot"},"7959":{"ln":"Frankenhardt, Jagstzell, Rosenberg","sn":"Frankenhardt"},"7961":{"ln":"Ellwangen (Jagst), Ellenberg, HÃ¼ttlingen, Jagstzell, Neuler, Rainau, StÃ¶dtlen, Unterschneidheim","sn":"Ellwangen"},"7962":{"ln":"Fichtenau, Ellenberg, Jagstzell, Stimpfach, WÃ¶rt","sn":"Fichtenau"},"7963":{"ln":"Adelmannsfelden, AbtsgmÃ¼nd, BÃ¼hlerzell, Neuler, Rosenberg","sn":"Adelmannsfelden"},"7964":{"ln":"StÃ¶dtlen, Ellenberg, Ellwangen (Jagst), Tannhausen, WÃ¶rt","sn":"StÃ¶dtlen"},"7965":{"ln":"Ellwangen-RÃ¶hlingen, Ellenberg, Ellwangen (Jagst), Rainau, Westhausen","sn":"Ellwangen-RÃ¶hlingen"},"7966":{"ln":"Unterschneidheim, Ellwangen (Jagst), Tannhausen","sn":"Unterschneidheim"},"7967":{"ln":"Jagstzell, Ellwangen (Jagst), Fichtenau, Frankenhardt, Rosenberg, Stimpfach","sn":"Jagstzell"},"7971":{"ln":"Gaildorf, Fichtenberg","sn":"Gaildorf"},"7972":{"ln":"Gschwend, Alfdorf, Fichtenberg","sn":"Gschwend"},"7973":{"ln":"Obersontheim, BÃ¼hlertann","sn":"Obersontheim"},"7974":{"ln":"BÃ¼hlerzell, Adelmannsfelden, BÃ¼hlertann","sn":"BÃ¼hlerzell"},"7975":{"ln":"AbtsgmÃ¼nd-UntergrÃ¶ningen, AbtsgmÃ¼nd, Adelmannsfelden, ObergrÃ¶ningen","sn":"AbtsgmÃ¼nd-UntergrÃ¶ningen"},"7976":{"ln":"Sulzbach-Laufen, AbtsgmÃ¼nd","sn":"Sulzbach-Laufen"},"7977":{"ln":"Oberrot, Fichtenberg, SchwÃ¤bisch Hall","sn":"Oberrot"},"8021":{"ln":"Waakirchen","sn":"Waakirchen"},"8022":{"ln":"Tegernsee","sn":"Tegernsee"},"8023":{"ln":"Bayrischzell","sn":"Bayrischzell"},"8024":{"ln":"Holzkirchen","sn":"Holzkirchen"},"8025":{"ln":"Miesbach","sn":"Miesbach"},"8026":{"ln":"Hausham","sn":"Hausham"},"8027":{"ln":"Dietramszell","sn":"Dietramszell"},"8028":{"ln":"Fischbachau","sn":"Fischbachau"},"8029":{"ln":"Kreuth bei Tegernsee","sn":"Kreuth"},"8031":{"ln":"Rosenheim","sn":"Rosenheim"},"8032":{"ln":"Rohrdorf","sn":"Rohrdorf"},"8033":{"ln":"Oberaudorf","sn":"Oberaudorf"},"8034":{"ln":"Brannenburg","sn":"Brannenburg"},"8035":{"ln":"Raubling","sn":"Raubling"},"8036":{"ln":"Stephanskirchen Simssee","sn":"Stephanskirchen"},"8038":{"ln":"Vogtareuth","sn":"Vogtareuth"},"8039":{"ln":"Rott a.Inn","sn":"Rott"},"8041":{"ln":"Bad TÃ¶lz","sn":"Bad TÃ¶lz"},"8042":{"ln":"Lenggries","sn":"Lenggries"},"8043":{"ln":"Jachenau","sn":"Jachenau"},"8045":{"ln":"Lenggries-Fall","sn":"Lenggries-Fall"},"8046":{"ln":"Bad Heilbrunn","sn":"Bad Heilbrunn"},"8051":{"ln":"Prien a.Chiemsee","sn":"Prien"},"8052":{"ln":"Aschau i.Chiemgau","sn":"Aschau"},"8053":{"ln":"Bad Endorf","sn":"Bad Endorf"},"8054":{"ln":"Breitbrunn a.Chiemsee","sn":"Breitbrunn"},"8055":{"ln":"Halfing","sn":"Halfing"},"8056":{"ln":"EggstÃ¤tt","sn":"EggstÃ¤tt"},"8057":{"ln":"Aschau-Sachrang","sn":"Aschau-Sachrang"},"8061":{"ln":"Bad Aibling","sn":"Bad Aibling"},"8062":{"ln":"BruckmÃ¼hl, Vagen","sn":"BruckmÃ¼hl"},"8063":{"ln":"Feldkirchen-Westerham","sn":"Feldkirchen-Westerham"},"8064":{"ln":"Au bei Bad Aibling","sn":"Au"},"8065":{"ln":"Tuntenhausen-SchÃ¶nau","sn":"Tuntenhausen-SchÃ¶nau"},"8066":{"ln":"Bad Feilnbach","sn":"Bad Feilnbach"},"8067":{"ln":"Tuntenhausen","sn":"Tuntenhausen"},"8071":{"ln":"Wasserburg am Inn","sn":"Wasserburg"},"8072":{"ln":"Haag in Oberbayern","sn":"Haag"},"8073":{"ln":"Gars am Inn","sn":"Gars"},"8074":{"ln":"Schnaitsee","sn":"Schnaitsee"},"8075":{"ln":"Amerang","sn":"Amerang"},"8076":{"ln":"Pfaffing","sn":"Pfaffing"},"8081":{"ln":"Dorfen","sn":"Dorfen"},"8082":{"ln":"Schwindegg","sn":"Schwindegg"},"8083":{"ln":"Isen","sn":"Isen"},"8084":{"ln":"Taufkirchen Vils","sn":"Taufkirchen"},"8085":{"ln":"Sankt Wolfgang Kr.Erding","sn":"Sankt"},"8086":{"ln":"Buchbach","sn":"Buchbach"},"8091":{"ln":"Kirchseon","sn":"Kirchseon"},"8092":{"ln":"Grafing bei MÃ¼nchen","sn":"Grafing"},"8093":{"ln":"Glonn i. Kreis Ebersberg","sn":"Glonn"},"8094":{"ln":"SteinhÃ¶ring","sn":"SteinhÃ¶ring"},"8095":{"ln":"Aying","sn":"Aying"},"8102":{"ln":"HÃ¶henkirchen-Siegertsbrunn","sn":"HÃ¶henkirchen-Siegertsbrunn"},"8104":{"ln":"Sauerlach","sn":"Sauerlach"},"8105":{"ln":"Gilching","sn":"Gilching"},"8106":{"ln":"Vaterstetten","sn":"Vaterstetten"},"8121":{"ln":"Markt Schwaben","sn":"Markt Schwaben"},"8122":{"ln":"Erding","sn":"Erding"},"8123":{"ln":"Moosinning","sn":"Moosinning"},"8124":{"ln":"Forstern in Oberbayern","sn":"Forstern"},"8131":{"ln":"Dachau","sn":"Dachau"},"8133":{"ln":"Haimhausen","sn":"Haimhausen"},"8134":{"ln":"Odelzhausen","sn":"Odelzhausen"},"8135":{"ln":"Sulzemoos","sn":"Sulzemoos"},"8136":{"ln":"Markt Indersdorf","sn":"Markt Indersdorf"},"8137":{"ln":"Petershausen","sn":"Petershausen"},"8138":{"ln":"Schwabhausen bei Dachau","sn":"Schwabhausen"},"8141":{"ln":"FÃ¼rstenfeldbruck","sn":"FÃ¼rstenfeldbruck"},"8142":{"ln":"Olching","sn":"Olching"},"8143":{"ln":"Inning am Ammersee","sn":"Inning"},"8144":{"ln":"Grafrath","sn":"Grafrath"},"8145":{"ln":"Mammendorf","sn":"Mammendorf"},"8146":{"ln":"Moorenweis","sn":"Moorenweis"},"8151":{"ln":"Starnberg, Berg am Starnberger See","sn":"Starnberg"},"8152":{"ln":"Herrsching am Ammersee, Seefeld","sn":"Herrsching"},"8153":{"ln":"WeÃling","sn":"WeÃling"},"8157":{"ln":"Feldafing","sn":"Feldafing"},"8158":{"ln":"Tutzing","sn":"Tutzing"},"8161":{"ln":"Freising","sn":"Freising"},"8165":{"ln":"Neufahrn bei Freising","sn":"Neufahrn"},"8166":{"ln":"Allershausen","sn":"Allershausen"},"8167":{"ln":"Zolling","sn":"Zolling"},"8168":{"ln":"Attenkirchen","sn":"Attenkirchen"},"8170":{"ln":"StraÃlach-Dingharting","sn":"StraÃlach-Dingharting"},"8171":{"ln":"Wolfratshausen","sn":"Wolfratshausen"},"8176":{"ln":"Egling bei Wolfratshausen","sn":"Egling"},"8177":{"ln":"MÃ¼nsing","sn":"MÃ¼nsing"},"8178":{"ln":"Icking","sn":"Icking"},"8179":{"ln":"Eurasburg an der Loisach","sn":"Eurasburg"},"8206":{"ln":"Prittriching","sn":"Prittriching"},"8221":{"ln":"GÃ¼nzburg","sn":"GÃ¼nzburg"},"8222":{"ln":"Burgau","sn":"Burgau"},"8223":{"ln":"Ichenhausen","sn":"Ichenhausen"},"8224":{"ln":"Offingen","sn":"Offingen"},"8225":{"ln":"Jettingen-Scheppach","sn":"Jettingen-Scheppach"},"8226":{"ln":"Bibertal","sn":"Bibertal"},"8230":{"ln":"Gablingen","sn":"Gablingen"},"8231":{"ln":"KÃ¶nigsbrunn","sn":"KÃ¶nigsbrunn"},"8232":{"ln":"SchwabmÃ¼nchen","sn":"SchwabmÃ¼nchen"},"8233":{"ln":"Kissing","sn":"Kissing"},"8234":{"ln":"Bobingen","sn":"Bobingen"},"8236":{"ln":"Fischach","sn":"Fischach"},"8237":{"ln":"Aindling","sn":"Aindling"},"8238":{"ln":"Gessertshausen","sn":"Gessertshausen"},"8239":{"ln":"Langenneufnach","sn":"Langenneufnach"},"8241":{"ln":"Buchloe","sn":"Buchloe"},"8243":{"ln":"Fuchstal","sn":"Fuchstal"},"8245":{"ln":"TÃ¼rkheim","sn":"TÃ¼rkheim"},"8246":{"ln":"Waal","sn":"Waal"},"8247":{"ln":"Bad WÃ¶rishofen","sn":"Bad WÃ¶rishofen"},"8248":{"ln":"Lamerdingen","sn":"Lamerdingen"},"8249":{"ln":"Ettringen","sn":"Ettringen"},"8250":{"ln":"Hilgertshausen-Tandern","sn":"Hilgertshausen-Tandern"},"8251":{"ln":"Aichach","sn":"Aichach"},"8252":{"ln":"Schrobenhausen","sn":"Schrobenhausen"},"8253":{"ln":"PÃ¶ttmes","sn":"PÃ¶ttmes"},"8254":{"ln":"AltomÃ¼nster","sn":"AltomÃ¼nster"},"8257":{"ln":"Inchenhofen","sn":"Inchenhofen"},"8258":{"ln":"Sielenbach","sn":"Sielenbach"},"8259":{"ln":"Schiltberg","sn":"Schiltberg"},"8261":{"ln":"Mindelheim","sn":"Mindelheim"},"8262":{"ln":"Mittelneufnach","sn":"Mittelneufnach"},"8263":{"ln":"Breitenbrunn","sn":"Breitenbrunn"},"8265":{"ln":"Pfaffenhausen","sn":"Pfaffenhausen"},"8266":{"ln":"Kirchheim in Schwaben","sn":"Kirchheim"},"8267":{"ln":"Dirlewang","sn":"Dirlewang"},"8268":{"ln":"Tussenhausen","sn":"Tussenhausen"},"8269":{"ln":"Unteregg","sn":"Unteregg"},"8271":{"ln":"Meitingen, Thierhaupten","sn":"Meitingen"},"8272":{"ln":"Wertingen","sn":"Wertingen"},"8273":{"ln":"Nordendorf","sn":"Nordendorf"},"8274":{"ln":"Buttenwiesen","sn":"Buttenwiesen"},"8276":{"ln":"Baar, Thierhaupten","sn":"Baar"},"8281":{"ln":"Thannhausen","sn":"Thannhausen"},"8282":{"ln":"Krumbach","sn":"Krumbach"},"8283":{"ln":"Neuburg an der Kammel","sn":"Neuburg"},"8284":{"ln":"Ziemetshausen","sn":"Ziemetshausen"},"8285":{"ln":"Burtenbach","sn":"Burtenbach"},"8291":{"ln":"Zusmarshausen","sn":"Zusmarshausen"},"8292":{"ln":"Dinkelscherben","sn":"Dinkelscherben"},"8293":{"ln":"Welden","sn":"Welden"},"8294":{"ln":"Horgau","sn":"Horgau"},"8295":{"ln":"AltenmÃ¼nster","sn":"AltenmÃ¼nster"},"8296":{"ln":"Villenbach","sn":"Villenbach"},"8302":{"ln":"GÃ¶risried","sn":"GÃ¶risried"},"8303":{"ln":"Waltenhofen","sn":"Waltenhofen"},"8304":{"ln":"Wildpoldsried","sn":"Wildpoldsried"},"8306":{"ln":"Ronsberg","sn":"Ronsberg"},"8320":{"ln":"Missen-Wilhams","sn":"Missen-Wilhams"},"8321":{"ln":"Sonthofen","sn":"Sonthofen"},"8322":{"ln":"Oberstdorf","sn":"Oberstdorf"},"8323":{"ln":"Immenstadt i.AllgÃ¤u","sn":"Immenstadt"},"8324":{"ln":"Bad Hindelang","sn":"Bad Hindelang"},"8325":{"ln":"Oberstaufen-Thalkirchdorf","sn":"Oberstaufen-Thalkirchdorf"},"8326":{"ln":"Fischen im AllgÃ¤u","sn":"Fischen"},"8327":{"ln":"Rettenberg","sn":"Rettenberg"},"8328":{"ln":"Balderschwang","sn":"Balderschwang"},"8330":{"ln":"Legau","sn":"Legau"},"8331":{"ln":"Memmingen","sn":"Memmingen"},"8332":{"ln":"Ottobeuren","sn":"Ottobeuren"},"8333":{"ln":"Babenhausen(Schwab)","sn":"Babenhausen"},"8334":{"ln":"Bad GrÃ¶nenbach","sn":"Bad GrÃ¶nenbach"},"8335":{"ln":"Fellheim","sn":"Fellheim"},"8336":{"ln":"Erkheim","sn":"Erkheim"},"8337":{"ln":"Altenstadt(Iller)","sn":"Altenstadt"},"8338":{"ln":"BÃ¶hen","sn":"BÃ¶hen"},"8340":{"ln":"Baisweil","sn":"Baisweil"},"8341":{"ln":"Kaufbeuren","sn":"Kaufbeuren"},"8342":{"ln":"Marktoberdorf","sn":"Marktoberdorf"},"8343":{"ln":"Aitrang","sn":"Aitrang"},"8344":{"ln":"Westendorf b.Kaufb","sn":"Westendorf"},"8345":{"ln":"StÃ¶ttwang","sn":"StÃ¶ttwang"},"8346":{"ln":"Pforzen","sn":"Pforzen"},"8347":{"ln":"Friesenried","sn":"Friesenried"},"8348":{"ln":"Bidingen","sn":"Bidingen"},"8349":{"ln":"StÃ¶tten a.Auerberg","sn":"StÃ¶tten"},"8361":{"ln":"Nesselwang","sn":"Nesselwang"},"8362":{"ln":"FÃ¼ssen","sn":"FÃ¼ssen"},"8363":{"ln":"Pfronten","sn":"Pfronten"},"8364":{"ln":"Seeg","sn":"Seeg"},"8365":{"ln":"Wertach","sn":"Wertach"},"8366":{"ln":"Oy-Mittelberg","sn":"Oy-Mittelberg"},"8367":{"ln":"RoÃhaupten (Forggensee)","sn":"RoÃhaupten"},"8368":{"ln":"Halblech","sn":"Halblech"},"8369":{"ln":"RÃ¼ckholz","sn":"RÃ¼ckholz"},"8370":{"ln":"Wiggensbach","sn":"Wiggensbach"},"8372":{"ln":"GÃ¼nzach","sn":"GÃ¼nzach"},"8373":{"ln":"Altusried","sn":"Altusried"},"8374":{"ln":"Dietmannsried","sn":"Dietmannsried"},"8375":{"ln":"Weitnau","sn":"Weitnau"},"8376":{"ln":"Sulzberg(AllgÃ¤u)","sn":"Sulzberg"},"8377":{"ln":"Unterthingau","sn":"Unterthingau"},"8378":{"ln":"Buchenberg b. Kempten","sn":"Buchenberg"},"8379":{"ln":"Waltenhofen-Martinszell-Oberdorf","sn":"Waltenhofen-Martinszell-Oberdorf"},"8380":{"ln":"Lindau-Achberg","sn":"Lindau-Achberg"},"8381":{"ln":"Lindenberg im AllgÃ¤u","sn":"Lindenberg"},"8382":{"ln":"Lindau","sn":"Lindau"},"8383":{"ln":"GrÃ¼nenbach(AllgÃ¤u)","sn":"GrÃ¼nenbach"},"8384":{"ln":"RÃ¶thenbach(AllgÃ¤u)","sn":"RÃ¶thenbach"},"8385":{"ln":"Hergatz","sn":"Hergatz"},"8386":{"ln":"Oberstaufen","sn":"Oberstaufen"},"8387":{"ln":"Weiler-Simmerberg","sn":"Weiler-Simmerberg"},"8388":{"ln":"Hergesnweiler","sn":"Hergesnweiler"},"8389":{"ln":"WeiÃensberg","sn":"WeiÃensberg"},"8392":{"ln":"Markt Rettenbach","sn":"Markt Rettenbach"},"8393":{"ln":"HolzgÃ¼nz","sn":"HolzgÃ¼nz"},"8394":{"ln":"Lautrach","sn":"Lautrach"},"8395":{"ln":"Tannheim(WÃ¼rtt.)","sn":"Tannheim"},"8402":{"ln":"MÃ¼nchsmÃ¼nster","sn":"MÃ¼nchsmÃ¼nster"},"8403":{"ln":"PfÃ¶rring","sn":"PfÃ¶rring"},"8404":{"ln":"Oberdolling","sn":"Oberdolling"},"8405":{"ln":"Stammham b.Ingolstadt","sn":"Stammham"},"8406":{"ln":"BÃ¶hmfeld","sn":"BÃ¶hmfeld"},"8407":{"ln":"Grossmehring","sn":"Grossmehring"},"8421":{"ln":"EichstÃ¤tt","sn":"EichstÃ¤tt"},"8422":{"ln":"Dollnstein","sn":"Dollnstein"},"8423":{"ln":"Titting","sn":"Titting"},"8424":{"ln":"Nassenfels","sn":"Nassenfels"},"8426":{"ln":"Walting Kr.EichstÃ¤tt","sn":"Walting"},"8427":{"ln":"Wellheim","sn":"Wellheim"},"8431":{"ln":"Neuburg a.d.Donau","sn":"Neuburg"},"8432":{"ln":"Burgheim","sn":"Burgheim"},"8433":{"ln":"KÃ¶nigsmoos","sn":"KÃ¶nigsmoos"},"8434":{"ln":"Rennertshofen","sn":"Rennertshofen"},"8441":{"ln":"Pfaffenhofen a.d.Ilm","sn":"Pfaffenhofen"},"8442":{"ln":"Wolnzach","sn":"Wolnzach"},"8443":{"ln":"Hohenwart Paar","sn":"Hohenwart"},"8444":{"ln":"Schweitenkirchen","sn":"Schweitenkirchen"},"8445":{"ln":"Gerolsbach","sn":"Gerolsbach"},"8446":{"ln":"PÃ¶rnbach","sn":"PÃ¶rnbach"},"8450":{"ln":"Ingolstadt-Zuchering","sn":"Ingolstadt-Zuchering"},"8452":{"ln":"Geisenfeld","sn":"Geisenfeld"},"8453":{"ln":"Reichertshofen Oberbay.","sn":"Reichertshofen"},"8454":{"ln":"Karlshuld","sn":"Karlshuld"},"8456":{"ln":"Lenting","sn":"Lenting"},"8457":{"ln":"Vohburg a.d.Donau","sn":"Vohburg"},"8458":{"ln":"Gaimersheim","sn":"Gaimersheim"},"8459":{"ln":"Manching","sn":"Manching"},"8460":{"ln":"Berching-Holnstein","sn":"Berching-Holnstein"},"8461":{"ln":"Beilngries","sn":"Beilngries"},"8462":{"ln":"Berching","sn":"Berching"},"8463":{"ln":"Greding","sn":"Greding"},"8464":{"ln":"Dietfurt a.d.AltmÃ¼hl","sn":"Dietfurt"},"8465":{"ln":"Kipfenberg","sn":"Kipfenberg"},"8466":{"ln":"Denkendorf Oberbay.","sn":"Denkendorf"},"8467":{"ln":"Kinding","sn":"Kinding"},"8468":{"ln":"Altmannstein-Pondorf","sn":"Altmannstein-Pondorf"},"8469":{"ln":"Freystadt-Burggriesbach","sn":"Freystadt-Burggriesbach"},"8501":{"ln":"Thyrnau","sn":"Thyrnau"},"8502":{"ln":"FÃ¼rstenzell","sn":"FÃ¼rstenzell"},"8503":{"ln":"Neuhaus a.Inn","sn":"Neuhaus"},"8504":{"ln":"Tittling","sn":"Tittling"},"8505":{"ln":"Hutthurm","sn":"Hutthurm"},"8506":{"ln":"Bad HÃ¶henstadt","sn":"Bad HÃ¶henstadt"},"8507":{"ln":"Neuburg am Inn","sn":"Neuburg"},"8509":{"ln":"Ruderting","sn":"Ruderting"},"8531":{"ln":"Pocking","sn":"Pocking"},"8532":{"ln":"Bad Griesbach im Rottal","sn":"Bad Griesbach"},"8533":{"ln":"RotthalmÃ¼nster","sn":"RotthalmÃ¼nster"},"8534":{"ln":"Tettenweis","sn":"Tettenweis"},"8535":{"ln":"Haarbach","sn":"Haarbach"},"8536":{"ln":"KÃ¶Ãlarn","sn":"KÃ¶Ãlarn"},"8537":{"ln":"Bad FÃ¼ssing-Aigen","sn":"Bad FÃ¼ssing-Aigen"},"8538":{"ln":"Pocking-Hartkirchen","sn":"Pocking-Hartkirchen"},"8541":{"ln":"Vilshofen Niederbay.","sn":"Vilshofen"},"8542":{"ln":"Ortenburg","sn":"Ortenburg"},"8543":{"ln":"Aidenbach","sn":"Aidenbach"},"8544":{"ln":"Eging am See","sn":"Eging"},"8545":{"ln":"Hofkirchen (Bavaria)","sn":"Hofkirchen"},"8546":{"ln":"Windorf-Otterskirchen","sn":"Windorf-Otterskirchen"},"8547":{"ln":"Osterhofen-Gergweis","sn":"Osterhofen-Gergweis"},"8548":{"ln":"Vilshofen-Sandbach","sn":"Vilshofen-Sandbach"},"8549":{"ln":"Vilshofen-Pleinting","sn":"Vilshofen-Pleinting"},"8550":{"ln":"Philippsreut","sn":"Philippsreut"},"8551":{"ln":"Freyung","sn":"Freyung"},"8552":{"ln":"Grafenau Niederbay.","sn":"Grafenau"},"8553":{"ln":"Spiegelau","sn":"Spiegelau"},"8554":{"ln":"SchÃ¶nberg (Niederbayern)","sn":"SchÃ¶nberg"},"8555":{"ln":"Perlesreut","sn":"Perlesreut"},"8556":{"ln":"HaidmÃ¼hle","sn":"HaidmÃ¼hle"},"8557":{"ln":"Mauth","sn":"Mauth"},"8558":{"ln":"Hohenau (Niederbayern)","sn":"Hohenau"},"8561":{"ln":"Pfarrkirchen Niederbay.","sn":"Pfarrkirchen"},"8562":{"ln":"Triftern","sn":"Triftern"},"8563":{"ln":"Bad Birnbach Rottal","sn":"Bad Birnbach"},"8564":{"ln":"Johanniskirchen","sn":"Johanniskirchen"},"8565":{"ln":"Dietersburg-Baumgarten","sn":"Dietersburg-Baumgarten"},"8571":{"ln":"Simbach am Inn","sn":"Simbach"},"8572":{"ln":"Tann Niederbay.","sn":"Tann"},"8573":{"ln":"Ering","sn":"Ering"},"8574":{"ln":"Wittibreut","sn":"Wittibreut"},"8581":{"ln":"Waldkirchen Niederbay.","sn":"Waldkirchen"},"8582":{"ln":"RÃ¶hrnbach","sn":"RÃ¶hrnbach"},"8583":{"ln":"Neureichenau","sn":"Neureichenau"},"8584":{"ln":"Breitenberg (Niederbayern)","sn":"Breitenberg"},"8585":{"ln":"Grainet","sn":"Grainet"},"8586":{"ln":"Hauzenberg","sn":"Hauzenberg"},"8591":{"ln":"Obernzell","sn":"Obernzell"},"8592":{"ln":"Wegscheid Niederbay.","sn":"Wegscheid"},"8593":{"ln":"Untergriesbach","sn":"Untergriesbach"},"8621":{"ln":"Trostberg","sn":"Trostberg"},"8622":{"ln":"Tacherting","sn":"Tacherting"},"8623":{"ln":"Kirchweidach","sn":"Kirchweidach"},"8624":{"ln":"Obing","sn":"Obing"},"8628":{"ln":"Kienberg","sn":"Kienberg"},"8629":{"ln":"Palling","sn":"Palling"},"8630":{"ln":"Kraiburg","sn":"Kraiburg"},"8631":{"ln":"MÃ¼hldorf","sn":"MÃ¼hldorf"},"8633":{"ln":"TÃ¼Ãling/Polling","sn":"TÃ¼Ãling"},"8634":{"ln":"Garching","sn":"Garching"},"8636":{"ln":"Ampfing","sn":"Ampfing"},"8638":{"ln":"Waldkraiburg","sn":"Waldkraiburg"},"8650":{"ln":"Marktschellenberg","sn":"Marktschellenberg"},"8651":{"ln":"Bad Reichenhall","sn":"Bad Reichenhall"},"8652":{"ln":"Berchtesgaden","sn":"Berchtesgaden"},"8654":{"ln":"Freilassing","sn":"Freilassing"},"8656":{"ln":"Anger","sn":"Anger"},"8657":{"ln":"Ramsau","sn":"Ramsau"},"8661":{"ln":"GrabenstÃ¤tt","sn":"GrabenstÃ¤tt"},"8662":{"ln":"Siegsdorf","sn":"Siegsdorf"},"8663":{"ln":"Ruhpolding","sn":"Ruhpolding"},"8664":{"ln":"Chieming","sn":"Chieming"},"8665":{"ln":"Inzell","sn":"Inzell"},"8666":{"ln":"Teisendorf","sn":"Teisendorf"},"8667":{"ln":"Seebruck","sn":"Seebruck"},"8669":{"ln":"Traunreut","sn":"Traunreut"},"8670":{"ln":"Reischach","sn":"Reischach"},"8677":{"ln":"Burghausen","sn":"Burghausen"},"8679":{"ln":"Burgkirchen an der Alz","sn":"Burgkirchen"},"8682":{"ln":"Laufen (Salzach)","sn":"Laufen"},"8705":{"ln":"Altfraunhofen","sn":"Altfraunhofen"},"8731":{"ln":"Dingolfing","sn":"Dingolfing"},"8732":{"ln":"Frontenhausen","sn":"Frontenhausen"},"8741":{"ln":"Vilsbiburg","sn":"Vilsbiburg"},"8743":{"ln":"Geisenhausen","sn":"Geisenhausen"},"8745":{"ln":"Bodenkirchen","sn":"Bodenkirchen"},"8761":{"ln":"Moosburg an der Isar","sn":"Moosburg"},"8765":{"ln":"Tondorf","sn":"Tondorf"},"8781":{"ln":"Rottenburg an der Laaber","sn":"Rottenburg"},"8801":{"ln":"Seeshaupt","sn":"Seeshaupt"},"8802":{"ln":"Huglfing","sn":"Huglfing"},"8803":{"ln":"PeiÃenberg","sn":"PeiÃenberg"},"8805":{"ln":"HohenpeiÃenberg","sn":"HohenpeiÃenberg"},"8806":{"ln":"Utting am Ammersee","sn":"Utting"},"8807":{"ln":"DieÃen am Ammersee","sn":"DieÃen"},"8808":{"ln":"PÃ¤hl","sn":"PÃ¤hl"},"8809":{"ln":"Wessobrunn","sn":"Wessobrunn"},"8821":{"ln":"Garmisch-Partenkirchen","sn":"Garmisch-Partenkirchen"},"8823":{"ln":"Mittenwald","sn":"Mittenwald"},"8824":{"ln":"Oberau","sn":"Oberau"},"8825":{"ln":"KrÃ¼n","sn":"KrÃ¼n"},"8841":{"ln":"Murnau","sn":"Murnau"},"8851":{"ln":"Kochel am See","sn":"Kochel"},"8856":{"ln":"Penzberg","sn":"Penzberg"},"8857":{"ln":"Benediktbeuern","sn":"Benediktbeuern"},"8858":{"ln":"Walchensee","sn":"Walchensee"},"8860":{"ln":"Bernbeuren","sn":"Bernbeuren"},"8861":{"ln":"Schongau","sn":"Schongau"},"8862":{"ln":"Steingaden (Obb)","sn":"Steingaden"},"8867":{"ln":"Rottenbuch (Obb)","sn":"Rottenbuch"},"8868":{"ln":"Schwabsoien","sn":"Schwabsoien"},"8869":{"ln":"Kinsau","sn":"Kinsau"},"9070":{"ln":"Tapfheim","sn":"Tapfheim"},"9071":{"ln":"Dillingen","sn":"Dillingen"},"9072":{"ln":"Lauingen","sn":"Lauingen"},"9073":{"ln":"Gundelfingen","sn":"Gundelfingen"},"9074":{"ln":"HÃ¶chstÃ¤dt","sn":"HÃ¶chstÃ¤dt"},"9075":{"ln":"GlÃ¶tt","sn":"GlÃ¶tt"},"9076":{"ln":"Wittislingen","sn":"Wittislingen"},"9077":{"ln":"Bachhagel","sn":"Bachhagel"},"9078":{"ln":"Mertingen","sn":"Mertingen"},"9080":{"ln":"Harburg","sn":"Harburg"},"9081":{"ln":"NÃ¶rdlingen","sn":"NÃ¶rdlingen"},"9082":{"ln":"Oettingen","sn":"Oettingen"},"9083":{"ln":"MÃ¶ttingen","sn":"MÃ¶ttingen"},"9084":{"ln":"Bissingen","sn":"Bissingen"},"9085":{"ln":"Alerheim","sn":"Alerheim"},"9086":{"ln":"Fremdingen","sn":"Fremdingen"},"9087":{"ln":"Marktoffingen","sn":"Marktoffingen"},"9088":{"ln":"MÃ¶nchsdeggingen","sn":"MÃ¶nchsdeggingen"},"9089":{"ln":"Bissingen-Unterringingen","sn":"Bissingen-Unterringingen"},"9090":{"ln":"Rain","sn":"Rain"},"9091":{"ln":"Monheim","sn":"Monheim"},"9092":{"ln":"Wemding","sn":"Wemding"},"9093":{"ln":"Polsingen","sn":"Polsingen"},"9094":{"ln":"Tagmersheim","sn":"Tagmersheim"},"9097":{"ln":"Marxheim","sn":"Marxheim"},"9099":{"ln":"Kaisheim","sn":"Kaisheim"},"9101":{"ln":"Langenzenn","sn":"Langenzenn"},"9102":{"ln":"Wilhermsdorf","sn":"Wilhermsdorf"},"9103":{"ln":"Cadolzburg","sn":"Cadolzburg"},"9104":{"ln":"Emskirchen","sn":"Emskirchen"},"9105":{"ln":"GroÃhabersdorf","sn":"GroÃhabersdorf"},"9106":{"ln":"Markt Erlbach","sn":"Markt Erlbach"},"9107":{"ln":"Trautskirchen","sn":"Trautskirchen"},"9122":{"ln":"Schwabach","sn":"Schwabach"},"9123":{"ln":"Lauf an der Pegnitz","sn":"Lauf"},"9126":{"ln":"Eckental","sn":"Eckental"},"9127":{"ln":"RoÃtal","sn":"RoÃtal"},"9128":{"ln":"Feucht","sn":"Feucht"},"9129":{"ln":"Wendelstein (Mittelfranken)","sn":"Wendelstein"},"9131":{"ln":"Erlangen","sn":"Erlangen"},"9132":{"ln":"Herzogenaurach","sn":"Herzogenaurach"},"9133":{"ln":"Baiersdorf","sn":"Baiersdorf"},"9134":{"ln":"Neunkirchen am Brand","sn":"Neunkirchen"},"9135":{"ln":"HeÃdorf","sn":"HeÃdorf"},"9141":{"ln":"WeiÃenburg in Bayern","sn":"WeiÃenburg"},"9142":{"ln":"Treuchtlingen","sn":"Treuchtlingen"},"9143":{"ln":"Pappenheim","sn":"Pappenheim"},"9144":{"ln":"Pleinfeld","sn":"Pleinfeld"},"9145":{"ln":"Solnhofen","sn":"Solnhofen"},"9146":{"ln":"Markt Berolzheim","sn":"Markt Berolzheim"},"9147":{"ln":"Nennslingen","sn":"Nennslingen"},"9148":{"ln":"Ettenstatt","sn":"Ettenstatt"},"9149":{"ln":"WeiÃenburg-Suffersheim","sn":"WeiÃenburg-Suffersheim"},"9151":{"ln":"Hersbruck","sn":"Hersbruck"},"9152":{"ln":"Hartenstein","sn":"Hartenstein"},"9153":{"ln":"Schnaittach","sn":"Schnaittach"},"9154":{"ln":"Pommelsbrunn","sn":"Pommelsbrunn"},"9155":{"ln":"Simmelsdorf","sn":"Simmelsdorf"},"9156":{"ln":"Neuhaus an der Pegnitz","sn":"Neuhaus"},"9157":{"ln":"Alfeld (Mittelfranken)","sn":"Alfeld"},"9158":{"ln":"Offenhausen (Mittelfranken)","sn":"Offenhausen"},"9161":{"ln":"Neustadt an der Aisch","sn":"Neustadt"},"9162":{"ln":"Scheinfeld","sn":"Scheinfeld"},"9163":{"ln":"Dachsbach","sn":"Dachsbach"},"9164":{"ln":"Langenfeld","sn":"Langenfeld"},"9165":{"ln":"Sugenheim","sn":"Sugenheim"},"9166":{"ln":"MÃ¼nchsteinach","sn":"MÃ¼nchsteinach"},"9167":{"ln":"Oberscheinfeld","sn":"Oberscheinfeld"},"9170":{"ln":"Schwanstetten","sn":"Schwanstetten"},"9171":{"ln":"Roth","sn":"Roth"},"9172":{"ln":"GeorgensgmÃ¼nd","sn":"GeorgensgmÃ¼nd"},"9173":{"ln":"ThalmÃ¤ssing","sn":"ThalmÃ¤ssing"},"9174":{"ln":"Hilpoltstein","sn":"Hilpoltstein"},"9175":{"ln":"Spalt","sn":"Spalt"},"9176":{"ln":"Allersberg","sn":"Allersberg"},"9177":{"ln":"Heideck","sn":"Heideck"},"9178":{"ln":"Abenberg","sn":"Abenberg"},"9179":{"ln":"Freystadt","sn":"Freystadt"},"9180":{"ln":"Seligenporten bei Pyrbaum (Oberpfalz)","sn":"Seligenporten"},"9181":{"ln":"Neumarkt in der Oberpfalz","sn":"Neumarkt"},"9182":{"ln":"Velburg","sn":"Velburg"},"9183":{"ln":"Burgthann","sn":"Burgthann"},"9184":{"ln":"Deining (Oberpfalz)","sn":"Deining"},"9185":{"ln":"MÃ¼hlhausen (Oberpfalz)","sn":"MÃ¼hlhausen"},"9186":{"ln":"Lauterhofen (Oberpfalz)","sn":"Lauterhofen"},"9187":{"ln":"Altdorf bei NÃ¼rnberg","sn":"Altdorf"},"9188":{"ln":"Postbauer-Heng","sn":"Postbauer-Heng"},"9189":{"ln":"Berg bei Neumarkt in der Oberpfalz","sn":"Berg"},"9191":{"ln":"Forchheim","sn":"Forchheim"},"9192":{"ln":"GrÃ¤fenberg","sn":"GrÃ¤fenberg"},"9193":{"ln":"HÃ¶chstadt","sn":"HÃ¶chstadt"},"9194":{"ln":"Ebermannstadt","sn":"Ebermannstadt"},"9195":{"ln":"Adelsdorf","sn":"Adelsdorf"},"9196":{"ln":"Wiesenttal","sn":"Wiesenttal"},"9198":{"ln":"Heiligenstadt in Oberfranken","sn":"Heiligenstadt"},"9201":{"ln":"Gesees","sn":"Gesees"},"9202":{"ln":"Waischenfeld","sn":"Waischenfeld"},"9203":{"ln":"Neudrossenfeld","sn":"Neudrossenfeld"},"9204":{"ln":"Plankenfels","sn":"Plankenfels"},"9205":{"ln":"Vorbach","sn":"Vorbach"},"9206":{"ln":"Obernsees","sn":"Obernsees"},"9207":{"ln":"KÃ¶nigsfeld (Oberfranken)","sn":"KÃ¶nigsfeld"},"9208":{"ln":"Bindlach","sn":"Bindlach"},"9220":{"ln":"Azendorf","sn":"Azendorf"},"9221":{"ln":"Kulmbach","sn":"Kulmbach"},"9222":{"ln":"Presseck","sn":"Presseck"},"9223":{"ln":"Rugendorf","sn":"Rugendorf"},"9225":{"ln":"Stadtsteinach","sn":"Stadtsteinach"},"9227":{"ln":"Neuenmarkt","sn":"Neuenmarkt"},"9228":{"ln":"Thurnau","sn":"Thurnau"},"9229":{"ln":"Mainleus","sn":"Mainleus"},"9231":{"ln":"Marktredwitz","sn":"Marktredwitz"},"9232":{"ln":"Wunsiedel im Fichtelgebirge","sn":"Wunsiedel"},"9233":{"ln":"Arzberg (Oberfranken)","sn":"Arzberg"},"9234":{"ln":"Neusorg","sn":"Neusorg"},"9235":{"ln":"Thierstein","sn":"Thierstein"},"9236":{"ln":"Nagel","sn":"Nagel"},"9238":{"ln":"RÃ¶slau","sn":"RÃ¶slau"},"9241":{"ln":"Pegnitz","sn":"Pegnitz"},"9242":{"ln":"GÃ¶Ãweinstein","sn":"GÃ¶Ãweinstein"},"9243":{"ln":"Pottenstein (Oberfranken)","sn":"Pottenstein"},"9244":{"ln":"Betzenstein","sn":"Betzenstein"},"9245":{"ln":"Obertrubach","sn":"Obertrubach"},"9246":{"ln":"Trockau","sn":"Trockau"},"9251":{"ln":"MÃ¼nchberg","sn":"MÃ¼nchberg"},"9252":{"ln":"Helmbrechts","sn":"Helmbrechts"},"9253":{"ln":"WeiÃenstadt","sn":"WeiÃenstadt"},"9254":{"ln":"Gefrees","sn":"Gefrees"},"9255":{"ln":"Marktleugast","sn":"Marktleugast"},"9256":{"ln":"Stammbach","sn":"Stammbach"},"9257":{"ln":"Zell (Oberfranken)","sn":"Zell"},"9260":{"ln":"Wilhelmsthal (Oberfranken)","sn":"Wilhelmsthal"},"9261":{"ln":"Kronach","sn":"Kronach"},"9262":{"ln":"Wallenfels","sn":"Wallenfels"},"9263":{"ln":"Ludwigsstadt","sn":"Ludwigsstadt"},"9264":{"ln":"KÃ¼ps","sn":"KÃ¼ps"},"9265":{"ln":"Pressig","sn":"Pressig"},"9266":{"ln":"Mitwitz","sn":"Mitwitz"},"9267":{"ln":"Nordhalben","sn":"Nordhalben"},"9268":{"ln":"Teuschnitz","sn":"Teuschnitz"},"9269":{"ln":"Tettau (Oberfranken)","sn":"Tettau"},"9270":{"ln":"CreuÃen","sn":"CreuÃen"},"9271":{"ln":"Alladorf","sn":"Alladorf"},"9272":{"ln":"Fichtelberg","sn":"Fichtelberg"},"9273":{"ln":"Bad Berneck im Fichtelgebirge","sn":"Bad Berneck"},"9274":{"ln":"Hollfeld","sn":"Hollfeld"},"9275":{"ln":"Speichersdorf","sn":"Speichersdorf"},"9276":{"ln":"BischofsgrÃ¼n","sn":"BischofsgrÃ¼n"},"9277":{"ln":"Warmensteinach","sn":"Warmensteinach"},"9278":{"ln":"Weidenberg","sn":"Weidenberg"},"9279":{"ln":"Mistelgau","sn":"Mistelgau"},"9280":{"ln":"Selbitz (Oberfranken)","sn":"Selbitz"},"9281":{"ln":"Hof (Saale)","sn":"Hof"},"9282":{"ln":"Naila","sn":"Naila"},"9283":{"ln":"Rehau","sn":"Rehau"},"9284":{"ln":"Schwarzenbach an der Saale","sn":"Schwarzenbach"},"9285":{"ln":"Kirchenlamitz","sn":"Kirchenlamitz"},"9286":{"ln":"Oberkotzau","sn":"Oberkotzau"},"9287":{"ln":"Selb","sn":"Selb"},"9288":{"ln":"Bad Steben","sn":"Bad Steben"},"9289":{"ln":"Schwarzenbach am Wald","sn":"Schwarzenbach"},"9292":{"ln":"Konradsreuth","sn":"Konradsreuth"},"9293":{"ln":"Berg (Oberfranken)","sn":"Berg"},"9294":{"ln":"Regnitzlosau","sn":"Regnitzlosau"},"9295":{"ln":"TÃ¶pen","sn":"TÃ¶pen"},"9302":{"ln":"Rottendorf (Unterfranken)","sn":"Rottendorf"},"9303":{"ln":"Eibelstadt","sn":"Eibelstadt"},"9305":{"ln":"Estenfeld","sn":"Estenfeld"},"9306":{"ln":"Kist","sn":"Kist"},"9307":{"ln":"Altertheim","sn":"Altertheim"},"9321":{"ln":"Kitzingen","sn":"Kitzingen"},"9323":{"ln":"Iphofen","sn":"Iphofen"},"9324":{"ln":"Dettelbach","sn":"Dettelbach"},"9325":{"ln":"Kleinlangheim","sn":"Kleinlangheim"},"9326":{"ln":"Markt Einersheim","sn":"Markt Einersheim"},"9331":{"ln":"Ochsenfurt","sn":"Ochsenfurt"},"9332":{"ln":"Marktbreit","sn":"Marktbreit"},"9333":{"ln":"Sommerhausen","sn":"Sommerhausen"},"9334":{"ln":"Giebelstadt","sn":"Giebelstadt"},"9335":{"ln":"Aub (Kreis WÃ¼rzburg)","sn":"Aub"},"9336":{"ln":"BÃ¼tthard","sn":"BÃ¼tthard"},"9337":{"ln":"GaukÃ¶nigshofen","sn":"GaukÃ¶nigshofen"},"9338":{"ln":"RÃ¶ttingen (Unterfranken)","sn":"RÃ¶ttingen"},"9339":{"ln":"Ippesheim","sn":"Ippesheim"},"9340":{"ln":"KÃ¶nigheim-Brehmen","sn":"KÃ¶nigheim-Brehmen"},"9341":{"ln":"Tauberbischofsheim","sn":"Tauberbischofsheim"},"9342":{"ln":"Wertheim","sn":"Wertheim"},"9343":{"ln":"Lauda-KÃ¶nigshofen","sn":"Lauda-KÃ¶nigshofen"},"9344":{"ln":"GroÃrinderfeld-Gerchsheim","sn":"GroÃrinderfeld-Gerchsheim"},"9345":{"ln":"KÃ¼lsheim (Baden)","sn":"KÃ¼lsheim"},"9346":{"ln":"GrÃ¼nsfeld","sn":"GrÃ¼nsfeld"},"9347":{"ln":"Wittighausen","sn":"Wittighausen"},"9348":{"ln":"Werbach-Gamburg","sn":"Werbach-Gamburg"},"9349":{"ln":"Werbach-Wenkheim","sn":"Werbach-Wenkheim"},"9350":{"ln":"Hundsbach (Unterfranken)","sn":"Hundsbach"},"9351":{"ln":"GemÃ¼nden am Main","sn":"GemÃ¼nden"},"9352":{"ln":"Lohr am Main","sn":"Lohr"},"9353":{"ln":"Karlstadt","sn":"Karlstadt"},"9354":{"ln":"Rieneck","sn":"Rieneck"},"9355":{"ln":"Frammersbach","sn":"Frammersbach"},"9356":{"ln":"Burgsinn","sn":"Burgsinn"},"9357":{"ln":"GrÃ¤fendorf (Unterfranken)","sn":"GrÃ¤fendorf"},"9358":{"ln":"GÃ¶ssenheim","sn":"GÃ¶ssenheim"},"9359":{"ln":"Wiesenfeld (Unterfranken)","sn":"Wiesenfeld"},"9360":{"ln":"ThÃ¼ngen (Bayern)","sn":"ThÃ¼ngen"},"9363":{"ln":"Arnstein (Unterfranken)","sn":"Arnstein"},"9364":{"ln":"Zellingen","sn":"Zellingen"},"9365":{"ln":"Rimpar","sn":"Rimpar"},"9366":{"ln":"Geroldshausen","sn":"Geroldshausen"},"9367":{"ln":"Unterpleichfeld","sn":"Unterpleichfeld"},"9369":{"ln":"Uettingen","sn":"Uettingen"},"9371":{"ln":"Miltenberg","sn":"Miltenberg"},"9372":{"ln":"Klingenberg am Main","sn":"Klingenberg"},"9373":{"ln":"Amorbach","sn":"Amorbach"},"9374":{"ln":"Eschau (Unterfranken)","sn":"Eschau"},"9375":{"ln":"Freudenberg","sn":"Freudenberg"},"9376":{"ln":"Collenberg","sn":"Collenberg"},"9377":{"ln":"Freudenberg-Boxtal","sn":"Freudenberg-Boxtal"},"9378":{"ln":"Riedern (Unterfranken)","sn":"Riedern"},"9381":{"ln":"Volkach","sn":"Volkach"},"9382":{"ln":"Gerolzhofen","sn":"Gerolzhofen"},"9383":{"ln":"Wiesentheid","sn":"Wiesentheid"},"9384":{"ln":"Schwanfeld","sn":"Schwanfeld"},"9385":{"ln":"Kolitzheim","sn":"Kolitzheim"},"9386":{"ln":"Prosselsheim","sn":"Prosselsheim"},"9391":{"ln":"Marktheidenfeld","sn":"Marktheidenfeld"},"9392":{"ln":"Faulbach (Unterfranken)","sn":"Faulbach"},"9393":{"ln":"Rothenfels (Unterfranken)","sn":"Rothenfels"},"9394":{"ln":"Oberndorf bei Marktheidenfeld","sn":"Oberndorf"},"9395":{"ln":"Homburg am Main","sn":"Homburg"},"9396":{"ln":"Urspringen bei Lohr am Main","sn":"Urspringen"},"9397":{"ln":"Wertheim-Dertingen","sn":"Wertheim-Dertingen"},"9398":{"ln":"Birkenfeld bei WÃ¼rzburg","sn":"Birkenfeld"},"9401":{"ln":"Neutraubling","sn":"Neutraubling"},"9402":{"ln":"Regenstauf","sn":"Regenstauf"},"9403":{"ln":"Donaustauf","sn":"Donaustauf"},"9404":{"ln":"Nittendorf","sn":"Nittendorf"},"9405":{"ln":"Bad Abbach","sn":"Bad Abbach"},"9406":{"ln":"Mintraching","sn":"Mintraching"},"9407":{"ln":"Wenzenbach","sn":"Wenzenbach"},"9408":{"ln":"Altenthann","sn":"Altenthann"},"9409":{"ln":"Pielenhofen","sn":"Pielenhofen"},"9420":{"ln":"GundhÃ¶ring","sn":"GundhÃ¶ring"},"9421":{"ln":"Straubing","sn":"Straubing"},"9422":{"ln":"Bogen (Niederbayern)","sn":"Bogen"},"9423":{"ln":"GeiselhÃ¶ring","sn":"GeiselhÃ¶ring"},"9424":{"ln":"StraÃkirchen bei Straubing","sn":"StraÃkirchen"},"9426":{"ln":"Oberschneiding","sn":"Oberschneiding"},"9427":{"ln":"Leiblfing","sn":"Leiblfing"},"9428":{"ln":"Kirchroth","sn":"Kirchroth"},"9429":{"ln":"Rain (Niederbayern)","sn":"Rain"},"9431":{"ln":"Schwandorf","sn":"Schwandorf"},"9433":{"ln":"Nabburg","sn":"Nabburg"},"9434":{"ln":"BodenwÃ¶hr","sn":"BodenwÃ¶hr"},"9435":{"ln":"Schwarzenfeld","sn":"Schwarzenfeld"},"9436":{"ln":"Nittenau","sn":"Nittenau"},"9438":{"ln":"FreihÃ¶ls","sn":"FreihÃ¶ls"},"9439":{"ln":"Kemnath bei Fuhrn","sn":"Kemnath"},"9441":{"ln":"Kelheim","sn":"Kelheim"},"9442":{"ln":"Riedenburg","sn":"Riedenburg"},"9443":{"ln":"Abensberg","sn":"Abensberg"},"9444":{"ln":"Siegenburg","sn":"Siegenburg"},"9445":{"ln":"Neustadt an der Donau","sn":"Neustadt"},"9446":{"ln":"Altmannstein","sn":"Altmannstein"},"9447":{"ln":"Essing","sn":"Essing"},"9448":{"ln":"Herrnwahlthann","sn":"Herrnwahlthann"},"9451":{"ln":"EggmÃ¼hl","sn":"EggmÃ¼hl"},"9452":{"ln":"Langquaid","sn":"Langquaid"},"9453":{"ln":"Thalmassing (Oberpfalz)","sn":"Thalmassing"},"9454":{"ln":"Aufhausen (Oberpfalz)","sn":"Aufhausen"},"9461":{"ln":"Roding","sn":"Roding"},"9462":{"ln":"Falkenstein (Oberpfalz)","sn":"Falkenstein"},"9463":{"ln":"Wald (Oberpfalz)","sn":"Wald"},"9464":{"ln":"Walderbach, Reichenbach","sn":"Walderbach"},"9465":{"ln":"Neukirchen-Balbini","sn":"Neukirchen-Balbini"},"9466":{"ln":"Stamsried","sn":"Stamsried"},"9467":{"ln":"Michelsneukirchen","sn":"Michelsneukirchen"},"9468":{"ln":"Zell (Landkreis Cham)","sn":"Zell"},"9469":{"ln":"NeubÃ¤u (Oberpfalz)","sn":"NeubÃ¤u"},"9471":{"ln":"Burglengenfeld","sn":"Burglengenfeld"},"9472":{"ln":"Hohenfels (Oberpfalz)","sn":"Hohenfels"},"9473":{"ln":"KallmÃ¼nz","sn":"KallmÃ¼nz"},"9474":{"ln":"SchmidmÃ¼hlen","sn":"SchmidmÃ¼hlen"},"9480":{"ln":"SÃ¼nching","sn":"SÃ¼nching"},"9481":{"ln":"Pfatter","sn":"Pfatter"},"9482":{"ln":"WÃ¶rth an der Donau","sn":"WÃ¶rth"},"9484":{"ln":"Brennberg","sn":"Brennberg"},"9491":{"ln":"Hemau","sn":"Hemau"},"9492":{"ln":"Parsberg","sn":"Parsberg"},"9493":{"ln":"Beratzhausen","sn":"Beratzhausen"},"9495":{"ln":"Breitenbrunn (Oberpfalz)","sn":"Breitenbrunn"},"9497":{"ln":"Seubersdorf (Oberpfalz)","sn":"Seubersdorf"},"9498":{"ln":"Laaber bei Hemau","sn":"Laaber"},"9499":{"ln":"Painten","sn":"Painten"},"9502":{"ln":"Frensdorf","sn":"Frensdorf"},"9503":{"ln":"Oberhaid (Oberfranken)","sn":"Oberhaid"},"9504":{"ln":"Stadelhofen","sn":"Stadelhofen"},"9505":{"ln":"Litzendorf","sn":"Litzendorf"},"9521":{"ln":"HaÃfurt","sn":"HaÃfurt"},"9523":{"ln":"Hofheim in Unterfranken","sn":"Hofheim"},"9524":{"ln":"Zeil am Main, Sand am Main","sn":"Zeil"},"9525":{"ln":"KÃ¶nigsberg in Bayern","sn":"KÃ¶nigsberg"},"9527":{"ln":"Knetzgau","sn":"Knetzgau"},"9528":{"ln":"Donnersdorf","sn":"Donnersdorf"},"9529":{"ln":"Oberaurach","sn":"Oberaurach"},"9531":{"ln":"Ebern","sn":"Ebern"},"9532":{"ln":"Maroldsweisach","sn":"Maroldsweisach"},"9533":{"ln":"Untermerzbach","sn":"Untermerzbach"},"9534":{"ln":"Burgpreppach","sn":"Burgpreppach"},"9535":{"ln":"Pfarrweisach","sn":"Pfarrweisach"},"9536":{"ln":"Kirchlauter","sn":"Kirchlauter"},"9542":{"ln":"Schesslitz","sn":"Schesslitz"},"9543":{"ln":"Hirschaid","sn":"Hirschaid"},"9544":{"ln":"Baunach","sn":"Baunach"},"9545":{"ln":"Buttenheim","sn":"Buttenheim"},"9546":{"ln":"Burgebrach","sn":"Burgebrach"},"9547":{"ln":"Zapfendorf","sn":"Zapfendorf"},"9548":{"ln":"MÃ¼hlhausen Mittelfr.","sn":"MÃ¼hlhausen"},"9549":{"ln":"Lisberg","sn":"Lisberg"},"9551":{"ln":"Burgwindheim","sn":"Burgwindheim"},"9552":{"ln":"Burghaslach","sn":"Burghaslach"},"9553":{"ln":"Ebrach Oberfr.","sn":"Ebrach"},"9554":{"ln":"Untersteinbach Unterfr.","sn":"Untersteinbach"},"9555":{"ln":"SchlÃ¼sselfeld-Aschbach","sn":"SchlÃ¼sselfeld-Aschbach"},"9556":{"ln":"Geiselwind","sn":"Geiselwind"},"9560":{"ln":"Grub a.Forst","sn":"Grub"},"9561":{"ln":"Coburg","sn":"Coburg"},"9562":{"ln":"Sonnefeld","sn":"Sonnefeld"},"9563":{"ln":"RÃ¶dental","sn":"RÃ¶dental"},"9564":{"ln":"Rodach","sn":"Rodach"},"9565":{"ln":"Untersiemau","sn":"Untersiemau"},"9566":{"ln":"Meeder","sn":"Meeder"},"9567":{"ln":"Sesslach-GemÃ¼nda","sn":"Sesslach-GemÃ¼nda"},"9568":{"ln":"Neustadt b.Coburg","sn":"Neustadt"},"9569":{"ln":"Sesslach","sn":"Sesslach"},"9571":{"ln":"Lichtenfels (Bavaria)","sn":"Lichtenfels"},"9572":{"ln":"Burgkunstadt","sn":"Burgkunstadt"},"9573":{"ln":"Staffelstein Oberfr.","sn":"Staffelstein"},"9574":{"ln":"Marktzeuln","sn":"Marktzeuln"},"9575":{"ln":"Weismain","sn":"Weismain"},"9576":{"ln":"Lichtenfels-Isling","sn":"Lichtenfels-Isling"},"9602":{"ln":"Neustadt an der Waldnaab","sn":"Neustadt"},"9603":{"ln":"FloÃ","sn":"FloÃ"},"9604":{"ln":"Wernberg-KÃ¶blitz","sn":"Wernberg-KÃ¶blitz"},"9605":{"ln":"Weiherhammer","sn":"Weiherhammer"},"9606":{"ln":"Pfreimd","sn":"Pfreimd"},"9607":{"ln":"Luhe-Wildenau","sn":"Luhe-Wildenau"},"9608":{"ln":"Kohlberg","sn":"Kohlberg"},"9621":{"ln":"Amberg (Oberpfalz)","sn":"Amberg"},"9622":{"ln":"Hirschau","sn":"Hirschau"},"9624":{"ln":"Ensdorf (Oberpfalz)","sn":"Ensdorf"},"9625":{"ln":"Kastl bei Amberg (Oberpfalz)","sn":"Kastl"},"9626":{"ln":"Hohenburg","sn":"Hohenburg"},"9627":{"ln":"Freudenberg (Oberpfalz)","sn":"Freudenberg"},"9628":{"ln":"Ursensollen","sn":"Ursensollen"},"9631":{"ln":"Tirschenreuth","sn":"Tirschenreuth"},"9632":{"ln":"Waldsassen","sn":"Waldsassen"},"9633":{"ln":"Mitterteich","sn":"Mitterteich"},"9634":{"ln":"Wiesau","sn":"Wiesau"},"9635":{"ln":"BÃ¤rnau","sn":"BÃ¤rnau"},"9636":{"ln":"PlÃ¶Ãberg","sn":"PlÃ¶Ãberg"},"9637":{"ln":"Falkenberg (Oberpfalz)","sn":"Falkenberg"},"9638":{"ln":"Neualbenreuth","sn":"Neualbenreuth"},"9639":{"ln":"MÃ¤hring","sn":"MÃ¤hring"},"9641":{"ln":"GrafenwÃ¶hr","sn":"GrafenwÃ¶hr"},"9642":{"ln":"Kemnath-Stadt","sn":"Kemnath-Stadt"},"9643":{"ln":"Auerbach (Oberpfalz)","sn":"Auerbach"},"9644":{"ln":"Pressath","sn":"Pressath"},"9645":{"ln":"Eschenbach (Oberpfalz)","sn":"Eschenbach"},"9646":{"ln":"Freihung","sn":"Freihung"},"9647":{"ln":"Kirchenthumbach","sn":"Kirchenthumbach"},"9648":{"ln":"Neustadt am Kulm","sn":"Neustadt"},"9651":{"ln":"VohenstrauÃ","sn":"VohenstrauÃ"},"9652":{"ln":"Waidhaus","sn":"Waidhaus"},"9653":{"ln":"Eslarn","sn":"Eslarn"},"9654":{"ln":"Pleystein","sn":"Pleystein"},"9655":{"ln":"TÃ¤nnesberg","sn":"TÃ¤nnesberg"},"9656":{"ln":"Moosbach (Oberpfalz)","sn":"Moosbach"},"9657":{"ln":"Waldthurn","sn":"Waldthurn"},"9658":{"ln":"Georgenberg (Oberpfalz)","sn":"Georgenberg"},"9659":{"ln":"Leuchtenberg","sn":"Leuchtenberg"},"9661":{"ln":"Sulzbach-Rosenberg","sn":"Sulzbach-Rosenberg"},"9662":{"ln":"Vilseck","sn":"Vilseck"},"9663":{"ln":"Neukirchen bei Sulzbach-Rosenberg","sn":"Neukirchen"},"9664":{"ln":"Hahnbach","sn":"Hahnbach"},"9665":{"ln":"KÃ¶nigstein (Oberpfalz)","sn":"KÃ¶nigstein"},"9666":{"ln":"Illschwang","sn":"Illschwang"},"9671":{"ln":"Oberviechtach","sn":"Oberviechtach"},"9672":{"ln":"Neunburg vorm Wald","sn":"Neunburg"},"9673":{"ln":"Tiefenbach (Oberpfalz)","sn":"Tiefenbach"},"9674":{"ln":"SchÃ¶nsee","sn":"SchÃ¶nsee"},"9675":{"ln":"Altendorf (Oberpfalz)","sn":"Altendorf"},"9676":{"ln":"Winklarn (Oberpfalz)","sn":"Winklarn"},"9677":{"ln":"Oberviechtach-Pullenried","sn":"Oberviechtach-Pullenried"},"9681":{"ln":"Windischeschenbach","sn":"Windischeschenbach"},"9682":{"ln":"Erbendorf","sn":"Erbendorf"},"9683":{"ln":"Friedenfels","sn":"Friedenfels"},"9701":{"ln":"Sandberg Unterfr.","sn":"Sandberg"},"9704":{"ln":"Euerdorf","sn":"Euerdorf"},"9708":{"ln":"Bad Bocklet","sn":"Bad Bocklet"},"9720":{"ln":"Ãchtelhausen","sn":"Ãchtelhausen"},"9721":{"ln":"Schweinfurt","sn":"Schweinfurt"},"9722":{"ln":"Werneck","sn":"Werneck"},"9723":{"ln":"RÃ¶thlein","sn":"RÃ¶thlein"},"9724":{"ln":"Stadtlauringen","sn":"Stadtlauringen"},"9725":{"ln":"Poppenhausen Unterfr.","sn":"Poppenhausen"},"9726":{"ln":"Euerbach","sn":"Euerbach"},"9727":{"ln":"Schonungen-Marktsteinach","sn":"Schonungen-Marktsteinach"},"9728":{"ln":"WÃ¼lfershausen Unterfr.","sn":"WÃ¼lfershausen"},"9729":{"ln":"Grettstadt","sn":"Grettstadt"},"9732":{"ln":"Hammelburg","sn":"Hammelburg"},"9733":{"ln":"MÃ¼nnerstadt","sn":"MÃ¼nnerstadt"},"9734":{"ln":"Burkardroth","sn":"Burkardroth"},"9735":{"ln":"Massbach","sn":"Massbach"},"9736":{"ln":"Oberthulba","sn":"Oberthulba"},"9737":{"ln":"Wartmannsroth","sn":"Wartmannsroth"},"9738":{"ln":"Rottershausen","sn":"Rottershausen"},"9741":{"ln":"Bad BrÃ¼ckenau","sn":"Bad BrÃ¼ckenau"},"9742":{"ln":"Kalbach RhÃ¶n","sn":"Kalbach"},"9744":{"ln":"Zeitlofs-Detter","sn":"Zeitlofs-Detter"},"9745":{"ln":"Wildflecken","sn":"Wildflecken"},"9746":{"ln":"Zeitlofs","sn":"Zeitlofs"},"9747":{"ln":"Geroda","sn":"Geroda"},"9748":{"ln":"Motten","sn":"Motten"},"9749":{"ln":"Oberbach Unterfr.","sn":"Oberbach"},"9761":{"ln":"Bad KÃ¶nigshofen","sn":"Bad KÃ¶nigshofen"},"9762":{"ln":"Saal a.d.Saale","sn":"Saal"},"9763":{"ln":"Sulzdorf a.d.Lederhecke","sn":"Sulzdorf"},"9764":{"ln":"HÃ¶chheim","sn":"HÃ¶chheim"},"9765":{"ln":"Trappstadt","sn":"Trappstadt"},"9766":{"ln":"Grosswenkheim","sn":"Grosswenkheim"},"9771":{"ln":"Bad Neustadt","sn":"Bad Neustadt"},"9772":{"ln":"Bischofsheim an der RhÃ¶n","sn":"Bischofsheim"},"9773":{"ln":"Unsleben","sn":"Unsleben"},"9774":{"ln":"Oberelsbach","sn":"Oberelsbach"},"9775":{"ln":"SchÃ¶nau an der Brend","sn":"SchÃ¶nau"},"9776":{"ln":"Mellrichstadt","sn":"Mellrichstadt"},"9777":{"ln":"Ostheim vor der RhÃ¶n","sn":"Ostheim"},"9778":{"ln":"Fladungen","sn":"Fladungen"},"9779":{"ln":"Nordheim vor der RhÃ¶n","sn":"Nordheim"},"9802":{"ln":"Ansbach-Katterbach","sn":"Ansbach-Katterbach"},"9803":{"ln":"Colmberg","sn":"Colmberg"},"9804":{"ln":"Aurach","sn":"Aurach"},"9805":{"ln":"Burgoberbach","sn":"Burgoberbach"},"9820":{"ln":"Lehrberg","sn":"Lehrberg"},"9822":{"ln":"Bechhofen a. d. Heide","sn":"Bechhofen"},"9823":{"ln":"Leutershausen","sn":"Leutershausen"},"9824":{"ln":"Dietenhofen","sn":"Dietenhofen"},"9825":{"ln":"Herrieden","sn":"Herrieden"},"9826":{"ln":"Weidenbach Mittelfr.","sn":"Weidenbach"},"9827":{"ln":"Lichtenau Mittelfr.","sn":"Lichtenau"},"9828":{"ln":"RÃ¼gland","sn":"RÃ¼gland"},"9829":{"ln":"Flachslanden","sn":"Flachslanden"},"9831":{"ln":"Gunzenhausen","sn":"Gunzenhausen"},"9832":{"ln":"WassertrÃ¼dingen","sn":"WassertrÃ¼dingen"},"9833":{"ln":"Heidenheim Mittelfr.","sn":"Heidenheim"},"9834":{"ln":"Theilenhofen","sn":"Theilenhofen"},"9836":{"ln":"Gunzenhausen-Cronheim","sn":"Gunzenhausen-Cronheim"},"9837":{"ln":"Haundorf","sn":"Haundorf"},"9841":{"ln":"Bad Windsheim","sn":"Bad Windsheim"},"9842":{"ln":"Uffenheim","sn":"Uffenheim"},"9843":{"ln":"Burgbernheim","sn":"Burgbernheim"},"9844":{"ln":"Obernzenn","sn":"Obernzenn"},"9845":{"ln":"Oberdachstetten","sn":"Oberdachstetten"},"9846":{"ln":"Ipsheim","sn":"Ipsheim"},"9847":{"ln":"Ergersheim","sn":"Ergersheim"},"9848":{"ln":"Simmershofen","sn":"Simmershofen"},"9851":{"ln":"DinkelsbÃ¼hl","sn":"DinkelsbÃ¼hl"},"9852":{"ln":"Feuchtwangen","sn":"Feuchtwangen"},"9853":{"ln":"Wilburgstetten","sn":"Wilburgstetten"},"9854":{"ln":"Wittelshofen","sn":"Wittelshofen"},"9855":{"ln":"Dentlein am Forst","sn":"Dentlein"},"9856":{"ln":"DÃ¼rrwangen","sn":"DÃ¼rrwangen"},"9857":{"ln":"Schopfloch Mittelfr.","sn":"Schopfloch"},"9861":{"ln":"Rothenburg ob der Tauber","sn":"Rothenburg"},"9865":{"ln":"Adelshofen","sn":"Adelshofen"},"9867":{"ln":"Geslau","sn":"Geslau"},"9868":{"ln":"SchillingsfÃ¼rst","sn":"SchillingsfÃ¼rst"},"9869":{"ln":"Wettringen Mittelfr.","sn":"Wettringen"},"9871":{"ln":"Windsbach","sn":"Windsbach"},"9872":{"ln":"Heilsbronn","sn":"Heilsbronn"},"9873":{"ln":"Abenberg-Wassermungenau","sn":"Abenberg-Wassermungenau"},"9874":{"ln":"Neuendettelsau","sn":"Neuendettelsau"},"9875":{"ln":"Wolframs-Eschenbach","sn":"Wolframs-Eschenbach"},"9876":{"ln":"Rohr Mittelfr.","sn":"Rohr"},"9901":{"ln":"Hengersberg","sn":"Hengersberg"},"9903":{"ln":"SchÃ¶llnach","sn":"SchÃ¶llnach"},"9904":{"ln":"Lalling","sn":"Lalling"},"9905":{"ln":"Bernried Niederbayern","sn":"Bernried"},"9906":{"ln":"Mariaposching","sn":"Mariaposching"},"9907":{"ln":"Zenting","sn":"Zenting"},"9908":{"ln":"SchÃ¶fweg","sn":"SchÃ¶fweg"},"9920":{"ln":"Bischofsmais","sn":"Bischofsmais"},"9921":{"ln":"Regen","sn":"Regen"},"9922":{"ln":"Zwiesel","sn":"Zwiesel"},"9923":{"ln":"Teisnach","sn":"Teisnach"},"9924":{"ln":"Bodenmais","sn":"Bodenmais"},"9925":{"ln":"Bayerisch Eisenstein","sn":"Bayerisch Eisenstein"},"9926":{"ln":"Frauenau","sn":"Frauenau"},"9927":{"ln":"Kirchberg im Wald","sn":"Kirchberg"},"9928":{"ln":"Kirchdorf im Wald","sn":"Kirchdorf"},"9929":{"ln":"Ruhmannsfelden","sn":"Ruhmannsfelden"},"9931":{"ln":"Plattling","sn":"Plattling"},"9932":{"ln":"Osterhofen","sn":"Osterhofen"},"9933":{"ln":"Wallersdorf","sn":"Wallersdorf"},"9935":{"ln":"Stephansposching","sn":"Stephansposching"},"9936":{"ln":"Wallerfing","sn":"Wallerfing"},"9937":{"ln":"OberpÃ¶ring","sn":"OberpÃ¶ring"},"9938":{"ln":"Moos Niederbayern","sn":"Moos"},"9941":{"ln":"Bad KÃ¶tzting","sn":"Bad KÃ¶tzting"},"9942":{"ln":"Viechtach","sn":"Viechtach"},"9943":{"ln":"Lam Oberpf.","sn":"Lam"},"9944":{"ln":"Miltach","sn":"Miltach"},"9945":{"ln":"Arnbruck","sn":"Arnbruck"},"9946":{"ln":"Hohenwarth bei KÃ¶tzting","sn":"Hohenwarth"},"9947":{"ln":"Neukirchen beim Heiligen Blut","sn":"Neukirchen"},"9948":{"ln":"Eschlkam","sn":"Eschlkam"},"9951":{"ln":"Landau an der Isar","sn":"Landau"},"9952":{"ln":"Eichendorf","sn":"Eichendorf"},"9953":{"ln":"Pilsting","sn":"Pilsting"},"9954":{"ln":"Simbach Niederbayern","sn":"Simbach"},"9955":{"ln":"Mamming","sn":"Mamming"},"9961":{"ln":"Mitterfels","sn":"Mitterfels"},"9962":{"ln":"Schwarzach (Niederbayern).","sn":"Schwarzach"},"9963":{"ln":"Konzell","sn":"Konzell"},"9964":{"ln":"Stallwang","sn":"Stallwang"},"9965":{"ln":"Sankt Englmar","sn":"Sankt"},"9966":{"ln":"Wiesenfelden","sn":"Wiesenfelden"},"9971":{"ln":"Cham","sn":"Cham"},"9972":{"ln":"WaldmÃ¼nchen","sn":"WaldmÃ¼nchen"},"9973":{"ln":"Furth im Wald","sn":"Furth"},"9974":{"ln":"Traitsching","sn":"Traitsching"},"9975":{"ln":"WaldmÃ¼nchen-Geigant","sn":"WaldmÃ¼nchen-Geigant"},"9976":{"ln":"RÃ¶tz","sn":"RÃ¶tz"},"9977":{"ln":"Arnschwang","sn":"Arnschwang"},"9978":{"ln":"SchÃ¶nthal (Oberpfalz)","sn":"SchÃ¶nthal"},"33051":{"ln":"Nassenheide","sn":"Nassenheide"},"33053":{"ln":"Zehlendorf","sn":"Zehlendorf"},"33054":{"ln":"Liebenwalde","sn":"Liebenwalde"},"33055":{"ln":"Kremmen","sn":"Kremmen"},"33056":{"ln":"MÃ¼hlenbeck","sn":"MÃ¼hlenbeck"},"33080":{"ln":"Marienthal","sn":"Marienthal"},"33082":{"ln":"Menz","sn":"Menz"},"33083":{"ln":"Schulzendorf","sn":"Schulzendorf"},"33084":{"ln":"Gutengermendorf","sn":"Gutengermendorf"},"33085":{"ln":"Seilershof","sn":"Seilershof"},"33086":{"ln":"Grieben","sn":"Grieben"},"33087":{"ln":"Bredereiche","sn":"Bredereiche"},"33088":{"ln":"Falkenthal","sn":"Falkenthal"},"33089":{"ln":"Himmelpfort","sn":"Himmelpfort"},"33093":{"ln":"FÃ¼rstenberg (Havel)","sn":"FÃ¼rstenberg"},"33094":{"ln":"LÃ¶wenberger Land","sn":"LÃ¶wenberger"},"33200":{"ln":"Bergholz-RehbrÃ¼cke","sn":"Bergholz-RehbrÃ¼cke"},"33201":{"ln":"GroÃ Glienicke","sn":"GroÃ Glienicke"},"33202":{"ln":"TÃ¶plitz","sn":"TÃ¶plitz"},"33203":{"ln":"Kleinmachnow","sn":"Kleinmachnow"},"33204":{"ln":"Beelitz","sn":"Beelitz"},"33205":{"ln":"Michendorf","sn":"Michendorf"},"33206":{"ln":"Fichtenwalde","sn":"Fichtenwalde"},"33207":{"ln":"GroÃ Kreutz","sn":"GroÃ Kreutz"},"33208":{"ln":"Fahrland","sn":"Fahrland"},"33209":{"ln":"Caputh","sn":"Caputh"},"33230":{"ln":"BÃ¶rnicke","sn":"BÃ¶rnicke"},"33231":{"ln":"Pausin","sn":"Pausin"},"33232":{"ln":"Brieselang","sn":"Brieselang"},"33233":{"ln":"Ketzin","sn":"Ketzin"},"33234":{"ln":"Wustermark","sn":"Wustermark"},"33235":{"ln":"Friesack","sn":"Friesack"},"33237":{"ln":"Paulinenaue","sn":"Paulinenaue"},"33238":{"ln":"Senzke","sn":"Senzke"},"33239":{"ln":"GroÃ Behnitz","sn":"GroÃ Behnitz"},"33331":{"ln":"Casekow","sn":"Casekow"},"33332":{"ln":"Gartz (Oder)","sn":"Gartz"},"33333":{"ln":"Tantow","sn":"Tantow"},"33334":{"ln":"Greiffenberg","sn":"Greiffenberg"},"33335":{"ln":"Pinnow","sn":"Pinnow"},"33336":{"ln":"Passow","sn":"Passow"},"33337":{"ln":"AltkÃ¼nkendorf","sn":"AltkÃ¼nkendorf"},"33338":{"ln":"Stolpe/Oder","sn":"Stolpe"},"33361":{"ln":"Joachimsthal","sn":"Joachimsthal"},"33362":{"ln":"Liepe","sn":"Liepe"},"33363":{"ln":"Altenhof","sn":"Altenhof"},"33364":{"ln":"GroÃ Ziethen","sn":"GroÃ Ziethen"},"33365":{"ln":"LÃ¼dersdorf","sn":"LÃ¼dersdorf"},"33366":{"ln":"Chorin","sn":"Chorin"},"33367":{"ln":"Friedrichswalde","sn":"Friedrichswalde"},"33368":{"ln":"Hohensaaten","sn":"Hohensaaten"},"33369":{"ln":"Oderberg","sn":"Oderberg"},"33393":{"ln":"GroÃ SchÃ¶nebeck","sn":"GroÃ SchÃ¶nebeck"},"33394":{"ln":"Blumberg","sn":"Blumberg"},"33395":{"ln":"Zerpenschleuse","sn":"Zerpenschleuse"},"33396":{"ln":"Klosterfelde","sn":"Klosterfelde"},"33397":{"ln":"Wandlitz","sn":"Wandlitz"},"33398":{"ln":"Werneuchen","sn":"Werneuchen"},"33432":{"ln":"MÃ¼ncheberg","sn":"MÃ¼ncheberg"},"33433":{"ln":"Buckow","sn":"Buckow"},"33434":{"ln":"Herzfelde bei Strausberg","sn":"Herzfelde"},"33435":{"ln":"Rehfelde","sn":"Rehfelde"},"33436":{"ln":"PrÃ¶tzel","sn":"PrÃ¶tzel"},"33437":{"ln":"Reichenberg bei Strausberg","sn":"Reichenberg"},"33438":{"ln":"Altlandsberg","sn":"Altlandsberg"},"33439":{"ln":"Fredersdorf-Vogelsdorf","sn":"Fredersdorf-Vogelsdorf"},"33451":{"ln":"Heckelberg","sn":"Heckelberg"},"33452":{"ln":"Neulewin","sn":"Neulewin"},"33454":{"ln":"WÃ¶lsickendorf/Wollenber","sn":"WÃ¶lsickendorf"},"33456":{"ln":"Wriezen","sn":"Wriezen"},"33457":{"ln":"Altreetz","sn":"Altreetz"},"33458":{"ln":"Falkenberg (Mark)","sn":"Falkenberg"},"33470":{"ln":"Lietzen","sn":"Lietzen"},"33472":{"ln":"Golzow bei Seelow","sn":"Golzow"},"33473":{"ln":"Zechin","sn":"Zechin"},"33474":{"ln":"Neutrebbin","sn":"Neutrebbin"},"33475":{"ln":"Letschin","sn":"Letschin"},"33476":{"ln":"Neuhardenberg","sn":"Neuhardenberg"},"33477":{"ln":"Trebnitz bei MÃ¼ncheberg","sn":"Trebnitz"},"33478":{"ln":"GroÃ Neuendorf","sn":"GroÃ Neuendorf"},"33479":{"ln":"KÃ¼strin-Kietz","sn":"KÃ¼strin-Kietz"},"33601":{"ln":"Podelzig","sn":"Podelzig"},"33602":{"ln":"Alt Zeschdorf","sn":"Alt"},"33603":{"ln":"Falkenhagen (Mark)","sn":"Falkenhagen"},"33604":{"ln":"Lebus","sn":"Lebus"},"33605":{"ln":"Boossen","sn":"Boossen"},"33606":{"ln":"MÃ¼llrose","sn":"MÃ¼llrose"},"33607":{"ln":"Briesen (Mark)","sn":"Briesen"},"33608":{"ln":"Jacobsdorf","sn":"Jacobsdorf"},"33609":{"ln":"Brieskow-Finkenheerd","sn":"Brieskow-Finkenheerd"},"33631":{"ln":"Bad Saarow","sn":"Bad Saarow"},"33632":{"ln":"Hangelsberg","sn":"Hangelsberg"},"33633":{"ln":"Spreenhagen","sn":"Spreenhagen"},"33634":{"ln":"BerkenbrÃ¼ck","sn":"BerkenbrÃ¼ck"},"33635":{"ln":"Arensdorf","sn":"Arensdorf"},"33636":{"ln":"SteinhÃ¶fel","sn":"SteinhÃ¶fel"},"33637":{"ln":"Beerfelde","sn":"Beerfelde"},"33638":{"ln":"RÃ¼dersdorf bei Berlin","sn":"RÃ¼dersdorf"},"33652":{"ln":"Neuzelle","sn":"Neuzelle"},"33653":{"ln":"Ziltendorf","sn":"Ziltendorf"},"33654":{"ln":"FÃ¼nfeichen","sn":"FÃ¼nfeichen"},"33655":{"ln":"Grunow","sn":"Grunow"},"33656":{"ln":"Bahro","sn":"Bahro"},"33657":{"ln":"Steinsdorf","sn":"Steinsdorf"},"33671":{"ln":"Lieberose","sn":"Lieberose"},"33672":{"ln":"Pfaffendorf bei Beeskow","sn":"Pfaffendorf"},"33673":{"ln":"Weichensdorf","sn":"Weichensdorf"},"33674":{"ln":"Trebatsch","sn":"Trebatsch"},"33675":{"ln":"Tauche","sn":"Tauche"},"33676":{"ln":"Friedland (Niederlausitz)","sn":"Friedland"},"33677":{"ln":"Glienicke bei Beeskow","sn":"Glienicke"},"33678":{"ln":"Storkow (Mark)","sn":"Storkow"},"33679":{"ln":"Wendisch Rietz","sn":"Wendisch Rietz"},"33701":{"ln":"GroÃbeeren","sn":"GroÃbeeren"},"33702":{"ln":"WÃ¼nsdorf","sn":"WÃ¼nsdorf"},"33703":{"ln":"Am Mellensee","sn":"Am"},"33704":{"ln":"Baruth/Mark","sn":"Baruth"},"33708":{"ln":"Rangsdorf","sn":"Rangsdorf"},"33731":{"ln":"Trebbin","sn":"Trebbin"},"33732":{"ln":"Hennickendorf","sn":"Hennickendorf"},"33733":{"ln":"StÃ¼lpe","sn":"StÃ¼lpe"},"33734":{"ln":"Felgentreu","sn":"Felgentreu"},"33741":{"ln":"NiedergÃ¶rsdorf","sn":"NiedergÃ¶rsdorf"},"33742":{"ln":"Oehna","sn":"Oehna"},"33743":{"ln":"BlÃ¶nsdorf","sn":"BlÃ¶nsdorf"},"33744":{"ln":"Hohenseefeld","sn":"Hohenseefeld"},"33745":{"ln":"Petkus","sn":"Petkus"},"33746":{"ln":"Werbig bei JÃ¼terbog","sn":"Werbig"},"33747":{"ln":"Marzahna","sn":"Marzahna"},"33748":{"ln":"Treuenbrietzen","sn":"Treuenbrietzen"},"33760":{"ln":"MÃ¼nchehofe","sn":"MÃ¼nchehofe"},"33762":{"ln":"Zeuthen","sn":"Zeuthen"},"33763":{"ln":"Bestensee","sn":"Bestensee"},"33764":{"ln":"Mittenwalde (Mark)","sn":"Mittenwalde"},"33765":{"ln":"MÃ¤rkisch Buchholz","sn":"MÃ¤rkisch Buchholz"},"33766":{"ln":"Teupitz","sn":"Teupitz"},"33767":{"ln":"Friedersdorf bei Berlin","sn":"Friedersdorf"},"33768":{"ln":"Prieros","sn":"Prieros"},"33769":{"ln":"TÃ¶pchin","sn":"TÃ¶pchin"},"33830":{"ln":"Ziesar","sn":"Ziesar"},"33831":{"ln":"Weseram","sn":"Weseram"},"33832":{"ln":"RogÃ¤sen","sn":"RogÃ¤sen"},"33833":{"ln":"Wollin","sn":"Wollin"},"33834":{"ln":"Pritzerbe","sn":"Pritzerbe"},"33835":{"ln":"Golzow","sn":"Golzow"},"33836":{"ln":"Butzow","sn":"Butzow"},"33837":{"ln":"Brielow","sn":"Brielow"},"33838":{"ln":"PÃ¤wesin","sn":"PÃ¤wesin"},"33839":{"ln":"Wusterwitz","sn":"Wusterwitz"},"33841":{"ln":"Belzig","sn":"Belzig"},"33843":{"ln":"Niemegk","sn":"Niemegk"},"33844":{"ln":"BrÃ¼ck","sn":"BrÃ¼ck"},"33845":{"ln":"Borkheide","sn":"Borkheide"},"33846":{"ln":"Dippmannsdorf","sn":"Dippmannsdorf"},"33847":{"ln":"GÃ¶rzke","sn":"GÃ¶rzke"},"33848":{"ln":"Raben","sn":"Raben"},"33849":{"ln":"Wiesenburg/Mark","sn":"Wiesenburg"},"33870":{"ln":"Zollchow bei Rathenow","sn":"Zollchow"},"33872":{"ln":"Hohennauen","sn":"Hohennauen"},"33873":{"ln":"GroÃwudicke","sn":"GroÃwudicke"},"33874":{"ln":"Stechow","sn":"Stechow"},"33875":{"ln":"Rhinow","sn":"Rhinow"},"33876":{"ln":"Buschow","sn":"Buschow"},"33877":{"ln":"Nitzahn","sn":"Nitzahn"},"33878":{"ln":"Nennhausen","sn":"Nennhausen"},"33920":{"ln":"Walsleben bei Neuruppin","sn":"Walsleben"},"33921":{"ln":"ZechlinerhÃ¼tte","sn":"ZechlinerhÃ¼tte"},"33922":{"ln":"Karwesee","sn":"Karwesee"},"33923":{"ln":"Flecken Zechlin","sn":"Flecken"},"33924":{"ln":"RÃ¤gelin","sn":"RÃ¤gelin"},"33925":{"ln":"Wustrau-Altfriesack","sn":"Wustrau-Altfriesack"},"33926":{"ln":"Herzberg (Mark)","sn":"Herzberg"},"33928":{"ln":"Wildberg","sn":"Wildberg"},"33929":{"ln":"GÃ¼hlen-Glienicke","sn":"GÃ¼hlen-Glienicke"},"33931":{"ln":"Rheinsberg","sn":"Rheinsberg"},"33932":{"ln":"Fehrbellin","sn":"Fehrbellin"},"33933":{"ln":"Lindow (Mark)","sn":"Lindow"},"33962":{"ln":"Heiligengrabe","sn":"Heiligengrabe"},"33963":{"ln":"Wulfersdorf bei Wittstock","sn":"Wulfersdorf"},"33964":{"ln":"Fretzdorf","sn":"Fretzdorf"},"33965":{"ln":"Herzsprung bei Wittstock","sn":"Herzsprung"},"33966":{"ln":"Dranse","sn":"Dranse"},"33967":{"ln":"Freyenstein","sn":"Freyenstein"},"33968":{"ln":"Meyenburg","sn":"Meyenburg"},"33969":{"ln":"Stepenitz","sn":"Stepenitz"},"33970":{"ln":"Neustadt (Dosse)","sn":"Neustadt"},"33971":{"ln":"Kyritz","sn":"Kyritz"},"33972":{"ln":"Breddin","sn":"Breddin"},"33973":{"ln":"Zernitz bei Neustadt","sn":"Zernitz"},"33974":{"ln":"Dessow","sn":"Dessow"},"33975":{"ln":"Dannenwalde","sn":"Dannenwalde"},"33976":{"ln":"Wutike","sn":"Wutike"},"33977":{"ln":"Gumtow","sn":"Gumtow"},"33978":{"ln":"Segeletz","sn":"Segeletz"},"33979":{"ln":"Wusterhausen/Dosse","sn":"Wusterhausen"},"33981":{"ln":"Putlitz","sn":"Putlitz"},"33982":{"ln":"Hoppenrade","sn":"Hoppenrade"},"33983":{"ln":"GroÃ Pankow","sn":"GroÃ Pankow"},"33984":{"ln":"Blumenthal bei Pritzwalk","sn":"Blumenthal"},"33986":{"ln":"Falkenhagen","sn":"Falkenhagen"},"33989":{"ln":"Sadenbeck","sn":"Sadenbeck"},"34202":{"ln":"Delitzsch","sn":"Delitzsch"},"34203":{"ln":"Zwenkau","sn":"Zwenkau"},"34204":{"ln":"Schkeuditz","sn":"Schkeuditz"},"34205":{"ln":"MarkranstÃ¤dt","sn":"MarkranstÃ¤dt"},"34206":{"ln":"RÃ¶tha","sn":"RÃ¶tha"},"34207":{"ln":"Zwochau","sn":"Zwochau"},"34208":{"ln":"LÃ¶bnitz","sn":"LÃ¶bnitz"},"34221":{"ln":"Schildau","sn":"Schildau"},"34222":{"ln":"Arzberg","sn":"Arzberg"},"34223":{"ln":"Dommitzsch","sn":"Dommitzsch"},"34224":{"ln":"Belgern","sn":"Belgern"},"34241":{"ln":"Jesewitz","sn":"Jesewitz"},"34242":{"ln":"HohenprieÃnitz","sn":"HohenprieÃnitz"},"34243":{"ln":"Bad DÃ¼ben","sn":"Bad DÃ¼ben"},"34244":{"ln":"Mockrehna","sn":"Mockrehna"},"34261":{"ln":"KÃ¼hren","sn":"KÃ¼hren"},"34262":{"ln":"Falkenhain","sn":"Falkenhain"},"34263":{"ln":"GroÃzschepa","sn":"GroÃzschepa"},"34291":{"ln":"Borsdorf","sn":"Borsdorf"},"34292":{"ln":"Brandis","sn":"Brandis"},"34293":{"ln":"Naunhof","sn":"Naunhof"},"34294":{"ln":"Rackwitz","sn":"Rackwitz"},"34295":{"ln":"Krensitz","sn":"Krensitz"},"34296":{"ln":"Groitzsch","sn":"Groitzsch"},"34297":{"ln":"Liebertwolkwitz","sn":"Liebertwolkwitz"},"34298":{"ln":"Taucha","sn":"Taucha"},"34299":{"ln":"Gaschwitz","sn":"Gaschwitz"},"34321":{"ln":"Leisnig","sn":"Leisnig"},"34322":{"ln":"RoÃwein","sn":"RoÃwein"},"34324":{"ln":"Ostrau (Sachsen)","sn":"Ostrau"},"34325":{"ln":"LÃ¼ttewitz Ortsteil von Zschaitz-Ottewig","sn":"LÃ¼ttewitz"},"34327":{"ln":"Waldheim","sn":"Waldheim"},"34328":{"ln":"Hartha","sn":"Hartha"},"34341":{"ln":"Geithain","sn":"Geithain"},"34342":{"ln":"Neukieritzsch","sn":"Neukieritzsch"},"34343":{"ln":"Regis-Breitingen","sn":"Regis-Breitingen"},"34344":{"ln":"Kohren-Sahlis","sn":"Kohren-Sahlis"},"34345":{"ln":"Bad Lausick","sn":"Bad Lausick"},"34346":{"ln":"Langensteinbach","sn":"Langensteinbach"},"34347":{"ln":"Espenhain","sn":"Espenhain"},"34348":{"ln":"Frohburg","sn":"Frohburg"},"34361":{"ln":"Dahlen (Sachsen)","sn":"Dahlen"},"34362":{"ln":"MÃ¼geln","sn":"MÃ¼geln"},"34363":{"ln":"Cavertitz","sn":"Cavertitz"},"34364":{"ln":"Wermsdorf","sn":"Wermsdorf"},"34381":{"ln":"Colditz","sn":"Colditz"},"34382":{"ln":"Nerchau","sn":"Nerchau"},"34383":{"ln":"Trebsen","sn":"Trebsen"},"34384":{"ln":"GroÃbothen","sn":"GroÃbothen"},"34385":{"ln":"Mutzschen","sn":"Mutzschen"},"34386":{"ln":"DÃ¼rrweitzschen","sn":"DÃ¼rrweitzschen"},"34463":{"ln":"PrieÃnitz","sn":"PrieÃnitz"},"34721":{"ln":"Nienburg","sn":"Nienburg"},"34722":{"ln":"PreuÃlitz","sn":"PreuÃlitz"},"34741":{"ln":"Frose","sn":"Frose"},"34742":{"ln":"Sylda","sn":"Sylda"},"34743":{"ln":"Ermsleben","sn":"Ermsleben"},"34745":{"ln":"Winningen","sn":"Winningen"},"34746":{"ln":"Giersleben","sn":"Giersleben"},"34771":{"ln":"Querfurt","sn":"Querfurt"},"34772":{"ln":"Helbra","sn":"Helbra"},"34773":{"ln":"Schwittersdorf","sn":"Schwittersdorf"},"34774":{"ln":"RÃ¶blingen a. See","sn":"RÃ¶blingen"},"34775":{"ln":"Wippra","sn":"Wippra"},"34776":{"ln":"Rothenschirmbach","sn":"Rothenschirmbach"},"34779":{"ln":"Abberode","sn":"Abberode"},"34901":{"ln":"Rosslau","sn":"Rosslau"},"34903":{"ln":"Coswig (Anhalt)","sn":"Coswig"},"34904":{"ln":"Oranienbaum","sn":"Oranienbaum"},"34905":{"ln":"WÃ¶rlitz","sn":"WÃ¶rlitz"},"34906":{"ln":"Raguhn","sn":"Raguhn"},"34907":{"ln":"Jeber-Bergfrieden","sn":"Jeber-Bergfrieden"},"34909":{"ln":"Aken","sn":"Aken"},"34920":{"ln":"KropstÃ¤dt","sn":"KropstÃ¤dt"},"34921":{"ln":"Kemberg","sn":"Kemberg"},"34922":{"ln":"MÃ¼hlanger","sn":"MÃ¼hlanger"},"34923":{"ln":"Cobbelsdorf","sn":"Cobbelsdorf"},"34924":{"ln":"Zahna","sn":"Zahna"},"34925":{"ln":"Bad Schmiedeberg","sn":"Bad Schmiedeberg"},"34926":{"ln":"Pretzsch (Elbe)","sn":"Pretzsch"},"34927":{"ln":"Globig","sn":"Globig"},"34928":{"ln":"Seegrehna","sn":"Seegrehna"},"34929":{"ln":"Straach","sn":"Straach"},"34953":{"ln":"GrÃ¤fenhainichen","sn":"GrÃ¤fenhainichen"},"34954":{"ln":"Roitzsch","sn":"Roitzsch"},"34955":{"ln":"Gossa","sn":"Gossa"},"34956":{"ln":"ZÃ¶rbig","sn":"ZÃ¶rbig"},"34973":{"ln":"Osternienburg","sn":"Osternienburg"},"34975":{"ln":"GÃ¶rzig","sn":"GÃ¶rzig"},"34976":{"ln":"GrÃ¶bzig","sn":"GrÃ¶bzig"},"34977":{"ln":"Quellendorf","sn":"Quellendorf"},"34978":{"ln":"Radegast","sn":"Radegast"},"34979":{"ln":"Wulfen","sn":"Wulfen"},"35020":{"ln":"Struppen","sn":"Struppen"},"35021":{"ln":"KÃ¶nigstein","sn":"KÃ¶nigstein"},"35022":{"ln":"Bad Schandau","sn":"Bad Schandau"},"35023":{"ln":"Bad Gottleuba","sn":"Bad Gottleuba"},"35024":{"ln":"Stadt Wehlen","sn":"Stadt"},"35025":{"ln":"Liebstadt","sn":"Liebstadt"},"35026":{"ln":"DÃ¼rrrÃ¶hrsdorf","sn":"DÃ¼rrrÃ¶hrsdorf"},"35027":{"ln":"Weesenstein","sn":"Weesenstein"},"35028":{"ln":"Krippen","sn":"Krippen"},"35032":{"ln":"Langenhennersdorf","sn":"Langenhennersdorf"},"35033":{"ln":"Rosenthal","sn":"Rosenthal"},"35052":{"ln":"Kipsdorf","sn":"Kipsdorf"},"35053":{"ln":"GlashÃ¼tte","sn":"GlashÃ¼tte"},"35054":{"ln":"Lauenstein","sn":"Lauenstein"},"35055":{"ln":"HÃ¶ckendorf","sn":"HÃ¶ckendorf"},"35056":{"ln":"Altenberg","sn":"Altenberg"},"35057":{"ln":"Hermsdorf","sn":"Hermsdorf"},"35058":{"ln":"Pretzschendorf","sn":"Pretzschendorf"},"35200":{"ln":"Arnsdorf","sn":"Arnsdorf"},"35201":{"ln":"LangebrÃ¼ck","sn":"LangebrÃ¼ck"},"35202":{"ln":"Klingenberg","sn":"Klingenberg"},"35203":{"ln":"Tharandt","sn":"Tharandt"},"35204":{"ln":"Wilsdruff","sn":"Wilsdruff"},"35205":{"ln":"Ottendorf-Okrilla","sn":"Ottendorf-Okrilla"},"35206":{"ln":"Kreischa","sn":"Kreischa"},"35207":{"ln":"Moritzburg","sn":"Moritzburg"},"35208":{"ln":"Radeburg","sn":"Radeburg"},"35209":{"ln":"Mohorn","sn":"Mohorn"},"35240":{"ln":"Tauscha","sn":"Tauscha"},"35241":{"ln":"Lommatzsch","sn":"Lommatzsch"},"35242":{"ln":"Nossen","sn":"Nossen"},"35243":{"ln":"WeinbÃ¶hla","sn":"WeinbÃ¶hla"},"35244":{"ln":"KrÃ¶gis","sn":"KrÃ¶gis"},"35245":{"ln":"Burkhardswalde","sn":"Burkhardswalde"},"35246":{"ln":"Ziegenhain","sn":"Ziegenhain"},"35247":{"ln":"Zehren","sn":"Zehren"},"35248":{"ln":"SchÃ¶nfeld","sn":"SchÃ¶nfeld"},"35249":{"ln":"Basslitz","sn":"Basslitz"},"35263":{"ln":"GrÃ¶ditz","sn":"GrÃ¶ditz"},"35264":{"ln":"Strehla","sn":"Strehla"},"35265":{"ln":"Glaubitz","sn":"Glaubitz"},"35266":{"ln":"Heyda","sn":"Heyda"},"35267":{"ln":"Diesbar-SeuÃlitz","sn":"Diesbar-SeuÃlitz"},"35268":{"ln":"Stauchitz","sn":"Stauchitz"},"35322":{"ln":"Doberlug-Kirchhain","sn":"Doberlug-Kirchhain"},"35323":{"ln":"Sonnewalde","sn":"Sonnewalde"},"35324":{"ln":"Crinitz","sn":"Crinitz"},"35325":{"ln":"RÃ¼ckersdorf","sn":"RÃ¼ckersdorf"},"35326":{"ln":"SchÃ¶nborn","sn":"SchÃ¶nborn"},"35327":{"ln":"PrieÃen","sn":"PrieÃen"},"35329":{"ln":"Dollenchen","sn":"Dollenchen"},"35341":{"ln":"Bad Liebenwerda","sn":"Bad Liebenwerda"},"35342":{"ln":"MÃ¼hlberg (Elbe)","sn":"MÃ¼hlberg"},"35343":{"ln":"Hirschfeld","sn":"Hirschfeld"},"35361":{"ln":"Schlieben","sn":"Schlieben"},"35362":{"ln":"SchÃ¶newalde","sn":"SchÃ¶newalde"},"35363":{"ln":"Fermerswalde","sn":"Fermerswalde"},"35364":{"ln":"Lebusa","sn":"Lebusa"},"35365":{"ln":"Falkenberg (Elster)","sn":"Falkenberg"},"35383":{"ln":"Elster (Elbe)","sn":"Elster"},"35384":{"ln":"Steinsdorf","sn":"Steinsdorf"},"35385":{"ln":"Annaburg","sn":"Annaburg"},"35386":{"ln":"Prettin","sn":"Prettin"},"35387":{"ln":"Seyda","sn":"Seyda"},"35388":{"ln":"KlÃ¶den","sn":"KlÃ¶den"},"35389":{"ln":"Holzdorf","sn":"Holzdorf"},"35433":{"ln":"Vetschau/Spreewald","sn":"Vetschau"},"35434":{"ln":"AltdÃ¶bern","sn":"AltdÃ¶bern"},"35435":{"ln":"Gollmitz","sn":"Gollmitz"},"35436":{"ln":"Laasow","sn":"Laasow"},"35439":{"ln":"Zinnitz","sn":"Zinnitz"},"35451":{"ln":"Dahme","sn":"Dahme"},"35452":{"ln":"GolÃen","sn":"GolÃen"},"35453":{"ln":"Drahnsdorf","sn":"Drahnsdorf"},"35454":{"ln":"Uckro","sn":"Uckro"},"35455":{"ln":"Walddrehna","sn":"Walddrehna"},"35456":{"ln":"Terpt","sn":"Terpt"},"35471":{"ln":"Birkenhainchen","sn":"Birkenhainchen"},"35472":{"ln":"Schlepzig","sn":"Schlepzig"},"35473":{"ln":"Neu LÃ¼bbenau","sn":"Neu"},"35474":{"ln":"SchÃ¶nwald (Brandenburg)","sn":"SchÃ¶nwald"},"35475":{"ln":"Straupitz","sn":"Straupitz"},"35476":{"ln":"Wittmannsdorf","sn":"Wittmannsdorf"},"35477":{"ln":"Rietz Neuendorf","sn":"Rietz"},"35478":{"ln":"Goyatz","sn":"Goyatz"},"35600":{"ln":"DÃ¶bern","sn":"DÃ¶bern"},"35601":{"ln":"Peitz","sn":"Peitz"},"35602":{"ln":"Drebkau","sn":"Drebkau"},"35603":{"ln":"Burg (Spreewald)","sn":"Burg"},"35604":{"ln":"Krieschow","sn":"Krieschow"},"35605":{"ln":"Komptendorf","sn":"Komptendorf"},"35606":{"ln":"Briesen","sn":"Briesen"},"35607":{"ln":"JÃ¤nschwalde","sn":"JÃ¤nschwalde"},"35608":{"ln":"GroÃ OÃnig","sn":"GroÃ OÃnig"},"35609":{"ln":"Drachhausen","sn":"Drachhausen"},"35691":{"ln":"BÃ¤renklau","sn":"BÃ¤renklau"},"35692":{"ln":"Kerkwitz","sn":"Kerkwitz"},"35693":{"ln":"LauschÃ¼tz","sn":"LauschÃ¼tz"},"35694":{"ln":"Gosda","sn":"Gosda"},"35695":{"ln":"Simmersdorf","sn":"Simmersdorf"},"35696":{"ln":"Briesnig","sn":"Briesnig"},"35697":{"ln":"Bagenz","sn":"Bagenz"},"35698":{"ln":"Hornow","sn":"Hornow"},"35722":{"ln":"Lauta","sn":"Lauta"},"35723":{"ln":"Bernsdorf","sn":"Bernsdorf"},"35724":{"ln":"Lohsa","sn":"Lohsa"},"35725":{"ln":"Wittichenau","sn":"Wittichenau"},"35726":{"ln":"GroÃ SÃ¤rchen","sn":"GroÃ SÃ¤rchen"},"35727":{"ln":"Burghammer","sn":"Burghammer"},"35728":{"ln":"Uhyst","sn":"Uhyst"},"35751":{"ln":"Welzow","sn":"Welzow"},"35752":{"ln":"Ruhland","sn":"Ruhland"},"35753":{"ln":"GroÃrÃ¤schen","sn":"GroÃrÃ¤schen"},"35754":{"ln":"Klettwitz","sn":"Klettwitz"},"35755":{"ln":"Ortrand","sn":"Ortrand"},"35756":{"ln":"Hosena","sn":"Hosena"},"35771":{"ln":"Bad Muskau","sn":"Bad Muskau"},"35772":{"ln":"Rietschen","sn":"Rietschen"},"35773":{"ln":"Schleife (Sachsen)","sn":"Schleife"},"35774":{"ln":"Boxberg (Oberlausitz)","sn":"Boxberg"},"35775":{"ln":"Pechern","sn":"Pechern"},"35792":{"ln":"OÃling","sn":"OÃling"},"35793":{"ln":"Elstra","sn":"Elstra"},"35795":{"ln":"KÃ¶nigsbrÃ¼ck","sn":"KÃ¶nigsbrÃ¼ck"},"35796":{"ln":"Panschwitz-Kuckau","sn":"Panschwitz-Kuckau"},"35797":{"ln":"Schwepnitz","sn":"Schwepnitz"},"35820":{"ln":"Zodel","sn":"Zodel"},"35822":{"ln":"Hagenwerder","sn":"Hagenwerder"},"35823":{"ln":"Ostritz","sn":"Ostritz"},"35825":{"ln":"Kodersdorf","sn":"Kodersdorf"},"35826":{"ln":"KÃ¶nigshain","sn":"KÃ¶nigshain"},"35827":{"ln":"Nieder Seifersdorf","sn":"Nieder"},"35828":{"ln":"Reichenbach (Oberlausitz)","sn":"Reichenbach"},"35829":{"ln":"Gersdorf","sn":"Gersdorf"},"35841":{"ln":"GroÃschÃ¶nau","sn":"GroÃschÃ¶nau"},"35842":{"ln":"Niederoderwitz","sn":"Niederoderwitz"},"35843":{"ln":"Hirschfelde","sn":"Hirschfelde"},"35844":{"ln":"Oybin","sn":"Oybin"},"35872":{"ln":"Neusalza-Spremberg","sn":"Neusalza-Spremberg"},"35873":{"ln":"Herrnhut","sn":"Herrnhut"},"35874":{"ln":"Bernstadt a. d. Eigen","sn":"Bernstadt"},"35875":{"ln":"Obercunnersdorf","sn":"Obercunnersdorf"},"35876":{"ln":"WeiÃenberg","sn":"WeiÃenberg"},"35877":{"ln":"Cunewalde","sn":"Cunewalde"},"35891":{"ln":"Rothenburg (Oberlausitz)","sn":"Rothenburg"},"35892":{"ln":"Horka","sn":"Horka"},"35893":{"ln":"MÃ¼cka","sn":"MÃ¼cka"},"35894":{"ln":"HÃ¤hnichen","sn":"HÃ¤hnichen"},"35895":{"ln":"Klitten","sn":"Klitten"},"35930":{"ln":"Seitschen","sn":"Seitschen"},"35931":{"ln":"KÃ¶nigswartha","sn":"KÃ¶nigswartha"},"35932":{"ln":"Guttau","sn":"Guttau"},"35933":{"ln":"Neschwitz","sn":"Neschwitz"},"35934":{"ln":"GroÃdubrau","sn":"GroÃdubrau"},"35935":{"ln":"Kleinwelka","sn":"Kleinwelka"},"35936":{"ln":"Sohland an der Spree","sn":"Sohland"},"35937":{"ln":"Prischwitz","sn":"Prischwitz"},"35938":{"ln":"GroÃpostwitz","sn":"GroÃpostwitz"},"35939":{"ln":"Pommritz","sn":"Pommritz"},"35951":{"ln":"Neukirch/Lausitz","sn":"Neukirch"},"35952":{"ln":"GroÃrÃ¶hrsdorf","sn":"GroÃrÃ¶hrsdorf"},"35953":{"ln":"Burkau","sn":"Burkau"},"35954":{"ln":"GroÃharthau","sn":"GroÃharthau"},"35955":{"ln":"Pulsnitz","sn":"Pulsnitz"},"35957":{"ln":"Neukirch (Landkreis Kamenz)","sn":"Neukirch"},"35971":{"ln":"Sebnitz","sn":"Sebnitz"},"35973":{"ln":"Stolpen","sn":"Stolpen"},"35974":{"ln":"Hinterhermsdorf","sn":"Hinterhermsdorf"},"35975":{"ln":"Hohnstein","sn":"Hohnstein"},"36020":{"ln":"Ebeleben","sn":"Ebeleben"},"36021":{"ln":"Schlotheim","sn":"Schlotheim"},"36022":{"ln":"GroÃengottern","sn":"GroÃengottern"},"36023":{"ln":"Horsmar","sn":"Horsmar"},"36024":{"ln":"Diedorf","sn":"Diedorf"},"36025":{"ln":"KÃ¶rner","sn":"KÃ¶rner"},"36026":{"ln":"Rodeberg (Struth)","sn":"Rodeberg"},"36027":{"ln":"Lengenfeld unterm Stein","sn":"Lengenfeld"},"36028":{"ln":"Kammerforst","sn":"Kammerforst"},"36029":{"ln":"Menteroda","sn":"Menteroda"},"36041":{"ln":"Bad Tennstedt","sn":"Bad Tennstedt"},"36042":{"ln":"GrÃ¤fentonna","sn":"GrÃ¤fentonna"},"36043":{"ln":"Kirchheilingen","sn":"Kirchheilingen"},"36071":{"ln":"Teistungen","sn":"Teistungen"},"36072":{"ln":"WeiÃenborn-LÃ¼derode","sn":"WeiÃenborn-LÃ¼derode"},"36074":{"ln":"Worbis","sn":"Worbis"},"36075":{"ln":"DingelstÃ¤dt","sn":"DingelstÃ¤dt"},"36076":{"ln":"Niederorschel","sn":"Niederorschel"},"36077":{"ln":"GroÃbodungen","sn":"GroÃbodungen"},"36081":{"ln":"Arenshausen","sn":"Arenshausen"},"36082":{"ln":"Ershausen","sn":"Ershausen"},"36083":{"ln":"Uder","sn":"Uder"},"36084":{"ln":"Heuthen","sn":"Heuthen"},"36085":{"ln":"Reinholterode","sn":"Reinholterode"},"36087":{"ln":"WÃ¼stheuterode","sn":"WÃ¼stheuterode"},"36200":{"ln":"Elxleben","sn":"Elxleben"},"36201":{"ln":"Walschleben","sn":"Walschleben"},"36202":{"ln":"Neudietendorf","sn":"Neudietendorf"},"36203":{"ln":"Vieselbach","sn":"Vieselbach"},"36204":{"ln":"Stotternheim","sn":"Stotternheim"},"36205":{"ln":"GrÃ¤fenroda","sn":"GrÃ¤fenroda"},"36206":{"ln":"GroÃfahner","sn":"GroÃfahner"},"36207":{"ln":"Plaue","sn":"Plaue"},"36208":{"ln":"Ermstedt","sn":"Ermstedt"},"36209":{"ln":"Klettbach","sn":"Klettbach"},"36252":{"ln":"Tambach-Dietharz/ThÃ¼r. Wald","sn":"Tambach-Dietharz"},"36253":{"ln":"Georgenthal (ThÃ¼ringen)","sn":"Georgenthal"},"36254":{"ln":"Friedrichswerth","sn":"Friedrichswerth"},"36255":{"ln":"Goldbach","sn":"Goldbach"},"36256":{"ln":"Wechmar","sn":"Wechmar"},"36257":{"ln":"Luisenthal","sn":"Luisenthal"},"36258":{"ln":"Friemar","sn":"Friemar"},"36259":{"ln":"Tabarz","sn":"Tabarz"},"36330":{"ln":"GroÃberndten","sn":"GroÃberndten"},"36331":{"ln":"Ilfeld","sn":"Ilfeld"},"36332":{"ln":"Ellrich","sn":"Ellrich"},"36333":{"ln":"Heringen/Helme","sn":"Heringen"},"36334":{"ln":"Wolkramshausen","sn":"Wolkramshausen"},"36335":{"ln":"GroÃwechsungen","sn":"GroÃwechsungen"},"36336":{"ln":"Klettenberg","sn":"Klettenberg"},"36337":{"ln":"Schiedungen","sn":"Schiedungen"},"36338":{"ln":"Bleicherode","sn":"Bleicherode"},"36370":{"ln":"GroÃenehrich","sn":"GroÃenehrich"},"36371":{"ln":"SchloÃvippach","sn":"SchloÃvippach"},"36372":{"ln":"Kleinneuhausen","sn":"Kleinneuhausen"},"36373":{"ln":"ButtstÃ¤dt","sn":"ButtstÃ¤dt"},"36374":{"ln":"WeiÃensee","sn":"WeiÃensee"},"36375":{"ln":"KindelbrÃ¼ck","sn":"KindelbrÃ¼ck"},"36376":{"ln":"StrauÃfurt","sn":"StrauÃfurt"},"36377":{"ln":"Rastenberg","sn":"Rastenberg"},"36378":{"ln":"Ostramondra","sn":"Ostramondra"},"36379":{"ln":"Holzengel","sn":"Holzengel"},"36421":{"ln":"Camburg","sn":"Camburg"},"36422":{"ln":"ReinstÃ¤dt","sn":"ReinstÃ¤dt"},"36423":{"ln":"OrlamÃ¼nde","sn":"OrlamÃ¼nde"},"36424":{"ln":"Kahla","sn":"Kahla"},"36425":{"ln":"Isserstedt","sn":"Isserstedt"},"36426":{"ln":"Ottendorf","sn":"Ottendorf"},"36427":{"ln":"Dornburg (Saale)","sn":"Dornburg"},"36428":{"ln":"Stadtroda","sn":"Stadtroda"},"36450":{"ln":"Kranichfeld","sn":"Kranichfeld"},"36451":{"ln":"Buttelstedt","sn":"Buttelstedt"},"36452":{"ln":"Berlstedt","sn":"Berlstedt"},"36453":{"ln":"Mellingen","sn":"Mellingen"},"36454":{"ln":"Magdala","sn":"Magdala"},"36458":{"ln":"Bad Berka","sn":"Bad Berka"},"36459":{"ln":"Blankenhain","sn":"Blankenhain"},"36461":{"ln":"Bad Sulza","sn":"Bad Sulza"},"36462":{"ln":"OÃmannstedt","sn":"OÃmannstedt"},"36463":{"ln":"Gebstedt","sn":"Gebstedt"},"36464":{"ln":"Wormstedt","sn":"Wormstedt"},"36465":{"ln":"Oberndorf","sn":"Oberndorf"},"36481":{"ln":"Neustadt (Orla)","sn":"Neustadt"},"36482":{"ln":"Triptis","sn":"Triptis"},"36483":{"ln":"ZiegenrÃ¼ck","sn":"ZiegenrÃ¼ck"},"36484":{"ln":"Knau","sn":"Knau"},"36601":{"ln":"Hermsdorf","sn":"Hermsdorf"},"36602":{"ln":"Ronneburg","sn":"Ronneburg"},"36603":{"ln":"Weida","sn":"Weida"},"36604":{"ln":"MÃ¼nchenbernsdorf","sn":"MÃ¼nchenbernsdorf"},"36605":{"ln":"Bad KÃ¶stritz","sn":"Bad KÃ¶stritz"},"36606":{"ln":"Kraftsdorf","sn":"Kraftsdorf"},"36607":{"ln":"NiederpÃ¶llnitz","sn":"NiederpÃ¶llnitz"},"36608":{"ln":"SeelingstÃ¤dt","sn":"SeelingstÃ¤dt"},"36621":{"ln":"Elsterberg","sn":"Elsterberg"},"36622":{"ln":"Triebes","sn":"Triebes"},"36623":{"ln":"Berga/Elster","sn":"Berga"},"36624":{"ln":"Teichwolframsdorf","sn":"Teichwolframsdorf"},"36625":{"ln":"Langenwetzendorf","sn":"Langenwetzendorf"},"36626":{"ln":"Auma","sn":"Auma"},"36628":{"ln":"Zeulenroda","sn":"Zeulenroda"},"36640":{"ln":"Remptendorf","sn":"Remptendorf"},"36642":{"ln":"Harra","sn":"Harra"},"36643":{"ln":"Thimmendorf","sn":"Thimmendorf"},"36644":{"ln":"Hirschberg (Saale)","sn":"Hirschberg"},"36645":{"ln":"MÃ¼hltroff","sn":"MÃ¼hltroff"},"36646":{"ln":"Tanna","sn":"Tanna"},"36647":{"ln":"Saalburg","sn":"Saalburg"},"36648":{"ln":"Dittersdorf","sn":"Dittersdorf"},"36649":{"ln":"Gefell","sn":"Gefell"},"36651":{"ln":"Bad Lobenstein","sn":"Bad Lobenstein"},"36652":{"ln":"Wurzbach","sn":"Wurzbach"},"36653":{"ln":"Lehesten","sn":"Lehesten"},"36691":{"ln":"Eisenberg (ThÃ¼ringen)","sn":"Eisenberg"},"36692":{"ln":"BÃ¼rgel","sn":"BÃ¼rgel"},"36693":{"ln":"Crossen","sn":"Crossen"},"36694":{"ln":"SchkÃ¶len","sn":"SchkÃ¶len"},"36701":{"ln":"Lichte","sn":"Lichte"},"36702":{"ln":"Lauscha","sn":"Lauscha"},"36703":{"ln":"GrÃ¤fenthal","sn":"GrÃ¤fenthal"},"36704":{"ln":"Steinheid","sn":"Steinheid"},"36705":{"ln":"OberweiÃbach","sn":"OberweiÃbach"},"36730":{"ln":"Sitzendorf","sn":"Sitzendorf"},"36731":{"ln":"Unterloquitz","sn":"Unterloquitz"},"36732":{"ln":"KÃ¶nitz","sn":"KÃ¶nitz"},"36733":{"ln":"Kaulsdorf (Saale)","sn":"Kaulsdorf"},"36734":{"ln":"Leutenberg","sn":"Leutenberg"},"36735":{"ln":"Probstzella","sn":"Probstzella"},"36736":{"ln":"Arnsgereuth","sn":"Arnsgereuth"},"36737":{"ln":"Drognitz","sn":"Drognitz"},"36738":{"ln":"KÃ¶nigsee","sn":"KÃ¶nigsee"},"36739":{"ln":"Rottenbach","sn":"Rottenbach"},"36741":{"ln":"Bad Blankenburg","sn":"Bad Blankenburg"},"36742":{"ln":"UhlstÃ¤dt","sn":"UhlstÃ¤dt"},"36743":{"ln":"Teichel","sn":"Teichel"},"36744":{"ln":"Remda","sn":"Remda"},"36761":{"ln":"Heubisch","sn":"Heubisch"},"36762":{"ln":"Steinach","sn":"Steinach"},"36764":{"ln":"Neuhaus-Schierschnitz","sn":"Neuhaus-Schierschnitz"},"36766":{"ln":"Schalkau","sn":"Schalkau"},"36781":{"ln":"GroÃbreitenbach, Goldisthal, KatzhÃ¼tte","sn":"GroÃbreitenbach"},"36782":{"ln":"Schmiedefeld am Rennsteig","sn":"Schmiedefeld"},"36783":{"ln":"Gehren","sn":"Gehren"},"36784":{"ln":"StÃ¼tzerbach","sn":"StÃ¼tzerbach"},"36785":{"ln":"GrÃ¤finau-Angstedt","sn":"GrÃ¤finau-Angstedt"},"36840":{"ln":"Trusetal","sn":"Trusetal"},"36841":{"ln":"Schleusingen","sn":"Schleusingen"},"36842":{"ln":"Oberhof","sn":"Oberhof"},"36843":{"ln":"Benshausen","sn":"Benshausen"},"36844":{"ln":"Rohr (ThÃ¼ringen)","sn":"Rohr"},"36845":{"ln":"Gehlberg","sn":"Gehlberg"},"36846":{"ln":"Dietzhausen","sn":"Dietzhausen"},"36847":{"ln":"Steinbach-Hallenberg","sn":"Steinbach-Hallenberg"},"36848":{"ln":"Wernshausen","sn":"Wernshausen"},"36849":{"ln":"Kleinschmalkalden","sn":"Kleinschmalkalden"},"36870":{"ln":"Masserberg","sn":"Masserberg"},"36871":{"ln":"Heldburg","sn":"Heldburg"},"36873":{"ln":"Themar","sn":"Themar"},"36874":{"ln":"SchÃ¶nbrunn (ThÃ¼ringen)","sn":"SchÃ¶nbrunn"},"36875":{"ln":"Streufdorf","sn":"Streufdorf"},"36878":{"ln":"Brattendorf","sn":"Brattendorf"},"36920":{"ln":"GroÃenlupnitz","sn":"GroÃenlupnitz"},"36921":{"ln":"Wutha-Farnroda","sn":"Wutha-Farnroda"},"36922":{"ln":"Gerstungen","sn":"Gerstungen"},"36923":{"ln":"Treffurt","sn":"Treffurt"},"36924":{"ln":"Mihla","sn":"Mihla"},"36925":{"ln":"Marksuhl","sn":"Marksuhl"},"36926":{"ln":"Creuzburg","sn":"Creuzburg"},"36927":{"ln":"Unterellen","sn":"Unterellen"},"36928":{"ln":"Neuenhof","sn":"Neuenhof"},"36929":{"ln":"Ruhla","sn":"Ruhla"},"36940":{"ln":"Oepfershausen","sn":"Oepfershausen"},"36941":{"ln":"Wasungen","sn":"Wasungen"},"36943":{"ln":"Bettenhausen","sn":"Bettenhausen"},"36944":{"ln":"Rentwertshausen","sn":"Rentwertshausen"},"36945":{"ln":"Henneberg","sn":"Henneberg"},"36946":{"ln":"Reichenhausen","sn":"Reichenhausen"},"36947":{"ln":"JÃ¼chsen","sn":"JÃ¼chsen"},"36948":{"ln":"RÃ¶mhild","sn":"RÃ¶mhild"},"36949":{"ln":"ObermaÃfeld","sn":"ObermaÃfeld"},"36961":{"ln":"Bad Liebenstein","sn":"Bad Liebenstein"},"36962":{"ln":"Vacha","sn":"Vacha"},"36963":{"ln":"Dorndorf","sn":"Dorndorf"},"36964":{"ln":"Dermbach","sn":"Dermbach"},"36965":{"ln":"Stadtlengsfeld","sn":"Stadtlengsfeld"},"36966":{"ln":"Kaltennordheim","sn":"Kaltennordheim"},"36967":{"ln":"Geisa","sn":"Geisa"},"36968":{"ln":"RoÃdorf (RhÃ¶n)","sn":"RoÃdorf"},"36969":{"ln":"Merkers","sn":"Merkers"},"37200":{"ln":"Wittgensdorf","sn":"Wittgensdorf"},"37202":{"ln":"ClauÃnitz","sn":"ClauÃnitz"},"37203":{"ln":"Gersdorf","sn":"Gersdorf"},"37204":{"ln":"Lichtenstein","sn":"Lichtenstein"},"37206":{"ln":"Frankenberg","sn":"Frankenberg"},"37207":{"ln":"Hainichen","sn":"Hainichen"},"37208":{"ln":"Oberlichtenau","sn":"Oberlichtenau"},"37209":{"ln":"Einsiedel","sn":"Einsiedel"},"37291":{"ln":"Augustusburg","sn":"Augustusburg"},"37292":{"ln":"Oederan","sn":"Oederan"},"37293":{"ln":"Eppendorf","sn":"Eppendorf"},"37294":{"ln":"GrÃ¼nhainichen","sn":"GrÃ¼nhainichen"},"37295":{"ln":"Lugau/Erzgeb.","sn":"Lugau"},"37296":{"ln":"Stollberg/Erzgeb.","sn":"Stollberg"},"37297":{"ln":"Thum","sn":"Thum"},"37298":{"ln":"Oelsnitz (Erzgebirge)","sn":"Oelsnitz"},"37320":{"ln":"Mulda/Sa.","sn":"Mulda"},"37321":{"ln":"Frankenstein","sn":"Frankenstein"},"37322":{"ln":"Brand-Erbisdorf","sn":"Brand-Erbisdorf"},"37323":{"ln":"Lichtenberg","sn":"Lichtenberg"},"37324":{"ln":"Reinsberg","sn":"Reinsberg"},"37325":{"ln":"Niederbobritzsch","sn":"Niederbobritzsch"},"37326":{"ln":"Frauenstein","sn":"Frauenstein"},"37327":{"ln":"Rechenberg-BienenmÃ¼hle","sn":"Rechenberg-BienenmÃ¼hle"},"37328":{"ln":"GroÃschirma","sn":"GroÃschirma"},"37329":{"ln":"GroÃhartmannsdorf","sn":"GroÃhartmannsdorf"},"37341":{"ln":"Ehrenfriedersdorf","sn":"Ehrenfriedersdorf"},"37342":{"ln":"Cranzahl","sn":"Cranzahl"},"37343":{"ln":"JÃ¶hstadt","sn":"JÃ¶hstadt"},"37344":{"ln":"Crottendorf","sn":"Crottendorf"},"37346":{"ln":"Geyer","sn":"Geyer"},"37347":{"ln":"BÃ¤renstein","sn":"BÃ¤renstein"},"37348":{"ln":"Oberwiesenthal","sn":"Oberwiesenthal"},"37349":{"ln":"Scheibenberg","sn":"Scheibenberg"},"37360":{"ln":"Olbernhau","sn":"Olbernhau"},"37361":{"ln":"Neuhausen/Erzgeb.","sn":"Neuhausen"},"37362":{"ln":"Seiffen/Erzgeb.","sn":"Seiffen"},"37363":{"ln":"ZÃ¶blitz","sn":"ZÃ¶blitz"},"37364":{"ln":"Reitzenhain","sn":"Reitzenhain"},"37365":{"ln":"Sayda","sn":"Sayda"},"37366":{"ln":"RÃ¼benau","sn":"RÃ¼benau"},"37367":{"ln":"Lengefeld","sn":"Lengefeld"},"37368":{"ln":"Deutschneudorf","sn":"Deutschneudorf"},"37369":{"ln":"Wolkenstein","sn":"Wolkenstein"},"37381":{"ln":"Penig","sn":"Penig"},"37382":{"ln":"Geringswalde","sn":"Geringswalde"},"37383":{"ln":"Lunzenau","sn":"Lunzenau"},"37384":{"ln":"Wechselburg","sn":"Wechselburg"},"37421":{"ln":"Oelsnitz (Vogtland)","sn":"Oelsnitz"},"37422":{"ln":"Markneukirchen","sn":"Markneukirchen"},"37423":{"ln":"Adorf (Vogtland)","sn":"Adorf"},"37430":{"ln":"Eichigt","sn":"Eichigt"},"37431":{"ln":"Mehltheuer (Vogtl.)","sn":"Mehltheuer"},"37432":{"ln":"Pausa/Vogtl.","sn":"Pausa"},"37433":{"ln":"GutenfÃ¼rst","sn":"GutenfÃ¼rst"},"37434":{"ln":"Bobenneukirchen","sn":"Bobenneukirchen"},"37435":{"ln":"Reuth","sn":"Reuth"},"37436":{"ln":"Weischlitz","sn":"Weischlitz"},"37437":{"ln":"Bad Elster","sn":"Bad Elster"},"37438":{"ln":"Bad Brambach","sn":"Bad Brambach"},"37439":{"ln":"Jocketa","sn":"Jocketa"},"37462":{"ln":"Rothenkirchen (Vogtland)","sn":"Rothenkirchen"},"37463":{"ln":"Bergen, Vogtlandkreis","sn":"Bergen"},"37464":{"ln":"SchÃ¶neck/Vogtl.","sn":"SchÃ¶neck"},"37465":{"ln":"Tannenbergsthal","sn":"Tannenbergsthal"},"37467":{"ln":"Klingenthal","sn":"Klingenthal"},"37468":{"ln":"Treuen","sn":"Treuen"},"37600":{"ln":"Neumark (Sachsen)","sn":"Neumark"},"37601":{"ln":"MÃ¼lsen St. Jacob","sn":"MÃ¼lsen"},"37602":{"ln":"Kirchberg (Sachsen)","sn":"Kirchberg"},"37603":{"ln":"Wildenfels","sn":"Wildenfels"},"37604":{"ln":"Mosel (Sachsen)","sn":"Mosel"},"37605":{"ln":"Hartenstein","sn":"Hartenstein"},"37606":{"ln":"Lengenfeld (Vogtland)","sn":"Lengenfeld"},"37607":{"ln":"Ebersbrunn","sn":"Ebersbrunn"},"37608":{"ln":"Waldenburg","sn":"Waldenburg"},"37609":{"ln":"Wolkenburg","sn":"Wolkenburg"},"37752":{"ln":"Eibenstock","sn":"Eibenstock"},"37754":{"ln":"ZwÃ¶nitz","sn":"ZwÃ¶nitz"},"37755":{"ln":"SchÃ¶nheide (Erzgebirge)","sn":"SchÃ¶nheide"},"37756":{"ln":"Breitenbrunn","sn":"Breitenbrunn"},"37757":{"ln":"RittersgrÃ¼n","sn":"RittersgrÃ¼n"},"38201":{"ln":"Gelbensande","sn":"Gelbensande"},"38203":{"ln":"Bad Doberan","sn":"Bad Doberan"},"38204":{"ln":"Broderstorf","sn":"Broderstorf"},"38205":{"ln":"Tessin","sn":"Tessin"},"38206":{"ln":"Graal-MÃ¼ritz","sn":"Graal-MÃ¼ritz"},"38207":{"ln":"Kritzmow","sn":"Kritzmow"},"38208":{"ln":"Dummerstorf","sn":"Dummerstorf"},"38209":{"ln":"Sanitz","sn":"Sanitz"},"38220":{"ln":"Ahrenshoop, Wustrow","sn":"Ahrenshoop"},"38221":{"ln":"Marlow","sn":"Marlow"},"38222":{"ln":"Ahrenshagen-Daskow-Gruel, -Tribohm, Semlow","sn":"Ahrenshagen-Daskow-Gruel"},"38223":{"ln":"Ribnitz-Damgarten-Beiershagen, -Dechowshof, -Langendamm, Saal","sn":"Ribnitz-Damgarten-Beiershagen"},"38224":{"ln":"Marlow-div. Ortsteile","sn":"Marlow-div"},"38225":{"ln":"Ahrenshagen-Daskow-Prusdorf, -Todenhagen, Schlemmin, Trinwillershagen","sn":"Ahrenshagen-Daskow-Prusdorf"},"38226":{"ln":"Dierhagen","sn":"Dierhagen"},"38227":{"ln":"Bartelshagen II, Spoldershagen, LÃ¼dershagen, Saal-Hessenburg","sn":"Bartelshagen"},"38231":{"ln":"Barth, Divitz, Fuhlendorf, Kenz-KÃ¼strow, LÃ¶bnitz-Saatel, Pruchten, GroÃ Kordshagen","sn":"Barth"},"38232":{"ln":"Seeheilbad Zingst","sn":"Seeheilbad"},"38233":{"ln":"Prerow, Wieck","sn":"Prerow"},"38234":{"ln":"Born","sn":"Born"},"38292":{"ln":"KrÃ¶pelin","sn":"KrÃ¶pelin"},"38293":{"ln":"KÃ¼hlungsborn","sn":"KÃ¼hlungsborn"},"38294":{"ln":"Neubukow","sn":"Neubukow"},"38295":{"ln":"Satow","sn":"Satow"},"38300":{"ln":"Hiddensee","sn":"Hiddensee"},"38301":{"ln":"Putbus","sn":"Putbus"},"38302":{"ln":"Sagard, Lietzow, Glowe, Lohme","sn":"Sagard"},"38303":{"ln":"Baabe, Sellin","sn":"Baabe"},"38304":{"ln":"Garz/RÃ¼gen, Karnitz, Zudar","sn":"Garz"},"38305":{"ln":"Gingst","sn":"Gingst"},"38306":{"ln":"Samtens, Rambin, Dreschvitz, AltefÃ¤hr","sn":"Samtens"},"38307":{"ln":"Poseritz, Gustow","sn":"Poseritz"},"38308":{"ln":"Ostseebad GÃ¶hren, Gager, Middelhagen, Thiessow","sn":"Ostseebad"},"38309":{"ln":"Trent, Schaprode","sn":"Trent"},"38320":{"ln":"Gremersdorf-Buchholz, Tribsees","sn":"Gremersdorf-Buchholz"},"38321":{"ln":"Kummerow, Neu Bartelshagen, Niepars, Pantelitz","sn":"Kummerow"},"38322":{"ln":"Franzburg, Gremersdorf-Buchholz-Grenzin, -Hohenbarnekow, -NeumÃ¼hl, -Wolfsdorf, Millienhagen-Oebelitz, Richtenberg, Weitenhagen","sn":"Franzburg"},"38323":{"ln":"Altenpleen, GroÃ Mohrdorf, Klausdorf, Kramerhof, Preetz, Prohn","sn":"Altenpleen"},"38324":{"ln":"Karnin, LÃ¶bnitz, Velgast","sn":"Karnin"},"38325":{"ln":"Gremersdorf-Buchholz-Buchholz, -Eichholz, Papenhagen, Splietsdorf","sn":"Gremersdorf-Buchholz-Buchholz"},"38326":{"ln":"Grimmen, SÃ¼derholz-Barkow, -Bartmannshagen, -Boltenhagen, -Kandelin, -Kaschow, -Willerswalde, -Zarnewanz, Splietsdorf-MÃ¼ggenwalde, Wendisch Baggendorf","sn":"Grimmen"},"38327":{"ln":"Elmenhorst, Wittenhagen, Jakobsdorf, Steinhagen, Wendorf, Zarrendorf","sn":"Elmenhorst"},"38328":{"ln":"Behnkendorf, Brandshagen, Miltzow, Reinberg","sn":"Behnkendorf"},"38331":{"ln":"SÃ¼derholz-Bretwisch, -DÃ¶nnie, -Grabow, -Grischow, -GÃ¶lzow-Dorf, -Poggendorf, -Rakow, -WÃ¼stenbilow","sn":"SÃ¼derholz-Bretwisch"},"38332":{"ln":"SÃ¼derholz-Griebenow, -GroÃ Bisdorf, -Klein Bisdorf, -Klevenow, -Kreutzmannshagen, -LÃ¼ssow, -Neuendorf, -PrÃ¼tzmannshagen, -Schmietkow, -Willershusen, -WÃ¼st Eldena, -WÃ¼steney","sn":"SÃ¼derholz-Griebenow"},"38333":{"ln":"Horst, Wilmshagen","sn":"Horst"},"38334":{"ln":"Glewitz","sn":"Glewitz"},"38351":{"ln":"Kirchdorf","sn":"Kirchdorf"},"38370":{"ln":"KrÃ¶slin, Freest","sn":"KrÃ¶slin"},"38371":{"ln":"Trassenheide, Karlshagen, PeenemÃ¼nde","sn":"Trassenheide"},"38372":{"ln":"Usedom","sn":"Usedom"},"38375":{"ln":"Ãckeritz","sn":"Ãckeritz"},"38376":{"ln":"Zirchow","sn":"Zirchow"},"38377":{"ln":"Zinnowitz","sn":"Zinnowitz"},"38378":{"ln":"Heringsdorf, Seebad Ahlbeck, Bansin","sn":"Heringsdorf"},"38391":{"ln":"Altenkirchen","sn":"Altenkirchen"},"38392":{"ln":"Sassnitz","sn":"Sassnitz"},"38393":{"ln":"Binz, Zirkow","sn":"Binz"},"38422":{"ln":"Neukloster","sn":"Neukloster"},"38423":{"ln":"Bad Kleinen","sn":"Bad Kleinen"},"38424":{"ln":"Bobitz","sn":"Bobitz"},"38425":{"ln":"Kirchdorf (Poel)","sn":"Kirchdorf"},"38426":{"ln":"Neuburg","sn":"Neuburg"},"38427":{"ln":"Blowatz","sn":"Blowatz"},"38428":{"ln":"Hohenkirchen","sn":"Hohenkirchen"},"38429":{"ln":"Glasin","sn":"Glasin"},"38450":{"ln":"Tarnow","sn":"Tarnow"},"38451":{"ln":"Hoppenrade","sn":"Hoppenrade"},"38452":{"ln":"Lalendorf","sn":"Lalendorf"},"38453":{"ln":"Mistorf","sn":"Mistorf"},"38454":{"ln":"Kritzkow","sn":"Kritzkow"},"38455":{"ln":"Plaaz","sn":"Plaaz"},"38456":{"ln":"Langhagen","sn":"Langhagen"},"38457":{"ln":"Krakow am See","sn":"Krakow"},"38458":{"ln":"Zehna","sn":"Zehna"},"38459":{"ln":"Laage","sn":"Laage"},"38461":{"ln":"BÃ¼tzow","sn":"BÃ¼tzow"},"38462":{"ln":"Baumgarten","sn":"Baumgarten"},"38464":{"ln":"Bernitt","sn":"Bernitt"},"38466":{"ln":"JÃ¼rgenshagen","sn":"JÃ¼rgenshagen"},"38481":{"ln":"Witzin","sn":"Witzin"},"38482":{"ln":"Warin","sn":"Warin"},"38483":{"ln":"BrÃ¼el","sn":"BrÃ¼el"},"38484":{"ln":"Ventschow","sn":"Ventschow"},"38485":{"ln":"Dabel","sn":"Dabel"},"38486":{"ln":"GustÃ¤vel","sn":"GustÃ¤vel"},"38488":{"ln":"Demen","sn":"Demen"},"38720":{"ln":"Grebbin","sn":"Grebbin"},"38721":{"ln":"Ziegendorf","sn":"Ziegendorf"},"38722":{"ln":"Raduhn","sn":"Raduhn"},"38723":{"ln":"Kladrum","sn":"Kladrum"},"38724":{"ln":"Siggelkow","sn":"Siggelkow"},"38725":{"ln":"GroÃ Godems","sn":"GroÃ Godems"},"38726":{"ln":"Spornitz","sn":"Spornitz"},"38727":{"ln":"Mestlin","sn":"Mestlin"},"38728":{"ln":"DomsÃ¼hl","sn":"DomsÃ¼hl"},"38729":{"ln":"Marnitz","sn":"Marnitz"},"38731":{"ln":"LÃ¼bz","sn":"LÃ¼bz"},"38732":{"ln":"Gallin","sn":"Gallin"},"38733":{"ln":"Karbow","sn":"Karbow"},"38735":{"ln":"Plau","sn":"Plau"},"38736":{"ln":"Goldberg (Mecklenburg)","sn":"Goldberg"},"38737":{"ln":"Ganzlin","sn":"Ganzlin"},"38738":{"ln":"Karow (Mecklenburg)","sn":"Karow"},"38750":{"ln":"Malliss","sn":"Malliss"},"38751":{"ln":"Picher","sn":"Picher"},"38752":{"ln":"Zierzow","sn":"Zierzow"},"38753":{"ln":"WÃ¶bbelin","sn":"WÃ¶bbelin"},"38754":{"ln":"Leussow","sn":"Leussow"},"38755":{"ln":"Eldena","sn":"Eldena"},"38756":{"ln":"Grabow (Mecklenburg)","sn":"Grabow"},"38757":{"ln":"Neustadt-Glewe","sn":"Neustadt-Glewe"},"38758":{"ln":"DÃ¶mitz","sn":"DÃ¶mitz"},"38759":{"ln":"Tewswoos","sn":"Tewswoos"},"38780":{"ln":"Lanz","sn":"Lanz"},"38781":{"ln":"Mellen","sn":"Mellen"},"38782":{"ln":"Reetz","sn":"Reetz"},"38783":{"ln":"Dallmin","sn":"Dallmin"},"38784":{"ln":"Kleinow","sn":"Kleinow"},"38785":{"ln":"Berge","sn":"Berge"},"38787":{"ln":"GlÃ¶wen","sn":"GlÃ¶wen"},"38788":{"ln":"GroÃ Warnow","sn":"GroÃ Warnow"},"38789":{"ln":"Wolfshagen","sn":"Wolfshagen"},"38791":{"ln":"Bad Wilsnack","sn":"Bad Wilsnack"},"38792":{"ln":"Lenzen (Elbe)","sn":"Lenzen"},"38793":{"ln":"Dergenthin","sn":"Dergenthin"},"38794":{"ln":"Cumlosen","sn":"Cumlosen"},"38796":{"ln":"Viesecke","sn":"Viesecke"},"38797":{"ln":"KarstÃ¤dt","sn":"KarstÃ¤dt"},"38821":{"ln":"LÃ¼dersdorf","sn":"LÃ¼dersdorf"},"38822":{"ln":"RÃ¼ting OT Diedrichshagen","sn":"RÃ¼ting"},"38823":{"ln":"Selmsdorf","sn":"Selmsdorf"},"38824":{"ln":"Mallentin","sn":"Mallentin"},"38825":{"ln":"KlÃ¼tz","sn":"KlÃ¼tz"},"38826":{"ln":"Dassow","sn":"Dassow"},"38827":{"ln":"Kalkhorst","sn":"Kalkhorst"},"38828":{"ln":"SchÃ¶nberg","sn":"SchÃ¶nberg"},"38841":{"ln":"Amt Neuhaus","sn":"Amt"},"38842":{"ln":"Greven OT LÃ¼ttenmark","sn":"Greven"},"38843":{"ln":"Vellahn OT Bennin","sn":"Vellahn"},"38844":{"ln":"Neu GÃ¼lze","sn":"Neu"},"38845":{"ln":"Amt Neuhaus OT KaarÃen","sn":"Amt"},"38847":{"ln":"Boizenburg/Elbe","sn":"Boizenburg"},"38848":{"ln":"Vellahn","sn":"Vellahn"},"38850":{"ln":"Gammelin","sn":"Gammelin"},"38851":{"ln":"Zarrentin am Schaalsee","sn":"Zarrentin"},"38852":{"ln":"Wittenburg","sn":"Wittenburg"},"38853":{"ln":"WittendÃ¶rp OT DrÃ¶nnewitz","sn":"WittendÃ¶rp"},"38854":{"ln":"Redefin","sn":"Redefin"},"38855":{"ln":"LÃ¼btheen","sn":"LÃ¼btheen"},"38856":{"ln":"Pritzier","sn":"Pritzier"},"38858":{"ln":"Zarrentin am Schaalsee OT Lassahn","sn":"Zarrentin"},"38859":{"ln":"Alt Zachun","sn":"Alt"},"38871":{"ln":"MÃ¼hlen Eichsen","sn":"MÃ¼hlen"},"38872":{"ln":"Rehna","sn":"Rehna"},"38873":{"ln":"Carlow","sn":"Carlow"},"38874":{"ln":"LÃ¼tzow","sn":"LÃ¼tzow"},"38875":{"ln":"Schlagsdorf","sn":"Schlagsdorf"},"38876":{"ln":"Roggendorf","sn":"Roggendorf"},"39200":{"ln":"Gommern","sn":"Gommern"},"39201":{"ln":"Wolmirstedt","sn":"Wolmirstedt"},"39202":{"ln":"GroÃ Ammensleben","sn":"GroÃ Ammensleben"},"39203":{"ln":"Barleben","sn":"Barleben"},"39204":{"ln":"Niederndodeleben","sn":"Niederndodeleben"},"39205":{"ln":"Langenweddingen","sn":"Langenweddingen"},"39206":{"ln":"Eichenbarleben","sn":"Eichenbarleben"},"39207":{"ln":"Colbitz","sn":"Colbitz"},"39208":{"ln":"Loitsche","sn":"Loitsche"},"39209":{"ln":"Wanzleben","sn":"Wanzleben"},"39221":{"ln":"MÃ¶ckern","sn":"MÃ¶ckern"},"39222":{"ln":"MÃ¶ser","sn":"MÃ¶ser"},"39223":{"ln":"Theessen","sn":"Theessen"},"39224":{"ln":"BÃ¼den","sn":"BÃ¼den"},"39225":{"ln":"Altengrabow","sn":"Altengrabow"},"39226":{"ln":"Hohenziatz","sn":"Hohenziatz"},"39241":{"ln":"Leitzkau","sn":"Leitzkau"},"39242":{"ln":"PrÃ¶del","sn":"PrÃ¶del"},"39243":{"ln":"Nedlitz (Jerichower Land)","sn":"Nedlitz"},"39244":{"ln":"Steutz","sn":"Steutz"},"39245":{"ln":"Loburg","sn":"Loburg"},"39246":{"ln":"Lindau (Anhalt)","sn":"Lindau"},"39247":{"ln":"GÃ¼terglÃ¼ck","sn":"GÃ¼terglÃ¼ck"},"39248":{"ln":"Dobritz","sn":"Dobritz"},"39262":{"ln":"GÃ¼sten","sn":"GÃ¼sten"},"39263":{"ln":"Unseburg","sn":"Unseburg"},"39264":{"ln":"Kroppenstedt","sn":"Kroppenstedt"},"39265":{"ln":"LÃ¶derburg","sn":"LÃ¶derburg"},"39266":{"ln":"FÃ¶rderstedt","sn":"FÃ¶rderstedt"},"39267":{"ln":"Schneidlingen","sn":"Schneidlingen"},"39268":{"ln":"Egeln","sn":"Egeln"},"39291":{"ln":"Calbe (Saale)","sn":"Calbe"},"39292":{"ln":"Biederitz","sn":"Biederitz"},"39293":{"ln":"Dreileben","sn":"Dreileben"},"39294":{"ln":"GroÃ Rosenburg","sn":"GroÃ Rosenburg"},"39295":{"ln":"Zuchau","sn":"Zuchau"},"39296":{"ln":"Welsleben","sn":"Welsleben"},"39297":{"ln":"Eickendorf","sn":"Eickendorf"},"39298":{"ln":"Barby","sn":"Barby"},"39320":{"ln":"Schinne","sn":"Schinne"},"39321":{"ln":"Arneburg","sn":"Arneburg"},"39322":{"ln":"TangermÃ¼nde","sn":"TangermÃ¼nde"},"39323":{"ln":"SchÃ¶nhausen (Elbe)","sn":"SchÃ¶nhausen"},"39324":{"ln":"KlÃ¤den","sn":"KlÃ¤den"},"39325":{"ln":"Vinzelberg","sn":"Vinzelberg"},"39327":{"ln":"Klietz","sn":"Klietz"},"39328":{"ln":"Rochau","sn":"Rochau"},"39329":{"ln":"MÃ¶ringen","sn":"MÃ¶ringen"},"39341":{"ln":"Redekin","sn":"Redekin"},"39342":{"ln":"Gladau","sn":"Gladau"},"39343":{"ln":"Jerichow","sn":"Jerichow"},"39344":{"ln":"GÃ¼sen","sn":"GÃ¼sen"},"39345":{"ln":"Parchen","sn":"Parchen"},"39346":{"ln":"Tucheim","sn":"Tucheim"},"39347":{"ln":"Kade","sn":"Kade"},"39348":{"ln":"Klitsche","sn":"Klitsche"},"39349":{"ln":"Parey (Elbe)","sn":"Parey"},"39361":{"ln":"LÃ¼deritz (bei Stendal)","sn":"LÃ¼deritz"},"39362":{"ln":"Grieben (Sachsen-Anhalt)","sn":"Grieben"},"39363":{"ln":"Angern","sn":"Angern"},"39364":{"ln":"Dolle","sn":"Dolle"},"39365":{"ln":"Bellingen","sn":"Bellingen"},"39366":{"ln":"Kehnert","sn":"Kehnert"},"39382":{"ln":"Kamern","sn":"Kamern"},"39383":{"ln":"Sandau","sn":"Sandau"},"39384":{"ln":"Arendsee (Altmark)","sn":"Arendsee"},"39386":{"ln":"Seehausen (Altmark)","sn":"Seehausen"},"39387":{"ln":"Havelberg","sn":"Havelberg"},"39388":{"ln":"Goldbeck (Altmark)","sn":"Goldbeck"},"39390":{"ln":"Iden","sn":"Iden"},"39391":{"ln":"LÃ¼ckstedt","sn":"LÃ¼ckstedt"},"39392":{"ln":"RÃ¶nnebeck","sn":"RÃ¶nnebeck"},"39393":{"ln":"Werben (Elbe)","sn":"Werben"},"39394":{"ln":"Hohenberg-Krusemark","sn":"Hohenberg-Krusemark"},"39395":{"ln":"Wanzer","sn":"Wanzer"},"39396":{"ln":"Neukirchen (Altmark)","sn":"Neukirchen"},"39397":{"ln":"Geestgottberg","sn":"Geestgottberg"},"39398":{"ln":"GroÃ Garz","sn":"GroÃ Garz"},"39399":{"ln":"Kleinau","sn":"Kleinau"},"39400":{"ln":"Wefensleben","sn":"Wefensleben"},"39401":{"ln":"Neuwegersleben","sn":"Neuwegersleben"},"39402":{"ln":"VÃ¶lpke","sn":"VÃ¶lpke"},"39403":{"ln":"GrÃ¶ningen","sn":"GrÃ¶ningen"},"39404":{"ln":"Ausleben","sn":"Ausleben"},"39405":{"ln":"HÃ¶tensleben","sn":"HÃ¶tensleben"},"39406":{"ln":"Harbke","sn":"Harbke"},"39407":{"ln":"Seehausen (BÃ¶rde)","sn":"Seehausen"},"39408":{"ln":"Hadmersleben","sn":"Hadmersleben"},"39409":{"ln":"Eilsleben","sn":"Eilsleben"},"39421":{"ln":"Osterwieck","sn":"Osterwieck"},"39422":{"ln":"Badersleben","sn":"Badersleben"},"39423":{"ln":"Wegeleben","sn":"Wegeleben"},"39424":{"ln":"Schwanebeck","sn":"Schwanebeck"},"39425":{"ln":"Dingelstedt","sn":"Dingelstedt"},"39426":{"ln":"Hessen am Fallstein","sn":"Hessen"},"39427":{"ln":"Schachdorf StrÃ¶beck","sn":"Schachdorf"},"39428":{"ln":"Pabstorf","sn":"Pabstorf"},"39451":{"ln":"Wasserleben","sn":"Wasserleben"},"39452":{"ln":"Ilsenburg","sn":"Ilsenburg"},"39453":{"ln":"Derenburg","sn":"Derenburg"},"39454":{"ln":"Elbingerode","sn":"Elbingerode"},"39455":{"ln":"Schierke","sn":"Schierke"},"39456":{"ln":"Altenbrak","sn":"Altenbrak"},"39457":{"ln":"Benneckenstein","sn":"Benneckenstein"},"39458":{"ln":"Heudeber","sn":"Heudeber"},"39459":{"ln":"Hasselfelde","sn":"Hasselfelde"},"39481":{"ln":"Hedersleben","sn":"Hedersleben"},"39482":{"ln":"Gatersleben","sn":"Gatersleben"},"39483":{"ln":"Ballenstedt","sn":"Ballenstedt"},"39484":{"ln":"Harzgerode","sn":"Harzgerode"},"39485":{"ln":"Gernrode","sn":"Gernrode"},"39487":{"ln":"Friedrichsbrunn","sn":"Friedrichsbrunn"},"39488":{"ln":"GÃ¼ntersberge","sn":"GÃ¼ntersberge"},"39489":{"ln":"StraÃberg","sn":"StraÃberg"},"39600":{"ln":"Zwiedorf","sn":"Zwiedorf"},"39601":{"ln":"Friedland, Mecklenburg-Vorpommern","sn":"Friedland"},"39602":{"ln":"Kleeth","sn":"Kleeth"},"39603":{"ln":"Burg Stargard","sn":"Burg Stargard"},"39604":{"ln":"Wildberg","sn":"Wildberg"},"39605":{"ln":"GroÃ Nemerow","sn":"GroÃ Nemerow"},"39606":{"ln":"Glienke","sn":"Glienke"},"39607":{"ln":"Kotelow","sn":"Kotelow"},"39608":{"ln":"Staven","sn":"Staven"},"39721":{"ln":"Liepen","sn":"Liepen"},"39722":{"ln":"Sarnow","sn":"Sarnow"},"39723":{"ln":"Krien","sn":"Krien"},"39724":{"ln":"Klein BÃ¼nzow","sn":"Klein BÃ¼nzow"},"39726":{"ln":"Ducherow","sn":"Ducherow"},"39727":{"ln":"Spantekow","sn":"Spantekow"},"39728":{"ln":"Medow","sn":"Medow"},"39740":{"ln":"Nechlin","sn":"Nechlin"},"39741":{"ln":"Jatznick","sn":"Jatznick"},"39742":{"ln":"BrÃ¼ssow","sn":"BrÃ¼ssow"},"39743":{"ln":"Zerrenthin","sn":"Zerrenthin"},"39744":{"ln":"Rothenklempenow","sn":"Rothenklempenow"},"39745":{"ln":"Hetzdorf (Uckermark)","sn":"Hetzdorf"},"39746":{"ln":"Krackow","sn":"Krackow"},"39747":{"ln":"ZÃ¼sedom","sn":"ZÃ¼sedom"},"39748":{"ln":"Viereck","sn":"Viereck"},"39749":{"ln":"Grambow","sn":"Grambow"},"39751":{"ln":"Penkun","sn":"Penkun"},"39752":{"ln":"Blumenhagen","sn":"Blumenhagen"},"39753":{"ln":"Strasburg","sn":"Strasburg"},"39754":{"ln":"LÃ¶cknitz","sn":"LÃ¶cknitz"},"39771":{"ln":"UeckermÃ¼nde","sn":"UeckermÃ¼nde"},"39772":{"ln":"RothemÃ¼hl","sn":"RothemÃ¼hl"},"39773":{"ln":"Altwarp","sn":"Altwarp"},"39774":{"ln":"MÃ¶nkebude","sn":"MÃ¶nkebude"},"39775":{"ln":"Ahlbeck (Uecker-Randow)","sn":"Ahlbeck"},"39776":{"ln":"Hintersee","sn":"Hintersee"},"39777":{"ln":"Borkenfriede","sn":"Borkenfriede"},"39778":{"ln":"Ferdinandshof","sn":"Ferdinandshof"},"39779":{"ln":"Eggesin","sn":"Eggesin"},"39820":{"ln":"Triepkendorf","sn":"Triepkendorf"},"39821":{"ln":"Carpin","sn":"Carpin"},"39822":{"ln":"Kratzeburg","sn":"Kratzeburg"},"39823":{"ln":"Rechlin","sn":"Rechlin"},"39824":{"ln":"Hohenzieritz","sn":"Hohenzieritz"},"39825":{"ln":"Wokuhl-Dabelow","sn":"Wokuhl-Dabelow"},"39826":{"ln":"Blankensee","sn":"Blankensee"},"39827":{"ln":"Schwarz","sn":"Schwarz"},"39828":{"ln":"Wustrow","sn":"Wustrow"},"39829":{"ln":"BlankenfÃ¶rde","sn":"BlankenfÃ¶rde"},"39831":{"ln":"Feldberg","sn":"Feldberg"},"39832":{"ln":"Wesenberg","sn":"Wesenberg"},"39833":{"ln":"Mirow","sn":"Mirow"},"39851":{"ln":"GÃ¶ritz","sn":"GÃ¶ritz"},"39852":{"ln":"SchÃ¶nermark","sn":"SchÃ¶nermark"},"39853":{"ln":"Holzendorf","sn":"Holzendorf"},"39854":{"ln":"Kleptow","sn":"Kleptow"},"39855":{"ln":"Weggun","sn":"Weggun"},"39856":{"ln":"Beenz","sn":"Beenz"},"39857":{"ln":"Drense","sn":"Drense"},"39858":{"ln":"Bietikow","sn":"Bietikow"},"39859":{"ln":"FÃ¼rstenwerder","sn":"FÃ¼rstenwerder"},"39861":{"ln":"Gramzow","sn":"Gramzow"},"39862":{"ln":"SchmÃ¶lln","sn":"SchmÃ¶lln"},"39863":{"ln":"Seehausen (Uckermark)","sn":"Seehausen"},"39881":{"ln":"Ringenwalde","sn":"Ringenwalde"},"39882":{"ln":"Gollin","sn":"Gollin"},"39883":{"ln":"GroÃ DÃ¶lln","sn":"GroÃ DÃ¶lln"},"39884":{"ln":"HaÃleben","sn":"HaÃleben"},"39885":{"ln":"Jakobshagen","sn":"Jakobshagen"},"39886":{"ln":"Milmersdorf","sn":"Milmersdorf"},"39887":{"ln":"Gerswalde","sn":"Gerswalde"},"39888":{"ln":"Lychen","sn":"Lychen"},"39889":{"ln":"Boitzenburg","sn":"Boitzenburg"},"39921":{"ln":"Ankershagen","sn":"Ankershagen"},"39922":{"ln":"Dambeck","sn":"Dambeck"},"39923":{"ln":"Priborn","sn":"Priborn"},"39924":{"ln":"Stuer","sn":"Stuer"},"39925":{"ln":"Wredenhagen","sn":"Wredenhagen"},"39926":{"ln":"GrabowhÃ¶fe","sn":"GrabowhÃ¶fe"},"39927":{"ln":"Nossentiner HÃ¼tte","sn":"Nossentiner"},"39928":{"ln":"MÃ¶llenhagen","sn":"MÃ¶llenhagen"},"39929":{"ln":"Jabel","sn":"Jabel"},"39931":{"ln":"RÃ¶bel/MÃ¼ritz","sn":"RÃ¶bel"},"39932":{"ln":"Malchow","sn":"Malchow"},"39933":{"ln":"Vollrathsruhe","sn":"Vollrathsruhe"},"39934":{"ln":"Klein Plasten","sn":"Klein Plasten"},"39951":{"ln":"Faulenrost","sn":"Faulenrost"},"39952":{"ln":"Grammentin","sn":"Grammentin"},"39953":{"ln":"Schwinkendorf","sn":"Schwinkendorf"},"39954":{"ln":"Stavenhagen","sn":"Stavenhagen"},"39955":{"ln":"JÃ¼rgenstorf","sn":"JÃ¼rgenstorf"},"39956":{"ln":"Neukalen","sn":"Neukalen"},"39957":{"ln":"Gielow","sn":"Gielow"},"39959":{"ln":"Dargun","sn":"Dargun"},"39971":{"ln":"Gnoien","sn":"Gnoien"},"39972":{"ln":"Walkendorf","sn":"Walkendorf"},"39973":{"ln":"Altkalen","sn":"Altkalen"},"39975":{"ln":"ThÃ¼rkow","sn":"ThÃ¼rkow"},"39976":{"ln":"GroÃ BÃ¼tzin","sn":"GroÃ BÃ¼tzin"},"39977":{"ln":"JÃ¶rdenstorf","sn":"JÃ¶rdenstorf"},"39978":{"ln":"GroÃ Roge","sn":"GroÃ Roge"},"39991":{"ln":"Daberkow","sn":"Daberkow"},"39992":{"ln":"GÃ¶rmin","sn":"GÃ¶rmin"},"39993":{"ln":"Hohenmocker","sn":"Hohenmocker"},"39994":{"ln":"Metschow","sn":"Metschow"},"39995":{"ln":"Nossendorf","sn":"Nossendorf"},"39996":{"ln":"TÃ¶rpin","sn":"TÃ¶rpin"},"39997":{"ln":"Jarmen","sn":"Jarmen"},"39998":{"ln":"Loitz","sn":"Loitz"},"39999":{"ln":"Tutow","sn":"Tutow"}};
ilib.data.area_AU = {"2":{"ln":"Central Eastern Australia  (NSW, ACT)","sn":"Central East"},"3":{"ln":"Southeastern Australia (VIC, TAS)","sn":"Southeast"},"7":{"ln":"Northeastern Australia (QLD)","sn":"Northeast"},"8":{"ln":"Central and Western Australia (SA, NT, WA)","sn":"Central/West"}};
ilib.data.area_GB = {"20":{"ln":"London","sn":"London"},"23":{"ln":"Southampton, Portsmouth","sn":"Southampton"},"24":{"ln":"Coventry","sn":"Coventry"},"28":{"ln":"Northern Ireland","sn":"Northern Ireland"},"29":{"ln":"Cardiff","sn":"Cardiff"},"113":{"ln":"Leeds","sn":"Leeds"},"114":{"ln":"Sheffield","sn":"Sheffield"},"115":{"ln":"Nottingham","sn":"Nottingham"},"116":{"ln":"Leicester","sn":"Leicester"},"117":{"ln":"Bristol","sn":"Bristol"},"118":{"ln":"Reading","sn":"Reading"},"121":{"ln":"Birmingham","sn":"Birmingham"},"131":{"ln":"Edinburgh","sn":"Edinburgh"},"141":{"ln":"Glasgow","sn":"Glasgow"},"151":{"ln":"Liverpool","sn":"Liverpool"},"161":{"ln":"Manchester","sn":"Manchester"},"191":{"ln":"Tyne, Wear, Durham","sn":"Tyne"},"1200":{"ln":"Clitheroe","sn":"Clitheroe"},"1201":{"ln":"Unknown Location","sn":"Unknown Location"},"1202":{"ln":"Bournemouth","sn":"Bournemouth"},"1203":{"ln":"Unknown Location","sn":"Unknown Location"},"1204":{"ln":"Bolton","sn":"Bolton"},"1205":{"ln":"Boston","sn":"Boston"},"1206":{"ln":"Colchester","sn":"Colchester"},"1207":{"ln":"Consett","sn":"Consett"},"1208":{"ln":"Bodmin","sn":"Bodmin"},"1209":{"ln":"Redruth, Cornwall","sn":"Redruth"},"1220":{"ln":"Unknown Location","sn":"Unknown Location"},"1221":{"ln":"Unknown Location","sn":"Unknown Location"},"1222":{"ln":"Unknown Location","sn":"Unknown Location"},"1223":{"ln":"Cambridge","sn":"Cambridge"},"1224":{"ln":"Aberdeen","sn":"Aberdeen"},"1225":{"ln":"Bath","sn":"Bath"},"1226":{"ln":"Barnsley","sn":"Barnsley"},"1227":{"ln":"Canterbury","sn":"Canterbury"},"1228":{"ln":"Carlisle","sn":"Carlisle"},"1229":{"ln":"Barrow-in-Furness","sn":"Barrow-in-Furness"},"1230":{"ln":"Unknown Location","sn":"Unknown Location"},"1231":{"ln":"Unknown Location","sn":"Unknown Location"},"1232":{"ln":"Unknown Location","sn":"Unknown Location"},"1233":{"ln":"Ashford","sn":"Ashford"},"1234":{"ln":"Bedford","sn":"Bedford"},"1235":{"ln":"Abingdon","sn":"Abingdon"},"1236":{"ln":"Coatbridge","sn":"Coatbridge"},"1237":{"ln":"Bideford","sn":"Bideford"},"1238":{"ln":"Unknown Location","sn":"Unknown Location"},"1239":{"ln":"Cardigan","sn":"Cardigan"},"1240":{"ln":"Unknown Location","sn":"Unknown Location"},"1241":{"ln":"Arbroath","sn":"Arbroath"},"1242":{"ln":"Cheltenham","sn":"Cheltenham"},"1243":{"ln":"Chichester, West Sussex","sn":"Chichester"},"1244":{"ln":"Chester","sn":"Chester"},"1245":{"ln":"Chelmsford","sn":"Chelmsford"},"1246":{"ln":"Chesterfield","sn":"Chesterfield"},"1247":{"ln":"Unknown Location","sn":"Unknown Location"},"1248":{"ln":"Bangor, Wales","sn":"Bangor"},"1249":{"ln":"Chippenham","sn":"Chippenham"},"1250":{"ln":"Blairgowrie","sn":"Blairgowrie"},"1251":{"ln":"Unknown Location","sn":"Unknown Location"},"1252":{"ln":"Aldershot","sn":"Aldershot"},"1253":{"ln":"Blackpool","sn":"Blackpool"},"1254":{"ln":"Blackburn","sn":"Blackburn"},"1255":{"ln":"Clacton on Sea","sn":"Clacton on Sea"},"1256":{"ln":"Basingstoke","sn":"Basingstoke"},"1257":{"ln":"Chorley","sn":"Chorley"},"1258":{"ln":"Blandford","sn":"Blandford"},"1259":{"ln":"Alloa","sn":"Alloa"},"1260":{"ln":"Congleton","sn":"Congleton"},"1261":{"ln":"Banff","sn":"Banff"},"1262":{"ln":"Bridlington","sn":"Bridlington"},"1263":{"ln":"Cromer","sn":"Cromer"},"1264":{"ln":"Andover","sn":"Andover"},"1265":{"ln":"Unknown Location","sn":"Unknown Location"},"1266":{"ln":"Unknown Location","sn":"Unknown Location"},"1267":{"ln":"Carmarthen","sn":"Carmarthen"},"1268":{"ln":"Basildon","sn":"Basildon"},"1269":{"ln":"Ammanford","sn":"Ammanford"},"1270":{"ln":"Crewe","sn":"Crewe"},"1271":{"ln":"Barnstaple","sn":"Barnstaple"},"1272":{"ln":"Unknown Location","sn":"Unknown Location"},"1273":{"ln":"Brighton","sn":"Brighton"},"1274":{"ln":"Bradford","sn":"Bradford"},"1275":{"ln":"Clevedon, Bristol","sn":"Clevedon"},"1276":{"ln":"Camberley","sn":"Camberley"},"1277":{"ln":"Brentwood","sn":"Brentwood"},"1278":{"ln":"Bridgwater","sn":"Bridgwater"},"1279":{"ln":"Bishop's Stortford","sn":"Bishop's Stortford"},"1280":{"ln":"Buckingham","sn":"Buckingham"},"1281":{"ln":"Unknown Location","sn":"Unknown Location"},"1282":{"ln":"Burnley","sn":"Burnley"},"1283":{"ln":"Burton upon Trent","sn":"Burton upon Trent"},"1284":{"ln":"Bury St Edmunds","sn":"Bury St Edmunds"},"1285":{"ln":"Cirencester","sn":"Cirencester"},"1286":{"ln":"Caernarfon","sn":"Caernarfon"},"1287":{"ln":"Guisborough","sn":"Guisborough"},"1288":{"ln":"Bude","sn":"Bude"},"1289":{"ln":"Berwick-upon-Tweed","sn":"Berwick-upon-Tweed"},"1290":{"ln":"Cumnock, Ayrshire","sn":"Cumnock"},"1291":{"ln":"Chepstow","sn":"Chepstow"},"1292":{"ln":"Ayr","sn":"Ayr"},"1293":{"ln":"Crawley","sn":"Crawley"},"1294":{"ln":"Ardrossan, Ayrshire","sn":"Ardrossan"},"1295":{"ln":"Banbury","sn":"Banbury"},"1296":{"ln":"Aylesbury","sn":"Aylesbury"},"1297":{"ln":"Axminster","sn":"Axminster"},"1298":{"ln":"Buxton","sn":"Buxton"},"1299":{"ln":"Bewdley","sn":"Bewdley"},"1300":{"ln":"Cerne Abbas, Dorset","sn":"Cerne Abbas"},"1301":{"ln":"Arrochar","sn":"Arrochar"},"1302":{"ln":"Doncaster","sn":"Doncaster"},"1303":{"ln":"Folkestone","sn":"Folkestone"},"1304":{"ln":"Dover","sn":"Dover"},"1305":{"ln":"Dorchester","sn":"Dorchester"},"1306":{"ln":"Dorking","sn":"Dorking"},"1307":{"ln":"Forfar","sn":"Forfar"},"1308":{"ln":"Bridport, Dorset","sn":"Bridport"},"1309":{"ln":"Forres","sn":"Forres"},"1320":{"ln":"Fort Augustus","sn":"Fort Augustus"},"1321":{"ln":"Unknown Location","sn":"Unknown Location"},"1322":{"ln":"Dartford","sn":"Dartford"},"1323":{"ln":"Eastbourne","sn":"Eastbourne"},"1324":{"ln":"Falkirk","sn":"Falkirk"},"1325":{"ln":"Darlington","sn":"Darlington"},"1326":{"ln":"Falmouth","sn":"Falmouth"},"1327":{"ln":"Daventry","sn":"Daventry"},"1328":{"ln":"Fakenham","sn":"Fakenham"},"1329":{"ln":"Fareham","sn":"Fareham"},"1330":{"ln":"Banchory, Deeside","sn":"Banchory"},"1331":{"ln":"Unknown Location","sn":"Unknown Location"},"1332":{"ln":"Derby","sn":"Derby"},"1333":{"ln":"Peat Inn, Fife","sn":"Peat Inn"},"1334":{"ln":"St Andrews, Fife","sn":"St Andrews"},"1335":{"ln":"Ashbourne","sn":"Ashbourne"},"1336":{"ln":"Unknown Location","sn":"Unknown Location"},"1337":{"ln":"Ladybank, Fife","sn":"Ladybank"},"1338":{"ln":"Unknown Location","sn":"Unknown Location"},"1339":{"ln":"Aboyne, Ballater, Deeside","sn":"Aboyne"},"1340":{"ln":"Craigellachie, Elgin","sn":"Craigellachie"},"1341":{"ln":"Barmouth, Dolgellau","sn":"Barmouth"},"1342":{"ln":"East Grinstead","sn":"East Grinstead"},"1343":{"ln":"Elgin","sn":"Elgin"},"1344":{"ln":"Bracknell, Easthampstead","sn":"Bracknell"},"1345":{"ln":"Unknown Location","sn":"Unknown Location"},"1346":{"ln":"Fraserburgh","sn":"Fraserburgh"},"1347":{"ln":"Easingwold","sn":"Easingwold"},"1348":{"ln":"Fishguard","sn":"Fishguard"},"1349":{"ln":"Dingwall","sn":"Dingwall"},"1350":{"ln":"Dunkeld","sn":"Dunkeld"},"1351":{"ln":"Unknown Location","sn":"Unknown Location"},"1352":{"ln":"Mold, Flint","sn":"Mold"},"1353":{"ln":"Ely","sn":"Ely"},"1354":{"ln":"March, Cambridgeshire, Fenland","sn":"March"},"1355":{"ln":"East Kilbride","sn":"East Kilbride"},"1356":{"ln":"Brechin, Edzell","sn":"Brechin"},"1357":{"ln":"Strathaven, East Kilbride","sn":"Strathaven"},"1358":{"ln":"Ellon","sn":"Ellon"},"1359":{"ln":"Pakenham, Elmswell","sn":"Pakenham"},"1360":{"ln":"Killearn, Drymen","sn":"Killearn"},"1361":{"ln":"Duns","sn":"Duns"},"1362":{"ln":"Dereham","sn":"Dereham"},"1363":{"ln":"Crediton","sn":"Crediton"},"1364":{"ln":"Ashburton, Devon","sn":"Ashburton"},"1365":{"ln":"Unknown Location","sn":"Unknown Location"},"1366":{"ln":"Downham Market","sn":"Downham Market"},"1367":{"ln":"Faringdon","sn":"Faringdon"},"1368":{"ln":"Dunbar","sn":"Dunbar"},"1369":{"ln":"Dunoon","sn":"Dunoon"},"1370":{"ln":"Unknown Location","sn":"Unknown Location"},"1371":{"ln":"Great Dunmow, Essex","sn":"Great Dunmow"},"1372":{"ln":"Epsom","sn":"Epsom"},"1373":{"ln":"Frome","sn":"Frome"},"1374":{"ln":"Unknown Location","sn":"Unknown Location"},"1375":{"ln":"Grays Thurrock, Essex","sn":"Grays Thurrock"},"1376":{"ln":"Braintree, Essex","sn":"Braintree"},"1377":{"ln":"Driffield","sn":"Driffield"},"1378":{"ln":"Unknown Location","sn":"Unknown Location"},"1379":{"ln":"Diss","sn":"Diss"},"1380":{"ln":"Devizes","sn":"Devizes"},"1381":{"ln":"Fortrose","sn":"Fortrose"},"1382":{"ln":"Dundee","sn":"Dundee"},"1383":{"ln":"Dunfermline","sn":"Dunfermline"},"1384":{"ln":"Dudley","sn":"Dudley"},"1385":{"ln":"Unknown Location","sn":"Unknown Location"},"1386":{"ln":"Evesham","sn":"Evesham"},"1388":{"ln":"Bishop Auckland, Durham","sn":"Bishop Auckland"},"1389":{"ln":"Dumbarton","sn":"Dumbarton"},"1390":{"ln":"Unknown Location","sn":"Unknown Location"},"1391":{"ln":"Unknown Location","sn":"Unknown Location"},"1392":{"ln":"Exeter","sn":"Exeter"},"1393":{"ln":"Unknown Location","sn":"Unknown Location"},"1394":{"ln":"Felixstowe","sn":"Felixstowe"},"1395":{"ln":"Budleigh Salterton, Exmouth","sn":"Budleigh Salterton"},"1396":{"ln":"Unknown Location","sn":"Unknown Location"},"1397":{"ln":"Fort William","sn":"Fort William"},"1398":{"ln":"Dulverton, Exmoor","sn":"Dulverton"},"1399":{"ln":"Unknown Location","sn":"Unknown Location"},"1400":{"ln":"Honington","sn":"Honington"},"1401":{"ln":"Unknown Location","sn":"Unknown Location"},"1402":{"ln":"Unknown Location","sn":"Unknown Location"},"1403":{"ln":"Horsham","sn":"Horsham"},"1404":{"ln":"Honiton","sn":"Honiton"},"1405":{"ln":"Goole","sn":"Goole"},"1406":{"ln":"Holbeach","sn":"Holbeach"},"1407":{"ln":"Holyhead","sn":"Holyhead"},"1408":{"ln":"Golspie","sn":"Golspie"},"1409":{"ln":"Holsworthy","sn":"Holsworthy"},"1420":{"ln":"Alton","sn":"Alton"},"1421":{"ln":"Unknown Location","sn":"Unknown Location"},"1422":{"ln":"Halifax","sn":"Halifax"},"1423":{"ln":"Boroughbridge, Harrogate","sn":"Boroughbridge"},"1424":{"ln":"Hastings","sn":"Hastings"},"1425":{"ln":"Ringwood, Highcliffe, New Milton, Ashley","sn":"Ringwood"},"1426":{"ln":"Unknown Location","sn":"Unknown Location"},"1427":{"ln":"Gainsborough","sn":"Gainsborough"},"1428":{"ln":"Haslemere","sn":"Haslemere"},"1429":{"ln":"Hartlepool","sn":"Hartlepool"},"1430":{"ln":"Market Weighton, North Cave, Howden","sn":"Market Weighton"},"1431":{"ln":"Helmsdale","sn":"Helmsdale"},"1432":{"ln":"Hereford","sn":"Hereford"},"1433":{"ln":"Hathersage","sn":"Hathersage"},"1434":{"ln":"Bellingham, Haltwhistle, Hexham","sn":"Bellingham"},"1435":{"ln":"Heathfield","sn":"Heathfield"},"1436":{"ln":"Helensburgh","sn":"Helensburgh"},"1437":{"ln":"Clynderwen, Haverfordwest","sn":"Clynderwen"},"1438":{"ln":"Stevenage, Hertfordshire","sn":"Stevenage"},"1439":{"ln":"Helmsley","sn":"Helmsley"},"1440":{"ln":"Haverhill","sn":"Haverhill"},"1441":{"ln":"Unknown Location","sn":"Unknown Location"},"1442":{"ln":"Hemel Hempstead","sn":"Hemel"},"1443":{"ln":"Pontypridd, Glamorgan","sn":"Pontypridd"},"1444":{"ln":"Haywards Heath, Burgess Hill","sn":"Haywards Heath"},"1445":{"ln":"Gairloch","sn":"Gairloch"},"1446":{"ln":"Barry, Glamorgan","sn":"Barry"},"1447":{"ln":"Unknown Location","sn":"Unknown Location"},"1448":{"ln":"Unknown Location","sn":"Unknown Location"},"1449":{"ln":"Stowmarket, Gipping","sn":"Stowmarket"},"1450":{"ln":"Hawick","sn":"Hawick"},"1451":{"ln":"Stow-on-the-Wold, Gloucestershire","sn":"Stow-on-the-Wold"},"1452":{"ln":"Gloucester","sn":"Gloucester"},"1453":{"ln":"Dursley, Gloucestershire","sn":"Dursley"},"1454":{"ln":"Chipping Sodbury, Gloucestershire","sn":"Chipping Sodbury"},"1455":{"ln":"Hinckley","sn":"Hinckley"},"1456":{"ln":"Glenurquhart","sn":"Glenurquhart"},"1457":{"ln":"Glossop","sn":"Glossop"},"1458":{"ln":"Glastonbury","sn":"Glastonbury"},"1459":{"ln":"Unknown Location","sn":"Unknown Location"},"1460":{"ln":"Chard, Ilminster","sn":"Chard"},"1461":{"ln":"Gretna","sn":"Gretna"},"1462":{"ln":"Hitchin","sn":"Hitchin"},"1463":{"ln":"Inverness","sn":"Inverness"},"1464":{"ln":"Insch","sn":"Insch"},"1465":{"ln":"Girvan","sn":"Girvan"},"1466":{"ln":"Huntly","sn":"Huntly"},"1467":{"ln":"Inverurie","sn":"Inverurie"},"1468":{"ln":"Unknown Location","sn":"Unknown Location"},"1469":{"ln":"Killingholme, Immingham","sn":"Killingholme"},"1470":{"ln":"Edinbane, Isle of Skye","sn":"Edinbane"},"1471":{"ln":"Broadford, Isle of Skye","sn":"Broadford"},"1472":{"ln":"Grimsby","sn":"Grimsby"},"1473":{"ln":"Ipswich","sn":"Ipswich"},"1474":{"ln":"Gravesend","sn":"Gravesend"},"1475":{"ln":"Greenock","sn":"Greenock"},"1476":{"ln":"Grantham","sn":"Grantham"},"1477":{"ln":"Holmes Chapel","sn":"Holmes Chapel"},"1478":{"ln":"Portree, Isle of Skye","sn":"Portree"},"1479":{"ln":"Grantown-on-Spey","sn":"Grantown-on-Spey"},"1480":{"ln":"Huntingdon","sn":"Huntingdon"},"1481":{"ln":"Guernsey","sn":"Guernsey"},"1482":{"ln":"Hull","sn":"Hull"},"1483":{"ln":"Guildford","sn":"Guildford"},"1484":{"ln":"Huddersfield","sn":"Huddersfield"},"1485":{"ln":"Hunstanton","sn":"Hunstanton"},"1487":{"ln":"Warboys, Huntingdon","sn":"Warboys"},"1488":{"ln":"Hungerford","sn":"Hungerford"},"1489":{"ln":"Bishop's Waltham, Hamble Valley","sn":"Bishop's Waltham"},"1490":{"ln":"Corwen, Gwynedd","sn":"Corwen"},"1491":{"ln":"Henley-on-Thames","sn":"Henley-on-Thames"},"1492":{"ln":"Colwyn Bay, Gwynedd","sn":"Colwyn Bay"},"1493":{"ln":"Great Yarmouth","sn":"Great Yarmouth"},"1494":{"ln":"High Wycombe","sn":"High Wycombe"},"1495":{"ln":"Pontypool, Gwent","sn":"Pontypool"},"1496":{"ln":"Port Ellen, Islay","sn":"Port Ellen"},"1497":{"ln":"Hay-on-Wye","sn":"Hay-on-Wye"},"1498":{"ln":"Unknown Location","sn":"Unknown Location"},"1499":{"ln":"Inveraray","sn":"Inveraray"},"1500":{"ln":"Unknown Location","sn":"Unknown Location"},"1501":{"ln":"Harthill, Lothian","sn":"Harthill"},"1502":{"ln":"Lowestoft","sn":"Lowestoft"},"1503":{"ln":"Looe","sn":"Looe"},"1504":{"ln":"Unknown Location","sn":"Unknown Location"},"1505":{"ln":"Johnstone","sn":"Johnstone"},"1506":{"ln":"Bathgate, Lothian","sn":"Bathgate"},"1507":{"ln":"Alford, Louth and Spilsby","sn":"Alford"},"1508":{"ln":"Brooke","sn":"Brooke"},"1509":{"ln":"Loughborough","sn":"Loughborough"},"1520":{"ln":"Lochcarron","sn":"Lochcarron"},"1521":{"ln":"Unknown Location","sn":"Unknown Location"},"1522":{"ln":"Lincoln","sn":"Lincoln"},"1523":{"ln":"Unknown Location","sn":"Unknown Location"},"1525":{"ln":"Leighton Buzzard","sn":"Leighton Buzzard"},"1526":{"ln":"Martin, Lincolnshire","sn":"Martin"},"1527":{"ln":"Redditch","sn":"Redditch"},"1528":{"ln":"Laggan, Badenoch","sn":"Laggan"},"1529":{"ln":"Sleaford, Lincolnshire","sn":"Sleaford"},"1530":{"ln":"Coalville, Ashby-de-la-Zouch Leicestershire","sn":"Coalville"},"1531":{"ln":"Ledbury","sn":"Ledbury"},"1532":{"ln":"Unknown Location","sn":"Unknown Location"},"1533":{"ln":"Unknown Location","sn":"Unknown Location"},"1534":{"ln":"Jersey","sn":"Jersey"},"1535":{"ln":"Keighley","sn":"Keighley"},"1536":{"ln":"Kettering","sn":"Kettering"},"1537":{"ln":"Unknown Location","sn":"Unknown Location"},"1538":{"ln":"Ipstones, Leek","sn":"Ipstones"},"1540":{"ln":"Kingussie","sn":"Kingussie"},"1541":{"ln":"Unknown Location","sn":"Unknown Location"},"1542":{"ln":"Keith","sn":"Keith"},"1543":{"ln":"Cannock, Lichfield","sn":"Cannock"},"1544":{"ln":"Kington","sn":"Kington"},"1545":{"ln":"Llanarth, Ceredigion","sn":"Llanarth"},"1546":{"ln":"Lochgilphead","sn":"Lochgilphead"},"1547":{"ln":"Knighton","sn":"Knighton"},"1548":{"ln":"Kingsbridge","sn":"Kingsbridge"},"1549":{"ln":"Lairg","sn":"Lairg"},"1550":{"ln":"Llandovery","sn":"Llandovery"},"1551":{"ln":"Unknown Location","sn":"Unknown Location"},"1552":{"ln":"Unknown Location","sn":"Unknown Location"},"1553":{"ln":"King's Lynn","sn":"King's Lynn"},"1554":{"ln":"Llanelli","sn":"Llanelli"},"1555":{"ln":"Lanark","sn":"Lanark"},"1556":{"ln":"Castle Douglas, Kirkcudbrightshire","sn":"Castle Douglas"},"1557":{"ln":"Kirkcudbright","sn":"Kirkcudbright"},"1558":{"ln":"Llandeilo","sn":"Llandeilo"},"1559":{"ln":"Llandysul","sn":"Llandysul"},"1560":{"ln":"Moscow, Kilmarnock","sn":"Moscow"},"1561":{"ln":"Laurencekirk","sn":"Laurencekirk"},"1562":{"ln":"Kidderminster","sn":"Kidderminster"},"1563":{"ln":"Kilmarnock","sn":"Kilmarnock"},"1564":{"ln":"Lapworth, Knowle","sn":"Lapworth"},"1565":{"ln":"Knutsford","sn":"Knutsford"},"1566":{"ln":"Launceston","sn":"Launceston"},"1567":{"ln":"Killin","sn":"Killin"},"1568":{"ln":"Leominster","sn":"Leominster"},"1569":{"ln":"Stonehaven, Laurencekirk","sn":"Stonehaven"},"1570":{"ln":"Lampeter","sn":"Lampeter"},"1571":{"ln":"Lochinver","sn":"Lochinver"},"1572":{"ln":"Oakham","sn":"Oakham"},"1573":{"ln":"Kelso","sn":"Kelso"},"1574":{"ln":"Unknown Location","sn":"Unknown Location"},"1575":{"ln":"Kirriemuir","sn":"Kirriemuir"},"1576":{"ln":"Lockerbie","sn":"Lockerbie"},"1577":{"ln":"Kinross","sn":"Kinross"},"1578":{"ln":"Lauder","sn":"Lauder"},"1579":{"ln":"Liskeard","sn":"Liskeard"},"1580":{"ln":"Cranbrook, Kent","sn":"Cranbrook"},"1581":{"ln":"New Luce, Luce","sn":"New Luce"},"1582":{"ln":"Luton","sn":"Luton"},"1583":{"ln":"Carradale, Kintyre","sn":"Carradale"},"1584":{"ln":"Ludlow","sn":"Ludlow"},"1585":{"ln":"was Kesgrave","sn":"was Kesgrave"},"1586":{"ln":"Campbeltown, Kintyre","sn":"Campbeltown"},"1587":{"ln":"Unknown Location","sn":"Unknown Location"},"1588":{"ln":"Bishop's Castle, Ludlow","sn":"Bishop's Castle"},"1589":{"ln":"Unknown Location","sn":"Unknown Location"},"1590":{"ln":"Lymington","sn":"Lymington"},"1591":{"ln":"Llanwrtyd Wells","sn":"Llanwrtyd Wells"},"1592":{"ln":"Kirkcaldy","sn":"Kirkcaldy"},"1593":{"ln":"Lybster","sn":"Lybster"},"1594":{"ln":"Lydney","sn":"Lydney"},"1595":{"ln":"Lerwick, Foula and Fair Isle","sn":"Lerwick"},"1596":{"ln":"Unknown Location","sn":"Unknown Location"},"1597":{"ln":"Llandrindod Wells","sn":"Llandrindod Wells"},"1598":{"ln":"Lynton","sn":"Lynton"},"1599":{"ln":"Kyle","sn":"Kyle"},"1600":{"ln":"Monmouth","sn":"Monmouth"},"1601":{"ln":"Unknown Location","sn":"Unknown Location"},"1602":{"ln":"Unknown Location","sn":"Unknown Location"},"1603":{"ln":"Norwich","sn":"Norwich"},"1604":{"ln":"Northampton","sn":"Northampton"},"1605":{"ln":"Unknown Location","sn":"Unknown Location"},"1606":{"ln":"Northwich","sn":"Northwich"},"1607":{"ln":"Unknown Location","sn":"Unknown Location"},"1608":{"ln":"Chipping Norton","sn":"Chipping Norton"},"1609":{"ln":"Northallerton","sn":"Northallerton"},"1620":{"ln":"North Berwick","sn":"North Berwick"},"1621":{"ln":"Maldon","sn":"Maldon"},"1622":{"ln":"Maidstone","sn":"Maidstone"},"1623":{"ln":"Mansfield","sn":"Mansfield"},"1624":{"ln":"Isle of Man","sn":"Isle of Man"},"1625":{"ln":"Macclesfield","sn":"Macclesfield"},"1626":{"ln":"Newton Abbot","sn":"Newton Abbot"},"1627":{"ln":"Unknown Location","sn":"Unknown Location"},"1628":{"ln":"Maidenhead","sn":"Maidenhead"},"1629":{"ln":"Matlock","sn":"Matlock"},"1630":{"ln":"Market Drayton","sn":"Market Drayton"},"1631":{"ln":"Oban","sn":"Oban"},"1632":{"ln":"Unknown Location","sn":"Unknown Location"},"1633":{"ln":"Newport","sn":"Newport"},"1634":{"ln":"Medway","sn":"Medway"},"1635":{"ln":"Newbury","sn":"Newbury"},"1636":{"ln":"Newark-on-Trent","sn":"Newark-on-Trent"},"1637":{"ln":"Newquay","sn":"Newquay"},"1638":{"ln":"Newmarket","sn":"Newmarket"},"1639":{"ln":"Neath","sn":"Neath"},"1640":{"ln":"Unknown Location","sn":"Unknown Location"},"1641":{"ln":"Strathy, Melvich","sn":"Strathy"},"1642":{"ln":"Middlesbrough","sn":"Middlesbrough"},"1643":{"ln":"Minehead","sn":"Minehead"},"1644":{"ln":"New Galloway","sn":"New Galloway"},"1645":{"ln":"Unknown Location","sn":"Unknown Location"},"1646":{"ln":"Milford Haven","sn":"Milford Haven"},"1647":{"ln":"Moretonhampstead","sn":"Moretonhampstead"},"1648":{"ln":"Unknown Location","sn":"Unknown Location"},"1649":{"ln":"Unknown Location","sn":"Unknown Location"},"1650":{"ln":"Cemmaes Road, Machynlleth","sn":"Cemmaes Road"},"1651":{"ln":"Oldmeldrum","sn":"Oldmeldrum"},"1652":{"ln":"Brigg, North Kelsey","sn":"Brigg"},"1653":{"ln":"Malton","sn":"Malton"},"1654":{"ln":"Machynlleth","sn":"Machynlleth"},"1655":{"ln":"Maybole","sn":"Maybole"},"1656":{"ln":"Bridgend","sn":"Bridgend"},"1657":{"ln":"Unknown Location","sn":"Unknown Location"},"1658":{"ln":"Unknown Location","sn":"Unknown Location"},"1659":{"ln":"Sanquhar, Nithsdale","sn":"Sanquhar"},"1660":{"ln":"Unknown Location","sn":"Unknown Location"},"1661":{"ln":"Prudhoe, Northumberland","sn":"Prudhoe"},"1662":{"ln":"Unknown Location","sn":"Unknown Location"},"1663":{"ln":"New Mills","sn":"New Mills"},"1664":{"ln":"Melton Mowbray","sn":"Melton Mowbray"},"1665":{"ln":"Alnwick, Northumberland","sn":"Alnwick"},"1666":{"ln":"Malmesbury","sn":"Malmesbury"},"1667":{"ln":"Nairn","sn":"Nairn"},"1668":{"ln":"Bamburgh, Northumberland","sn":"Bamburgh"},"1669":{"ln":"Rothbury, Northumberland","sn":"Rothbury"},"1670":{"ln":"Morpeth","sn":"Morpeth"},"1671":{"ln":"Newton Stewart","sn":"Newton Stewart"},"1672":{"ln":"Marlborough","sn":"Marlborough"},"1673":{"ln":"Market Rasen","sn":"Market Rasen"},"1674":{"ln":"Montrose","sn":"Montrose"},"1675":{"ln":"Coleshill, Warwickshire, Meriden","sn":"Coleshill"},"1676":{"ln":"Meriden","sn":"Meriden"},"1677":{"ln":"Bedale, North Riding","sn":"Bedale"},"1678":{"ln":"Bala, Meirionydd","sn":"Bala"},"1679":{"ln":"Unknown Location","sn":"Unknown Location"},"1680":{"ln":"Craignure, Isle of Mull","sn":"Craignure"},"1681":{"ln":"Fionnphort, Isle of Mull","sn":"Fionnphort"},"1682":{"ln":"Unknown Location","sn":"Unknown Location"},"1683":{"ln":"Moffat","sn":"Moffat"},"1684":{"ln":"Malvern","sn":"Malvern"},"1685":{"ln":"Merthyr Tydfil","sn":"Merthyr Tydfil"},"1686":{"ln":"Llanidloes and Newtown","sn":"Llanidloes and Newtown"},"1687":{"ln":"Mallaig","sn":"Mallaig"},"1688":{"ln":"Tobermory, Isle of Mull","sn":"Tobermory"},"1689":{"ln":"Orpington","sn":"Orpington"},"1690":{"ln":"Betws-y-Coed","sn":"Betws-y-Coed"},"1691":{"ln":"Oswestry","sn":"Oswestry"},"1692":{"ln":"North Walsham","sn":"North Walsham"},"1693":{"ln":"Unknown Location","sn":"Unknown Location"},"1694":{"ln":"Church Stretton","sn":"Church Stretton"},"1695":{"ln":"Skelmersdale/Ormskirk","sn":"Skelmersdale/Ormskirk"},"1696":{"ln":"Unknown Location","sn":"Unknown Location"},"1698":{"ln":"Motherwell","sn":"Motherwell"},"1699":{"ln":"Unknown Location","sn":"Unknown Location"},"1700":{"ln":"Rothesay","sn":"Rothesay"},"1701":{"ln":"Unknown Location","sn":"Unknown Location"},"1702":{"ln":"Southend-on-Sea","sn":"Southend-on-Sea"},"1703":{"ln":"Unknown Location","sn":"Unknown Location"},"1704":{"ln":"Southport","sn":"Southport"},"1705":{"ln":"Unknown Location","sn":"Unknown Location"},"1706":{"ln":"Rochdale, Rossendale","sn":"Rochdale"},"1707":{"ln":"Welwyn Hatfield and Potters Bar","sn":"Welwyn Hatfield and Potters Bar"},"1708":{"ln":"Romford","sn":"Romford"},"1709":{"ln":"Rotherham","sn":"Rotherham"},"1710":{"ln":"Unknown Location","sn":"Unknown Location"},"1711":{"ln":"Unknown Location","sn":"Unknown Location"},"1712":{"ln":"Unknown Location","sn":"Unknown Location"},"1713":{"ln":"Unknown Location","sn":"Unknown Location"},"1714":{"ln":"Unknown Location","sn":"Unknown Location"},"1715":{"ln":"Unknown Location","sn":"Unknown Location"},"1716":{"ln":"Unknown Location","sn":"Unknown Location"},"1717":{"ln":"Unknown Location","sn":"Unknown Location"},"1718":{"ln":"Unknown Location","sn":"Unknown Location"},"1719":{"ln":"Unknown Location","sn":"Unknown Location"},"1720":{"ln":"Isles of Scilly","sn":"Isles of Scilly"},"1721":{"ln":"Peebles","sn":"Peebles"},"1722":{"ln":"Salisbury","sn":"Salisbury"},"1723":{"ln":"Scarborough","sn":"Scarborough"},"1724":{"ln":"Scunthorpe","sn":"Scunthorpe"},"1725":{"ln":"Rockbourne","sn":"Rockbourne"},"1726":{"ln":"St Austell","sn":"St Austell"},"1727":{"ln":"St Albans","sn":"St Albans"},"1728":{"ln":"Saxmundham","sn":"Saxmundham"},"1729":{"ln":"Settle, Ribblesdale","sn":"Settle"},"1730":{"ln":"Petersfield","sn":"Petersfield"},"1731":{"ln":"Unknown Location","sn":"Unknown Location"},"1732":{"ln":"Sevenoaks","sn":"Sevenoaks"},"1733":{"ln":"Peterborough","sn":"Peterborough"},"1734":{"ln":"Unknown Location","sn":"Unknown Location"},"1735":{"ln":"Unknown Location","sn":"Unknown Location"},"1736":{"ln":"Penzance","sn":"Penzance"},"1737":{"ln":"Redhill","sn":"Redhill"},"1738":{"ln":"Perth","sn":"Perth"},"1739":{"ln":"Unknown Location","sn":"Unknown Location"},"1740":{"ln":"Sedgefield","sn":"Sedgefield"},"1741":{"ln":"Unknown Location","sn":"Unknown Location"},"1742":{"ln":"Unknown Location","sn":"Unknown Location"},"1743":{"ln":"Shrewsbury","sn":"Shrewsbury"},"1744":{"ln":"St Helens","sn":"St Helens"},"1745":{"ln":"Rhyl","sn":"Rhyl"},"1746":{"ln":"Bridgnorth, Shropshire","sn":"Bridgnorth"},"1747":{"ln":"Shaftesbury","sn":"Shaftesbury"},"1748":{"ln":"Richmond","sn":"Richmond"},"1749":{"ln":"Shepton Mallet","sn":"Shepton Mallet"},"1750":{"ln":"Selkirk","sn":"Selkirk"},"1751":{"ln":"Pickering","sn":"Pickering"},"1752":{"ln":"Plymouth","sn":"Plymouth"},"1753":{"ln":"Slough","sn":"Slough"},"1754":{"ln":"Skegness","sn":"Skegness"},"1755":{"ln":"Unknown Location","sn":"Unknown Location"},"1756":{"ln":"Skipton","sn":"Skipton"},"1757":{"ln":"Selby","sn":"Selby"},"1758":{"ln":"Pwllheli","sn":"Pwllheli"},"1759":{"ln":"Pocklington","sn":"Pocklington"},"1760":{"ln":"Swaffham","sn":"Swaffham"},"1761":{"ln":"Temple Cloud, Somerset","sn":"Temple Cloud"},"1762":{"ln":"Unknown Location","sn":"Unknown Location"},"1763":{"ln":"Royston","sn":"Royston"},"1764":{"ln":"Crieff, Ruthven","sn":"Crieff"},"1765":{"ln":"Ripon","sn":"Ripon"},"1766":{"ln":"Porthmadog","sn":"Porthmadog"},"1767":{"ln":"Sandy","sn":"Sandy"},"1769":{"ln":"South Molton","sn":"South Molton"},"1770":{"ln":"Isle of Arran","sn":"Isle of Arran"},"1771":{"ln":"Maud","sn":"Maud"},"1772":{"ln":"Preston","sn":"Preston"},"1773":{"ln":"Ripley","sn":"Ripley"},"1774":{"ln":"Unknown Location","sn":"Unknown Location"},"1775":{"ln":"Spalding","sn":"Spalding"},"1776":{"ln":"Stranraer","sn":"Stranraer"},"1777":{"ln":"Retford","sn":"Retford"},"1778":{"ln":"Market Deeping/Bourne (Spalding-dependent)","sn":"Market Deeping/Bourne (Spalding-dependent)"},"1779":{"ln":"Peterhead","sn":"Peterhead"},"1780":{"ln":"Stamford","sn":"Stamford"},"1781":{"ln":"Unknown Location","sn":"Unknown Location"},"1782":{"ln":"Stoke on Trent","sn":"Stoke on Trent"},"1783":{"ln":"Unknown Location","sn":"Unknown Location"},"1784":{"ln":"Staines","sn":"Staines"},"1785":{"ln":"Stafford","sn":"Stafford"},"1786":{"ln":"Stirling","sn":"Stirling"},"1787":{"ln":"Sudbury","sn":"Sudbury"},"1788":{"ln":"Rugby","sn":"Rugby"},"1789":{"ln":"Stratford-upon-Avon","sn":"Stratford-upon-Avon"},"1790":{"ln":"Spilsby","sn":"Spilsby"},"1791":{"ln":"Unknown Location","sn":"Unknown Location"},"1792":{"ln":"Swansea","sn":"Swansea"},"1793":{"ln":"Swindon","sn":"Swindon"},"1794":{"ln":"Romsey","sn":"Romsey"},"1795":{"ln":"Sittingbourne, Sheppey","sn":"Sittingbourne"},"1796":{"ln":"Pitlochry","sn":"Pitlochry"},"1797":{"ln":"Rye","sn":"Rye"},"1798":{"ln":"Pulborough, Sussex","sn":"Pulborough"},"1799":{"ln":"Saffron Walden","sn":"Saffron Walden"},"1800":{"ln":"Unknown Location","sn":"Unknown Location"},"1801":{"ln":"Unknown Location","sn":"Unknown Location"},"1802":{"ln":"Unknown Location","sn":"Unknown Location"},"1803":{"ln":"Torquay","sn":"Torquay"},"1804":{"ln":"Unknown Location","sn":"Unknown Location"},"1805":{"ln":"Torrington","sn":"Torrington"},"1806":{"ln":"Voe, Shetland","sn":"Voe"},"1807":{"ln":"Ballindalloch, Tomintoul","sn":"Ballindalloch"},"1808":{"ln":"Tomatin","sn":"Tomatin"},"1809":{"ln":"Tomdoun","sn":"Tomdoun"},"1810":{"ln":"Unknown Location","sn":"Unknown Location"},"1811":{"ln":"Unknown Location","sn":"Unknown Location"},"1812":{"ln":"Unknown Location","sn":"Unknown Location"},"1813":{"ln":"Unknown Location","sn":"Unknown Location"},"1814":{"ln":"Unknown Location","sn":"Unknown Location"},"1815":{"ln":"Unknown Location","sn":"Unknown Location"},"1816":{"ln":"Unknown Location","sn":"Unknown Location"},"1817":{"ln":"Unknown Location","sn":"Unknown Location"},"1818":{"ln":"Unknown Location","sn":"Unknown Location"},"1819":{"ln":"Unknown Location","sn":"Unknown Location"},"1820":{"ln":"Unknown Location","sn":"Unknown Location"},"1821":{"ln":"Kinrossie, Tayside","sn":"Kinrossie"},"1822":{"ln":"Tavistock","sn":"Tavistock"},"1823":{"ln":"Taunton","sn":"Taunton"},"1824":{"ln":"Ruthin, Vale of Clwyd","sn":"Ruthin"},"1825":{"ln":"Uckfield","sn":"Uckfield"},"1827":{"ln":"Tamworth","sn":"Tamworth"},"1828":{"ln":"Coupar Angus, Tayside","sn":"Coupar Angus"},"1829":{"ln":"Tarporley","sn":"Tarporley"},"1830":{"ln":"Kirkwhelpington","sn":"Kirkwhelpington"},"1831":{"ln":"Unknown Location","sn":"Unknown Location"},"1832":{"ln":"Clopton, Oundle","sn":"Clopton"},"1833":{"ln":"Teesdale","sn":"Teesdale"},"1834":{"ln":"Narberth, Tenby","sn":"Narberth"},"1835":{"ln":"St. Boswells","sn":"St. Boswells"},"1836":{"ln":"Unknown Location","sn":"Unknown Location"},"1837":{"ln":"Okehampton","sn":"Okehampton"},"1838":{"ln":"Dalmally, Tyndrum","sn":"Dalmally"},"1839":{"ln":"Unknown Location","sn":"Unknown Location"},"1840":{"ln":"Camelford, Tintagel","sn":"Camelford"},"1841":{"ln":"Newquay","sn":"Newquay"},"1842":{"ln":"Thetford","sn":"Thetford"},"1843":{"ln":"Thanet","sn":"Thanet"},"1844":{"ln":"Thame","sn":"Thame"},"1845":{"ln":"Thirsk","sn":"Thirsk"},"1846":{"ln":"Unknown Location","sn":"Unknown Location"},"1847":{"ln":"Thurso and Tongue","sn":"Thurso and Tongue"},"1848":{"ln":"Thornhill","sn":"Thornhill"},"1849":{"ln":"Unknown Location","sn":"Unknown Location"},"1850":{"ln":"Unknown Location","sn":"Unknown Location"},"1851":{"ln":"Great Bernera and Stornoway","sn":"Great Bernera and Stornoway"},"1852":{"ln":"Kilmelford","sn":"Kilmelford"},"1853":{"ln":"Unknown Location","sn":"Unknown Location"},"1854":{"ln":"Ullapool","sn":"Ullapool"},"1855":{"ln":"Ballachulish","sn":"Ballachulish"},"1856":{"ln":"Orkney","sn":"Orkney"},"1857":{"ln":"Sanday","sn":"Sanday"},"1858":{"ln":"Market Harborough","sn":"Market Harborough"},"1859":{"ln":"Harris","sn":"Harris"},"1860":{"ln":"Unknown Location","sn":"Unknown Location"},"1861":{"ln":"Unknown Location","sn":"Unknown Location"},"1862":{"ln":"Tain","sn":"Tain"},"1863":{"ln":"Ardgay, Tain","sn":"Ardgay"},"1864":{"ln":"Tinto, Abington","sn":"Tinto"},"1865":{"ln":"Oxford","sn":"Oxford"},"1866":{"ln":"Kilchrenan","sn":"Kilchrenan"},"1867":{"ln":"Unknown Location","sn":"Unknown Location"},"1868":{"ln":"Unknown Location","sn":"Unknown Location"},"1869":{"ln":"Bicester, Oxfordshire","sn":"Bicester"},"1870":{"ln":"Isle of Benbecula","sn":"Isle of Benbecula"},"1871":{"ln":"Castlebay","sn":"Castlebay"},"1872":{"ln":"Truro","sn":"Truro"},"1873":{"ln":"Abergavenny, Usk","sn":"Abergavenny"},"1874":{"ln":"Brecon, Usk","sn":"Brecon"},"1875":{"ln":"Tranent","sn":"Tranent"},"1876":{"ln":"Lochmaddy","sn":"Lochmaddy"},"1877":{"ln":"Callander, Trossachs","sn":"Callander"},"1878":{"ln":"Lochboisdale","sn":"Lochboisdale"},"1879":{"ln":"Scarinish, Tiree","sn":"Scarinish"},"1880":{"ln":"Tarbert","sn":"Tarbert"},"1881":{"ln":"Unknown Location","sn":"Unknown Location"},"1882":{"ln":"Kinloch Rannoch, Tummel Bridge","sn":"Kinloch Rannoch"},"1883":{"ln":"Caterham","sn":"Caterham"},"1884":{"ln":"Tiverton","sn":"Tiverton"},"1885":{"ln":"Pencombe","sn":"Pencombe"},"1886":{"ln":"Bromyard, Teme Valley","sn":"Bromyard"},"1887":{"ln":"Aberfeldy, Tay Valley","sn":"Aberfeldy"},"1888":{"ln":"Turriff","sn":"Turriff"},"1889":{"ln":"Uttoxeter","sn":"Uttoxeter"},"1890":{"ln":"Ayton, Berwickshire and Coldstream, Tweed","sn":"Ayton"},"1891":{"ln":"Unknown Location","sn":"Unknown Location"},"1892":{"ln":"Tunbridge Wells","sn":"Tunbridge Wells"},"1893":{"ln":"Unknown Location","sn":"Unknown Location"},"1894":{"ln":"Unknown Location","sn":"Unknown Location"},"1895":{"ln":"Uxbridge","sn":"Uxbridge"},"1896":{"ln":"Galashiels, Tweed","sn":"Galashiels"},"1897":{"ln":"Unknown Location","sn":"Unknown Location"},"1898":{"ln":"Unknown Location","sn":"Unknown Location"},"1899":{"ln":"Biggar, Tweed","sn":"Biggar"},"1900":{"ln":"Workington","sn":"Workington"},"1901":{"ln":"Unknown Location","sn":"Unknown Location"},"1902":{"ln":"Wolverhampton","sn":"Wolverhampton"},"1903":{"ln":"Worthing","sn":"Worthing"},"1904":{"ln":"York","sn":"York"},"1905":{"ln":"Worcester","sn":"Worcester"},"1906":{"ln":"Unknown Location","sn":"Unknown Location"},"1907":{"ln":"Unknown Location","sn":"Unknown Location"},"1908":{"ln":"Milton Keynes, Wolverton","sn":"Milton Keynes"},"1909":{"ln":"Worksop","sn":"Worksop"},"1920":{"ln":"Ware","sn":"Ware"},"1921":{"ln":"Unknown Location","sn":"Unknown Location"},"1922":{"ln":"Walsall","sn":"Walsall"},"1923":{"ln":"Watford","sn":"Watford"},"1924":{"ln":"Wakefield","sn":"Wakefield"},"1925":{"ln":"Warrington","sn":"Warrington"},"1926":{"ln":"Warwick","sn":"Warwick"},"1927":{"ln":"Unknown Location","sn":"Unknown Location"},"1928":{"ln":"Runcorn, Warrington","sn":"Runcorn"},"1929":{"ln":"Wareham","sn":"Wareham"},"1930":{"ln":"Unknown Location","sn":"Unknown Location"},"1931":{"ln":"Shap, Westmorland","sn":"Shap"},"1932":{"ln":"Weybridge","sn":"Weybridge"},"1933":{"ln":"Wellingborough","sn":"Wellingborough"},"1934":{"ln":"Weston-super-Mare","sn":"Weston-super-Mare"},"1935":{"ln":"Yeovil","sn":"Yeovil"},"1936":{"ln":"Unknown Location","sn":"Unknown Location"},"1937":{"ln":"Wetherby","sn":"Wetherby"},"1938":{"ln":"Welshpool","sn":"Welshpool"},"1939":{"ln":"Wem","sn":"Wem"},"1940":{"ln":"Unknown Location","sn":"Unknown Location"},"1941":{"ln":"Unknown Location","sn":"Unknown Location"},"1942":{"ln":"Wigan","sn":"Wigan"},"1943":{"ln":"Guiseley, Wharfedale","sn":"Guiseley"},"1944":{"ln":"West Heslerton","sn":"West Heslerton"},"1945":{"ln":"Wisbech","sn":"Wisbech"},"1947":{"ln":"Whitby","sn":"Whitby"},"1948":{"ln":"Whitchurch","sn":"Whitchurch"},"1949":{"ln":"Whatton","sn":"Whatton"},"1950":{"ln":"Sandwick, Yell","sn":"Sandwick"},"1951":{"ln":"Colonsay","sn":"Colonsay"},"1952":{"ln":"Telford, Wellington","sn":"Telford"},"1953":{"ln":"Wymondham","sn":"Wymondham"},"1954":{"ln":"Madingley, Willingham","sn":"Madingley"},"1955":{"ln":"Wick","sn":"Wick"},"1956":{"ln":"Unknown Location","sn":"Unknown Location"},"1957":{"ln":"Mid Yell, Yell","sn":"Mid Yell"},"1958":{"ln":"Unknown Location","sn":"Unknown Location"},"1959":{"ln":"Westerham, West Kent","sn":"Westerham"},"1960":{"ln":"Unknown Location","sn":"Unknown Location"},"1961":{"ln":"Unknown Location","sn":"Unknown Location"},"1962":{"ln":"Winchester","sn":"Winchester"},"1963":{"ln":"Wincanton","sn":"Wincanton"},"1964":{"ln":"Hornsea and Patrington, Withernsea","sn":"Hornsea and Patrington"},"1965":{"ln":"Unknown Location","sn":"Unknown Location"},"1966":{"ln":"Unknown Location","sn":"Unknown Location"},"1967":{"ln":"Strontian","sn":"Strontian"},"1968":{"ln":"Penicuik, West Linton","sn":"Penicuik"},"1969":{"ln":"Leyburn, Wensleydale","sn":"Leyburn"},"1970":{"ln":"Aberystwyth, Ystwyth","sn":"Aberystwyth"},"1971":{"ln":"Scourie, Wrath","sn":"Scourie"},"1972":{"ln":"Glenborrodale","sn":"Glenborrodale"},"1973":{"ln":"Unknown Location","sn":"Unknown Location"},"1974":{"ln":"Llanon, Ystwyth","sn":"Llanon"},"1975":{"ln":"Alford, Aberdeenshire and Strathdon, Water","sn":"Alford"},"1976":{"ln":"Unknown Location","sn":"Unknown Location"},"1977":{"ln":"Pontefract, West Riding","sn":"Pontefract"},"1978":{"ln":"Wrexham","sn":"Wrexham"},"1979":{"ln":"Unknown Location","sn":"Unknown Location"},"1980":{"ln":"Amesbury, Wiltshire","sn":"Amesbury"},"1981":{"ln":"Wormbridge","sn":"Wormbridge"},"1982":{"ln":"Builth Wells","sn":"Builth Wells"},"1983":{"ln":"Isle of Wight","sn":"Isle of Wight"},"1984":{"ln":"Watchet","sn":"Watchet"},"1985":{"ln":"Warminster","sn":"Warminster"},"1986":{"ln":"Bungay, Waveney","sn":"Bungay"},"1987":{"ln":"Ebbsfleet","sn":"Ebbsfleet"},"1988":{"ln":"Wigtown","sn":"Wigtown"},"1989":{"ln":"Ross on Wye, Wye","sn":"Ross on Wye"},"1990":{"ln":"Unknown Location","sn":"Unknown Location"},"1991":{"ln":"Unknown Location","sn":"Unknown Location"},"1992":{"ln":"Lea Valley, Waltham X","sn":"Lea Valley"},"1993":{"ln":"Witney","sn":"Witney"},"1994":{"ln":"St Clears, West Wales","sn":"St Clears"},"1995":{"ln":"Garstang, Wyre","sn":"Garstang"},"1996":{"ln":"Unknown Location","sn":"Unknown Location"},"1997":{"ln":"Strathpeffer, Wyvis","sn":"Strathpeffer"},"1998":{"ln":"Unknown Location","sn":"Unknown Location"},"1999":{"ln":"Unknown Location","sn":"Unknown Location"},"13870":{"ln":"Dumfries","sn":"Dumfries"},"13871":{"ln":"Dumfries","sn":"Dumfries"},"13872":{"ln":"Dumfries","sn":"Dumfries"},"13873":{"ln":"Langholm","sn":"Langholm"},"13874":{"ln":"Dumfries","sn":"Dumfries"},"13875":{"ln":"Dumfries","sn":"Dumfries"},"13876":{"ln":"Dumfries","sn":"Dumfries"},"13877":{"ln":"Dumfries","sn":"Dumfries"},"13878":{"ln":"Dumfries","sn":"Dumfries"},"13879":{"ln":"Dumfries","sn":"Dumfries"},"15240":{"ln":"Lancaster","sn":"Lancaster"},"15241":{"ln":"Lancaster","sn":"Lancaster"},"15242":{"ln":"Hornby-with-Farleton","sn":"Hornby-with-Farleton"},"15243":{"ln":"Lancaster","sn":"Lancaster"},"15244":{"ln":"Lancaster","sn":"Lancaster"},"15245":{"ln":"Lancaster","sn":"Lancaster"},"15246":{"ln":"Lancaster","sn":"Lancaster"},"15247":{"ln":"Lancaster","sn":"Lancaster"},"15248":{"ln":"Lancaster","sn":"Lancaster"},"15249":{"ln":"Lancaster","sn":"Lancaster"},"15390":{"ln":"Kendal","sn":"Kendal"},"15391":{"ln":"Kendal","sn":"Kendal"},"15392":{"ln":"Kendal","sn":"Kendal"},"15393":{"ln":"Kendal","sn":"Kendal"},"15394":{"ln":"Hawkshead","sn":"Hawkshead"},"15395":{"ln":"Grange-over-Sands","sn":"Grange-over-Sands"},"15396":{"ln":"Sedbergh","sn":"Sedbergh"},"15397":{"ln":"Kendal","sn":"Kendal"},"15398":{"ln":"Kendal","sn":"Kendal"},"15399":{"ln":"Kendal","sn":"Kendal"},"16970":{"ln":"Brampton","sn":"Brampton"},"16971":{"ln":"Brampton","sn":"Brampton"},"16972":{"ln":"Brampton","sn":"Brampton"},"16973":{"ln":"Wigton","sn":"Wigton"},"16974":{"ln":"Raughton Head","sn":"Raughton Head"},"16975":{"ln":"Brampton","sn":"Brampton"},"16976":{"ln":"Brampton","sn":"Brampton"},"16977":{"ln":"Hallbankgate/Brampton","sn":"Hallbankgate/Brampton"},"16978":{"ln":"Brampton","sn":"Brampton"},"16979":{"ln":"Brampton","sn":"Brampton"},"17680":{"ln":"Penrith","sn":"Penrith"},"17683":{"ln":"Appleby","sn":"Appleby"},"17684":{"ln":"Pooley Bridge","sn":"Pooley Bridge"},"17687":{"ln":"Keswick","sn":"Keswick"},"19461":{"ln":"Whitehaven","sn":"Whitehaven"},"19462":{"ln":"Whitehaven","sn":"Whitehaven"},"19463":{"ln":"Whitehaven","sn":"Whitehaven"},"19464":{"ln":"Whitehaven","sn":"Whitehaven"},"19465":{"ln":"Whitehaven","sn":"Whitehaven"},"19466":{"ln":"Whitehaven","sn":"Whitehaven"},"19467":{"ln":"Gosforth","sn":"Gosforth"},"19468":{"ln":"Whitehaven","sn":"Whitehaven"},"19469":{"ln":"Whitehaven","sn":"Whitehaven"}};
ilib.data.area_IE = {"1":{"ln":"Dublin","sn":"Dublin"},"21":{"ln":"Cork, Coachford, and Kinsale","sn":"Cork"},"22":{"ln":"Mallow","sn":"Mallow"},"23":{"ln":"Bandon","sn":"Bandon"},"24":{"ln":"Youghal","sn":"Youghal"},"25":{"ln":"Fermoy","sn":"Fermoy"},"26":{"ln":"Macroom","sn":"Macroom"},"27":{"ln":"Bantry","sn":"Bantry"},"28":{"ln":"Skibbereen","sn":"Skibbereen"},"29":{"ln":"Kanturk","sn":"Kanturk"},"41":{"ln":"Drogheda, Ardee","sn":"Drogheda"},"42":{"ln":"Dundalk, Carrickmacross, Castleblaney","sn":"Dundalk"},"43":{"ln":"Longford, Granard","sn":"Longford"},"44":{"ln":"Mullingar, Castlepollard, Tyrrellspass","sn":"Mullingar"},"45":{"ln":"Naas, Kildare, The Curragh","sn":"Naas"},"46":{"ln":"Navan, Kells, Trim, Enfield, Edenderry","sn":"Navan"},"47":{"ln":"Monaghan, Clones","sn":"Monaghan"},"48":{"ln":"Northern Ireland","sn":"Northern Ireland"},"49":{"ln":"Cavan, Cootehill, Oldcastle, Belturbet","sn":"Cavan"},"51":{"ln":"Waterford, Carrick-on-Suir, New Ross, Kilmacthomas","sn":"Waterford"},"52":{"ln":"Clonmel, Cahir, Killenaule","sn":"Clonmel"},"53":{"ln":"Wexford, Enniscorthy, Ferns, Gorey","sn":"Wexford"},"56":{"ln":"Kilkenny, Castlecomer, Freshford","sn":"Kilkenny"},"57":{"ln":"Portlaoise, Abbeyleix, Tullamore, Birr","sn":"Portlaoise"},"58":{"ln":"Dungarvan","sn":"Dungarvan"},"59":{"ln":"Carlow, Muine Bheag, Athy, Baltinglass","sn":"Carlow"},"61":{"ln":"Limerick, Scariff","sn":"Limerick"},"62":{"ln":"Tipperary, Cashel","sn":"Tipperary"},"63":{"ln":"Charleville","sn":"Charleville"},"64":{"ln":"Killarney, Rathmore","sn":"Killarney"},"65":{"ln":"Ennis, Ennistymon, Kilrush","sn":"Ennis"},"66":{"ln":"Tralee, Dingle, Killorglin, Cahirciveen","sn":"Tralee"},"67":{"ln":"Nenagh","sn":"Nenagh"},"68":{"ln":"Listowel","sn":"Listowel"},"69":{"ln":"Newcastle West","sn":"Newcastle West"},"71":{"ln":"Sligo, Manorhamilton, Carrick-on-Shannon","sn":"Sligo"},"74":{"ln":"Donegal, Letterkenny, Dungloe, Buncrana","sn":"Donegal"},"90":{"ln":"Athlone, Roscommon, Ballinasloe, Portumna","sn":"Athlone"},"91":{"ln":"Galway, Loughrea, Gort","sn":"Galway"},"93":{"ln":"Tuam","sn":"Tuam"},"94":{"ln":"Ballinrobe, Castlebar, Claremorris, Castlerea","sn":"Ballinrobe"},"95":{"ln":"Clifden","sn":"Clifden"},"96":{"ln":"Ballina","sn":"Ballina"},"97":{"ln":"Belmullet","sn":"Belmullet"},"98":{"ln":"Westport","sn":"Westport"},"99":{"ln":"Kilronan","sn":"Kilronan"},"402":{"ln":"Arklow","sn":"Arklow"},"404":{"ln":"Wicklow","sn":"Wicklow"},"502":{"ln":"Portlaoise, Abbeyleix","sn":"Portlaoise"},"504":{"ln":"Thurles","sn":"Thurles"},"505":{"ln":"Roscrea","sn":"Roscrea"},"506":{"ln":"Tullamore","sn":"Tullamore"},"509":{"ln":"Bin","sn":"Bin"}};
ilib.data.area_NZ = {"3":{"ln":"South Island, Chatham Islands","sn":"South Island"},"4":{"ln":"Wellington Region to Kapiti","sn":"Wellington"},"6":{"ln":"Southern and Eastern North Island, Taranaki, Manawatu-Wanganui (excluding Taumarunui), Hawke's Bay, Gisborne, the Wairarapa, and Otaki","sn":"North Island"},"7":{"ln":"Waikato, The Bay of Plenty, and Taumarunui","sn":"Waikato"},"9.":{"ln":"Auckland and Northland","sn":"Auckland"}};
ilib.data.area_US = {"201":{"ln":"New Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford, and northeast New Jersey","sn":"New Jersey"},"202":{"ln":"Washington D.C.","sn":"Washington"},"203":{"ln":"Connecticut: Bridgeport, Danbury, New Haven, Waterbury, Southwestern Connecticut","sn":"Connecticut"},"204":{"ln":"Manitoba, Canada","sn":"Manitoba"},"205":{"ln":"Alabama: Birmingham; Tuscaloosa; western and central Alabama","sn":"Alabama"},"206":{"ln":"Washington: Seattle","sn":"Washington"},"207":{"ln":"Maine","sn":"Maine"},"208":{"ln":"Idaho","sn":"Idaho"},"209":{"ln":"California: Stockton, Modesto, Merced, Tracy, San Andreas and central California","sn":"California"},"210":{"ln":"Texas: San Antonio area","sn":"Texas"},"212":{"ln":"New York: Manhattan except for Marble Hill","sn":"New York"},"213":{"ln":"Southern California: Central Los Angeles","sn":"S California"},"214":{"ln":"Texas: Dallas area","sn":"Texas"},"215":{"ln":"Pennsylvania: Philadelphia","sn":"Pennsylvania"},"216":{"ln":"Ohio: Cleveland","sn":"Ohio"},"217":{"ln":"Central Illinois: Springfield, Champaign Decatur, Urbana, Lincoln","sn":"Illinois"},"218":{"ln":"Northern Minnesota: Duluth, Thief River Falls, Brainerd, International Falls","sn":"N Minnesota"},"219":{"ln":"Northwest Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso","sn":"NW Indiana"},"224":{"ln":"Illinois","sn":"Illinois"},"225":{"ln":"Central Eastern Louisiana: Baton Rouge, Donaldsonville, New Roads, White Castle","sn":"E Louisiana"},"226":{"ln":"Ontario, Canada","sn":"Ontario"},"227":{"ln":"Maryland","sn":"Maryland"},"228":{"ln":"Southern Mississippi: Gulfport, Biloxi, Pascagoula, Bay St Louis","sn":"S Mississippi"},"229":{"ln":"Southwestern Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald","sn":"SW Georgia"},"231":{"ln":"Northwestern Michigan: Muskegon, Traverse City, Ludington, Petoskey","sn":"NW Michigan"},"234":{"ln":"Ohio","sn":"Ohio"},"236":{"ln":"British Columbia, Canada","sn":"British Columbia"},"239":{"ln":"Southwestern Florida: Lee, Collier, and Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades","sn":"SW Florida"},"240":{"ln":"Maryland","sn":"Maryland"},"242":{"ln":"The Bahamas","sn":"Bahamas"},"246":{"ln":"Barbados","sn":"Barbados"},"248":{"ln":"Michigan: Oakland County","sn":"Michigan"},"249":{"ln":"Ontario, Canada","sn":"Ontario"},"250":{"ln":"British Columbia: Victoria, Prince George, Prince Rupert, Kelowna; also Hyder, Alaska.","sn":"British Columbia"},"251":{"ln":"Southwestern Alabama: Mobile, Jackson, Brewton","sn":"SW Alabama"},"252":{"ln":"Northeastern North Carolina: Greenville, Kitty Hawk, Rocky Mount","sn":"NE North Carolina"},"253":{"ln":"Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway and south Seattle suburbs","sn":"Washington"},"254":{"ln":"Texas: Waco, Killeen, Temple, Belton, and Stephenville","sn":"Texas"},"256":{"ln":"Northern and Eastern Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston","sn":"NE Alabama"},"260":{"ln":"Northeastern Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash","sn":"NE Indiana"},"262":{"ln":"Southeastern Wisconsin: Racine, Kenosha, Menomonee Falls, Waukesha","sn":"SE Wisconsin"},"264":{"ln":"Anguilla","sn":"Anguilla"},"267":{"ln":"Pennsylvania","sn":"Pennsylvania"},"268":{"ln":"Antigua and Barbuda","sn":"Antigua/Barbuda"},"269":{"ln":"Southwestern Michigan: Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph","sn":"SW Michigan"},"270":{"ln":"Western Kentucky: Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown","sn":"W Kentucky"},"274":{"ln":"Wisconsin","sn":"Wisconsin"},"276":{"ln":"Southwestern Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield","sn":"SW Virginia"},"281":{"ln":"Texas: Houston","sn":"Texas"},"283":{"ln":"Southwestern Ohio","sn":"SW Ohio"},"284":{"ln":"The British Virgin Islands","sn":"BVIs"},"289":{"ln":"Ontario, Canada","sn":"Ontario"},"301":{"ln":"Western Maryland: Silver Spring, DC suburbs, Hagerstown, Frederick, Rockville, Cumberland","sn":"W Maryland"},"302":{"ln":"Delaware","sn":"Delaware"},"303":{"ln":"Central Colorado: Denver, Boulder, Longmont, Aurora","sn":"Colorado"},"304":{"ln":"West Virginia","sn":"West Virginia"},"305":{"ln":"Southern Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West","sn":"S Florida"},"306":{"ln":"Saskatchewan, Canada","sn":"Saskatchewan"},"307":{"ln":"Wyoming","sn":"Wyoming"},"308":{"ln":"Western Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island","sn":"W Nebraska"},"309":{"ln":"Central Western Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg","sn":"W Illinois"},"310":{"ln":"Southern California: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, the Los Angeles Westside","sn":"S California"},"312":{"ln":"Illinois: Chicago","sn":"Illinois"},"313":{"ln":"Michigan: Dearborn, Detroit, Hamtramck, Highland Park","sn":"Michigan"},"314":{"ln":"Missouri: St. Louis, Florissant, Crestwood, Affton","sn":"Missouri"},"315":{"ln":"North Central New York: Syracuse, New York, Utica, Watertown","sn":"New York"},"316":{"ln":"Kansas: Wichita, Augusta, El Dorado, Mulvane","sn":"Kansas"},"317":{"ln":"Central Indiana: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove","sn":"Indiana"},"318":{"ln":"Northern Louisiana: Shreveport, Monroe, Alexandria, Fisher, Tallulah","sn":"N Louisiana"},"319":{"ln":"Eastern Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City","sn":"E Iowa"},"320":{"ln":"Central Minnesota: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton","sn":"Minnesota"},"321":{"ln":"Central Eastern Florida: Orlando, Cocoa Beach, St Cloud","sn":"E Florida"},"323":{"ln":"Southern California: Los Angeles, West LA, San Fernando Valley, Florence, Montebello","sn":"S California"},"325":{"ln":"Texas: Abilene, San Angelo, Sweetwater, Snyder","sn":"Texas"},"327":{"ln":"Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff","sn":"E Arkansas"},"330":{"ln":"Northeastern Ohio: Akron, Canton, Youngstown, Warren","sn":"NE Ohio"},"331":{"ln":"Illinois: Aurora, Naperville, western Chicago","sn":"Illinois"},"334":{"ln":"Southeastern Alabama: Montgomery, Auburn, Opelika, Dothan, Selma","sn":"SE Alabama"},"336":{"ln":"North Carolina: Greensboro, Winston-Salem, Wilkesboro, Roxboro, and northwest North Carolina","sn":"North Carolina"},"337":{"ln":"Southwestern Louisiana: Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder","sn":"SW Louisiana"},"339":{"ln":"Massachusetts","sn":"Massachusetts"},"340":{"ln":"The U.S. Virgin Islands","sn":"U.S. Virgins"},"341":{"ln":"California: East Bay Area, Oakland, Berkeley, Alameda","sn":"California"},"343":{"ln":"Eastern Ontario, Canada: Ottawa","sn":"E Ontario"},"345":{"ln":"The Cayman Islands","sn":"Caymans"},"347":{"ln":"New York: The \"Outer Boroughs\"","sn":"New York"},"351":{"ln":"Massachusetts","sn":"Massachusetts"},"352":{"ln":"Central Florida: Gainesville, Ocala, Inverness, Dunnellon","sn":"Florida"},"360":{"ln":"Western Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen","sn":"W Washington"},"361":{"ln":"Western and Southern Texas: Corpus Christi, Victoria, George","sn":"SW Texas"},"364":{"ln":"Kentucky: west of the Pennyrile Parkway, including Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray, and Paducah","sn":"Kentucky"},"369":{"ln":"Northwest California","sn":"NW California"},"380":{"ln":"Ohio","sn":"Ohio"},"385":{"ln":"Utah","sn":"Utah"},"386":{"ln":"Northern and Eastern Florida: Daytona Beach, Lake City, Live Oak, Crescent City","sn":"NE Florida"},"401":{"ln":"Rhode Island","sn":"Rhode Island"},"402":{"ln":"Eastern Nebraska: Omaha, Lincoln, Norfolk, Superior","sn":"E Nebraska"},"403":{"ln":"Southern Alberta, Canada: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks","sn":"S Alberta"},"404":{"ln":"Georgia: Atlanta","sn":"Georgia"},"405":{"ln":"Central Oklahoma: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha","sn":"Oklahoma"},"406":{"ln":"Montana","sn":"Montana"},"407":{"ln":"Central Eastern Florida: Orlando, Florida, St. Cloud","sn":"E Florida"},"408":{"ln":"Central California: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy","sn":"California"},"409":{"ln":"Southeastern Texas: Beaumont, Galveston, Port Arthur, Jasper","sn":"SE Texas"},"410":{"ln":"Eastern Maryland: Baltimore, Annapolis, Salisbury","sn":"E Maryland"},"412":{"ln":"Western Pennsylvania: Pittsburgh area, McKeesport, Braddock, Duquesne","sn":"W Pennsylvania"},"413":{"ln":"Western Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield","sn":"W Massachusetts"},"414":{"ln":"Wisconsin: Milwaukee","sn":"Wisconsin"},"415":{"ln":"Central California: San Francisco, Marin County","sn":"California"},"416":{"ln":"Ontario: Toronto","sn":"Ontario"},"417":{"ln":"Southwestern Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon","sn":"SW Missouri"},"418":{"ln":"Quebec, Canada: Quebec City, Saguenay, GaspÃ© Peninsula, CÃ´te-Nord, Chibougamau, St-Georges","sn":"Quebec"},"419":{"ln":"Northwestern Ohio: Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green","sn":"NW Ohio"},"423":{"ln":"Eastern Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland","sn":"E Tennessee"},"424":{"ln":"California","sn":"California"},"425":{"ln":"Washington: Seattle suburbs, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood and Mountlake Terrace","sn":"Washington"},"430":{"ln":"Texas","sn":"Texas"},"432":{"ln":"West Texas: Midland, Odessa, Big Spring, Alpine","sn":"W Texas"},"434":{"ln":"Southern Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill","sn":"S Virginia"},"435":{"ln":"Utah: Cedar City, Logan, Moab, Park City, St. George, Moab","sn":"Utah"},"438":{"ln":"Quebec, Canada","sn":"Quebec"},"440":{"ln":"Northern Ohio: Cleveland suburbs, Elyria, Lorain, Oberlin, Ashtabula","sn":"N Ohio"},"441":{"ln":"Bermuda","sn":"Bermuda"},"442":{"ln":"California","sn":"California"},"443":{"ln":"Maryland","sn":"Maryland"},"447":{"ln":"Illinois","sn":"Illinois"},"450":{"ln":"Central Southern Quebec, Canada: Laval, Montreal suburbs","sn":"S Quebec"},"456":{"ln":"Inbound international calls for carrier-specific services","sn":"Inbound Intl."},"458":{"ln":"Oregon: Eugene, Medford, Bend, Pendleton, Corvallis, Ontario, Burns","sn":"Oregon"},"464":{"ln":"Illinois","sn":"Illinois"},"469":{"ln":"Texas","sn":"Texas"},"470":{"ln":"Georgia","sn":"Georgia"},"473":{"ln":"Grenada","sn":"Grenada"},"475":{"ln":"Connecticut","sn":"Connecticut"},"478":{"ln":"Central Georgia: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry","sn":"Georgia"},"479":{"ln":"Northwestern Arkansas: Fort Smith, Fayetteville","sn":"NW Arkansas"},"480":{"ln":"Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, eastern Phoenix suburbs","sn":"Arizona"},"484":{"ln":"Pennsylvania","sn":"Pennsylvania"},"500":{"ln":"Personal Communications Services","sn":"Personal Comm."},"501":{"ln":"Central Arkansas: Little Rock, Hot Springs","sn":"Arkansas"},"502":{"ln":"Northern Kentucky: Louisville, Frankfort, Shelbyville, Bardstown","sn":"N Kentucky"},"503":{"ln":"Northwestern Oregon: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria","sn":"NW Oregon"},"504":{"ln":"Louisiana: New Orleans, Metairie, Kenner","sn":"Louisiana"},"505":{"ln":"Northwestern New Mexico: Albuquerque, Santa Fe, Farmington, Gallup","sn":"NW New Mexico"},"506":{"ln":"New Brunswick, Canada","sn":"New Brunswick"},"507":{"ln":"Southern Minnesota: Rochester, Mankato, Worthington, Marshall","sn":"S Minnesota"},"508":{"ln":"Southeastern Massachusetts: Worcester, New Bedford","sn":"SE Massachusetts"},"509":{"ln":"Eastern Washington: Spokane, the Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg","sn":"E Washington"},"510":{"ln":"Central California: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond","sn":"California"},"512":{"ln":"Central Texas: Austin, San Marcos, Lampasas, Bastrop, Milam","sn":"Texas"},"513":{"ln":"Southwestern Ohio: Cincinnati, Middletown, Hamilton, Norwood, Lebanon","sn":"SW Ohio"},"514":{"ln":"Quebec, Canada: Montreal, Ãle Perrot,  Ãle Bizard","sn":"Quebec"},"515":{"ln":"North Central Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola","sn":"Iowa"},"516":{"ln":"New York: Nassau County, Hempstead, Elmont","sn":"New York"},"517":{"ln":"South Central Michigan: Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison","sn":"Michigan"},"518":{"ln":"Northeastern New York: Albany, Schenectady, Plattsburgh, Saranac Lake","sn":"NE New York"},"519":{"ln":"Southwestern Ontario, Canada: London, Windsor, Kitchener-Waterloo, Cambridge","sn":"SW Ontario"},"520":{"ln":"Southeastern Arizona: Tucson, Nogales","sn":"SE Arizona"},"522":{"ln":"Personal Communications Services","sn":"Personal Comm."},"530":{"ln":"Northerneastern California: Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee","sn":"NE California"},"531":{"ln":"Nebraska","sn":"Nebraska"},"533":{"ln":"Personal Communications Services","sn":"Personal Comm."},"534":{"ln":"Wisconsin","sn":"Wisconsin"},"539":{"ln":"Oklahoma","sn":"Oklahoma"},"540":{"ln":"North Central Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester","sn":"Virginia"},"541":{"ln":"Oregon: Eugene, Medford, Bend, Pendleton, Corvallis, Ontario, Burns","sn":"Oregon"},"544":{"ln":"Personal Communications Services","sn":"Personal Comm."},"551":{"ln":"New Jersey","sn":"New Jersey"},"555":{"ln":"Directory Assistance Applications","sn":"Dir. Assistance"},"557":{"ln":"Missouri","sn":"Missouri"},"559":{"ln":"Central California: Fresno, Visalia, Madera, Hanford, Tulare","sn":"California"},"561":{"ln":"Florida: Palm Beach, West Palm Beach, Boca Raton, Boynton Beach, Delray Beach, Belle Glade","sn":"Florida"},"562":{"ln":"Southern California: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower","sn":"S California"},"563":{"ln":"Eastern Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton","sn":"E Iowa"},"564":{"ln":"Washington: Western Washington","sn":"Washington"},"566":{"ln":"Personal Communications Services","sn":"Personal Comm."},"567":{"ln":"Ohio","sn":"Ohio"},"570":{"ln":"Northeastern Pennsylvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg","sn":"NE Pennsylvania"},"571":{"ln":"Virginia","sn":"Virginia"},"573":{"ln":"Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark and eastern Missouri excluding St. Louis","sn":"Missouri"},"574":{"ln":"North Central Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee","sn":"Indiana"},"575":{"ln":"New Mexico: Las Cruces, Roswell, Carlsbad, Taos","sn":"New Mexico"},"577":{"ln":"Personal Communications Services","sn":"Personal Comm. Services"},"579":{"ln":"Quebec, Canada","sn":"Quebec"},"580":{"ln":"Southern and Western Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City","sn":"SW Oklahoma"},"581":{"ln":"Quebec, Canada","sn":"Quebec"},"585":{"ln":"Western New York: Rochester, Wellsville, Batavia","sn":"W New York"},"586":{"ln":"Michigan: Warren, Sterling Heights, Macomb County","sn":"Michigan"},"587":{"ln":"Alberta, Canada","sn":"Alberta"},"588":{"ln":"Personal Communications Services","sn":"Personal Comm."},"600":{"ln":"Special Telecommunications Needs in Canada","sn":"Special Telecom."},"601":{"ln":"Central Mississippi: Jackson, Meridian, Natchez, McComb, Hattiesburg","sn":"Mississippi"},"602":{"ln":"Arizona: Phoenix","sn":"Arizona"},"603":{"ln":"New Hampshire","sn":"New Hampshire"},"604":{"ln":"British Columbia: Vancouver, Abbotsford, Whistler, Chilliwack","sn":"British Columbia"},"605":{"ln":"South Dakota","sn":"South Dakota"},"606":{"ln":"Eastern Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville","sn":"E Kentucky"},"607":{"ln":"New York: Binghamton, Elmira, Bath, Norwich, Oneonta, Ithaca","sn":"New York"},"608":{"ln":"Southwestern Wisconsin: Madison, La Crosse, Platteville, Beloit","sn":"SW Wisconsin"},"609":{"ln":"Central and Southeastern New Jersey: Atlantic City, Trenton","sn":"SE New Jersey"},"610":{"ln":"Southeastern Pennsylvania: Allentown, Reading, Norristown, Chester","sn":"SE Pennsylvania"},"612":{"ln":"Minnesota: Minneapolis, Fort Snelling, St Anthony, Richfield","sn":"Minnesota"},"613":{"ln":"Eastern Ontario, Canada: Ottawa, Kingston","sn":"E Ontario"},"614":{"ln":"Ohio: Columbus","sn":"Ohio"},"615":{"ln":"North Central Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson","sn":"Tennessee"},"616":{"ln":"Southwestern Michigan: Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia","sn":"SW Michigan"},"617":{"ln":"Eastern Massachusetts: Boston, Cambridge","sn":"E Massachusetts"},"618":{"ln":"Southern Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon","sn":"S Illinois"},"619":{"ln":"Southern California: San Diego, Chula Vista","sn":"S California"},"620":{"ln":"Southern Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal","sn":"S Kansas"},"623":{"ln":"Arizona: Glendale, Sun City, Buckeye, Peoria, western Phoenix suburbs","sn":"Arizona"},"626":{"ln":"Southern California: Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, eastern Los Angeles suburbs","sn":"S California"},"627":{"ln":"Northern California coast","sn":"N California"},"628":{"ln":"Central California: San Francisco","sn":"California"},"630":{"ln":"Illinois: Aurora, Naperville, western Chicago suburbs","sn":"Illinois"},"631":{"ln":"New York: Suffolk County","sn":"New York"},"636":{"ln":"East Central Missouri: St. Charles, Chesterfield, Union, De Soto, Troy","sn":"Missouri"},"641":{"ln":"Central Iowa: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield","sn":"Iowa"},"646":{"ln":"New York: Manhattan","sn":"New York"},"647":{"ln":"Ontario, Canada","sn":"Ontario"},"649":{"ln":"The Turks and Caicos Islands","sn":"Turks/Caicos"},"650":{"ln":"Central California: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, southern San Francisco suburbs","sn":"California"},"651":{"ln":"East Central Minnesota: St Paul, Lindstrom, Red Wing, Hastings","sn":"Minnesota"},"657":{"ln":"California","sn":"California"},"659":{"ln":"Alabama","sn":"Alabama"},"660":{"ln":"North Central Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany","sn":"Missouri"},"661":{"ln":"South Central California: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave","sn":"S California"},"662":{"ln":"Northern Mississippi: Greenville, Tupelo, Winona, Columbus, Holly Springs","sn":"N Mississippi"},"664":{"ln":"Montserrat","sn":"Montserrat"},"667":{"ln":"Maryland","sn":"Maryland"},"669":{"ln":"Central California: San Jose","sn":"California"},"670":{"ln":"Northern Mariana Islands","sn":"Marianas"},"671":{"ln":"Guam","sn":"Guam"},"678":{"ln":"Georgia","sn":"Georgia"},"679":{"ln":"Michigan","sn":"Michigan"},"681":{"ln":"West Virginia","sn":"West Virginia"},"682":{"ln":"Texas","sn":"Texas"},"684":{"ln":"American Samoa","sn":"Amer. Samoa"},"689":{"ln":"Florida","sn":"Florida"},"700":{"ln":"Long Distance Carrier Use","sn":"LD Carrier"},"701":{"ln":"North Dakota","sn":"North Dakota"},"702":{"ln":"Nevada: Clark County, Las Vegas, Henderson, Boulder City","sn":"Nevada"},"703":{"ln":"Northern Virginia: Alexandria, Arlington, Fairfax, Prince William, eastern Loudoun counties","sn":"N Virginia"},"704":{"ln":"South Central North Carolina: Charlotte, Gastonia, Concord, Salisbury","sn":"North Carolina"},"705":{"ln":"Central Ontario, Canada: Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie","sn":"Ontario"},"706":{"ln":"West Central Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston","sn":"Georgia"},"707":{"ln":"Northwestern California: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah","sn":"NW California"},"708":{"ln":"Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, western Chicago suburbs","sn":"Illinois"},"709":{"ln":"Newfoundland and Labrador, Canada: St. John's","sn":"Newfoundland"},"710":{"ln":"U.S. Government Special Services","sn":"U.S. Government"},"712":{"ln":"Western Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville","sn":"W Iowa"},"713":{"ln":"Texas: Houston","sn":"Texas"},"714":{"ln":"Southern California: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County","sn":"S California"},"715":{"ln":"Northern Wisconsin: Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland","sn":"N Wisconsin"},"716":{"ln":"Western New York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean","sn":"W New York"},"717":{"ln":"South Central Pennsylvania: Harrisburg, Gettysburg, Lancaster, York","sn":"Pennsylvania"},"718":{"ln":"New York: New York City, Marble Hill","sn":"New York"},"719":{"ln":"Southeastern Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta","sn":"SE Colorado"},"720":{"ln":"Colorado","sn":"Colorado"},"721":{"ln":"Sint Maarten","sn":"Sint Maarten"},"724":{"ln":"Southwestern Pennsylvania: New Castle, Washington, Indiana, Uniontown","sn":"SW Pennsylvania"},"727":{"ln":"Central Florida: St Petersburg, Dunedin","sn":"Florida"},"730":{"ln":"Illinois","sn":"Illinois"},"731":{"ln":"Western Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar","sn":"W Tennessee"},"732":{"ln":"East Central New Jersey: New Brunswick, Neptune, Freehold, Lakewood","sn":"New Jersey"},"734":{"ln":"Southwestern Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, Detroit suburbs","sn":"SW Michigan"},"737":{"ln":"Texas","sn":"Texas"},"740":{"ln":"Central and Southeastern Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens","sn":"SE Ohio"},"747":{"ln":"Southern California: San Fernando Valley","sn":"S California"},"754":{"ln":"Florida","sn":"Florida"},"757":{"ln":"Virginia: Hampton Roads, Eastern Shore","sn":"Virginia"},"758":{"ln":"Saint Lucia","sn":"St. Lucia"},"760":{"ln":"Southeastern California: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County","sn":"SE California"},"762":{"ln":"Georgia","sn":"Georgia"},"763":{"ln":"Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, northwest Minneapolis","sn":"Minnesota"},"764":{"ln":"Central California: Oakland, Berkeley, Alameda","sn":"California"},"765":{"ln":"Central Indiana: Lafayette, Marion, Muncie, Richmond","sn":"Indiana"},"767":{"ln":"Commonwealth of Dominica","sn":"Dominica"},"769":{"ln":"Mississippi","sn":"Mississippi"},"770":{"ln":"Central North Georgia: Marietta, Cedartown, Gainesville, Atlanta suburbs","sn":"N Georgia"},"772":{"ln":"Central Eastern Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart","sn":"E Florida"},"773":{"ln":"Illinois: Chicago","sn":"Illinois"},"774":{"ln":"Massachusetts","sn":"Massachusetts"},"775":{"ln":"Nevada: Reno, Elko, Ely","sn":"Nevada"},"778":{"ln":"British Columbia","sn":"British Columbia"},"779":{"ln":"Illinois","sn":"Illinois"},"780":{"ln":"Northern Alberta, Canada: Edmonton, Jasper, Grande Prairie, Peace River","sn":"N Alberta"},"781":{"ln":"Eastern Massachusetts: Saugus, Norwood, Waltham, Woburn, Boston suburbs","sn":"E Massachusetts"},"784":{"ln":"Saint Vincent and the Grenadines","sn":"St. Vincent/Grenadines"},"785":{"ln":"Northern Kansas: Colby, Topeka, Salina, Manhattan, Lawrence","sn":"N Kansas"},"786":{"ln":"Florida: Miami-Dade County, Florida Keys","sn":"Florida"},"787":{"ln":"Puerto Rico","sn":"Puerto Rico"},"800":{"ln":"Toll-free Telephone Service","sn":"Toll-free"},"801":{"ln":"Utah: Wasatch Front","sn":"Utah"},"802":{"ln":"Vermont","sn":"Vermont"},"803":{"ln":"Central South Carolina: Columbia, Rock Hill, Sumter, Aiken","sn":"South Carolina"},"804":{"ln":"Virginia: Richmond, Petersburg","sn":"Virginia"},"805":{"ln":"Central Coastal California: Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley","sn":"California"},"806":{"ln":"Texas: Amarillo, Lubbock, Canadian, Perryton, Shamrock, Dalhart, Texas Panhandle","sn":"Texas"},"807":{"ln":"Northwestern Ontario, Canada: Thunder Bay, Kenora, Dryden, Greenstone","sn":"NW Ontario"},"808":{"ln":"Hawaii","sn":"Hawaii"},"809":{"ln":"Dominican Republic","sn":"D.R."},"810":{"ln":"Michigan: Port Huron, Flint, Lapeer, and Michigan \"Thumb\"","sn":"Michigan"},"812":{"ln":"Indiana: Southern Indiana, including Bloomington, Evansville, Jeffersonville, New Albany, and Terre Haute).","sn":"Indiana"},"813":{"ln":"Central Florida: Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar","sn":"Florida"},"814":{"ln":"Northwestern and Central Pennsylvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium","sn":"NW Pennsylvania"},"815":{"ln":"Northern Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake","sn":"N Illinois"},"816":{"ln":"West Central Missouri: Kansas City, St Joseph, Independence, Harrisonville","sn":"Missouri"},"817":{"ln":"Texas: Fort Worth, Arlington, Grandview, Weatherford, Rhome","sn":"Texas"},"818":{"ln":"Southern California: San Fernando Valley, including Glendale, San Fernando, Northridge, Burbank, Los Angeles suburbs","sn":"S California"},"819":{"ln":"Quebec, Canada: Sherbrooke, Trois-Rivieres, Abitibi-TÃ©miscamingue, Mauricie, Outaouais, Estrie","sn":"Quebec"},"825":{"ln":"Alberta, Canada","sn":"Alberta"},"828":{"ln":"Western North Carolina: Hickory, Asheville, Waynesville, Franklin, Murphy","sn":"W North Carolina"},"829":{"ln":"The Dominican Republic","sn":"D.R."},"830":{"ln":"Southwestern Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass","sn":"SW Texas"},"831":{"ln":"Central California: Salinas, Hollister, Monterey, Carmel, Santa Cruz","sn":"California"},"832":{"ln":"Texas","sn":"Texas"},"843":{"ln":"Eastern South Carolina: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island","sn":"E South Carolina"},"845":{"ln":"Southeastern New York: Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville","sn":"SE New York"},"847":{"ln":"Northeastern Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, Chicago suburbs","sn":"NE Illinois"},"848":{"ln":"New Jersey","sn":"New Jersey"},"849":{"ln":"The Dominican Republic","sn":"D.R."},"850":{"ln":"Northwestern Florida: Pensacola, Tallahassee, Panama City, the Florida panhandle","sn":"NW Florida"},"856":{"ln":"Southwestern New Jersey: Vineland, Cherry Hill, Camden, Millville","sn":"SW New Jersey"},"857":{"ln":"Massachusetts","sn":"Massachusetts"},"858":{"ln":"Southern California: Del Mar, La Jolla, San Diego","sn":"S California"},"859":{"ln":"North Central Kentucky: Lexington, Richmond, Danville, Covington, Florence, Mount Sterling","sn":"Kentucky"},"860":{"ln":"Connecticut: Bristol, Hartford, Norwich and northern and eastern Connecticut","sn":"Connecticut"},"862":{"ln":"New Jersey","sn":"New Jersey"},"863":{"ln":"South Central Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven","sn":"Florida"},"864":{"ln":"South Carolina: Greenville, Spartanburg, Anderson, Upstate South Carolina","sn":"South Carolina"},"865":{"ln":"Central Eastern Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood","sn":"E Tennessee"},"867":{"ln":"Yukon, Northwest Territories, and Nunavut, Canada","sn":"Yukon"},"868":{"ln":"Trinidad and Tobago","sn":"Trinidad/Tobago"},"869":{"ln":"Saint Kitts and Nevis","sn":"St. Kitts/Nevis"},"870":{"ln":"Southern and Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff","sn":"S Arkansas"},"872":{"ln":"Illinois","sn":"Illinois"},"873":{"ln":"Quebec, Canada","sn":"Quebec"},"876":{"ln":"Jamaica","sn":"Jamaica"},"878":{"ln":"Pennsylvania","sn":"Pennsylvania"},"888":{"ln":"Toll-free Telephone Service","sn":"Toll-free"},"900":{"ln":"Premium-rate Telephone Service","sn":"Premium-rate"},"901":{"ln":"Southwestern Tennessee: Memphis, Covington, Somerville","sn":"SW Tennessee"},"902":{"ln":"Nova Scotia and Prince Edward Island, Canada","sn":"Nova Scotia/PEI"},"903":{"ln":"Northeastern Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage","sn":"NE Texas"},"904":{"ln":"Northeastern Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs","sn":"NE Florida"},"905":{"ln":"Southwestern Ontario, Canada: Niagara Region, Hamilton, Toronto suburbs","sn":"SW Ontario"},"906":{"ln":"Northern Michigan: Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Upper Peninsula","sn":"N Michigan"},"907":{"ln":"Alaska: Anchorage, Juneau, Fairbanks","sn":"Alaska"},"908":{"ln":"West Central New Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield","sn":"New Jersey"},"909":{"ln":"Southern California: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana","sn":"S California"},"910":{"ln":"Southeastern North Carolina: Fayetteville, Wilmington, Jacksonville, Lumberton","sn":"SE North Carolina"},"912":{"ln":"Southeastern Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas","sn":"SE Georgia"},"913":{"ln":"Eastern Kansas: Kansas City, Overland Park, Paola, Leavenworth","sn":"E Kansas"},"914":{"ln":"New York: Westchester County","sn":"New York"},"915":{"ln":"Texas: El Paso County, Hudspeth County","sn":"Texas"},"916":{"ln":"Central California: Sacramento, Davis, Roseville","sn":"California"},"917":{"ln":"New York: New York City","sn":"New York"},"918":{"ln":"Northeastern Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta","sn":"NE Oklahoma"},"919":{"ln":"North Central North Carolina: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro","sn":"North Carolina"},"920":{"ln":"Eastern Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac","sn":"E Wisconsin"},"925":{"ln":"Central California: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin","sn":"California"},"928":{"ln":"Northern and Western Arizona: Flagstaff, Kingman, Prescott, Yuma","sn":"NW Arizona"},"929":{"ln":"New York","sn":"New York"},"931":{"ln":"Tennessee: Clarksville, Columbia, Manchester, Cookeville","sn":"Tennessee"},"935":{"ln":"Southern California: San Diego","sn":"S California"},"936":{"ln":"Central and Southeastern Texas: Nacogdoches, Lufkin, Conroe, Huntsville","sn":"SE Texas"},"937":{"ln":"Southwestern Ohio: Marysville, Springfield, Dayton, Hillsboro","sn":"SW Ohio"},"938":{"ln":"Alabama: Huntsville","sn":"Alabama"},"939":{"ln":"Puerto Rico","sn":"Puerto Rico"},"940":{"ln":"Northern Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur","sn":"N Texas"},"941":{"ln":"Southwestern Florida: Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda","sn":"SW Florida"},"947":{"ln":"Michigan","sn":"Michigan"},"949":{"ln":"Southern California: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar","sn":"S California"},"950":{"ln":"Carrier Access","sn":"Carrier Access"},"951":{"ln":"Southern California: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild","sn":"S California"},"952":{"ln":"Minnesota: Bloomington, Minnetonka, Chaska, Minneapolis","sn":"Minnesota"},"954":{"ln":"Southern Florida: Fort Lauderdale, Hollywood, Coral Springs","sn":"S Florida"},"956":{"ln":"Southern Texas: Laredo, Brownsville, McAllen, Harlingen","sn":"S Texas"},"959":{"ln":"Connecticut","sn":"Connecticut"},"970":{"ln":"Northern and Western Colorado: Aspen, Durango, Grand Junction, Fort Collins","sn":"NW Colorado"},"971":{"ln":"Northwestern Oregon: Portland, Salem, Hillsboro, Beaverton","sn":"NW Oregon"},"972":{"ln":"Texas","sn":"Texas"},"973":{"ln":"Northwestern New Jersey: Newark, Paterson","sn":"NW New Jersey"},"975":{"ln":"Missouri","sn":"Missouri"},"978":{"ln":"Northeastern Massachusetts: Fitchburg, Peabody","sn":"NE Massachusetts"},"979":{"ln":"Southeastern Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange","sn":"SE Texas"},"980":{"ln":"North Carolina","sn":"North Carolina"},"984":{"ln":"North Carolina","sn":"North Carolina"},"985":{"ln":"Southeastern Louisiana: Houma, Slidell","sn":"SE Louisiana"},"989":{"ln":"Central Michigan: Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso","sn":"Michigan"}};
ilib.data.area_ES = {"822":{"ln":"Granadilla de Abona, Guimar, Icod de los Vinos, Isla de la Palma, La Orotava, San Sebastian de la Gomera, Santa Cruz de Tenerife, Valverde","sn":"Santa Cruz de Tenerife"},"824":{"ln":"Alburquerque, Alconchel, Almendralejo, Azuaga, Badajoz, Cabeza del Buey, Castuera, Don Benito, Fregenal de la Sierra, Fuente de Cantos, GuareÃ±a, Jerez de los Caballeros, Llerena, Merida, Villafranca de los Barros, Zafra","sn":"Badajoz"},"828":{"ln":"Arrecife, Galdar, Isla de Fuerteventura, Las Palmas, Vecindario","sn":"Las Palmas"},"843":{"ln":"Azpeitia, Beasain, Bergara, deba, Donostia-San Sebastian, Eibar, Guipuzcoa","sn":"Guipuzcoa"},"848":{"ln":"Alsasua, Los Arcos, Burguete, Elizondo, Estella, Ezcaroz, Irurzun, Leiza, Pamplona, San Adrian, Sanguesa, Tafalla, Tudela, Vera de Bidasoa, Navarra","sn":"Navarra"},"856":{"ln":"Algeciras, Arcos de la Frontera, Barbate de Franco, Cadiz, Ceuta, Gibraltar, Jerez de la Frontera, Medina-Sidonia, Olvera, Sanlucar de Barrameda, CÃ¡diz","sn":"CÃ¡diz"},"858":{"ln":"Alhama de Granada, Baza, Cadiar, Cullar, Granada, Guadix, Iznalloz, Lanjaron, Loja, Motril","sn":"Granada"},"868":{"ln":"Alhama de Murcia, Archena, Caravaca, Cartagena, Cieza, Jumilla, Lorca, Murcia","sn":"Murcia"},"871":{"ln":"Campos, Eivissa, Inca, Manacor, Mao, Palma, PollenÃ§a, Sineu, Soller, Baleares","sn":"Baleares"},"872":{"ln":"Blanes, Camprodon, Figueres, Girona, LlanÃ§a, Olot, Palafrugell, Puigcerda, Ripoll, Roses, Sant Feliu de Guixols, Santa Coloma de Farners, Torroella de Montgri, Gerona","sn":"Gerona"},"873":{"ln":"Artesa de Segre, Balaguer, Bellver de Cerdanya, Cervera, Lleida, Mollerussa, El Pont de Suert, Ponts, La Seu D'Urgell, Solsona, Sort, Tarrega, Tremp, Vielha, Lerida","sn":"Lerida"},"876":{"ln":"Alagon, Alhama de Aragon, La Almunia de DoÃ±a Godina, Belchite, Calatayud, CariÃ±ena, Caspe, Daroca, Ejea de los Caballeros, Escatron, Fuentes de Ebro, Illueca, Mallen, Muel, Tarazona, Zaragoza, Zuera","sn":"Zaragoza"},"877":{"ln":"Amposta, Falset, Gandesa, Montblanc, Mora D'Ebre, Reus, Santa Coloma de Queralt, Tarragona, Tortosa, El Vendrell","sn":"Tarragona"},"881":{"ln":"Betanzos, Carballo, A CoruÃ±a, Ferrol, Noia, Ordenes, Ortigueira, Santiago","sn":"CoruÃ±a"},"886":{"ln":"A Estrada, Lalin, Ponte-Caldelas, Ponteareas, Pontevedra, Tui, Vigo, Vilagarcia de Arousa","sn":"Pontevedra"},"910":{"ln":"Alcala de Henares, Arganda, Collado Villalba, Madrid","sn":"Madrid"},"911":{"ln":"Alcala de Henares, Aranjuez, Arganda, Buitrago del Lozoya, Collado Villalba, El Escorial, Madrid, El Molar, Navalcarnero, San Martin de Valdeiglesias","sn":"Madrid"},"912":{"ln":"Alcala de Henares, Aranjuez, Arganda, Buitrago del Lozoya, Collado Villalba, El Escorial, Madrid, El Molar, Navalcarnero, San Martin de Valdeiglesias","sn":"Madrid"},"913":{"ln":"Madrid","sn":"Madrid"},"914":{"ln":"Alcala de Henares, Aranjuez, Arganda, Buitrago del Lozoya, Collado Villalba, El Escorial, Madrid, El Molar, Navalcarnero, San Martin de Valdeiglesias","sn":"Madrid"},"915":{"ln":"Madrid","sn":"Madrid"},"916":{"ln":"Madrid, El Molar","sn":"Madrid"},"917":{"ln":"Aranjuez, Arganda, El Escorial, Madrid, El Molar, Navalcarnero, San Martin de Valdeiglesias","sn":"Madrid"},"918":{"ln":"Alcala de Henares, Aranjuez, Arganda, Buitrago del Lozoya, Collado Villalba, El Escorial, Madrid, El Molar, Navalcarnero, San Martin de Valdeiglesias","sn":"Madrid"},"920":{"ln":"Arenas de San Pedro, Arevalo, Avila, El Barco de Avila, Navalmoral, Piedrahita, San Pedro del Arroyo, Ãvila","sn":"Ãvila"},"921":{"ln":"Cantalejo, Carbonero El Mayor, Cuellar, Nava de la Asuncion, Riaza, San Rafael, Segovia, Turegano, Osuna, Seville","sn":"Seville"},"922":{"ln":"Granadilla de Abona, Guimar, Icod de los Vinos, Isla de la Palma, La Orotava, San Sebastian de la Gomera, Santa Cruz de Tenerife, Valverde","sn":"Santa Cruz de Tenerife"},"923":{"ln":"Bejar, Cantalapiedra, Ciudad Rodrigo, La Fuente de San Esteban, Guijuelo, Ledesma, PeÃ±aranda de Bracamonte, Salamanca, Las Veguillas, Vitigudino","sn":"Salamanca"},"924":{"ln":"Alburquerque, Alconchel, Almendralejo, Azuaga, Badajoz, Cabeza del Buey, Castuera, Don Benito, Fregenal de la Sierra, Fuente de Cantos, GuareÃ±a, Jerez de los Caballeros, Llerena, Merida, Villafranca de los Barros, Zafra","sn":"Badajoz"},"925":{"ln":"Galvez, Illescas, Madridejos, Mora, OcaÃ±a, Oropesa, La Pueblanueva, Quintanar de la Orden, Talavera de la Reina, Toledo, Torrijos","sn":"Toledo"},"926":{"ln":"Alcazar de San Juan, Almaden, Ciudad Real, Daimiel, Malagon, Manzanares, Piedrabuena, Puertollano, Tomelloso, ValdepeÃ±as, Villanueva de los Infantes","sn":"Ciudad Real"},"927":{"ln":"Alcantara, Caceres, CaÃ±averal, Coria, Jaraiz de la Vera, Logrosan, Montanchez, Montehermoso, Navalmoral de la Mata, Plasencia, Trujillo, Valencia de Alcantara, Zorita","sn":"Caceres"},"928":{"ln":"Arrecife, Galdar, Isla de Fuerteventura, Las Palmas, Vecindario","sn":"Las Palmas"},"930":{"ln":"Barcelona, Granollers, Mataro, Sabadell-Terrassa","sn":"Barcelona"},"931":{"ln":"Barcelona, Berga, Caldes de Montbui, Calella, Cardona, Granollers, Igualada, Manlleu, Manresa, Martorell, Mataro, Sabadell-Terrassa, Sallent, Sant Celoni, Vic, Vilafranca del Penedes, Vilanova i la Geltru","sn":"Barcelona"},"932":{"ln":"Barcelona, Berga, Granollers, Igualada, Manresa, Martorell, Mataro, Sabadell-Terrassa, Sant Celoni, Vilafranca del Penedes, Vilanova i la Geltru","sn":"Barcelona"},"933":{"ln":"Barcelona, Caldes de Montbui, Granollers, Igualada, Manresa, Martorell, Mataro, Sabadell-Terrassa, Vic, Vilafranca del Penedes, Vilanova i la Geltru","sn":"Barcelona"},"934":{"ln":"Barcelona","sn":"Barcelona"},"935":{"ln":"Barcelona, Berga, Caldes de Montbui, Calella, Cardona, Granollers, Igualada, Manlleu, Manresa, Martorell, Mataro, Sabadell-Terrassa, Sallent, Sant Celoni, Vic, Vilafranca del Penedes, Vilanova i la Geltru","sn":"Barcelona"},"936":{"ln":"Barcelona, Berga, Caldes de Montbui, Calella, Cardona, Granollers, Igualada, Manlleu, Manresa, Martorell, Mataro, Sabadell-Terrassa, Sallent, Sant Celoni, Vic, Vilafranca del Penedes, Vilanova i la Geltru","sn":"Barcelona"},"937":{"ln":"Barcelona, Berga, Caldes de Montbui, Calella, Cardona, Granollers, Igualada, Manlleu, Manresa, Martorell, Mataro, Sabadell-Terrassa, Sallent, Sant Celoni, Vic, Vilafranca del Penedes, Vilanova i la Geltru","sn":"Barcelona"},"938":{"ln":"Barcelona, Berga, Caldes de Montbui, Calella, Cardona, Granollers, Igualada, Manlleu, Manresa, Martorell, Mataro, Sabadell-Terrassa, Sallent, Sant Celoni, Vic, Vilafranca del Penedes, Vilanova i la Geltru","sn":"Barcelona"},"941":{"ln":"Alfaro, Arnedo, Calahorra, Haro, LogroÃ±o, Najera, Santo Domingo de la Calzada, Torrecilla en Cameros, La Rioja","sn":"La Rioja"},"942":{"ln":"Cabezon de la Sal, Castro-Urdiales, Laredo, Potes, Reinosa, San Vicente de la Barquera, Santander, Torrelavega, Villacarriedo, Cantabria","sn":"Cantabria"},"943":{"ln":"Don Benito, Azpeitia, Beasain, Bergara, deba, Donostia-San Sebastian, Eibar, Guipuzcoa","sn":"Guipuzcoa"},"944":{"ln":"Balmaseda, Bermeo, Bilbao, Durango, Gernika, Ondarroa, Vizcaya","sn":"Vizcaya"},"945":{"ln":"Amurrio, Vitoria-Gasteiz, Alava","sn":"Alava"},"946":{"ln":"Balmaseda, Bermeo, Bilbao, Durango, Gernika, Ondarroa, Vizcaya","sn":"Vizcaya"},"947":{"ln":"Aranda de Duero, Belorado, Briviesca, Burgos, Lerma, Medina de Pomar, Miranda de Ebro, OÃ±a, Pampliega, Salas de los Infantes, Sasamon, Sedano, Villadiego, Villarcayo","sn":"Burgos"},"948":{"ln":"Alsasua, Los Arcos, Burguete, Elizondo, Estella, Ezcaroz, Irurzun, Leiza, Pamplona, San Adrian, Sanguesa, Tafalla, Tudela, Vera de Bidasoa, Navarra","sn":"Navarra"},"949":{"ln":"Brihuega, Cifuentes, Guadalajara, Humanes, Jadraque, Molina, Pastrana, Sacedon, Siguenza","sn":"Guadalajara"},"950":{"ln":"Abla, Adra, Albox, Almeria, Canjayar, Nijar, Tijola, Velez Rubio, Vera, AlmerÃ­a","sn":"AlmerÃ­a"},"951":{"ln":"Antequera, Coin, Cortes de la Frontera, Malaga, Marbella, Melilla, Ronda, Velez-Malaga","sn":"Malaga"},"952":{"ln":"Antequera, Coin, Cortes de la Frontera, Malaga, Marbella, Melilla, Ronda, Velez-Malaga","sn":"Malaga"},"953":{"ln":"Alcala la Real, Andujar, Castellar de Santisteban, Cazorla, Jaen, Linares, Orcera, Ubeda, Villanueva del Arzobispo","sn":"Jaen"},"954":{"ln":"El Arahal, Cantillana, Carmona, Constantina, Ecija, Lora del Rio, Moron de la Frontera, Osuna, Pilas, Seville, Utrera","sn":"Seville"},"955":{"ln":"Granada, El Arahal, Cantillana, Carmona, Constantina, Ecija, Lora del Rio, Moron de la Frontera, Osuna, Pilas, Seville, Utrera","sn":"Seville"},"956":{"ln":"Algeciras, Arcos de la Frontera, Barbate de Franco, Cadiz, Ceuta, Jerez de la Frontera, Medina-Sidonia, Olvera, Sanlucar de Barrameda, CÃ¡diz","sn":"CÃ¡diz"},"957":{"ln":"La Carlota, Castro del Rio, Cordoba, Hinojosa del Duque, Lucena, Montilla, Montoro, PeÃ±arroya-Pueblonuevo, Posadas, Pozoblanco, Priego de Cordoba, Puente Genil, Villaviciosa de Cordoba","sn":"Cordoba"},"958":{"ln":"Alhama de Granada, Baza, Cadiar, Cullar","sn":"Granada"},"959":{"ln":"Aracena, Ayamonte, Cortegana, Huelva, Lepe, Nerva, La Palma del Condado, Santa Olalla del Cala, Valverde del Camino, Cartagena, Murcia","sn":"Murcia"},"960":{"ln":"Alzira, Ayora, Betera, BuÃ±ol, Carlet, Chelva, Gandia, LlÃ­ria, Ontinyent, Requena, Sagunt, Sueca, Utiel, Valencia, Xativa","sn":"Valencia"},"961":{"ln":"Alzira, Ayora, Betera, BuÃ±ol, Carlet, Chelva, Gandia, LlÃ­ria, Ontinyent, Requena, Sagunt, Sueca, Utiel, Valencia, Xativa","sn":"Valencia"},"962":{"ln":"Alzira, Ayora, Betera, BuÃ±ol, Carlet, Chelva, Gandia, LlÃ­ria, Ontinyent, Requena, Sagunt, Sueca, Utiel, Valencia, Xativa","sn":"Valencia"},"963":{"ln":"Alzira, Ayora, Betera, BuÃ±ol, Chelva, Gandia, LlÃ­ria, Ontinyent, Requena, Sagunt, Sueca, Utiel, Valencia, Xativa","sn":"Valencia"},"964":{"ln":"Alcala de Chivert, Benasal, Morella, Segorbe, Vinaros, CastellÃ³n de la Plana","sn":"CastellÃ³n de la Plana"},"965":{"ln":"Alcoy-Plaza, Alicante-Avenida, Almoradi, Benidorm, Benissa, denia, Elche-Vinalopo, Jijona, Orihuela, Pego, Petrer, Villena, Alicante","sn":"Alicante"},"966":{"ln":"Alcoy-Plaza, Alicante-Avenida, Almoradi, Benidorm, Benissa, denia, Elche-Vinalopo, Jijona, Orihuela, Pego, Petrer, Villena, Alicante","sn":"Alicante"},"967":{"ln":"Albacete, Alcaraz, Almansa, Balazote, Bogarra, El Bonillo, Casas-IbaÃ±ez, Elche de la Sierra, Hellin, Petrola, La Roda, Tarazona de la Mancha, Valdeganga, Villarrobledo, Yeste","sn":"Albacete"},"968":{"ln":"Alhama de Murcia, Archena, Caravaca, Cartagena, Cieza, Jumilla, Lorca, Murcia","sn":"Murcia"},"969":{"ln":"La Almarcha, Carboneras de Guadazaon, Cuenca, Huete, Landete, Motilla del Palancar, Priego, San Clemente, Tarancon, Valverde de Jucar","sn":"Cuenca"},"971":{"ln":"Campos, Eivissa, Inca, Manacor, Mao, Palma, PollenÃ§a, Sineu, Soller, Baleares","sn":"Baleares"},"972":{"ln":"Blanes, Camprodon, Figueres, Girona, LlanÃ§a, Olot, Palafrugell, Puigcerda, Ripoll, Roses, Sant Feliu de Guixols, Santa Coloma de Farners, Torroella de Montgri, Gerona","sn":"Gerona"},"973":{"ln":"Artesa de Segre, Balaguer, Bellver de Cerdanya, Cervera, Lleida, Mollerussa, El Pont de Suert, Ponts, La Seu D'Urgell, Solsona, Sort, Tarrega, Tremp, Vielha, Lerida","sn":"Lerida"},"974":{"ln":"Ainsa, Ayerbe, Barbastro, Campo, Fraga, Graus, GraÃ±en, Huesca, Jaca, Monzon, SabiÃ±anigo, SariÃ±ena, Tamarite de Litera","sn":"Huesca"},"975":{"ln":"Almazan, Arcos de Jalon, El Burgo de Osma, Covaleda, Gomara, San Esteban de Gormaz, Soria","sn":"Soria"},"976":{"ln":"Alagon, Alhama de Aragon, La Almunia de DoÃ±a Godina, Belchite, Calatayud, CariÃ±ena, Caspe, Daroca, Ejea de los Caballeros, Escatron, Fuentes de Ebro, Illueca, Mallen, Muel, Tarazona, Zaragoza, Zuera","sn":"Zaragoza"},"977":{"ln":"Amposta, Falset, Gandesa, Montblanc, Mora D'Ebre, Reus, Santa Coloma de Queralt, Tarragona, Tortosa, El Vendrell","sn":"Tarragona"},"978":{"ln":"Albarracin, AlcaÃ±iz, Alcorisa, Alfambra, Calamocha, Hijar, Mora de Rubielos, Muniesa, Santa Eulalia, Sarrion, Teruel, Utrillas, Valderrobres","sn":"Teruel"},"979":{"ln":"Aguilar de Campoo, Baltanas, Carrion de los Condes, Cervera de Pisuerga, Fromista, Guardo, Herrera de Pisuerga, Palencia, Paredes de Nava, SaldaÃ±a","sn":"Palencia"},"980":{"ln":"AlcaÃ±ices, Benavente, Bermillo de Sayago, Fuentesauco, Puebla de Sanabria, Tabara, Toro, Villalpando, Zamora","sn":"Zamora"},"981":{"ln":"Betanzos, Carballo, CoruÃ±a, Ferrol, Noia, Ordenes, Ortigueira, Santiago","sn":"CoruÃ±a"},"982":{"ln":"Becerrea, Chantada, Guitiriz, Lugo, Meira, Monforte de Lemos, Ribadeo, Sarria, Villalba, Viveiro","sn":"Lugo"},"983":{"ln":"Medina de Rioseco, Medina del Campo, Olmedo, PeÃ±afiel, Quintanilla de Onesimo, Tordesillas, Valladolid, Villalon de Campos","sn":"Valladolid"},"984":{"ln":"Aviles, Cangas de Narcea, Cangas de Onis, Gijon, Infiesto, Llanes, Luarca, Moreda, Oviedo, Pola de Laviana, Ribadesella, Tineo, Asturias","sn":"Asturias"},"985":{"ln":"Aviles, Cangas de Narcea, Cangas de Onis, Gijon, Infiesto, Llanes, Luarca, Moreda, Oviedo, Pola de Laviana, Ribadesella, Tineo, Asturias","sn":"Asturias"},"986":{"ln":"A Estrada, Lalin, Ponte-Caldelas, Ponteareas, Pontevedra, Tui, Vigo, Vilagarcia de Arousa","sn":"Pontevedra"},"987":{"ln":"Astorga, La BaÃ±eza, Bembibre, Cistierna, Leon, Ponferrada, Quintana de Rueda, RiaÃ±o, La Robla, Sahagun, Valencia de Don Juan, Veguellina de Orbigo, Villablino, Villafranca del Bierzo, LeÃ³n","sn":"LeÃ³n"},"988":{"ln":"Allariz, Ourense, Ribadavia, La Rua, Verin, Orense","sn":"Orense"}};
ilib.data.area_MX = {"33":{"ln":"Guadalajara, Jalisco","sn":"Jalisco"},"55":{"ln":"Mexico City, Federal District","sn":"Mexico City"},"81":{"ln":"Monterrey, Nuevo LeÃ³n","sn":"Nuevo LeÃ³n"},"222":{"ln":"Amozoc, Puebla, San Andres Calpan, San Miguel Canoa, Puebla","sn":"Puebla"},"223":{"ln":"Magdalena Tetela, San Pablo Zitlaltepec, Tepatlaxco de Hidalgo, Tepeaca, Puebla","sn":"Puebla"},"224":{"ln":"Atoyatempan, San Juan Ixcaquixtla, Tecali de Herrera, Tochtepec, Puebla","sn":"Puebla"},"225":{"ln":"Tlapacoyan, Veracruz","sn":"Veracruz"},"226":{"ln":"Altotonga, Jalacingo, Veracruz","sn":"Veracruz"},"227":{"ln":"Huejotzingo, San Buenaventura Nealtican, Puebla","sn":"Puebla"},"228":{"ln":"Jalapa, Tuzamapan, Veracruz","sn":"Veracruz"},"229":{"ln":"Veracruz, Veracruz","sn":"Veracruz"},"231":{"ln":"Teteles, Teziutlan, Puebla","sn":"Puebla"},"232":{"ln":"La Vigueta, Martinez de la Torre, Veracruz","sn":"Veracruz"},"233":{"ln":"Cuetzalan, Tlatlauquitepec, Zacapoaxtla, Zaragoza, Puebla","sn":"Puebla"},"235":{"ln":"Misantla, Nautla, San Rafael, Vega de Alatorre, Veracruz","sn":"Veracruz"},"236":{"ln":"Ajalpan, Calipan, Cuicatlan, Huautla de Jimenez, Teotitlan del Camino, Oaxaca","sn":"Oaxaca"},"237":{"ln":"San Gabriel Chilac, San Simon Yehualtepec, Tlacotepec, Puebla","sn":"Puebla"},"238":{"ln":"Santiago Miahuatlan, Tehuacan, Puebla","sn":"Puebla"},"241":{"ln":"Apizaco, Hueyotlipan, San Martin Xaltocan, San Salvador Tzonpantepec, Tlaxco, Tlaxcala","sn":"Tlaxcala"},"243":{"ln":"Atencingo, Izucar de Matamoros, San Felipe Ayutla, Puebla","sn":"Puebla"},"244":{"ln":"Atlixco, La Venta Cacaloxuchil, Tochimilco, Puebla","sn":"Puebla"},"245":{"ln":"Ciudad Serdan, Esperanza, Tlachichuca, Puebla","sn":"Puebla"},"246":{"ln":"Santa Ana Nopalucan, Santa Maria Nativitas, Tlaxcala, Zacatelco, Tlaxcala","sn":"Tlaxcala"},"247":{"ln":"Huamantla, San Cosme Xalostoc, Tlaxcala","sn":"Tlaxcala"},"248":{"ln":"San Felipe Ixtacuixtla, San Felipe Teotlalcingo, San Lorenzo Chiautzingo, San Lucas el Grande, San Martin Texmelucan, San Mateo Tepetitla, San Salvador el Verde, Santa Rita Tlahuapan, Puebla","sn":"Puebla"},"249":{"ln":"Acatzingo, CaÃ±ada Morelos, Los Reyes de Juarez, Palmar de Bravo, Palmarito Tochapan, San Hipolito Zoltepec, San Pablo de Las Tunas, San Salvador el Seco, Tecamachalco, Puebla","sn":"Puebla"},"271":{"ln":"Amatlan, Cordoba, Potrero, Veracruz","sn":"Veracruz"},"272":{"ln":"Maltrata, Orizaba, Veracruz","sn":"Veracruz"},"273":{"ln":"Chocaman, Coscomatepec, Huatusco, Ixhuatlan del Cafe, Paso del Macho, Villa Tejeda (Camaron), Veracruz","sn":"Veracruz"},"274":{"ln":"Acatlan de Perez Figueroa, Temascal, Tierra Blanca, Vicente Camalote, Oaxaca","sn":"Oaxaca"},"275":{"ln":"Chiautla de Tapia, Chinantla-Piaxtla, Huehuetlan el Chico, Tecomatlan, Tehuitzingo, Tulcingo del Valle, Puebla","sn":"Puebla"},"276":{"ln":"Libres, Oriental, San Lorenzo Cuapiaxtla, Villa Rafael Lara Grajales, Puebla","sn":"Puebla"},"278":{"ln":"Omealca, San Juan de la Punta, Tezonapa, Yanga, Zongolica, Veracruz","sn":"Veracruz"},"279":{"ln":"Actopan, Alto Lucero, Cosautlan de Carvajal, Estanzuela, Juchique de Ferrer, Naolinco de Victoria, Rinconada, Teocelo, Villa Emiliano Zapata, Veracruz","sn":"Veracruz"},"281":{"ln":"Loma Bonita, Oaxaca","sn":"Oaxaca"},"282":{"ln":"Alchichica, Guadalupe Victoria, Perote, Profesor Rafael Ramirez, Veracruz","sn":"Veracruz"},"283":{"ln":"Isla, Playa Vicente, Rodriguez Clara, San Juan Bautista Valle Nacional, Villa Azueta, Veracruz","sn":"Veracruz"},"284":{"ln":"Angel Rosario Cabada, Lerdo de Tejada, Veracruz","sn":"Veracruz"},"285":{"ln":"Ignacio de la Llave, Jamapa, Manlio Fabio Altamirano, Medellin de Bravo, Paso de Ovejas, Piedras Negras, Soledad de Doblado, Veracruz","sn":"Veracruz"},"287":{"ln":"Otatitlan, Papaloapan, San Felipe Jalapa de Diaz, San Lucas Ojitlan, Tuxtepec, Oaxaca","sn":"Oaxaca"},"288":{"ln":"Chacaltianguis, Cosamaloapan, Tlacojalpan, Tlacotalpan, Tres Valles, Veracruz","sn":"Veracruz"},"294":{"ln":"Catemaco, Juan Diaz Covarrubias, San Andres Tuxtla, Santiago Tuxtla, Veracruz","sn":"Veracruz"},"296":{"ln":"Campamento Farallon, La Antigua, Villa Cardel, Zempoala, Veracruz","sn":"Veracruz"},"297":{"ln":"Alvarado, Veracruz","sn":"Veracruz"},"311":{"ln":"Bellavista, Francisco I. Madero, Tepic, Nayarit","sn":"Nayarit"},"312":{"ln":"Colima, Los Tepames, Colima","sn":"Colima"},"313":{"ln":"Armeria, Cerro de Ortega, Coahuayana de Hidalgo, Coquimatlan, Cuyutlan, Madrid, Tecoman, Colima","sn":"Colima"},"314":{"ln":"Manzanillo, PeÃ±a Colorada, Colima","sn":"Colima"},"315":{"ln":"Careyes, Cihuatlan, La Manzanilla, San Patricio Melaque, Jalisco","sn":"Jalisco"},"316":{"ln":"Ayutla, Cuautla, San Clemente, Union de Tula, Jalisco","sn":"Jalisco"},"317":{"ln":"Autlan, El Chante, Jalisco","sn":"Jalisco"},"318":{"ln":"Cofradia de Suchitlan, Cuauhtemoc, La Higuera, Pihuamo, Queseria, Tonila, Jalisco","sn":"Jalisco"},"319":{"ln":"Chilapa, Palma Grande, Rosa Morada, Ruiz, Tuxpan, Nayarit","sn":"Nayarit"},"321":{"ln":"El Grullo, El Limon, Jalisco","sn":"Jalisco"},"322":{"ln":"Campamento Sarh, Ixtapa, Jose Maria Morelos, Nuevo Vallarta, Puerto Vallarta, Tomatlan, Jalisco","sn":"Jalisco"},"323":{"ln":"Estacion Yago, Guadalupe Victoria, La Presa, La Trozada (Villa Juarez), Pozo de Ibarra, San Blas, Santiago Ixcuintla, Sentispac, Villa Hidalgo, Nayarit","sn":"Nayarit"},"324":{"ln":"Ahuacatlan, Amatlan de CaÃ±as, Ixtlan del Rio, Jala, Nayarit","sn":"Nayarit"},"325":{"ln":"Acaponeta, Nayarit","sn":"Nayarit"},"326":{"ln":"Andres Figueroa, Atemajac de Brizuela, Zacoalco, Jalisco","sn":"Jalisco"},"327":{"ln":"Compostela, Jalcocotan, Las Varas, Mecatan, Rincon de Guayabitos, San Pedro Lagunillas, Santa Maria del Oro, Zacoalpan, Nayarit","sn":"Nayarit"},"328":{"ln":"Churintzio, Ecuandureo, Ixtlan de Los Hervores, La Luz, Vista Hermosa, MichoacÃ¡n","sn":"MichoacÃ¡n"},"329":{"ln":"Bucerias, San Jose del Valle, San Juan de Abajo, Valle de Banderas, Nayarit","sn":"Nayarit"},"341":{"ln":"Ciudad Guzman, Jalisco","sn":"Jalisco"},"342":{"ln":"Gomez Farias, Sayula, Jalisco","sn":"Jalisco"},"343":{"ln":"Ejutla, Tapalpa, Toliman, Tonaya, Venustiano Carranza, Jalisco","sn":"Jalisco"},"344":{"ln":"Mexticacan, Yahualica, Jalisco","sn":"Jalisco"},"345":{"ln":"Ayotlan, Betania, Degollado, La Concepcion, Jalisco","sn":"Jalisco"},"346":{"ln":"Nochistlan, Teocaltiche, Jalisco","sn":"Jalisco"},"347":{"ln":"San Julian, San Miguel el Alto, Valle de Guadalupe, Jalisco","sn":"Jalisco"},"348":{"ln":"Arandas, Jesus Maria, Josefino de Allende, San Ignacio Cerro Gordo, Santa Maria del Valle, Santiaguito de Velazquez, Jalisco","sn":"Jalisco"},"349":{"ln":"Atengo, Juchitlan, Quila, Tecolotlan, Tenamaxtlan, Jalisco","sn":"Jalisco"},"351":{"ln":"Ario de Rayon, Zamora, MichoacÃ¡n","sn":"MichoacÃ¡n"},"352":{"ln":"La Piedad, MichoacÃ¡n","sn":"MichoacÃ¡n"},"353":{"ln":"La Palma, Pajacuaran, Sahuayo, Venustiano Carranza, MichoacÃ¡n","sn":"MichoacÃ¡n"},"354":{"ln":"Los Reyes, Periban de Ramos, Tinguindin, Tocumbo, MichoacÃ¡n","sn":"MichoacÃ¡n"},"355":{"ln":"Chilchota, San Antonio Ocampo, Tangancicuaro, MichoacÃ¡n","sn":"MichoacÃ¡n"},"356":{"ln":"Tanhuato, Yurecuaro, MichoacÃ¡n","sn":"MichoacÃ¡n"},"357":{"ln":"Casimiro Castillo, La Huerta, Lo Arado, Los Tecomates, Tequesquitlan, Villa Purificacion, Jalisco","sn":"Jalisco"},"358":{"ln":"Tamazula, Zapoltitic, Jalisco","sn":"Jalisco"},"371":{"ln":"Atenquique, Tecalitlan, Tuxpan, Jalisco","sn":"Jalisco"},"372":{"ln":"Amacueca, Cofradia, Concepcion de Buenos Aires, La Manzanilla de la Paz, Teocuitatlan de Corona, Jalisco","sn":"Jalisco"},"373":{"ln":"Cuquio, Ixtlahuacan del Rio, Zapotlanejo, Jalisco","sn":"Jalisco"},"374":{"ln":"Amatitan, El Arenal, Tequila, Jalisco","sn":"Jalisco"},"375":{"ln":"Ameca, Jalisco","sn":"Jalisco"},"376":{"ln":"Atequiza, Chapala, Ixtlahuacan de Los Membrillos, Mezcala, San Juan Tecomatlan, San Luis Soyotlan, Tizapan el Alto, Jalisco","sn":"Jalisco"},"377":{"ln":"Cocula, Estipac, Jalisco","sn":"Jalisco"},"378":{"ln":"Acatic, Capilla de Guadalupe, Capilla de Milpillas, Pegueros, Tepatitlan, Jalisco","sn":"Jalisco"},"379":{"ln":"Numaran, Penjamillo, San Miguel Cuyutlan, Santa Cruz de Las Flores, Tlajomulco, Zinaparo, MichoacÃ¡n","sn":"MichoacÃ¡n"},"381":{"ln":"Cojumatlan, San Jose de Gracia, MichoacÃ¡n","sn":"MichoacÃ¡n"},"382":{"ln":"Mazamitla, Quitupan, Valle de Juarez, Jalisco","sn":"Jalisco"},"383":{"ln":"Chavinda, Santiago Tangamandapio, Villamar, MichoacÃ¡n","sn":"MichoacÃ¡n"},"384":{"ln":"Tala, Teuchitlan, Jalisco","sn":"Jalisco"},"385":{"ln":"Chiquilistlan, San Martin Hidalgo, Tamazulita, Jalisco","sn":"Jalisco"},"386":{"ln":"Ahualulco, Antonio Escobedo, Etzatlan, Hostotipaquillo, Magdalena, San Marcos, Jalisco","sn":"Jalisco"},"387":{"ln":"Acatlan de Juarez, Jocotepec, San Juan Cosala, Villa Corona, Zapotitlan, Jalisco","sn":"Jalisco"},"388":{"ln":"Mascota, Mixtlan, Talpa de Allende, Jalisco","sn":"Jalisco"},"389":{"ln":"Quimichis, San Felipe Aztatan, Tecuala, Nayarit","sn":"Nayarit"},"391":{"ln":"Atotonilco el Alto, Las Margaritas, Poncitlan, San Antonio Fernandez, San Jose de Gracia, Tototlan, Jalisco","sn":"Jalisco"},"392":{"ln":"Jamay, Ocotlan, Jalisco","sn":"Jalisco"},"393":{"ln":"La Barca, San Jose Casas Caidas, San Ramon, Jalisco","sn":"Jalisco"},"394":{"ln":"Cotija de la Paz, MichoacÃ¡n","sn":"MichoacÃ¡n"},"395":{"ln":"San Diego de Alejandria, San Juan de Los Lagos, Tlacuitapan, Union de San Antonio, Jalisco","sn":"Jalisco"},"411":{"ln":"CaÃ±ada de Caracheo, Cortazar, Jaral del Progreso, San Pablo Casacuaran, Yuriria, Guanajuato","sn":"Guanajuato"},"412":{"ln":"Comonfort, Empalme Escobedo, Juventino Rosas, Sarabia, Villagran, Guanajuato","sn":"Guanajuato"},"413":{"ln":"Apaseo el Alto, Apaseo el Grande, Guanajuato","sn":"Guanajuato"},"414":{"ln":"Tequisquiapan, Quintana Roo","sn":"Quintana Roo"},"415":{"ln":"San Miguel Allende, Guanajuato","sn":"Guanajuato"},"417":{"ln":"Acambaro, Iramuco, Nuevo Chupicuaro, Paracuaro, Guanajuato","sn":"Guanajuato"},"418":{"ln":"Dolores Hidalgo, San Diego de la Union, Guanajuato","sn":"Guanajuato"},"419":{"ln":"Colon, Doctor Mora, San Jose Iturbide, Guanajuato","sn":"Guanajuato"},"421":{"ln":"Coroneo, Jerecuaro, Tarandacuao, Guanajuato","sn":"Guanajuato"},"422":{"ln":"Ario de Rosales, Gabriel Zamora, Taretan, MichoacÃ¡n","sn":"MichoacÃ¡n"},"423":{"ln":"Cheran, Paracho, Tingambato, Ziracuaretiro, MichoacÃ¡n","sn":"MichoacÃ¡n"},"424":{"ln":"Coalcoman, El Ahuaje, Tepalcatepec, MichoacÃ¡n","sn":"MichoacÃ¡n"},"425":{"ln":"Antunez, La Huacana, Nueva Italia, Tancitaro, MichoacÃ¡n","sn":"MichoacÃ¡n"},"426":{"ln":"Aguililla, Buenavista, Felipe Carrillo Puerto, MichoacÃ¡n","sn":"MichoacÃ¡n"},"427":{"ln":"Polotitlan, San Juan del Rio, Quintana Roo","sn":"Quintana Roo"},"428":{"ln":"Ocampo, San Felipe, Guanajuato","sn":"Guanajuato"},"429":{"ln":"Abasolo, Cueramaro, Huanimaro, Pueblo Nuevo, Guanajuato","sn":"Guanajuato"},"431":{"ln":"Jalostotitlan, Villa Obregon, Jalisco","sn":"Jalisco"},"432":{"ln":"Ciudad Manuel Doblado, Romita, Guanajuato","sn":"Guanajuato"},"433":{"ln":"Gonzalez Ortega, Miguel Auza, Sombrerete, Zacatecas","sn":"Zacatecas"},"434":{"ln":"Acuitzio del Canje, Erongaricuaro, Patzcuaro, Villa Escalante (S.c.del Cobre), MichoacÃ¡n","sn":"MichoacÃ¡n"},"435":{"ln":"Huetamo, San Lucas, MichoacÃ¡n","sn":"MichoacÃ¡n"},"436":{"ln":"Zacapu, MichoacÃ¡n","sn":"MichoacÃ¡n"},"437":{"ln":"Chimaltitan, Momax, Tepechitlan, Tlaltenango, Totatiche, Villa Guerrero, Jalisco","sn":"Jalisco"},"438":{"ln":"Cerano, Pastor Ortiz, Puruandiro, Villa Morelos, MichoacÃ¡n","sn":"MichoacÃ¡n"},"441":{"ln":"Cadereyta, Ezequiel Montes, Jalpan de Serra, Pinal de Amoles, Quintana Roo","sn":"Quintana Roo"},"442":{"ln":"Bernardo Quintana, Juriquilla, La Cruz, Queretaro, Santa Rosa de Jauregui, Tlacote el Bajo, Quintana Roo","sn":"Quintana Roo"},"443":{"ln":"Morelia, Tarimbaro, MichoacÃ¡n","sn":"MichoacÃ¡n"},"444":{"ln":"San Luis Potosi, San Luis PotosÃ­","sn":"San Luis PotosÃ­"},"445":{"ln":"Moroleon, Guanajuato","sn":"Guanajuato"},"447":{"ln":"Contepec, Maravatio, MichoacÃ¡n","sn":"MichoacÃ¡n"},"448":{"ln":"Amealco, Huimilpan, Pedro Escobedo, Quintana Roo","sn":"Quintana Roo"},"449":{"ln":"Aguascalientes, Jesus Maria, Aguascalientes","sn":"Aguascalientes"},"451":{"ln":"Charo, Indaparapeo, Querendaro, Valle de Juarez, Zinapecuaro, MichoacÃ¡n","sn":"MichoacÃ¡n"},"452":{"ln":"Nuevo San Juan Parangaricutiro, Uruapan, MichoacÃ¡n","sn":"MichoacÃ¡n"},"453":{"ln":"Apatzingan, MichoacÃ¡n","sn":"MichoacÃ¡n"},"454":{"ln":"Angamacutiro, Coeneo de la Libertad, Copandaro, Huaniqueo de Morales, Panindicuaro, Quiroga, Villa Jimenez, MichoacÃ¡n","sn":"MichoacÃ¡n"},"455":{"ln":"Alvaro Obregon, Cuitzeo del Porvenir, Huandacareo, Santa Ana Maya, MichoacÃ¡n","sn":"MichoacÃ¡n"},"456":{"ln":"Valle de Santiago, Guanajuato","sn":"Guanajuato"},"457":{"ln":"Chalchiuites, Huejucar, Huejuquilla el Alto, Mezquitic, Monte Escobedo, Valparaiso, Zacatecas","sn":"Zacatecas"},"458":{"ln":"Ciudad Cuauhtemoc, Felipe Pescador, Luis Moya, Ojo Caliente, Villa de Cos, Zacatecas","sn":"Zacatecas"},"459":{"ln":"Caracuaro, Pedernales, Puruaran, Tacambaro, Tiquicheo, MichoacÃ¡n","sn":"MichoacÃ¡n"},"461":{"ln":"Celaya, Rincon de Tamayo, San Juan de la Vega, Guanajuato","sn":"Guanajuato"},"462":{"ln":"Irapuato, Guanajuato","sn":"Guanajuato"},"463":{"ln":"Jalpa, Tabasco, Zacatecas","sn":"Zacatecas"},"464":{"ln":"Salamanca, Guanajuato","sn":"Guanajuato"},"465":{"ln":"Pabellon de Arteaga, Rincon de Romos, San Francisco de Los Romos, Aguascalientes","sn":"Aguascalientes"},"466":{"ln":"El Sabino, Salvatierra, San Nicolas de Los Agustinos, San Pedro de Los Naranjos, Santiago Maravatio, Tarimoro, Guanajuato","sn":"Guanajuato"},"467":{"ln":"Juchipila, Moyahua, Teul de Gonzalez Ortega, Zacatecas","sn":"Zacatecas"},"468":{"ln":"San Luis de la Paz, Guanajuato","sn":"Guanajuato"},"469":{"ln":"Buenavista de Cortez, Penjamo, Guanajuato","sn":"Guanajuato"},"471":{"ln":"Purepero, Tlazazalca, MichoacÃ¡n","sn":"MichoacÃ¡n"},"472":{"ln":"Silao, Guanajuato","sn":"Guanajuato"},"473":{"ln":"Guanajuato, Guanajuato","sn":"Guanajuato"},"474":{"ln":"Lagos de Moreno, Paso de Cuarenta, Jalisco","sn":"Jalisco"},"475":{"ln":"Bajio de San Jose, Encarnacion de Diaz, Jalisco","sn":"Jalisco"},"476":{"ln":"San Francisco del Rincon, Guanajuato","sn":"Guanajuato"},"477":{"ln":"Leon, Guanajuato","sn":"Guanajuato"},"478":{"ln":"Calera Victor Rosales, Zacatecas","sn":"Zacatecas"},"481":{"ln":"Ciudad Valles, San Luis PotosÃ­","sn":"San Luis PotosÃ­"},"482":{"ln":"Aquismon, Ciudad del Maiz, El Naranjo, Tamasopo, Tambaca, Tancanhuitz, San Luis PotosÃ­","sn":"San Luis PotosÃ­"},"483":{"ln":"Matlapa, San Felipe Orizatlan, Tamazunchale, San Luis PotosÃ­","sn":"San Luis PotosÃ­"},"485":{"ln":"San Ciro de Acosta, Santa Maria del Rio, Tierra Nueva, Villa de Arriaga, Villa de Reyes, San Luis PotosÃ­","sn":"San Luis PotosÃ­"},"486":{"ln":"Cerritos, Charcas, Venado, Villa de Arista, Villa Juarez, San Luis PotosÃ­","sn":"San Luis PotosÃ­"},"487":{"ln":"Cardenas, Rayon, Rio Verde, San Luis PotosÃ­","sn":"San Luis PotosÃ­"},"488":{"ln":"Cedral, Doctor Arroyo, Matehuala, San Luis PotosÃ­","sn":"San Luis PotosÃ­"},"489":{"ln":"Axtla de Terrazas, El Higo, San Vicente Tancuayalab, Tamuin, Tanquian de Escobedo, Xilitla, San Luis PotosÃ­","sn":"San Luis PotosÃ­"},"492":{"ln":"Morelos, Tacoaleche, Trancoso, Zacatecas, Zacatecas","sn":"Zacatecas"},"493":{"ln":"Fresnillo, Zacatecas","sn":"Zacatecas"},"494":{"ln":"Jerez de Garcia Salinas, Zacatecas","sn":"Zacatecas"},"495":{"ln":"Calvillo, Villa Hidalgo, Jalisco","sn":"Jalisco"},"496":{"ln":"Loreto, Ojuelos, Pinos, Salinas de Hidalgo, Villa Gonzalez Ortega, Villa Hidalgo, Zacatecas","sn":"Zacatecas"},"498":{"ln":"Juan Aldama, Nieves, Rio Grande, Sain el Alto, Zacatecas","sn":"Zacatecas"},"499":{"ln":"Colotlan, Villanueva, Zacatecas","sn":"Zacatecas"},"586":{"ln":"Tlalmanalco, MÃ©xico","sn":"MÃ©xico"},"587":{"ln":"Amecameca, MÃ©xico","sn":"MÃ©xico"},"588":{"ln":"Dongu, Santa Maria Magdalena Cahuacan, Transfiguracion, Villa del Carbon, MÃ©xico","sn":"MÃ©xico"},"589":{"ln":"Juchitepec, Ozumba, MÃ©xico","sn":"MÃ©xico"},"591":{"ln":"San Bartolo Cuautlalpan, Santa Maria Cuevas, Tequixquiac, Zumpango, MÃ©xico","sn":"MÃ©xico"},"592":{"ln":"Jaltepec, Nopaltepec, Otumba, MÃ©xico","sn":"MÃ©xico"},"593":{"ln":"Coyotepec, Huehuetoca, Teoloyucan, MÃ©xico","sn":"MÃ©xico"},"594":{"ln":"San Juan Teotihuacan, Tepexpan, Tezoyuca, Xometla, MÃ©xico","sn":"MÃ©xico"},"595":{"ln":"Cuautlalpan, La Purificacion, San Vicente Chicoloapan, Tepetlaoxtoc, Texcoco, MÃ©xico","sn":"MÃ©xico"},"596":{"ln":"Los Reyes Acozac, San Luis Tecuautitlan, Temascalapa, MÃ©xico","sn":"MÃ©xico"},"599":{"ln":"Apaxco, San Francisco Zacacalco, Santa Maria Ajoloapan, Tlapanaloya, MÃ©xico","sn":"MÃ©xico"},"612":{"ln":"La Paz, Todos Santos, Baja California Sur","sn":"Baja California Sur"},"613":{"ln":"Ciudad Constitucion, Loreto, Puerto Adolfo Lopez Mateos, Puerto San Carlos, Villa Insurgentes, Baja California Sur","sn":"Baja California Sur"},"614":{"ln":"Chihuahua, General Trias, Villa Aldama, Chihuahua","sn":"Chihuahua"},"615":{"ln":"Bahia de Tortugas, Guerrero Negro, Mulege, San Ignacio, Santa Rosalia, Baja California Sur","sn":"Baja California Sur"},"616":{"ln":"Col. Vicente Guerrero, Isla de Cedros, San Quintin, Baja California","sn":"Baja California"},"618":{"ln":"Colonia Hidalgo, Durango, Durango","sn":"Durango"},"621":{"ln":"Julimes, Las Varas, Naica, Saucillo, Chihuahua","sn":"Chihuahua"},"622":{"ln":"Guaymas, San Carlos (Nuevo Guaymas), Sonora","sn":"Sonora"},"623":{"ln":"Aconchi, Banamichi, Baviacora, Carbo, Huepac, Ures, Sonora","sn":"Sonora"},"624":{"ln":"Buenavista, Cabo del Sol, Cabo San Lucas, San Jose del Cabo, Baja California Sur","sn":"Baja California Sur"},"625":{"ln":"Ciudad Cuauhtemoc, Colonia Alvaro Obregon, Colonia Anahuac, Chihuahua","sn":"Chihuahua"},"626":{"ln":"Ojinaga, Chihuahua","sn":"Chihuahua"},"627":{"ln":"Parral, Chihuahua","sn":"Chihuahua"},"628":{"ln":"Pueblito Allende, San Francisco del Oro, Santa Barbara, Valle de Allende, Villa Matamoros, Chihuahua","sn":"Chihuahua"},"629":{"ln":"Ceballos, Ciudad Jimenez, Villa Lopez, Chihuahua","sn":"Chihuahua"},"631":{"ln":"Nogales, Sonora","sn":"Sonora"},"632":{"ln":"Imuris, Magdalena, Sonora","sn":"Sonora"},"633":{"ln":"Agua Prieta, Esqueda, Fronteras, Naco, Sonora","sn":"Sonora"},"634":{"ln":"Arizpe, Cumpas, Huachinera, Huasabas, Moctezuma, Nacozari, Sahuaripa, Tepache, Villa Hidalgo, Sonora","sn":"Sonora"},"635":{"ln":"Ciudad Guerrero, Creel, La Junta, San Juanito, Chihuahua","sn":"Chihuahua"},"636":{"ln":"Buenaventura, Colonia Juarez, Colonia Lebaron, Ejido Benito Juarez, Ignacio Zaragoza, Janos, La Ascencion, Nuevo Casas Grandes, Ricardo Flores Magon, Chihuahua","sn":"Chihuahua"},"637":{"ln":"Altar, Caborca, Sonora","sn":"Sonora"},"638":{"ln":"Puerto PeÃ±asco, Sonora","sn":"Sonora"},"639":{"ln":"Ciudad delicias, Lazaro Cardenas, Rosales, Chihuahua","sn":"Chihuahua"},"641":{"ln":"Benjamin Hill, Santa Ana, Sonora","sn":"Sonora"},"642":{"ln":"Navojoa, Pueblo Mayo, Sonora","sn":"Sonora"},"643":{"ln":"Altos de Jecopaco, Buaysiacobe, Colonia Irrigacion (Villa Juarez), Ejido 31 de Octubre, Ejido Francisco Javier Mina, Potam, Pueblo Yaqui, Quetchehueca, San Ignacio Rio Muerto, San Jose de Bacum, Vicam, Sonora","sn":"Sonora"},"644":{"ln":"Bacum, Ciudad Obregon, Ejido Cuauhtemoc, Marte R. Gomez (El Tobarito), Sonora","sn":"Sonora"},"645":{"ln":"Cananea, Sonora","sn":"Sonora"},"646":{"ln":"Ejido Esteban Cantu, Ensenada, La Mision, Maneadero, Baja California","sn":"Baja California"},"647":{"ln":"Alamos, Bacame Nuevo, Bacobampo, Etchojoa, Huatabampo, Yavaros, Sonora","sn":"Sonora"},"648":{"ln":"Boquilla, Ciudad Camargo, Chihuahua","sn":"Chihuahua"},"649":{"ln":"Guachochi, Guadalupe Y Calvo, Las Nieves, San Pablo Balleza, Santa Maria del Oro, Valle de Zaragoza, Villa Ocampo, Durango","sn":"Durango"},"651":{"ln":"Sonoita, Sonora","sn":"Sonora"},"652":{"ln":"Ciudad Madera, Ejido el Largo, Gomez Farias, Nicolas Bravo, Chihuahua","sn":"Chihuahua"},"653":{"ln":"Luis B. Sanchez, San Luis Rio Colorado, Sonora","sn":"Sonora"},"656":{"ln":"Ciudad Juarez, Doctor Porfirio Parra, El Porvenir, General Rodrigo M. de Quevedo, Guadalupe Distrito de Bravos, Praxedis Guerrero, Villa Ahumada, Chihuahua","sn":"Chihuahua"},"658":{"ln":"Benito Juarez, Ciudad Morelos, Guadalupe Victoria, Hermosillo, Queretaro, Saltillo, Baja California","sn":"Baja California"},"659":{"ln":"Bachiniva, El Molino, Matachic, Oscar Soto Maynes, Temosachic, Chihuahua","sn":"Chihuahua"},"661":{"ln":"Primo Tapia, Rosarito, Baja California","sn":"Baja California"},"662":{"ln":"Bahia Kino, Distrito Miguel Aleman, Hermosillo, San Pedro el Saucito, Sonora","sn":"Sonora"},"665":{"ln":"Tecate, Baja California","sn":"Baja California"},"666":{"ln":"Tijuana, Baja California","sn":"Baja California"},"667":{"ln":"Costa Rica, Culiacan, Culiacancito, El Dorado, El Salado (Culiacan), Pueblos Unidos, Quila, Villa Adolfo Lopez Mateos, Sinaloa","sn":"Sinaloa"},"668":{"ln":"Ahome, Alfonso G. Calderon, Campo Numero 35 (Cerillos), Chihuahuita, Emiliano Zapata (Bagojo) I, General Chavez Talamantes, Higuera de Zaragoza, Los Mochis, Poblado No 5, San Miguel Zapotitlan, Topolobampo, Villa Gustavo Diaz Ordaz, Sinaloa","sn":"Sinaloa"},"669":{"ln":"El Roble, Mazatlan, Villa Union, Sinaloa","sn":"Sinaloa"},"671":{"ln":"Cuencame de Ceniceros, Nazas, Paso Nacional, San Juan de Guadalupe, San Luis del Cordero, Viesca, Coahuila","sn":"Coahuila"},"672":{"ln":"Navolato, Villa Angel Flores, Villa Juarez, Sinaloa","sn":"Sinaloa"},"673":{"ln":"Guamuchil, Mocorito, Villa Benito Juarez, Sinaloa","sn":"Sinaloa"},"674":{"ln":"Guanacevi, Santiago Papasquiaro, Tepehuanes, Durango","sn":"Durango"},"675":{"ln":"El Salto, La Ciudad, Nombre de Dios, Suchil, Vicente Guerrero, Villa Union, Durango","sn":"Durango"},"676":{"ln":"Guadalupe Victoria, Ignacio Allende, PeÃ±on Blanco, Durango","sn":"Durango"},"677":{"ln":"Canatlan, Francisco I. Madero, Nuevo Ideal, Rodeo, San Juan del Rio, Durango","sn":"Durango"},"686":{"ln":"La Rumorosa, Mexicali, Michoacan de Ocampo, Nuevo Leon, San Felipe, Sinaloa, Baja California","sn":"Baja California"},"687":{"ln":"Adolfo Ruiz Cortinez, Bachoco Pueblo, Cerro Cabezon, Corerepe, Cubilete, El Burrion, El Huitussi, El Mezquite, Estacion Bamoa, Estacion Naranjo, Gabriel Leyva, Genaro Estrada, Guasave, Juan Jose Rios, La Trinidad, Leon Fonseca (Verdura), Nio, Sinaloa de Leyva, Tamazula, Sinaloa","sn":"Sinaloa"},"694":{"ln":"Agua Caliente de Garate, Agua Verde, Concordia, El Apoderado, Rosario, Sinaloa","sn":"Sinaloa"},"695":{"ln":"Escuinapa, Ojo de Agua Palmilla, Teacapan, Sinaloa","sn":"Sinaloa"},"696":{"ln":"Cosala, Coyotitan, Dimas, La Cruz, San Ignacio, Sinaloa","sn":"Sinaloa"},"697":{"ln":"Angostura, Badiraguato, Caimanero, Colonia Agricola Independencia, Colonia Agricola Mexico, La Reforma, Pericos, Sinaloa","sn":"Sinaloa"},"698":{"ln":"Charay, Choix, El Fuerte, El Jahuara, Mochicahui (Constancia), San Blas, Sinaloa","sn":"Sinaloa"},"711":{"ln":"El Oro, Tlalpujahua, MichoacÃ¡n","sn":"MichoacÃ¡n"},"712":{"ln":"Atlacomulco, Ixtlahuaca, Jiquipilco, Jocotitlan, San Felipe del Progreso, San Pedro de Los BaÃ±os, Santiago Yeche, MÃ©xico","sn":"MÃ©xico"},"713":{"ln":"Santiago Tianguistenco, MÃ©xico","sn":"MÃ©xico"},"714":{"ln":"Chalma, Malinalco, Tenancingo, Villa Guerrero, MÃ©xico","sn":"MÃ©xico"},"715":{"ln":"Angangueo, Jungapeo, Ocampo, Zitacuaro, MichoacÃ¡n","sn":"MichoacÃ¡n"},"716":{"ln":"Almoloya de Alquisiras, Amatepec, Sultepec, Temascaltepec, Texcaltitlan, MÃ©xico","sn":"MÃ©xico"},"717":{"ln":"Atlatlahuaca, San Antonio la Isla, Tenango del Valle, MÃ©xico","sn":"MÃ©xico"},"718":{"ln":"Acambay, Aculco, San Francisco Tepeolulco, Temascalcingo, MÃ©xico","sn":"MÃ©xico"},"719":{"ln":"San Francisco Xonacatlan, Temoaya, MÃ©xico","sn":"MÃ©xico"},"721":{"ln":"Ixtapan de la Sal, MÃ©xico","sn":"MÃ©xico"},"722":{"ln":"Calimaya de Diaz, Mexicaltzingo, San Pablo Autopan, Santa Maria Nativitas, Toluca, MÃ©xico","sn":"MÃ©xico"},"723":{"ln":"Coatepec Harinas, MÃ©xico","sn":"MÃ©xico"},"724":{"ln":"Luvianos, Tejupilco de Hidalgo, MÃ©xico","sn":"MÃ©xico"},"725":{"ln":"Almoloya de Juarez, Santa Maria del Monte, MÃ©xico","sn":"MÃ©xico"},"726":{"ln":"Amanalco de Becerra, Colorines, Valle de Bravo, Villa Victoria, MÃ©xico","sn":"MÃ©xico"},"727":{"ln":"Atenango del Rio, Buenavista de Cuellar, Huitzuco, San Vicente Palapa, Tepecoacuilco de Trujano, Guerrero","sn":"Guerrero"},"728":{"ln":"Lerma, Santa Maria Atarasquillo, MÃ©xico","sn":"MÃ©xico"},"729":{"ln":"Huixquilucan, Magdalena Chichicaspa, Salazar, San Francisco Chimalpa, MÃ©xico","sn":"MÃ©xico"},"731":{"ln":"Amayuca, Tetela del Volcan, Yecapixtla, Zacualpan de Amilpas, Morelos","sn":"Morelos"},"732":{"ln":"Ajuchitlan de Progreso, Arcelia, Cutzamala de Pinzon, Tlapehuala, Guerrero","sn":"Guerrero"},"733":{"ln":"Iguala, Guerrero","sn":"Guerrero"},"734":{"ln":"Jojutla, Tequesquitengo, Zacatepec, Morelos","sn":"Morelos"},"735":{"ln":"Cuautla, Jonacatepec, Morelos","sn":"Morelos"},"736":{"ln":"Apaxtla de Castrejon, Cocula, Teloloapan, Tlacotepec, Guerrero","sn":"Guerrero"},"737":{"ln":"Miacatlan, Ticuman, Tlaltizapan, Xoxocotla, Morelos","sn":"Morelos"},"738":{"ln":"Mixquiahuala, Tepatepec, Hidalgo","sn":"Hidalgo"},"739":{"ln":"Huitzilac, Tepoztlan, Morelos","sn":"Morelos"},"741":{"ln":"Copala, Cuajinicuilapa, Marquelia, Ometepec, San Luis Acatlan, Guerrero","sn":"Guerrero"},"742":{"ln":"Atoyac de Alvarez, Papanoa, San Luis de la Loma, Tecpan de Galeana, Guerrero","sn":"Guerrero"},"743":{"ln":"San Agustin Tlaxiaca, Villa Tezontepec, Zapotlan de Juarez, Zempoala, Hidalgo","sn":"Hidalgo"},"744":{"ln":"Acapulco, Xaltianguis, Guerrero","sn":"Guerrero"},"745":{"ln":"Ayutla de Los Libres, Cruz Grande, El Ocotito, San Marcos, Tierra Colorada, Guerrero","sn":"Guerrero"},"746":{"ln":"Castillo de Teayo, Chicontepec, Estacion San Diego, Metlaltoyuca, Tihuatlan, Venustiano Carranza, Puebla","sn":"Puebla"},"747":{"ln":"Chihualco, Chilpancingo, Mazatlan, Zumpango del Rio, Guerrero","sn":"Guerrero"},"748":{"ln":"Apam, Emiliano Zapata, Nanacamilpa, Tlaxcala","sn":"Tlaxcala"},"749":{"ln":"Calpulalpan, Tlaxcala","sn":"Tlaxcala"},"751":{"ln":"Amacuzac, Coatlan del Rio, Puente de Ixtla, Tehuixtla, Tilzapotla, Morelos","sn":"Morelos"},"752":{"ln":"Atlatlahucan, Oacalco, Oaxtepec, Tlayacapan, Yautepec, Morelos","sn":"Morelos"},"753":{"ln":"Arteaga, Ciudad Lazaro Cardenas, La Mira, Las Guacamayas, Playa Azul, MichoacÃ¡n","sn":"MichoacÃ¡n"},"754":{"ln":"Atliaca, Mochitlan, Tixtla, Guerrero","sn":"Guerrero"},"755":{"ln":"Ixtapa, Zihuatanejo, Guerrero","sn":"Guerrero"},"756":{"ln":"Chilapa, Olinala, Guerrero","sn":"Guerrero"},"757":{"ln":"Huamuxtitlan, Tlapa de Comonfort, Guerrero","sn":"Guerrero"},"758":{"ln":"Petatlan, San Jeronimito, Guerrero","sn":"Guerrero"},"759":{"ln":"Ixmiquilpan, Tasquillo, Zimapan, Hidalgo","sn":"Hidalgo"},"761":{"ln":"Huichapan, Jilotepec, Tecozautla, Hidalgo","sn":"Hidalgo"},"762":{"ln":"Taxco, Guerrero","sn":"Guerrero"},"763":{"ln":"Tezontepec de Aldama, Tlahuelilpan, Hidalgo","sn":"Hidalgo"},"764":{"ln":"Necaxa, Villa Avila Camacho, Xicotepec de Juarez, Puebla","sn":"Puebla"},"765":{"ln":"Alamo Temapache, Alazan Potrero del Llano, Veracruz","sn":"Veracruz"},"766":{"ln":"Gutierrez Zamora, Tecolutla, Veracruz","sn":"Veracruz"},"767":{"ln":"Ciudad Altamirano, Paso de Arena, Zirandaro, Guerrero","sn":"Guerrero"},"768":{"ln":"Naranjos, Tamalin, Tamiahua, Veracruz","sn":"Veracruz"},"769":{"ln":"Axochiapan, Tenextepango, Tepalcingo, Morelos","sn":"Morelos"},"771":{"ln":"Pachuca, Real del Monte, Hidalgo","sn":"Hidalgo"},"772":{"ln":"Actopan, Hidalgo","sn":"Hidalgo"},"773":{"ln":"Cruz Azul (San Miguel Vindho), Parque Ind. Tepeji del Rio, Tepeji del Rio, Tula, Hidalgo","sn":"Hidalgo"},"774":{"ln":"Atotonilco el Grande, Calnali, Huayacocotla, Molango, Tianguistengo, Tlanchinol, Zacualtipan, Hidalgo","sn":"Hidalgo"},"775":{"ln":"Tulancingo, Hidalgo","sn":"Hidalgo"},"776":{"ln":"Acaxochitlan, Ahuazotepec, Huauchinango, Puebla","sn":"Puebla"},"777":{"ln":"Cuernavaca, Santa Fe, Vigilante (Emiliano Zapata), Xochitepec, Morelos","sn":"Morelos"},"778":{"ln":"Ajacuba, Atotonilco de Tula, Tlaxcoapan, Hidalgo","sn":"Hidalgo"},"779":{"ln":"Tizayuca, Hidalgo","sn":"Hidalgo"},"781":{"ln":"Coyuca de Benitez, San Jeronimo de Juarez, Guerrero","sn":"Guerrero"},"782":{"ln":"Poza Rica, Veracruz","sn":"Veracruz"},"783":{"ln":"Tuxpan, Veracruz","sn":"Veracruz"},"784":{"ln":"Agua Dulce Papantla, Cazones de Herrera, Coyutla, Entabladero, Papantla, Veracruz","sn":"Veracruz"},"785":{"ln":"Cerro Azul, Citlaltepec, Tepetzintla, Veracruz","sn":"Veracruz"},"786":{"ln":"Ciudad Hidalgo, Tuxpan, MichoacÃ¡n","sn":"MichoacÃ¡n"},"789":{"ln":"Huejutla de Reyes, Platon Sanchez, Tantoyuca, Tempoal, Veracruz","sn":"Veracruz"},"791":{"ln":"Ciudad Sahagun, Hidalgo","sn":"Hidalgo"},"797":{"ln":"Chignahuapan, Tetela de Ocampo, Zacatlan, Puebla","sn":"Puebla"},"821":{"ln":"Hualahuises, Linares, Nuevo LeÃ³n","sn":"Nuevo LeÃ³n"},"823":{"ln":"China, General Bravo, Los Herreras, Los Ramones, Nuevo LeÃ³n","sn":"Nuevo LeÃ³n"},"824":{"ln":"Sabinas Hidalgo, Nuevo LeÃ³n","sn":"Nuevo LeÃ³n"},"825":{"ln":"Cienega de Flores, Doctor Gonzalez, General Zuazua, Marin, Pesqueria, Nuevo LeÃ³n","sn":"Nuevo LeÃ³n"},"826":{"ln":"Allende, Galeana, General Teran, Montemorelos, Nuevo LeÃ³n","sn":"Nuevo LeÃ³n"},"827":{"ln":"Santiago (El Cercado), Nuevo LeÃ³n","sn":"Nuevo LeÃ³n"},"828":{"ln":"Cadereyta, Nuevo LeÃ³n","sn":"Nuevo LeÃ³n"},"829":{"ln":"Bustamante, Hidalgo, Mina, Villa Aldama, Nuevo LeÃ³n","sn":"Nuevo LeÃ³n"},"831":{"ln":"Ciudad Mante, Los Aztecas, Tamaulipas","sn":"Tamaulipas"},"832":{"ln":"Antiguo Morelos, Jaumave, Llera de Canales, Ocampo, Tula, Xicotencatl, Tamaulipas","sn":"Tamaulipas"},"833":{"ln":"Tampico, Tamaulipas","sn":"Tamaulipas"},"834":{"ln":"Ciudad Victoria, Tamaulipas","sn":"Tamaulipas"},"835":{"ln":"Abasolo, El Barretal, Estacion Santa Engracia, Hidalgo, Nuevo Padilla, Santander de Jimenez, Soto la Marina, Villagran, Tamaulipas","sn":"Tamaulipas"},"836":{"ln":"Estacion Cuauhtemoc, Gonzalez, Manuel, Villa Aldama, Tamaulipas","sn":"Tamaulipas"},"841":{"ln":"Francisco Gonzalez Villarreal, San Fernando, Tamaulipas","sn":"Tamaulipas"},"842":{"ln":"Concepcion del Oro, General Cepeda, Parras de la Fuente, Coahuila","sn":"Coahuila"},"844":{"ln":"Saltillo, Coahuila","sn":"Coahuila"},"845":{"ln":"Ebano, Ponciano Arriaga, San Luis PotosÃ­","sn":"San Luis PotosÃ­"},"846":{"ln":"Ozuluama, Panuco, Tamos Perseverancia, Villa Cacalilao, Veracruz","sn":"Veracruz"},"861":{"ln":"Nueva Rosita, Sabinas, Coahuila","sn":"Coahuila"},"862":{"ln":"Allende, Morelos, Nava, Villa Union, Zaragoza, Coahuila","sn":"Coahuila"},"864":{"ln":"Las Esperanzas, Minas de Barroteran, Muzquiz, Palau, Coahuila","sn":"Coahuila"},"866":{"ln":"CastaÃ±os, Monclova, Coahuila","sn":"Coahuila"},"867":{"ln":"Colombia, Nuevo Laredo, Tamaulipas","sn":"Tamaulipas"},"868":{"ln":"Anahuac, Control, Empalme, Matamoros, Tamaulipas","sn":"Tamaulipas"},"869":{"ln":"Cuatro Cienegas, San Buenaventura, Coahuila","sn":"Coahuila"},"871":{"ln":"El Coyote, La Goma, La Partida, Matamoros, Torreon, Villa Juarez, Durango","sn":"Durango"},"872":{"ln":"Bermejillo, Concordia, Francisco I. Madero, Laguna del Rey, Mapimi, San Pedro de Las Colonias, Tlahualilo de Zaragoza, Durango","sn":"Durango"},"873":{"ln":"Candela, Ciudad Anahuac, Lampazos, Nuevo LeÃ³n","sn":"Nuevo LeÃ³n"},"877":{"ln":"Ciudad AcuÃ±a, Coahuila","sn":"Coahuila"},"878":{"ln":"Piedras Negras, Coahuila","sn":"Coahuila"},"891":{"ln":"Ciudad Camargo, Ciudad Gustavo Diaz Ordaz, Los Comales, Valadeces, Tamaulipas","sn":"Tamaulipas"},"892":{"ln":"Agualeguas, Cerralvo, General TreviÃ±o, Los Aldamas, Melchor Ocampo, Villa de Paras, Nuevo LeÃ³n","sn":"Nuevo LeÃ³n"},"894":{"ln":"Santa Apolonia, Valle Hermoso, Tamaulipas","sn":"Tamaulipas"},"897":{"ln":"Ciudad Mier, Ciudad Miguel Aleman, Nueva Ciudad Guerrero, Tamaulipas","sn":"Tamaulipas"},"899":{"ln":"Nuevo Progreso, Reynosa, Rio Bravo, Tamaulipas","sn":"Tamaulipas"},"913":{"ln":"Frontera, Jonuta, Palizada, Vicente Guerrero, Tabasco","sn":"Tabasco"},"914":{"ln":"Cunduacan, Jalpa de Mendez, Nacajuca, Once de Febrero, Tabasco","sn":"Tabasco"},"916":{"ln":"Catazaja, Palenque, Salto del Agua, Chiapas","sn":"Chiapas"},"917":{"ln":"Estacion Chontalpa, Huimanguillo, Reforma, Chiapas","sn":"Chiapas"},"918":{"ln":"Acacoyagua, Acapetahua, Escuintla, Mapastepec, Pijijiapan, Pueblo Nuevo Comaltitlan, Chiapas","sn":"Chiapas"},"919":{"ln":"Altamirano, Bochil, Chilon, Ococingo, Oxchuc, Pantelho, Petalcingo, Pueblo Nuevo Solistahuacan, Simojovel, Tapilula, Yajalon, Chiapas","sn":"Chiapas"},"921":{"ln":"Coatzacoalcos, Ixhuatlan del Sureste, Veracruz","sn":"Veracruz"},"922":{"ln":"Chinameca, Cosoleacaque, El Naranjito, Jaltipan, Minatitlan, Veracruz","sn":"Veracruz"},"923":{"ln":"Agua Dulce, Campo Cuichapa, La Venta, Las Choapas, Pueblo Sanchez Magallanes, Tabasco","sn":"Tabasco"},"924":{"ln":"Acayucan, Jesus Carranza, Juanita, San Juan Evengelista, Sayula de Aleman, Texistepec, Veracruz","sn":"Veracruz"},"932":{"ln":"Jalapa, Juarez, Pichucalco, Tacotalpa, Teapa, Tabasco","sn":"Tabasco"},"933":{"ln":"Comalcalco, Paraiso, Tecolutilla, Tabasco","sn":"Tabasco"},"934":{"ln":"Balancan, El Triunfo, Emiliano Zapata, Tenosique, Tabasco","sn":"Tabasco"},"936":{"ln":"Ciudad Pemex, Macuspana, Villa Benito Juarez, Tabasco","sn":"Tabasco"},"937":{"ln":"Cardenas, Tabasco","sn":"Tabasco"},"938":{"ln":"Ciudad del Carmen, Campeche","sn":"Campeche"},"951":{"ln":"Ejutla, Etla, Ixtlan de Juarez, Miahuatlan, Mitla, Nochistlan, Oaxaca, Ocotlan de Morelos, San Agustin Etla, San Dionisio Ocotepec, San Jeronimo Tlacochahuaya, San Pablo Huitzo, Santa Cruz Papalutla, Santa Maria Ayoquesco de Aldama, Soledad Etla, Tamazulapan, Teotitlan del Valle, Tlacolula, Zaachila, Zimatlan de Alvarez, Oaxaca","sn":"Oaxaca"},"953":{"ln":"Acatlan de Osorio, Huajuapan de Leon, Putla de Guerrero, Santiago Juxtlahuaca, Santo Domingo Tonala, Silacayoapan, Tlaxiaco, Oaxaca","sn":"Oaxaca"},"954":{"ln":"Pinotepa de Don Luis I, Pinotepa Nacional, Puerto Escondido, Rio Grande, San Juan Cacahuatepec, San Pedro Tututepec, Santa Catarina Juquila, Santiago Jamiltepec, Oaxaca","sn":"Oaxaca"},"958":{"ln":"Bahia de Huatulco, Bahia de Tangolunda, San Pedro Pochutla, Santa Maria Huatulco, Oaxaca","sn":"Oaxaca"},"961":{"ln":"Berriozabal, San Fernando, Suchiapa, Tuxtla Gutierrez, Veinte de Noviembre, Villa de Acala, Chiapas","sn":"Chiapas"},"962":{"ln":"Cacahoatan, Ciudad Hidalgo, Motozintla, Puerto Madero, Tapachula, Tuxtla Chico, Union Juarez, Chiapas","sn":"Chiapas"},"963":{"ln":"Chicomuselo, Comitan, Frontera Comalapa, La Trinitaria, Las Margaritas, Chiapas","sn":"Chiapas"},"964":{"ln":"Huehuetan, Huixtla, Mazatan, Chiapas","sn":"Chiapas"},"965":{"ln":"Cristobal Obregon, El Parral, Jesus Maria Garza, Revolucion Mexicana, San Pedro Buenavista, Villa Corzo, Villa Flores, Chiapas","sn":"Chiapas"},"966":{"ln":"Arriaga, Tonala, Chiapas","sn":"Chiapas"},"967":{"ln":"San Cristobal de Las Casas, Chiapas","sn":"Chiapas"},"968":{"ln":"Cintalapa, Copainala, Jiquipilas, Ocozocuautla, Raudales de Malpaso, Tecpatan, Chiapas","sn":"Chiapas"},"969":{"ln":"Flamboyanes, Yucalpeten, YucatÃ¡n","sn":"YucatÃ¡n"},"971":{"ln":"Espinal, Ixtepec, Juchitan, Salina Cruz, Tehuantepec, Union Hidalgo, Oaxaca","sn":"Oaxaca"},"972":{"ln":"Barrio de la Soledad, Lagunas, Matias Romero, Oaxaca","sn":"Oaxaca"},"981":{"ln":"Campeche, Campeche","sn":"Campeche"},"982":{"ln":"Candelaria, Champoton, Escarcega, Sabancuy, Seyba Playa, Campeche","sn":"Campeche"},"983":{"ln":"Bacalar, Chetumal, Felipe Carrillo Puerto, Quintana Roo","sn":"Quintana Roo"},"984":{"ln":"Chemuyil, Holbox, Kantunilkin, Playa del Carmen, Puerto Aventuras, Tulum, Xcaret, Quintana Roo","sn":"Quintana Roo"},"985":{"ln":"Chemax, Piste, Valladolid, YucatÃ¡n","sn":"YucatÃ¡n"},"986":{"ln":"Colonia Yucatan, Espita, Panaba, Tizimin, YucatÃ¡n","sn":"YucatÃ¡n"},"987":{"ln":"Cozumel, Quintana Roo","sn":"Quintana Roo"},"988":{"ln":"Acanceh, Celestun, Chochola, Hoctun, Hunucma, Izamal, Seye, Sotuta, Tecoh, Uman, YucatÃ¡n","sn":"YucatÃ¡n"},"991":{"ln":"Baca, Buctzotz, Cacalchen, Cansahcab, Dzidzantum, Dzilam Gonzalez, Motul, Telchac Puerto, Temax, Tixcocob, YucatÃ¡n","sn":"YucatÃ¡n"},"992":{"ln":"Jaltenango de la Paz, Nueva Concordia, Soyatitan, Teopisca, Venustiano Carranza, Villa Las Rosas, Chiapas","sn":"Chiapas"},"993":{"ln":"Macultepec, Playas del Rosario, Tamulte de la Sabana, Villahermosa, Tabasco","sn":"Tabasco"},"994":{"ln":"Chahuites, Paredon, San Francisco Ixhuatan, San Pedro Tapanatepec, Santiago Niltepec, Santo Domingo Ingenio, Santo Domingo Zanatepec, Tres Picos, Chiapas","sn":"Chiapas"},"995":{"ln":"Magdalena Tequisistlan, Santa Maria Jalapa del Marquez, Oaxaca","sn":"Oaxaca"},"996":{"ln":"Becal, Calkini, Dzitbalche, Hecelchacan, Hopelchen, Pomuch, Tenabo, Campeche","sn":"Campeche"},"997":{"ln":"Akil, Dziuche, Halacho, Jose Maria Morelos, Maxcanu, Muna, Oxkutzcab, Peto, Tekax, Tekit, Ticul, Tzucacab, YucatÃ¡n","sn":"YucatÃ¡n"},"998":{"ln":"Cancun, Isla Mujeres, Puerto Morelos, Quintana Roo","sn":"Quintana Roo"},"999":{"ln":"Conkal, Merida, YucatÃ¡n","sn":"YucatÃ¡n"}};
ilib.data.area_BE = {"2":{"ln":"Brussels (Bruxelles)","sn":"Brussels"},"3":{"ln":"Antwerp (Antwerpen, Anvers), St Niklaas","sn":"Antwerp"},"10":{"ln":"Wavre","sn":"Wavre"},"11":{"ln":"Hasselt","sn":"Hasselt"},"12":{"ln":"Tongeren","sn":"Tongeren"},"13":{"ln":"Diest","sn":"Diest"},"14":{"ln":"Herentals, Turnhout","sn":"Herentals"},"15":{"ln":"Mechelen (Malines)","sn":"Mechelen"},"16":{"ln":"Leuven (Louvain), Tienen","sn":"Leuven"},"19":{"ln":"Waremme (Borgworm)","sn":"Waremme"},"41":{"ln":"Liege (Luik), Fourons","sn":"Liege"},"50":{"ln":"Brugge (Bruges), Zeebrugge","sn":"Brugge"},"51":{"ln":"Roeselare (Roulers)","sn":"Roeselare"},"52":{"ln":"Dendermonde (Termonde)","sn":"Dendermonde"},"53":{"ln":"Aalst (Alost)","sn":"Aalst"},"54":{"ln":"Ninove","sn":"Ninove"},"55":{"ln":"Ronse-Renaix","sn":"Ronse-Renaix"},"56":{"ln":"Kortrijk (Courtai), Comines-Warneton","sn":"Kortrijk"},"57":{"ln":"Ieper (Ypres)","sn":"Ieper"},"58":{"ln":"Veurne (Furnes)","sn":"Veurne"},"59":{"ln":"Oostende (Ostende)","sn":"Oostende"},"60":{"ln":"Chimay","sn":"Chimay"},"61":{"ln":"Bastogne, Libramont-Chevigny","sn":"Bastogne"},"63":{"ln":"Arlon (Aarlen)","sn":"Arlon"},"64":{"ln":"La Louviere","sn":"La Louviere"},"65":{"ln":"Mons (Bergen)","sn":"Mons"},"67":{"ln":"Nivelles (Nijvel)","sn":"Nivelles"},"68":{"ln":"Ath (Aat)","sn":"Ath"},"69":{"ln":"Tournai (Doornik)","sn":"Tournai"},"71":{"ln":"Charleroi","sn":"Charleroi"},"81":{"ln":"Namur (Namen)","sn":"Namur"},"82":{"ln":"Dinant","sn":"Dinant"},"83":{"ln":"Ciney","sn":"Ciney"},"84":{"ln":"Jemelle, Marche-en-Famenne","sn":"Jemelle"},"85":{"ln":"Huy","sn":"Huy"},"86":{"ln":"Durbuy","sn":"Durbuy"},"87":{"ln":"Verviers","sn":"Verviers"},"89":{"ln":"Genk","sn":"Genk"},"91":{"ln":"Gent (Ghent, Gand)","sn":"Gent"},"92":{"ln":"Gent (Ghent, Gand)","sn":"Gent"},"93":{"ln":"Gent (Ghent, Gand)","sn":"Gent"},"94":{"ln":"Gent (Ghent, Gand)","sn":"Gent"},"95":{"ln":"Gent (Ghent, Gand)","sn":"Gent"},"96":{"ln":"Gent (Ghent, Gand)","sn":"Gent"},"97":{"ln":"Gent (Ghent, Gand)","sn":"Gent"},"98":{"ln":"Gent (Ghent, Gand)","sn":"Gent"},"99":{"ln":"Gent (Ghent, Gand)","sn":"Gent"},"801":{"ln":"Stavelot","sn":"Stavelot"},"802":{"ln":"Stavelot","sn":"Stavelot"},"803":{"ln":"Stavelot","sn":"Stavelot"},"804":{"ln":"Stavelot","sn":"Stavelot"},"805":{"ln":"Stavelot","sn":"Stavelot"},"806":{"ln":"Stavelot","sn":"Stavelot"},"807":{"ln":"Stavelot","sn":"Stavelot"},"808":{"ln":"Stavelot","sn":"Stavelot"},"809":{"ln":"Stavelot","sn":"Stavelot"}};
ilib.data.area_IT = {"2":{"sn":"Milan","ln":"Milan, Rho, Saronno, Varese, Como"},"6":{"sn":"Rome","ln":"Rome, Vatican City"},"10":{"sn":"Genoa","ln":"Genoa, Moncalieri"},"11":{"sn":"Turin","ln":"Turin"},"15":{"sn":"Biella","ln":"Biella"},"19":{"sn":"Savona","ln":"Savona"},"30":{"sn":"Brescia","ln":"Brescia, Franciacorta, Valle Trompia"},"31":{"sn":"Como","ln":"Como"},"35":{"sn":"Bergamo","ln":"Bergamo"},"39":{"sn":"Monza","ln":"Monza"},"40":{"sn":"Trieste","ln":"Trieste"},"41":{"sn":"Venice","ln":"Venice"},"45":{"sn":"Verona","ln":"Verona"},"49":{"sn":"Padua","ln":"Padua"},"50":{"sn":"Pisa","ln":"Pisa"},"51":{"sn":"Bologna","ln":"Bologna"},"55":{"sn":"Florence","ln":"Florence, Sesto Fiorentino"},"59":{"sn":"MÃ³dena","ln":"MÃ³dena, Carpi"},"70":{"sn":"Cagliari","ln":"Cagliari"},"71":{"sn":"Ancona","ln":"Ancona"},"75":{"sn":"Perugia","ln":"Perugia"},"79":{"sn":"Sassari","ln":"Sassari, Alghero"},"80":{"sn":"Bari","ln":"Bari, Altamura, Bisceglie, Bitonto, Corato, Molfetta"},"81":{"sn":"Naples","ln":"Naples, Capri, Aversa, Castellamare di Stabia, Nocera Inferiore, Pompei, Pozzuoli, Sorrento, Torre Annunziata, Torre dei Greco"},"85":{"sn":"Pescara","ln":"Pescara"},"89":{"sn":"Salerno","ln":"Salerno, Cava dei Tirreni"},"90":{"sn":"Messina","ln":"Messina, Barcellona Pozzo Digotto"},"91":{"sn":"Palermo","ln":"Palermo"},"95":{"sn":"Catania","ln":"Catania, Acireale, Adrano, Lentini, Paterno"},"99":{"sn":"Taranto","ln":"Taranto"},"121":{"sn":"Pinerolo","ln":"Pinerolo"},"122":{"sn":"Susa","ln":"Susa"},"123":{"sn":"Lanzo Torinese","ln":"Lanzo Torinese"},"124":{"sn":"Rivarolo Canavese","ln":"Rivarolo Canavese"},"125":{"sn":"Ivrea","ln":"Ivrea"},"131":{"sn":"AlessandrÃ­a","ln":"AlessandrÃ­a"},"141":{"sn":"Asti","ln":"Asti"},"142":{"sn":"Casale Monferrato","ln":"Casale Monferrato"},"143":{"sn":"Novi Ligure","ln":"Novi Ligure"},"144":{"sn":"Acqui Terme","ln":"Acqui Terme"},"161":{"sn":"Vercelli","ln":"Vercelli"},"163":{"sn":"Borgosesia","ln":"Borgosesia"},"165":{"sn":"Courmayeur","ln":"Courmayeur, Aosta Valley"},"166":{"sn":"Saint Vincent","ln":"Saint Vincent, Cervinia, Aosta Valley"},"171":{"sn":"Cuneo","ln":"Cuneo"},"172":{"sn":"Savigliano","ln":"Savigliano"},"173":{"sn":"Alba","ln":"Alba"},"174":{"sn":"MondovÃ¬","ln":"MondovÃ¬"},"175":{"sn":"Saluzzo","ln":"Saluzzo"},"182":{"sn":"Albenga","ln":"Albenga"},"183":{"sn":"Imperia","ln":"Imperia"},"184":{"sn":"S. Remo","ln":"San Remo"},"185":{"sn":"Portofino","ln":"Portofino, Genoa, Rapallo"},"187":{"sn":"La Spezia","ln":"La Spezia"},"321":{"sn":"Novara","ln":"Novara"},"322":{"sn":"Arona","ln":"Arona, Novara Borgomanero"},"323":{"sn":"Baveno","ln":"Baveno"},"324":{"sn":"Domodossola","ln":"Domodossola, Verbano-Cusio Ossola"},"331":{"sn":"Busto Arsizio","ln":"Busto Arsizio, Gallarate, Varese"},"332":{"sn":"Varese","ln":"Varese"},"341":{"sn":"Lecco","ln":"Lecco"},"342":{"sn":"Sondrio","ln":"Sondrio"},"343":{"sn":"Chiavenna","ln":"Chiavenna, Sondrio"},"344":{"sn":"Menaggio","ln":"Menaggio, Como"},"345":{"sn":"S. Pellegrino Terme","ln":"San Pellegrino Terme"},"346":{"sn":"Clusone","ln":"Clusone, Bergamo"},"362":{"sn":"Seregno","ln":"Seregno, Monza, Cremona"},"363":{"sn":"Treviglio","ln":"Treviglio, Bergamo, Cremona"},"364":{"sn":"Breno","ln":"Breno, Valle Camonica, Brescia"},"365":{"sn":"Brescia","ln":"Brescia, Lake Garda, Valle Sabbia, SalÃ²"},"371":{"sn":"Lodi","ln":"Lodi"},"372":{"sn":"Cremona","ln":"Cremona"},"373":{"sn":"Crema","ln":"Crema"},"374":{"sn":"Soresina","ln":"Soresina"},"375":{"sn":"Casalmaggiore","ln":"Casalmaggiore"},"376":{"sn":"Mantova","ln":"Mantova"},"377":{"sn":"Codogno","ln":"Codogno"},"381":{"sn":"Vigevano","ln":"Vigevano"},"382":{"sn":"Pavia","ln":"Pavia"},"383":{"sn":"Voghera","ln":"Voghera"},"384":{"sn":"Mortara","ln":"Mortara"},"385":{"sn":"Stradella","ln":"Stradella"},"386":{"sn":"Ostiglia","ln":"Ostiglia"},"421":{"sn":"S. DonÃ  di Piave","ln":"San DonÃ  di Piave, Venice"},"422":{"sn":"Treviso","ln":"Treviso"},"423":{"sn":"Montebelluna","ln":"Montebelluna"},"424":{"sn":"Bassano del Grappa","ln":"Bassano del Grappa, Vicenza"},"425":{"sn":"Rovigo","ln":"Rovigo"},"426":{"sn":"Adria","ln":"Adria"},"427":{"sn":"Spilimbergo","ln":"Spilimbergo"},"428":{"sn":"Tarvisio","ln":"Tarvisio"},"429":{"sn":"Este","ln":"Este"},"431":{"sn":"Cervinagno del Friuli","ln":"Cervinagno del Friuli"},"432":{"sn":"Udine","ln":"Udine"},"433":{"sn":"Tolmezzo","ln":"Tolmezzo"},"434":{"sn":"Pordenone","ln":"Pordenone"},"435":{"sn":"Pieve di Cadore","ln":"Pieve di Cadore"},"436":{"sn":"Cortina d'Ampezzo","ln":"Cortina d'Ampezzo"},"437":{"sn":"Belluno","ln":"Belluno"},"438":{"sn":"Conegliano","ln":"Conegliano"},"439":{"sn":"Feltre","ln":"Feltre"},"442":{"sn":"Legnano","ln":"Legnano"},"444":{"sn":"Vicenza","ln":"Vicenza"},"445":{"sn":"Schio","ln":"Schio"},"461":{"sn":"Trento","ln":"Trento"},"462":{"sn":"Cavalese","ln":"Cavalese"},"463":{"sn":"Cles","ln":"Cles"},"464":{"sn":"Rovereto","ln":"Rovereto"},"465":{"sn":"Madonna de Campiglio","ln":"Madonna de Campiglio, Tione di Trento"},"471":{"sn":"Bolzano","ln":"Bolzano/Bozen"},"472":{"sn":"Bressanone","ln":"Bressanone"},"473":{"sn":"Merano","ln":"Merano"},"474":{"sn":"Brunico","ln":"Brunico"},"481":{"sn":"Gorizia","ln":"Gorizia"},"521":{"sn":"Parma","ln":"Parma"},"522":{"sn":"Reggio Emilia","ln":"Reggio Emilia"},"523":{"sn":"Piacenza","ln":"Piacenza"},"524":{"sn":"Fidenza","ln":"Fidenza"},"525":{"sn":"Fornovo di Taro","ln":"Fornovo di Taro"},"532":{"sn":"Ferrara","ln":"Ferrara"},"533":{"sn":"Comacchio","ln":"Comacchio, Migliarino"},"534":{"sn":"Porretta Terme","ln":"Porretta Terme"},"535":{"sn":"Mirandola","ln":"Mirandola"},"536":{"sn":"Pavullo Nel Frignano","ln":"Pavullo Nel Frignano, Sassuolo"},"541":{"sn":"RÃ­mini","ln":"RÃ­mini"},"542":{"sn":"Imola","ln":"Imola"},"543":{"sn":"ForlÃ¬","ln":"ForlÃ¬, ForlÃ¬-Cesena"},"544":{"sn":"Ravenna","ln":"Ravenna"},"545":{"sn":"Lugo","ln":"Lugo, Lungro"},"546":{"sn":"Faenza","ln":"Faenza"},"547":{"sn":"Cesena","ln":"Cesena"},"549":{"sn":"S. Marino","ln":"Republic of San Marino"},"564":{"sn":"Grosseto","ln":"Grosseto"},"565":{"sn":"Livorno","ln":"Livorno, Piombino"},"566":{"sn":"Follonica","ln":"Follonica"},"571":{"sn":"Empoli","ln":"Empoli"},"572":{"sn":"Montecatini Terme","ln":"Montecatini Terme"},"573":{"sn":"Pistoia","ln":"Pistoia"},"574":{"sn":"Prato","ln":"Prato"},"575":{"sn":"Arezzo","ln":"Arezzo"},"577":{"sn":"Siena","ln":"Siena"},"578":{"sn":"Chianciano Terme","ln":"Chianciano Terme"},"583":{"sn":"Lucca","ln":"Lucca"},"584":{"sn":"Viareggio","ln":"Viareggio"},"585":{"sn":"Carrara","ln":"Carrara, Massa"},"586":{"sn":"Livorno","ln":"Livorno"},"587":{"sn":"Pontedera","ln":"Pontedera"},"588":{"sn":"Volterra","ln":"Volterra"},"721":{"sn":"Pesaro","ln":"Pesaro"},"722":{"sn":"Urbino","ln":"Urbino"},"731":{"sn":"Jesi","ln":"Jesi, Ancona"},"732":{"sn":"Fabriano","ln":"Fabriano, Ancona"},"733":{"sn":"Macerata","ln":"Macerata"},"734":{"sn":"Fermo","ln":"Fermo"},"735":{"sn":"S. Benedetto","ln":"San Benedetto del Tronto"},"736":{"sn":"Ascoli Piceno","ln":"Ascoli Piceno"},"737":{"sn":"Camerino","ln":"Camerino, Macerata"},"742":{"sn":"Foligno","ln":"Foligno"},"743":{"sn":"Spoleto","ln":"Spoleto"},"744":{"sn":"Terni","ln":"Terni"},"746":{"sn":"Rieti","ln":"Rieti"},"761":{"sn":"Viterbo","ln":"Viterbo"},"763":{"sn":"Orvieto","ln":"Orvieto"},"765":{"sn":"Poggio Mirteto","ln":"Poggio Mirteto, Poggio San Lorenzo"},"766":{"sn":"Civitavecchia","ln":"Civitavecchia"},"771":{"sn":"Formia","ln":"Formia"},"773":{"sn":"Latina","ln":"Latina"},"774":{"sn":"TÃ­voli","ln":"TÃ­voli"},"775":{"sn":"Frosinone","ln":"Frosinone"},"776":{"sn":"Cassino","ln":"Cassino"},"781":{"sn":"Iglesias","ln":"Iglesias"},"782":{"sn":"Lanusei","ln":"Lanusei"},"783":{"sn":"Oristano","ln":"Oristano"},"784":{"sn":"Nuoro","ln":"Nuoro"},"785":{"sn":"Macomer","ln":"Macomer"},"789":{"sn":"Olbia","ln":"Olbia, Sassari, Costa Smeralda"},"823":{"sn":"Caserta","ln":"Caserta"},"824":{"sn":"Benevento","ln":"Benevento"},"825":{"sn":"Avellino","ln":"Avellino"},"827":{"sn":"S. Angelo","ln":"Sant'Angelo del Lombardi"},"828":{"sn":"Battipaglia","ln":"Battipaglia"},"831":{"sn":"Brindisi","ln":"Brindisi"},"832":{"sn":"Lecce","ln":"Lecce"},"833":{"sn":"Gallipoli","ln":"Gallipoli"},"835":{"sn":"Matera","ln":"Matera"},"836":{"sn":"Maglie","ln":"Maglie"},"861":{"sn":"Teramo","ln":"Teramo"},"862":{"sn":"L'Aquila","ln":"L'Aquila"},"863":{"sn":"Avezzano","ln":"Avezzano"},"864":{"sn":"Sulmona","ln":"Sulmona"},"865":{"sn":"Isernia","ln":"Isernia"},"871":{"sn":"Chieti","ln":"Chieti"},"872":{"sn":"Lanciano","ln":"Lanciano"},"873":{"sn":"Vasto","ln":"Vasto"},"874":{"sn":"Campobasso","ln":"Campobasso, Ilsi"},"875":{"sn":"Termoli","ln":"Termoli"},"881":{"sn":"Foggia","ln":"Foggia"},"882":{"sn":"S. Severo","ln":"San Severo, Foggia Apricena, San Giovanni Rotondo, Tremiti isles"},"883":{"sn":"Andria","ln":"Andria, Barletta, Trani"},"884":{"sn":"Manfredonia","ln":"Manfredonia, Foggia, Rodi Garganico, Vieste"},"885":{"sn":"Cerignola","ln":"Cerignola"},"921":{"sn":"Palermo","ln":"Palermo, CefalÃ¹"},"922":{"sn":"Agrigento","ln":"Agrigento, Licata"},"923":{"sn":"Trapani","ln":"Trapani, Marsala, Mazara del Vallo, Pantelleria"},"924":{"sn":"Alcamo","ln":"Alcamo"},"925":{"sn":"Sciacca","ln":"Sciacca"},"931":{"sn":"Siracusa","ln":"Siracusa, Augusta"},"932":{"sn":"Vittoria","ln":"Vittoria, Ragusa"},"933":{"sn":"Caltagirone","ln":"Caltagirone, Gela"},"934":{"sn":"Caltanissetta","ln":"Caltanissetta"},"935":{"sn":"Enna","ln":"Enna"},"941":{"sn":"Patti","ln":"Patti"},"942":{"sn":"Taormina","ln":"Taormina, Catania"},"958":{"sn":"Lamezia Terme","ln":"Lamezia Terme"},"961":{"sn":"Catanzaro","ln":"Catanzaro"},"962":{"sn":"Crotone","ln":"Crotone"},"963":{"sn":"Vibo Valentia","ln":"Vibo Valentia"},"964":{"sn":"Locri","ln":"Locri"},"965":{"sn":"Reggio Calabria","ln":"Reggio Calabria"},"966":{"sn":"Palmi","ln":"Palmi"},"967":{"sn":"Soverato","ln":"Soverato"},"968":{"sn":"Lamezia Terme","ln":"Lamezia Terme"},"971":{"sn":"Potenza","ln":"Potenza"},"972":{"sn":"Melfi","ln":"Melfi"},"973":{"sn":"Lagonegro","ln":"Lagonegro"},"974":{"sn":"Vallo della Lucania","ln":"Vallo della Lucania"},"975":{"sn":"Sala Consilina","ln":"Sala Consilina, Potenza"},"976":{"sn":"Muro Lucano","ln":"Muro Lucano"},"981":{"sn":"Castrovillari","ln":"Castrovillari"},"982":{"sn":"Paola","ln":"Paola"},"983":{"sn":"Rossano","ln":"Rossano"},"984":{"sn":"Cosenza","ln":"Cosenza"},"985":{"sn":"Scalea","ln":"Scalea"}};
ilib.data.area_KR = {"2":{"ln":"Seoul and parts of Gyeonggi-do (Gwacheon, Gwangmyeong and some neighborhoods of Goyang and Hanam)","sn":"Seoul"},"31":{"ln":"Gyeonggi-do","sn":"Gyeonggi-do"},"32":{"ln":"Incheon and parts of Gyeonggi-do (Bucheon and some insular communities of Ansan)","sn":"Incheon"},"33":{"ln":"Gangwon-do","sn":"Gangwon-do"},"41":{"ln":"Chungcheongnam-do","sn":"Chungcheongnam-do"},"42":{"ln":"Daejeon and a part of Chungcheongnam-do (Gyeryong)","sn":"Daejeon"},"43":{"ln":"Chungcheongbuk-do","sn":"Chungcheongbuk-do"},"44":{"ln":"Sejong City","sn":"Sejong City"},"49":{"ln":"Kaesong Industrial Region","sn":"Kaesong"},"51":{"ln":"Busan","sn":"Busan"},"52":{"ln":"Ulsan","sn":"Ulsan"},"53":{"ln":"Daegu and a part of Gyeongsangbuk-do (Gyeongsan)","sn":"Daegu"},"54":{"ln":"Gyeongsangbuk-do","sn":"Gyeongsangbuk-do"},"55":{"ln":"Gyeongsangnam-do and a few neighborhoods of Ulsan","sn":"Gyeongsangnam-do"},"61":{"ln":"Jeollanam-do","sn":"Jeollanam-do"},"62":{"ln":"Gwangju","sn":"Gwangju"},"63":{"ln":"Jeollabuk-do","sn":"Jeollabuk-do"},"64":{"ln":"Jeju-do","sn":"Jeju-do"}};
ilib.data.area_CN = {"10":{"ln":"Beijing åäº¬å¸","sn":"Beijing"},"20":{"ln":"Guangzhou å¹¿å·å¸","sn":"Guangzhou"},"21":{"ln":"Shanghai ä¸æµ·å¸","sn":"Shanghai"},"22":{"ln":"Tianjin å¤©æ´¥å¸","sn":"Tianjin"},"23":{"ln":"Chongqing éåºå¸","sn":"Chongqing"},"24":{"ln":"Shenyang æ²é³å¸","sn":"Shenyang"},"25":{"ln":"Nanjing åäº¬å¸","sn":"Nanjing"},"27":{"ln":"Wuhan æ­¦æ±å¸","sn":"Wuhan"},"28":{"ln":"Chengdu æé½å¸","sn":"Chengdu"},"29":{"ln":"XiAn è¥¿å®å¸, Xianyang å¸é³å¸","sn":"XiAn"},"310":{"ln":"Handan é¯é¸å¸","sn":"Handan"},"311":{"ln":"Shijiazhuang ç³å®¶åºå¸","sn":"Shijiazhuang"},"312":{"ln":"Baoding ä¿å®å¸","sn":"Baoding"},"313":{"ln":"Zhangjiakou å¼ å®¶å£å¸","sn":"Zhangjiakou"},"314":{"ln":"Chengde æ¿å¾·å¸","sn":"Chengde"},"315":{"ln":"Tangshan åå±±å¸","sn":"Tangshan"},"316":{"ln":"Langfang å»åå¸","sn":"Langfang"},"317":{"ln":"Cangzhou æ²§å·å¸","sn":"Cangzhou"},"318":{"ln":"Hengshui è¡¡æ°´å¸","sn":"Hengshui"},"319":{"ln":"Xingtai é¢å°å¸","sn":"Xingtai"},"335":{"ln":"Qinhuangdao ç§¦çå²å¸","sn":"Qinhuangdao"},"349":{"ln":"Shuozhou æå·å¸","sn":"Shuozhou"},"350":{"ln":"Xinzhou å¿»å·å¸ (å¿»å·å°åº)","sn":"Xinzhou"},"351":{"ln":"Taiyuan å¤ªåå¸","sn":"Taiyuan"},"352":{"ln":"Datong å¤§åå¸","sn":"Datong"},"353":{"ln":"Yangquan é³æ³å¸","sn":"Yangquan"},"354":{"ln":"Yuci æ¦æ¬¡å¸ (æä¸­å°åº)","sn":"Yuci"},"355":{"ln":"Changzhi é¿æ²»å¸","sn":"Changzhi"},"356":{"ln":"Jincheng æåå¸","sn":"Jincheng"},"357":{"ln":"Linfen ä¸´æ±¾å¸ (ä¸´æ±¾å°åº)","sn":"Linfen"},"358":{"ln":"Lishi ç¦»ç³å¸ (åæ¢å°åº)","sn":"Lishi"},"359":{"ln":"Yuncheng è¿åå¸ (è¿åå°åº)","sn":"Yuncheng"},"370":{"ln":"Shangqiu åä¸å¸","sn":"Shangqiu"},"371":{"ln":"Zhengzhou éå·å¸","sn":"Zhengzhou"},"372":{"ln":"Anyang å®é³å¸","sn":"Anyang"},"373":{"ln":"Xinxiang æ°ä¹¡å¸","sn":"Xinxiang"},"374":{"ln":"Xuchang è®¸æå¸","sn":"Xuchang"},"375":{"ln":"Pingdingshan å¹³é¡¶å±±å¸","sn":"Pingdingshan"},"376":{"ln":"Xinyang ä¿¡é³å¸ãæ½¢å·å¿","sn":"Xinyang"},"377":{"ln":"Nanyang åé³å¸","sn":"Nanyang"},"378":{"ln":"Kaifeng å¼å°å¸","sn":"Kaifeng"},"379":{"ln":"Luoyang æ´é³å¸","sn":"Luoyang"},"391":{"ln":"Jiaozuo ç¦ä½å¸","sn":"Jiaozuo"},"392":{"ln":"Hebi é¹¤å£å¸","sn":"Hebi"},"393":{"ln":"Puyang æ¿®é³å¸","sn":"Puyang"},"394":{"ln":"Zhoukou å¨å£å¸","sn":"Zhoukou"},"395":{"ln":"Luohe æ¼¯æ²³å¸","sn":"Luohe"},"396":{"ln":"Zhumadian é©»é©¬åºå¸","sn":"Zhumadian"},"398":{"ln":"Sanmenxia ä¸é¨å³¡å¸","sn":"Sanmenxia"},"410":{"ln":"Tieling éå²­å¸","sn":"Tieling"},"411":{"ln":"Dalian å¤§è¿å¸","sn":"Dalian"},"412":{"ln":"Anshan éå±±å¸","sn":"Anshan"},"413":{"ln":"Fushun æé¡ºå¸","sn":"Fushun"},"414":{"ln":"Benxi æ¬æºªå¸","sn":"Benxi"},"415":{"ln":"Dandong ä¸¹ä¸å¸","sn":"Dandong"},"416":{"ln":"Jinzhou é¦å·å¸","sn":"Jinzhou"},"417":{"ln":"Yingkou è¥å£å¸","sn":"Yingkou"},"418":{"ln":"Fuxin éæ°å¸","sn":"Fuxin"},"419":{"ln":"Liaoyang è¾½é³å¸","sn":"Liaoyang"},"421":{"ln":"Chaoyang æé³å¸","sn":"Chaoyang"},"427":{"ln":"Panjin çé¦å¸","sn":"Panjin"},"429":{"ln":"Huludao è«è¦å²å¸","sn":"Huludao"},"431":{"ln":"Changchun é¿æ¥å¸","sn":"Changchun"},"432":{"ln":"Jilin åæå¸","sn":"Jilin"},"433":{"ln":"Hunchun ç²æ¥å¸, Yanji å»¶åå¸(å»¶è¾¹ æé²æèªæ²»å·)","sn":"Hunchun"},"434":{"ln":"Siping åå¹³å¸","sn":"Siping"},"435":{"ln":"Tonghua éåå¸, Meihekou æ¢æ²³å£å¸","sn":"Tonghua"},"436":{"ln":"Baicheng ç½åå¸","sn":"Baicheng"},"437":{"ln":"Liaoyuan è¾½æºå¸","sn":"Liaoyuan"},"438":{"ln":"Songyuan æ¾åå¸","sn":"Songyuan"},"439":{"ln":"Baishan ç½å±±å¸","sn":"Baishan"},"451":{"ln":"Harbin åå°æ»¨å¸","sn":"Harbin"},"452":{"ln":"Qiqihar é½é½åå°å¸","sn":"Qiqihar"},"453":{"ln":"Mudanjiang ç¡ä¸¹æ±å¸","sn":"Mudanjiang"},"454":{"ln":"Jiamusi ä½³æ¨æ¯å¸","sn":"Jiamusi"},"455":{"ln":"Suihua ç»¥åå¸","sn":"Suihua"},"456":{"ln":"Heihe é»æ²³å¸","sn":"Heihe"},"457":{"ln":"Jiagedaqi å æ ¼è¾¾å¥ (å¤§å´å®å²­å°åº)","sn":"Jiagedaqi"},"458":{"ln":"Yichun ä¼æ¥å¸","sn":"Yichun"},"459":{"ln":"Daqing å¤§åºå¸","sn":"Daqing"},"464":{"ln":"Qitaihe ä¸å°æ²³å¸","sn":"Qitaihe"},"467":{"ln":"Jixi é¸¡è¥¿å¸","sn":"Jixi"},"468":{"ln":"Hegang é¹¤å²å¸","sn":"Hegang"},"469":{"ln":"Shuangyashan åé¸­å±±å¸","sn":"Shuangyashan"},"470":{"ln":"Hailaer æµ·æå°å¸ (å¼ä¼¦è´å°ç)","sn":"Hailaer"},"471":{"ln":"Huhehaote å¼åæµ©ç¹å¸","sn":"Huhehaote"},"472":{"ln":"Baotou åå¤´å¸","sn":"Baotou"},"473":{"ln":"Wuhai ä¹æµ·å¸","sn":"Wuhai"},"474":{"ln":"Jining éå®å¸ (ä¹å°å¯å¸ç)","sn":"Jining"},"476":{"ln":"Chifeng èµ¤å³°å¸","sn":"Chifeng"},"477":{"ln":"Dongsheng ä¸èå¸ (ä¼åæ­ç)","sn":"Dongsheng"},"478":{"ln":"Linhe ä¸´æ²³å¸ (å·´å½¦æ·å°ç)","sn":"Linhe"},"479":{"ln":"Xilinhaote é¡ææµ©ç¹å¸ (é¡æé­åç)","sn":"Xilinhaote"},"482":{"ln":"Wulanhaote ä¹å°æµ©ç¹å¸ (å´å®ç)","sn":"Wulanhaote"},"483":{"ln":"Alashanzuoqi é¿æåå·¦æ (é¿æåç)","sn":"Alashanzuoqi"},"510":{"ln":"Wuxi æ é¡å¸","sn":"Wuxi"},"511":{"ln":"Zhenjiang éæ±å¸","sn":"Zhenjiang"},"512":{"ln":"Suzhou èå·å¸","sn":"Suzhou"},"513":{"ln":"Nantong åéå¸","sn":"Nantong"},"514":{"ln":"Yangzhou æ¬å·å¸","sn":"Yangzhou"},"515":{"ln":"Yancheng çåå¸","sn":"Yancheng"},"516":{"ln":"Xuzhou å¾å·å¸","sn":"Xuzhou"},"517":{"ln":"Huaian æ·®é´å¸","sn":"Huaian"},"518":{"ln":"Lianyungang è¿äºæ¸¯å¸","sn":"Lianyungang"},"519":{"ln":"Changzhou å¸¸å·å¸","sn":"Changzhou"},"523":{"ln":"Taizhou æ³°å·å¸","sn":"Taizhou"},"527":{"ln":"Suqian å®¿è¿å¸","sn":"Suqian"},"530":{"ln":"Heze è·æ³½å¸ (è·æ³½å°åº)","sn":"Heze"},"531":{"ln":"Jinan æµåå¸","sn":"Jinan"},"532":{"ln":"Qingdao éå²å¸","sn":"Qingdao"},"533":{"ln":"Zibo æ·åå¸","sn":"Zibo"},"534":{"ln":"Dezhou å¾·å·å¸ (å¾·å·å°åº)","sn":"Dezhou"},"535":{"ln":"Yantai çå°å¸","sn":"Yantai"},"536":{"ln":"Weifang æ½åå¸","sn":"Weifang"},"537":{"ln":"Jining æµå®å¸","sn":"Jining"},"538":{"ln":"TaiAn æ³°å®å¸","sn":"TaiAn"},"539":{"ln":"Linyi ä¸´æ²å¸ (ä¸´æ²å°åº)","sn":"Linyi"},"543":{"ln":"Binzhou æ»¨å·å¸ (æ»¨å·å°åº)","sn":"Binzhou"},"546":{"ln":"Dongying ä¸è¥å¸","sn":"Dongying"},"550":{"ln":"Chuzhou æ»å·å¸","sn":"Chuzhou"},"551":{"ln":"Hefei åè¥å¸","sn":"Hefei"},"552":{"ln":"Bengbu èå å¸","sn":"Bengbu"},"553":{"ln":"Wuhu èæ¹å¸","sn":"Wuhu"},"554":{"ln":"Huainan æ·®åå¸","sn":"Huainan"},"555":{"ln":"MaAnshan é©¬éå±±å¸","sn":"MaAnshan"},"556":{"ln":"Anqing å®åºå¸","sn":"Anqing"},"557":{"ln":"Suzhou å®¿å·å¸","sn":"Suzhou"},"558":{"ln":"Fuyang éé³å¸","sn":"Fuyang"},"559":{"ln":"Huangshan é»å±±å¸","sn":"Huangshan"},"561":{"ln":"Huaibei æ·®åå¸","sn":"Huaibei"},"562":{"ln":"Tongling ééµå¸","sn":"Tongling"},"563":{"ln":"Xuancheng å®£åå¸","sn":"Xuancheng"},"564":{"ln":"LiuAn å­å®å¸","sn":"LiuAn"},"565":{"ln":"Chaohu å·¢æ¹å¸","sn":"Chaohu"},"566":{"ln":"Chizhou æ± å·å¸","sn":"Chizhou"},"570":{"ln":"Quzhou è¡¢å·å¸","sn":"Quzhou"},"571":{"ln":"Hangzhou æ­å·å¸","sn":"Hangzhou"},"572":{"ln":"Huzhou æ¹å·å¸","sn":"Huzhou"},"573":{"ln":"Jiaxing åå´å¸","sn":"Jiaxing"},"574":{"ln":"Ningbo å®æ³¢å¸","sn":"Ningbo"},"575":{"ln":"Shaoxing ç»å´å¸","sn":"Shaoxing"},"576":{"ln":"Taizhou å°å·å¸","sn":"Taizhou"},"577":{"ln":"Wenzhou æ¸©å·å¸","sn":"Wenzhou"},"578":{"ln":"Lishui ä¸½æ°´å¸","sn":"Lishui"},"579":{"ln":"Jinhua éåå¸","sn":"Jinhua"},"580":{"ln":"Zhoushan èå±±å¸","sn":"Zhoushan"},"591":{"ln":"Fuzhou ç¦å·å¸","sn":"Fuzhou"},"592":{"ln":"Xiamen å¦é¨å¸","sn":"Xiamen"},"593":{"ln":"Ningde å®å¾·å¸","sn":"Ningde"},"594":{"ln":"Putian èç°å¸","sn":"Putian"},"595":{"ln":"Quanzhou æ³å·å¸","sn":"Quanzhou"},"596":{"ln":"Zhangzhou æ¼³å·å¸","sn":"Zhangzhou"},"597":{"ln":"Longyan é¾å²©å¸","sn":"Longyan"},"598":{"ln":"Sanming ä¸æå¸","sn":"Sanming"},"599":{"ln":"Nanping åå¹³å¸","sn":"Nanping"},"631":{"ln":"Weihai å¨æµ·å¸","sn":"Weihai"},"632":{"ln":"Zaozhuang æ£åºå¸","sn":"Zaozhuang"},"633":{"ln":"Rizhao æ¥ç§å¸","sn":"Rizhao"},"634":{"ln":"Laiwu è±èå¸","sn":"Laiwu"},"635":{"ln":"Liaocheng èåå¸ (èåå°åº)","sn":"Liaocheng"},"660":{"ln":"Shanwei æ±å°¾å¸","sn":"Shanwei"},"662":{"ln":"Yangjiang é³æ±å¸","sn":"Yangjiang"},"663":{"ln":"Jieyang æ­é³å¸","sn":"Jieyang"},"668":{"ln":"Maoming èåå¸","sn":"Maoming"},"691":{"ln":"Jinghong æ¯æ´ªå¸ (è¥¿åççº³ å£æèªæ²»å· )","sn":"Jinghong"},"692":{"ln":"Luxi æ½è¥¿å¸ (å¾·å®å£æ æ¯é¢æèªæ²»å·)","sn":"Luxi"},"701":{"ln":"Yingtan é¹°æ½­å¸","sn":"Yingtan"},"710":{"ln":"Xiangfan è¥æ¨å¸","sn":"Xiangfan"},"711":{"ln":"Ezhou éå·å¸","sn":"Ezhou"},"712":{"ln":"Xiaogan å­æå¸","sn":"Xiaogan"},"713":{"ln":"Huanggang é»åå¸","sn":"Huanggang"},"714":{"ln":"Huangshi é»ç³å¸","sn":"Huangshi"},"715":{"ln":"Xianning å¸å®å¸","sn":"Xianning"},"716":{"ln":"Jingzhou èå·å¸","sn":"Jingzhou"},"717":{"ln":"Yichang å®æå¸","sn":"Yichang"},"718":{"ln":"Enshi æ©æ½å¸ (æ©æ½åå®¶æ èæèªæ²»å·)","sn":"Enshi"},"719":{"ln":"Shiyan åå °å¸","sn":"Shiyan"},"722":{"ln":"Suizhou éå·å¸","sn":"Suizhou"},"724":{"ln":"Jingmen èé¨å¸","sn":"Jingmen"},"728":{"ln":"Xiantao ä»æ¡å¸","sn":"Xiantao"},"730":{"ln":"Yueyang å²³é³å¸","sn":"Yueyang"},"731":{"ln":"Changsha é¿æ²å¸, Xiangtan æ¹æ½­å¸, Zhuzhou æ ªå·å¸","sn":"Changsha"},"734":{"ln":"Hengyang è¡¡é³å¸","sn":"Hengyang"},"735":{"ln":"Chenzhou é´å·å¸","sn":"Chenzhou"},"736":{"ln":"Changde å¸¸å¾·å¸","sn":"Changde"},"737":{"ln":"Yiyang çé³å¸","sn":"Yiyang"},"738":{"ln":"Loudi å¨åºå¸","sn":"Loudi"},"739":{"ln":"Shaoyang éµé³å¸","sn":"Shaoyang"},"743":{"ln":"Jishou åé¦å¸ (æ¹è¥¿åå®¶æ èæèªæ²»å·)","sn":"Jishou"},"744":{"ln":"Zhangjiajie å¼ å®¶çå¸","sn":"Zhangjiajie"},"745":{"ln":"Huaihua æåå¸","sn":"Huaihua"},"746":{"ln":"Yongzhou æ°¸å·å¸","sn":"Yongzhou"},"750":{"ln":"Jiangmen æ±é¨å¸","sn":"Jiangmen"},"751":{"ln":"Shaoguan é¶å³å¸","sn":"Shaoguan"},"752":{"ln":"Huizhou æ å·å¸","sn":"Huizhou"},"753":{"ln":"Meizhou æ¢å·å¸","sn":"Meizhou"},"754":{"ln":"Chaoyang æ½®é³å¸, Shantou æ±å¤´å¸","sn":"Shantou"},"755":{"ln":"Shenzhen æ·±å³å¸","sn":"Shenzhen"},"756":{"ln":"Zhuhai ç æµ·å¸","sn":"Zhuhai"},"757":{"ln":"Foshan ä½å±±å¸, Shunde é¡ºå¾·å¸","sn":"Foshan"},"758":{"ln":"Zhaoqing èåºå¸","sn":"Zhaoqing"},"759":{"ln":"Zhanjiang æ¹æ±å¸","sn":"Zhanjiang"},"760":{"ln":"Zhongshan ä¸­å±±å¸","sn":"Zhongshan"},"762":{"ln":"Heyuan æ²³æºå¸","sn":"Heyuan"},"763":{"ln":"Qingyuan æ¸è¿å¸","sn":"Qingyuan"},"766":{"ln":"Yunfu äºæµ®å¸","sn":"Yunfu"},"768":{"ln":"Chaozhou æ½®å·å¸","sn":"Chaozhou"},"769":{"ln":"Dongguan ä¸èå¸","sn":"Dongguan"},"770":{"ln":"Fangchenggang é²åæ¸¯å¸","sn":"Fangchenggang"},"771":{"ln":"Nanning åå®å¸","sn":"Nanning"},"772":{"ln":"Liuzhou æ³å·å¸","sn":"Liuzhou"},"773":{"ln":"Guilin æ¡æå¸","sn":"Guilin"},"774":{"ln":"Wuzhou æ¢§å·å¸","sn":"Wuzhou"},"775":{"ln":"Yulin çæå¸","sn":"Yulin"},"776":{"ln":"Baise ç¾è²å¸ (ç¾è²å°åº)","sn":"Baise"},"777":{"ln":"Qinzhou é¦å·å¸","sn":"Qinzhou"},"778":{"ln":"Hechi æ²³æ± å¸ (æ²³æ± å°åº)","sn":"Hechi"},"779":{"ln":"Beihai åæµ·å¸","sn":"Beihai"},"790":{"ln":"Xinyu æ°ä½å¸","sn":"Xinyu"},"791":{"ln":"Nanchang åæå¸","sn":"Nanchang"},"792":{"ln":"Jiujiang ä¹æ±å¸","sn":"Jiujiang"},"793":{"ln":"Shangrao ä¸é¥¶å¸","sn":"Shangrao"},"794":{"ln":"Fuzhou æå·å¸","sn":"Fuzhou"},"795":{"ln":"Yichun å®æ¥å¸","sn":"Yichun"},"796":{"ln":"JiAn åå®å¸","sn":"JiAn"},"797":{"ln":"Ganzhou èµ£å·å¸","sn":"Ganzhou"},"798":{"ln":"Jingdezhen æ¯å¾·éå¸","sn":"Jingdezhen"},"799":{"ln":"Pingxiang èä¹¡å¸","sn":"Pingxiang"},"812":{"ln":"Panzhihua ææè±å¸","sn":"Panzhihua"},"813":{"ln":"Zigong èªè´¡å¸","sn":"Zigong"},"816":{"ln":"Mianyang ç»µé³å¸","sn":"Mianyang"},"817":{"ln":"Nanchong ååå¸","sn":"Nanchong"},"818":{"ln":"Dazhou è¾¾å·å¸","sn":"Dazhou"},"825":{"ln":"Suining éå®å¸","sn":"Suining"},"826":{"ln":"GuangAn å¹¿å®å¸","sn":"GuangAn"},"827":{"ln":"Bazhong å·´ä¸­å¸","sn":"Bazhong"},"830":{"ln":"Luzhou æ³¸å·å¸","sn":"Luzhou"},"831":{"ln":"Yibin å®å®¾å¸","sn":"Yibin"},"832":{"ln":"Neijiang åæ±å¸, Ziyang èµé³å¸","sn":"Neijiang"},"833":{"ln":"Leshan ä¹å±±å¸","sn":"Leshan"},"834":{"ln":"Xichang è¥¿æå¸(åå±± å½æèªæ²»å·)","sn":"Xichang"},"835":{"ln":"YaAn éå®å¸","sn":"YaAn"},"836":{"ln":"Kangding åº·å®å¿(çå­ èæèªæ²»å·)","sn":"Kangding"},"837":{"ln":"MaErkang é©¬å°åº·å¿ (é¿åèæ ç¾æèªæ²»å·)","sn":"MaErkang"},"838":{"ln":"Deyang å¾·é³å¸","sn":"Deyang"},"839":{"ln":"Guangyuan å¹¿åå¸","sn":"Guangyuan"},"851":{"ln":"Guiyang è´µé³å¸","sn":"Guiyang"},"852":{"ln":"Zunyi éµä¹å¸","sn":"Zunyi"},"853":{"ln":"Anshun å®é¡ºå¸ (å®é¡ºå°åº)","sn":"Anshun"},"854":{"ln":"Duyun é½åå¸ (é»åå¸ä¾æ èæèªæ²»å·)","sn":"Duyun"},"855":{"ln":"Kaili å¯éå¸ (é»ä¸åèæ ä¾æèªæ²»å·   )","sn":"Kaili"},"856":{"ln":"Tongren éä»å¸ (éä»å°åº)","sn":"Tongren"},"857":{"ln":"Bijie æ¯èå¸ (æ¯èå°åº)","sn":"Bijie"},"858":{"ln":"Liupanshui å­çæ°´å¸","sn":"Liupanshui"},"859":{"ln":"Xingyi å´ä¹å¸ (é»è¥¿åå¸ä¾æ èæèªæ²»å·)","sn":"Xingyi"},"870":{"ln":"Zhaotong æ­éå¸ (æ­éå°åº)","sn":"Zhaotong"},"871":{"ln":"Kunming ææå¸","sn":"Kunming"},"872":{"ln":"Dali å¤§çå¸(å¤§ç ç½æèªæ²»å·)","sn":"Dali"},"873":{"ln":"Gejiu ä¸ªæ§å¸ (çº¢æ²³åå°¼æ å½æèªæ²»å·)","sn":"Gejiu"},"874":{"ln":"Qujing æ²éå¸","sn":"Qujing"},"875":{"ln":"Baoshan ä¿å±±å¸","sn":"Baoshan"},"876":{"ln":"Wenshan æå±±å¿ (æå±±å£®æ èæèªæ²»å·)","sn":"Wenshan"},"877":{"ln":"Yuxi çæºªå¸","sn":"Yuxi"},"878":{"ln":"Chuxiong æ¥éå¸(æ¥é å½æèªæ²»å· )","sn":"Chuxiong"},"879":{"ln":"Simao æèå¸ (æèå°åº)","sn":"Simao"},"883":{"ln":"Lincang ä¸´æ²§å¿ (ä¸´æ²§å°åº)","sn":"Lincang"},"886":{"ln":"Liuku å­åºå¸(ææ± ååæèªæ²»å·)","sn":"Liuku"},"887":{"ln":"Zhongdian ä¸­ç¸å¿(è¿ªåº èæèªæ²»å·)","sn":"Zhongdian"},"888":{"ln":"Lijiang ä¸½æ±çº³è¥¿æ èªæ²»å¿ (ä¸½æ±å°åº)","sn":"Lijiang"},"891":{"ln":"Lhasa æè¨å¸","sn":"Lhasa"},"892":{"ln":"Rikaze æ¥ååå¸ (æ¥ååå°åº)","sn":"Rikaze"},"893":{"ln":"Naidong ä¹ä¸å¿ (å±±åå°åº)","sn":"Naidong"},"894":{"ln":"Linzhi æèå¿ (æèå°åº)","sn":"Linzhi"},"895":{"ln":"Changdu æé½å¿ (æé½å°åº)","sn":"Changdu"},"896":{"ln":"Naqu é£æ²å¿ (é£æ²å°åº)","sn":"Naqu"},"897":{"ln":"GeEr å¶å°å¿ (é¿éå°åº)","sn":"GeEr"},"898":{"ln":"Haikou æµ·å£å¸","sn":"Haikou"},"901":{"ln":"Tacheng å¡åå¸","sn":"Tacheng"},"902":{"ln":"Hami åå¯å¸ (åå¯å°åº)","sn":"Hami"},"903":{"ln":"Hetian åç°å¸ (åç°å°åº)","sn":"Hetian"},"906":{"ln":"Aletai é¿åæ³°å¸","sn":"Aletai"},"908":{"ln":"Atushi é¿å¾ä»å¸ (åå­åèæ¯å° åå­èªæ²»å·)","sn":"Atushi"},"909":{"ln":"Bole åä¹å¸ (åå°å¡æ èå¤èªæ²»å·)","sn":"Bole"},"911":{"ln":"YanAn å»¶å®å¸","sn":"YanAn"},"912":{"ln":"Yulin æ¦æå¸","sn":"Yulin"},"913":{"ln":"Weinan æ¸­åå¸","sn":"Weinan"},"914":{"ln":"Shangzhou åå·å¸ (ååå°åº)","sn":"Shangzhou"},"915":{"ln":"Ankang å®åº·å¸ (å®åº·å°åº)","sn":"Ankang"},"916":{"ln":"Hanzhong æ±ä¸­å¸","sn":"Hanzhong"},"917":{"ln":"Baoji å®é¸¡å¸","sn":"Baoji"},"919":{"ln":"Tongchuan éå·å¸","sn":"Tongchuan"},"930":{"ln":"Linxia ä¸´å¤å¸(ä¸´å¤ åæèªæ²»å·)","sn":"Linxia"},"931":{"ln":"Lanzhou å°å·å¸","sn":"Lanzhou"},"932":{"ln":"Dingxi å®è¥¿å¿ (å®è¥¿å°åº)","sn":"Dingxi"},"933":{"ln":"Pingliang å¹³åå¸ (å¹³åå°åº)","sn":"Pingliang"},"934":{"ln":"Xifeng è¥¿å³°å¸ (åºé³å°åº)","sn":"Xifeng"},"935":{"ln":"Jinchang éæå¸","sn":"Jinchang"},"936":{"ln":"Zhangye å¼ æå¸ (å¼ æå°åº)","sn":"Zhangye"},"937":{"ln":"Jiuquan éæ³å¸ (éæ³å°åº)","sn":"Jiuquan"},"938":{"ln":"Tianshui å¤©æ°´å¸","sn":"Tianshui"},"939":{"ln":"Wudu æ­¦é½å¿ (éåå°åº)","sn":"Wudu"},"941":{"ln":"Hezuo åä½å¸(çå èæèªæ²»å·)","sn":"Hezuo"},"943":{"ln":"Baiyin ç½é¶å¸","sn":"Baiyin"},"951":{"ln":"Yinchuan é¶å·å¸","sn":"Yinchuan"},"952":{"ln":"Shizuishan ç³å´å±±å¸","sn":"Shizuishan"},"953":{"ln":"Wuzhong å´å¿ å¸","sn":"Wuzhong"},"954":{"ln":"Guyuan åºåå¿ (åºåå°åº)","sn":"Guyuan"},"955":{"ln":"Zhongwei ä¸­å«å¸ãä¸­å®å¿ãæµ·åå¿ (ä¸­å«å°åº)","sn":"Zhongwei"},"970":{"ln":"Haiyan æµ·æå¿(æµ·å èæèªæ²»å·)","sn":"Haiyan"},"971":{"ln":"Xining è¥¿å®å¸","sn":"Xining"},"972":{"ln":"PingAn å¹³å®å¿ (æµ·ä¸å°åº)","sn":"PingAn"},"973":{"ln":"Tongren åä»å¿(é»å èæèªæ²»å·)","sn":"Tongren"},"974":{"ln":"Gonghe å±åå¿(æµ·å èæèªæ²»å·)","sn":"Gonghe"},"975":{"ln":"Maqin çæ²å¿(ææ´ èæèªæ²»å·)","sn":"Maqin"},"976":{"ln":"Yushu çæ å¿(çæ  èæèªæ²»å·)","sn":"Yushu"},"977":{"ln":"Delingha å¾·ä»¤åå¸ (æµ·è¥¿èå¤æ èæèªæ²»å·)","sn":"Delingha"},"979":{"ln":"GeErmu æ ¼å°æ¨å¸","sn":"GeErmu"},"990":{"ln":"Kalamayi åæçä¾å¸","sn":"Kalamayi"},"991":{"ln":"Urumchi ä¹é²æ¨é½","sn":"Urumchi"},"992":{"ln":"Kuitun å¥å±¯å¸","sn":"Kuitun"},"993":{"ln":"Shihezi ç³æ²³å­å¸","sn":"Shihezi"},"994":{"ln":"Changji æåå¸(æå åæèªæ²»å·)","sn":"Changji"},"995":{"ln":"Tulufan åé²çªå¸ (åé²çªå°åº)","sn":"Tulufan"},"996":{"ln":"KuErle åºå°åå¸ (å·´é³é­æ¥ èå¤èªæ²»å·)","sn":"KuErle"},"997":{"ln":"Akesu é¿åèå¸ (é¿åèå°åº)","sn":"Akesu"},"998":{"ln":"Kashi åä»å¸ (åä»å°åº)","sn":"Kashi"},"999":{"ln":"Yining ä¼å®å¸(ä¼ç åè¨åèªæ²»å·)","sn":"Yining"},"8029":{"ln":"Zhongba ä»²å·´å¿","sn":"Zhongba"},"8060":{"ln":"Pulan æ®å°å¿","sn":"Pulan"},"8063":{"ln":"Jiali åé»å¿","sn":"Jiali"},"8065":{"ln":"Nierong èè£å¿","sn":"Nierong"},"8067":{"ln":"Bange ç­æå¿","sn":"Bange"},"8068":{"ln":"Shenzha ç³æå¿","sn":"Shenzha"},"8070":{"ln":"Shuanghu åæ¹","sn":"Shuanghu"},"8071":{"ln":"Zhada æè¾¾å¿","sn":"Zhada"},"8078":{"ln":"Suoxian ç´¢å¿","sn":"Suoxian"},"8081":{"ln":"Nima å°¼çå¿","sn":"Nima"}};
ilib.data.area_NL = {"10":{"ln":"Rotterdam","sn":"Rotterdam"},"13":{"ln":"Tilburg","sn":"Tilburg"},"15":{"ln":"Delft","sn":"Delft"},"20":{"ln":"Amsterdam","sn":"Amsterdam"},"23":{"ln":"Haarlem","sn":"Haarlem"},"24":{"ln":"Nijmegen","sn":"Nijmegen"},"26":{"ln":"Arnhem","sn":"Arnhem"},"30":{"ln":"Utrecht","sn":"Utrecht"},"33":{"ln":"Amersfoort","sn":"Amersfoort"},"35":{"ln":"Hilversum","sn":"Hilversum"},"36":{"ln":"Almere","sn":"Almere"},"38":{"ln":"Zwolle","sn":"Zwolle"},"40":{"ln":"Eindhoven","sn":"Eindhoven"},"43":{"ln":"Maastricht","sn":"Maastricht"},"45":{"ln":"Heerlen","sn":"Heerlen"},"46":{"ln":"Sittard","sn":"Sittard"},"50":{"ln":"Groningen","sn":"Groningen"},"53":{"ln":"Enschede","sn":"Enschede"},"55":{"ln":"Apeldoorn","sn":"Apeldoorn"},"58":{"ln":"Leeuwarden","sn":"Leeuwarden"},"70":{"ln":"'s-Gravenhage","sn":"'s-Gravenhage"},"71":{"ln":"Leiden","sn":"Leiden"},"72":{"ln":"Alkmaar","sn":"Alkmaar"},"73":{"ln":"'s-Hertogenbosch","sn":"'s-Hertogenbosch"},"74":{"ln":"Hengelo","sn":"Hengelo"},"75":{"ln":"Zaandam","sn":"Zaandam"},"76":{"ln":"Breda","sn":"Breda"},"77":{"ln":"Venlo","sn":"Venlo"},"78":{"ln":"Dordrecht","sn":"Dordrecht"},"79":{"ln":"Zoetermeer","sn":"Zoetermeer"},"111":{"ln":"Zierikzee","sn":"Zierikzee"},"113":{"ln":"Goes","sn":"Goes"},"114":{"ln":"Hulst","sn":"Hulst"},"115":{"ln":"Terneuzen","sn":"Terneuzen"},"117":{"ln":"Oostburg","sn":"Oostburg"},"118":{"ln":"Middelburg","sn":"Middelburg"},"161":{"ln":"Rijen","sn":"Rijen"},"162":{"ln":"Oosterhout","sn":"Oosterhout"},"164":{"ln":"Bergen op Zoom","sn":"Bergen op Zoom"},"165":{"ln":"Roosendaal","sn":"Roosendaal"},"166":{"ln":"Tholen","sn":"Tholen"},"167":{"ln":"Steenbergen","sn":"Steenbergen"},"168":{"ln":"Zevenbergen","sn":"Zevenbergen"},"172":{"ln":"Alphen a/d Rijn","sn":"Alphen a/d Rijn"},"174":{"ln":"Naaldwijk","sn":"Naaldwijk"},"180":{"ln":"IJsselsteden","sn":"IJsselsteden"},"181":{"ln":"Spijkenisse","sn":"Spijkenisse"},"182":{"ln":"Gouda","sn":"Gouda"},"183":{"ln":"Gorinchem","sn":"Gorinchem"},"184":{"ln":"Sliedrecht","sn":"Sliedrecht"},"186":{"ln":"Oud-Beijerland","sn":"Oud-Beijerland"},"187":{"ln":"Middelharnis","sn":"Middelharnis"},"222":{"ln":"Den Burg","sn":"Den Burg"},"223":{"ln":"Den Helder","sn":"Den Helder"},"224":{"ln":"Schagen","sn":"Schagen"},"226":{"ln":"Noord Scharwoude","sn":"Noord Scharwoude"},"227":{"ln":"Middenmeer","sn":"Middenmeer"},"228":{"ln":"Enkhuizen","sn":"Enkhuizen"},"229":{"ln":"Hoorn","sn":"Hoorn"},"251":{"ln":"Beverwijk","sn":"Beverwijk"},"252":{"ln":"Hillegom","sn":"Hillegom"},"255":{"ln":"IJmuiden","sn":"IJmuiden"},"294":{"ln":"Weesp","sn":"Weesp"},"297":{"ln":"Uithoorn","sn":"Uithoorn"},"299":{"ln":"Purmerend","sn":"Purmerend"},"313":{"ln":"Dieren","sn":"Dieren"},"314":{"ln":"Doetinchem","sn":"Doetinchem"},"315":{"ln":"Terborg","sn":"Terborg"},"316":{"ln":"Zevenaar","sn":"Zevenaar"},"317":{"ln":"Wageningen","sn":"Wageningen"},"318":{"ln":"Ede","sn":"Ede"},"320":{"ln":"Lelystad","sn":"Lelystad"},"321":{"ln":"Dronten","sn":"Dronten"},"341":{"ln":"Harderwijk","sn":"Harderwijk"},"342":{"ln":"Barneveld","sn":"Barneveld"},"343":{"ln":"Doorn","sn":"Doorn"},"344":{"ln":"Tiel","sn":"Tiel"},"345":{"ln":"Culemborg","sn":"Culemborg"},"346":{"ln":"Maarssen","sn":"Maarssen"},"347":{"ln":"Vianen","sn":"Vianen"},"348":{"ln":"Woerden","sn":"Woerden"},"411":{"ln":"Boxtel","sn":"Boxtel"},"412":{"ln":"Oss","sn":"Oss"},"413":{"ln":"Veghel","sn":"Veghel"},"416":{"ln":"Waalwijk","sn":"Waalwijk"},"418":{"ln":"Zaltbommel","sn":"Zaltbommel"},"475":{"ln":"Roermond","sn":"Roermond"},"478":{"ln":"Venray","sn":"Venray"},"481":{"ln":"Bemmel","sn":"Bemmel"},"485":{"ln":"Cuyk","sn":"Cuyk"},"486":{"ln":"Grave","sn":"Grave"},"487":{"ln":"Druten","sn":"Druten"},"488":{"ln":"Zetten","sn":"Zetten"},"492":{"ln":"Helmond","sn":"Helmond"},"493":{"ln":"Deurne","sn":"Deurne"},"495":{"ln":"Weert","sn":"Weert"},"497":{"ln":"Eersel","sn":"Eersel"},"499":{"ln":"Best","sn":"Best"},"511":{"ln":"Veenwouden","sn":"Veenwouden"},"512":{"ln":"Drachten","sn":"Drachten"},"513":{"ln":"Heerenveen","sn":"Heerenveen"},"514":{"ln":"Balk","sn":"Balk"},"515":{"ln":"Sneek","sn":"Sneek"},"516":{"ln":"Oosterwolde","sn":"Oosterwolde"},"517":{"ln":"Franeker","sn":"Franeker"},"518":{"ln":"St. Annaparochie","sn":"St. Annaparochie"},"519":{"ln":"Dokkum","sn":"Dokkum"},"521":{"ln":"Steenwijk","sn":"Steenwijk"},"522":{"ln":"Meppel","sn":"Meppel"},"523":{"ln":"Dedemsvaart","sn":"Dedemsvaart"},"524":{"ln":"Coevorden","sn":"Coevorden"},"525":{"ln":"Elburg","sn":"Elburg"},"527":{"ln":"Emmeloord","sn":"Emmeloord"},"528":{"ln":"Hoogeveen","sn":"Hoogeveen"},"529":{"ln":"Ommen","sn":"Ommen"},"541":{"ln":"Oldenzaal","sn":"Oldenzaal"},"543":{"ln":"Winterswijk","sn":"Winterswijk"},"544":{"ln":"Groenlo","sn":"Groenlo"},"545":{"ln":"Neede","sn":"Neede"},"546":{"ln":"Almelo","sn":"Almelo"},"547":{"ln":"Goor","sn":"Goor"},"548":{"ln":"Rijssen","sn":"Rijssen"},"561":{"ln":"Wolvega","sn":"Wolvega"},"562":{"ln":"West Terschelling","sn":"West Terschelling"},"566":{"ln":"Irnsum","sn":"Irnsum"},"570":{"ln":"Deventer","sn":"Deventer"},"571":{"ln":"Twello","sn":"Twello"},"572":{"ln":"Raalte","sn":"Raalte"},"573":{"ln":"Lochem","sn":"Lochem"},"575":{"ln":"Zutphen","sn":"Zutphen"},"577":{"ln":"Uddel","sn":"Uddel"},"578":{"ln":"Epe","sn":"Epe"},"591":{"ln":"Emmen","sn":"Emmen"},"592":{"ln":"Assen","sn":"Assen"},"593":{"ln":"Beilen","sn":"Beilen"},"594":{"ln":"Zuidhorn","sn":"Zuidhorn"},"595":{"ln":"Warffum","sn":"Warffum"},"596":{"ln":"Appingedam","sn":"Appingedam"},"597":{"ln":"Winschoten","sn":"Winschoten"},"598":{"ln":"Hoogezand","sn":"Hoogezand"},"599":{"ln":"Stadskanaal","sn":"Stadskanaal"}};
ilib.data.extarea_FR = {"800":{"ln":"Toll-free Services (NumÃ©ros Vert)","sn":"Toll-free Number"},"801":{"ln":"Toll calls at local rates (NumÃ©ros Azur)","sn":"Toll call"},"802":{"ln":"Toll calls (NumÃ©ros Indigo)","sn":"Toll call"},"803":{"ln":"Toll calls (NumÃ©ros Indigo)","sn":"Toll call"},"805":{"ln":"Toll-free Services (NumÃ©ros Vert)","sn":"Toll-free Number"},"809":{"ln":"Toll-free Services (NumÃ©ros Vert)","sn":"Toll-free Number"},"819":{"ln":"Toll-free Services (NumÃ©ros Vert)","sn":"Toll-free Number"},"80.":{"ln":"Service number","sn":"Service Number"},"81.":{"ln":"Toll calls (NumÃ©ros Azur)","sn":"Toll call"},"82.":{"ln":"Toll calls (NumÃ©ros Indigo)","sn":"Toll call"}};
ilib.data.extarea_AU = {"233":{"ln":"Gosford, Central Coast","sn":"Central Coast"},"238":{"ln":"Bowral, Crookwell, Goulburn, Marulan","sn":"Bowral"},"240":{"ln":"Newcastle, Lower Hunter","sn":"Lower Hunter"},"241":{"ln":"Newcastle, Lower Hunter","sn":"Lower Hunter"},"242":{"ln":"Wollongong","sn":"Wollongong"},"243":{"ln":"Gosford, Central Coast","sn":"Central Coast"},"244":{"ln":"Moruya, Nowra","sn":"Nowra"},"245":{"ln":"Windsor, Richmond","sn":"Windsor"},"246":{"ln":"Campbelltown","sn":"Campbelltown"},"247":{"ln":"Penrith, Blue Mountains","sn":"Blue Mountains"},"248":{"ln":"Bowral, Crookwell, Goulburn, Marulan","sn":"Bowral"},"249":{"ln":"Newcastle, Lower Hunter","sn":"Lower Hunter"},"250":{"ln":"Albury, Corryong, Wodonga","sn":"Albury"},"251":{"ln":"Canberra, Queanbeyan, Yass","sn":"Canberra"},"252":{"ln":"Canberra, Queanbeyan, Yass","sn":"Canberra"},"253":{"ln":"Bathurst, Orange","sn":"Bathurst"},"256":{"ln":"Coffs Harbour, Grafton, Lismore","sn":"Grafton"},"257":{"ln":"Armidale, Tamworth, Northern Tablelands","sn":"Armidale"},"258":{"ln":"Bourke, Dubbo, Far West","sn":"Far West"},"259":{"ln":"Griffith, Wagga Wagga, Riverina","sn":"Griffith"},"260":{"ln":"Albury, Corryong, Wodonga","sn":"Albury"},"261":{"ln":"Canberra, Queanbeyan, Yass","sn":"Canberra"},"262":{"ln":"Canberra, Queanbeyan, Yass","sn":"Canberra"},"263":{"ln":"Bathurst, Orange","sn":"Bathurst"},"264":{"ln":"Bega, Cooma","sn":"Cooma"},"265":{"ln":"Kempsey, Taree, Lord Howe Island, Muswellbrook","sn":"Kempsey"},"266":{"ln":"Coffs Harbour, Grafton, Lismore","sn":"Grafton"},"267":{"ln":"Armidale, Glen Innes, Gunnedah, Inverell, Moree, Narrabri, Tamworth","sn":"Armidale"},"268":{"ln":"Bourke, Dubbo, Far West","sn":"Far West"},"269":{"ln":"Griffith, Wagga Wagga, Riverina","sn":"Griffith"},"273":{"ln":"Sydney South/Southeast","sn":"Sydney South/Southeast"},"274":{"ln":"Avalon Beach, Dural, Sydney","sn":"Avalon Beach"},"275":{"ln":"Sutherland Shire","sn":"Sutherland Shire"},"277":{"ln":"Liverpool","sn":"Liverpool"},"278":{"ln":"Blacktown","sn":"Blacktown"},"280":{"ln":"Sydney City Centre","sn":"Sydney"},"281":{"ln":"Liverpool","sn":"Liverpool"},"282":{"ln":"Sydney City Centre","sn":"Sydney"},"283":{"ln":"Sydney South/Southeast","sn":"Sydney South/Southeast"},"284":{"ln":"Avalon Beach","sn":"Avalon Beach"},"285":{"ln":"Sutherland Shire","sn":"Sutherland Shire"},"286":{"ln":"Blacktown","sn":"Blacktown"},"287":{"ln":"Liverpool","sn":"Liverpool"},"288":{"ln":"Blacktown","sn":"Blacktown"},"289":{"ln":"Avalon Beach, Dural, Sydney","sn":"Avalon Beach"},"290":{"ln":"Sydney City Centre","sn":"Sydney"},"292":{"ln":"Sydney City Centre","sn":"Sydney"},"293":{"ln":"Sydney South/Southeast","sn":"Sydney South/Southeast"},"294":{"ln":"Avalon Beach, Dural, Sydney North","sn":"Avalon Beach"},"295":{"ln":"Sutherland Shire","sn":"Sutherland Shire"},"297":{"ln":"Liverpool, Sydney West","sn":"Liverpool"},"298":{"ln":"Blacktown, Sydney Northwest","sn":"Blacktown"},"299":{"ln":"Avalon Beach, Dural, Sydney North","sn":"Avalon Beach"},"340":{"ln":"Mildura, Balranald","sn":"Mildura"},"341":{"ln":"Bairnsdale","sn":"Bairnsdale"},"342":{"ln":"Colac, Geelong","sn":"Colac"},"343":{"ln":"Ballarat","sn":"Ballarat"},"344":{"ln":"Bendigo","sn":"Bendigo"},"345":{"ln":"Warrnambool","sn":"Warrnambool"},"347":{"ln":"Wangaratta","sn":"Wangaratta"},"348":{"ln":"Deniliquin, Numurkah, Shepparton","sn":"Deniliquin"},"349":{"ln":"Mornington","sn":"Mornington"},"350":{"ln":"Mildura, Balranald","sn":"Mildura"},"351":{"ln":"Bairnsdale","sn":"Bairnsdale"},"352":{"ln":"Colac, Geelong","sn":"Colac, Geelong"},"353":{"ln":"Ballarat","sn":"Ballarat"},"354":{"ln":"Bendigo","sn":"Bendigo"},"355":{"ln":"Warrnambool","sn":"Warrnambool"},"356":{"ln":"Foster, Warragul, Drouin","sn":"Foster"},"357":{"ln":"Wangaratta","sn":"Wangaratta"},"358":{"ln":"Deniliquin, Shepparton","sn":"Deniliquin"},"359":{"ln":"Mornington, Pakenham, Rosebud","sn":"Mornington"},"361":{"ln":"Hobart","sn":"Hobart"},"362":{"ln":"Hobart","sn":"Hobart"},"363":{"ln":"Launceston","sn":"Launceston"},"364":{"ln":"Devonport, Burnie, Queenstown","sn":"Devonport"},"365":{"ln":"Devonport, Burnie, Queenstown","sn":"Devonport"},"367":{"ln":"Launceston","sn":"Launceston"},"371":{"ln":"Kalkallo, Whittlesea, Melbourne","sn":"Kalkallo"},"372":{"ln":"Croydon, Melbourne","sn":"Croydon"},"373":{"ln":"Melbourne West, Melbourne","sn":"Melbourne West"},"375":{"ln":"Melbourne Southeast, Melbourne","sn":"Melbourne Southeast"},"377":{"ln":"Werribee, Sunbury, Melbourne","sn":"Sunbury"},"378":{"ln":"Melbourne East","sn":"Melbourne East"},"379":{"ln":"Dandenong, Melbourne","sn":"Dandenong"},"380":{"ln":"Werribee, Sunbury, Melbourne","sn":"Sunbury"},"381":{"ln":"Kalkallo, Whittlesea, Melbourne","sn":"Kalkallo"},"382":{"ln":"Croydon, Melbourne","sn":"Croydon"},"383":{"ln":"Melbourne West","sn":"Melbourne West"},"384":{"ln":"Melbourne Northeast","sn":"Melbourne Northeast"},"385":{"ln":"Melbourne Southeast","sn":"Melbourne Southeast"},"386":{"ln":"Melbourne City & South","sn":"Melbourne City & South"},"387":{"ln":"Croydon, Dandenong, Kalkallo, Sunbury, Werribee, Whittlesea, Melbourne East","sn":"Melbourne East"},"389":{"ln":"Dandenong, Melbourne","sn":"Dandenong"},"390":{"ln":"Melbourne City & South","sn":"Melbourne"},"391":{"ln":"Melbourne City & South","sn":"Melbourne City & South"},"392":{"ln":"Melbourne","sn":"Melbourne"},"393":{"ln":"Melbourne West","sn":"Melbourne West"},"394":{"ln":"Melbourne Northeast","sn":"Melbourne Northeast"},"395":{"ln":"Melbourne Southeast","sn":"Melbourne Southeast"},"396":{"ln":"Melbourne City & South","sn":"Melbourne City & South"},"397":{"ln":"Croydon, Dandenong, Kalkallo, Sunbury, Werribee, Whittlesea, Melbourne East","sn":"Melbourne East"},"398":{"ln":"Melbourne East","sn":"Melbourne East"},"399":{"ln":"Melbourne","sn":"Melbourne"},"704":{"ln":"Brisbane Southeast","sn":"Brisbane Southeast"},"721":{"ln":"Brisbane","sn":"Brisbane"},"722":{"ln":"Brisbane City Centre","sn":"Brisbane"},"724":{"ln":"Brisbane Southeast","sn":"Brisbane Southeast"},"728":{"ln":"Beenleigh, Brisbane Southeast, Cleveland, Ipswich, Redcliffe, Samford, Brisbane City Centre","sn":"Brisbane"},"730":{"ln":"Beenleigh, Brisbane Southeast, Cleveland, Ipswich, Redcliffe, Samford, Brisbane City Centre","sn":"Brisbane"},"731":{"ln":"Brisbane","sn":"Brisbane"},"734":{"ln":"Beenleigh, Cleveland, Ipswich, Redcliffe, Samford, Brisbane Southeast","sn":"Brisbane"},"735":{"ln":"Brisbane North/Northwest","sn":"Brisbane North/Northwest"},"736":{"ln":"Brisbane Northeast","sn":"Brisbane Northeast"},"737":{"ln":"Brisbane West/Southwest","sn":"Brisbane West/Southwest"},"739":{"ln":"Brisbane East","sn":"Brisbane East"},"740":{"ln":"Cairns, Far North Queensland","sn":"Far North Queensland"},"741":{"ln":"Bundaberg, Kingaroy","sn":"Bundaberg"},"742":{"ln":"Cairns","sn":"Cairns"},"743":{"ln":"Bundaberg, Kingaroy","sn":"Bundaberg"},"744":{"ln":"Townsville","sn":"Townsville"},"745":{"ln":"Toowoomba, Roma, Southwest Australia","sn":"Toowoomba"},"746":{"ln":"Toowoomba, Roma, Southwest Australia","sn":"Toowoomba"},"747":{"ln":"Townsville","sn":"Townsville"},"748":{"ln":"Rockhampton, Mackay","sn":"Rockhampton"},"749":{"ln":"Rockhampton, Mackay","sn":"Rockhampton"},"752":{"ln":"Sunshine Coast, Esk, Nambour, Gatton, Caboolture","sn":"Sunshine Coast"},"753":{"ln":"Sunshine Coast, Esk, Nambour, Gatton, Caboolture","sn":"Sunshine Coast"},"754":{"ln":"Sunshine Coast, Esk, Nambour, Gatton, Caboolture","sn":"Sunshine Coast"},"756":{"ln":"Gold Coast, Beaudesert","sn":"Gold Coast"},"757":{"ln":"Gold Coast, Beaudesert","sn":"Gold Coast"},"776":{"ln":"Inglewood, Toowoomba","sn":"Inglewood"},"851":{"ln":"Port Hedland","sn":"Port Hedland"},"860":{"ln":"Bruce Rock, Great Victoria, Kalgoorlie, Merredin, Perth","sn":"Perth"},"867":{"ln":"Bridgetown, Bunbury","sn":"Bridgetown"},"868":{"ln":"Albany","sn":"Albany"},"875":{"ln":"Riverland, Murraylands","sn":"Riverland"},"876":{"ln":"Ceduna","sn":"Ceduna"},"877":{"ln":"Southeast Australia","sn":"Southeast"},"878":{"ln":"Mid North Australia","sn":"Mid North"},"879":{"ln":"Northern Territory (Alice Springs, Darwin)","sn":"Northern Territory"},"880":{"ln":"Broken Hill","sn":"Broken Hill"},"885":{"ln":"Riverland, Murraylands","sn":"Riverland"},"886":{"ln":"Ceduna","sn":"Ceduna"},"887":{"ln":"Southeast","sn":"Southeast"},"888":{"ln":"Mid North","sn":"Mid North"},"889":{"ln":"Northern Territory (Alice Springs, Darwin)","sn":"Northern Territory"},"890":{"ln":"Kalgoorlie","sn":"Kalgoorlie"},"895":{"ln":"Bullsbrook East","sn":"Bullsbrook East"},"896":{"ln":"Moora","sn":"Moora"},"897":{"ln":"Bridgetown","sn":"Bridgetown"},"898":{"ln":"Albany","sn":"Albany"},"899":{"ln":"Geraldton","sn":"Geraldton"},"2913":{"ln":"Sydney South/Southeast","sn":"Sydney South/Southeast"},"2914":{"ln":"Sydney North","sn":"Sydney North"},"2915":{"ln":"Sydney Southwest","sn":"Sydney Southwest"},"2918":{"ln":"Sydney Northwest","sn":"Sydney Northwest"},"2960":{"ln":"Liverpool","sn":"Liverpool"},"2961":{"ln":"Liverpool","sn":"Liverpool"},"2962":{"ln":"Blacktown","sn":"Blacktown"},"2965":{"ln":"Dural","sn":"Dural"},"7320":{"ln":"Beenleigh, Cleveland, Ipswich, Redcliffe, Samford, Brisbane","sn":"Brisbane"},"7321":{"ln":"Brisbane","sn":"Brisbane"},"7322":{"ln":"Brisbane City Centre","sn":"Brisbane"},"7323":{"ln":"Brisbane City Centre","sn":"Brisbane"},"7324":{"ln":"Brisbane Southeast","sn":"Brisbane Southeast"},"7325":{"ln":"Brisbane North/Northwest","sn":"Brisbane North/Northwest"},"7326":{"ln":"Brisbane North/Northwest","sn":"Brisbane North/Northwest"},"7327":{"ln":"Brisbane West/Southwest","sn":"Brisbane West/Southwest"},"7328":{"ln":"Beenleigh, Cleveland, Ipswich, Redcliffe, Samford, Brisbane","sn":"Brisbane"},"7329":{"ln":"Brisbane East","sn":"Brisbane East"},"7330":{"ln":"Beenleigh, Cleveland, Ipswich, Redcliffe, Samford, Brisbane","sn":"Brisbane"},"7331":{"ln":"Brisbane","sn":"Brisbane"},"7332":{"ln":"Brisbane City Centre","sn":"Brisbane"},"7333":{"ln":"Brisbane City Centre","sn":"Brisbane"},"7334":{"ln":"Brisbane Southeast","sn":"Brisbane Southeast"},"7335":{"ln":"Brisbane North/Northwest","sn":"Brisbane North/Northwest"},"7336":{"ln":"Brisbane Northeast","sn":"Brisbane Northeast"},"7337":{"ln":"Brisbane West/Southwest","sn":"Brisbane West/Southwest"},"7338":{"ln":"Beenleigh, Cleveland, Ipswich, Redcliffe, Samford, Brisbane","sn":"Brisbane"},"7339":{"ln":"Brisbane East","sn":"Brisbane East"},"7380":{"ln":"Beenleigh, Cleveland, Ipswich, Redcliffe, Samford, Brisbane","sn":"Brisbane"},"7381":{"ln":"Brisbane","sn":"Brisbane"},"7382":{"ln":"Brisbane City Centre","sn":"Brisbane"},"7383":{"ln":"Brisbane City Centre","sn":"Brisbane"},"7384":{"ln":"Brisbane Southeast","sn":"Brisbane Southeast"},"7385":{"ln":"Brisbane North/Northwest","sn":"Brisbane North/Northwest"},"7386":{"ln":"Brisbane Northeast","sn":"Brisbane Northeast"},"7387":{"ln":"Brisbane West/Southwest","sn":"Brisbane West/Southwest"},"7388":{"ln":"Beenleigh, Cleveland, Ipswich, Redcliffe, Samford, Brisbane","sn":"Brisbane"},"7389":{"ln":"Brisbane East","sn":"Brisbane East"},"8520":{"ln":"Wanneroo, Perth North/Northwest","sn":"Perth"},"8521":{"ln":"Perth City & Southwest","sn":"Perth"},"8522":{"ln":"Perth City & Southwest","sn":"Perth"},"8523":{"ln":"Perth City & Southwest","sn":"Perth"},"8527":{"ln":"Perth Northeast","sn":"Perth Northeast"},"8529":{"ln":"Armadale, Herne Hill, Kalamunda, Rottnest Island, Spearwood, Perth","sn":"Perth"},"8530":{"ln":"Wanneroo, Perth North/Northwest","sn":"Perth"},"8531":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8532":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8533":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8537":{"ln":"Perth Northeast","sn":"Perth Northeast"},"8539":{"ln":"Armadale, Herne Hill, Kalamunda, Rottnest Island, Spearwood, Perth","sn":"Perth"},"8540":{"ln":"Wanneroo, Perth North/Northwest","sn":"Perth"},"8541":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8542":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8543":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8547":{"ln":"Perth Northeast","sn":"Perth Northeast"},"8549":{"ln":"Armadale, Herne Hill, Kalamunda, Rottnest Island, Spearwood, Perth","sn":"Perth"},"8611":{"ln":"Perth City & Southwest","sn":"Perth"},"8612":{"ln":"Perth City & Southwest","sn":"Perth"},"8613":{"ln":"Perth City & Southwest","sn":"Perth"},"8619":{"ln":"Armadale, Herne Hill, Kalamunda, Rottnest Island, Spearwood, Perth","sn":"Perth"},"8620":{"ln":"Wanneroo, Perth North/Northwest","sn":"Perth"},"8621":{"ln":"Perth City & Southwest","sn":"Perth"},"8622":{"ln":"Perth City & Southwest","sn":"Perth"},"8623":{"ln":"Perth City & Southwest","sn":"Perth"},"8624":{"ln":"Perth North/Northwest","sn":"Perth North"},"8625":{"ln":"Perth East/Southeast","sn":"Perth East"},"8626":{"ln":"Perth","sn":"Perth"},"8627":{"ln":"Perth Northeast","sn":"Perth Northeast"},"8628":{"ln":"Perth West","sn":"Perth West"},"8629":{"ln":"Armadale, Herne Hill, Kalamunda, Rottnest Island, Spearwood, Perth","sn":"Perth"},"8630":{"ln":"Wanneroo, Perth North/Northwest","sn":"Perth"},"8631":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8632":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8633":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8634":{"ln":"Perth North/Northwest","sn":"Perth North/Northwest"},"8635":{"ln":"Perth East/Southeast","sn":"Perth East/Southeast"},"8636":{"ln":"Perth","sn":"Perth"},"8637":{"ln":"Perth Northeast","sn":"Perth Northeast"},"8638":{"ln":"Perth West","sn":"Perth West"},"8639":{"ln":"Armadale, Herne Hill, Kalamunda, Rottnest Island, Spearwood, Perth","sn":"Perth"},"8640":{"ln":"Wanneroo, Perth North/Northwest","sn":"Perth"},"8641":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8642":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8643":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8644":{"ln":"Perth North/Northwest","sn":"Perth North/Northwest"},"8645":{"ln":"Perth East/Southeast","sn":"Perth East/Southeast"},"8646":{"ln":"Perth","sn":"Perth"},"8647":{"ln":"Perth Northeast","sn":"Perth Northeast"},"8648":{"ln":"Perth West","sn":"Perth West"},"8649":{"ln":"Armadale, Herne Hill, Kalamunda, Rottnest Island, Spearwood, Perth","sn":"Perth"},"8659":{"ln":"Armadale, Herne Hill, Kalamunda, Rottnest Island, Spearwood, Perth","sn":"Perth"},"8710":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8711":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8712":{"ln":"Adelaide","sn":"Adelaide"},"8713":{"ln":"Adelaide East","sn":"Adelaide East"},"8714":{"ln":"Adelaide Northwest","sn":"Adelaide Northwest"},"8715":{"ln":"Adelaide West","sn":"Adelaide West"},"8716":{"ln":"Adelaide Northeast","sn":"Adelaide Northeast"},"8717":{"ln":"Adelaide South","sn":"Adelaide South"},"8718":{"ln":"McLaren Vale, Mt. Barker, Salisbury, Woodside, Adelaide","sn":"Adelaide"},"8719":{"ln":"Adelaide South","sn":"Adelaide South"},"8720":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8721":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8722":{"ln":"Adelaide","sn":"Adelaide"},"8723":{"ln":"Adelaide East","sn":"Adelaide East"},"8724":{"ln":"Adelaide Northwest","sn":"Adelaide Northwest"},"8725":{"ln":"Adelaide West","sn":"Adelaide West"},"8726":{"ln":"Adelaide Northeast","sn":"Adelaide Northeast"},"8727":{"ln":"Adelaide South","sn":"Adelaide South"},"8728":{"ln":"McLaren Vale, Mt. Barker, Salisbury, Woodside, Adelaide","sn":"Adelaide"},"8729":{"ln":"Adelaide South","sn":"Adelaide South"},"8730":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8731":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8732":{"ln":"Adelaide","sn":"Adelaide"},"8733":{"ln":"Adelaide East","sn":"Adelaide East"},"8734":{"ln":"Adelaide Northwest","sn":"Adelaide Northwest"},"8735":{"ln":"Adelaide West","sn":"Adelaide West"},"8736":{"ln":"Adelaide Northeast","sn":"Adelaide Northeast"},"8737":{"ln":"Adelaide South","sn":"Adelaide South"},"8738":{"ln":"McLaren Vale, Mt. Barker, Salisbury, Woodside, Adelaide","sn":"Adelaide"},"8739":{"ln":"Adelaide South","sn":"Adelaide South"},"8740":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8741":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8742":{"ln":"Adelaide","sn":"Adelaide"},"8743":{"ln":"Adelaide East","sn":"Adelaide East"},"8744":{"ln":"Adelaide Northwest","sn":"Adelaide Northwest"},"8745":{"ln":"Adelaide West","sn":"Adelaide West"},"8746":{"ln":"Adelaide Northeast","sn":"Adelaide Northeast"},"8747":{"ln":"Adelaide South","sn":"Adelaide South"},"8748":{"ln":"McLaren Vale, Mt. Barker, Salisbury, Woodside, Adelaide","sn":"Adelaide"},"8749":{"ln":"Adelaide South","sn":"Adelaide South"},"8810":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8811":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8812":{"ln":"Adelaide","sn":"Adelaide"},"8813":{"ln":"Adelaide East","sn":"Adelaide East"},"8814":{"ln":"Adelaide Northwest","sn":"Adelaide Northwest"},"8815":{"ln":"Adelaide West","sn":"Adelaide West"},"8816":{"ln":"Adelaide Northeast","sn":"Adelaide Northeast"},"8817":{"ln":"Adelaide South","sn":"Adelaide South"},"8818":{"ln":"McLaren Vale, Mt. Barker, Salisbury, Woodside, Adelaide","sn":"Adelaide"},"8819":{"ln":"Adelaide South","sn":"Adelaide South"},"8820":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8821":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8822":{"ln":"Adelaide","sn":"Adelaide"},"8823":{"ln":"Adelaide East","sn":"Adelaide East"},"8824":{"ln":"Adelaide Northwest","sn":"Adelaide Northwest"},"8825":{"ln":"Adelaide West","sn":"Adelaide West"},"8826":{"ln":"Adelaide Northeast","sn":"Adelaide Northeast"},"8827":{"ln":"Adelaide South","sn":"Adelaide South"},"8828":{"ln":"McLaren Vale, Mt. Barker, Salisbury, Woodside, Adelaide","sn":"Adelaide"},"8829":{"ln":"Adelaide South","sn":"Adelaide South"},"8830":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8831":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8832":{"ln":"Adelaide","sn":"Adelaide"},"8833":{"ln":"Adelaide East","sn":"Adelaide East"},"8834":{"ln":"Adelaide Northwest","sn":"Adelaide Northwest"},"8835":{"ln":"Adelaide West","sn":"Adelaide West"},"8836":{"ln":"Adelaide Northeast","sn":"Adelaide Northeast"},"8837":{"ln":"Adelaide South","sn":"Adelaide South"},"8838":{"ln":"McLaren Vale, Mt. Barker, Salisbury, Woodside, Adelaide","sn":"Adelaide"},"8839":{"ln":"Adelaide Northeast","sn":"Adelaide Northeast"},"8840":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8841":{"ln":"Adelaide City Centre","sn":"Adelaide"},"8842":{"ln":"Adelaide","sn":"Adelaide"},"8843":{"ln":"Adelaide East","sn":"Adelaide East"},"8844":{"ln":"Adelaide Northwest","sn":"Adelaide Northwest"},"8845":{"ln":"Adelaide West","sn":"Adelaide West"},"8846":{"ln":"Adelaide Northeast","sn":"Adelaide Northeast"},"8847":{"ln":"Adelaide South","sn":"Adelaide South"},"8848":{"ln":"McLaren Vale, Mt. Barker, Salisbury, Woodside, Adelaide","sn":"Adelaide"},"8849":{"ln":"Adelaide South","sn":"Adelaide South"},"8920":{"ln":"Wanneroo, Perth North/Northwest","sn":"Perth"},"8921":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8922":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8923":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8924":{"ln":"Perth North/Northwest","sn":"Perth North/Northwest"},"8925":{"ln":"Perth East/Southeast","sn":"Perth East/Southeast"},"8926":{"ln":"Perth","sn":"Perth"},"8927":{"ln":"Perth Northeast","sn":"Perth Northeast"},"8928":{"ln":"Perth West","sn":"Perth West"},"8929":{"ln":"Armadale, Herne Hill, Kalamunda, Rottnest Island, Spearwood, Perth","sn":"Perth"},"8930":{"ln":"Wanneroo, Perth North/Northwest","sn":"Perth"},"8931":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8932":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8933":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8934":{"ln":"Perth North/Northwest","sn":"Perth North/Northwest"},"8935":{"ln":"Perth East/Southeast","sn":"Perth East/Southeast"},"8936":{"ln":"Perth","sn":"Perth"},"8937":{"ln":"Perth Northeast","sn":"Perth Northeast"},"8938":{"ln":"Perth West","sn":"Perth West"},"8939":{"ln":"Armadale, Herne Hill, Kalamunda, Rottnest Island, Spearwood, Perth","sn":"Perth"},"8940":{"ln":"Wanneroo, Perth North/Northwest","sn":"Perth"},"8941":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8942":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8943":{"ln":"Perth City & Southwest","sn":"Perth City & Southwest"},"8944":{"ln":"Perth North/Northwest","sn":"Perth North/Northwest"},"8945":{"ln":"Perth East/Southeast","sn":"Perth East/Southeast"},"8946":{"ln":"Perth","sn":"Perth"},"8947":{"ln":"Perth Northeast","sn":"Perth Northeast"},"8948":{"ln":"Perth West","sn":"Perth West"},"8949":{"ln":"Armadale, Herne Hill, Kalamunda, Rottnest Island, Spearwood, Perth","sn":"Perth"},"25551":{"ln":"Fictitious use","sn":"Fictitious use"},"27010":{"ln":"Fictitious use","sn":"Fictitious use"},"37010":{"ln":"Fictitious use","sn":"Fictitious use"},"75551":{"ln":"Fictitious use","sn":"Fictitious use"},"77010":{"ln":"Fictitious use","sn":"Fictitious use"},"85551":{"ln":"Fictitious use","sn":"Fictitious use"},"87010":{"ln":"Fictitious use","sn":"Fictitious use"},"89162":{"ln":"Christmas Island","sn":"Christmas Island"},"89164":{"ln":"Cocos/Keeling Islands","sn":"Cocos/Keeling Islands"},"255.":{"ln":"Kempsey, Taree, Lord Howe Island, Muswellbrook","sn":"Kempsey"},"2555.":{"ln":"Kempsey, Taree, Lord Howe Island, Muswellbrook","sn":"Kempsey"},"270.":{"ln":"Sydney","sn":"Sydney"},"2701.":{"ln":"Sydney","sn":"Sydney"},"291.":{"ln":"Sydney","sn":"Sydney"},"296.":{"ln":"Sydney City Centre","sn":"Sydney"},"370.":{"ln":"Melbourne","sn":"Melbourne"},"3701.":{"ln":"Melbourne","sn":"Melbourne"},"72.":{"ln":"Brisbane, Bribie Island","sn":"Brisbane"},"73.":{"ln":"Brisbane, Bribie Island","sn":"Brisbane"},"755.":{"ln":"Gold Coast, Beaudesert","sn":"Gold Coast"},"7555.":{"ln":"Gold Coast, Beaudesert","sn":"Gold Coast"},"770.":{"ln":"North-eastern Australia (QLD)","sn":"North-east"},"7701.":{"ln":"North-eastern Australia (QLD)","sn":"North-east"},"855.":{"ln":"Perth","sn":"Perth"},"8555.":{"ln":"Perth","sn":"Perth"},"861.":{"ln":"Perth","sn":"Perth"},"865.":{"ln":"Perth","sn":"Perth"},"870.":{"ln":"Adelaide","sn":"Adelaide"},"8701.":{"ln":"Adelaide","sn":"Adelaide"},"891.":{"ln":"Derby (including Cocos & Christmas Islands)","sn":"Derby"}};
ilib.data.extarea_NZ = {"43":{"ln":"Wellington","sn":"Wellington"},"44":{"ln":"Wellington","sn":"Wellington"},"45":{"ln":"Wellington","sn":"Wellington"},"46":{"ln":"Wellington","sn":"Wellington"},"48":{"ln":"Wellington","sn":"Wellington"},"62":{"ln":"Hawera","sn":"Hawera"},"75":{"ln":"Tauranga","sn":"Tauranga"},"93":{"ln":"Auckland","sn":"Auckland"},"95":{"ln":"Auckland","sn":"Auckland"},"96":{"ln":"Auckland","sn":"Auckland"},"98":{"ln":"Auckland","sn":"Auckland"},"321":{"ln":"Invercargill","sn":"Invercargill"},"345":{"ln":"Dunedin","sn":"Dunedin"},"347":{"ln":"Dunedin","sn":"Dunedin"},"353":{"ln":"Nelson","sn":"Nelson"},"354":{"ln":"Nelson","sn":"Nelson"},"361":{"ln":"Timaru","sn":"Timaru"},"369":{"ln":"Geraldine","sn":"Geraldine"},"373":{"ln":"Greymouth","sn":"Greymouth"},"376":{"ln":"Greymouth","sn":"Greymouth"},"378":{"ln":"Westport","sn":"Westport"},"394":{"ln":"Invercargill","sn":"Invercargill"},"396":{"ln":"Christchurch","sn":"Christchurch"},"397":{"ln":"Christchurch","sn":"Christchurch"},"423":{"ln":"Wellington","sn":"Wellington"},"429":{"ln":"Paraparaumu","sn":"Paraparaumu"},"490":{"ln":"Paraparaumu","sn":"Paraparaumu"},"630":{"ln":"Featherston","sn":"Featherston"},"634":{"ln":"Wanganui","sn":"Wanganui"},"635":{"ln":"Palmerston North","sn":"Palmerston North"},"683":{"ln":"Napier","sn":"Napier"},"684":{"ln":"Napier","sn":"Napier"},"685":{"ln":"Waipukurau","sn":"Waipukurau"},"687":{"ln":"Napier","sn":"Napier"},"695":{"ln":"Palmerston North","sn":"Palmerston North"},"730":{"ln":"Whakatane","sn":"Whakatane"},"737":{"ln":"Taupo","sn":"Taupo"},"738":{"ln":"Taupo","sn":"Taupo"},"783":{"ln":"Hamilton","sn":"Hamilton"},"784":{"ln":"Hamilton","sn":"Hamilton"},"785":{"ln":"Hamilton","sn":"Hamilton"},"787":{"ln":"Te Kuiti","sn":"Te Kuiti"},"789":{"ln":"Taumarunui","sn":"Taumarunui"},"790":{"ln":"Taupo","sn":"Taupo"},"791":{"ln":"Rotorua","sn":"Rotorua"},"793":{"ln":"Tauranga","sn":"Tauranga"},"795":{"ln":"Hamilton","sn":"Hamilton"},"797":{"ln":"Hamilton","sn":"Hamilton"},"923":{"ln":"Pukekohe","sn":"Pukekohe"},"941":{"ln":"Auckland","sn":"Auckland"},"944":{"ln":"Auckland","sn":"Auckland"},"945":{"ln":"Whangarei","sn":"Whangarei"},"947":{"ln":"Auckland","sn":"Auckland"},"948":{"ln":"Auckland","sn":"Auckland"},"3206":{"ln":"Edendale","sn":"Edendale"},"3225":{"ln":"Otautau","sn":"Otautau"},"3226":{"ln":"Otautau","sn":"Otautau"},"3234":{"ln":"Riverton","sn":"Riverton"},"3248":{"ln":"Lumsden","sn":"Lumsden"},"3249":{"ln":"Te Anau","sn":"Te Anau"},"3304":{"ln":"Akaroa","sn":"Akaroa"},"3305":{"ln":"Waitangi","sn":"Waitangi"},"3314":{"ln":"Amberley","sn":"Amberley"},"3315":{"ln":"Culverden","sn":"Culverden"},"3317":{"ln":"Darfield","sn":"Darfield"},"3318":{"ln":"Darfield","sn":"Darfield"},"3319":{"ln":"Cheviot","sn":"Cheviot"},"3417":{"ln":"Milton","sn":"Milton"},"3430":{"ln":"Mount Cook","sn":"Mount Cook"},"3435":{"ln":"Twizel","sn":"Twizel"},"3436":{"ln":"Kurow","sn":"Kurow"},"3438":{"ln":"Kurow","sn":"Kurow"},"3441":{"ln":"Queenstown","sn":"Queenstown"},"3442":{"ln":"Queenstown","sn":"Queenstown"},"3443":{"ln":"Wanaka","sn":"Wanaka"},"3444":{"ln":"Ranfurly","sn":"Ranfurly"},"3445":{"ln":"Cromwell","sn":"Cromwell"},"3446":{"ln":"Roxburgh","sn":"Roxburgh"},"3465":{"ln":"Palmerston","sn":"Palmerston"},"3485":{"ln":"Lawrence","sn":"Lawrence"},"3520":{"ln":"Blenheim","sn":"Blenheim"},"3521":{"ln":"Nelson","sn":"Nelson"},"3522":{"ln":"Nelson","sn":"Nelson"},"3523":{"ln":"Murchison","sn":"Murchison"},"3524":{"ln":"Takaka","sn":"Takaka"},"3525":{"ln":"Takaka","sn":"Takaka"},"3526":{"ln":"Motueka","sn":"Motueka"},"3527":{"ln":"Motueka","sn":"Motueka"},"3528":{"ln":"Motueka","sn":"Motueka"},"3529":{"ln":"Nelson","sn":"Nelson"},"3571":{"ln":"Nelson","sn":"Nelson"},"3576":{"ln":"Nelson","sn":"Nelson"},"3680":{"ln":"Fairlie","sn":"Fairlie"},"3685":{"ln":"Fairlie","sn":"Fairlie"},"3689":{"ln":"Waimate","sn":"Waimate"},"3750":{"ln":"Haast","sn":"Haast"},"3751":{"ln":"Fox Glacier","sn":"Fox Glacier"},"3752":{"ln":"Franz Josef","sn":"Franz Josef"},"3956":{"ln":"Timaru","sn":"Timaru"},"3984":{"ln":"Blenheim","sn":"Blenheim"},"3989":{"ln":"Nelson","sn":"Nelson"},"4201":{"ln":"Paraparaumu","sn":"Paraparaumu"},"6321":{"ln":"Marton","sn":"Marton"},"6322":{"ln":"Marton","sn":"Marton"},"6323":{"ln":"Palmerston North","sn":"Palmerston North"},"6324":{"ln":"Palmerston North","sn":"Palmerston North"},"6325":{"ln":"Palmerston North","sn":"Palmerston North"},"6326":{"ln":"Palmerston North","sn":"Palmerston North"},"6327":{"ln":"Marton","sn":"Marton"},"6328":{"ln":"Palmerston North","sn":"Palmerston North"},"6329":{"ln":"Palmerston North","sn":"Palmerston North"},"6362":{"ln":"Palmerston North","sn":"Palmerston North"},"6374":{"ln":"Dannevirke","sn":"Dannevirke"},"6375":{"ln":"Pahiatua","sn":"Pahiatua"},"6376":{"ln":"Pahiatua","sn":"Pahiatua"},"6385":{"ln":"Ohakune","sn":"Ohakune"},"6387":{"ln":"Waiouru","sn":"Waiouru"},"6750":{"ln":"Mokau","sn":"Mokau"},"6761":{"ln":"Opunake","sn":"Opunake"},"6763":{"ln":"Opunake","sn":"Opunake"},"6769":{"ln":"New Plymouth","sn":"New Plymouth"},"6864":{"ln":"Ruatoria","sn":"Ruatoria"},"6946":{"ln":"Masterton","sn":"Masterton"},"6949":{"ln":"Levin","sn":"Levin"},"6965":{"ln":"Wanganui","sn":"Wanganui"},"6968":{"ln":"New Plymouth","sn":"New Plymouth"},"6970":{"ln":"New Plymouth","sn":"New Plymouth"},"6974":{"ln":"Napier","sn":"Napier"},"6980":{"ln":"Napier","sn":"Napier"},"6986":{"ln":"Gisborne","sn":"Gisborne"},"7312":{"ln":"Whakatane","sn":"Whakatane"},"7315":{"ln":"Opotiki","sn":"Opotiki"},"7325":{"ln":"Opotiki","sn":"Opotiki"},"7826":{"ln":"Huntly","sn":"Huntly"},"7828":{"ln":"Huntly","sn":"Huntly"},"7862":{"ln":"Paeroa","sn":"Paeroa"},"7863":{"ln":"Waihi","sn":"Waihi"},"7865":{"ln":"Whangamata","sn":"Whangamata"},"7873":{"ln":"Otorohanga","sn":"Otorohanga"},"7880":{"ln":"Matamata","sn":"Matamata"},"7881":{"ln":"Matamata","sn":"Matamata"},"7882":{"ln":"Putaruru","sn":"Putaruru"},"7883":{"ln":"Putaruru","sn":"Putaruru"},"7884":{"ln":"Morrinsville","sn":"Morrinsville"},"7885":{"ln":"Putaruru","sn":"Putaruru"},"7886":{"ln":"Putaruru","sn":"Putaruru"},"7887":{"ln":"Morrinsville","sn":"Morrinsville"},"7888":{"ln":"Matamata","sn":"Matamata"},"7889":{"ln":"Morrinsville","sn":"Morrinsville"},"7922":{"ln":"Whakatane","sn":"Whakatane"},"7928":{"ln":"Tauranga","sn":"Tauranga"},"9401":{"ln":"Kaikohe","sn":"Kaikohe"},"9402":{"ln":"Kawakawa","sn":"Kawakawa"},"9403":{"ln":"Kawakawa","sn":"Kawakawa"},"9404":{"ln":"Kawakawa","sn":"Kawakawa"},"9405":{"ln":"Kaikohe","sn":"Kaikohe"},"9406":{"ln":"Kaitaia","sn":"Kaitaia"},"9407":{"ln":"Kaikohe","sn":"Kaikohe"},"9408":{"ln":"Kaitaia","sn":"Kaitaia"},"9409":{"ln":"Kaitaia","sn":"Kaitaia"},"9420":{"ln":"Helensville","sn":"Helensville"},"9422":{"ln":"Warkworth","sn":"Warkworth"},"9423":{"ln":"Warkworth","sn":"Warkworth"},"9424":{"ln":"Hibiscus Coast","sn":"Hibiscus Coast"},"9425":{"ln":"Warkworth","sn":"Warkworth"},"9426":{"ln":"Hibiscus Coast","sn":"Hibiscus Coast"},"9427":{"ln":"Hibiscus Coast","sn":"Hibiscus Coast"},"9428":{"ln":"Hibiscus Coast","sn":"Hibiscus Coast"},"9429":{"ln":"Great Barrier Island","sn":"Great Barrier Island"},"9431":{"ln":"Maungaturoto","sn":"Maungaturoto"},"9439":{"ln":"Dargaville","sn":"Dargaville"},"9983":{"ln":"Whangarei","sn":"Whangarei"},"323620":{"ln":"Winton","sn":"Winton"},"324621":{"ln":"Tokanui","sn":"Tokanui"},"320.":{"ln":"Gore","sn":"Gore"},"322.":{"ln":"Invercargill","sn":"Invercargill"},"323.":{"ln":"Invercargill","sn":"Invercargill"},"3236.":{"ln":"Invercargill","sn":"Invercargill"},"32362.":{"ln":"Invercargill","sn":"Invercargill"},"33.":{"ln":"Christchurch","sn":"Christchurch"},"330.":{"ln":"Ashburton","sn":"Ashburton"},"331.":{"ln":"Rangiora","sn":"Rangiora"},"341.":{"ln":"Balclutha","sn":"Balclutha"},"343.":{"ln":"Oamaru","sn":"Oamaru"},"344.":{"ln":"Alexandra","sn":"Alexandra"},"346.":{"ln":"Dunedin","sn":"Dunedin"},"348.":{"ln":"Dunedin","sn":"Dunedin"},"357.":{"ln":"Blenheim","sn":"Blenheim"},"368.":{"ln":"Timaru","sn":"Timaru"},"375.":{"ln":"Hokitika","sn":"Hokitika"},"395.":{"ln":"Dunedin","sn":"Dunedin"},"398.":{"ln":"Christchurch","sn":"Christchurch"},"420.":{"ln":"Wellington","sn":"Wellington"},"49.":{"ln":"Wellington","sn":"Wellington"},"636.":{"ln":"Levin","sn":"Levin"},"637.":{"ln":"Masterton","sn":"Masterton"},"638.":{"ln":"Taihape","sn":"Taihape"},"675.":{"ln":"New Plymouth","sn":"New Plymouth"},"676.":{"ln":"Stratford","sn":"Stratford"},"686.":{"ln":"Gisborne","sn":"Gisborne"},"73.":{"ln":"Rotorua","sn":"Rotorua"},"732.":{"ln":"Whakatane","sn":"Whakatane"},"782.":{"ln":"Hamilton","sn":"Hamilton"},"786.":{"ln":"Thames","sn":"Thames"},"787.":{"ln":"Te Awamutu","sn":"Te Awamutu"},"792.":{"ln":"Rotorua","sn":"Rotorua"},"92.":{"ln":"Auckland","sn":"Auckland"},"943.":{"ln":"Whangarei","sn":"Whangarei"},"99.":{"ln":"Auckland","sn":"Auckland"},"998.":{"ln":"Auckland","sn":"Auckland"}};
ilib.data.extarea_TW = {"2":{"ln":"Taipei County, Keelung, Panchiao, Sanchung, Yingge, Yungho, Jilong","sn":"Taipei"},"7":{"ln":"Â Kaohsiung County, Fengshan, Gangshan, Kaohsiung, Jiuqutang, Nanzi, Qishan, Zuoying","sn":"Kaohsiung"},"32":{"ln":"Ilan County, Ruifang","sn":"Ilan"},"33":{"ln":"Taoyuan County, Daxi","sn":"Taoyuan"},"34":{"ln":"Taoyuan County, Zhongli","sn":"Taoyuan"},"36":{"ln":"Hsinchu County, Hukou, Zhudong","sn":"Hsinchu"},"37":{"ln":"Miaoli County, Zhunan, Miaoli","sn":"Miaoli"},"38":{"ln":"Hualian County","sn":"Hualian"},"39":{"ln":"Ilan County, Jiaoqi, Su'ao, Luodong","sn":"Ilan"},"45":{"ln":"Taizhong County, Houli, Lishan","sn":"Taichung"},"46":{"ln":"Dadu, Dajia, Shalu, Qingshui, Rinan, Wuchi","sn":"Dadu"},"47":{"ln":"Changhua County, Lugang","sn":"Changhua"},"48":{"ln":"Shetou Tianzhong Yongjing Yuanlin","sn":"Shetou"},"49":{"ln":"Nantou County, Buli, Riyuetan, Xincun, Zhongxing","sn":"Nantou"},"56":{"ln":"Huwei","sn":"Huwei"},"62":{"ln":"Tainan County, Tainan","sn":"Tainan"},"66":{"ln":"Tainan County, Xinying","sn":"Tainan"},"69":{"ln":"Tainan County, Penghu","sn":"Tainan"},"88":{"ln":"Donggang","sn":"Donggang"},"89":{"ln":"Taitung County","sn":"Taitung"},"823":{"ln":"Kinmen","sn":"Kinmen"},"836":{"ln":"Matzu","sn":"Matzu"},"3.":{"ln":"Taoyuan, Tachi","sn":"Taoyuan"},"4.":{"ln":"Taizhong County, Wurim, Wufeng, Fengyuan, Shalong, Yuanlin","sn":"Taichung"},"5.":{"ln":"Yunlin County, Dalin, Jiayi, Minxiong, Beigang, Douliu","sn":"Yunlin"},"6.":{"ln":"Tainan County, Chiali, Makung, Shanhua","sn":"Tainan"},"8.":{"ln":"Pingtung County, Chaozhou, Pingdong, Matzu Dao","sn":"Pingtung"},"8..":{"ln":"Matzu Dao, Kinmen","sn":"Matzu Dao"}};
ilib.data.extstates_FR = {"states":[[-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1],[2,3,4,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-6]]};
ilib.data.extstates_AU = {"states":[[-1,-1,1,15,-1,-1,-1,24,38,-1,-1,-1,-1,-1,-1],[-1,-1,-1,2,3,4,7,8,11,12,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,5,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[9,-1,-1,-8,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,13,-8,-8,-8,-8,14,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-8],[-8,-8,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,16,17,18,19,22,23,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[20,-8,-8,-8,-1,-8,-1,-8,-8,-8,-1,-1,-1,-1,-1],[-1,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,-8,-8,-8,-8,-8,-8,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[25,-1,26,27,31,32,-1,35,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-8],[-8,-8,28,29,-8,-8,-8,-8,30,-8,-1,-1,-1,-1,-8],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,33,-8,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,34,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[36,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,39,45,51,58,63,-1,-1,-1,-1,-1],[-1,-8,40,41,42,43,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,44,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,46,47,48,49,50,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-8],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-8],[52,54,55,56,57,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,59,60,61,62,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,64,66,67,68,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,65,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1]]};
ilib.data.extstates_NZ = {"states":[[-1,-1,-1,1,30,-1,34,50,-1,61,-1,-1,-1,-1,-1],[-1,-1,2,11,14,20,23,25,-1,27,-1,-1,-1,-1,-1],[3,-8,4,5,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-8,-1,6,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,9,-1,-8,-8,-1,-1,-1,-1,-1],[-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[12,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-8,-8,-1,-8,-8,-8,-1,-1,-1,-1,-8],[-1,15,-1,16,17,-8,18,-8,19,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-8],[-8,-1,-1,-1,-1,-8,-8,-1,-8,-1,-1,-1,-1,-1,-8],[-1,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,21,-8,-8,-1,-1,22,-1,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-8,-1,-1,-1,-1,-1,-1,24,-8,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-8,-1,-1,-1,-8,-1,-1,-1,-1,-8],[-1,-1,-1,-8,-1,26,-8,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-8,28,-8,-8,29,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-8,-1,-1,-1,-1,-8,-1,-1,-1,-1,-8],[-1,-1,31,-8,-8,-8,-8,-1,-8,33,-1,-1,-1,-1,-1],[32,-1,-1,-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-8,35,-1,-1,-1,40,43,45,-1,-1,-1,-1,-1],[-8,-1,36,-1,-8,-8,37,38,39,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-8,-8,-8,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,41,42,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-8,-1,-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-8],[-1,-1,-1,-8,-8,-8,44,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-1,46,-8,47,48,49,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,51,-1,-8,-1,-1,54,59,-1,-1,-1,-1,-1],[-8,52,53,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-1,-8],[-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,55,-8,-8,-8,56,57,58,-8,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-1,-8,-1,-1,-1,-1,-1,-8],[-1,-1,-8,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-8,60,-8,-1,-8,-1,-8,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-8],[-1,-1,62,-8,63,-8,-8,-1,-8,67,-1,-1,-1,-1,-1],[-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8],[64,-8,65,66,-8,-8,-1,-8,-8,-1,-1,-1,-1,-1,-1],[-1,-8,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-8,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-1],[-1,-8,-1,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-1,-1,68,-1,-1,-1,-1,-1,-8],[-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-8]]};
ilib.data.extstates_TW = {"states":[[-1,-1,-8,1,2,3,4,-8,5,-1,-1,-1,-1,-1,-1],[-1,-1,-8,-8,-8,-8,-8,-8,-8,-8,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-8,-8,-8,-8,-8,-1,-1,-1,-1,-8],[-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-8],[-1,-1,-8,-1,-1,-1,-8,-1,-1,-8,-1,-1,-1,-1,-8],[-1,-1,6,7,-1,-1,-1,-1,-8,-8,-1,-1,-1,-1,-8],[-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1]]};
ilib.data.phoneres_de = {"Alabama: Birmingham; Tuscaloosa; western and central Alabama":"Alabama: Birmingham; Tuscaloosa; westliches und mittleres Alabama","Albania":"Albanien","Alberta, Canada":"Alberta, Kanada","Algeria":"Algerien","Amer. Samoa":"Amer.-Samoa","American Samoa":"Amerikanisch-Samoa","Antigua and Barbuda":"Antigua und Barbuda","Argentina":"Argentinien","Arizona: Glendale, Sun City, Buckeye, Peoria, western Phoenix suburbs":"Arizona: Glendale, Sun City, Buckeye, Peoria, westliche Vororte von Phoenix","Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, eastern Phoenix suburbs":"Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, Ã¶stliche Vororte von Phoenix","Armenia":"Armenien","Armenia, Nagorno-Karabakh":"Armenien, Bergkarabach","Ascension Island":"Ascension","Australia":"Australien","Australia, Christmas Island, Cocos Islands":"Australien, Weihnachtsinsel, Kokosinseln","Austria":"Ãsterreich","Azerbaijan":"Aserbaidschan","Azerbaijan, Nagorno-Karabakh":"Aserbaidschan, Bergkarabach","BVIs":"Britische Jungferninseln","Baleares":"Balearen","Bangladesh":"Bangladesch","Beijing":"Peking","Beijing åäº¬å¸":"Peking åäº¬å¸","Belgium":"Belgien","Bolivia":"Bolivien","Bosnia and Herzegovina":"Bosnien und Herzegowina","Botswana":"Botsuana","Brazil":"Brasilien","British Columbia, Canada":"British Columbia, Kanada","British Columbia: Victoria, Prince George, Prince Rupert, Kelowna; also Hyder, Alaska.":"British Columbia: Victoria, Prince George, Prince Rupert, Kelowna; auch Hyder, Alaska.","British Indian Ocean":"Britisches Territorium im Indischen Ozean","British Indian Ocean Territory":"Britisches Territorium im Indischen Ozean","Bulgaria":"Bulgarien","California":"Kalifornien","California: East Bay Area, Oakland, Berkeley, Alameda":"Kalifornien: Ã¶stliche Bay Area, Oakland, Berkeley, Alameda","California: Stockton, Modesto, Merced, Tracy, San Andreas and central California":"Kalifornien: Stockton, Modesto, Merced, Tracy, San Andreas und Zentralkalifornien","Cambodia":"Kambodscha","Cameroon":"Kamerun","Cape Verde":"Kap Verde","Carrier Access":"Anbieterzugriff","Caymans":"Kaimaninseln","Central African Republic":"Zentralafrikanische Republik","Central Arkansas: Little Rock, Hot Springs":"Zentral-Arkansas: Little Rock, Hot Springs","Central California: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin":"Zentralkalifornien: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin","Central California: Fresno, Visalia, Madera, Hanford, Tulare":"Zentralkalifornien: Fresno, Visalia, Madera, Hanford, Tulare","Central California: Oakland, Berkeley, Alameda":"Zentralkalifornien: Oakland, Berkeley, Alameda","Central California: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond":"Zentralkalifornien: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond","Central California: Sacramento, Davis, Roseville":"Zentralkalifornien: Sacramento, Davis, Roseville","Central California: Salinas, Hollister, Monterey, Carmel, Santa Cruz":"Zentralkalifornien: Salinas, Hollister, Monterey, Carmel, Santa Cruz","Central California: San Francisco":"Zentralkalifornien: San Francisco","Central California: San Francisco, Marin County":"Zentralkalifornien: San Francisco, Marin County","Central California: San Jose":"Zentralkalifornien: San Jose","Central California: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy":"Zentralkalifornien: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy","Central California: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, southern San Francisco suburbs":"Zentralkalifornien: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, sÃ¼dliche Vororte von San Francisco","Central Coastal California: Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley":"Zentralkalifornien, KÃ¼ste: Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley","Central Colorado: Denver, Boulder, Longmont, Aurora":"Zentral-Colorado: Denver, Boulder, Longmont, Aurora","Central Eastern Florida: Orlando, Cocoa Beach, St Cloud":"Ãstliches Zentral-Florida: Orlando, Cocoa Beach, St. Cloud","Central Eastern Florida: Orlando, Florida, St. Cloud":"Ãstliches Zentral-Florida: Orlando, Florida, St. Cloud","Central Eastern Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart":"Ãstliches Zentral-Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart","Central Eastern Louisiana: Baton Rouge, Donaldsonville, New Roads, White Castle":"Ãstliches Zentral-Louisiana: Baton Rouge, Donaldsonville, New Roads, White Castle","Central Eastern Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood":"Ãstliches Zentral-Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood","Central Florida: Gainesville, Ocala, Inverness, Dunnellon":"Zentral-Florida: Gainesville, Ocala, Inverness, Dunnellon","Central Florida: St Petersburg, Dunedin":"Zentral-Florida: St Petersburg, Dunedin","Central Florida: Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar":"Zentral-Florida: Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar","Central Georgia: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry":"Zentral-Georgia: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry","Central Illinois: Springfield, Champaign Decatur, Urbana, Lincoln":"Zentral-Illinois: Springfield, Champaign Decatur, Urbana, Lincoln","Central Indiana: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove":"Zentral-Indiana: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove","Central Indiana: Lafayette, Marion, Muncie, Richmond":"Zentral-Indiana: Lafayette, Marion, Muncie, Richmond","Central Iowa: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield":"Zentral-Iowa: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield","Central Michigan: Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso":"Zentral-Michigan: Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso","Central Minnesota: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton":"Zentral-Minnesota: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton","Central Mississippi: Jackson, Meridian, Natchez, McComb, Hattiesburg":"Zentral-Mississippi: Jackson, Meridian, Natchez, McComb, Hattiesburg","Central North Georgia: Marietta, Cedartown, Gainesville, Atlanta suburbs":"NÃ¶rdliches Zentral-Georgia: Marietta, Cedartown, Gainesville, Vororte von Atlanta","Central Oklahoma: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha":"Zentral-Oklahoma: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha","Central Ontario, Canada: Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie":"Zentral-Ontario, Kanada: Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie","Central South Carolina: Columbia, Rock Hill, Sumter, Aiken":"Zentral-South Carolina: Columbia, Rock Hill, Sumter, Aiken","Central Southern Quebec, Canada: Laval, Montreal suburbs":"SÃ¼dliches Zentral-QuÃ©bec, Kanada: Laval, Vororte von Montreal","Central Texas: Austin, San Marcos, Lampasas, Bastrop, Milam":"Zentral-Texas: Austin, San Marcos, Lampasas, Bastrop, Milam","Central Western Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg":"Westliches Zentral-Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg","Central and Southeastern New Jersey: Atlantic City, Trenton":"Mittleres und sÃ¼dÃ¶stliches New Jersey: Atlantic City, Trenton","Central and Southeastern Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens":"SÃ¼dÃ¶stliches und Zentral-Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens","Central and Southeastern Texas: Nacogdoches, Lufkin, Conroe, Huntsville":"SÃ¼dÃ¶stliches und Zentral-Texas: Nacogdoches, Lufkin, Conroe, Huntsville","Chad":"Tschad","Cologne":"KÃ¶ln","Colombia":"Kolumbien","Commonwealth of Dominica":"Commonwealth von Dominica","Comoros":"Komoren","Connecticut: Bridgeport, Danbury, New Haven, Waterbury, Southwestern Connecticut":"Connecticut: Bridgeport, Danbury, New Haven, Waterbury, sÃ¼dwestliches Connecticut","Connecticut: Bristol, Hartford, Norwich and northern and eastern Connecticut":"Connecticut: Bristol, Hartford, Norwich; nÃ¶rdliches und Ã¶stliches Connecticut","Cook Islands":"Cookinseln","Cordoba":"CÃ³rdoba","Croatia":"Kroatien","Cuba":"Kuba","Cyprus":"Zypern","Czech Republic":"Tschechische Republik","CÃ´te d'Ivoire":"CÃ´te dâIvoire","D.R.":"Dominikanische Republik","DRC":"Kongo, Demokratische Volksrepublik","Democratic Republic of the Congo":"Kongo, Demokratische Republik","Denmark":"DÃ¤nemark","Dir. Assistance":"Auskunft","Directory Assistance Applications":"Auskunftsanwendungen","Djibouti":"Dschibuti","Dominican Republic":"Dominikanische Republik","E Arkansas":"O-Arkansas","E Florida":"O-Florida","E Iowa":"O-Iowa","E Kansas":"O-Kansas","E Kentucky":"O-Kentucky","E Louisiana":"O-Louisiana","E Maryland":"O-Maryland","E Massachusetts":"O-Massachusetts","E Nebraska":"O-Nebraska","E Ontario":"O-Ontario","E South Carolina":"O-South Carolina","E Tennessee":"O-Tennessee","E Washington":"O-Washington","E Wisconsin":"O-Wisconsin","East Central Minnesota: St Paul, Lindstrom, Red Wing, Hastings":"Ãstliches Zentral-Minnesota: St Paul, Lindstrom, Red Wing, Hastings","East Central Missouri: St. Charles, Chesterfield, Union, De Soto, Troy":"Ãstliches Zentral-Missouri: St. Charles, Chesterfield, Union, De Soto, Troy","East Central New Jersey: New Brunswick, Neptune, Freehold, Lakewood":"Ãstliches Zentral-New Jersey: New Brunswick, Neptune, Freehold, Lakewood","East Timor":"Osttimor","Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"Ãstliches Arkansas: Texarkana, Jonesboro, Pine Bluff","Eastern Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City":"Ãstliches Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City","Eastern Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton":"Ãstliches Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton","Eastern Kansas: Kansas City, Overland Park, Paola, Leavenworth":"Ãstliches Kansas: Kansas City, Overland Park, Paola, Leavenworth","Eastern Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville":"Ãstliches Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville","Eastern Maryland: Baltimore, Annapolis, Salisbury":"Ãstliches Maryland: Baltimore, Annapolis, Salisbury","Eastern Massachusetts: Boston, Cambridge":"Ãstliches Massachusetts: Boston, Cambridge","Eastern Massachusetts: Saugus, Norwood, Waltham, Woburn, Boston suburbs":"Ãstliches Massachusetts: Saugus, Norwood, Waltham, Woburn, Vororte von Boston","Eastern Nebraska: Omaha, Lincoln, Norfolk, Superior":"Ãstliches Nebraska: Omaha, Lincoln, Norfolk, Superior","Eastern Ontario, Canada: Ottawa":"Ãstliches Ontario, Kanada: Ottawa","Eastern Ontario, Canada: Ottawa, Kingston":"Ãstliches Ontario, Kanada: Ottawa, Kingston","Eastern South Carolina: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island":"Ãstliches South Carolina: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island","Eastern Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland":"Ãstliches Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland","Eastern Washington: Spokane, the Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg":"Ãstliches Washington: Spokane, Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg","Eastern Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac":"Ãstliches Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac","Egypt":"Ãgypten","Emergency Services Number":"Notrufnummer","Equatorial Guinea":"Ãquatorialguinea","Estonia":"Estland","Ethiopia":"Ãthiopien","European Telephony":"EuropÃ¤ischer Telefonnummerierungsraum","European Telephony Numbering Space":"EuropÃ¤ischer Telefonnummerierungsraum","FYRoM":"Mazedonien, ehemalige jugoslawische Republik","Falkland Islands":"Falklandinseln","Falklands":"Falklandinseln","Faroe Islands":"FÃ¤rÃ¶er","Federated States of Micronesia":"Mikronesien","Fiji":"Fidschi","Finland":"Finnland","Finland, Ãland Islands":"Finnland, Ãlandinseln","Former Yugoslav Republic of Macedonia":"Mazedonien, ehemalige jugoslawische Republik","France":"Frankreich","Freephone":"GebÃ¼hrenfreie Nummer","French Guiana":"FranzÃ¶sisch-Guayana","French Polynesia":"FranzÃ¶sisch-Polynesien","Gabon":"Gabun","Germany":"Deutschland","Global Mobile Satellite System":"Globales mobiles Satellitensystem","Global Satellite":"Globales Satellitensystem","Greece":"Griechenland","Greenland":"GrÃ¶nland","Guadaloupe Island":"Guadaloupe","Guadeloupe, Saint BarthÃ©lemy, Saint Martin":"Guadeloupe, Saint-BarthÃ©lemy, Saint-Martin","Hong Kong":"Hongkong","Hungary":"Ungarn","Hyderabad East (Ghatkeswar), Hyderabad":"Hyderabad Ost (Ghatkeswar), Hyderabad","Iceland":"Island","Illinois: Aurora, Naperville, western Chicago":"Illinois: Aurora, Naperville, Chicago West","Illinois: Aurora, Naperville, western Chicago suburbs":"Illinois: Aurora, Naperville, westliche Vororte von Chicago","Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, western Chicago suburbs":"Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, westliche Vororte von Chicago","Inbound Intl.":"Eingehend intl.","Inbound international calls for carrier-specific services":"Eingehende internationale Anrufe fÃ¼r anbieterspezifische Dienste","India":"Indien","Indiana: Southern Indiana, including Bloomington, Evansville, Jeffersonville, New Albany, and Terre Haute).":"Indiana: sÃ¼dliches Indiana, einschl. Bloomington, Evansville, Jeffersonville, New Albany, und Terre Haute","Indonesia":"Indonesien","International Networks":"Internationale Netzwerke","International Networks (country code)":"Internationale Netzwerke (Landeskennzahl)","International Premium Rate Service":"Internationaler Premium-Rate-Dienst","Iraq":"Irak","Ireland":"Irland","Islands of RÃ©union and Mayotte":"RÃ©union und Mayotte","Israel, Palestinian Authority":"Israel, PalÃ¤stinensische AutonomiebehÃ¶rde","Italy":"Italien","Italy, Vatican City":"Italien, Vatikanstadt","Jamaica":"Jamaika","Jordan":"Jordanien","Kentucky: west of the Pennyrile Parkway, including Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray, and Paducah":"Kentucky: westlich des Pennyrile Parkway, einschl. Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray und Paducah","Kenya":"Kenia","Kyrgyzstan":"Kirgisistan","LD Carrier":"Verbindungsnetzbetreiber","Latvia":"Lettland","Lebanon":"Libanon","Libya":"Libyen","Lithuania":"Litauen","Long Distance Carrier Use":"Nutzung durch Verbindungsnetzbetreiber","Luxembourg":"Luxemburg","Madagascar":"Madagaskar","Malaga":"MÃ¡laga","Maldives":"Malediven","Manitoba, Canada":"Manitoba, Kanada","Marianas":"Marianen","Marshall Islands":"Marshallinseln","Martinique Island":"Martinique","Mauritania":"Mauretanien","Mexico":"Mexiko","Mexico City":"Mexiko-Stadt","Mexico City, Federal District":"Mexiko-Stadt, Hauptstadtbezirk","Michigan: Port Huron, Flint, Lapeer, and Michigan \"Thumb\"":"Michigan: Port Huron, Flint, Lapeer und der \"Daumen\" von Michigan","Micronesia":"Mikronesien","Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, northwest Minneapolis":"Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, nordwestliches Minneapolis","Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark and eastern Missouri excluding St. Louis":"Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark und Ã¶stliches Missouri ausschl. St. Louis","Mobile Number":"Handynummer","Moldova":"Moldau","Mongolia":"Mongolei","Morocco":"Marokko","Morocco, Western Sahara":"Marokko, Westsahara","Mozambique":"Mosambik","Munich":"MÃ¼nchen","N Alberta":"N-Alberta","N California":"N-Kalifornien","N Georgia":"N-Georgia","N Illinois":"N-Illinois","N Kansas":"N-Kansas","N Kentucky":"N-Kentucky","N Louisiana":"N-Louisiana","N Michigan":"N-Michigan","N Minnesota":"N-Minnesota","N Mississippi":"N-Mississippi","N Ohio":"N-Ohio","N Texas":"N-Texas","N Virginia":"N-Virginia","N Wisconsin":"N-Wisconsin","NE Alabama":"NO-Alabama","NE California":"NO-Kalifornien","NE Florida":"NO-Florida","NE Illinois":"NO-Illinois","NE Indiana":"NO-Indiana","NE Massachusetts":"NO-Massachusetts","NE New York":"NO-New York","NE North Carolina":"NO-North Carolina","NE Ohio":"NO-Ohio","NE Oklahoma":"NO-Oklahoma","NE Pennsylvania":"NO-Pennsylvania","NE Texas":"NO-Texas","NW Arizona":"NW-Arizona","NW Arkansas":"NW-Arkansas","NW California":"NW-Kalifornien","NW Colorado":"NW-Colorado","NW Florida":"NW-Florida","NW Indiana":"NW-Indiana","NW Michigan":"NW-Michigan","NW New Jersey":"NW-New Jersey","NW New Mexico":"NW-New Mexico","NW Ohio":"NW-Ohio","NW Ontario":"NW-Ontario","NW Oregon":"NW-Oregon","NW Pennsylvania":"NW-Pennsylvania","National Rate":"Inlandstarif","Netherlands":"Niederlande","Netherlands Antilles":"NiederlÃ¤ndische Antillen","New Brunswick, Canada":"New Brunswick, Kanada","New Caledonia":"Neukaledonien","New Delhi":"Neu-Delhi","New Delhi, New Delhi":"Neu-Delhi, Neu-Delhi","New Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford, and northeast New Jersey":"New Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford und nordÃ¶stliches New Jersey","New York: Manhattan except for Marble Hill":"New York: Manhattan auÃer Marble Hill","New York: The \"Outer Boroughs\"":"New York: \"Outer Boroughs\"","New Zealand":"Neuseeland","Newfoundland":"Neufundland","Newfoundland and Labrador, Canada: St. John's":"Neufundland und Labrador, Kanada: St. John's","Norfolk Island":"Norfolkinseln","Norfolk Island, Australian Antarctic Territory":"Norfolkinseln, Australisches Antarktis-Territorium","North America":"Nordamerika","North America and the Caribbean Islands":"Nordamerika und karibische Inseln","North Carolina: Greensboro, Winston-Salem, Wilkesboro, Roxboro, and northwest North Carolina":"North Carolina: Greensboro, Winston-Salem, Wilkesboro, Roxboro und nordwestliches North Carolina","North Central Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee":"NÃ¶rdliches Zentral-Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee","North Central Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola":"NÃ¶rdliches Zentral-Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola","North Central Kentucky: Lexington, Richmond, Danville, Covington, Florence, Mount Sterling":"NÃ¶rdliche Zentral-Kentucky: Lexington, Richmond, Danville, Covington, Florence, Mount Sterling","North Central Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany":"NÃ¶rdliches und mittleres Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany","North Central New York: Syracuse, New York, Utica, Watertown":"NÃ¶rdliches Zentral-New York: Syracuse, New York, Utica, Watertown","North Central North Carolina: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro":"NÃ¶rdliches Zentral-North Carolina: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro","North Central Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson":"NÃ¶rdliches Zentral-Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson","North Central Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester":"NÃ¶rdliches Zentral-Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester","North Korea":"Nordkorea","Northeast France":"Nordostfrankreich","Northeastern Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs":"NordÃ¶stliches Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs","Northeastern Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, Chicago suburbs":"NordÃ¶stliches Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, Vororte von Chicago","Northeastern Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash":"NordÃ¶stliches Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash","Northeastern Massachusetts: Fitchburg, Peabody":"NordÃ¶stliches Massachusetts: Fitchburg, Peabody","Northeastern New York: Albany, Schenectady, Plattsburgh, Saranac Lake":"NordÃ¶stliches New York: Albany, Schenectady, Plattsburgh, Saranac Lake","Northeastern North Carolina: Greenville, Kitty Hawk, Rocky Mount":"NordÃ¶stliches North Carolina: Greenville, Kitty Hawk, Rocky Mount","Northeastern Ohio: Akron, Canton, Youngstown, Warren":"NordÃ¶stliches Ohio: Akron, Canton, Youngstown, Warren","Northeastern Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta":"NordÃ¶stliches Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta","Northeastern Pennsylvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg":"NordÃ¶stliches Pennsylvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg","Northeastern Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage":"NordÃ¶stliches Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage","Northern Alberta, Canada: Edmonton, Jasper, Grande Prairie, Peace River":"NÃ¶rdliches Alberta, Kanada: Edmonton, Jasper, Grande Prairie, Peace River","Northern California coast":"Nordkalifornische KÃ¼ste","Northern Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake":"NÃ¶rdliches Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake","Northern Ireland":"Nordirland","Northern Kansas: Colby, Topeka, Salina, Manhattan, Lawrence":"NÃ¶rdliches Kansas: Colby, Topeka, Salina, Manhattan, Lawrence","Northern Kentucky: Louisville, Frankfort, Shelbyville, Bardstown":"NÃ¶rdliches Kentucky: Louisville, Frankfort, Shelbyville, Bardstown","Northern Louisiana: Shreveport, Monroe, Alexandria, Fisher, Tallulah":"NÃ¶rdliches Louisiana: Shreveport, Monroe, Alexandria, Fisher, Tallulah","Northern Mariana Islands":"NÃ¶rdliche Marianen","Northern Michigan: Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Upper Peninsula":"NÃ¶rdliches Michigan: Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Obere Halbinsel","Northern Minnesota: Duluth, Thief River Falls, Brainerd, International Falls":"NÃ¶rdliches Minnesota: Duluth, Thief River Falls, Brainerd, International Falls","Northern Mississippi: Greenville, Tupelo, Winona, Columbus, Holly Springs":"NÃ¶rdliches Mississippi: Greenville, Tupelo, Winona, Columbus, Holly Springs","Northern Ohio: Cleveland suburbs, Elyria, Lorain, Oberlin, Ashtabula":"NÃ¶rdliches Ohio: Vororte von Cleveland, Elyria, Lorain, Oberlin, Ashtabula","Northern Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur":"NÃ¶rdliches Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur","Northern Virginia: Alexandria, Arlington, Fairfax, Prince William, eastern Loudoun counties":"NÃ¶rdliches Virginia: Alexandria, Arlington, Fairfax, Prince William Counties; Ã¶stliches Loudoun County","Northern Wisconsin: Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland":"NÃ¶rdliches Wisconsin: Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland","Northern and Eastern Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston":"NÃ¶rdliches und Ã¶stliches Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston","Northern and Eastern Florida: Daytona Beach, Lake City, Live Oak, Crescent City":"NÃ¶rdliches und Ã¶stliches Florida: Daytona Beach, Lake City, Live Oak, Crescent City","Northern and Western Arizona: Flagstaff, Kingman, Prescott, Yuma":"NÃ¶rdliches und westliches Arizona: Flagstaff, Kingman, Prescott, Yuma","Northern and Western Colorado: Aspen, Durango, Grand Junction, Fort Collins":"NÃ¶rdliches und westliches Colorado: Aspen, Durango, Grand Junction, Fort Collins","Northerneastern California: Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee":"NordÃ¶stliches Kalifornien: Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee","Northwest California":"Nordwestliches Kalifornien","Northwest France":"Nordwestfrankreich","Northwest Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso":"Nordwestliches Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso","Northwestern Arkansas: Fort Smith, Fayetteville":"Nordwestliches Arkansas: Fort Smith, Fayetteville","Northwestern California: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah":"Nordwestliches California: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah","Northwestern Florida: Pensacola, Tallahassee, Panama City, the Florida panhandle":"Nordwestliches Florida: Pensacola, Tallahassee, Panama City, Florida-Panhandle","Northwestern Michigan: Muskegon, Traverse City, Ludington, Petoskey":"Nordwestliches Michigan: Muskegon, Traverse City, Ludington, Petoskey","Northwestern New Jersey: Newark, Paterson":"Nordwestliches New Jersey: Newark, Paterson","Northwestern New Mexico: Albuquerque, Santa Fe, Farmington, Gallup":"Nordwestliches New Mexico: Albuquerque, Santa Fe, Farmington, Gallup","Northwestern Ohio: Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green":"Nordwestliches Ohio: Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green","Northwestern Ontario, Canada: Thunder Bay, Kenora, Dryden, Greenstone":"Nordwestliches Ontario, Kanada: Thunder Bay, Kenora, Dryden, Greenstone","Northwestern Oregon: Portland, Salem, Hillsboro, Beaverton":"Nordwestliches Oregon: Portland, Salem, Hillsboro, Beaverton","Northwestern Oregon: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria":"Nordwestliches Oregon: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria","Northwestern and Central Pennsylvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium":"Nordwestliches und Zentral-Pennsylvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium","Norway":"Norwegen","Norway, Svalbard and Jan Mayen":"Norwegen, Svalbard und Jan Mayen","Nova Scotia and Prince Edward Island, Canada":"Nova Scotia und Prinz-Edward-Insel, Kanada","Ontario, Canada":"Ontario, Kanada","Palestinian Authority":"PalÃ¤stinensische AutonomiebehÃ¶rde","Papua New Guinea":"Papua-Neuguinea","Paris (Ile-de-France area)":"Paris (Ãle-de-France)","People's Republic of China":"China, Volksrepublik","Personal Comm.":"PersÃ¶nliche Komm.","Personal Comm. Services":"PersÃ¶nliche Komm.dienste","Personal Communications Services":"PersÃ¶nliche Kommunikationsdienste","Philippines":"Philippinen","Poland":"Polen","Premium-rate":"Mehrwert","Premium-rate Telephone Service":"Mehrwertdienst","Qatar":"Katar","Quebec":"QuÃ©bec","Quebec, Canada":"QuÃ©bec, Kanada","Quebec, Canada: Montreal, Ãle Perrot, Ãle Bizard":"QuÃ©bec, Kanada: Montreal, Ãle Perrot, Ãle Bizard","Quebec, Canada: Quebec City, Saguenay, GaspÃ© Peninsula, CÃ´te-Nord, Chibougamau, St-Georges":"QuÃ©bec, Kanada: QuÃ©bec (Stadt), Saguenay, GaspÃ©sie-Halbinsel, CÃ´te-Nord, Chibougamau, St-Georges","Quebec, Canada: Sherbrooke, Trois-Rivieres, Abitibi-TÃ©miscamingue, Mauricie, Outaouais, Estrie":"QuÃ©bec, Kanada: Sherbrooke, Trois-RiviÃ¨res, Abitibi-TÃ©miscamingue, Mauricie, Outaouais, Estrie","Republic of China":"China, Republik","Republic of Congo":"Kongo, Republik","Republic of Ireland":"Irland, Republik","Romania":"RumÃ¤nien","Russia":"Russland","Russia, Kazakhstan":"Russland, Kasachstan","Rwanda":"Ruanda","S Alberta":"S-Alberta","S Arkansas":"S-Arkansas","S California":"S-Kalifornien","S Florida":"S-Florida","S Illinois":"S-Illinois","S Kansas":"S-Kansas","S Minnesota":"S-Minnesota","S Mississippi":"S-Mississippi","S Quebec":"S-QuÃ©bec","S Texas":"S-Texas","S Virginia":"S-Virginia","SE Alabama":"SO-Alabama","SE Arizona":"SO-Arizona","SE California":"SO-Kalifornien","SE Colorado":"SO-Colorado","SE Georgia":"SO-Georgia","SE Louisiana":"SO-Louisiana","SE Massachusetts":"SO-Massachusetts","SE New Jersey":"SO-New Jersey","SE New York":"SO-New York","SE North Carolina":"SO-North Carolina","SE Ohio":"SO-Ohio","SE Pennsylvania":"SO-Pennsylvania","SE Texas":"SO-Texas","SE Wisconsin":"SO-Wisconsin","SW Alabama":"SW-Alabama","SW Florida":"SW-Florida","SW Georgia":"SW-Georgia","SW Louisiana":"SW-Louisiana","SW Michigan":"SW-Michigan","SW Missouri":"SW-Missouri","SW New Jersey":"SW-New Jersey","SW Ohio":"SW-Ohio","SW Oklahoma":"SW-Oklahoma","SW Ontario":"SW-Ontario","SW Pennsylvania":"SW-Pennsylvania","SW Tennessee":"SW-Tennessee","SW Texas":"SW-Texas","SW Virginia":"SW-Virginia","SW Wisconsin":"SW-Wisconsin","Saint Helena":"St. Helena","Saint Helena, Tristan da Cunha":"St. Helena, Tristan da Cunha","Saint Kitts and Nevis":"St. Kitts und Nevis","Saint Lucia":"St. Lucia","Saint Pierre and Miquelon":"Saint-Pierre und Miquelon","Saint Pierre and Miquelon Islands":"Saint-Pierre und Miquelon","Saint Vincent and the Grenadines":"St. Vincent und die Grenadinen","Saskatchewan, Canada":"Saskatchewan, Kanada","Saudi Arabia":"Saudi-Arabien","Serbia":"Serbien","Service Number":"Dienstnummer","Seville":"Sevilla","Seychelles":"Seychellen","Shared Cost":"Geteilte Kosten","Shared Cost Service":"Geteilte-Kosten-Dienst","Singapore":"Singapur","Slovakia":"Slowakei","Slovenia":"Slowenien","Solomon Islands":"Salomoninseln","South Africa":"SÃ¼dafrika","South Carolina: Greenville, Spartanburg, Anderson, Upstate South Carolina":"South Carolina: Greenville, Spartanburg, Anderson, nÃ¶rdliches South Carolina","South Central California: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave":"SÃ¼dliches Zentralkalifornien: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave","South Central Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven":"SÃ¼dliches Zentral-Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven","South Central Michigan: Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison":"SÃ¼dliches Zentral-Michigan: Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison","South Central North Carolina: Charlotte, Gastonia, Concord, Salisbury":"SÃ¼dliche Zentral-North Carolina: Charlotte, Gastonia, Concord, Salisbury","South Central Pennsylvania: Harrisburg, Gettysburg, Lancaster, York":"SÃ¼dliches Zentral-Pennsylvania: Harrisburg, Gettysburg, Lancaster, York","South Korea":"SÃ¼dkorea","Southeast France":"SÃ¼dostfrankreich","Southeastern Alabama: Montgomery, Auburn, Opelika, Dothan, Selma":"SÃ¼dÃ¶stliches Alabama: Montgomery, Auburn, Opelika, Dothan, Selma","Southeastern Arizona: Tucson, Nogales":"SÃ¼dostliches Arizona: Tucson, Nogales","Southeastern California: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County":"SÃ¼dÃ¶stliches Kalifornien: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County","Southeastern Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta":"SÃ¼dÃ¶stliches Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta","Southeastern Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas":"SÃ¼dÃ¶stliches Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas","Southeastern Louisiana: Houma, Slidell":"SÃ¼dÃ¶stliches Louisiana: Houma, Slidell","Southeastern Massachusetts: Worcester, New Bedford":"SÃ¼dÃ¶stliches Massachusetts: Worcester, New Bedford","Southeastern New York: Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville":"SÃ¼dÃ¶stliches New York: Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville","Southeastern North Carolina: Fayetteville, Wilmington, Jacksonville, Lumberton":"SÃ¼dÃ¶stliches North Carolina: Fayetteville, Wilmington, Jacksonville, Lumberton","Southeastern Pennsylvania: Allentown, Reading, Norristown, Chester":"SÃ¼dÃ¶stliches Pennsylvania: Allentown, Reading, Norristown, Chester","Southeastern Texas: Beaumont, Galveston, Port Arthur, Jasper":"SÃ¼dÃ¶stliches Texas: Beaumont, Galveston, Port Arthur, Jasper","Southeastern Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange":"SÃ¼dÃ¶stliches Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange","Southeastern Wisconsin: Racine, Kenosha, Menomonee Falls, Waukesha":"SÃ¼dÃ¶stliches Wisconsin: Racine, Kenosha, Menomonee Falls, Waukesha","Southern Alberta, Canada: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks":"SÃ¼dliches Alberta, Kanada: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks","Southern California: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County":"SÃ¼dkalifornien: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County","Southern California: Central Los Angeles":"SÃ¼dkalifornien: Los Angeles Mitte","Southern California: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana":"SÃ¼dkalifornien: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana","Southern California: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild":"SÃ¼dkalifornien: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild","Southern California: Del Mar, La Jolla, San Diego":"SÃ¼dkalifornien: Del Mar, La Jolla, San Diego","Southern California: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar":"SÃ¼dkalifornien: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar","Southern California: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower":"SÃ¼dkalifornien: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower","Southern California: Los Angeles, West LA, San Fernando Valley, Florence, Montebello":"SÃ¼dkalifornien: Los Angeles, West Los Angeles, San Fernando Valley, Florence, Montebello","Southern California: Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, eastern Los Angeles suburbs":"SÃ¼dkalifornien: Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, Ã¶stliche Vororte von Los Angeles","Southern California: San Diego":"SÃ¼dkalifornien: San Diego","Southern California: San Diego, Chula Vista":"SÃ¼dkalifornien: San Diego, Chula Vista","Southern California: San Fernando Valley":"SÃ¼dkalifornien: San Fernando Valley","Southern California: San Fernando Valley, including Glendale, San Fernando, Northridge, Burbank, Los Angeles suburbs":"SÃ¼dkalifornien: San Fernando Valley, einschl. Glendale, San Fernando, Northridge, Burbank, Vororte von Los Angeles","Southern California: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, the Los Angeles Westside":"SÃ¼dkalifornien: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, Los Angeles West","Southern Florida: Fort Lauderdale, Hollywood, Coral Springs":"SÃ¼dliches Florida: Fort Lauderdale, Hollywood, Coral Springs","Southern Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West":"SÃ¼dliches Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West","Southern Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon":"SÃ¼dliches Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon","Southern Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal":"SÃ¼dliches Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal","Southern Minnesota: Rochester, Mankato, Worthington, Marshall":"SÃ¼dliches Minnesota: Rochester, Mankato, Worthington, Marshall","Southern Mississippi: Gulfport, Biloxi, Pascagoula, Bay St Louis":"SÃ¼dliches Mississippi: Gulfport, Biloxi, Pascagoula, Bay St Louis","Southern Texas: Laredo, Brownsville, McAllen, Harlingen":"SÃ¼dliches Texas: Laredo, Brownsville, McAllen, Harlingen","Southern Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill":"SÃ¼dliches Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill","Southern and Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"SÃ¼dliches und Ã¶stliches Arkansas: Texarkana, Jonesboro, Pine Bluff","Southern and Western Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City":"SÃ¼dwestliches Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City","Southwest France":"SÃ¼dwestfrankreich","Southwestern Alabama: Mobile, Jackson, Brewton":"SÃ¼dwestliches Alabama: Mobile, Jackson, Brewton","Southwestern Florida: Lee, Collier, and Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades":"SÃ¼dwestliches Florida: Lee, Collier und Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades","Southwestern Florida: Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda":"SÃ¼dwestliches Florida: Tampa Bay und Manatee, Sarasota, Charlotte Counties; Bradenton, Port Charlotte, Sarasota, Punta Gorda","Southwestern Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald":"SÃ¼dwestliches Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald","Southwestern Louisiana: Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder":"SÃ¼dwestliches Louisiana: Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder","Southwestern Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, Detroit suburbs":"SÃ¼dwestliches Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, Vororte von Detroit","Southwestern Michigan: Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph":"SÃ¼dwestliches Michigan: Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph","Southwestern Michigan: Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia":"SÃ¼dwestliches Michigan: Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia","Southwestern Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon":"SÃ¼dwestliches Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon","Southwestern New Jersey: Vineland, Cherry Hill, Camden, Millville":"SÃ¼dwestliches New Jersey: Vineland, Cherry Hill, Camden, Millville","Southwestern Ohio":"SÃ¼dwestliches Ohio","Southwestern Ohio: Cincinnati, Middletown, Hamilton, Norwood, Lebanon":"SÃ¼dwestliches Ohio: Cincinnati, Middletown, Hamilton, Norwood, Lebanon","Southwestern Ohio: Marysville, Springfield, Dayton, Hillsboro":"SÃ¼dwestliches Ohio: Marysville, Springfield, Dayton, Hillsboro","Southwestern Ontario, Canada: London, Windsor, Kitchener-Waterloo, Cambridge":"SÃ¼dwestliches Ontario, Kanada: London, Windsor, Kitchener-Waterloo, Cambridge","Southwestern Ontario, Canada: Niagara Region, Hamilton, Toronto suburbs":"SÃ¼dwestliches Ontario, Kanada: Region Niagara, Hamilton, Vororte von Toronto","Southwestern Pennsylvania: New Castle, Washington, Indiana, Uniontown":"SÃ¼dwestliches Pennsylvania: New Castle, Washington, Indiana, Uniontown","Southwestern Tennessee: Memphis, Covington, Somerville":"SÃ¼dwestliches Tennessee: Memphis, Covington, Somerville","Southwestern Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass":"SÃ¼dwestliches Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass","Southwestern Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield":"SÃ¼dwestliches Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield","Southwestern Wisconsin: Madison, La Crosse, Platteville, Beloit":"SÃ¼dwestliches Wisconsin: Madison, La Crosse, Platteville, Beloit","Spain":"Spanien","Special Telecom.":"Sondertelekomm.","Special Telecommunications Needs in Canada":"Sondertelekommunikationsanforderungen in Kanada","St. Pierre and Miquelon":"Saint-Pierre und Miquelon","St. Vincent/Grenadines":"St. Vincent/Grenadinen","Strasburg":"StraÃburg","Suriname":"Surinam","Swaziland":"Swasiland","Sweden":"Schweden","Switzerland":"Schweiz","Syria":"Syrien","SÃ£o TomÃ© and PrÃ­ncipe":"SÃ£o TomÃ© und PrÃ­ncipe","Tajikistan":"Tadschikistan","Tanzania":"Tansania","Texas: Amarillo, Lubbock, Canadian, Perryton, Shamrock, Dalhart, Texas Panhandle":"Texas: Amarillo, Lubbock, Canadian, Perryton, Shamrock, Dalhart, Texas-Panhandle","Texas: Dallas area":"Texas: Region Dallas","Texas: San Antonio area":"Texas: Region San Antonio","Texas: Waco, Killeen, Temple, Belton, and Stephenville":"Texas: Waco, Killeen, Temple, Belton und Stephenville","The Bahamas":"Bahamas","The British Virgin Islands":"Britische Jungferninseln","The Cayman Islands":"Kaimaninseln","The Dominican Republic":"Dominikanische Republik","The Gambia":"Gambia","The Turks and Caicos Islands":"Turks- und Caicosinseln","The U.S. Virgin Islands":"Amerikanische Jungferninseln","Toll call":"GebÃ¼hrenpflichtiger Anruf","Toll calls (NumÃ©ros Azur)":"GebÃ¼hrenpflichtige Anrufe (NumÃ©ros Azur)","Toll calls (NumÃ©ros Indigo)":"GebÃ¼hrenpflichtige Anrufe (NumÃ©ros Indigo)","Toll-free":"GebÃ¼hrenfrei","Toll-free Telephone Service":"GebÃ¼hrenfreier Telefondienst","Trinidad and Tobago":"Trinidad und Tobago","Tunisia":"Tunesien","Turkey":"TÃ¼rkei","Turkey, Turkish Republic of Northern Cyprus":"TÃ¼rkei, TÃ¼rkische Republik Nordzypern","U.S. Government":"US-Regierung","U.S. Government Special Services":"US-Regierung - Sonderdienste","U.S. Virgins":"Amerikanische Jungferninseln","UAE":"VAE","United Arab Emirates":"Vereinigte Arabische Emirate","United Kingdom":"GroÃbritannien","United Kingdom, Guernsey, Isle of Man, Jersey":"Vereinigtes KÃ¶nigreich, Guernsey, Isle of Man, Jersey","Universal Personal":"PersÃ¶nliche Rufnummern","Universal Personal Telecommunications":"PersÃ¶nliche Rufnummern","Universal international freephone number":"Universelle internationale gebÃ¼hrenfreie Nummer","Unknown Country":"Unbekanntes Land","Unknown Location":"Unbekannter Ort","Uzbekistan":"Usbekistan","Vatican City":"Vatikanstadt","Voice over IP":"VoIP","Voice over IP services":"VoIP-Dienste","W Illinois":"W-Illinois","W Iowa":"W-Iowa","W Kentucky":"W-Kentucky","W Maryland":"W-Maryland","W Massachusetts":"W-Massachusetts","W Nebraska":"W-Nebraska","W New York":"W-New York","W North Carolina":"W-North Carolina","W Pennsylvania":"W-Pennsylvania","W Tennessee":"W-Tennessee","W Texas":"W-Texas","W Washington":"W-Washington","Wallis and Futuna":"Wallis und Futuna","Washington D.C.":"Washington, D.C.","Washington: Seattle suburbs, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood and Mountlake Terrace":"Washington: Vororte von Seattle, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood und Mountlake Terrace","Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway and south Seattle suburbs":"Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway und sÃ¼dliche Vororte von Seattle","Washington: Western Washington":"Washington: westliches Washington","West Central Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston":"Westliches Zentral-Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston","West Central Missouri: Kansas City, St Joseph, Independence, Harrisonville":"Westliches Zentral-Missouri: Kansas City, St Joseph, Independence, Harrisonville","West Central New Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield":"Westliches Zentral-New Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield","West Texas: Midland, Odessa, Big Spring, Alpine":"Westliches Texas: Midland, Odessa, Big Spring, Alpine","Western Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville":"Westliches Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville","Western Kentucky: Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown":"Westliches Kentucky: Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown","Western Maryland: Silver Spring, DC suburbs, Hagerstown, Frederick, Rockville, Cumberland":"Westliches Maryland: Silver Spring, Vororte von Washington, Hagerstown, Frederick, Rockville, Cumberland","Western Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield":"Westliches Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield","Western Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island":"Westliches Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island","Western New York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean":"Westliches New York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean","Western New York: Rochester, Wellsville, Batavia":"Westliches New York: Rochester, Wellsville, Batavia","Western North Carolina: Hickory, Asheville, Waynesville, Franklin, Murphy":"Westliches North Carolina: Hickory, Asheville, Waynesville, Franklin, Murphy","Western Pennsylvania: Pittsburgh area, McKeesport, Braddock, Duquesne":"Westliches Pennsylvania: Region Pittsburgh, McKeesport, Braddock, Duquesne","Western Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar":"Westliches Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar","Western Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen":"Westliches Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen","Western and Southern Texas: Corpus Christi, Victoria, George":"SÃ¼dwestliches Texas: Corpus Christi, Victoria, George","Yemen":"Jemen","Yukon, Northwest Territories, and Nunavut, Canada":"Yukon, Nordwest-Territorien und Nunavut, Kanada","Zambia":"Sambia","Zimbabwe":"Simbabwe"};
ilib.data.phoneres_es = {"Afghanistan":"AfganistÃ¡n","Alabama: Birmingham; Tuscaloosa; western and central Alabama":"Alabama: Birmingham; Tuscaloosa; oeste y centro de Alabama","Alberta, Canada":"Alberta, CanadÃ¡","Algeria":"Argelia","Amer. Samoa":"Samoa Americana","American Samoa":"Samoa Americana","Anguilla":"Anguila","Antigua and Barbuda":"Antigua y Barbuda","Antigua/Barbuda":"Antigua / Barbuda","Arizona: Glendale, Sun City, Buckeye, Peoria, western Phoenix suburbs":"Arizona: Glendale, Sun City, Buckeye, Peoria, suburbios del oeste de Phoenix","Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, eastern Phoenix suburbs":"Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, suburbios del este de Phoenix","Armenia, Nagorno-Karabakh":"Armenia, Alto Karabaj","Ascension":"AscensiÃ³n","Ascension Island":"Isla AscensiÃ³n","Australia, Christmas Island, Cocos Islands":"Australia, Isla Christmas, Islas Cocos","Azerbaijan":"AzerbaiyÃ¡n","Azerbaijan, Nagorno-Karabakh":"AzerbaiyÃ¡n, Alto Karabaj","BVIs":"Islas VÃ­rgenes BritÃ¡nicas","Bahrain":"Bahrein","Belarus":"Bielorrusia","Belgium":"BÃ©lgica","Belize":"Belice","Benin":"BenÃ­n","Berlin":"BerlÃ­n","Bermuda":"Bermudas","Bhutan":"ButÃ¡n","Bosnia and Herzegovina":"Bosnia y Herzegovina","Botswana":"Botsuana","Brazil":"Brasil","British Columbia":"Columbia BritÃ¡nica","British Columbia, Canada":"Columbia BritÃ¡nica, CanadÃ¡","British Columbia: Vancouver, Abbotsford, Whistler, Chilliwack":"Columbia BritÃ¡nica: Vancouver, Abbotsford, Whistler, Chilliwack","British Columbia: Victoria, Prince George, Prince Rupert, Kelowna; also Hyder, Alaska.":"Columbia BritÃ¡nica: Victoria, Prince George, Prince Rupert, Kelowna; tambiÃ©n Hyder, Alaska.","British Indian Ocean":"OcÃ©ano Ãndico BritÃ¡nico","British Indian Ocean Territory":"Territorio BritÃ¡nico del OcÃ©ano Ãndico","Burma":"Birmania","California: East Bay Area, Oakland, Berkeley, Alameda":"California: Ãrea Este de la BahÃ­a, Oakland, Berkeley, Alameda","California: Stockton, Modesto, Merced, Tracy, San Andreas and central California":"California: Stockton, Modesto, Merced, Tracy, San Andreas y California Central","Cambodia":"Camboya","Cameroon":"CamerÃºn","Cape Verde":"Cabo Verde","Carrier Access":"Acceso de compaÃ±Ã­a telefÃ³nica","Caymans":"CaimÃ¡n","Central African Republic":"RepÃºblica Centroafricana","Central Arkansas: Little Rock, Hot Springs":"Arkansas Central: Little Rock, Hot Springs","Central California: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin":"California Central: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin","Central California: Fresno, Visalia, Madera, Hanford, Tulare":"California Central: Fresno, Visalia, Madera, Hanford, Tulare","Central California: Oakland, Berkeley, Alameda":"California Central: Oakland, Berkeley, Alameda","Central California: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond":"California Central: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond","Central California: Sacramento, Davis, Roseville":"California Central: Sacramento, Davis, Roseville","Central California: Salinas, Hollister, Monterey, Carmel, Santa Cruz":"California Central: Salinas, Hollister, Monterey, Carmel, Santa Cruz","Central California: San Francisco":"California Central: San Francisco","Central California: San Francisco, Marin County":"California Central: San Francisco, Condado de Marin","Central California: San Jose":"California Central: San JosÃ©","Central California: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy":"California Central: San JosÃ©, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy","Central California: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, southern San Francisco suburbs":"California Central: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, suburbios del sur de San Francisco","Central Coastal California: Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley":"Costa Central de California: Ventura, San LuÃ­s Obispo, Santa BÃ¡rbara, Oxnard, Simi Valley","Central Colorado: Denver, Boulder, Longmont, Aurora":"Colorado Central: Denver, Boulder, Longmont, Aurora","Central Eastern Florida: Orlando, Cocoa Beach, St Cloud":"Centro Este de Florida: Orlando, Cocoa Beach, St Cloud","Central Eastern Florida: Orlando, Florida, St. Cloud":"Centro Este de Florida: Orlando, Florida, St. Cloud","Central Eastern Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart":"Centro Este de Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart","Central Eastern Louisiana: Baton Rouge, Donaldsonville, New Roads, White Castle":"Centro Este de Luisiana: Baton Rouge, Donaldsonville, New Roads, White Castle","Central Eastern Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood":"Centro Este de Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood","Central Florida: Gainesville, Ocala, Inverness, Dunnellon":"Florida Central: Gainesville, Ocala, Inverness, Dunnellon","Central Florida: St Petersburg, Dunedin":"Florida Central: St Petersburg, Dunedin","Central Florida: Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar":"Florida Central: Tampa, Temple Terrace, Plant City, Condado de Pasco, Oldsmar","Central Georgia: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry":"Georgia Central: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry","Central Illinois: Springfield, Champaign Decatur, Urbana, Lincoln":"Illinois Central: Springfield, Champaign Decatur, Urbana, Lincoln","Central Indiana: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove":"Indiana Central: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove","Central Indiana: Lafayette, Marion, Muncie, Richmond":"Indiana Central: Lafayette, Marion, Muncie, Richmond","Central Iowa: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield":"Iowa Central: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield","Central Michigan: Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso":"Michigan Central: Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso","Central Minnesota: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton":"Minnesota Central: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton","Central Mississippi: Jackson, Meridian, Natchez, McComb, Hattiesburg":"Misisipi Central: Jackson, Meridian, Natchez, McComb, Hattiesburg","Central North Georgia: Marietta, Cedartown, Gainesville, Atlanta suburbs":"Centro Norte de Georgia: Marietta, Cedartown, Gainesville, suburbios de Atlanta","Central Oklahoma: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha":"Oklahoma Central: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha","Central Ontario, Canada: Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie":"Ontario Central, CanadÃ¡: Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie","Central South Carolina: Columbia, Rock Hill, Sumter, Aiken":"Carolina del Sur Central: Columbia, Rock Hill, Sumter, Aiken","Central Southern Quebec, Canada: Laval, Montreal suburbs":"Centro Sur de QuÃ©bec, CanadÃ¡: Laval, suburbios de Montreal","Central Texas: Austin, San Marcos, Lampasas, Bastrop, Milam":"Texas Central: Austin, San Marcos, Lampasas, Bastrop, Milam","Central Western Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg":"Centro Oeste de Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg","Central and Southeastern New Jersey: Atlantic City, Trenton":"Centro y Sudeste de Nueva Jersey: Atlantic City, Trenton","Central and Southeastern Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens":"Centro y sudeste de Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens","Central and Southeastern Texas: Nacogdoches, Lufkin, Conroe, Huntsville":"Centro y Sudeste de Texas: Nacogdoches, Lufkin, Conroe, Huntsville","Cologne":"Colonia","Commonwealth of Dominica":"Mancomunidad de Dominica","Comoros":"Comoras","Connecticut: Bridgeport, Danbury, New Haven, Waterbury, Southwestern Connecticut":"Connecticut: Bridgeport, Danbury, New Haven, Waterbury, sudoeste de Connecticut","Connecticut: Bristol, Hartford, Norwich and northern and eastern Connecticut":"Connecticut: Bristol, Hartford, Norwich y norte y este de Connecticut","Cook Islands":"Islas Cook","Cordoba":"CÃ³rdoba","Croatia":"Croacia","Cyprus":"Chipre","Czech Republic":"RepÃºblica Checa","D.R.":"RepÃºblica Dominicana","DRC":"RDC","Democratic Republic of the Congo":"RepÃºblica DemocrÃ¡tica del Congo","Denmark":"Dinamarca","Dir. Assistance":"InformaciÃ³n telefÃ³nica","Directory Assistance Applications":"Aplicaciones de informaciÃ³n telefÃ³nica","Djibouti":"Yibuti","Dominican Republic":"RepÃºblica Dominicana","Dresden":"Dresde","Dublin":"DublÃ­n","E Arkansas":"Este de Arkansas","E Florida":"Este de Florida","E Iowa":"Este de Iowa","E Kansas":"Este de Kansas","E Kentucky":"Este de Kentucky","E Louisiana":"Este de Luisiana","E Maryland":"Este de Maryland","E Massachusetts":"Este de Massachusetts","E Nebraska":"Este de Nebraska","E Ontario":"Este de Ontario","E South Carolina":"Este de Carolina del Sur","E Tennessee":"Este de Tennessee","E Washington":"Este de Washington","E Wisconsin":"Este de Wisconsin","East Central Minnesota: St Paul, Lindstrom, Red Wing, Hastings":"Este Centro de Minnesota: St Paul, Lindstrom, Red Wing, Hastings","East Central Missouri: St. Charles, Chesterfield, Union, De Soto, Troy":"Este Centro de Missouri: St. Charles, Chesterfield, Union, De Soto, Troy","East Central New Jersey: New Brunswick, Neptune, Freehold, Lakewood":"Este Centro de Nueva Jersey: New Brunswick, Neptune, Freehold, Lakewood","East Timor":"Timor Oriental","Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"Este de Arkansas: Texarkana, Jonesboro, Pine Bluff","Eastern Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City":"Este de Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City","Eastern Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton":"Este de Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton","Eastern Kansas: Kansas City, Overland Park, Paola, Leavenworth":"Este de Kansas: Kansas City, Overland Park, Paola, Leavenworth","Eastern Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville":"Este de Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville","Eastern Maryland: Baltimore, Annapolis, Salisbury":"Este de Maryland: Baltimore, Annapolis, Salisbury","Eastern Massachusetts: Boston, Cambridge":"Este de Massachusetts: Boston, Cambridge","Eastern Massachusetts: Saugus, Norwood, Waltham, Woburn, Boston suburbs":"Este de Massachusetts: Saugus, Norwood, Waltham, Woburn, suburbios de Boston","Eastern Nebraska: Omaha, Lincoln, Norfolk, Superior":"Este de Nebraska: Omaha, Lincoln, Norfolk, Superior","Eastern Ontario, Canada: Ottawa":"Este de Ontario, CanadÃ¡: Ottawa","Eastern Ontario, Canada: Ottawa, Kingston":"Este de Ontario, CanadÃ¡: Ottawa, Kingston","Eastern South Carolina: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island":"Este de Carolina del Sur: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island","Eastern Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland":"Este de Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland","Eastern Washington: Spokane, the Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg":"Este de Washington: Spokane, los Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg","Eastern Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac":"Este de Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac","Edinburgh":"Edimburgo","Egypt":"Egipto","Emergency Services Number":"NÃºmero de servicios de emergencia","Equatorial Guinea":"Guinea Ecuatorial","Ethiopia":"EtiopÃ­a","European Telephony":"TelefonÃ­a europea","European Telephony Numbering Space":"Espacio de numeraciÃ³n telefÃ³nica europea","FYRoM":"Antigua RepÃºblica Yugoslava de Macedonia","Falkland Islands":"Islas Malvinas","Falklands":"Malvinas","Faroe Islands":"Islas Feroe","Federated States of Micronesia":"Estados Federados de Micronesia","Fiji":"Fiyi","Finland":"Finlandia","Finland, Ãland Islands":"Finlandia, Islas de Ãland","Florida: Miami-Dade County, Florida Keys":"Florida: Condado de Miami-Dade, Cayos de la Florida","Former Yugoslav Republic of Macedonia":"Antigua RepÃºblica Yugoslava de Macedonia","France":"Francia","Frankfurt":"FrÃ¡ncfort","Frankfurt am Main, Offenbach am Main":"FrÃ¡ncfort del Meno, Offenbach del Meno","Freephone":"TelÃ©fono gratuito","French Guiana":"Guayana Francesa","French Polynesia":"Polinesia Francesa","Gabon":"GabÃ³n","Germany":"Alemania","Global Mobile Satellite System":"Sistema satelital mÃ³vil global","Global Satellite":"SatÃ©lite global","Greece":"Grecia","Greenland":"Groenlandia","Grenada":"Granada","Guadaloupe":"Guadalupe","Guadaloupe Island":"Isla Guadalupe","Guadeloupe":"Guadalupe","Guadeloupe, Saint BarthÃ©lemy, Saint Martin":"Guadalupe, San BartolomÃ©, San MartÃ­n","GÃ¶ttingen":"Gotinga","Haiti":"HaitÃ­","Hamburg":"Hamburgo","Hamburg, Norderstedt, Neu Wulmstorf":"Hamburgo, Norderstedt, Neu Wulmstorf","Hannover":"HanÃ³ver","Hawaii":"Hawai","Hungary":"HungrÃ­a","Hyderabad East (Ghatkeswar), Hyderabad":"Hyderabad Este (Ghatkeswar), Hyderabad","Hyderabad West (Shamshabad), Hyderabad":"Hyderabad Oeste (Shamshabad), Hyderabad","Iceland":"Islandia","Illinois: Aurora, Naperville, western Chicago":"Illinois: Aurora, Naperville, oeste de Chicago","Illinois: Aurora, Naperville, western Chicago suburbs":"Illinois: Aurora, Naperville, suburbios del oeste de Chicago","Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, western Chicago suburbs":"Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, suburbios del oeste de Chicago","Inbound Intl.":"Entrantes internacionales","Inbound international calls for carrier-specific services":"Llamadas entrantes internacionales para servicios especÃ­ficos de una compaÃ±Ã­a telefÃ³nica","Indiana: Southern Indiana, including Bloomington, Evansville, Jeffersonville, New Albany, and Terre Haute).":"Indiana: Sur de Indiana, incluidos Bloomington, Evansville, Jeffersonville, New Albany y Terre Haute).","International National Rate Service":"Servicio de tarifa nacional internacional","International Networks":"Redes internacionales","International Networks (country code)":"Redes internacionales (cÃ³digo de paÃ­s)","International Premium Rate Service":"Servicio de tarifa alta internacional","Iran":"IrÃ¡n","Iraq":"Irak","Ireland":"Irlanda","Islands of RÃ©union and Mayotte":"Islas de ReuniÃ³n y Mayotte","Israel, Palestinian Authority":"Israel, Autoridad Palestina","Italy":"Italia","Italy, Vatican City":"Italia, Ciudad del Vaticano","Japan":"JapÃ³n","Jordan":"Jordania","Kentucky: west of the Pennyrile Parkway, including Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray, and Paducah":"Kentucky: Oeste de la Pennyrile Parkway, incluidos Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray y Paducah","Kenya":"Kenia","Kolkata":"Calcuta","Kolkata, Kolkata":"Calcuta, Calcuta","Konstanz":"Constanza","Konstanz, Reichenau":"Constanza, Reichenau","Krakow":"Cracovia","Kyrgyzstan":"KirguistÃ¡n","LD Carrier":"CompaÃ±Ã­a telefÃ³nica de larga distancia","Latvia":"Letonia","Lebanon":"LÃ­bano","Libya":"Libia","Lithuania":"Lituania","London":"Londres","Long Distance Carrier Use":"Uso de compaÃ±Ã­a telefÃ³nica de larga distancia","Louisiana":"Luisiana","Louisiana: New Orleans, Metairie, Kenner":"Luisiana: Nueva OrleÃ¡ns, Metairie, Kenner","Luxembourg":"Luxemburgo","Malaga":"MÃ¡laga","Malaysia":"Malasia","Maldives":"Maldivas","Mali":"MalÃ­","Manitoba, Canada":"Manitoba, CanadÃ¡","Marshall Islands":"Islas Marshall","Martinique":"Martinica","Martinique Island":"Isla Martinica","Mauritius":"Mauricio","Mexico":"MÃ©xico","Mexico City":"Ciudad de MÃ©xico","Mexico City, Federal District":"Ciudad de MÃ©xico, Distrito Federal","Michigan: Oakland County":"Michigan: Condado de Oakland","Michigan: Port Huron, Flint, Lapeer, and Michigan \"Thumb\"":"Michigan: Port Huron, Flint, Lapeer y Michigan \"Thumb\"","Michigan: Warren, Sterling Heights, Macomb County":"Michigan: Warren, Sterling Heights, Condado Macomb","Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, northwest Minneapolis":"Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, noroeste de Minneapolis","Mississippi":"Misisipi","Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark and eastern Missouri excluding St. Louis":"Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark y Este de Missouri, excluido St. Louis","Mobile Number":"NÃºmero de mÃ³vil","Moldova":"Moldavia","Monaco":"MÃ³naco","Morocco":"Marruecos","Morocco, Western Sahara":"Marruecos, Sahara Occidental","Munich":"MÃºnich","N Alberta":"Norte de Alberta","N California":"Norte de California","N Georgia":"Norte de Georgia","N Illinois":"Norte de Illinois","N Kansas":"Norte de Kansas","N Kentucky":"Norte de Kentucky","N Louisiana":"Norte de Luisiana","N Michigan":"Norte de Michigan","N Minnesota":"Norte de Minnesota","N Mississippi":"Norte de Misisipi","N Ohio":"Norte de Ohio","N Texas":"Norte de Texas","N Virginia":"Norte de Virginia","N Wisconsin":"Norte de Wisconsin","NE Alabama":"Noreste de Alabama","NE California":"Noreste de California","NE Florida":"Noreste de Florida","NE Illinois":"Noreste de Illinois","NE Indiana":"Noreste de Indiana","NE Massachusetts":"Noreste de Massachusetts","NE New York":"Noreste de Nueva York","NE North Carolina":"Noreste de Carolina del Norte","NE Ohio":"Noreste de Ohio","NE Oklahoma":"Noreste de Oklahoma","NE Pennsylvania":"Noreste de Pensilvania","NE Texas":"Noreste de Texas","NW Arizona":"Noroeste de Arizona","NW Arkansas":"Noroeste de Arkansas","NW California":"Noroeste de California","NW Colorado":"Noroeste de Colorado","NW Florida":"Noroeste de Florida","NW Indiana":"Noroeste de Indiana","NW Michigan":"Noroeste de Michigan","NW New Jersey":"Noroeste de Nueva Jersey","NW New Mexico":"Noroeste de Nuevo MÃ©xico","NW Ohio":"Noroeste de Ohio","NW Ontario":"Noroeste de Ontario","NW Oregon":"Noroeste de OregÃ³n","NW Pennsylvania":"Noroeste de Pensilvania","National Rate":"Tarifa nacional","Netherlands":"PaÃ­ses Bajos","Netherlands Antilles":"Antillas Holandesas","Nevada: Clark County, Las Vegas, Henderson, Boulder City":"Nevada: Condado de Clark, Las Vegas, Henderson, Boulder City","New Brunswick":"Nuevo Brunswick","New Brunswick, Canada":"Nuevo Brunswick, CanadÃ¡","New Caledonia":"Nueva Caledonia","New Delhi":"Nueva Delhi","New Delhi, New Delhi":"Nueva Delhi, Nueva Delhi","New Hampshire":"Nuevo Hampshire","New Jersey":"Nueva Jersey","New Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford, and northeast New Jersey":"Nueva Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford y noreste de Nueva Jersey","New Mexico":"Nuevo MÃ©xico","New Mexico: Las Cruces, Roswell, Carlsbad, Taos":"Nuevo MÃ©xico: Las Cruces, Roswell, Carlsbad, Taos","New York":"Nueva York","New York: Binghamton, Elmira, Bath, Norwich, Oneonta, Ithaca":"Nueva York: Binghamton, Elmira, Bath, Norwich, Oneonta, Ithaca","New York: Manhattan":"Nueva York: Manhattan","New York: Manhattan except for Marble Hill":"Nueva York: Manhattan excepto Marble Hill","New York: Nassau County, Hempstead, Elmont":"Nueva York: Condado de Nassau, Hempstead, Elmont","New York: New York City":"Nueva York: Ciudad de Nueva York","New York: New York City, Marble Hill":"Nueva York: Ciudad de Nueva York, Marble Hill","New York: Suffolk County":"Nueva York: Condado de Suffolk","New York: The \"Outer Boroughs\"":"Nueva York: \"Outer Boroughs\"","New York: Westchester County":"Nueva York: Condado de Westchester","New Zealand":"Nueva Zelanda","Newfoundland":"Terranova","Newfoundland and Labrador, Canada: St. John's":"Terranova y Labrador, CanadÃ¡: St. John's","Niger":"NÃ­ger","Norfolk Island":"Isla Norfolk","Norfolk Island, Australian Antarctic Territory":"Isla Norfolk, Territorio AntÃ¡rtico Australiano","North America":"NorteamÃ©rica","North America and the Caribbean Islands":"NorteamÃ©rica y las islas del Caribe","North Carolina":"Carolina del Norte","North Carolina: Greensboro, Winston-Salem, Wilkesboro, Roxboro, and northwest North Carolina":"Carolina del Norte: Greensboro, Winston-Salem, Wilkesboro, Roxboro y noroeste de Carolina del Norte","North Central Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee":"Norte Centro de Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee","North Central Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola":"Norte Centro de Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola","North Central Kentucky: Lexington, Richmond, Danville, Covington, Florence, Mount Sterling":"Norte Centro de Kentucky: Lexington, Richmond, Danville, Covington, Florence, Mount Sterling","North Central Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany":"Norte Centro de Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany","North Central New York: Syracuse, New York, Utica, Watertown":"Norte Centro de Nueva York: Syracuse, Nueva York, Utica, Watertown","North Central North Carolina: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro":"Norte Centro de Carolina del Norte: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro","North Central Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson":"Norte Centro de Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson","North Central Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester":"Norte Centro de Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester","North Dakota":"Dakota del Norte","North Korea":"Corea del Norte","Northeast France":"Noreste de Francia","Northeastern Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs":"Noreste de Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs","Northeastern Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, Chicago suburbs":"Noreste de Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, suburbios de Chicago","Northeastern Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash":"Noreste de Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash","Northeastern Massachusetts: Fitchburg, Peabody":"Noreste de Massachusetts: Fitchburg, Peabody","Northeastern New York: Albany, Schenectady, Plattsburgh, Saranac Lake":"Noreste de Nueva York: Albany, Schenectady, Plattsburgh, Saranac Lake","Northeastern North Carolina: Greenville, Kitty Hawk, Rocky Mount":"Noreste de Carolina del Norte: Greenville, Kitty Hawk, Rocky Mount","Northeastern Ohio: Akron, Canton, Youngstown, Warren":"Noreste de Ohio: Akron, Canton, Youngstown, Warren","Northeastern Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta":"Noreste de Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta","Northeastern Pennsylvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg":"Noreste de Pensilvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg","Northeastern Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage":"Noreste de Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage","Northern Alberta, Canada: Edmonton, Jasper, Grande Prairie, Peace River":"Norte de Alberta, CanadÃ¡: Edmonton, Jasper, Grande Prairie, Peace River","Northern California coast":"Costa norte de California","Northern Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake":"Norte de Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake","Northern Ireland":"Irlanda del Norte","Northern Kansas: Colby, Topeka, Salina, Manhattan, Lawrence":"Norte de Kansas: Colby, Topeka, Salina, Manhattan, Lawrence","Northern Kentucky: Louisville, Frankfort, Shelbyville, Bardstown":"Norte de Kentucky: Louisville, Frankfort, Shelbyville, Bardstown","Northern Louisiana: Shreveport, Monroe, Alexandria, Fisher, Tallulah":"Norte de Luisiana: Shreveport, Monroe, Alexandria, Fisher, Tallulah","Northern Mariana Islands":"Islas Marianas del Norte","Northern Michigan: Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Upper Peninsula":"Norte de Michigan: Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Upper Peninsula","Northern Minnesota: Duluth, Thief River Falls, Brainerd, International Falls":"Norte de Minnesota: Duluth, Thief River Falls, Brainerd, International Falls","Northern Mississippi: Greenville, Tupelo, Winona, Columbus, Holly Springs":"Norte de Misisipi: Greenville, Tupelo, Winona, Columbus, Holly Springs","Northern Ohio: Cleveland suburbs, Elyria, Lorain, Oberlin, Ashtabula":"Norte de Ohio: suburbios de Cleveland, Elyria, Lorain, Oberlin, Ashtabula","Northern Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur":"Norte de Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur","Northern Virginia: Alexandria, Arlington, Fairfax, Prince William, eastern Loudoun counties":"Norte de Virginia: Alexandria, Arlington, Fairfax, Prince William, condados del este de Loudoun","Northern Wisconsin: Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland":"Norte de Wisconsin: Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland","Northern and Eastern Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston":"Norte y Este de Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston","Northern and Eastern Florida: Daytona Beach, Lake City, Live Oak, Crescent City":"Norte y Este de Florida: Daytona Beach, Lake City, Live Oak, Crescent City","Northern and Western Arizona: Flagstaff, Kingman, Prescott, Yuma":"Norte y Oeste de Arizona: Flagstaff, Kingman, Prescott, Yuma","Northern and Western Colorado: Aspen, Durango, Grand Junction, Fort Collins":"Norte y Oeste de Colorado: Aspen, Durango, Grand Junction, Fort Collins","Northerneastern California: Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee":"Noreste de California: Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee","Northwest California":"Noroeste de California","Northwest France":"Noroeste de Francia","Northwest Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso":"Noroeste de Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso","Northwestern Arkansas: Fort Smith, Fayetteville":"Noroeste de Arkansas: Fort Smith, Fayetteville","Northwestern California: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah":"Noroeste de California: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah","Northwestern Florida: Pensacola, Tallahassee, Panama City, the Florida panhandle":"Noroeste de Florida: Pensacola, Tallahassee, Panama City, el panhandle de Florida","Northwestern Michigan: Muskegon, Traverse City, Ludington, Petoskey":"Noroeste de Michigan: Muskegon, Traverse City, Ludington, Petoskey","Northwestern New Jersey: Newark, Paterson":"Noroeste de Nueva Jersey: Newark, Paterson","Northwestern New Mexico: Albuquerque, Santa Fe, Farmington, Gallup":"Noroeste de Nuevo MÃ©xico: Albuquerque, Santa Fe, Farmington, Gallup","Northwestern Ohio: Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green":"Noroeste de Ohio: Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green","Northwestern Ontario, Canada: Thunder Bay, Kenora, Dryden, Greenstone":"Noroeste de Ontario, CanadÃ¡: Thunder Bay, Kenora, Dryden, Greenstone","Northwestern Oregon: Portland, Salem, Hillsboro, Beaverton":"Noroeste de OregÃ³n: Portland, Salem, Hillsboro, Beaverton","Northwestern Oregon: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria":"Noroeste de OregÃ³n: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria","Northwestern and Central Pennsylvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium":"Noroeste y Centro de Pensilvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium","Norway":"Noruega","Norway, Svalbard and Jan Mayen":"Noruega, Svalbard y Jan Mayen","Nova Scotia and Prince Edward Island, Canada":"Nueva Escocia e Isla del PrÃ­ncipe Eduardo, CanadÃ¡","Nova Scotia/PEI":"Nueva Escocia / Isla del PrÃ­ncipe Eduardo","NÃ¼rnberg":"NÃºremberg","NÃ¼rnberg/FÃ¼rth":"NÃºremberg/FÃ¼rth","Oman":"OmÃ¡n","Ontario, Canada":"Ontario, CanadÃ¡","Oregon":"OregÃ³n","Oregon: Eugene, Medford, Bend, Pendleton, Corvallis, Ontario, Burns":"OregÃ³n: Eugene, Medford, Bend, Pendleton, Corvallis, Ontario, Burns","Pakistan":"PakistÃ¡n","Palau":"Palaos","Palestinian Authority":"Autoridad Palestina","Panama":"PanamÃ¡","Papua New Guinea":"Papua Nueva Guinea","Paris":"ParÃ­s","Paris (Ile-de-France area)":"ParÃ­s (Ã¡rea de Ile-de-France)","Pennsylvania":"Pensilvania","Pennsylvania: Philadelphia":"Pensilvania: Filadelfia","People's Republic of China":"RepÃºblica Popular China","Personal Comm.":"Comunicaciones personales","Personal Comm. Services":"Servicios de comunicaciones personales","Personal Communications Services":"Servicios de comunicaciones personales","Peru":"PerÃº","Philippines":"Filipinas","Poland":"Polonia","Premium Rate":"Tarifa alta","Premium-rate":"Tarifa alta","Premium-rate Telephone Service":"Servicios telefÃ³nicos de tarifa alta","Quebec":"QuÃ©bec","Quebec, Canada":"QuÃ©bec, CanadÃ¡","Quebec, Canada: Montreal, Ãle Perrot, Ãle Bizard":"QuÃ©bec, CanadÃ¡ Montreal, Ãle Perrot, Ãle Bizard","Quebec, Canada: Quebec City, Saguenay, GaspÃ© Peninsula, CÃ´te-Nord, Chibougamau, St-Georges":"QuÃ©bec, CanadÃ¡ Ciudad de Quebec, Saguenay, PenÃ­nsula de Gaspesia, CÃ´te-Nord, Chibougamau, St-Georges","Quebec, Canada: Sherbrooke, Trois-Rivieres, Abitibi-TÃ©miscamingue, Mauricie, Outaouais, Estrie":"QuÃ©bec, CanadÃ¡ Sherbrooke, Trois-Rivieres, Abitibi-TÃ©miscamingue, Mauricie, Outaouais, Estrie","Republic of China":"RepÃºblica de China","Republic of Congo":"RepÃºblica del Congo","Republic of Ireland":"RepÃºblica de Irlanda","Romania":"Rumania","Russia":"Rusia","Russia, Kazakhstan":"Rusia, KazajstÃ¡n","Rwanda":"Ruanda","RÃ©union":"ReuniÃ³n","RÃ©union, Mayotte":"ReuniÃ³n, Mayotte","S Alberta":"Sur de Alberta","S Arkansas":"Sur de Arkansas","S California":"Sur de California","S Florida":"Sur de Florida","S Illinois":"Sur de Illinois","S Kansas":"Sur de Kansas","S Minnesota":"Sur de Minnesota","S Mississippi":"Sur de Misisipi","S Quebec":"Sur de QuÃ©bec","S Texas":"Sur de Texas","S Virginia":"Sur de Virginia","SE Alabama":"Sudeste de Alabama","SE Arizona":"Sudeste de Arizona","SE California":"Sudeste de California","SE Colorado":"Sudeste de Colorado","SE Georgia":"Sudeste de Georgia","SE Louisiana":"Sudeste de Luisiana","SE Massachusetts":"Sudeste de Massachusetts","SE New Jersey":"Sudeste de Nueva Jersey:","SE New York":"Sudeste de Nueva York","SE North Carolina":"Sudeste de Carolina del Norte:","SE Ohio":"Sudeste de Ohio","SE Pennsylvania":"Sudeste de Pensilvania","SE Texas":"Sudeste de Texas","SE Wisconsin":"Sudeste de Wisconsin","SW Alabama":"Sudoeste de Alabama","SW Florida":"Sudoeste de Florida","SW Georgia":"Sudoeste de Georgia","SW Louisiana":"Sudoeste de Luisiana","SW Michigan":"Sudoeste de Michigan","SW Missouri":"Sudoeste de Missouri","SW New Jersey":"Sudoeste de Nueva Jersey","SW Ohio":"Sudoeste de Ohio","SW Oklahoma":"Sudoeste de Oklahoma","SW Ontario":"Sudoeste de Ontario","SW Pennsylvania":"Sudoeste de Pensilvania","SW Tennessee":"Sudoeste de Tennessee","SW Texas":"Sudoeste de Texas","SW Virginia":"Sudoeste de Virginia","SW Wisconsin":"Sudoeste de Wisconsin","Saint Helena":"Santa Helena","Saint Helena, Tristan da Cunha":"Santa Helena, TristÃ¡n de AcuÃ±a","Saint Kitts and Nevis":"San CristÃ³bal y Nieves","Saint Lucia":"Santa LucÃ­a","Saint Pierre and Miquelon":"San Pedro y MiquelÃ³n","Saint Pierre and Miquelon Islands":"Islas San Pedro y MiquelÃ³n","Saint Vincent and the Grenadines":"San Vicente y las Granadinas","Saskatchewan, Canada":"Saskatchewan, CanadÃ¡","Saudi Arabia":"Arabia Saudita","Service Number":"NÃºmero de servicio","Seville":"Sevilla","Shanghai":"ShanghÃ¡i","Shanghai ä¸æµ·å¸":"ShanghÃ¡i ä¸æµ·å¸","Shared Cost":"Costo compartido","Shared Cost Service":"Servicio de costo compartido","Sierra Leone":"Sierra Leona","Singapore":"Singapur","Slovakia":"Eslovaquia","Slovenia":"Eslovenia","Solomon Islands":"Islas SalomÃ³n","Somalia, Somaliland":"Somalia, Somalilandia","South Africa":"SudÃ¡frica","South Carolina":"Carolina del Sur","South Carolina: Greenville, Spartanburg, Anderson, Upstate South Carolina":"Carolina del Sur: Greenville, Spartanburg, Anderson, zona norte de South Carolina","South Central California: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave":"Sur Centro de California: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave","South Central Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven":"Sur Centro de Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven","South Central Michigan: Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison":"Sur Centro de Michigan: Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison","South Central North Carolina: Charlotte, Gastonia, Concord, Salisbury":"Sur Centro de Carolina del Norte: Charlotte, Gastonia, Concord, Salisbury","South Central Pennsylvania: Harrisburg, Gettysburg, Lancaster, York":"Sur Centro de Pensilvania: Harrisburg, Gettysburg, Lancaster, York","South Dakota":"Dakota del Sur","South Korea":"Corea del Sur","Southeast France":"Sudeste de Francia","Southeastern Alabama: Montgomery, Auburn, Opelika, Dothan, Selma":"Sudeste de Alabama: Montgomery, Auburn, Opelika, Dothan, Selma","Southeastern Arizona: Tucson, Nogales":"Sudeste de Arizona: Tucson, Nogales","Southeastern California: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County":"Sudeste de California: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Condado de Imperial","Southeastern Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta":"Sudeste de Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta","Southeastern Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas":"Sudeste de Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas","Southeastern Louisiana: Houma, Slidell":"Sudeste de Luisiana: Houma, Slidell","Southeastern Massachusetts: Worcester, New Bedford":"Sudeste de Massachusetts: Worcester, New Bedford","Southeastern New York: Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville":"Sudeste de Nueva York: Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville","Southeastern North Carolina: Fayetteville, Wilmington, Jacksonville, Lumberton":"Sudeste de Carolina del Norte: Fayetteville, Wilmington, Jacksonville, Lumberton","Southeastern Pennsylvania: Allentown, Reading, Norristown, Chester":"Sudeste de Pensilvania: Allentown, Reading, Norristown, Chester","Southeastern Texas: Beaumont, Galveston, Port Arthur, Jasper":"Sudeste de Texas: Beaumont, Galveston, Port Arthur, Jasper","Southeastern Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange":"Sudeste de Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange","Southeastern Wisconsin: Racine, Kenosha, Menomonee Falls, Waukesha":"Sudeste de Wisconsin:  Racine, Kenosha, Menomonee Falls, Waukesha","Southern Alberta, Canada: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks":"Sur de Alberta, CanadÃ¡: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks","Southern California: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County":"Sur de California: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Condado de Orange","Southern California: Central Los Angeles":"Sur de California: Centro de Los Ãngeles","Southern California: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana":"Sur de California: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana","Southern California: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild":"Sur de California: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild","Southern California: Del Mar, La Jolla, San Diego":"Sur de California: Del Mar, La Jolla, San Diego","Southern California: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar":"Sur de California: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar","Southern California: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower":"Sur de California: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower","Southern California: Los Angeles, West LA, San Fernando Valley, Florence, Montebello":"Sur de California: Los Ãngeles, West LA, Valle de San Fernando, Florence, Montebello","Southern California: Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, eastern Los Angeles suburbs":"Sur de California: Pasadena, West Covina, El Monte, La Puente, Arcadia, Valle de San Gabriel, suburbios del este de Los Ãngeles","Southern California: San Diego":"Sur de California: San Diego","Southern California: San Diego, Chula Vista":"Sur de California: San Diego, Chula Vista","Southern California: San Fernando Valley":"Sur de California: Valle de San Fernando","Southern California: San Fernando Valley, including Glendale, San Fernando, Northridge, Burbank, Los Angeles suburbs":"Sur de California: Valle de San Fernando, incluidos Glendale, San Fernando, Northridge, Burbank, suburbios de Los Ãngeles","Southern California: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, the Los Angeles Westside":"Sur de California: Santa MÃ³nica, Malibu, Torrance, South Bay, Beverly Hills, Isla Catalina, Westside de Los Ãngeles","Southern Florida: Fort Lauderdale, Hollywood, Coral Springs":"Sur de Florida: Fort Lauderdale, Hollywood, Coral Springs","Southern Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West":"Sur de Florida: Miami-Dade, Cayos de la Florida, Miami, Homestead, Coral Gables, Cayo Hueso","Southern Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon":"Sur de Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon","Southern Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal":"Sur de Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal","Southern Minnesota: Rochester, Mankato, Worthington, Marshall":"Sur de Minnesota: Rochester, Mankato, Worthington, Marshall","Southern Mississippi: Gulfport, Biloxi, Pascagoula, Bay St Louis":"Sur de Misisipi: Gulfport, Biloxi, Pascagoula, Bay St Louis","Southern Texas: Laredo, Brownsville, McAllen, Harlingen":"Sur de Texas: Laredo, Brownsville, McAllen, Harlingen","Southern Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill":"Sur de Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill","Southern and Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"Sur y Este de Arkansas: Texarkana, Jonesboro, Pine Bluff","Southern and Western Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City":"Sur y Oeste de Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City","Southwest France":"Sudoeste de Francia","Southwestern Alabama: Mobile, Jackson, Brewton":"Sudoeste de Alabama: Mobile, Jackson, Brewton","Southwestern Florida: Lee, Collier, and Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades":"Sudoeste de Florida: Condados Lee, Collier y Monroe; Cabo Coral, Fort Myers, Naples, Everglades","Southwestern Florida: Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda":"Sudoeste de Florida: Tampa Bay, Condado de Manatee, Condado de Sarasota, Condado de Charlotte; Bradenton, Port Charlotte, Sarasota, Punta Gorda","Southwestern Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald":"Sudoeste de Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald","Southwestern Louisiana: Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder":"Sudoeste de Luisiana: Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder","Southwestern Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, Detroit suburbs":"Sudoeste de Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, suburbios de Detroit","Southwestern Michigan: Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph":"Sudoeste de Michigan: Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph","Southwestern Michigan: Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia":"Sudoeste de Michigan: Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia","Southwestern Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon":"Sudoeste de Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon","Southwestern New Jersey: Vineland, Cherry Hill, Camden, Millville":"Sudoeste de Nueva Jersey: Vineland, Cherry Hill, Camden, Millville","Southwestern Ohio":"Sudoeste de Ohio","Southwestern Ohio: Cincinnati, Middletown, Hamilton, Norwood, Lebanon":"Sudoeste de Ohio: Cincinnati, Middletown, Hamilton, Norwood, Lebanon","Southwestern Ohio: Marysville, Springfield, Dayton, Hillsboro":"Sudoeste de Ohio: Marysville, Springfield, Dayton, Hillsboro","Southwestern Ontario, Canada: London, Windsor, Kitchener-Waterloo, Cambridge":"Sudoeste de Ontario, CanadÃ¡: London, Windsor, Kitchener-Waterloo, Cambridge","Southwestern Ontario, Canada: Niagara Region, Hamilton, Toronto suburbs":"Sudoeste de Ontario, CanadÃ¡: RegiÃ³n del NiÃ¡gara, Hamilton, suburbios de Toronto","Southwestern Pennsylvania: New Castle, Washington, Indiana, Uniontown":"Sudoeste de Pensilvania: New Castle, Washington, Indiana, Uniontown","Southwestern Tennessee: Memphis, Covington, Somerville":"Sudoeste de Tennessee: Memphis, Covington, Somerville","Southwestern Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass":"Sudeste de Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass","Southwestern Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield":"Sudoeste de Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield","Southwestern Wisconsin: Madison, La Crosse, Platteville, Beloit":"Sudoeste de Wisconsin:  Madison, La Crosse, Platteville, Beloit","Spain":"EspaÃ±a","Special Telecom.":"Telecomunicaciones especiales","Special Telecommunications Needs in Canada":"Necesidades especiales de telecomunicaciones en CanadÃ¡","St. Kitts/Nevis":"San Cristobal / Nieves","St. Lucia":"Santa Lucia","St. Pierre and Miquelon":"San Pedro y MiquelÃ³n","St. Vincent/Grenadines":"San Vincente / Granadinas","Sudan":"SudÃ¡n","Suriname":"Surinam","Swaziland":"Swazilandia","Sweden":"Suecia","Switzerland":"Suiza","Syria":"Siria","SÃ£o TomÃ© and PrÃ­ncipe":"Santo TomÃ© y PrÃ­ncipe","Taiwan":"TaiwÃ¡n","Tajikistan":"TayikistÃ¡n","Texas: Dallas area":"Texas: Ãrea de Dallas","Texas: El Paso County, Hudspeth County":"Texas: Condado de El Paso, Condado de Hudspeth","Texas: San Antonio area":"Texas: Ãrea de San Antonio","Texas: Waco, Killeen, Temple, Belton, and Stephenville":"Texas: Waco, Killeen, Temple, Belton y Stephenville","Thailand":"Tailandia","The Bahamas":"Las Bahamas","The British Virgin Islands":"Las Islas VÃ­rgenes BritÃ¡nicas","The Cayman Islands":"Las Islas CaimÃ¡n","The Dominican Republic":"La RepÃºblica Dominicana","The Gambia":"Gambia","The Turks and Caicos Islands":"Las Islas Turcas y Caicos","The U.S. Virgin Islands":"Las Islas VÃ­rgenes de los Estados Unidos","Toll call":"Llamada de larga distancia","Toll calls (NumÃ©ros Azur)":"Llamadas de larga distancia (NumÃ©ros Azur)","Toll calls (NumÃ©ros Indigo)":"Llamadas de larga distancia (NumÃ©ros Indigo)","Toll-free":"Llamada gratuita","Toll-free Telephone Service":"Servicio telefÃ³nico gratuito","Trinidad and Tobago":"Trinidad y Tobago","Trinidad/Tobago":"Trinidad / Tobago","Tunisia":"TÃºnez","Turkey":"TurquÃ­a","Turkey, Turkish Republic of Northern Cyprus":"TurquÃ­a, RepÃºblica Turca del Norte de Chipre","Turkmenistan":"TurkmenistÃ¡n","Turks/Caicos":"Turcas y Caicos","U.S. Government":"Gobierno de EE.UU.","U.S. Government Special Services":"Servicios especiales del Gobierno de EE.UU.","U.S. Virgins":"Islas VÃ­rgenes de los Estados Unidos","UAE":"EAU","Ukraine":"Ucrania","United Arab Emirates":"Emiratos Ãrabes Unidos","United Kingdom":"Reino Unido","United Kingdom, Guernsey, Isle of Man, Jersey":"Reino Unido, Guernsey, Isla de Man, Jersey","Universal Personal":"Personal universal","Universal Personal Telecommunications":"Telecomunicaciones personales universales","Universal international freephone number":"NÃºmero de telÃ©fono gratuito internacional universal","Unknown Country":"PaÃ­s desconocido","Unknown Location":"UbicaciÃ³n desconocida","Uzbekistan":"UzbekistÃ¡n","Vatican City":"Ciudad del Vaticano","Voice over IP":"Voz sobre IP","Voice over IP services":"Servicios de voz sobre IP","W Illinois":"Oeste de Illinois","W Iowa":"Oeste de Iowa","W Kentucky":"Oeste de Kentucky","W Maryland":"Oeste de Maryland","W Massachusetts":"Oeste de Massachusetts","W Nebraska":"Oeste de Nebraska","W New York":"Oeste de Nueva York","W North Carolina":"Oeste de Carolina del Norte","W Pennsylvania":"Oeste de Pensilvania","W Tennessee":"Oeste de Tennessee","W Texas":"Oeste de Texas","W Washington":"Oeste de Washington","Wallis and Futuna":"Wallis y Futuna","Washington: Seattle suburbs, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood and Mountlake Terrace":"Washington: suburbios de Seattle, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood y Mountlake Terrace","Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway and south Seattle suburbs":"Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway y suburbios del sur de Seattle","Washington: Western Washington":"Washington: Oeste de Washington","West Central Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston":"Oeste Centro de Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston","West Central Missouri: Kansas City, St Joseph, Independence, Harrisonville":"Oeste Centro de Missouri: Kansas City, St Joseph, Independence, Harrisonville","West Central New Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield":"Oeste Centro de Nueva Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield","West Texas: Midland, Odessa, Big Spring, Alpine":"Oeste de Texas: Midland, Odessa, Big Spring, Alpine","West Virginia":"Oeste de Virginia","Western Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville":"Oeste de Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville","Western Kentucky: Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown":"Oeste de Kentucky: Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown","Western Maryland: Silver Spring, DC suburbs, Hagerstown, Frederick, Rockville, Cumberland":"Oeste de Maryland: Silver Spring, suburbios de Washington DC, Hagerstown, Frederick, Rockville, Cumberland","Western Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield":"Oeste de Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield","Western Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island":"Oeste de Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island","Western New York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean":"Oeste de Nueva York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean","Western New York: Rochester, Wellsville, Batavia":"Oeste de Nueva York: Rochester, Wellsville, Batavia","Western North Carolina: Hickory, Asheville, Waynesville, Franklin, Murphy":"Oeste de Carolina del Norte: Hickory, Asheville, Waynesville, Franklin, Murphy","Western Pennsylvania: Pittsburgh area, McKeesport, Braddock, Duquesne":"Oeste de Pensilvania: Ãrea de Pittsburgh, McKeesport, Braddock, Duquesne","Western Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar":"Oeste de Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar","Western Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen":"Oeste de Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen","Western and Southern Texas: Corpus Christi, Victoria, George":"Oeste y Sur de Texas: Corpus Christi, Victoria, George","Yukon":"YukÃ³n","Yukon, Northwest Territories, and Nunavut, Canada":"Yukon, Territorios del Noroeste y Nunavut, CanadÃ¡"};
ilib.data.phoneres_fr = {"Aachen":"Aix-la-Chapelle","Aachen-KornelimÃ¼nster":"Aix-la-Chapelle-KornelimÃ¼nster","Alabama: Birmingham; Tuscaloosa; western and central Alabama":"AlabamaÂ : Birmingham; TuscaloosaÂ ; ouest et centre de lâAlabama","Alabama: Huntsville":"AlabamaÂ : Huntsville","Alaska: Anchorage, Juneau, Fairbanks":"AlaskaÂ : Anchorage, Juneau, Fairbanks","Albania":"Albanie","Algeria":"AlgÃ©rie","Amer. Samoa":"Samoa amÃ©r.","American Samoa":"Samoa amÃ©ricaines","Andorra":"Andorre","Antigua and Barbuda":"Antigua-et-Barbuda","Argentina":"Argentine","Arizona: Glendale, Sun City, Buckeye, Peoria, western Phoenix suburbs":"ArizonaÂ : Glendale, Sun City, Buckeye, Peoria, banlieues de lâouest de Phoenix","Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, eastern Phoenix suburbs":"ArizonaÂ : Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, banlieues de lâest de Phoenix","Arizona: Phoenix":"ArizonaÂ : Phoenix","Armenia":"ArmÃ©nie","Armenia, Nagorno-Karabakh":"ArmÃ©nie, Haut-Karabagh","Ascension Island":"Ãle de lâAscension","Australia":"Australie","Australia, Christmas Island, Cocos Islands":"Australie, Ãle Christmas, Ãles Cocos","Austria":"Autriche","Azerbaijan":"AzerbaÃ¯djan","Azerbaijan, Nagorno-Karabakh":"AzerbaÃ¯djan, Haut-Karabagh","BVIs":"IVB","Bahrain":"BahreÃ¯n","Baleares":"BalÃ©ares","Barbados":"Barbade","Barcelona":"Barcelone","Beijing":"PÃ©kin","Beijing åäº¬å¸":"PÃ©kin åäº¬å¸","Belarus":"BiÃ©lorussie","Belgium":"Belgique","Benin":"BÃ©nin","Bermuda":"Bermudes","Bhutan":"Bhoutan","Bolivia":"Bolivie","Bosnia and Herzegovina":"Bosnie-HerzÃ©govine","Brazil":"BrÃ©sil","Bremen":"BrÃªme","British Columbia":"Colombie-Britannique","British Columbia, Canada":"Colombie-Britannique, Canada","British Columbia: Vancouver, Abbotsford, Whistler, Chilliwack":"Colombie-BritanniqueÂ : Vancouver, Abbotsford, Whistler, Chilliwack","British Columbia: Victoria, Prince George, Prince Rupert, Kelowna; also Hyder, Alaska.":"Colombie-BritanniqueÂ : Victoria, Prince George, Prince Rupert, KelownaÂ ; aussi Hyder, Alaska.","British Indian Ocean":"OcÃ©an Indien britannique","British Indian Ocean Territory":"Territoire de lâocÃ©an Indien Britannique","Bulgaria":"Bulgarie","Burma":"Birmanie","California":"Californie","California: East Bay Area, Oakland, Berkeley, Alameda":"CalifornieÂ : East Bay Area, Oakland, Berkeley, Alameda","California: Stockton, Modesto, Merced, Tracy, San Andreas and central California":"CalifornieÂ : Stockton, Modesto, Merced, Tracy, San Andreas et Californie centrale","Cambodia":"Cambodge","Cameroon":"Cameroun","Cantabria":"Cantabrie","Canterbury":"CantorbÃ©ry","Cape Verde":"Cap-Vert","Carrier Access":"AccÃ¨s opÃ©rateur (indicatif 950)","Caymans":"CaÃ¯mans","Central African Republic":"RÃ©publique dâAfrique centrale","Central Arkansas: Little Rock, Hot Springs":"Arkansas centralÂ : Little Rock, Hot Springs","Central California: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin":"Californie centraleÂ : Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin","Central California: Fresno, Visalia, Madera, Hanford, Tulare":"Californie centraleÂ : Fresno, Visalia, Madera, Hanford, Tulare","Central California: Oakland, Berkeley, Alameda":"Californie centraleÂ : Oakland, Berkeley, Alameda","Central California: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond":"Californie centraleÂ : Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond","Central California: Sacramento, Davis, Roseville":"Californie centraleÂ : Sacramento, Davis, Roseville","Central California: Salinas, Hollister, Monterey, Carmel, Santa Cruz":"Californie centraleÂ : Salinas, Hollister, Monterey, Carmel, Santa Cruz","Central California: San Francisco":"Californie centraleÂ : San Francisco","Central California: San Francisco, Marin County":"Californie centraleÂ : San Francisco, ComtÃ© de Marin","Central California: San Jose":"Californie centraleÂ : San Jose","Central California: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy":"Californie centraleÂ : San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy","Central California: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, southern San Francisco suburbs":"Californie centraleÂ : San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, banlieues du sud de San Francisco","Central Coastal California: Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley":"CÃ´te de la Californie centraleÂ : Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley","Central Colorado: Denver, Boulder, Longmont, Aurora":"Colorado centralÂ : Denver, Boulder, Longmont, Aurora","Central Eastern Florida: Orlando, Cocoa Beach, St Cloud":"Centre-est de la FlorideÂ : Orlando, Cocoa Beach, St Cloud","Central Eastern Florida: Orlando, Florida, St. Cloud":"Centre-est de la FlorideÂ : Orlando, Florida, St. Cloud","Central Eastern Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart":"Centre-est de la FlorideÂ : Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart","Central Eastern Louisiana: Baton Rouge, Donaldsonville, New Roads, White Castle":"Centre-est de la LouisianeÂ : BÃ¢ton-Rouge, Donaldsonville, New Roads, White Castle","Central Eastern Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood":">Centre-est du TennesseeÂ : Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood","Central Florida: Gainesville, Ocala, Inverness, Dunnellon":"Floride centraleÂ : Gainesville, Ocala, Inverness, Dunnellon","Central Florida: St Petersburg, Dunedin":"Floride centraleÂ : St Petersburg, Dunedin","Central Florida: Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar":"Floride centraleÂ : Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar","Central Georgia: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry":"GÃ©orgie centraleÂ : Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry","Central Illinois: Springfield, Champaign Decatur, Urbana, Lincoln":"Centre de lâIllinois : Springfield, Champaign Decatur, Urbana, Lincoln","Central Indiana: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove":"Indiana centralÂ : Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove","Central Indiana: Lafayette, Marion, Muncie, Richmond":"Indiana centralÂ : Lafayette, Marion, Muncie, Richmond","Central Iowa: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield":"Iowa centralÂ : Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield","Central Michigan: Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso":"Michigan centralÂ : Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso","Central Minnesota: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton":"Minnesota centralÂ : St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton","Central Mississippi: Jackson, Meridian, Natchez, McComb, Hattiesburg":"Mississippi centralÂ : Jackson, Meridian, Natchez, McComb, Hattiesburg","Central North Georgia: Marietta, Cedartown, Gainesville, Atlanta suburbs":"Centre-nord de la GÃ©orgieÂ : Marietta, Cedartown, Gainesville, banlieues dâAtlanta","Central Oklahoma: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha":"Oklahoma centralÂ : Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha","Central Ontario, Canada: Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie":"Centre de lâOntario, CanadaÂ : Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie","Central South Carolina: Columbia, Rock Hill, Sumter, Aiken":"Caroline du Sud centraleÂ : Columbia, Rock Hill, Sumter, Aiken","Central Southern Quebec, Canada: Laval, Montreal suburbs":"Centre-sud du QuÃ©bec, CanadaÂ : Laval, banlieues de MontrÃ©al","Central Texas: Austin, San Marcos, Lampasas, Bastrop, Milam":"Texas centralÂ : Austin, San Marcos, Lampasas, Bastrop, Milam","Central Western Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg":"Centre-ouest de lâIllinoisÂ : Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg","Central and Southeastern New Jersey: Atlantic City, Trenton":"New Jersey central et du sud-estÂ : Atlantic City, Trenton","Central and Southeastern Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens":"Ohio du centre et du sud-estÂ : Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens","Central and Southeastern Texas: Nacogdoches, Lufkin, Conroe, Huntsville":"Texas central et du sud-estÂ : Nacogdoches, Lufkin, Conroe, Huntsville","Chad":"Tchad","Chile":"Chili","China":"Chine","Colombia":"Colombie","Commonwealth of Dominica":"Commonwealth de la Dominique","Comoros":"Comores","Connecticut: Bridgeport, Danbury, New Haven, Waterbury, Southwestern Connecticut":"ConnecticutÂ : Bridgeport, Danbury, New Haven, Waterbury, sud-ouest du Connecticut","Connecticut: Bristol, Hartford, Norwich and northern and eastern Connecticut":"ConnecticutÂ : Bristol, Hartford, Norwich et rÃ©gion nord et est du Connecticut","Cook Islands":"Ãles Cook","Croatia":"Croatie","Cyprus":"Chypre","Czech Republic":"RÃ©publique tchÃ¨que","CÃ¡diz":"Cadix","CÃ´te d'Ivoire":"CÃ´te dâIvoire","D.R.":"R.D.","DRC":"RDC","Democratic Republic of the Congo":"RÃ©publique dÃ©mocratique du Congo","Denmark":"Danemark","Dir. Assistance":"Assistance tÃ©lÃ©phonique","Directory Assistance Applications":"Applications de lâassistance tÃ©lÃ©phonique","Dominica":"Dominique","Dominican Republic":"RÃ©publique dominicaine","Dover":"Douvres","Dresden":"Dresde","E Arkansas":"Arkansas de lâE","E Florida":"Floride de lâE","E Iowa":"Iowa de lâE","E Kansas":"Kansas de lâE","E Kentucky":"Kentucky de lâE","E Louisiana":"Louisiane de lâE","E Maryland":"Maryland de lâE","E Massachusetts":"Massachusetts de lâE","E Nebraska":"Nebraska de lâE","E Ontario":"Ontario de lâE","E South Carolina":"Caroline du Sud de lâE","E Tennessee":"Tennessee de lâE","E Washington":"Washington de lâE","E Wisconsin":"Wisconsin de lâE","East Central Minnesota: St Paul, Lindstrom, Red Wing, Hastings":"Centre-est du MinnesotaÂ : St Paul, Lindstrom, Red Wing, Hastings","East Central Missouri: St. Charles, Chesterfield, Union, De Soto, Troy":"Centre-est du MissouriÂ : St. Charles, Chesterfield, Union, De Soto, Troy","East Central New Jersey: New Brunswick, Neptune, Freehold, Lakewood":"Centre-est du New JerseyÂ : New Brunswick, Neptune, Freehold, Lakewood","East Timor":"Timor oriental","Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"Arkansas de lâestÂ : Texarkana, Jonesboro, Pine Bluff","Eastern Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City":"Iowa de lâEstÂ : Cedar Rapids, Waterloo, Burlington, Iowa City","Eastern Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton":"Iowa de lâestÂ : Davenport, Dubuque, Bettendorf, Decorah, Clinton","Eastern Kansas: Kansas City, Overland Park, Paola, Leavenworth":"Kansas de lâestÂ : Kansas City, Overland Park, Paola, Leavenworth","Eastern Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville":"Kentucky de lâestÂ : Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville","Eastern Maryland: Baltimore, Annapolis, Salisbury":"Maryland de lâestÂ : Baltimore, Annapolis, Salisbury","Eastern Massachusetts: Boston, Cambridge":"Massachusetts de lâestÂ : Boston, Cambridge","Eastern Massachusetts: Saugus, Norwood, Waltham, Woburn, Boston suburbs":"Massachusetts de lâestÂ : Saugus, Norwood, Waltham, Woburn, banlieues de Boston","Eastern Nebraska: Omaha, Lincoln, Norfolk, Superior":"Nebraska de lâestÂ : Omaha, Lincoln, Norfolk, Superior","Eastern Ontario, Canada: Ottawa":"Ontario de lâest, CanadaÂ : Ottawa","Eastern Ontario, Canada: Ottawa, Kingston":"Ontario de lâest, CanadaÂ : Ottawa, Kingston","Eastern South Carolina: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island":"Caroline du Sud de lâestÂ : Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island","Eastern Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland":"Tennessee de lâestÂ : Bristol, Johnson City, KingsportÂ ; Chattanooga, Cleveland","Eastern Washington: Spokane, the Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg":"Washington de lâestÂ : Spokane, Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg","Eastern Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac":"Wisconsin de lâestÂ : Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac","Ecuador":"Ãquateur","Edinburgh":"Edimbourg","Egypt":"Ãgypte","Emergency Services Number":"NumÃ©ro des services dâurgence","Equatorial Guinea":"GuinÃ©e Ã©quatoriale","Eritrea":"ÃrythrÃ©e","Estonia":"Estonie","Ethiopia":"Ãthiopie","European Telephony":"TÃ©lÃ©phonie europÃ©enne","European Telephony Numbering Space":"Espace de numÃ©rotation tÃ©lÃ©phonique europÃ©en","FYRoM":"ARYM","Falkland Islands":"Ãles Falkland","Falklands":"Falkland","Faroe Islands":"Ãles FÃ©roÃ©","Federated States of Micronesia":"Ãtats fÃ©dÃ©rÃ©s de MicronÃ©sie","Fiji":"Fidji","Finland":"Finlande","Finland, Ãland Islands":"Finlande, Ãles Ãland","Florida":"Floride","Florida: Miami-Dade County, Florida Keys":"FlorideÂ : Miami-Dade County, Keys de la Floride","Florida: Palm Beach, West Palm Beach, Boca Raton, Boynton Beach, Delray Beach, Belle Glade":"FlorideÂ : Palm Beach, West Palm Beach, Boca Raton, Boynton Beach, Delray Beach, Belle Glade","Former Yugoslav Republic of Macedonia":"Ex-RÃ©publique yougoslave de MacÃ©doine","Frankfurt":"Francfort","Frankfurt am Main, Offenbach am Main":"Francfort-sur-le-Main, Offenbach-sur-le-Main","French Guiana":"Guyane franÃ§aise","French Polynesia":"PolynÃ©sie franÃ§aise","Gambia":"Gambie","Georgia":"GÃ©orgie","Georgia: Atlanta":"GÃ©orgieÂ : Atlanta","Germany":"Allemagne","Global Mobile Satellite System":"SystÃ¨me de satellites mÃ©tÃ©orologiques gÃ©ostationnaires","Global Satellite":"Satellite global","Granada":"Grenade","Greece":"GrÃ¨ce","Greenland":"Groenland","Grenada":"Grenade","Guadaloupe":"Guadeloupe","Guadaloupe Island":"Ãles de la Guadeloupe","Guadeloupe, Saint BarthÃ©lemy, Saint Martin":"Guadeloupe, Saint-BarthÃ©lemy, Saint-Martin","Guinea":"GuinÃ©e","Guinea-Bissau":"GuinÃ©e-Bissau","Guyana":"Guyane","Haiti":"HaÃ¯ti","Hamburg":"Hambourg","Hamburg, Norderstedt, Neu Wulmstorf":"Hambourg, Norderstedt, Neu Wulmstorf","Hannover":"Hannovre","Hawaii":"HawaÃ¯","Hungary":"Hongrie","Iceland":"Islande","Illinois: Aurora, Naperville, western Chicago":"IllinoisÂ : Aurora, Naperville, Chicago de lâouest","Illinois: Aurora, Naperville, western Chicago suburbs":"IllinoisÂ : Aurora, Naperville, banlieues de lâouest de Chicago","Illinois: Chicago":"IllinoisÂ : Chicago","Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, western Chicago suburbs":"IllinoisÂ : Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, banlieues de lâouest de Chicago","Inbound Intl.":"Entrants internationaux","Inbound international calls for carrier-specific services":"Appels entrants internationaux pour les services de lâopÃ©rateur","India":"Inde","Indiana: Southern Indiana, including Bloomington, Evansville, Jeffersonville, New Albany, and Terre Haute).":"IndianaÂ : Indiana du sud, y compris Bloomington, Evansville, Jeffersonville, New Albany et Terre Haute).","Indonesia":"IndonÃ©sie","International National Rate Service":"Service de tarif national international","International Networks":"RÃ©seaux internationaux","International Networks (country code)":"RÃ©seaux internationaux (indicatif pays)","International Premium Rate Service":"Service international Ã  revenus partagÃ©s","Iraq":"Irak","Ireland":"Irlande","Islands of RÃ©union and Mayotte":"Ãles de la RÃ©union et de Mayotte","Israel":"IsraÃ«l","Israel, Palestinian Authority":"IsraÃ«l, AutoritÃ© palestinienne","Italy":"Italie","Italy, Vatican City":"Italie, CitÃ© du Vatican","Jamaica":"JamaÃ¯que","Japan":"Japon","Jordan":"Jordanie","Kansas: Wichita, Augusta, El Dorado, Mulvane":"KansasÂ : Wichita, Augusta, El Dorado, Mulvane","Kentucky: west of the Pennyrile Parkway, including Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray, and Paducah":"KentuckyÂ : est de Pennyrile Parkway, y compris Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray et Paducah","Kolkata":"Calcutta","Konstanz":"Constance","Konstanz, Reichenau":"Constance, Reichenau","Krakow":"Cracovie","Kuwait":"KoweÃ¯t","Kyrgyzstan":"Kirghizistan","LD Carrier":"OpÃ©rateur interurbain","Latvia":"Lettonie","Lebanon":"Liban","Libya":"Libye","Lithuania":"Lituanie","London":"Londres","Long Distance Carrier Use":"Utilisation de lâopÃ©rateur interurbain (indicatif 700)","Louisiana":"Louisiane","Louisiana: New Orleans, Metairie, Kenner":"LouisianeÂ : Nouvelle-OrlÃ©ans, Metairie, Kenner","Macau":"Macao","Malaysia":"Malaisie","Malta":"Malte","Marianas":"Marianne","Marshall Islands":"Ãles Marshall","Martinique Island":"Ãle de la Martinique","Mauritania":"Mauritanie","Mauritius":"Maurice","Mexico":"Mexique","Mexico City":"Mexico","Mexico City, Federal District":"Mexico, District fÃ©dÃ©ral","Michigan: Dearborn, Detroit, Hamtramck, Highland Park":"MichiganÂ : Dearborn, Detroit, Hamtramck, Highland Park","Michigan: Oakland County":"MichiganÂ : ComtÃ© dâOakland","Michigan: Port Huron, Flint, Lapeer, and Michigan \"Thumb\"":"MichiganÂ : Port Huron, Flint, Lapeer et le Â«Â pouceÂ Â» du Michigan","Michigan: Warren, Sterling Heights, Macomb County":"MichiganÂ : Warren, Sterling Heights, ComtÃ© de Macomb","Micronesia":"MicronÃ©sie","Minnesota: Bloomington, Minnetonka, Chaska, Minneapolis":"MinnesotaÂ : Bloomington, Minnetonka, Chaska, Minneapolis","Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, northwest Minneapolis":"MinnesotaÂ : Maple Grove, Monticello, Elk River, Fridley, Blaine, nord-ouest de Minneapolis","Minnesota: Minneapolis, Fort Snelling, St Anthony, Richfield":"MinnesotaÂ : Minneapolis, Fort Snelling, St Anthony, Richfield","Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark and eastern Missouri excluding St. Louis":"MissouriÂ : Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark et est du Missouri Ã  lâexception de St. Louis","Missouri: St. Louis, Florissant, Crestwood, Affton":"MissouriÂ : St. Louis, Florissant, Crestwood, Affton","Mobile Number":"NumÃ©ro de mobile","Moldova":"Moldavie","Mongolia":"Mongolie","Montenegro":"MontÃ©nÃ©gro","Morocco":"Maroc","Morocco, Western Sahara":"Maroc, Sahara occidental","N Alberta":"Alberta du N","N California":"Californie du N","N Georgia":"GÃ©orgie du N","N Illinois":"Illinois du N","N Kansas":"Kansas du N","N Kentucky":"Kentucky du N","N Louisiana":"Louisiane du N","N Michigan":"Michigan du N","N Minnesota":"Minnesota du N","N Mississippi":"Mississippi du N","N Ohio":"Ohio du N","N Texas":"Texas du N","N Virginia":"Virginie du N","N Wisconsin":"Wisconsin du N","NE Alabama":"Alabama du NE","NE California":"Californie du NE","NE Florida":"Floride du NE","NE Illinois":"Illinois du NE","NE Indiana":"Indiana du NE","NE Massachusetts":"Massachusetts du NE","NE New York":"New York du NE","NE North Carolina":"Caroline du Nord du NE","NE Ohio":"Ohio du NE","NE Oklahoma":"Oklahoma du NE","NE Pennsylvania":"Pennsylvanie du NE","NE Texas":"Texas du NE","NW Arizona":"Arizona du NO","NW Arkansas":"Arkansas du NO","NW California":"Californie du NO","NW Colorado":"Colorado du NO","NW Florida":"Floride du NO","NW Indiana":"Indiana du NO","NW Michigan":"Michigan du NO","NW New Jersey":"New Jersey du NO","NW New Mexico":"Nouveau-Mexique du NO","NW Ohio":"Ohio du NO","NW Ontario":"Ontario du NO","NW Oregon":"OrÃ©gon du NO","NW Pennsylvania":"Pennsylvanie du NO","Namibia":"Namibie","Nanjing":"Nankin","Nanjing åäº¬å¸":"Nankin åäº¬å¸","National Rate":"Tarif national","Navarra":"Navarre","Nepal":"NÃ©pal","Netherlands":"Pays-Bas","Netherlands Antilles":"Antilles nÃ©erlandaises","Nevada: Clark County, Las Vegas, Henderson, Boulder City":"NevadaÂ : Clark County, Las Vegas, Henderson, Boulder City","Nevada: Reno, Elko, Ely":"NevadaÂ : Reno, Elko, Ely","New Brunswick":"Nouveau-Brunswick","New Brunswick, Canada":"Nouveau-Brunswick, Canada","New Caledonia":"Nouvelle-CalÃ©donie","New Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford, and northeast New Jersey":"New JerseyÂ : Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford et nord-est du New Jersey","New Mexico":"Nouveau-Mexique","New Mexico: Las Cruces, Roswell, Carlsbad, Taos":"Nouveau-MexiqueÂ : Las Cruces, Roswell, Carlsbad, Taos","New York: Binghamton, Elmira, Bath, Norwich, Oneonta, Ithaca":"New YorkÂ : Binghamton, Elmira, Bath, Norwich, Oneonta, Ithaca","New York: Manhattan":"New YorkÂ : Manhattan","New York: Manhattan except for Marble Hill":"New YorkÂ : Manhattan sauf Marble Hill","New York: Nassau County, Hempstead, Elmont":"New YorkÂ : ComtÃ© de Nassau, Hempstead, Elmont","New York: New York City":"New YorkÂ : New York","New York: New York City, Marble Hill":"New York New York, Marble Hill","New York: Suffolk County":"New YorkÂ : ComtÃ© de Suffolk","New York: The \"Outer Boroughs\"":"New YorkÂ : les Â«Â Outer BoroughsÂ Â»","New York: Westchester County":"New YorkÂ : ComtÃ© de Westchester","New Zealand":"Nouvelle-ZÃ©lande","Newfoundland":"Terre-Neuve","Newfoundland and Labrador, Canada: St. John's":"Terre-Neuve-et-Labrador, CanadaÂ : St. Johnâs","Norfolk Island":"Ãle Norfolk","Norfolk Island, Australian Antarctic Territory":"Ãle Norfolk, Territoire de lâAntarctique australien","North America":"AmÃ©rique du Nord","North America and the Caribbean Islands":"AmÃ©rique du Nord et Ãles CaraÃ¯bes","North Carolina":"Caroline du Nord","North Carolina: Greensboro, Winston-Salem, Wilkesboro, Roxboro, and northwest North Carolina":"Caroline du NordÂ : Greensboro, Winston-Salem, Wilkesboro, Roxboro et nord-ouest de la Caroline du Nord","North Central Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee":"Centre nord de lâIndianaÂ : South Bend, Logansport, Elkhart, Warsaw, Nappanee","North Central Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola":"Centre-nord de lâIowaÂ : Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola","North Central Kentucky: Lexington, Richmond, Danville, Covington, Florence, Mount Sterling":"Centre-nord du KentuckyÂ : Lexington, Richmond, Danville, Covington, Florence, Mount Sterling","North Central Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany":"Centre-nord du MinnesotaÂ : Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany","North Central New York: Syracuse, New York, Utica, Watertown":"Centre-nord de New YorkÂ : Syracuse, New York, Utica, Watertown","North Central North Carolina: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro":"Centre-nord de la Caroline du NordÂ : Raleigh, Durham, Chapel Hill, Oxford, Goldsboro","North Central Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson":"Centre-nord du TennesseeÂ : Nashville, Murfreesboro, Springfield, Lebanon, Dickson","North Central Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester":"Centre-nord de la VirginieÂ : Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester","North Dakota":"Dakota du Nord","North Korea":"CorÃ©e du Nord","Northeast France":"Nord-est de la France","Northeastern Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs":"Floride du nord-estÂ : Jacksonville, St. Augustine, Starke, Green Cove Springs","Northeastern Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, Chicago suburbs":"Illinois du nord-estÂ : Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, banlieues de Chicago","Northeastern Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash":"Indiana du nord-estÂ : Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash","Northeastern Massachusetts: Fitchburg, Peabody":"Massachusetts du nord-estÂ : Fitchburg, Peabody","Northeastern New York: Albany, Schenectady, Plattsburgh, Saranac Lake":"New York du nord-estÂ : Albany, Schenectady, Plattsburgh, Saranac Lake","Northeastern North Carolina: Greenville, Kitty Hawk, Rocky Mount":"Caroline du Nord du nord-estÂ : Greenville, Kitty Hawk, Rocky Mount","Northeastern Ohio: Akron, Canton, Youngstown, Warren":"Ohio du nord-estÂ : Akron, Canton, Youngstown, Warren","Northeastern Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta":"Oklahoma du nord-estÂ : Tulsa, Bartlesville, McAlester, Muskogee, Henryetta","Northeastern Pennsylvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg":"Pennsylvanie du nord-estÂ : Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg","Northeastern Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage":"Texas du nord-estÂ : Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage","Northern Alberta, Canada: Edmonton, Jasper, Grande Prairie, Peace River":"Alberta du nord, CanadaÂ : Edmonton, Jasper, Grande Prairie, Peace River","Northern California coast":"CÃ´te de la Californie du nord","Northern Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake":"Illinois du nordÂ : Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake","Northern Ireland":"Irlande du Nord","Northern Kansas: Colby, Topeka, Salina, Manhattan, Lawrence":"Kansas du nordÂ : Colby, Topeka, Salina, Manhattan, Lawrence","Northern Kentucky: Louisville, Frankfort, Shelbyville, Bardstown":"Kentucky du nordÂ : Louisville, Frankfort, Shelbyville, Bardstown","Northern Louisiana: Shreveport, Monroe, Alexandria, Fisher, Tallulah":"Louisiane du nordÂ : Shreveport, Monroe, Alexandria, Fisher, Tallulah","Northern Mariana Islands":"Ãles Marianne du Nord","Northern Michigan: Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Upper Peninsula":"Michigan du nordÂ : Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Upper Peninsula","Northern Minnesota: Duluth, Thief River Falls, Brainerd, International Falls":"Minnesota du nordÂ : Duluth, Thief River Falls, Brainerd, International Falls","Northern Mississippi: Greenville, Tupelo, Winona, Columbus, Holly Springs":"Mississippi du nordÂ : Greenville, Tupelo, Winona, Columbus, Holly Springs","Northern Ohio: Cleveland suburbs, Elyria, Lorain, Oberlin, Ashtabula":"Ohio du nordÂ : Banlieues de Cleveland, Elyria, Lorain, Oberlin, Ashtabula","Northern Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur":"Texas du nordÂ : Vernon, Wichita Falls, Denton, Gainesville, Decatur","Northern Virginia: Alexandria, Arlington, Fairfax, Prince William, eastern Loudoun counties":"Virginie du nordÂ : Alexandria, Arlington, Fairfax, Prince William, comtÃ©s de lâest de Loudoun","Northern Wisconsin: Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland":"Wisconsin du nordÂ : Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland","Northern and Eastern Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston":"Alabama du nord et de lâestÂ : Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston","Northern and Eastern Florida: Daytona Beach, Lake City, Live Oak, Crescent City":"Floride du nord et de lâest : Daytona Beach, Lake City, Live Oak, Crescent City","Northern and Western Arizona: Flagstaff, Kingman, Prescott, Yuma":"Arizona du nord et de lâouestÂ : Flagstaff, Kingman, Prescott, Yuma","Northern and Western Colorado: Aspen, Durango, Grand Junction, Fort Collins":"Colorado du nord et de lâouestÂ : Aspen, Durango, Grand Junction, Fort Collins","Northerneastern California: Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee":"Californie du nord-estÂ : Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee","Northwest California":"Californie du nord-ouest","Northwest France":"Nord-ouest de la France","Northwest Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso":"Indiana du nord-ouestÂ : Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso","Northwestern Arkansas: Fort Smith, Fayetteville":"Arkansas du nord-ouestÂ : Fort Smith, Fayetteville","Northwestern California: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah":"Californie du nord-ouestÂ : Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah","Northwestern Florida: Pensacola, Tallahassee, Panama City, the Florida panhandle":"Floride du nord-ouestÂ : Pensacola, Tallahassee, Panama City, lâenclave de Floride","Northwestern Michigan: Muskegon, Traverse City, Ludington, Petoskey":"Michigan du nord-ouestÂ : Muskegon, Traverse City, Ludington, Petoskey","Northwestern New Jersey: Newark, Paterson":"New Jersey du nord-ouestÂ : Newark, Paterson","Northwestern New Mexico: Albuquerque, Santa Fe, Farmington, Gallup":"Nouveau-Mexique du nord-ouestÂ : Albuquerque, Santa Fe, Farmington, Gallup","Northwestern Ohio: Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green":"Ohio du nord-ouestÂ : Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green","Northwestern Ontario, Canada: Thunder Bay, Kenora, Dryden, Greenstone":"Ontario du nord-ouest, CanadaÂ : Thunder Bay, Kenora, Dryden, Greenstone","Northwestern Oregon: Portland, Salem, Hillsboro, Beaverton":"OrÃ©gon du nord-ouestÂ : Portland, Salem, Hillsboro, Beaverton","Northwestern Oregon: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria":"OrÃ©gon du nord-ouestÂ : Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria","Northwestern and Central Pennsylvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium":"Pennsylvanie du nord-ouest et du centreÂ : Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium","Norway":"NorvÃ¨ge","Norway, Svalbard and Jan Mayen":"NorvÃ¨ge, Svalbard et Jan Mayen","Nova Scotia and Prince Edward Island, Canada":"Nouvelle-Ãcosse et Ãle-du-Prince-Ãdouard, Canada","Nova Scotia/PEI":"Nouvelle-Ãcosse/IPE","NÃ¼rnberg":"Nuremberg","NÃ¼rnberg/FÃ¼rth":"Nuremberg/FÃ¼rth","OCHA":"BCAH","Ohio: Cleveland":"OhioÂ : Cleveland","Ohio: Columbus":"OhioÂ : Columbus","Ontario: Toronto":"OntarioÂ :Â  Toronto","Oregon":"OrÃ©gon","Oregon: Eugene, Medford, Bend, Pendleton, Corvallis, Ontario, Burns":"OrÃ©gonÂ : Eugene, Medford, Bend, Pendleton, Corvallis, Ontario, Burns","Palau":"Palaos","Palestinian Authority":"AutoritÃ© palestinienne","Panama":"PanamÃ¡","Papua New Guinea":"Papouasie-Nouvelle-GuinÃ©e","Paris (Ile-de-France area)":"Paris (Ãle-de-France)","Pennsylvania":"Pennsylvanie","Pennsylvania: Philadelphia":"PennsylvanieÂ : Philadelphie","People's Republic of China":"RÃ©publique populaire de Chine","Personal Comm.":"Comm. personnelles","Personal Comm. Services":"Services comm. personnelles","Personal Communications Services":"Services de communications personnelles","Peru":"PÃ©rou","Poland":"Pologne","Premium Rate":"Revenus partagÃ©s (indicatif 900)","Premium-rate":"AccÃ¨s limitÃ© (indicatif 900)","Premium-rate Telephone Service":"Service telÃ©phonique Ã  accÃ¨s limitÃ© (indicatif 900)","Puerto Rico":"Porto Rico","Quebec":"QuÃ©bec","Quebec, Canada":"QuÃ©bec, Canada","Quebec, Canada: Montreal, Ãle Perrot, Ãle Bizard":"QuÃ©bec, CanadaÂ : MontrÃ©al, Ãle Perrot, Ãle Bizard","Quebec, Canada: Quebec City, Saguenay, GaspÃ© Peninsula, CÃ´te-Nord, Chibougamau, St-Georges":"QuÃ©bec, CanadaÂ : QuÃ©bec, Saguenay, PÃ©ninsule de GaspÃ©, CÃ´te-Nord, Chibougamau, St-Georges","Quebec, Canada: Sherbrooke, Trois-Rivieres, Abitibi-TÃ©miscamingue, Mauricie, Outaouais, Estrie":"QuÃ©bec, CanadaÂ : Sherbrooke, Trois-RiviÃ¨res, Abitibi-TÃ©miscamingue, Mauricie, Outaouais, Estrie","Republic of China":"RÃ©publique de Chine","Republic of Congo":"RÃ©publique du Congo","Republic of Ireland":"RÃ©publique dâIrlande","Romania":"Roumanie","Russia":"Russie","Russia, Kazakhstan":"Russie, Kazakhstan","S Alberta":"Alberta du S","S Arkansas":"Arkansas du S","S California":"Californie du S","S Florida":"Floride du S","S Illinois":"Illinois du S","S Kansas":"Kansas du S","S Minnesota":"Minnesota du S","S Mississippi":"Mississippi du S","S Quebec":"QuÃ©bec du S","S Texas":"Texas du S","S Virginia":"Virginie du S","SE Alabama":"Alabama du SE","SE Arizona":"Arizona du SE","SE California":"Californie du SE","SE Colorado":"Colorado du SE","SE Georgia":"GÃ©orgie du SE","SE Louisiana":"Louisiane du SE","SE Massachusetts":"Massachusetts du SE","SE New Jersey":"New Jersey du SE","SE New York":"New York du SE","SE North Carolina":"Caroline du Nord du SE","SE Ohio":"Ohio du SE","SE Pennsylvania":"Pennsylvanie du SE","SE Texas":"Texas du SE","SE Wisconsin":"Wisconsin du SE","SW Alabama":"Alabama du SO","SW Florida":"Floride du SO","SW Georgia":"GÃ©orgie du SO","SW Louisiana":"Louisiane du SO","SW Michigan":"Michigan du SO","SW Missouri":"Missouri du SO","SW New Jersey":"New Jersey du SO","SW Ohio":"Ohio du SO","SW Oklahoma":"Oklahoma du SO","SW Ontario":"Ontario du SO","SW Pennsylvania":"Pennsylvanie du SO","SW Tennessee":"Tennessee du SO","SW Texas":"Texas du SO","SW Virginia":"Virginie du SO","SW Wisconsin":"Wisconsin du SO","Saint Helena":"Sainte-HÃ©lÃ¨ne","Saint Helena, Tristan da Cunha":"Sainte-HÃ©lÃ¨ne, Tristan da Cunha","Saint Kitts and Nevis":"Saint-Kitts-et-Nevis","Saint Lucia":"Sainte-Lucie","Saint Pierre and Miquelon":"Saint-Pierre-et-Miquelon (France)","Saint Pierre and Miquelon Islands":"Saint-Pierre-et-Miquelon (France)","Saint Vincent and the Grenadines":"Saint-Vincent et les Grenadines","Salamanca":"Salamanque","San Marino":"Saint-Marin","Saudi Arabia":"Arabie saoudite","Senegal":"SÃ©nÃ©gal","Serbia":"Serbie","Service Number":"NumÃ©ro de service","Seville":"SÃ©ville","Shared Cost":"CoÃ»ts partagÃ©s","Shared Cost Service":"Service Ã  coÃ»ts partagÃ©s","Singapore":"Singapour","Sint Maarten":"Saint-Martin","Slovakia":"Slovaquie","Slovenia":"SlovÃ©nie","Solomon Islands":"Ãles Solomon","Somalia":"Somalie","Somalia, Somaliland":"Somalie, Somaliland","South Africa":"Afrique du Sud","South Carolina":"Caroline du Sud","South Carolina: Greenville, Spartanburg, Anderson, Upstate South Carolina":"Caroline du SudÂ : Greenville, Spartanburg, Anderson, nord-ouest de la Caroline du Sud","South Central California: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave":"Centre-sud de la CalifornieÂ : Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave","South Central Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven":"Centre-sud de la FlorideÂ : Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven","South Central Michigan: Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison":"Centre-sud du MichiganÂ : Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison","South Central North Carolina: Charlotte, Gastonia, Concord, Salisbury":"Centre sud de la Caroline du NordÂ : Charlotte, Gastonia, Concord, Salisbury","South Central Pennsylvania: Harrisburg, Gettysburg, Lancaster, York":"Centre-sud de la PennsylvanieÂ : Harrisburg, Gettysburg, Lancaster, York","South Dakota":"Dakota du Sud","South Korea":"CorÃ©e du Sud","Southeast France":"Sud-est de la France","Southeastern Alabama: Montgomery, Auburn, Opelika, Dothan, Selma":"Alabama du sud-estÂ : Montgomery, Auburn, Opelika, Dothan, Selma","Southeastern Arizona: Tucson, Nogales":"Arizona du sud-estÂ : Tucson, Nogales","Southeastern California: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County":"Californie du sud-estÂ : Bishop, Ridgecrest, Barstow, Palm Springs, Indio, ComtÃ© Imperial","Southeastern Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta":"Colorado du sud-estÂ : Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta","Southeastern Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas":"GÃ©orgie du sud-estÂ : Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas","Southeastern Louisiana: Houma, Slidell":"Louisiane du sud-estÂ : Houma, Slidell","Southeastern Massachusetts: Worcester, New Bedford":"Massachusetts du sud-estÂ : Worcester, New Bedford","Southeastern New York: Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville":"New York du sud-estÂ : Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville","Southeastern North Carolina: Fayetteville, Wilmington, Jacksonville, Lumberton":"Caroline du Nord du sud-estÂ : Fayetteville, Wilmington, Jacksonville, Lumberton","Southeastern Pennsylvania: Allentown, Reading, Norristown, Chester":"Pennsylvanie du sud-estÂ : Allentown, Reading, Norristown, Chester","Southeastern Texas: Beaumont, Galveston, Port Arthur, Jasper":"Texas du sud-estÂ : Beaumont, Galveston, Port Arthur, Jasper","Southeastern Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange":"Texas du sud-estÂ : Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange","Southeastern Wisconsin: Racine, Kenosha, Menomonee Falls, Waukesha":"Wisconsin du sud-estÂ : Racine, Kenosha, Menomonee Falls, Waukesha","Southern Alberta, Canada: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks":"Sud de lâAlberta, CanadaÂ : Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks","Southern California: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County":"Californie du sudÂ : Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, ComtÃ© dâOrange","Southern California: Central Los Angeles":"Californie du sudÂ : Centre de Los Angeles","Southern California: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana":"Californie du sudÂ : Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana","Southern California: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild":"Californie du sudÂ : Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild","Southern California: Del Mar, La Jolla, San Diego":"Californie du sudÂ : Del Mar, La Jolla, San Diego","Southern California: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar":"Californie du sudÂ : Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar","Southern California: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower":"Californie du sudÂ : Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower","Southern California: Los Angeles, West LA, San Fernando Valley, Florence, Montebello":"Californie du sudÂ : Los Angeles, West LA, San Fernando Valley, Florence, Montebello","Southern California: Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, eastern Los Angeles suburbs":"Californie du sudÂ : Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, banlieues de lâest de Los Angeles","Southern California: San Diego":"Californie du sudÂ : San Diego","Southern California: San Diego, Chula Vista":"Californie du sudÂ : San Diego, Chula Vista","Southern California: San Fernando Valley":"Californie du sudÂ : VallÃ©e de San Fernando","Southern California: San Fernando Valley, including Glendale, San Fernando, Northridge, Burbank, Los Angeles suburbs":"Californie du sudÂ : San Fernando Valley, y compris Glendale, San Fernando, Northridge, Burbank, banlieues de Los Angeles","Southern California: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, the Los Angeles Westside":"Californie du sud : Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, Los Angeles Westside","Southern Florida: Fort Lauderdale, Hollywood, Coral Springs":"Floride du sudÂ : Fort Lauderdale, Hollywood, Coral Springs","Southern Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West":"Floride du sud : Miami-Dade, Keys de la Floride, Miami, Homestead, Coral Gables, Key West","Southern Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon":"Illinois du sudÂ : Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon","Southern Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal":"Kansas du sudÂ : Dodge City, Emporia, Geat Bend, Parsons, Liberal","Southern Minnesota: Rochester, Mankato, Worthington, Marshall":"Minnesota du sudÂ : Rochester, Mankato, Worthington, Marshall","Southern Mississippi: Gulfport, Biloxi, Pascagoula, Bay St Louis":"Mississippi du sudÂ : Gulfport, Biloxi, Pascagoula, Bay St Louis","Southern Texas: Laredo, Brownsville, McAllen, Harlingen":"Texas du sudÂ : Laredo, Brownsville, McAllen, Harlingen","Southern Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill":"Virginie du sudÂ : Charlottesville, Lynchburg, Danville, Farmville, South Hill","Southern and Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"Arkansas du sud et de lâestÂ : Texarkana, Jonesboro, Pine Bluff","Southern and Western Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City":"Oklahoma du sud et de lâouestÂ : Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City","Southwest France":"Sud-ouest de la France","Southwestern Alabama: Mobile, Jackson, Brewton":"Alabama du sud-ouestÂ : Mobile, Jackson, Brewton","Southwestern Florida: Lee, Collier, and Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades":"Floride du sud-ouest : ComtÃ©s de Lee, Collier et MonroeÂ ; Cape Coral, Fort Myers, Naples, Everglades","Southwestern Florida: Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda":"Floride du sud-ouestÂ : Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda","Southwestern Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald":"GÃ©orgie du sud-ouestÂ : Albany, Valdosta, Bainbridge, Americus, Fitzgerald","Southwestern Louisiana: Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder":"Louisiane du sud-ouestÂ : Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder","Southwestern Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, Detroit suburbs":"Michigan du sud-ouestÂ : Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, banlieues de Detroit","Southwestern Michigan: Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph":"Michigan du sud-ouestÂ : Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph","Southwestern Michigan: Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia":"Michigan du sud-ouestÂ : Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia","Southwestern Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon":"Missouri du sud-ouest : Springfield, Joplin, Branson, West Plains, Lamar, Lebanon","Southwestern New Jersey: Vineland, Cherry Hill, Camden, Millville":"New Jersey du sud-ouestÂ : Vineland, Cherry Hill, Camden, Millville","Southwestern Ohio":"Ohio du sud-ouest","Southwestern Ohio: Cincinnati, Middletown, Hamilton, Norwood, Lebanon":"Ohio du sud-ouest Â : Cincinnati, Middletown, Hamilton, Norwood, Lebanon","Southwestern Ohio: Marysville, Springfield, Dayton, Hillsboro":"Ohio du sud-ouest Â : Marysville, Springfield, Dayton, Hillsboro","Southwestern Ontario, Canada: London, Windsor, Kitchener-Waterloo, Cambridge":"Ontario du sud-ouest, CanadaÂ : London, Windsor, Kitchener-Waterloo, Cambridge","Southwestern Ontario, Canada: Niagara Region, Hamilton, Toronto suburbs":"Ontario du sud-ouest, CanadaÂ : Niagara Region, Hamilton, banlieues de Toronto","Southwestern Pennsylvania: New Castle, Washington, Indiana, Uniontown":"Pennsylvanie du sud-ouestÂ : New Castle, Washington, Indiana, Uniontown","Southwestern Tennessee: Memphis, Covington, Somerville":"Tennessee du sud-ouestÂ : Memphis, Covington, Somerville","Southwestern Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass":"Texas du sud-ouest Â : Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass","Southwestern Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield":"Virginie du sud-ouest : Bristol, Abingdon, Wytheville, Martinsville, Bluefield","Southwestern Wisconsin: Madison, La Crosse, Platteville, Beloit":"Wisconsin du sud-ouestÂ : Madison, La Crosse, Platteville, Beloit","Spain":"Espagne","Special Telecom.":"TÃ©lÃ©com. spÃ©ciales","Special Telecommunications Needs in Canada":"Besoins en tÃ©lÃ©communications spÃ©ciales au Canada","St. Lucia":"Ste-Lucie","St. Pierre and Miquelon":"Saint-Pierre-et-Miquelon","St. Vincent/Grenadines":"St-Vincent/Grenadines","Strasburg":"Strasbourg","Sudan":"Soudan","Sweden":"SuÃ¨de","Switzerland":"Suisse","Syria":"Syrie","SÃ£o TomÃ© and PrÃ­ncipe":"Sao TomÃ©-et-Principe","Taiwan":"TaÃ¯wan","Tajikistan":"Tadjikistan","Tanzania":"Tanzanie","Tarragona":"Tarragone","Tennessee: Clarksville, Columbia, Manchester, Cookeville":"TennesseeÂ : Clarksville, Columbia, Manchester, Cookeville","Texas: Abilene, San Angelo, Sweetwater, Snyder":"TexasÂ : Abilene, San Angelo, Sweetwater, Snyder","Texas: Amarillo, Lubbock, Canadian, Perryton, Shamrock, Dalhart, Texas Panhandle":"TexasÂ : Amarillo, Lubbock, Canadian, Perryton, Shamrock, Dalhart, Texas Panhandle","Texas: Dallas area":"TexasÂ : RÃ©gion de Dallas","Texas: El Paso County, Hudspeth County":"TexasÂ : ComtÃ© dâEl Paso, ComtÃ© de Hudspeth","Texas: Fort Worth, Arlington, Grandview, Weatherford, Rhome":"TexasÂ : Fort Worth, Arlington, Grandview, Weatherford, Rhome","Texas: Houston":"Texas Houston","Texas: San Antonio area":"TexasÂ : RÃ©gion de San Antonio","Texas: Waco, Killeen, Temple, Belton, and Stephenville":"TexasÂ : Waco, Killeen, Temple, Belton et Stephenville","Thailand":"ThaÃ¯lande","The Bahamas":"Les Bahamas","The British Virgin Islands":"Ãles Vierges britanniques","The Cayman Islands":"Les Ã®les CaÃ¯mans","The Dominican Republic":"RÃ©publique dominicaine","The Gambia":"Gambie","The Turks and Caicos Islands":"Ãles Turks et Caicos","The U.S. Virgin Islands":"Ãles Vierges amÃ©ricaines","Toledo":"TolÃ¨de","Toll call":"Appel payant","Toll calls (NumÃ©ros Azur)":"Appel payant (NumÃ©ros Azur)","Toll calls (NumÃ©ros Indigo)":"Appel payant (NumÃ©ros Indigo)","Toll-free":"NumÃ©ro vert","Toll-free Telephone Service":"Service tÃ©lÃ©phonique gratuit","Trinidad and Tobago":"TrinitÃ©-et-Tobago","Trinidad/Tobago":"TrinitÃ©/Tobago","Tunisia":"Tunisie","Turkey":"Turquie","Turkey, Turkish Republic of Northern Cyprus":"Turquie, RÃ©publique turque de Chypre du Nord","Turkmenistan":"TurkmÃ©nistan","U.S. Government":"Gouvernement des Ãtats-Unis","U.S. Government Special Services":"Services spÃ©ciaux du gouvernement des Ãtats-Unis","U.S. Virgins":"Ãles Vierges amÃ©ricaines","UAE":"ÃAU","Uganda":"Ouganda","United Arab Emirates":"Ãmirats arabes unis","United Kingdom":"Royaume-Uni","United Kingdom, Guernsey, Isle of Man, Jersey":"Royaume-Uni, Guernesey, Ãle de Man, Jersey","Universal Personal":"Personnel universel","Universal Personal Telecommunications":"TÃ©lÃ©communications personnelles universelles","Universal international freephone number":"NumÃ©ro de tÃ©lÃ©phone gratuit international universel","Unknown Country":"Pays inconnu","Unknown Location":"Lieu inconnu","Utah: Cedar City, Logan, Moab, Park City, St. George, Moab":"UtahÂ : Cedar City, Logan, Moab, Park City, St. George, Moab","Utah: Wasatch Front":"UtahÂ : Wasatch Front","Uzbekistan":"OuzbÃ©kistan","Valencia":"Valence","Vatican City":"Vatican","Virginia":"Virginie","Virginia: Hampton Roads, Eastern Shore":"VirginieÂ : Hampton Roads, Eastern Shore","Virginia: Richmond, Petersburg":"VirginieÂ : Richmond, Petersburg","Vizcaya":"Biscaye","Voice over IP":"Voix sur IP","Voice over IP services":"Services de voix sur IP","W Illinois":"Illinois de lâO","W Iowa":"Iowa de lâO","W Kentucky":"Kentucky de lâO","W Maryland":"Maryland de lâO","W Massachusetts":"Massachusetts de lâO","W Nebraska":"Nebraska de lâO","W New York":"New York de lâO","W North Carolina":"Caroline du Nord de lâO","W Pennsylvania":"Pennsylvanie de lâO","W Tennessee":"Tennessee de lâO","W Texas":"Texas de lâO","W Washington":"Washington de lâO","Wallis and Futuna":"Wallis-et-Futuna","Washington D.C.":"Washington, DC","Washington: Seattle":"WashingtonÂ : Seattle","Washington: Seattle suburbs, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood and Mountlake Terrace":"WashingtonÂ : Banlieues de Seattle, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood et Mountlake Terrace","Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway and south Seattle suburbs":"WashingtonÂ : Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway et banlieues du sud de Seattle","Washington: Western Washington":"WashingtonÂ : Washington de lâouest","West Central Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston":"Centre-ouest de la GÃ©orgieÂ : Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston","West Central Missouri: Kansas City, St Joseph, Independence, Harrisonville":"Centre-ouest du MissouriÂ : Kansas City, St Joseph, Independence, Harrisonville","West Central New Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield":"Centre-ouest du New JerseyÂ : Alpha, Washington, Elizabeth, Warren, Plainfield","West Texas: Midland, Odessa, Big Spring, Alpine":"Texas de lâouestÂ : Midland, Odessa, Big Spring, Alpine","West Virginia":"Virginie occidentale","Western Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville":"Iowa de lâouestÂ : Sioux City, Council Bluffs, Sheldon, Denison, Estherville","Western Kentucky: Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown":"Kentucky de lâouestÂ : Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown","Western Maryland: Silver Spring, DC suburbs, Hagerstown, Frederick, Rockville, Cumberland":"Maryland de lâouestÂ : Silver Spring, banlieues de Washington, DC, Hagerstown, Frederick, Rockville, Cumberland","Western Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield":"Massachusetts de lâouestÂ : Springfield, Pittsfield, Holyoke, Greenfield","Western Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island":"Nebraska de lâouestÂ : North Platte, Scottsbluff, McCook, Kearney, Grand Island","Western New York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean":"New York de lâouestÂ : Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean","Western New York: Rochester, Wellsville, Batavia":"New York de lâouestÂ : Rochester, Wellsville, Batavia","Western North Carolina: Hickory, Asheville, Waynesville, Franklin, Murphy":"Caroline du Nord de lâouestÂ : Hickory, Asheville, Waynesville, Franklin, Murphy","Western Pennsylvania: Pittsburgh area, McKeesport, Braddock, Duquesne":"Pennsylvanie de lâouestÂ : RÃ©gion de Pittsburgh, McKeesport, Braddock, Duquesne","Western Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar":"Tennessee de lâouestÂ : Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar","Western Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen":"Washington de lâouestÂ : Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen","Western and Southern Texas: Corpus Christi, Victoria, George":"Texas de lâouest et du sudÂ : Corpus Christi, Victoria, George","Wisconsin: Milwaukee":"WisconsinÂ : Milwaukee","Yemen":"YÃ©men","Yukon, Northwest Territories, and Nunavut, Canada":"Yukon, Territoires du Nord-Ouest et Nunavut, Canada","Zambia":"Zambie","Zaragoza":"Saragosse"};
ilib.data.phoneres_fr_CA = {"Alabama: Birmingham; Tuscaloosa; western and central Alabama":"AlabamaÂ : Birmingham; Tuscaloosa; ouest et centre de l'Alabama","British Columbia: Victoria, Prince George, Prince Rupert, Kelowna; also Hyder, Alaska.":"Colombie-BritanniqueÂ : Victoria, Prince George, Prince Rupert, Kelowna; aussi Hyder, Alaska.","Central Eastern Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood":"Centre-est du TennesseeÂ : Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood","Central Illinois: Springfield, Champaign Decatur, Urbana, Lincoln":"Centre de lâIllinoisÂ : Springfield, Champaign Decatur, Urbana, Lincoln","Eastern Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland":"Tennessee de lâestÂ : Bristol, Johnson City, Kingsport; Chattanooga, Cleveland","New York: New York City, Marble Hill":"New YorkÂ : New York, Marble Hill","Northwestern Florida: Pensacola, Tallahassee, Panama City, the Florida panhandle":"Floride du nord-ouestÂ : Pensacola, Tallahassee, Panama City, lâenclave de la Floride","Nova Scotia/PEI":"Nouvelle-Ãcosse/I.-P.-E.","Southern California: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, the Los Angeles Westside":"Californie du sudÂ : Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, Los Angeles Westside","Southern Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West":"Floride du sudÂ : Miami-Dade, Keys de la Floride, Miami, Homestead, Coral Gables, Key West","Southwestern Florida: Lee, Collier, and Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades":"Floride du sud-ouestÂ : ComtÃ©s de Lee, Collier et Monroe; Cape Coral, Fort Myers, Naples, Everglades","Texas: Houston":"TexasÂ : Houston","Toll-free":"NumÃ©ro sans frais"};
ilib.data.phoneres_it = {"Aachen":"Aquisgrana","Aachen-KornelimÃ¼nster":"Aquisgrana-KornelimÃ¼nster","Alabama: Birmingham; Tuscaloosa; western and central Alabama":"Alabama: Birmingham; Tuscaloosa; ovest e centro Alabama","Amer. Samoa":"Samoa americane","American Samoa":"Samoa americane","Antigua and Barbuda":"Antigua e Barbuda","Arizona: Glendale, Sun City, Buckeye, Peoria, western Phoenix suburbs":"Arizona: Glendale, Sun City, Buckeye, Peoria, periferia ovest di Phoenix","Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, eastern Phoenix suburbs":"Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, periferia est di Phoenix","Ascension":"Ascensione","Ascension Island":"Isola di Ascensione","Australia, Christmas Island, Cocos Islands":"Australia, Isola Christmas, Isole Cocos","Azerbaijan":"Azerbaigian","Azerbaijan, Nagorno-Karabakh":"Azerbaigian, Nagorno-Karabakh","BVIs":"Isole Vergini Britanniche","Baleares":"Baleari","Barcelona":"Barcellona","Beijing":"Pechino","Beijing åäº¬å¸":"Pechino åäº¬å¸","Belarus":"Bielorussia","Belgium":"Belgio","Berlin":"Berlino","Bosnia and Herzegovina":"Bosnia Erzegovina","Brazil":"Brasile","Bremen":"Brema","British Columbia: Victoria, Prince George, Prince Rupert, Kelowna; also Hyder, Alaska.":"British Columbia: Victoria, Prince George, Prince Rupert, Kelowna; anche Hyder, Alaska.","British Indian Ocean":"Oceano Indiano Britannico","British Indian Ocean Territory":"Territori britannici dellâoceano Indiano","Burma":"Birmania","California: Stockton, Modesto, Merced, Tracy, San Andreas and central California":"California: Stockton, Modesto, Merced, Tracy, San Andreas e California centrale","Cambodia":"Cambogia","Cameroon":"Camerun","Cape Verde":"Capo Verde","Carrier Access":"Accesso gestore","Caymans":"Cayman","Central African Republic":"Repubblica Centrafricana","Central Arkansas: Little Rock, Hot Springs":"Centro Arkansas: Little Rock, Hot Springs","Central California: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin":"Centro California: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin","Central California: Fresno, Visalia, Madera, Hanford, Tulare":"Centro California: Fresno, Visalia, Madera, Hanford, Tulare","Central California: Oakland, Berkeley, Alameda":"Centro California: Oakland, Berkeley, Alameda","Central California: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond":"Centro California: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond","Central California: Sacramento, Davis, Roseville":"Centro California: Sacramento, Davis, Roseville","Central California: Salinas, Hollister, Monterey, Carmel, Santa Cruz":"Centro California: Salinas, Hollister, Monterey, Carmel, Santa Cruz","Central California: San Francisco":"Centro California: San Francisco","Central California: San Francisco, Marin County":"Centro California: San Francisco, Marin County","Central California: San Jose":"Centro California: San Jose","Central California: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy":"Centro California: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy","Central California: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, southern San Francisco suburbs":"Centro California: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, periferia sud di San Francisco","Central Coastal California: Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley":"Centro costa California: Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley","Central Colorado: Denver, Boulder, Longmont, Aurora":"Centro Colorado: Denver, Boulder, Longmont, Aurora","Central Eastern Florida: Orlando, Cocoa Beach, St Cloud":"Centro est Florida: Orlando, Cocoa Beach, St Cloud","Central Eastern Florida: Orlando, Florida, St. Cloud":"Centro est Florida: Orlando, Florida, St. Cloud","Central Eastern Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart":"Centro est Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart","Central Eastern Louisiana: Baton Rouge, Donaldsonville, New Roads, White Castle":"Centro est Louisiana: Baton Rouge, Donaldsonville, New Roads, White Castle","Central Eastern Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood":"Centro est Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood","Central Florida: Gainesville, Ocala, Inverness, Dunnellon":"Centro Florida: Gainesville, Ocala, Inverness, Dunnellon","Central Florida: St Petersburg, Dunedin":"Centro Florida: St Petersburg, Dunedin","Central Florida: Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar":"Centro Florida: Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar","Central Georgia: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry":"Centro Georgia: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry","Central Illinois: Springfield, Champaign Decatur, Urbana, Lincoln":"Illinois centrale Springfield, Champaign Decatur, Urbana, Lincoln","Central Indiana: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove":"Centro Indiana: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove","Central Indiana: Lafayette, Marion, Muncie, Richmond":"Centro Indiana: Lafayette, Marion, Muncie, Richmond","Central Iowa: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield":"Centro Iowa: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield","Central Michigan: Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso":"Centro Michigan: Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso","Central Minnesota: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton":"Centro Minnesota: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton","Central Mississippi: Jackson, Meridian, Natchez, McComb, Hattiesburg":"Centro Mississippi: Jackson, Meridian, Natchez, McComb, Hattiesburg","Central North Georgia: Marietta, Cedartown, Gainesville, Atlanta suburbs":"Centro nord Georgia: Marietta, Cedartown, Gainesville, periferia di Atlanta","Central Oklahoma: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha":"Centro Oklahoma: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha","Central Ontario, Canada: Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie":"Centro Ontario, Canada: Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie","Central South Carolina: Columbia, Rock Hill, Sumter, Aiken":"South Carolina Columbia, Rock Hill, Sumter, Aiken","Central Southern Quebec, Canada: Laval, Montreal suburbs":"Centro sud Quebec, Canada: Laval, periferia di Montreal","Central Texas: Austin, San Marcos, Lampasas, Bastrop, Milam":"Centro Texas: Austin, San Marcos, Lampasas, Bastrop, Milam","Central Western Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg":"Centro ovest Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg","Central and Southeastern New Jersey: Atlantic City, Trenton":"Centro e sud est New Jersey: Atlantic City, Trenton","Central and Southeastern Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens":"Centro e sud est Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens","Central and Southeastern Texas: Nacogdoches, Lufkin, Conroe, Huntsville":"Centro e sud est Texas: Nacogdoches, Lufkin, Conroe, Huntsville","Chad":"Ciad","Chile":"Cile","China":"Cina","Cologne":"Colonia","Connecticut: Bridgeport, Danbury, New Haven, Waterbury, Southwestern Connecticut":"Connecticut: Bridgeport, Danbury, New Haven, Waterbury, sudovest Connecticut","Connecticut: Bristol, Hartford, Norwich and northern and eastern Connecticut":"Connecticut: Bristol, Hartford, Norwich, nord ed est Connecticut","Cook Islands":"Isole Cook","Croatia":"Croazia","Cyprus":"Cipro","Czech Republic":"Repubblica Ceca","CÃ´te d'Ivoire":"Costa dâAvorio","D.R.":"Rep. Dominicana","DRC":"Repubblica Democratica del Congo","Democratic Republic of the Congo":"Repubblica Democratica del Congo","Denmark":"Danimarca","Dir. Assistance":"Informazioni abbonati","Directory Assistance Applications":"Applicazioni informazioni abbonati","Djibouti":"Gibuti","Dominican Republic":"Repubblica Dominicana","Dresden":"Dresda","Dublin":"Dublino","East Central Minnesota: St Paul, Lindstrom, Red Wing, Hastings":"Est centro Minnesota: St Paul, Lindstrom, Red Wing, Hastings","East Central Missouri: St. Charles, Chesterfield, Union, De Soto, Troy":"Est centro Missouri: St. Charles, Chesterfield, Union, De Soto, Troy","East Central New Jersey: New Brunswick, Neptune, Freehold, Lakewood":"Est centro New Jersey: New Brunswick, Neptune, Freehold, Lakewood","East Timor":"Timor Est","Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"Est Arkansas: Texarkana, Jonesboro, Pine Bluff","Eastern Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City":"Est Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City","Eastern Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton":"Est Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton","Eastern Kansas: Kansas City, Overland Park, Paola, Leavenworth":"Est Kansas: Kansas City, Overland Park, Paola, Leavenworth","Eastern Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville":"Est Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville","Eastern Maryland: Baltimore, Annapolis, Salisbury":"Est Maryland: Baltimore, Annapolis, Salisbury","Eastern Massachusetts: Boston, Cambridge":"Est Massachusetts: Boston, Cambridge","Eastern Massachusetts: Saugus, Norwood, Waltham, Woburn, Boston suburbs":"Est Massachusetts: Saugus, Norwood, Waltham, Woburn, periferia di Boston","Eastern Nebraska: Omaha, Lincoln, Norfolk, Superior":"Est Nebraska: Omaha, Lincoln, Norfolk, Superior","Eastern Ontario, Canada: Ottawa":"Est Ontario, Canada: Ottawa","Eastern Ontario, Canada: Ottawa, Kingston":"Est Ontario, Canada: Ottawa, Kingston","Eastern South Carolina: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island":"Est South Carolina: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island","Eastern Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland":"Est Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland","Eastern Washington: Spokane, the Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg":"Est Washington: Spokane, Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg","Eastern Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac":"Est Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac","Edinburgh":"Edimburgo","Egypt":"Egitto","Emergency Services Number":"Numero servizi di emergenza","Equatorial Guinea":"Guinea Equatoriale","Ethiopia":"Etiopia","European Telephony":"Telefonia europea","European Telephony Numbering Space":"ETNS","FYRoM":"Macedonia","Falkland Islands":"Isole Falkland","Falklands":"Falkland","Faroe Islands":"Isole FÃ¦r Ãer","Federated States of Micronesia":"Stati Federati di Micronesia","Finland":"Finlandia","Finland, Ãland Islands":"Finlandia, Isole Ãland","Florida: Miami-Dade County, Florida Keys":"Florida: Contea Miami-Dade, Florida Keys","Former Yugoslav Republic of Macedonia":"Repubblica Ex Jugoslava di Macedonia","France":"Francia","Frankfurt":"Francoforte","Frankfurt am Main, Offenbach am Main":"Francoforte sul Meno, Offenbach am Main","French Guiana":"Guiana Francese","French Polynesia":"Polinesia Francese","Germany":"Germania","Gibraltar":"Gibilterra","Global Mobile Satellite System":"Sistema satellitare mobile globale","Global Satellite":"Satellite globale","Greece":"Grecia","Greenland":"Groenlandia","Guadaloupe":"Guadalupa","Guadaloupe Island":"Isola Guadalupa","Guadeloupe":"Guadalupa","Guadeloupe, Saint BarthÃ©lemy, Saint Martin":"Guadalupa, Saint BarthÃ©lemy, Saint Martin","GÃ¶ttingen":"Gottinga","Hamburg":"Amburgo","Hamburg, Norderstedt, Neu Wulmstorf":"Amburgo, Norderstedt, Neu Wulmstorf","Hungary":"Ungheria","Hyderabad East (Ghatkeswar), Hyderabad":"Hyderabad Est (Ghatkeswar), Hyderabad","Hyderabad West (Shamshabad), Hyderabad":"Hyderabad Ovest (Shamshabad), Hyderabad","Iceland":"Islanda","Illinois: Aurora, Naperville, western Chicago":"Illinois: Aurora, Naperville, ovest Chicago","Illinois: Aurora, Naperville, western Chicago suburbs":"Illinois: Aurora, Naperville, periferia ovest di Chicago","Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, western Chicago suburbs":"Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, periferia ovest di Chicago","Inbound Intl.":"Internaz. in entrata","Inbound international calls for carrier-specific services":"Chiamate internazionali in entrata per servizi specifici del gestore","Indiana: Southern Indiana, including Bloomington, Evansville, Jeffersonville, New Albany, and Terre Haute).":"Indiana: Sud Indiana, inclusi Bloomington, Evansville, Jeffersonville, New Albany e Terre Haute.","International National Rate Service":"Servizio tariffa nazionale internazionale","International Networks":"Reti internazionali","International Networks (country code)":"Reti internazionali (prefisso nazionale)","International Premium Rate Service":"Servizio tariffa premium internazionale","Ireland":"Irlanda","Islands of RÃ©union and Mayotte":"Isole di RÃ©union e Mayotte","Israel":"Israele","Israel, Palestinian Authority":"Israele, AutoritÃ  Palestinese","Italy":"Italia","Italy, Vatican City":"Italia, CittÃ  del Vaticano","Jamaica":"Giamaica","Japan":"Giappone","Jordan":"Giordania","Kentucky: west of the Pennyrile Parkway, including Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray, and Paducah":"Kentucky: ovest di Pennyrile Parkway, inclusi Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray e Paducah","Kenya":"Kenia","Konstanz":"Costanza","Konstanz, Reichenau":"Costanza, Reichenau","Krakow":"Cracovia","Kyrgyzstan":"Kirghizistan","LD Carrier":"Gestore interurbano","Latvia":"Lettonia","Lebanon":"Libano","Leipzig":"Lipsia","Libya":"Libia","Lichtenstein":"Liechtenstein","Lichtenstein, Engstingen":"Liechtenstein, Engstingen","Lithuania":"Lituania","London":"Londra","Long Distance Carrier Use":"Utilizzabile dal gestore interurbano","Luxembourg":"Lussemburgo","Macau":"Macao","Malaysia":"Malesia","Maldives":"Maldive","Marianas":"Marianne","Marshall Islands":"Isole Marshall","Martinique":"Martinica","Martinique Island":"Isola di Martinica","Mexico":"Messico","Mexico City":"CittÃ  del Messico","Mexico City, Federal District":"CittÃ  del Messico, Distretto federale","Michigan: Oakland County":"Michigan: Contea di Oakland","Michigan: Port Huron, Flint, Lapeer, and Michigan \"Thumb\"":"Michigan: Port Huron, Flint, Lapeer e Michigan \"Thumb\"","Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, northwest Minneapolis":"Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, nord ovest Minneapolis","Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark and eastern Missouri excluding St. Louis":"Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark ed est Missouri escluso St. Louis","Mobile Number":"Numero cellulare","Moldova":"Moldavia","Monaco":"Principato di Monaco","Morocco":"Marocco","Morocco, Western Sahara":"Marocco, Sahara Occidentale","Mozambique":"Mozambico","Munich":"Monaco","NW Arizona":"NO Arizona","NW Arkansas":"NO Arkansas","NW California":"NO California","NW Colorado":"NO Colorado","NW Florida":"NO Florida","NW Indiana":"NO Indiana","NW Michigan":"NO Michigan","NW Ohio":"NO Ohio","NW Ontario":"NO Ontario","NW Oregon":"NO Oregon","NW Pennsylvania":"NO Pennsylvania","Nanjing":"Nanchino","Nanjing åäº¬å¸":"Nanchino åäº¬å¸","National Rate":"Tariffa nazionale","Netherlands":"Paesi Bassi","Netherlands Antilles":"Antille olandesi","New Caledonia":"Nuova Caledonia","New Delhi":"Nuova Delhi","New Delhi, New Delhi":"Nuova Delhi, Nuova Delhi","New Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford, and northeast New Jersey":"New Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford, e nordest New Jersey","New York: Manhattan except for Marble Hill":"New York: Manhattan tranne Marble Hill","New York: The \"Outer Boroughs\"":"New York: Periferia","New Zealand":"Nuova Zelanda","Newfoundland and Labrador, Canada: St. John's":"Newfoundland e Labrador, Canada: St. John's","Norfolk Island":"Isola Norfolk","Norfolk Island, Australian Antarctic Territory":"Isola Norfolk, Territorio antartico australiano","North America":"America del Nord","North America and the Caribbean Islands":"America del Nord e isole del Caraibi","North Carolina: Greensboro, Winston-Salem, Wilkesboro, Roxboro, and northwest North Carolina":"North Carolina: Greensboro, Winston-Salem, Wilkesboro, Roxboro e nord ovest North Carolina","North Central Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee":"Nord centro Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee","North Central Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola":"Nord centro Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola","North Central Kentucky: Lexington, Richmond, Danville, Covington, Florence, Mount Sterling":"Nord centro Kentucky: Lexington, Richmond, Danville, Covington, Florence, Mount Sterling","North Central Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany":"Nord centro Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany","North Central New York: Syracuse, New York, Utica, Watertown":"Nord centro New York: Syracuse, New York, Utica, Watertown","North Central North Carolina: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro":"Nord centro North Carolina: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro","North Central Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson":"Nord centro Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson","North Central Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester":"Nord centro Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester","North Korea":"Corea del Nord","Northeast France":"Nordest Francia","Northeastern Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs":"Nord est Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs","Northeastern Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, Chicago suburbs":"Nord est Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, periferia di Chicago","Northeastern Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash":"Nord est Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash","Northeastern Massachusetts: Fitchburg, Peabody":"Nord est Massachusetts: Fitchburg, Peabody","Northeastern New York: Albany, Schenectady, Plattsburgh, Saranac Lake":"Nord est New York: Albany, Schenectady, Plattsburgh, Saranac Lake","Northeastern North Carolina: Greenville, Kitty Hawk, Rocky Mount":"Nord est North Carolina: Greenville, Kitty Hawk, Rocky Mount","Northeastern Ohio: Akron, Canton, Youngstown, Warren":"Nord est Ohio: Akron, Canton, Youngstown, Warren","Northeastern Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta":"Nord est Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta","Northeastern Pennsylvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg":"Nord est Pennsylvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg","Northeastern Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage":"Nord est Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage","Northern California coast":"Costa nord California","Northern Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake":"Nord Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake","Northern Ireland":"Irlanda del nord","Northern Kansas: Colby, Topeka, Salina, Manhattan, Lawrence":"Nord Kansas: Colby, Topeka, Salina, Manhattan, Lawrence","Northern Kentucky: Louisville, Frankfort, Shelbyville, Bardstown":"Nord Kentucky: Louisville, Frankfort, Shelbyville, Bardstown","Northern Louisiana: Shreveport, Monroe, Alexandria, Fisher, Tallulah":"Nord Louisiana: Shreveport, Monroe, Alexandria, Fisher, Tallulah","Northern Mariana Islands":"Isole Marianne Settentrionali","Northern Michigan: Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Upper Peninsula":"Nord Michigan: Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Upper Peninsula","Northern Minnesota: Duluth, Thief River Falls, Brainerd, International Falls":"Nord Minnesota: Duluth, Thief River Falls, Brainerd, International Falls","Northern Mississippi: Greenville, Tupelo, Winona, Columbus, Holly Springs":"Nord Mississippi: Greenville, Tupelo, Winona, Columbus, Holly Springs","Northern Ohio: Cleveland suburbs, Elyria, Lorain, Oberlin, Ashtabula":"Nord Ohio: Periferia di Cleveland, Elyria, Lorain, Oberlin, Ashtabula","Northern Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur":"Nord Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur","Northern Virginia: Alexandria, Arlington, Fairfax, Prince William, eastern Loudoun counties":"Nord Virginia: Alexandria, Arlington, Fairfax, Prince William, contee est Loudoun","Northern Wisconsin: Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland":"Nord Wisconsin: Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland","Northern and Eastern Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston":"Nord ed est Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston","Northern and Eastern Florida: Daytona Beach, Lake City, Live Oak, Crescent City":"Nord ed est Florida: Daytona Beach, Lake City, Live Oak, Crescent City","Northern and Western Arizona: Flagstaff, Kingman, Prescott, Yuma":"Nord ed ovest Arizona: Flagstaff, Kingman, Prescott, Yuma","Northern and Western Colorado: Aspen, Durango, Grand Junction, Fort Collins":"Nord ed ovest Colorado: Aspen, Durango, Grand Junction, Fort Collins","Northerneastern California: Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee":"Nord est California Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee","Northwest California":"Nord ovest California","Northwest France":"Nordovest Francia","Northwest Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso":"Nord ovest Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso","Northwestern Arkansas: Fort Smith, Fayetteville":"Nord ovest Arkansas: Fort Smith, Fayetteville","Northwestern California: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah":"Nord ovest California: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah","Northwestern Florida: Pensacola, Tallahassee, Panama City, the Florida panhandle":"Nord ovest Florida: Pensacola, Tallahassee, Panama City, Florida panhandle","Northwestern Michigan: Muskegon, Traverse City, Ludington, Petoskey":"Nord ovest Michigan: Muskegon, Traverse City, Ludington, Petoskey","Northwestern New Jersey: Newark, Paterson":"Nord ovest New Jersey: Newark, Paterson","Northwestern New Mexico: Albuquerque, Santa Fe, Farmington, Gallup":"Nord ovest New Mexico Albuquerque, Santa Fe, Farmington, Gallup","Northwestern Ohio: Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green":"Nord ovest Ohio: Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green","Northwestern Ontario, Canada: Thunder Bay, Kenora, Dryden, Greenstone":"Nord ovest Ontario, Canada: Thunder Bay, Kenora, Dryden, Greenstone","Northwestern Oregon: Portland, Salem, Hillsboro, Beaverton":"Nord ovest Oregon: Portland, Salem, Hillsboro, Beaverton","Northwestern Oregon: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria":"Nord ovest Oregon: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria","Northwestern and Central Pennsylvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium":"Nord ovest e regione centrale Pennsylvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium","Norway":"Norvegia","Norway, Svalbard and Jan Mayen":"Norvegia, Svalbard e Jan Mayen","Nova Scotia and Prince Edward Island, Canada":"Nova Scotia e Prince Edward Island, Canada","NÃ¼rnberg":"Norimberga","NÃ¼rnberg/FÃ¼rth":"Norimberga/FÃ¼rth","Palestinian Authority":"AutoritÃ  palestinese","Papua New Guinea":"Papua Nuova Guinea","Paris":"Parigi","Paris (Ile-de-France area)":"Paris (zona Ile-de-France)","People's Republic of China":"Repubblica popolare cinese","Personal Comm.":"Com. personale","Personal Comm. Services":"Com. personale Servizi","Personal Communications Services":"Servizi di comunicazione personale","Peru":"PerÃ¹","Philippines":"Filippine","Poland":"Polonia","Portugal":"Portogallo","Premium Rate":"Tariffa premium","Premium-rate":"A pagamento","Premium-rate Telephone Service":"Servizi telefonici a pagamento","Puerto Rico":"Porto Rico","Republic of China":"Repubblica di Cona","Republic of Congo":"Repubblica del Congo","Republic of Ireland":"Irlanda","Russia, Kazakhstan":"Russia, Kazakistan","Rwanda":"Ruanda","SW Alabama":"SO Alabama","SW Florida":"SO Florida","SW Georgia":"SO Georgia","SW Louisiana":"SO Louisiana","SW Michigan":"SO Michigan","SW Missouri":"SO Missouri","SW New Jersey":"SO New Jersey","SW Ohio":"SO Ohio","SW Oklahoma":"SO Oklahoma","SW Ontario":"SO Ontario","SW Pennsylvania":"SO Pennsylvania","SW Tennessee":"SO Tennessee","SW Texas":"SO Texas","SW Virginia":"SO Virginia","SW Wisconsin":"SO Wisconsin","Saint Helena":"SantâElena","Saint Helena, Tristan da Cunha":"SantâElena, Tristan da Cunha","Saint Kitts and Nevis":"Saint Kitts e Nevis","Saint Lucia":"Santa Lucia","Saint Pierre and Miquelon":"Saint Pierre e Miquelon","Saint Pierre and Miquelon Islands":"Isole Saint Pierre e Miquelon","Saint Vincent and the Grenadines":"Saint Vincent e le Grenadines","Saudi Arabia":"Arabia Saudita","Service Number":"Numero servizio","Seville":"Siviglia","Shared Cost":"Costo condiviso","Shared Cost Service":"Servizio a costo condiviso","Slovakia":"Slovacchia","Solomon Islands":"Isole Salomone","South Africa":"Sudafrica","South Carolina: Greenville, Spartanburg, Anderson, Upstate South Carolina":"South Carolina: Greenville, Spartanburg, Anderson, interno South Carolina","South Central California: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave":"Sud centro California: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave","South Central Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven":"Sud centro Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven","South Central Michigan: Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison":"Sud centro Michigan: Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison","South Central North Carolina: Charlotte, Gastonia, Concord, Salisbury":"Sud centro North Carolina: Charlotte, Gastonia, Concord, Salisbury","South Central Pennsylvania: Harrisburg, Gettysburg, Lancaster, York":"Sud centro Pennsylvania: Harrisburg, Gettysburg, Lancaster, York","South Korea":"Corea del Sud","Southeast France":"Sudest Francia","Southeastern Alabama: Montgomery, Auburn, Opelika, Dothan, Selma":"Sud est Alabama: Montgomery, Auburn, Opelika, Dothan, Selma","Southeastern Arizona: Tucson, Nogales":"Sud est Arizona: Tucson, Nogales","Southeastern California: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County":"Sud est California: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County","Southeastern Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta":"Sud est Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta","Southeastern Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas":"Sud est Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas","Southeastern Louisiana: Houma, Slidell":"Sud est Louisiana: Houma, Slidell","Southeastern Massachusetts: Worcester, New Bedford":"Sud est Massachusetts: Worcester, New Bedford","Southeastern New York: Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville":"Sud est New York Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville","Southeastern North Carolina: Fayetteville, Wilmington, Jacksonville, Lumberton":"Sud est North Carolina Fayetteville, Wilmington, Jacksonville, Lumberton","Southeastern Pennsylvania: Allentown, Reading, Norristown, Chester":"Sud est Pennsylvania: Allentown, Reading, Norristown, Chester","Southeastern Texas: Beaumont, Galveston, Port Arthur, Jasper":"Sud est Texas: Beaumont, Galveston, Port Arthur, Jasper","Southeastern Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange":"Sud est Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange","Southeastern Wisconsin: Racine, Kenosha, Menomonee Falls, Waukesha":"Sud est Wisconsin: Racine, Kenosha, Menomonee Falls, Waukesha","Southern Alberta, Canada: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks":"Sud Alberta, Canada: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks","Southern California: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County":"Sud California: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County","Southern California: Central Los Angeles":"Sud California: Centro Los Angeles","Southern California: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana":"Sud California: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana","Southern California: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild":"Sud California: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild","Southern California: Del Mar, La Jolla, San Diego":"Sud California: Del Mar, La Jolla, San Diego","Southern California: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar":"Sud California: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar","Southern California: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower":"Sud California: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower","Southern California: Los Angeles, West LA, San Fernando Valley, Florence, Montebello":"Sud California: Los Angeles, West LA, San Fernando Valley, Florence, Montebello","Southern California: Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, eastern Los Angeles suburbs":"Sud California: Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, periferia est di Los Angeles","Southern California: San Diego":"Sud California: San Diego","Southern California: San Diego, Chula Vista":"Sud California: San Diego, Chula Vista","Southern California: San Fernando Valley":"Sud California: San Fernando Valley","Southern California: San Fernando Valley, including Glendale, San Fernando, Northridge, Burbank, Los Angeles suburbs":"Sud California: San Fernando Valley, inclusi Glendale, San Fernando, Northridge, Burbank, periferia di Los Angeles","Southern California: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, the Los Angeles Westside":"Sud California: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, zona ovest di Los Angeles","Southern Florida: Fort Lauderdale, Hollywood, Coral Springs":"Sud Florida: Fort Lauderdale, Hollywood, Coral Springs","Southern Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West":"Sud Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West","Southern Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon":"Sud Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon","Southern Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal":"Sud Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal","Southern Minnesota: Rochester, Mankato, Worthington, Marshall":"Sud Minnesota: Rochester, Mankato, Worthington, Marshall","Southern Mississippi: Gulfport, Biloxi, Pascagoula, Bay St Louis":"Sud Mississippi: Gulfport, Biloxi, Pascagoula, Bay St Louis","Southern Texas: Laredo, Brownsville, McAllen, Harlingen":"Sud Texas: Laredo, Brownsville, McAllen, Harlingen","Southern Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill":"Sud Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill","Southern and Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"Sud ed est Arkansas: Texarkana, Jonesboro, Pine Bluff","Southern and Western Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City":"Sud ed ovest Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City","Southwest France":"Sud est Francia","Southwestern Alabama: Mobile, Jackson, Brewton":"Sud ovest Alabama: Mobile, Jackson, Brewton","Southwestern Florida: Lee, Collier, and Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades":"Sud ovest Florida: Contee Lee, Collier e Monroe; Cape Coral, Fort Myers, Naples, Everglades","Southwestern Florida: Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda":"Sud ovest Florida: Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda","Southwestern Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald":"Sud ovest Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald","Southwestern Louisiana: Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder":"Sud ovest Louisiana: Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder","Southwestern Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, Detroit suburbs":"Sud ovest Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, periferia di Detroit","Southwestern Michigan: Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph":"Sud ovest Michigan: Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph","Southwestern Michigan: Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia":"Sud ovest Michigan: Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia","Southwestern Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon":"Sud ovest Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon","Southwestern New Jersey: Vineland, Cherry Hill, Camden, Millville":"Sud ovest New Jersey: Vineland, Cherry Hill, Camden, Millville","Southwestern Ohio":"Sud ovest Ohio","Southwestern Ohio: Cincinnati, Middletown, Hamilton, Norwood, Lebanon":"Sud ovest Ohio: Cincinnati, Middletown, Hamilton, Norwood, Lebanon","Southwestern Ohio: Marysville, Springfield, Dayton, Hillsboro":"Sud ovest Ohio: Marysville, Springfield, Dayton, Hillsboro","Southwestern Ontario, Canada: London, Windsor, Kitchener-Waterloo, Cambridge":"Sud ovest Ontario, Canada: London, Windsor, Kitchener-Waterloo, Cambridge","Southwestern Ontario, Canada: Niagara Region, Hamilton, Toronto suburbs":"Sud ovest Ontario, Canada: Niagara, Hamilton, periferia Toronto","Southwestern Pennsylvania: New Castle, Washington, Indiana, Uniontown":"Sud ovest Pennsylvania: New Castle, Washington, Indiana, Uniontown","Southwestern Tennessee: Memphis, Covington, Somerville":"Sud ovest Tennessee: Memphis, Covington, Somerville","Southwestern Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass":"Sud ovest Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass","Southwestern Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield":"Sud ovest Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield","Southwestern Wisconsin: Madison, La Crosse, Platteville, Beloit":"Sud ovest Wisconsin: Madison, La Crosse, Platteville, Beloit","Spain":"Spagna","Special Telecom.":"Telecom. speciali","Special Telecommunications Needs in Canada":"Uso telecomunicazioni speciali in Canada","St. Pierre and Miquelon":"St. Pierre e Miquelon","Strasburg":"Strasburgo","StraÃberg":"Strasburgo","Stuttgart":"Stoccarda","Stuttgart, Aichwald, Denkendorf, Esslingen am Neckar, Fellbach, Filderstadt-Bernhausen, Filderstadt-Bonlanden, Filderstadt-Plattenhardt, Korntal, Leinfelden-Echterdingen, Ostfildern-Kemnat, Ostfildern-Nellingen, Ostfildern-Ruit":"Stoccarda, Aichwald, Denkendorf, Esslingen am Neckar, Fellbach, Filderstadt-Bernhausen, Filderstadt-Bonlanden, Filderstadt-Plattenhardt, Korntal, Leinfelden-Echterdingen, Ostfildern-Kemnat, Ostfildern-Nellingen, Ostfildern-Ruit","Sweden":"Svezia","Switzerland":"Svizzera","Syria":"Siria","SÃ£o TomÃ© and PrÃ­ncipe":"Sao Tome e Principe","Tajikistan":"Tagikistan","Texas: Dallas area":"Texas: Zona di Dallas","Texas: San Antonio area":"Texas: Zona di San Antonio","Texas: Waco, Killeen, Temple, Belton, and Stephenville":"Texas: Waco, Killeen, Temple, Belton e Stephenville","Thailand":"Tailandia","The Bahamas":"Le Bahamas","The British Virgin Islands":"Isole Vergini Britanniche","The Cayman Islands":"Isole Cayman","The Dominican Republic":"Repubblica Dominicana","The Gambia":"Gambia","The Turks and Caicos Islands":"Isole Turks e Caicos","The U.S. Virgin Islands":"Isole Vergini americane","Toll call":"Chiamata a pagamento","Toll calls (NumÃ©ros Azur)":"Chiamata a pagamento (numero azzurro)","Toll calls (NumÃ©ros Indigo)":"Chiamata a pagamento (numero indaco)","Toll-free":"Numero verde","Toll-free Telephone Service":"Servizio telefonico numero verde","Trinidad and Tobago":"Trinidad e Tobago","Trinidad/Tobago":"Trinidad e Tobago","Turkey":"Turchia","Turkey, Turkish Republic of Northern Cyprus":"Turchia, Repubblica Turca di Cipro del Nord","Turks/Caicos":"Turk/Caicos","U.S. Government":"Governo USA","U.S. Government Special Services":"Servizi speciali governo USA","U.S. Virgins":"Isole Vergini Statunitensi","UAE":"EAU","Ukraine":"Ucraina","United Arab Emirates":"Emirati Arabi Uniti","United Kingdom":"Regno Unito","United Kingdom, Guernsey, Isle of Man, Jersey":"Regno unito, Guernsey, Isola di Man, Jersey","Universal Personal":"Universale personale","Universal Personal Telecommunications":"Telecomunicazione personale universale","Universal international freephone number":"Numero verde internazionale","Unknown Country":"Nazione sconosciuta","Unknown Location":"Posizione sconosciuta","Vatican City":"CittÃ  del Vaticano","Vizcaya":"Biscaglia","Voice over IP services":"Servizi Voice over IP","W Illinois":"O Illinois","W Iowa":"O Iowa","W Kentucky":"O Kentucky","W Maryland":"O Maryland","W Massachusetts":"O Massachusetts","W Nebraska":"O Nebraska","W New York":"O New York","W North Carolina":"O North Carolina","W Pennsylvania":"O Pennsylvania","W Tennessee":"O Tennessee","W Texas":"O Texas","W Washington":"O Washington","Wallis and Futuna":"Wallis e Futuna","Washington: Seattle suburbs, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood and Mountlake Terrace":"Washington: Periferia di Seattle, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood e Mountlake Terrace","Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway and south Seattle suburbs":"Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway e periferia sud di Seattle","Washington: Western Washington":"Washington: Ovest Washington","West Central Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston":"Ovest centro Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston","West Central Missouri: Kansas City, St Joseph, Independence, Harrisonville":"Ovest centro Missouri: Kansas City, St Joseph, Independence, Harrisonville","West Central New Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield":"Ovest centro New Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield","West Texas: Midland, Odessa, Big Spring, Alpine":"Ovest Texas: Midland, Odessa, Big Spring, Alpine","Western Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville":"Ovest Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville","Western Kentucky: Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown":"Ovest Kentucky: Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown","Western Maryland: Silver Spring, DC suburbs, Hagerstown, Frederick, Rockville, Cumberland":"Ovest Maryland: Silver Spring, periferia DC, Hagerstown, Frederick, Rockville, Cumberland","Western Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield":"Ovest Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield","Western Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island":"Ovest Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island","Western New York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean":"Ovest New York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean","Western New York: Rochester, Wellsville, Batavia":"Ovest New York: Rochester, Wellsville, Batavia","Western North Carolina: Hickory, Asheville, Waynesville, Franklin, Murphy":"Ovest North Carolina: Hickory, Asheville, Waynesville, Franklin, Murphy","Western Pennsylvania: Pittsburgh area, McKeesport, Braddock, Duquesne":"Ovest Pennsylvania: Zona di Pittsburgh, McKeesport, Braddock, Duquesne","Western Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar":"Ovest Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar","Western Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen":"Ovest Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen","Western and Southern Texas: Corpus Christi, Victoria, George":"Ovest e sud Texas: Corpus Christi, Victoria, George","Yukon, Northwest Territories, and Nunavut, Canada":"Yukon, Northwest Territories e Nunavut, Canada","Zaragoza":"Saragozza"};
ilib.data.phoneres_ko = {"Busan":"ë¶ì°","China":"ì¤êµ­","Chungcheongbuk-do":"ì¶©ì²­ë¶ë","Chungcheongnam-do":"ì¶©ì²­ë¨ë","Daegu":"ëêµ¬","Daegu and a part of Gyeongsangbuk-do (Gyeongsan)":"ëêµ¬ ê·¸ë¦¬ê³  ê²½ìë¶ë ì¼ë¶ (ê²½ì°)","Daejeon":"ëì ","Daejeon and a part of Chungcheongnam-do (Gyeryong)":"ëì  ê·¸ë¦¬ê³  ì¶©ì²­ë¨ë ì¼ë¶ (ê³ë£¡)","Gangwon-do":"ê°ìë","Gwangju":"ê´ì£¼","Gyeonggi-do":"ê²½ê¸°ë","Gyeongsangbuk-do":"ê²½ìë¶ë","Gyeongsangnam-do":"ê²½ìë¨ë","Gyeongsangnam-do and a few neighborhoods of Ulsan":"ê²½ìë¨ë ê·¸ë¦¬ê³  ì¸ì°ì ì¼ë¶","Hong Kong":"íì½©","Incheon":"ì¸ì²","Incheon and parts of Gyeonggi-do (Bucheon and some insular communities of Ansan)":"ì¸ì² ê·¸ë¦¬ê³  ê²½ê¸°ë ì¼ë¶ (ë¶ì²ì ê·¸ë¦¬ê³  ìì°ì ì¼ë¶)","Japan":"ì¼ë³¸","Jeju-do":"ì ì£¼ë","Jeollabuk-do":"ì ë¼ë¶ë","Jeollanam-do":"ì ë¼ë¨ë","Kaesong":"ê°ì±","Kaesong Industrial Region":"ê°ì±ê³µìì§êµ¬","North Korea":"ë¶í","People's Republic of China":"ì¤íì¸ë¯¼ê³µíêµ­","Sejong City":"ì¸ì¢ì","Seoul":"ìì¸","Seoul and parts of Gyeonggi-do (Gwacheon, Gwangmyeong and some neighborhoods of Goyang and Hanam)":"ìì¸ ê·¸ë¦¬ê³  ê²½ê¸°ë ì¼ë¶(ê³¼ì², ê´ëª ê·¸ë¦¬ê³  ê³ ìì íë¨ì)","South Korea":"ë¨í","Ulsan":"ì¸ì°"};
ilib.data.phoneres_nl = {"Aachen":"Aken","Aachen-KornelimÃ¼nster":"Aken-KornelimÃ¼nster","Alabama: Birmingham; Tuscaloosa; western and central Alabama":"Alabama: Birmingham; Tuscaloosa; west en centraal Alabama","Albania":"AlbaniÃ«","Algeria":"Algerije","American Samoa":"Amerikaans Samoa","Antigua and Barbuda":"Antigua en Barbuda","Argentina":"ArgentiniÃ«","Arizona: Glendale, Sun City, Buckeye, Peoria, western Phoenix suburbs":"Arizona: Glendale, Sun City, Buckeye, Peoria, westelijke voorsteden van Phoenix","Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, eastern Phoenix suburbs":"Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, oostelijke voorsteden van Phoenix","Armenia":"ArmeniÃ«","Armenia, Nagorno-Karabakh":"ArmeniÃ«, Nagorno-Karabakh","Ascension Island":"Ascensioneiland","Australia":"AustraliÃ«","Australia, Christmas Island, Cocos Islands":"AustraliÃ«, Christmaseiland, Cocoseilanden","Austria":"Oostenrijk","BVIs":"Britse Maagdeneilanden","Bahamas":"Bahamaâs","Belgium":"BelgiÃ«","Berlin":"Berlijn","Bosnia and Herzegovina":"BosniÃ« en Herzegovina","Brazil":"BraziliÃ«","British Columbia: Victoria, Prince George, Prince Rupert, Kelowna; also Hyder, Alaska.":"British Columbia: Victoria, Prince George, Prince Rupert, Kelowna; ook Hyder, Alaska.","British Indian Ocean":"Britse Indische Oceaan","British Indian Ocean Territory":"Brits territorium in de Indische Oceaan","Bulgaria":"Bulgarije","California":"CaliforniÃ«","California: East Bay Area, Oakland, Berkeley, Alameda":"CaliforniÃ«: East Bay Area, Oakland, Berkeley, Alameda","California: Stockton, Modesto, Merced, Tracy, San Andreas and central California":"CaliforniÃ«: Stockton, Modesto, Merced, Tracy, San Andreas en centraal CaliforniÃ«","Cambodia":"Cambodja","Cameroon":"Kameroen","Cape Verde":"KaapverdiÃ«","Carrier Access":"Toegang tot aanbieder","Caymans":"Kaaimaneilanden","Central African Republic":"Centraal-Afrikaanse Republiek","Central Arkansas: Little Rock, Hot Springs":"Centraal Arkansas: Little Rock, Hot Springs","Central California: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin":"Centraal CaliforniÃ«: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin","Central California: Fresno, Visalia, Madera, Hanford, Tulare":"Centraal CaliforniÃ«: Fresno, Visalia, Madera, Hanford, Tulare","Central California: Oakland, Berkeley, Alameda":"Centraal CaliforniÃ«: Oakland, Berkeley, Alameda","Central California: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond":"Centraal CaliforniÃ«: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond","Central California: Sacramento, Davis, Roseville":"Centraal CaliforniÃ«: Sacramento, Davis, Roseville","Central California: Salinas, Hollister, Monterey, Carmel, Santa Cruz":"Centraal CaliforniÃ«: Salinas, Hollister, Monterey, Carmel, Santa Cruz","Central California: San Francisco":"Centraal CaliforniÃ«: San Francisco","Central California: San Francisco, Marin County":"Centraal CaliforniÃ«: San Francisco, Marin County","Central California: San Jose":"Centraal CaliforniÃ«: San Jose","Central California: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy":"Centraal CaliforniÃ«: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy","Central California: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, southern San Francisco suburbs":"Centraal CaliforniÃ«: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, zuidelijke voorsteden van San Francisco","Central Coastal California: Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley":"Centrale kustzone van CaliforniÃ«: Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley","Central Colorado: Denver, Boulder, Longmont, Aurora":"Centraal Colorado: Denver, Boulder, Longmont, Aurora","Central Eastern Florida: Orlando, Cocoa Beach, St Cloud":"Centraal Oost Florida: Orlando, Cocoa Beach, St Cloud","Central Eastern Florida: Orlando, Florida, St. Cloud":"Centraal Oost Florida: Orlando, Florida, St. Cloud","Central Eastern Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart":"Centraal Oost Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart","Central Eastern Louisiana: Baton Rouge, Donaldsonville, New Roads, White Castle":"Centraal Oost Louisiana: Baton Rouge, Donaldsonville, New Roads, White Castle","Central Eastern Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood":"Centraal Oost Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood","Central Florida: Gainesville, Ocala, Inverness, Dunnellon":"Centraal Florida: Gainesville, Ocala, Inverness, Dunnellon","Central Florida: St Petersburg, Dunedin":"Centraal Florida: St Petersburg, Dunedin","Central Florida: Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar":"Centraal Florida: Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar","Central Georgia: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry":"Centraal Georgia: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry","Central Illinois: Springfield, Champaign Decatur, Urbana, Lincoln":"Centraal Illinois: Springfield, Champaign Decatur, Urbana, Lincoln","Central Indiana: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove":"Centraal Indiana: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove","Central Indiana: Lafayette, Marion, Muncie, Richmond":"Centraal Indiana: Lafayette, Marion, Muncie, Richmond","Central Iowa: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield":"Centraal Iowa: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield","Central Michigan: Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso":"Centraal Michigan: Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso","Central Minnesota: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton":"Centraal Minnesota: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton","Central Mississippi: Jackson, Meridian, Natchez, McComb, Hattiesburg":"Centraal Mississippi: Jackson, Meridian, Natchez, McComb, Hattiesburg","Central North Georgia: Marietta, Cedartown, Gainesville, Atlanta suburbs":"Centraal Noord Georgia: Marietta, Cedartown, Gainesville, voorsteden van Atlanta","Central Oklahoma: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha":"Centraal Oklahoma: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha","Central Ontario, Canada: Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie":"Centraal Ontario, Canada: Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie","Central South Carolina: Columbia, Rock Hill, Sumter, Aiken":"Centraal South Carolina: Columbia, Rock Hill, Sumter, Aiken","Central Southern Quebec, Canada: Laval, Montreal suburbs":"Centraal Zuid Quebec, Canada: Laval, voorsteden van Montreal","Central Texas: Austin, San Marcos, Lampasas, Bastrop, Milam":"Centraal Texas: Austin, San Marcos, Lampasas, Bastrop, Milam","Central Western Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg":"Centraal West Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg","Central and Southeastern New Jersey: Atlantic City, Trenton":"Centraal en Zuidoost New Jersey: Atlantic City, Trenton","Central and Southeastern Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens":"Centraal en Zuidoost Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens","Central and Southeastern Texas: Nacogdoches, Lufkin, Conroe, Huntsville":"Centraal en Zuidoost Texas: Nacogdoches, Lufkin, Conroe, Huntsville","Chad":"Tsjaad","Chile":"Chili","Cologne":"Keulen","Commonwealth of Dominica":"Gemenebest van Dominica","Comoros":"Comoren","Connecticut: Bridgeport, Danbury, New Haven, Waterbury, Southwestern Connecticut":"Connecticut: Bridgeport, Danbury, New Haven, Waterbury, Zuidwest Connecticut","Connecticut: Bristol, Hartford, Norwich and northern and eastern Connecticut":"Connecticut: Bristol, Hartford, Norwich en Noord en Oost Connecticut","Cook Islands":"Cookeilanden","Croatia":"KroatiÃ«","Czech Republic":"TsjechiÃ«","CÃ´te d'Ivoire":"Ivoorkust","DRC":"D.R.C.","Democratic Republic of the Congo":"Democratische Republiek Congo","Denmark":"Denemarken","Dir. Assistance":"Nummerinformatie","Directory Assistance Applications":"Nummerinformatietoepassingen","Dominican Republic":"Dominicaanse Republiek","E Arkansas":"O Arkansas","E Florida":"O Florida","E Iowa":"O Iowa","E Kansas":"O Kansas","E Kentucky":"O Kentucky","E Louisiana":"O Louisiana","E Maryland":"O Maryland","E Massachusetts":"O Massachusetts","E Nebraska":"O Nebraska","E Ontario":"O Ontario","E South Carolina":"O South Carolina","E Tennessee":"O Tennessee","E Washington":"O Washington","E Wisconsin":"O Wisconsin","East Central Minnesota: St Paul, Lindstrom, Red Wing, Hastings":"Oost Centraal Minnesota: St Paul, Lindstrom, Red Wing, Hastings","East Central Missouri: St. Charles, Chesterfield, Union, De Soto, Troy":"Oost Centraal Missouri: St. Charles, Chesterfield, Union, De Soto, Troy","East Central New Jersey: New Brunswick, Neptune, Freehold, Lakewood":"Oost Centraal New Jersey: New Brunswick, Neptune, Freehold, Lakewood","East Timor":"Oost-Timor","Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"Oost Arkansas: Texarkana, Jonesboro, Pine Bluff","Eastern Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City":"Oost Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City","Eastern Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton":"Oost Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton","Eastern Kansas: Kansas City, Overland Park, Paola, Leavenworth":"Oost Kansas: Kansas City, Overland Park, Paola, Leavenworth","Eastern Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville":"Oost Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville","Eastern Maryland: Baltimore, Annapolis, Salisbury":"Oost Maryland: Baltimore, Annapolis, Salisbury","Eastern Massachusetts: Boston, Cambridge":"Oost Massachusetts: Boston, Cambridge","Eastern Massachusetts: Saugus, Norwood, Waltham, Woburn, Boston suburbs":"Oost Massachusetts: Saugus, Norwood, Waltham, Woburn, voorsteden van Boston","Eastern Nebraska: Omaha, Lincoln, Norfolk, Superior":"Oost Nebraska: Omaha, Lincoln, Norfolk, Superior","Eastern Ontario, Canada: Ottawa":"Oost Ontario, Canada: Ottawa","Eastern Ontario, Canada: Ottawa, Kingston":"Oost Ontario, Canada: Ottawa, Kingston","Eastern South Carolina: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island":"Oost South Carolina: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island","Eastern Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland":"Oost Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland","Eastern Washington: Spokane, the Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg":"Oost Washington: Spokane, de Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg","Eastern Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac":"Oost Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac","Egypt":"Egypte","Emergency Services Number":"Nummer van nooddiensten","Equatorial Guinea":"Equatoriaal Guinea","Estonia":"Estland","Ethiopia":"EthiopiÃ«","European Telephony":"Europees bellen","European Telephony Numbering Space":"Europese telefoonnummerruimte","Falkland Islands":"Falklandeilanden","Faroe Islands":"FaroÃ«reilanden","Federated States of Micronesia":"Federatieve Staten van MicronesiÃ«","Finland, Ãland Islands":"Finland, Ãlandeilanden","Former Yugoslav Republic of Macedonia":"Voormalige Joegoslavische Republiek van MacedoniÃ«","France":"Frankrijk","Freephone":"Gratis bellen","French Guiana":"Frans Guyana","French Polynesia":"Frans PolynesiÃ«","Germany":"Duitsland","Global Mobile Satellite System":"Globaal mobiel satellietsysteem","Global Satellite":"Globale satelliet","Greece":"Griekenland","Greenland":"Groenland","Guadaloupe Island":"Guadaloupe-eilanden","Guinea":"Guinee","Guinea-Bissau":"Guinee-Bissau","Haiti":"HaÃ¯ti","Hawaii":"HawaiÃ¯","Hungary":"Hongarije","Hyderabad East (Ghatkeswar), Hyderabad":"Hyderabad Oost (Ghatkeswar), Hyderabad","Iceland":"IJsland","Illinois: Aurora, Naperville, western Chicago":"Illinois: Aurora, Naperville, West Chicago","Illinois: Aurora, Naperville, western Chicago suburbs":"Illinois: Aurora, Naperville, westelijke voorsteden van Chicago","Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, western Chicago suburbs":"Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, westelijke voorsteden van Chicago","Inbound Intl.":"Inkomend internationaal","Inbound international calls for carrier-specific services":"Inkomende internationale gesprekken voor aanbieder-specifieke services","Indiana: Southern Indiana, including Bloomington, Evansville, Jeffersonville, New Albany, and Terre Haute).":"Indiana: Zuid Indiana, met inbegrip van Bloomington, Evansville, Jeffersonville, New Albany en Terre Haute).","Indonesia":"IndonesiÃ«","International National Rate Service":"Internationale service tegen nationaal tarief","International Networks":"Internationale netwerken","International Networks (country code)":"Internationale netwerken (landcode)","International Premium Rate Service":"Internationale service tegen premiumtarief","Iraq":"Irak","Ireland":"Ierland","Islands of RÃ©union and Mayotte":"RÃ©union en Mayotte","Israel":"IsraÃ«l","Israel, Palestinian Authority":"IsraÃ«l, Palestijnse autoriteit","Italy":"ItaliÃ«","Italy, Vatican City":"ItaliÃ«, Vaticaanstad","Jordan":"JordaniÃ«","Kentucky: west of the Pennyrile Parkway, including Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray, and Paducah":"Kentucky: ten Westen van de Pennyrile Parkway, waaronder Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray en Paducah","Kenya":"Kenia","Kuwait":"Koeweit","Kyrgyzstan":"KirgiziÃ«","LD Carrier":"Langeafstandsaanbieder","Latvia":"Letland","Lebanon":"Libanon","Libya":"LibiÃ«","Lichtenstein":"Liechtenstein","Lichtenstein, Engstingen":"Liechtenstein, Engstingen","Lithuania":"Litouwen","London":"Londen","Long Distance Carrier Use":"Gebruik van langeafstandsaanbieder","Luxembourg":"Luxemburg","Madagascar":"Madagaskar","Malaysia":"MaleisiÃ«","Maldives":"Malediven","Marianas":"Marianen","Marshall Islands":"Marshalleilanden","Martinique Island":"Martinique-eiland","Mauritania":"MauritaniÃ«","Mexico City":"Mexico Stad","Mexico City, Federal District":"Mexico Stad, Distrito Federal","Michigan: Port Huron, Flint, Lapeer, and Michigan \"Thumb\"":"Michigan: Port Huron, Flint, Lapeer en Michigan \"Thumb\"","Micronesia":"MicronesiÃ«","Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, northwest Minneapolis":"Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, Noordwest Minneapolis","Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark and eastern Missouri excluding St. Louis":"Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark en Oost Missouri met uitzondering van St. Louis","Mobile Number":"Mobiel nummer","Moldova":"MoldaviÃ«","Mongolia":"MongoliÃ«","Morocco":"Marokko","Morocco, Western Sahara":"Marokko, Westelijke Sahara","Munich":"MÃ¼nchen","N California":"N CaliforniÃ«","NE Alabama":"NO Alabama","NE California":"NO CaliforniÃ«","NE Florida":"NO Florida","NE Illinois":"NO Illinois","NE Indiana":"NO Indiana","NE Massachusetts":"NO Massachusetts","NE New York":"NO New York","NE North Carolina":"NO North Carolina","NE Ohio":"NO Ohio","NE Oklahoma":"NO Oklahoma","NE Pennsylvania":"NO Pennsylvania","NE Texas":"NO Texas","NW California":"NW CaliforniÃ«","Namibia":"NamibiÃ«","National Rate":"Nationaal tarief","Netherlands":"Nederland","Netherlands Antilles":"Nederlandse Antillen","New Caledonia":"Nieuw CaledoniÃ«","New Delhi":"Nieuw Delhi","New Delhi, New Delhi":"Nieuw Delhi, Nieuw Delhi","New Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford, and northeast New Jersey":"New Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford en Noordoost New Jersey","New York: Manhattan except for Marble Hill":"New York: Manhattan, met uitzondering van Marble Hill","New York: The \"Outer Boroughs\"":"New York: de Outer Boroughs","New Zealand":"Nieuw-Zeeland","Newfoundland and Labrador, Canada: St. John's":"Newfoundland en Labrador, Canada: St. John's","Norfolk Island":"Norfolkeiland","Norfolk Island, Australian Antarctic Territory":"Norfolkeiland, Australisch Zuidpoolgebied","North America":"Noord-Amerika","North America and the Caribbean Islands":"Noord-Amerika en de CaraÃ¯bische eilanden","North Carolina: Greensboro, Winston-Salem, Wilkesboro, Roxboro, and northwest North Carolina":"North Carolina: Greensboro, Winston-Salem, Wilkesboro, Roxboro en Noordwest North Carolina","North Central Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee":"Noord Centraal Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee","North Central Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola":"Noord Centraal Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola","North Central Kentucky: Lexington, Richmond, Danville, Covington, Florence, Mount Sterling":"Noord Centraal Kentucky: Lexington, Richmond, Danville, Covington, Florence, Mount Sterling","North Central Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany":"Noord Centraal Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany","North Central New York: Syracuse, New York, Utica, Watertown":"Noord Centraal New York: Syracuse, New York, Utica, Watertown","North Central North Carolina: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro":"Noord Centraal North Carolina: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro","North Central Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson":"Noord Centraal Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson","North Central Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester":"Noord Centraal Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester","North Korea":"Noord-Korea","Northeast France":"Noordoost Frankrijk","Northeastern Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs":"Noordwest Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs","Northeastern Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, Chicago suburbs":"Noordoost Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, voorsteden van Chicago","Northeastern Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash":"Noordoost Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash","Northeastern Massachusetts: Fitchburg, Peabody":"Noordoost Massachusetts: Fitchburg, Peabody","Northeastern New York: Albany, Schenectady, Plattsburgh, Saranac Lake":"Noordoost New York: Albany, Schenectady, Plattsburgh, Saranac Lake","Northeastern North Carolina: Greenville, Kitty Hawk, Rocky Mount":"Noordoost North Carolina: Greenville, Kitty Hawk, Rocky Mount","Northeastern Ohio: Akron, Canton, Youngstown, Warren":"Noordwest Ohio: Akron, Canton, Youngstown, Warren","Northeastern Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta":"Noordoost Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta","Northeastern Pennsylvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg":"Noordoost Pennsylvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg","Northeastern Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage":"Noordoost Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage","Northern Alberta, Canada: Edmonton, Jasper, Grande Prairie, Peace River":"Noord Alberta, Canada: Edmonton, Jasper, Grande Prairie, Peace River","Northern California coast":"Noordelijke kust van CaliforniÃ«","Northern Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake":"Noord Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake","Northern Ireland":"Noord-Ierland","Northern Kansas: Colby, Topeka, Salina, Manhattan, Lawrence":"Noord Kansas: Colby, Topeka, Salina, Manhattan, Lawrence","Northern Kentucky: Louisville, Frankfort, Shelbyville, Bardstown":"Noord Kentucky: Louisville, Frankfort, Shelbyville, Bardstown","Northern Louisiana: Shreveport, Monroe, Alexandria, Fisher, Tallulah":"Noord Louisiana: Shreveport, Monroe, Alexandria, Fisher, Tallulah","Northern Mariana Islands":"Noordelijke Marianen","Northern Michigan: Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Upper Peninsula":"Noord Michigan: Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Upper Peninsula","Northern Minnesota: Duluth, Thief River Falls, Brainerd, International Falls":"Noord Minnesota: Duluth, Thief River Falls, Brainerd, International Falls","Northern Mississippi: Greenville, Tupelo, Winona, Columbus, Holly Springs":"Noord Mississippi: Greenville, Tupelo, Winona, Columbus, Holly Springs","Northern Ohio: Cleveland suburbs, Elyria, Lorain, Oberlin, Ashtabula":"Noord Ohio: Cleveland suburbs, Elyria, Lorain, Oberlin, Ashtabula","Northern Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur":"Noord Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur","Northern Virginia: Alexandria, Arlington, Fairfax, Prince William, eastern Loudoun counties":"Noord Virginia: Alexandria, Arlington, Fairfax, Prince William, oost Loudoun County","Northern Wisconsin: Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland":"Noord Wisconsin: Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland","Northern and Eastern Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston":"Noord en Oost Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston","Northern and Eastern Florida: Daytona Beach, Lake City, Live Oak, Crescent City":"Noord en Oost Florida: Daytona Beach, Lake City, Live Oak, Crescent City","Northern and Western Arizona: Flagstaff, Kingman, Prescott, Yuma":"Noord en West Arizona: Flagstaff, Kingman, Prescott, Yuma","Northern and Western Colorado: Aspen, Durango, Grand Junction, Fort Collins":"Noord en West Colorado: Aspen, Durango, Grand Junction, Fort Collins","Northerneastern California: Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee":"Noordoost CaliforniÃ«: Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee","Northwest California":"Noordwest CaliforniÃ«","Northwest France":"Noordwest Frankrijk","Northwest Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso":"Noordwest Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso","Northwestern Arkansas: Fort Smith, Fayetteville":"Noordwest Arkansas: Fort Smith, Fayetteville","Northwestern California: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah":"Noordwest CaliforniÃ«: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah","Northwestern Florida: Pensacola, Tallahassee, Panama City, the Florida panhandle":"Noordwest Florida: Pensacola, Tallahassee, Panama City, West Florida","Northwestern Michigan: Muskegon, Traverse City, Ludington, Petoskey":"Noordwest Michigan: Muskegon, Traverse City, Ludington, Petoskey","Northwestern New Jersey: Newark, Paterson":"Noordwest New Jersey: Newark, Paterson","Northwestern New Mexico: Albuquerque, Santa Fe, Farmington, Gallup":"Noordwest New Mexico: Albuquerque, Santa Fe, Farmington, Gallup","Northwestern Ohio: Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green":"Noordwest Ohio: Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green","Northwestern Ontario, Canada: Thunder Bay, Kenora, Dryden, Greenstone":"Noordwest Ontario, Canada: Thunder Bay, Kenora, Dryden, Greenstone","Northwestern Oregon: Portland, Salem, Hillsboro, Beaverton":"Noordwest Oregon: Portland, Salem, Hillsboro, Beaverton","Northwestern Oregon: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria":"Noordwest Oregon: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria","Northwestern and Central Pennsylvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium":"Northwest en Centraal Pennsylvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium","Norway":"Noorwegen","Norway, Svalbard and Jan Mayen":"Noorwegen, Svalbard en Jan Mayen","Nova Scotia and Prince Edward Island, Canada":"Nova Scotia en Prince Edward Island, Canada","Palestinian Authority":"Palestijnse autoriteit","Papua New Guinea":"Papoea Nieuw Guinea","Paris":"Parijs","Paris (Ile-de-France area)":"Parijs (regio Ile-de-France)","People's Republic of China":"Volksrepubliek China","Personal Comm.":"Pers. comm.","Personal Comm. Services":"Pers. comm. services","Personal Communications Services":"Persoonlijke communicatieservices","Philippines":"Filipijnen","Poland":"Polen","Premium Rate":"Premium-rate","Premium-rate Telephone Service":"Premium-rate telefoonservice","Republic of China":"Republiek China","Republic of Congo":"Republiek Congo","Republic of Ireland":"Republiek Ierland","Romania":"RoemeniÃ«","Russia":"Rusland","Russia, Kazakhstan":"Rusland, Kazakhstan","S Alberta":"Z Alberta","S Arkansas":"Z Arkansas","S California":"Z CaliforniÃ«","S Florida":"Z Florida","S Illinois":"Z Illinois","S Kansas":"Z Kansas","S Minnesota":"Z Minnesota","S Mississippi":"Z Mississippi","S Quebec":"Z Quebec","S Texas":"Z Texas","S Virginia":"Z Virginia","SE Alabama":"ZO Alabama","SE Arizona":"ZO Arizona","SE California":"ZO CaliforniÃ«","SE Colorado":"ZO Colorado","SE Georgia":"ZO Georgia","SE Louisiana":"ZO Louisiana","SE Massachusetts":"ZO Massachusetts","SE New Jersey":"ZO New Jersey","SE New York":"ZO New York","SE North Carolina":"ZO North Carolina","SE Ohio":"ZO Ohio","SE Pennsylvania":"ZO Pennsylvania","SE Texas":"ZO Texas","SE Wisconsin":"ZO Wisconsin","SW Alabama":"ZW Alabama","SW Florida":"ZW Florida","SW Georgia":"ZW Georgia","SW Louisiana":"ZW Louisiana","SW Michigan":"ZW Michigan","SW Missouri":"ZW Missouri","SW New Jersey":"ZW New Jersey","SW Ohio":"ZW Ohio","SW Oklahoma":"ZW Oklahoma","SW Ontario":"ZW Ontario","SW Pennsylvania":"ZW Pennsylvania","SW Tennessee":"ZW Tennessee","SW Texas":"ZW Texas","SW Virginia":"ZW Virginia","SW Wisconsin":"ZW Wisconsin","Saint Kitts and Nevis":"Saint Kitts en Nevis","Saint Pierre and Miquelon":"Saint Pierre en Miquelon","Saint Pierre and Miquelon Islands":"Saint Pierre- en Miqueloneilanden","Saint Vincent and the Grenadines":"Saint Vincent en de Grenadines","Saudi Arabia":"Saoedi-ArabiÃ«","Serbia":"ServiÃ«","Service Number":"Servicenummer","Seychelles":"Seychellen","Shared Cost":"Gedeelde kosten","Shared Cost Service":"Gedeelde kosten","Slovakia":"Slowakije","Slovenia":"SloveniÃ«","Solomon Islands":"Solomoneilanden","Somalia":"SomaliÃ«","Somalia, Somaliland":"SomaliÃ«, Somaliland","South Africa":"Zuid-Afrika","South Central California: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave":"Zuid Centraal CaliforniÃ«: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave","South Central Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven":"Zuid Centraal Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven","South Central Michigan: Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison":"Zuid Centraal Michigan: Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison","South Central North Carolina: Charlotte, Gastonia, Concord, Salisbury":"Zuid Centraal North Carolina: Charlotte, Gastonia, Concord, Salisbury","South Central Pennsylvania: Harrisburg, Gettysburg, Lancaster, York":"Zuid Centraal Pennsylvania: Harrisburg, Gettysburg, Lancaster, York","South Korea":"Zuid-Korea","Southeast France":"Zuidoost Frankrijk","Southeastern Alabama: Montgomery, Auburn, Opelika, Dothan, Selma":"Zuidwest Alabama: Montgomery, Auburn, Opelika, Dothan, Selma","Southeastern Arizona: Tucson, Nogales":"Zuidoost Arizona: Tucson, Nogales","Southeastern California: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County":"Zuidoost CaliforniÃ«: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County","Southeastern Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta":"Zuidoost Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta","Southeastern Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas":"Zuidwest Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas","Southeastern Louisiana: Houma, Slidell":"Zuidoost Louisiana: Houma, Slidell","Southeastern Massachusetts: Worcester, New Bedford":"Zuidoost Massachusetts: Worcester, New Bedford","Southeastern New York: Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville":"Zuidoost New York: Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville","Southeastern North Carolina: Fayetteville, Wilmington, Jacksonville, Lumberton":"Zuidoost North Carolina: Fayetteville, Wilmington, Jacksonville, Lumberton","Southeastern Pennsylvania: Allentown, Reading, Norristown, Chester":"Zuidoost Pennsylvania: Allentown, Reading, Norristown, Chester","Southeastern Texas: Beaumont, Galveston, Port Arthur, Jasper":"Zuidoost Texas: Beaumont, Galveston, Port Arthur, Jasper","Southeastern Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange":"Zuidoost Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange","Southeastern Wisconsin: Racine, Kenosha, Menomonee Falls, Waukesha":"Zuidoost Wisconsin: Racine, Kenosha, Menomonee Falls, Waukesha","Southern Alberta, Canada: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks":"Zuid Alberta, Canada: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks","Southern California: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County":"Zuid CaliforniÃ«: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County","Southern California: Central Los Angeles":"Zuid CaliforniÃ«: Centraal Los Angeles","Southern California: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana":"Zuid CaliforniÃ«: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana","Southern California: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild":"Zuid CaliforniÃ«: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild","Southern California: Del Mar, La Jolla, San Diego":"Zuid CaliforniÃ«: Del Mar, La Jolla, San Diego","Southern California: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar":"Zuid CaliforniÃ«: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar","Southern California: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower":"Zuid CaliforniÃ«: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower","Southern California: Los Angeles, West LA, San Fernando Valley, Florence, Montebello":"Zuid CaliforniÃ«: Los Angeles, West LA, San Fernando Valley, Florence, Montebello","Southern California: Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, eastern Los Angeles suburbs":"Zuid CaliforniÃ«: Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, oostelijke voorsteden van Los Angeles","Southern California: San Diego":"Zuid CaliforniÃ«: San Diego","Southern California: San Diego, Chula Vista":"Zuid CaliforniÃ«: San Diego, Chula Vista","Southern California: San Fernando Valley":"Zuid CaliforniÃ«: San Fernando Valley","Southern California: San Fernando Valley, including Glendale, San Fernando, Northridge, Burbank, Los Angeles suburbs":"Zuid CaliforniÃ«: San Fernando Valley, met inbegrip van Glendale, San Fernando, Northridge, Burbank, voorsteden van Los Angeles","Southern California: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, the Los Angeles Westside":"Zuid CaliforniÃ«: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, Los Angeles Westside","Southern Florida: Fort Lauderdale, Hollywood, Coral Springs":"Zuid Florida: Fort Lauderdale, Hollywood, Coral Springs","Southern Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West":"Zuid Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West","Southern Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon":"Zuid Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon","Southern Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal":"Zuid Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal","Southern Minnesota: Rochester, Mankato, Worthington, Marshall":"Zuid Minnesota: Rochester, Mankato, Worthington, Marshall","Southern Mississippi: Gulfport, Biloxi, Pascagoula, Bay St Louis":"Zuid Mississippi: Gulfport, Biloxi, Pascagoula, Bay St Louis","Southern Texas: Laredo, Brownsville, McAllen, Harlingen":"Zuid Texas: Laredo, Brownsville, McAllen, Harlingen","Southern Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill":"Zuid Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill","Southern and Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"Zuid en Oost Arkansas: Texarkana, Jonesboro, Pine Bluff","Southern and Western Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City":"Zuid en West Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City","Southwest France":"Zuidwest Frankrijk","Southwestern Alabama: Mobile, Jackson, Brewton":"Zuidwest Alabama: Mobile, Jackson, Brewton","Southwestern Florida: Lee, Collier, and Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades":"Zuidwest Florida: Lee, Collier en Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades","Southwestern Florida: Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda":"Zuidwest Florida: Tampa Bay, Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda","Southwestern Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald":"Zuidwest Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald","Southwestern Louisiana: Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder":"Zuidwest Louisiana: Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder","Southwestern Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, Detroit suburbs":"Zuidwest Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, voorsteden van Detroit","Southwestern Michigan: Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph":"Zuidwest Michigan: Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph","Southwestern Michigan: Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia":"Zuidwest Michigan: Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia","Southwestern Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon":"Zuidwest Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon","Southwestern New Jersey: Vineland, Cherry Hill, Camden, Millville":"Zuidwest New Jersey: Vineland, Cherry Hill, Camden, Millville","Southwestern Ohio":"Zuidwest Ohio","Southwestern Ohio: Cincinnati, Middletown, Hamilton, Norwood, Lebanon":"Zuidwest Ohio: Cincinnati, Middletown, Hamilton, Norwood, Lebanon","Southwestern Ohio: Marysville, Springfield, Dayton, Hillsboro":"Zuidwest Ohio: Marysville, Springfield, Dayton, Hillsboro","Southwestern Ontario, Canada: London, Windsor, Kitchener-Waterloo, Cambridge":"Zuidwest Ontario, Canada: London, Windsor, Kitchener-Waterloo, Cambridge","Southwestern Ontario, Canada: Niagara Region, Hamilton, Toronto suburbs":"Zuidwest Ontario, Canada: Niagara Region, Hamilton, voorsteden van Toronto","Southwestern Pennsylvania: New Castle, Washington, Indiana, Uniontown":"Zuidwest Pennsylvania: New Castle, Washington, Indiana, Uniontown","Southwestern Tennessee: Memphis, Covington, Somerville":"Zuidwest Tennessee: Memphis, Covington, Somerville","Southwestern Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass":"Zuidwest Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass","Southwestern Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield":"Zuidwest Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield","Southwestern Wisconsin: Madison, La Crosse, Platteville, Beloit":"Zuidwest Wisconsin: Madison, La Crosse, Platteville, Beloit","Spain":"Spanje","Special Telecom.":"Speciale telecom.","Special Telecommunications Needs in Canada":"Speciale telecommunicatiebehoeften in Canada","St. Pierre and Miquelon":"St. Pierre en Miquelon","Strasburg":"Straatsburg","StraÃberg":"Straatsburg","Sudan":"Soedan","Sweden":"Zweden","Switzerland":"Zwitserland","Syria":"SyriÃ«","SÃ£o TomÃ© and PrÃ­ncipe":"SÃ£o TomÃ© et PrÃ­ncipe","Texas: Dallas area":"Texas: Dallas, regio","Texas: San Antonio area":"Texas: San Antonio, regio","Texas: Waco, Killeen, Temple, Belton, and Stephenville":"Texas: Waco, Killeen, Temple, Belton en Stephenville","The Bahamas":"De Bahamaâs","The British Virgin Islands":"Britse Maagdeneilanden","The Cayman Islands":"De Kaaimaneilanden","The Dominican Republic":"De Dominicaanse Republiek","The Gambia":"Gambia","The Turks and Caicos Islands":"Turks- en Caicoseilanden","The U.S. Virgin Islands":"Amerikaanse Maagdeneilanden","Toll-free":"Gratis","Toll-free Telephone Service":"Gratis telefoonservice","Trinidad and Tobago":"Trinidad en Tobago","Tunisia":"TunesiÃ«","Turkey":"Turkije","Turkey, Turkish Republic of Northern Cyprus":"Turkije, Turkse Republiek van Noord-Cyprus","U.S. Government":"Amerikaanse overheid","U.S. Government Special Services":"Amerikaanse overheid - Speciale diensten","U.S. Virgins":"Amerikaanse Maagdeneilanden","UAE":"V.A.E.","Uganda":"Oeganda","Ukraine":"OekraÃ¯ne","United Arab Emirates":"Verenigde Arabische Emiraten","United Kingdom":"Verenigd Koninkrijk","United Kingdom, Guernsey, Isle of Man, Jersey":"Verenigd Koninkrijk, Guernsey, eiland Man, Jersey","Universal Personal":"Universeel persoonlijk","Universal Personal Telecommunications":"Universele persoonlijke telecommunicatie","Universal international freephone number":"Universeel gratis international nummer","Unknown Country":"Onbekend land","Unknown Location":"Onbekende locatie","Uzbekistan":"Oezbekistan","Vatican City":"Vaticaanstad","Voice over IP":"Voice-over-IP","Voice over IP services":"Voice-over-IP-services","Wallis and Futuna":"Wallis en Futuna","Washington: Seattle suburbs, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood and Mountlake Terrace":"Washington: Voorsteden van Seattle, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood en Mountlake Terrace","Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway and south Seattle suburbs":"Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway en zuidelijke voorsteden van Seattle","Washington: Western Washington":"Washington: West Washington","West Central Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston":"West Centraal Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston","West Central Missouri: Kansas City, St Joseph, Independence, Harrisonville":"West Centraal Missouri: Kansas City, St Joseph, Independence, Harrisonville","West Central New Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield":"West Centraal New Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield","Western Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville":"West Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville","Western Kentucky: Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown":"West Kentucky: Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown","Western Maryland: Silver Spring, DC suburbs, Hagerstown, Frederick, Rockville, Cumberland":"West Maryland: Silver Spring, DC suburbs, Hagerstown, Frederick, Rockville, Cumberland","Western Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield":"West Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield","Western Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island":"West Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island","Western New York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean":"West New York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean","Western New York: Rochester, Wellsville, Batavia":"West New York: Rochester, Wellsville, Batavia","Western North Carolina: Hickory, Asheville, Waynesville, Franklin, Murphy":"West North Carolina: Hickory, Asheville, Waynesville, Franklin, Murphy","Western Pennsylvania: Pittsburgh area, McKeesport, Braddock, Duquesne":"West Pennsylvania: Pittsburgh-regio, McKeesport, Braddock, Duquesne","Western Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar":"West Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar","Western Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen":"West Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen","Western and Southern Texas: Corpus Christi, Victoria, George":"West en Zuid Texas: Corpus Christi, Victoria, George","Yemen":"Jemen","Yukon, Northwest Territories, and Nunavut, Canada":"Yukon, Northwest Territories en Nunavut, Canada"};
ilib.data.phoneres_zh = {"Aachen":"äºç","Aachen-KornelimÃ¼nster":"äºç-ç§åå©ææ¯ç¹","Afghanistan":"é¿å¯æ±","Akesu":"é¿åèå¸(é¿åèå°åº)","Akesu é¿åèå¸ (é¿åèå°åº)":"é¿åèå¸ (é¿åèå°åº)","Alabama":"äºæå·´é©¬å·","Alabama: Birmingham; Tuscaloosa; western and central Alabama":"äºæå·´é©¬å·ï¼ä¼¯æç¿°ï¼Tuscaloosaï¼äºæå·´é©¬å·è¥¿é¨åä¸­é¨","Alabama: Huntsville":"äºæå·´é©¬å·ï¼Huntsville","Alashanzuoqi":"é¿æåå·¦æ(é¿æåç)","Alashanzuoqi é¿æåå·¦æ (é¿æåç)":"é¿æåå·¦æ (é¿æåç)","Alaska":"é¿ææ¯å å·","Alaska: Anchorage, Juneau, Fairbanks":"é¿ææ¯å å·ï¼Anchorage, Juneau, Fairbanks","Albania":"é¿å°å·´å°¼äº","Alberta":"äºä¼¯è¾¾","Alberta, Canada":"å æ¿å¤§äºä¼¯è¾¾","Aletai":"é¿åæ³°å¸","Aletai é¿åæ³°å¸":"é¿åæ³°å¸","Algeria":"é¿å°åå©äº","Alicante":"é¿å©åç¹","AlmerÃ­a":"é¿å°æ¢éäº","Amer. Samoa":"ç¾å±è¨æ©äº","American Samoa":"ç¾å±è¨æ©äº","Andorra":"å®éå°","Angola":"å®å¥æ","Anguilla":"å®å­æ","Ankang":"å®åº·å¸(å®åº·å°åº)","Ankang å®åº·å¸ (å®åº·å°åº)":"å®åº·å¸ (å®åº·å°åº)","Anqing":"å®åºå¸","Anqing å®åºå¸":"å®åºå¸","Anshan":"éå±±å¸","Anshan éå±±å¸":"éå±±å¸","Anshun":"å®é¡ºå¸(å®é¡ºå°åº)","Anshun å®é¡ºå¸ (å®é¡ºå°åº)":"å®é¡ºå¸ (å®é¡ºå°åº)","Antigua and Barbuda":"å®æçåå·´å¸è¾¾","Antigua/Barbuda":"å®æç/å·´å¸è¾¾","Anyang":"å®é³å¸","Anyang å®é³å¸":"å®é³å¸","Argentina":"é¿æ ¹å»·","Arizona":"äºå©æ¡é£å·","Arizona: Glendale, Sun City, Buckeye, Peoria, western Phoenix suburbs":"äºå©æ¡é£å·ï¼Glendale, Sun City, Buckeye, Peoria, Phoenix è¥¿é¨éåº","Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, eastern Phoenix suburbs":"äºå©æ¡é£å·ï¼Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, å¤å°åä¸é¨éåº","Arizona: Phoenix":"äºå©æ¡é£å·ï¼Ã¯Â»ÃÂ³ÃÂ·","Arkansas":"é¿è¯è²å·","Armenia":"äºç¾å°¼äº","Armenia, Nagorno-Karabakh":"é¿å¡æçï¼çº³æå°è¯ºï¼å¡æå·´èµ«","Aruba":"é¿é²å·´","Ascension":"é¿æ£®æ¾","Ascension Island":"é¿æ£®æ¾å²","Atushi":"é¿å¾ä»å¸(åå­åèæ¯å°åå­èªæ²»å·)","Atushi é¿å¾ä»å¸ (åå­åèæ¯å° åå­èªæ²»å·)":"é¿å¾ä»å¸ (åå­åèæ¯å° åå­èªæ²»å·)","Australia":"æ¾³å¤§å©äº","Australia, Christmas Island, Cocos Islands":"æ¾³å¤§å©äºï¼å£è¯å²ï¼ç§ç§æ¯ç¾¤å²","Austria":"å¥¥å°å©","Azerbaijan":"é¿å¡æç","Azerbaijan, Nagorno-Karabakh":"é¿å¡æçï¼çº³æå°è¯ºï¼å¡æå·´èµ«","BVIs":"è±å±ç»´å°äº¬ç¾¤å²","Baden-Baden":"å·´ç»-å·´ç»","Baden-Baden, Sinzheim":"å·´ç»-å·´ç»ï¼è¾è¨æµ·å§","Bahamas":"å·´åé©¬","Bahrain":"å·´æ","Baicheng":"ç½åå¸","Baicheng ç½åå¸":"ç½åå¸","Baise":"ç¾è²å¸(ç¾è²å°åº)","Baise ç¾è²å¸ (ç¾è²å°åº)":"ç¾è²å¸ (ç¾è²å°åº)","Baishan":"ç½å±±å¸","Baishan ç½å±±å¸":"ç½å±±å¸","Baiyin":"ç½é¶å¸","Baiyin ç½é¶å¸":"ç½é¶å¸","Baleares":"å·´å©é¿é","Bangalore":"ç­å ç½å°","Bangalore, Bangalore":"ç­å ç½å°ï¼ç­å ç½å°","Bange":"ç­æå¿","Bange ç­æå¿":"ç­æå¿","Bangladesh":"å­å æå½","Baoding":"ä¿å®å¸","Baoding ä¿å®å¸":"ä¿å®å¸","Baoji":"å®é¸¡å¸","Baoji å®é¸¡å¸":"å®é¸¡å¸","Baoshan":"ä¿å±±å¸","Baoshan ä¿å±±å¸":"ä¿å±±å¸","Baotou":"åå¤´å¸","Baotou åå¤´å¸":"åå¤´å¸","Barbados":"å·´å·´å¤æ¯","Barcelona":"å·´å¡ç½é£","Bazhong":"å·´ä¸­å¸","Bazhong å·´ä¸­å¸":"å·´ä¸­å¸","Beihai":"åæµ·å¸","Beihai åæµ·å¸":"åæµ·å¸","Beijing":"åäº¬","Belarus":"ç½ä¿ç½æ¯","Belgium":"æ¯å©æ¶","Belize":"ä¼¯å©å¹","Bengbu":"èå å¸","Bengbu èå å¸":"èå å¸","Benin":"è´å®","Benxi":"æ¬æºªå¸","Benxi æ¬æºªå¸":"æ¬æºªå¸","Berlin":"ææ","Bermuda":"ç¾æå¤§","Bhutan":"ä¸ä¸¹","Bijie":"æ¯èå¸(æ¯èå°åº)","Bijie æ¯èå¸ (æ¯èå°åº)":"æ¯èå¸ (æ¯èå°åº)","Binzhou":"æ»¨å·å¸(æ»¨å·å°åº)","Binzhou æ»¨å·å¸ (æ»¨å·å°åº)":"æ»¨å·å¸ (æ»¨å·å°åº)","Birmingham":"ä¼¯æç¿°","Bole":"åä¹å¸(åå°å¡æèå¤èªæ²»å·)","Bole åä¹å¸ (åå°å¡æ èå¤èªæ²»å·)":"åä¹å¸ (åå°å¡æ èå¤èªæ²»å·)","Bolivia":"ç»å©ç»´äº","Bonn":"æ³¢æ©","Bonn, Niederkassel-Mondorf":"æ³¢æ©ï¼ä¸å¡çå°-èå¤å¤«","Bosnia and Herzegovina":"æ³¢æ¯å°¼äºåé»å¡å¥ç»´é£","Botswana":"åè¨ç¦çº³","Brazil":"å·´è¥¿","Bremen":"ä¸æ¥æ¢","Brighton":"å¸è±é¡¿","Bristol":"å¸éæ¯æå°","British Columbia":"ä¸åé¢ å¥ä¼¦æ¯äºç","British Columbia, Canada":"å æ¿å¤§ä¸åé¢ å¥ä¼¦æ¯äºç","British Columbia: Vancouver, Abbotsford, Whistler, Chilliwack":"ä¸åé¢ å¥ä¼¦æ¯äºçï¼æ¸©å¥å, Abbotsford, Whistler, Chilliwack","British Columbia: Victoria, Prince George, Prince Rupert, Kelowna; also Hyder, Alaska.":"ä¸åé¢ å¥ä¼¦æ¯äºçï¼Victoria, Prince George, Prince Rupert, Kelowna; åHyderï¼é¿ææ¯å ã","British Indian Ocean":"è±å±å°åº¦æ´","British Indian Ocean Territory":"è±å±å°åº¦æ´é¢å°","Brunei":"æè±","Brunei Darussalam":"æè±è¾¾é²è¨å°å½","Buckingham":"ç½éæ±","Bulgaria":"ä¿å å©äº","Burkina Faso":"å¸åºçº³æ³ç´¢","Burma":"ç¼ç¸","Burundi":"å¸éè¿ª","California":"å å©ç¦å°¼äºå·","California: East Bay Area, Oakland, Berkeley, Alameda":"å å©ç¦å°¼äºå·ï¼East Bay Area, Oakland, Berkeley, Alameda","California: Stockton, Modesto, Merced, Tracy, San Andreas and central California":"å å©ç¦å°¼äºå·ï¼Stockton, Modesto, Merced, Tracy, San Andreasåå å©ç¦å°¼äºä¸­é¨","Cambodia":"æ¬åå¯¨","Cambridge":"åæ¡¥","Cameroon":"åéº¦é","Cangzhou":"æ²§å·å¸","Cangzhou æ²§å·å¸":"æ²§å·å¸","Cantabria":"åå¡å¸éäº","Canterbury":"åç¹ä¼¯é·","Cape Verde":"ä½å¾è§","Cardiff":"å çå¤«","Carrier Access":"åºå·950","Caymans":"å¼æ¼","Central African Republic":"ä¸­éå±åå½","Central Arkansas: Little Rock, Hot Springs":"é¿è¯è²å·ä¸­é¨ï¼Little Rock, Hot Springs","Central California: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin":"å å©ç¦å©äºå·ä¸­é¨ï¼Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin","Central California: Fresno, Visalia, Madera, Hanford, Tulare":"å å©ç¦å©äºå·ä¸­é¨ï¼Fresno, Visalia, Madera, Hanford, Tulare","Central California: Oakland, Berkeley, Alameda":"å å©ç¦å©äºå·ä¸­é¨ï¼Oakland, Berkeley, Alameda","Central California: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond":"å å©ç¦å©äºå·ä¸­é¨ï¼Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond","Central California: Sacramento, Davis, Roseville":"å å©ç¦å©äºå·ä¸­é¨ï¼Sacramento, Davis, Roseville","Central California: Salinas, Hollister, Monterey, Carmel, Santa Cruz":"å å©ç¦å©äºå·ä¸­é¨ï¼Salinas, Hollister, Monterey, Carmel, Santa Cruz","Central California: San Francisco":"å å©ç¦å©äºå·ä¸­é¨ï¼æ§éå±±","Central California: San Francisco, Marin County":"å å©ç¦å©äºå·ä¸­é¨ï¼æ§éå±±, Marin County","Central California: San Jose":"å å©ç¦å©äºå·ä¸­é¨ï¼ÃÂºÃÃÃ·","Central California: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy":"å å©ç¦å©äºå·ä¸­é¨ï¼San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy","Central California: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, southern San Francisco suburbs":"å å©ç¦å©äºå·ä¸­é¨ï¼San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, San Franciscoåé¨éåº","Central Coastal California: Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley":"å å©ç¦å©äºå·ä¸­é¨æµ·å²¸ï¼Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley","Central Colorado: Denver, Boulder, Longmont, Aurora":"ç§ç½æå¤å·ä¸­é¨ï¼ä¸¹ä½,Boulder, Longmont, Aurora","Central Eastern Florida: Orlando, Cocoa Beach, St Cloud":"ä½ç½éè¾¾å·ä¸ä¸­é¨ï¼Orlando, Cocoa Beach, St Cloud","Central Eastern Florida: Orlando, Florida, St. Cloud":"ä½ç½éè¾¾å·ä¸ä¸­é¨ï¼å¥¥å°å¤, ä½ç½éè¾¾, St. Cloud","Central Eastern Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart":"ä½ç½éè¾¾å·ä¸ä¸­é¨ï¼Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart","Central Eastern Louisiana: Baton Rouge, Donaldsonville, New Roads, White Castle":"è·¯ææ¯å®é£å·ä¸ä¸­é¨ï¼Baton Rouge, Donaldsonville, New Roads, White Castle","Central Eastern Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood":"ç°çº³è¥¿å·ä¸ä¸­é¨ï¼Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood","Central Florida: Gainesville, Ocala, Inverness, Dunnellon":"ä½ç½éè¾¾å·ä¸­é¨ï¼Gainesville, Ocala, Inverness, Dunnellon","Central Florida: St Petersburg, Dunedin":"ä½ç½éè¾¾å·ä¸­é¨ï¼St Petersburg, Dunedin","Central Florida: Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar":"ä½ç½éè¾¾å·ä¸­é¨ï¼Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar","Central Georgia: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry":"ä¹æ²»äºå·ä¸­é¨ï¼Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry","Central Illinois: Springfield, Champaign Decatur, Urbana, Lincoln":"ä¼å©è¯ºä¼å·ä¸­é¨ï¼Springfield, Champaign Decatur, Urbana, Lincoln","Central Indiana: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove":"å°ç¬¬å®çº³å·ä¸­é¨ï¼å°ç¬¬å®çº³æ³¢å©æ¯, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove","Central Indiana: Lafayette, Marion, Muncie, Richmond":"å°ç¬¬å®çº³å·ä¸­é¨ï¼Lafayette, Marion, Muncie, Richmond","Central Iowa: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield":"ç±è·åå·ä¸­é¨ï¼Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield","Central Michigan: Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso":"å¯æ­æ ¹å·ä¸­é¨ï¼Alpena, Mt. Pleasant, Bay City, Saginaw, Midland, Owosso","Central Minnesota: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton":"æå°¼èè¾¾å·ä¸­é¨ï¼St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton","Central Mississippi: Jackson, Meridian, Natchez, McComb, Hattiesburg":"å¯è¥¿è¥¿æ¯å·ä¸­é¨ï¼Jackson, Meridian, Natchez, McComb, Hattiesburg","Central North Georgia: Marietta, Cedartown, Gainesville, Atlanta suburbs":"ä¹æ²»äºå·ä¸­åé¨ï¼Marietta, Cedartown, Gainesville, äºç¹å°å¤§éåº","Central Oklahoma: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha":"ä¿åæä½é©¬å·ä¸­é¨ï¼ä¿åæä½é©¬å, Stillwater, Edmond, Norman, Shawnee, Chickasha","Central Ontario, Canada: Sudbury, Sault Ste. Marie, North Bay, Timmins, Barrie":"å æ¿å¤§å®å¤§ç¥çä¸­é¨Sudbury, Sault Ste.Marie, North Bay, Timmins, Barrie","Central South Carolina: Columbia, Rock Hill, Sumter, Aiken":"åå¡ç½æ¥çº³å·ä¸­é¨ï¼Columbia, Rock Hill, Sumter, Aiken","Central Southern Quebec, Canada: Laval, Montreal suburbs":"å æ¿å¤§é­ååä¸­åé¨ï¼Laval, èç¹å©å°éåº","Central Texas: Austin, San Marcos, Lampasas, Bastrop, Milam":"å¾·åè¨æ¯å·ä¸­é¨ï¼Austin, San Marcos, Lampasas, Bastrop, Milam","Central Western Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg":"ä¼å©è¯ºä¼å·ä¸­è¥¿é¨ï¼Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg","Central and Southeastern New Jersey: Atlantic City, Trenton":"æ°æ³½è¥¿å·ä¸åé¨Atlantic City, Trenton","Central and Southeastern Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens":"ä¿äº¥ä¿å·ä¸åé¨ï¼Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens","Central and Southeastern Texas: Nacogdoches, Lufkin, Conroe, Huntsville":"å¾·åè¨æ¯å·ä¸­é¨åä¸åé¨ï¼Nacogdoches, Lufkin, Conroe, Huntsville","Chad":"ä¹å¾","Changchun":"é¿æ¥å¸","Changchun é¿æ¥å¸":"é¿æ¥å¸","Changde":"å¸¸å¾·å¸","Changde å¸¸å¾·å¸":"å¸¸å¾·å¸","Changdu":"æé½å¿(æé½å°åº)","Changdu æé½å¿ (æé½å°åº)":"æé½å¿ (æé½å°åº)","Changji":"æåå¸(æååæèªæ²»å·)","Changji æåå¸(æå åæèªæ²»å·)":"æåå¸(æå åæèªæ²»å·)","Changsha":"é¿æ²å¸","Changsha é¿æ²å¸, Xiangtan æ¹æ½­å¸, Zhuzhou æ ªå·å¸":"é¿æ²å¸,æ¹æ½­å¸,æ ªå·å¸","Changzhi":"é¿æ²»å¸","Changzhi é¿æ²»å¸":"é¿æ²»å¸","Changzhou":"å¸¸å·å¸","Changzhou å¸¸å·å¸":"å¸¸å·å¸","Chaohu":"å·¢æ¹å¸","Chaohu å·¢æ¹å¸":"å·¢æ¹å¸","Chaoyang":"æ½®é³å¸","Chaoyang æé³å¸":"æé³å¸","Chaoyang æ½®é³å¸, Shantou æ±å¤´å¸":"æ½®é³å¸,æ±å¤´å¸","Chaozhou":"æ½®å·å¸","Chaozhou æ½®å·å¸":"æ½®å·å¸","Chengde":"æ¿å¾·å¸","Chengde æ¿å¾·å¸":"æ¿å¾·å¸","Chengdu":"æé½å¸","Chengdu æé½å¸":"æé½å¸","Chennai":"é¦å¥","Chennai, Chennai":"é¦å¥ï¼é¦å¥","Chenzhou":"é´å·å¸","Chenzhou é´å·å¸":"é´å·å¸","Chifeng":"èµ¤å³°å¸","Chifeng èµ¤å³°å¸":"èµ¤å³°å¸","Chile":"æºå©","China":"ä¸­å½","Chizhou":"æ± å·å¸","Chizhou æ± å·å¸":"æ± å·å¸","Chongqing":"éåºå¸","Chongqing éåºå¸":"éåºå¸","Chuxiong":"æ¥éå¸(æ¥éå½æèªæ²»å·)","Chuxiong æ¥éå¸(æ¥é å½æèªæ²»å· )":"æ¥éå¸(æ¥é å½æèªæ²»å· )","Chuzhou":"æ»å·å¸","Chuzhou æ»å·å¸":"æ»å·å¸","Ciudad Real":"é·é¿å°å","Cologne":"ç§é","Colombia":"å¥ä¼¦æ¯äº","Colorado":"ç§ç½æå¤å·","Commonwealth of Dominica":"å¤ç±³å°¼åå±åå½","Comoros":"ç§æ©ç½","Connecticut":"åº·æ¶çæ ¼å·","Connecticut: Bridgeport, Danbury, New Haven, Waterbury, Southwestern Connecticut":"åº·æ¶çæ ¼å·ï¼Bridgeport, Danbury, New Haven, Waterburyï¼åº·æ¶çæ ¼å·è¥¿åé¨","Connecticut: Bristol, Hartford, Norwich and northern and eastern Connecticut":"åº·æ¶çæ ¼å·ï¼Bristol, Hartford, Norwichååº·æ¶çæ ¼å·ä¸åé¨","Cook Islands":"åºåç¾¤å²","Cordoba":"ç§å°å¤ç¦","Costa Rica":"å¥æ¯è¾¾é»å ","Coventry":"èæå","Croatia":"åç½å°äº","Cuba":"å¤å·´","Cyprus":"å¡æµ¦è·¯æ¯","Czech Republic":"æ·åå±åå½","CÃ¡diz":"å çæ¯","CÃ´te d'Ivoire":"ç§ç¹è¿ªç¦","D.R.":"å¤ç±³å°¼å å±åå½","DRC":"åææ°ä¸»å±åå½","Dali":"å¤§çå¸(å¤§çç½æèªæ²»å·)","Dali å¤§çå¸(å¤§ç ç½æèªæ²»å·)":"å¤§çå¸(å¤§ç ç½æèªæ²»å·)","Dalian":"å¤§è¿å¸","Dalian å¤§è¿å¸":"å¤§è¿å¸","Dandong":"ä¸¹ä¸å¸","Dandong ä¸¹ä¸å¸":"ä¸¹ä¸å¸","Daqing":"å¤§åºå¸","Daqing å¤§åºå¸":"å¤§åºå¸","Datong":"å¤§åå¸","Datong å¤§åå¸":"å¤§åå¸","Dazhou":"è¾¾å·å¸","Dazhou è¾¾å·å¸":"è¾¾å·å¸","Delaware":"ç¹æåå·","Delingha":"å¾·ä»¤åå¸(æµ·è¥¿èå¤æèæèªæ²»å·)","Delingha å¾·ä»¤åå¸ (æµ·è¥¿èå¤æ èæèªæ²»å·)":"å¾·ä»¤åå¸ (æµ·è¥¿èå¤æ èæèªæ²»å·)","Democratic Republic of the Congo":"åææ°ä¸»å±åå½","Denmark":"ä¸¹éº¦","Deyang":"å¾·é³å¸","Deyang å¾·é³å¸":"å¾·é³å¸","Dezhou":"å¾·å·å¸(å¾·å·å°åº)","Dezhou å¾·å·å¸ (å¾·å·å°åº)":"å¾·å·å¸ (å¾·å·å°åº)","Dingxi":"å®è¥¿å¿(å®è¥¿å°åº)","Dingxi å®è¥¿å¿ (å®è¥¿å°åº)":"å®è¥¿å¿ (å®è¥¿å°åº)","Dir. Assistance":"æ¥å·å°","Directory Assistance Applications":"æ¥å·å°åºç¨ç¨åº","Djibouti":"åå¸æ","Dominica":"å¤ç±³å°¼å","Dominican Republic":"å¤ç±³å°¼å å±åå½","Dongguan":"ä¸èå¸","Dongguan ä¸èå¸":"ä¸èå¸","Dongsheng":"ä¸èå¸(ä¼åæ­ç)","Dongsheng ä¸èå¸ (ä¼åæ­ç)":"ä¸èå¸ (ä¼åæ­ç)","Dongying":"ä¸è¥å¸","Dongying ä¸è¥å¸":"ä¸è¥å¸","Dover":"å¤ä½å°","Dresden":"å¾·ç´¯æ¯é¡¿","Dublin":"é½ææ","Duyun":"é½åå¸(é»åå¸ä¾æèæèªæ²»å·)","Duyun é½åå¸ (é»åå¸ä¾æ èæèªæ²»å·)":"é½åå¸ (é»åå¸ä¾æ èæèªæ²»å·)","DÃ¼sseldorf":"æå¡å°å¤å¤«","E Arkansas":"é¿è¯è²ä¸é¨","E Florida":"ä½ç½éè¾¾å·ä¸é¨ï¼","E Iowa":"ç±è·åå·ä¸é¨","E Kansas":"å ªè¨æ¯å·ä¸é¨","E Kentucky":"è¯å¡åºå·ä¸é¨","E Louisiana":"è·¯ææ¯å®é£å·ä¸é¨","E Maryland":"é©¬éå°å·ä¸é¨","E Massachusetts":"é©¬è¨è¯¸å¡å·ä¸é¨","E Nebraska":"åå¸ææ¯å ä¸é¨","E Ontario":"å®å¤§ç¥ä¸é¨","E South Carolina":"åå¡ç½æ¥çº³å·ä¸é¨","E Tennessee":"ç°çº³è¥¿å·ä¸é¨","E Washington":"åçé¡¿å·ä¸é¨","E Wisconsin":"å¨æ¯åº·æå·ä¸é¨","East Central Minnesota: St Paul, Lindstrom, Red Wing, Hastings":"æå°¼èè¾¾å·ä¸­ä¸é¨ï¼St Paul, Lindstrom, Red Wing, Hastings","East Central Missouri: St. Charles, Chesterfield, Union, De Soto, Troy":"å¯èéå·ä¸­ä¸é¨ï¼St. Charles, Chesterfield, Union, De Soto, Troy","East Central New Jersey: New Brunswick, Neptune, Freehold, Lakewood":"æ°æ³½è¥¿å·ä¸ä¸­é¨ï¼New Brunswick, Neptune, Freehold, Lakewood","East Timor":"ä¸å¸æ±¶","Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"é¿è¯è²ä¸é¨ï¼Texarkana, Jonesboro, Pine Bluff","Eastern Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City":"ç±è·åå·ä¸é¨ï¼Cedar Rapids, Waterloo, Burlington, Iowa City","Eastern Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton":"ç±è·åå·ä¸é¨ï¼Davenport, Dubuque, Bettendorf, Decorah, Clinton","Eastern Kansas: Kansas City, Overland Park, Paola, Leavenworth":"å ªè¨æ¯å·ä¸é¨ï¼å ªè¨æ¯å·å, Overland Park, Paola, Leavenworth","Eastern Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville":"è¯å¡åºå·ä¸é¨ï¼Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville","Eastern Maryland: Baltimore, Annapolis, Salisbury":"é©¬éå°ä¸é¨ï¼Baltimore, Annapolis, Salisbury","Eastern Massachusetts: Boston, Cambridge":"é©¬è¨è¯¸å¡å·ä¸é¨ï¼æ³¢å£«é¡¿ï¼åæ¡¥","Eastern Massachusetts: Saugus, Norwood, Waltham, Woburn, Boston suburbs":"é©¬è¨è¯¸å¡å·ä¸é¨ï¼Saugus, Norwood, Waltham, Woburn, æ³¢å£«é¡¿éåº","Eastern Nebraska: Omaha, Lincoln, Norfolk, Superior":"åå¸ææ¯å ä¸é¨ï¼Omaha, Lincoln, Norfolk, Superior","Eastern Ontario, Canada: Ottawa":"å æ¿å¤§å®å¤§ç¥ä¸é¨ï¼æ¸¥å¤ªå","Eastern Ontario, Canada: Ottawa, Kingston":"å æ¿å¤§å®å¤§ç¥ä¸é¨ï¼Ottawa, Kingston","Eastern South Carolina: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island":"åå¡ç½æ¥çº³å·ä¸é¨ï¼Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island","Eastern Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland":"ç°çº³è¥¿å·ä¸é¨ï¼Bristol, Johnson City, Kingsport; Chattanooga, Cleveland","Eastern Washington: Spokane, the Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg":"åçé¡¿å·ä¸é¨ï¼Spokane, the Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg","Eastern Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac":"å¨æ¯åº·æå·ä¸é¨ï¼Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac","Ecuador":"åçå¤å°","Edinburgh":"ç±ä¸å ¡","Egypt":"åå","El Salvador":"è¨å°ç¦å¤","Emergency Services Number":"ç´§æ¥æå¡å·ç ","Enshi":"æ©æ½å¸(æ©æ½åå®¶æèæèªæ²»å·)","Enshi æ©æ½å¸ (æ©æ½åå®¶æ èæèªæ²»å·)":"æ©æ½å¸ (æ©æ½åå®¶æ èæèªæ²»å·)","Equatorial Guinea":"èµ¤éå åäº","Eritrea":"åç«ç¹éäº","Essen":"åæ£®","Essen (Oldenburg)":"åæ£®ï¼å¥¥å°ç»å ¡ï¼","Estonia":"ç±æ²å°¼äº","Ethiopia":"åå¡ä¿æ¯äº","European Telephony":"æ¬§æ´²çµè¯","European Telephony Numbering Space":"æ¬§æ´²çµè¯å·ç ç©ºé´","Ezhou":"éå·å¸","Ezhou éå·å¸":"éå·å¸","FYRoM":"é©¬å¶é¡¿å±åå½ï¼ååæ¯æå¤«ï¼","Falkland Islands":"ç¦åå°ç¾¤å²","Falklands":"ç¦åå°ç¾¤å²","Fangchenggang":"é²åæ¸¯å¸","Fangchenggang é²åæ¸¯å¸":"é²åæ¸¯å¸","Faroe Islands":"æ³ç½ç¾¤å²","Federated States of Micronesia":"å¯åç½å°¼è¥¿äºèé¦","Fiji":"ææµ","Finland":"è¬å°","Finland, Ãland Islands":"è¬å°ï¼å¥¥å°ç¾¤å²","Florida":"ä½ç½éè¾¾å·","Florida: Miami-Dade County, Florida Keys":"ä½ç½éè¾¾å·ï¼Miami-Dade County, Florida Keys","Florida: Palm Beach, West Palm Beach, Boca Raton, Boynton Beach, Delray Beach, Belle Glade":"ä½ç½éè¾¾å·ï¼Palm Beach, West Palm Beach, Boca Raton, Boynton Beach, Delray Beach, Belle Glade","Former Yugoslav Republic of Macedonia":"é©¬å¶é¡¿å±åå½ï¼ååæ¯æå¤«ï¼","Foshan":"ä½å±±å¸","Foshan ä½å±±å¸, Shunde é¡ºå¾·å¸":"ä½å±±å¸,é¡ºå¾·å¸","France":"æ³å½","Frankfurt":"æ³å°åç¦","Frankfurt am Main, Offenbach am Main":"ç¾å æ²³çæ³å°åç¦ï¼ç¾å æ²³çå¥¥è¬å·´èµ«","Freephone":"åè´¹çµè¯","French Guiana":"æ³å±å­äºé£","French Polynesia":"æ³å±æ³¢å©å°¼è¥¿äº","Fushun":"æé¡ºå¸","Fushun æé¡ºå¸":"æé¡ºå¸","Fuxin":"éæ°å¸","Fuxin éæ°å¸":"éæ°å¸","Fuyang":"éé³å¸","Fuyang éé³å¸":"éé³å¸","Fuzhou":"ç¦å·å¸","Fuzhou æå·å¸":"ç¦å·å¸ æå·å¸","Fuzhou ç¦å·å¸":"ç¦å·å¸","Gabon":"å è¬","Gambia":"åæ¯äº","Ganzhou":"èµ£å·å¸","Ganzhou èµ£å·å¸":"èµ£å·å¸","GeEr":"å¶å°å¿(é¿éå°åº)","GeEr å¶å°å¿ (é¿éå°åº)":"å¶å°å¿ (é¿éå°åº)","GeErmu":"æ ¼å°æ¨å¸","GeErmu æ ¼å°æ¨å¸":"æ ¼å°æ¨å¸","Gejiu":"ä¸ªæ§å¸(çº¢æ²³åå°¼æå½æèªæ²»å·)","Gejiu ä¸ªæ§å¸ (çº¢æ²³åå°¼æ å½æèªæ²»å·)":"ä¸ªæ§å¸ (çº¢æ²³åå°¼æ å½æèªæ²»å·)","Georgia":"ä¹æ²»äºå·","Georgia: Atlanta":"ä¹æ²»äºå·ï¼äºç¹å°å¤§","Germany":"å¾·å½","Ghana":"å çº³","Gibraltar":"ç´å¸ç½é","Glasgow":"æ ¼ææ¯å¥","Global Mobile Satellite System":"å¨çç§»å¨å«æç³»ç»","Global Satellite":"å¨çå«æ","Gonghe":"å±åå¿(æµ·åèæèªæ²»å·)","Gonghe å±åå¿(æµ·å èæèªæ²»å·)":"å±åå¿(æµ·å èæèªæ²»å·)","Granada":"æ ¼æçº³è¾¾","Greece":"å¸è","Greenland":"æ ¼éµå°","Grenada":"æ ¼æçº³è¾¾","Guadalajara":"çè¾¾æåæ","Guadaloupe":"å¥å¾·æ®æ´","Guadaloupe Island":"å¥å¾·æ®æ´å²","Guadeloupe":"çå¾·ç½æ®å²","Guadeloupe, Saint BarthÃ©lemy, Saint Martin":"çå¾·ç½æ®å²ï¼å£å·´æ³°åç±³ï¼å£é©¬ä¸","Guam":"å³å²","GuangAn":"å¹¿å®å¸","GuangAn å¹¿å®å¸":"å¹¿å®å¸","Guangyuan":"å¹¿åå¸","Guangyuan å¹¿åå¸":"å¹¿åå¸","Guangzhou":"å¹¿å·å¸","Guangzhou å¹¿å·å¸":"å¹¿å·å¸","Guatemala":"å±å°é©¬æ","Guilin":"æ¡æå¸","Guilin æ¡æå¸":"æ¡æå¸","Guinea":"å åäº","Guinea-Bissau":"å åäºæ¯ç»","Guiyang":"è´µé³å¸","Guiyang è´µé³å¸":"è´µé³å¸","Guyana":"å­äºé£","Guyuan":"åºåå¿(åºåå°åº)","Guyuan åºåå¿ (åºåå°åº)":"åºåå¿ (åºåå°åº)","GÃ¶ttingen":"å¥å»·æ ¹","Haikou":"æµ·å£å¸","Haikou æµ·å£å¸":"æµ·å£å¸","Hailaer":"æµ·æå°å¸(å¼ä¼¦è´å°ç)","Hailaer æµ·æå°å¸ (å¼ä¼¦è´å°ç)":"æµ·æå°å¸ (å¼ä¼¦è´å°ç)","Haiti":"æµ·å°","Haiyan":"æµ·æå¿(æµ·åèæèªæ²»å·)","Haiyan æµ·æå¿(æµ·å èæèªæ²»å·)":"æµ·æå¿(æµ·å èæèªæ²»å·)","Hamburg":"æ±å ¡","Hamburg, Norderstedt, Neu Wulmstorf":"æ±å ¡ï¼è¯ºå¾·æ½æ³°ç¹ï¼çº½æ­¦å°å§æ¯æå¤«","Hami":"åå¯å¸(åå¯å°åº)","Hami åå¯å¸ (åå¯å°åº)":"åå¯å¸ (åå¯å°åº)","Handan":"é¯é¸å¸","Handan é¯é¸å¸":"é¯é¸å¸","Hangzhou":"æ­å·å¸","Hangzhou æ­å·å¸":"æ­å·å¸","Hannover":"æ±è¯ºå¨","Hanzhong":"æ±ä¸­å¸","Hanzhong æ±ä¸­å¸":"æ±ä¸­å¸","Harbin":"åå°æ»¨å¸","Harbin åå°æ»¨å¸":"åå°æ»¨å¸","Hawaii":"å¤å¨å¤·å·","Hebi":"é¹¤å£å¸","Hebi é¹¤å£å¸":"é¹¤å£å¸","Hechi":"æ²³æ± å¸(æ²³æ± å°åº)","Hechi æ²³æ± å¸ (æ²³æ± å°åº)":"æ²³æ± å¸ (æ²³æ± å°åº)","Hefei":"åè¥å¸","Hefei åè¥å¸":"åè¥å¸","Hegang":"é¹¤å²å¸","Hegang é¹¤å²å¸":"é¹¤å²å¸","Heihe":"é»æ²³å¸","Heihe é»æ²³å¸":"é»æ²³å¸","Hengshui":"è¡¡æ°´å¸","Hengshui è¡¡æ°´å¸":"è¡¡æ°´å¸","Hengyang":"è¡¡é³å¸","Hengyang è¡¡é³å¸":"è¡¡é³å¸","Hetian":"åç°å¸(åç°å°åº)","Hetian åç°å¸ (åç°å°åº)":"åç°å¸ (åç°å°åº)","Heyuan":"æ²³æºå¸","Heyuan æ²³æºå¸":"æ²³æºå¸","Heze":"è·æ³½å¸(è·æ³½å°åº)","Heze è·æ³½å¸ (è·æ³½å°åº)":"è·æ³½å¸ (è·æ³½å°åº)","Hezuo":"åä½å¸(çåèæèªæ²»å·)","Hezuo åä½å¸(çå èæèªæ²»å·)":"åä½å¸(çå èæèªæ²»å·)","Honduras":"æ´ªé½ææ¯","Hong Kong":"é¦æ¸¯","Huaian":"æ·®é´å¸","Huaian æ·®é´å¸":"æ·®é´å¸","Huaibei":"æ·®åå¸","Huaibei æ·®åå¸":"æ·®åå¸","Huaihua":"æåå¸","Huaihua æåå¸":"æåå¸","Huainan":"æ·®åå¸","Huainan æ·®åå¸":"æ·®åå¸","Huanggang":"é»åå¸","Huanggang é»åå¸":"é»åå¸","Huangshan":"é»å±±å¸","Huangshan é»å±±å¸":"é»å±±å¸","Huangshi":"é»ç³å¸","Huangshi é»ç³å¸":"é»ç³å¸","Huhehaote":"å¼åæµ©ç¹å¸","Huhehaote å¼åæµ©ç¹å¸":"å¼åæµ©ç¹å¸","Huizhou":"æ å·å¸","Huizhou æ å·å¸":"æ å·å¸","Huludao":"è«è¦å²å¸","Huludao è«è¦å²å¸":"è«è¦å²å¸","Hunchun":"ç²æ¥å¸","Hunchun ç²æ¥å¸, Yanji å»¶åå¸(å»¶è¾¹ æé²æèªæ²»å·)":"ç²æ¥å¸,å»¶åå¸(å»¶è¾¹ æé²æèªæ²»å·)","Hungary":"åçå©","Huzhou":"æ¹å·å¸","Huzhou æ¹å·å¸":"æ¹å·å¸","Hyderabad":"æµ·å¾æå·´","Hyderabad East (Ghatkeswar), Hyderabad":"ä¸æµ·å¾æå·´ï¼Ghatkeswarï¼ï¼æµ·å¾æå·´","Hyderabad West (Shamshabad), Hyderabad":"è¥¿æµ·å¾æå·´ï¼Shamshabadï¼ï¼æµ·å¾æå·´","ITPCS":"å½éçµä¿¡ä¸ªäººéè®¯æå¡ï¼ITPCSï¼","Iceland":"å°å²","Idaho":"ç±è¾¾è·å·","Illinois":"ä¼å©è¯ºä¼å·","Illinois: Aurora, Naperville, western Chicago":"ä¼å©è¯ºä¼ï¼Aurora, Naperville, èå å¥è¥¿é¨","Illinois: Aurora, Naperville, western Chicago suburbs":"ä¼å©è¯ºä¼å·ï¼Aurora, Naperville, èå å¥è¥¿é¨éåº","Illinois: Chicago":"ä¼å©è¯ºä¼ï¼Chicago","Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, western Chicago suburbs":"ä¼å©è¯ºä¼å·ï¼Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, èå å¥è¥¿é¨éåº","Inbound Intl.":"æå¥çå½éçµè¯æ¥çµ","Inbound international calls for carrier-specific services":"éè¿ç¹å®æä¾åæå¡æå¥çå½éçµè¯","India":"å°åº¦","Indiana":"å°ç¬¬å®çº³å·","Indiana: Southern Indiana, including Bloomington, Evansville, Jeffersonville, New Albany, and Terre Haute).":"å°ç¬¬å®çº³å·ï¼Southern Indiana, including Bloomington, Evansville, Jeffersonville, New Albany, and Terre Haute).","Indonesia":"å°åº¦å°¼è¥¿äº","Inmarsat":"å½éæµ·äºå«æç»ç»","International National Rate Service":"å½éå½åè´¹çæå¡","International Networks":"å½éç½ç»","International Networks (country code)":"å½éç½ç»ï¼å½å®¶ä»£ç ï¼","International Premium Rate Service":"å½é900åºå·æå¡","Iowa":"ç±è·åå·","Iran":"ä¼æ","Iraq":"ä¼æå","Ireland":"ç±å°å°","Islands of RÃ©union and Mayotte":"çå°¼æ±ªåé©¬çº¦ç¹å²","Israel":"ä»¥è²å","Israel, Palestinian Authority":"ä»¥è²åï¼å·´åæ¯å¦æåæºæ","Italy":"æå¤§å©","Italy, Vatican City":"æå¤§å©ï¼æ¢µèåå","Jamaica":"çä¹°å ","Japan":"æ¥æ¬","JiAn":"åå®å¸","JiAn åå®å¸":"åå®å¸","Jiagedaqi":"å æ ¼è¾¾å¥(å¤§å´å®å²­å°åº)","Jiagedaqi å æ ¼è¾¾å¥ (å¤§å´å®å²­å°åº)":"å æ ¼è¾¾å¥ (å¤§å´å®å²­å°åº)","Jiali":"åé»å¿","Jiali åé»å¿":"åé»å¿","Jiamusi":"ä½³æ¨æ¯å¸","Jiamusi ä½³æ¨æ¯å¸":"ä½³æ¨æ¯å¸","Jiangmen":"æ±é¨å¸","Jiangmen æ±é¨å¸":"æ±é¨å¸","Jiaozuo":"ç¦ä½å¸","Jiaozuo ç¦ä½å¸":"ç¦ä½å¸","Jiaxing":"åå´å¸","Jiaxing åå´å¸":"åå´å¸","Jieyang":"æ­é³å¸","Jieyang æ­é³å¸":"æ­é³å¸","Jilin":"åæå¸","Jilin åæå¸":"åæå¸","Jinan":"æµåå¸","Jinan æµåå¸":"æµåå¸","Jinchang":"éæå¸","Jinchang éæå¸":"éæå¸","Jincheng":"æåå¸","Jincheng æåå¸":"æåå¸","Jingdezhen":"æ¯å¾·éå¸","Jingdezhen æ¯å¾·éå¸":"æ¯å¾·éå¸","Jinghong":"æ¯æ´ªå¸(è¥¿åççº³å£æèªæ²»å·)","Jinghong æ¯æ´ªå¸ (è¥¿åççº³ å£æèªæ²»å· )":"æ¯æ´ªå¸ (è¥¿åççº³ å£æèªæ²»å· )","Jingmen":"èé¨å¸","Jingmen èé¨å¸":"èé¨å¸","Jingzhou":"èå·å¸","Jingzhou èå·å¸":"èå·å¸","Jinhua":"éåå¸","Jinhua éåå¸":"éåå¸","Jining":"éå®å¸(ä¹å°å¯å¸ç)","Jining æµå®å¸":"æµå®å¸","Jining éå®å¸ (ä¹å°å¯å¸ç)":"éå®å¸ (ä¹å°å¯å¸ç)","Jinzhou":"é¦å·å¸","Jinzhou é¦å·å¸":"é¦å·å¸","Jishou":"åé¦å¸(æ¹è¥¿åå®¶æèæèªæ²»å·)","Jishou åé¦å¸ (æ¹è¥¿åå®¶æ èæèªæ²»å·)":"åé¦å¸ (æ¹è¥¿åå®¶æ èæèªæ²»å·)","Jiujiang":"ä¹æ±å¸","Jiujiang ä¹æ±å¸":"ä¹æ±å¸","Jiuquan":"éæ³å¸(éæ³å°åº)","Jiuquan éæ³å¸ (éæ³å°åº)":"éæ³å¸ (éæ³å°åº)","Jixi":"é¸¡è¥¿å¸","Jixi é¸¡è¥¿å¸":"é¸¡è¥¿å¸","Jordan":"çº¦æ¦","Kaifeng":"å¼å°å¸","Kaifeng å¼å°å¸":"å¼å°å¸","Kaili":"å¯éå¸(é»ä¸åèæä¾æèªæ²»å·)","Kaili å¯éå¸ (é»ä¸åèæ ä¾æèªæ²»å· )":"å¯éå¸ (é»ä¸åèæ ä¾æèªæ²»å·   )","Kalamayi":"åæçä¾å¸","Kalamayi åæçä¾å¸":"åæçä¾å¸","Kangding":"åº·å®å¿(çå­èæèªæ²»å·)","Kangding åº·å®å¿(çå­ èæèªæ²»å·)":"åº·å®å¿(çå­ èæèªæ²»å·)","Kansas":"å ªè¨æ¯å·","Kansas: Wichita, Augusta, El Dorado, Mulvane":"å ªè¨æ¯å·ï¼Wichita, Augusta, El Dorado, Mulvane","Karlsruhe":"å¡å°æ¯é²å","Karlsruhe, Eggenstein-Leopoldshafen, Pfinztal-Berghausen (Baden), Rheinstetten, Stutensee,":"å¡å°æ¯é²åï¼Eggenstein-Leopoldshafenï¼æ®è¬è¨å¡å°-Berghausenï¼å·´ç»ï¼ï¼è±èµæ½æ³°æ»ï¼æ½å¾æ»å¡ï¼","Kashi":"åä»å¸(åä»å°åº)","Kashi åä»å¸ (åä»å°åº)":"åä»å¸ (åä»å°åº)","Kentucky":"è¯å¡åºå·","Kentucky: west of the Pennyrile Parkway, including Fort Campbell, Henderson, Hopkinsville, Madisonville, Murray, and Paducah":"è¯å¡åºå·ï¼Pennyrile Parkwayè¥¿é¨, åæ¬Fort Campbell, Henderson, Hopkinsville, Madisonville, MurrayåPaducah","Kenya":"è¯å°¼äº","Kiel":"åºå°","Kiribati":"åºéå·´æ¯","Kolkata":"å å°åç­","Kolkata, Kolkata":"å å°åç­ï¼å å°åç­","Konstanz":"åº·æ¯å¦è¨","Konstanz, Reichenau":"åº·æ¯å¦è¨ï¼èµæ­ç","Krakow":"åæç§å¤«","KuErle":"åºå°åå¸(å·´é³é­æ¥èå¤èªæ²»å·)","KuErle åºå°åå¸ (å·´é³é­æ¥ èå¤èªæ²»å·)":"åºå°åå¸ (å·´é³é­æ¥ èå¤èªæ²»å·)","Kuitun":"å¥å±¯å¸","Kuitun å¥å±¯å¸":"å¥å±¯å¸","Kunming":"ææå¸","Kunming ææå¸":"ææå¸","Kuwait":"ç§å¨ç¹","Kyrgyzstan":"åå°åæ¯æ¯å¦","LD Carrier":"é¿éçµè¯æä¾å","La Rioja":"æéå¥¥å","Laiwu":"è±èå¸","Laiwu è±èå¸":"è±èå¸","Langfang":"å»åå¸","Langfang å»åå¸":"å»åå¸","Lanzhou":"å°å·å¸","Lanzhou å°å·å¸":"å°å·å¸","Laos":"èæ","Las Palmas":"ææ¯å¸å°é©¬æ¯","Latvia":"æè±ç»´äº","Lebanon":"é»å·´å«©","Leeds":"å©å¹","Leicester":"è±æ¯ç¹","Leipzig":"è±æ¯é¡","Leshan":"ä¹å±±å¸","Leshan ä¹å±±å¸":"ä¹å±±å¸","Lesotho":"è±ç´¢æ","LeÃ³n":"è±æ","Lhasa":"æè¨å¸","Lhasa æè¨å¸":"æè¨å¸","Lianyungang":"è¿äºæ¸¯å¸","Lianyungang è¿äºæ¸¯å¸":"è¿äºæ¸¯å¸","Liaocheng":"èåå¸(èåå°åº)","Liaocheng èåå¸ (èåå°åº)":"èåå¸ (èåå°åº)","Liaoyang":"è¾½é³å¸","Liaoyang è¾½é³å¸":"è¾½é³å¸","Liaoyuan":"è¾½æºå¸","Liaoyuan è¾½æºå¸":"è¾½æºå¸","Liberia":"å©æ¯éäº","Libya":"å©æ¯äº","Lichtenstein":"å©å¸æ»æ¯å¦","Lichtenstein, Engstingen":"å©å¸æ»æ¯å¦ï¼æ©æ¯å»·æ ¹","Liechtenstein":"åæ¯æ¦å£«ç»","Lijiang":"ä¸½æ±çº³è¥¿æèªæ²»å¿(ä¸½æ±å°åº)","Lijiang ä¸½æ±çº³è¥¿æ èªæ²»å¿ (ä¸½æ±å°åº)":"ä¸½æ±çº³è¥¿æ èªæ²»å¿ (ä¸½æ±å°åº)","Lincang":"ä¸´æ²§å¿(ä¸´æ²§å°åº)","Lincang ä¸´æ²§å¿ (ä¸´æ²§å°åº)":"ä¸´æ²§å¿ (ä¸´æ²§å°åº)","Linfen":"ä¸´æ±¾å¸(ä¸´æ±¾å°åº)","Linfen ä¸´æ±¾å¸ (ä¸´æ±¾å°åº)":"ä¸´æ±¾å¸ (ä¸´æ±¾å°åº)","Linhe":"ä¸´æ²³å¸(å·´å½¦æ·å°ç)","Linhe ä¸´æ²³å¸ (å·´å½¦æ·å°ç)":"ä¸´æ²³å¸ (å·´å½¦æ·å°ç)","Linxia":"ä¸´å¤å¸(ä¸´å¤åæèªæ²»å·)","Linxia ä¸´å¤å¸(ä¸´å¤ åæèªæ²»å·)":"ä¸´å¤å¸(ä¸´å¤ åæèªæ²»å·)","Linyi":"ä¸´æ²å¸(ä¸´æ²å°åº)","Linyi ä¸´æ²å¸ (ä¸´æ²å°åº)":"ä¸´æ²å¸ (ä¸´æ²å°åº)","Linzhi":"æèå¿(æèå°åº)","Linzhi æèå¿ (æèå°åº)":"æèå¿ (æèå°åº)","Lishi":"ç¦»ç³å¸(åæ¢å°åº)","Lishi ç¦»ç³å¸ (åæ¢å°åº)":"ç¦»ç³å¸ (åæ¢å°åº)","Lishui":"ä¸½æ°´å¸","Lishui ä¸½æ°´å¸":"ä¸½æ°´å¸","Lithuania":"ç«é¶å®","LiuAn":"å­å®å¸","LiuAn å­å®å¸":"å­å®å¸","Liuku":"å­åºå¸(ææ±ååæèªæ²»å·)","Liuku å­åºå¸(ææ± ååæèªæ²»å·)":"å­åºå¸(ææ± ååæèªæ²»å·)","Liupanshui":"å­çæ°´å¸","Liupanshui å­çæ°´å¸":"å­çæ°´å¸","Liuzhou":"æ³å·å¸","Liuzhou æ³å·å¸":"æ³å·å¸","Liverpool":"å©ç©æµ¦","London":"ä¼¦æ¦","Long Distance Carrier Use":"ä¾é¿éçµè¯æä¾åä½¿ç¨","Longyan":"é¾å²©å¸","Longyan é¾å²©å¸":"é¾å²©å¸","Loudi":"å¨åºå¸","Loudi å¨åºå¸":"å¨åºå¸","Louisiana":"è·¯ææ¯å®é£å·","Louisiana: New Orleans, Metairie, Kenner":"è·¯ææ¯å®é£å·ï¼æ°å¥¥å°è¯, Metairie, Kenner","Luohe":"æ¼¯æ²³å¸","Luohe æ¼¯æ²³å¸":"æ¼¯æ²³å¸","Luoyang":"æ´é³å¸","Luoyang æ´é³å¸":"æ´é³å¸","Luxembourg":"å¢æ£®å ¡","Luxi":"æ½è¥¿å¸(å¾·å®å£ææ¯é¢æèªæ²»å·)","Luxi æ½è¥¿å¸ (å¾·å®å£æ æ¯é¢æèªæ²»å·)":"æ½è¥¿å¸ (å¾·å®å£æ æ¯é¢æèªæ²»å·)","Luzhou":"æ³¸å·å¸","Luzhou æ³¸å·å¸":"æ³¸å·å¸","MaAnshan":"é©¬éå±±å¸","MaAnshan é©¬éå±±å¸":"é©¬éå±±å¸","MaErkang":"é©¬å°åº·å¿(é¿åèæç¾æèªæ²»å·)","MaErkang é©¬å°åº·å¿ (é¿åèæ ç¾æèªæ²»å·)":"é©¬å°åº·å¿ (é¿åèæ ç¾æèªæ²»å·)","Macau":"æ¾³é¨","Madagascar":"é©¬è¾¾å æ¯å ","Madrid":"é©¬å¾·é","Maine":"ç¼å å·","Malaga":"é©¬æå ","Malawi":"é©¬æç»´","Malaysia":"é©¬æ¥è¥¿äº","Maldives":"é©¬å°ä»£å¤«","Mali":"é©¬é","Malta":"é©¬è³ä»","Manchester":"æ¼å½»æ¯ç¹","Manitoba":"é©¬å°¼æå·´","Manitoba, Canada":"é©¬å°¼æå·´ï¼å æ¿å¤§","Maoming":"èåå¸","Maoming èåå¸":"èåå¸","Maqin":"çæ²å¿(ææ´èæèªæ²»å·)","Maqin çæ²å¿(ææ´ èæèªæ²»å·)":"çæ²å¿(ææ´ èæèªæ²»å·)","Marshall Islands":"é©¬ç»å°ç¾¤å²","Martinique":"é©¬æå°¼å","Martinique Island":"é©¬æå°¼åå²","Maryland":"é©¬éå°å·","Massachusetts":"é©¬è¨è¯¸å¡å·","Mauritania":"æ¯éå¡å°¼äº","Mauritius":"æ¯éæ±æ¯","Meizhou":"æ¢å·å¸","Meizhou æ¢å·å¸":"æ¢å·å¸","Mexico":"å¢¨è¥¿å¥","Mexico City":"å¢¨è¥¿å¥å","Mexico City, Federal District":"å¢¨è¥¿å¥åèé¦åº","Mianyang":"ç»µé³å¸","Mianyang ç»µé³å¸":"ç»µé³å¸","Michigan":"å¯æ­æ ¹å·","Michigan: Dearborn, Detroit, Hamtramck, Highland Park":"å¯æ­æ ¹ï¼Dearborn, Detroit, Hamtramck, Highland Park","Michigan: Oakland County":"å¯æ­æ ¹ï¼Oakland County","Michigan: Port Huron, Flint, Lapeer, and Michigan \"Thumb\"":"å¯æ­æ ¹ï¼Port Huronã FlintãLapeeråå¯æ­æ ¹âææâåº","Michigan: Warren, Sterling Heights, Macomb County":"å¯æ­æ ¹ï¼Warren, Sterling Heights, Macomb County","Micronesia":"å¯åç½å°¼è¥¿äº","Minnesota":"æå°¼èè¾¾å·","Minnesota: Bloomington, Minnetonka, Chaska, Minneapolis":"æå°¼èè¾¾å·ï¼Bloomington, Minnetonka, Chaska, Minneapolis","Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, northwest Minneapolis":"æå°¼èè¾¾å·ï¼Maple Grove, Monticello, Elk River, Fridley, Blaine, æå°¼é¿æ³¢å©æ¯è¥¿å","Minnesota: Minneapolis, Fort Snelling, St Anthony, Richfield":"æå°¼èè¾¾å·ï¼Minneapolis, Fort Snelling, St Anthony, Richfield","Mississippi":"å¯è¥¿è¥¿æ¯å·","Missouri":"å¯èéå·","Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark and eastern Missouri excluding St. Louis":"å¯èéå·ï¼Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark åå¯èéå·ä¸é¨ï¼ä¸å« St. Louis","Missouri: St. Louis, Florissant, Crestwood, Affton":"å¯èéå·ï¼St. Louis, Florissant, Crestwood, Affton","Mobile Number":"ææºå·ç ","Moldova":"æ©å°å¤ç¦","Monaco":"æ©çº³å¥","Mongolia":"èå¤","Montana":"èå¤§æ¿å·","Montenegro":"é»å±±","Morocco":"æ©æ´å¥","Morocco, Western Sahara":"æ©æ´å¥ï¼è¥¿æåæ","Mozambique":"è«æ¡æ¯å","Mudanjiang":"ç¡ä¸¹æ±å¸","Mudanjiang ç¡ä¸¹æ±å¸":"ç¡ä¸¹æ±å¸","Mumbai":"å­ä¹°","Mumbai, Mumbai":"å­ä¹°ï¼å­ä¹°","Munich":"æå°¼é»","Murcia":"ç©å°è¥¿äº","N Alberta":"äºä¼¯è¾¾åé¨","N California":"å å©ç¦å©äºå·åé¨","N Georgia":"ä¹æ²»äºåé¨","N Illinois":"ä¼å©è¯ºä¼å·åé¨","N Kansas":"å ªè¨æ¯å·åé¨","N Kentucky":"è¯å¡åºå·åé¨","N Louisiana":"è·¯ææ¯å®é£å·åé¨","N Michigan":"å¯æ­æ ¹åé¨","N Minnesota":"æå°¼èè¾¾å·åé¨","N Mississippi":"å¯è¥¿è¥¿æ¯å·åé¨","N Ohio":"ä¿äº¥ä¿åé¨","N Texas":"å¾·åè¨æ¯å·åé¨","N Virginia":"å¼åå°¼äºå·åé¨","N Wisconsin":"å¨æ¯åº·æåé¨","NE Alabama":"äºæå·´é©¬å·ä¸åé¨","NE California":"å å©ç¦å©äºå·ä¸åé¨","NE Florida":"ä½ç½éè¾¾å·ä¸åé¨","NE Illinois":"ä¼å©è¯ºä¼å·ä¸åé¨","NE Indiana":"å°å°å®é£å·ä¸åé¨","NE Massachusetts":"é©¬è¨è¯¸å¡å·ä¸åé¨","NE New York":"çº½çº¦å·ä¸åé¨","NE North Carolina":"åå¡ç½è±çº³å·ä¸åé¨","NE Ohio":"ä¿äº¥ä¿ä¸åé¨","NE Oklahoma":"ä¿åæè·é©¬å·ä¸åé¨","NE Pennsylvania":"å®¾å¤æ³å°¼äºå·ä¸åé¨","NE Texas":"å¾·åè¨æ¯å·ä¸åé¨","NW Arizona":"äºå©æ¡é£å·è¥¿åé¨","NW Arkansas":"é¿è¯è²å·è¥¿åé¨","NW California":"å å©ç¦å°¼äºå·è¥¿åé¨","NW Colorado":"ç§ç½æå¤å·è¥¿åé¨","NW Florida":"ä½ç½éè¾¾å·è¥¿åé¨","NW Indiana":"å°ç¬¬å®çº³å·è¥¿åé¨","NW Michigan":"å¯æ­æ ¹å·è¥¿åé¨","NW New Jersey":"æ°æ³½è¥¿å·è¥¿åé¨","NW New Mexico":"æ°å¢¨è¥¿å¥å·è¥¿åé¨","NW Ohio":"ä¿äº¥ä¿å·è¥¿åé¨","NW Ontario":"å®å¤§ç¥çè¥¿åé¨","NW Oregon":"ä¿ååå·è¥¿åé¨","NW Pennsylvania":"å®¾å¤æ³å°¼äºå·è¥¿åé¨","Naidong":"ä¹ä¸å¿(å±±åå°åº)","Naidong ä¹ä¸å¿ (å±±åå°åº)":"ä¹ä¸å¿ (å±±åå°åº)","Namibia":"çº³ç±³æ¯äº","Nanchang":"åæå¸","Nanchang åæå¸":"åæå¸","Nanchong":"ååå¸","Nanchong ååå¸":"ååå¸","Nanjing":"åäº¬","Nanning":"åå®å¸","Nanning åå®å¸":"åå®å¸","Nanping":"åå¹³å¸","Nanping åå¹³å¸":"åå¹³å¸","Nantong":"åéå¸","Nantong åéå¸":"åéå¸","Nanyang":"åé³å¸","Nanyang åé³å¸":"åé³å¸","Naqu":"é£æ²å¿(é£æ²å°åº)","Naqu é£æ²å¿ (é£æ²å°åº)":"é£æ²å¿ (é£æ²å°åº)","National Rate":"å¨å½è´¹ç","Nauru":"çé²","Navarra":"çº³ç¦æ","Nebraska":"åå¸ææ¯å å©ç¦å©äºå·","Neijiang":"åæ±å¸","Neijiang åæ±å¸, Ziyang èµé³å¸":"åæ±å¸,èµé³å¸","Nepal":"å°¼æ³å°","Netherlands":"è·å°","Netherlands Antilles":"è·å±å®çåæ¯","Nevada":"ååè¾¾å·","Nevada: Clark County, Las Vegas, Henderson, Boulder City":"ååè¾¾å·ï¼Clark County, Las Vegas, Henderson, Boulder City","Nevada: Reno, Elko, Ely":"ååè¾¾å·ï¼Reno, Elko, Ely","New Brunswick":"æ°ä¸ä¼¦çå","New Brunswick, Canada":"å æ¿å¤§æ°ä¸ä¼¦çå","New Caledonia":"æ°åéå¤å°¼äº","New Delhi":"æ°å¾·é","New Delhi, New Delhi":"æ°å¾·éï¼æ°å¾·é","New Hampshire":"æ°ç½å¸ä»å°å·","New Jersey":"æ°æ³½è¥¿å·","New Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford, and northeast New Jersey":"æ°æ³½è¥¿å·ï¼Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milfordåæ°æ³½è¥¿å·ä¸åé¨","New Mexico":"æ°å¢¨è¥¿å¥å·","New Mexico: Las Cruces, Roswell, Carlsbad, Taos":"æ°å¢¨è¥¿å¥å·ï¼Las Cruces, Roswell, Carlsbad, Taos","New York":"çº½çº¦å·","New York: Binghamton, Elmira, Bath, Norwich, Oneonta, Ithaca":"çº½çº¦å·ï¼Binghamton, Elmira, Bath, Norwich, Oneonta, Ithaca","New York: Manhattan":"çº½çº¦å·ï¼æ¼åé¡¿","New York: Manhattan except for Marble Hill":"çº½çº¦å·ï¼æ¼åé¡¿ï¼ä¸å«Marble Hill","New York: Nassau County, Hempstead, Elmont":"çº½çº¦å·ï¼Nassau County, Hempstead, Elmont","New York: New York City":"çº½çº¦å·ï¼çº½çº¦å¸","New York: New York City, Marble Hill":"çº½çº¦å·ï¼çº½çº¦å¸ï¼Marble Hill","New York: Suffolk County":"çº½çº¦å·ï¼Suffolk County","New York: The \"Outer Boroughs\"":"çº½çº¦å·ï¼å¤åº","New York: Westchester County":"çº½çº¦å·ï¼WestchesterÃÃ","New Zealand":"æ°è¥¿å°","Newfoundland":"çº½è¬å°","Newfoundland and Labrador, Canada: St. John's":"å æ¿å¤§çº½è¬å°ä¸æå¸æå¤ç St. John's","Nicaragua":"å°¼å æç","Nierong":"èè£å¿","Nierong èè£å¿":"èè£å¿","Niger":"å°¼æ¥å°","Nigeria":"å°¼æ¥å©äº","Nima":"å°¼çå¿","Nima å°¼çå¿":"å°¼çå¿","Ningbo":"å®æ³¢å¸","Ningbo å®æ³¢å¸":"å®æ³¢å¸","Ningde":"å®å¾·å¸","Ningde å®å¾·å¸":"å®å¾·å¸","Niue":"çº½å","Norfolk Island":"è¯ºç¦åå²","Norfolk Island, Australian Antarctic Territory":"è¯ºç¦åå²ï¼æ¾³å¤§å©äºåæé¢å°","North America":"åç¾","North America and the Caribbean Islands":"åç¾åå åæ¯ç¾¤å²","North Carolina":"åå¡ç½æ¥çº³å·","North Carolina: Greensboro, Winston-Salem, Wilkesboro, Roxboro, and northwest North Carolina":"åå¡ç½æ¥çº³å·ï¼Greensboro, Winston-Salem, Wilkesboro, Roxboro, ååå¡ç½æ¥çº³è¥¿åé¨","North Central Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee":"å°ç¬¬å®çº³å·ä¸­åé¨ï¼South Bend, Logansport, Elkhart, Warsaw, Nappanee","North Central Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola":"ç±è·åå·åä¸­é¨ï¼Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola","North Central Kentucky: Lexington, Richmond, Danville, Covington, Florence, Mount Sterling":"è¯å¡åºå·ä¸­åé¨ï¼Lexington, Richmond, Danville, Covington, Florence, Mount Sterling","North Central Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany":"å¯èéå·ä¸­åé¨ï¼Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany","North Central New York: Syracuse, New York, Utica, Watertown":"çº½çº¦å·ä¸­åé¨ï¼Syracuse, çº½çº¦, Utica, Watertown","North Central North Carolina: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro":"åå¡ç½è±çº³å·ä¸­åé¨ï¼Raleigh, Durham, Chapel Hill, Oxford, Goldsboro","North Central Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson":"ç°çº³è¥¿å·ä¸­åé¨ï¼Nashville, Murfreesboro, Springfield, Lebanon, Dickson","North Central Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester":"å¼åå°¼äºå·åä¸­é¨ï¼Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester","North Dakota":"åè¾¾ç§ä»å·","North Korea":"æé²","Northeast France":"æ³å½ä¸åé¨","Northeastern Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs":"ä½ç½éè¾¾å·ä¸åé¨ï¼Jacksonville, St. Augustine, Starke, Green Cove Springs","Northeastern Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, Chicago suburbs":"ä¼å©è¯ºä¼å·ä¸åé¨ï¼Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, èå å¥éåº","Northeastern Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash":"å°ç¬¬å®çº³å·ä¸åé¨ï¼Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash","Northeastern Massachusetts: Fitchburg, Peabody":"é©¬è¨è¯¸å¡å·ä¸åé¨ï¼Fitchburg, Peabody","Northeastern New York: Albany, Schenectady, Plattsburgh, Saranac Lake":"çº½çº¦å·ä¸åé¨ï¼Albany, Schenectady, Plattsburgh, Saranac Lake","Northeastern North Carolina: Greenville, Kitty Hawk, Rocky Mount":"åå¡ç½è±çº³å·ä¸åé¨ï¼Greenville, Kitty Hawk, Rocky Mount","Northeastern Ohio: Akron, Canton, Youngstown, Warren":"ä¿äº¥ä¿ä¸åé¨ï¼Akron, Canton, Youngstown, Warren","Northeastern Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta":"ä¿åæè·é©¬å·ä¸åé¨ï¼Tulsa, Bartlesville, McAlester, Muskogee, Henryetta","Northeastern Pennsylvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg":"å®¾å¤æ³å°¼äºå·ä¸åé¨ï¼Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg","Northeastern Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage":"å¾·åè¨æ¯å·ä¸åé¨ï¼Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage","Northern Alberta, Canada: Edmonton, Jasper, Grande Prairie, Peace River":"å æ¿å¤§äºä¼¯è¾¾åé¨ï¼Edmonton, Jasper, Grande Prairie, Peace River","Northern California coast":"å å©ç¦å©äºå·åé¨æµ·å²¸","Northern Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake":"ä¼å©è¯ºä¼å·åé¨ï¼Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake","Northern Ireland":"åç±å°å°","Northern Kansas: Colby, Topeka, Salina, Manhattan, Lawrence":"å ªè¨æ¯å·åé¨ï¼Colby, Topeka, Salina, Manhattan, Lawrence","Northern Kentucky: Louisville, Frankfort, Shelbyville, Bardstown":"è¯å¡åºå·åé¨ï¼Louisville, Frankfort, Shelbyville, Bardstown","Northern Louisiana: Shreveport, Monroe, Alexandria, Fisher, Tallulah":"è·¯ææ¯å®é£å·åé¨ï¼Shreveport, Monroe, Alexandria, Fisher, Tallulah","Northern Mariana Islands":"åé©¬éäºçº³ç¾¤å²","Northern Michigan: Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste. Marie, Upper Peninsula":"å¯æ­æ ¹åé¨ï¼Escanaba, Houghton, Iron Mountain, Marquette, Menominee, Sault Ste.Marie, Upper Peninsula","Northern Minnesota: Duluth, Thief River Falls, Brainerd, International Falls":"æå°¼èè¾¾å·åé¨ï¼Duluth, Thief River Falls, Brainerd, International Falls","Northern Mississippi: Greenville, Tupelo, Winona, Columbus, Holly Springs":"å¯è¥¿è¥¿æ¯å·åé¨ï¼Greenville, Tupelo, Winona, Columbus, Holly Springs","Northern Ohio: Cleveland suburbs, Elyria, Lorain, Oberlin, Ashtabula":"ä¿äº¥ä¿åé¨ï¼Cleveland éåº, Elyria, Lorain, Oberlin, Ashtabula","Northern Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur":"å¾·åè¨æ¯å·åé¨ï¼Vernon, Wichita Falls, Denton, Gainesville, Decatur","Northern Virginia: Alexandria, Arlington, Fairfax, Prince William, eastern Loudoun counties":"å¼åå°¼äºå·åé¨ï¼Alexandria, Arlington, Fairfax, Prince William, Loudoun ä¸é¨å¿","Northern Wisconsin: Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland":"å¨æ¯åº·æåé¨ï¼Wausau, Eau Claire, Rice Lake, Rhinelander, Ashland","Northern and Eastern Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston":"äºæå·´é©¬å·åé¨åä¸é¨Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston","Northern and Eastern Florida: Daytona Beach, Lake City, Live Oak, Crescent City":"ä½ç½éè¾¾å·ä¸åé¨Daytona Beach, Lake City, Live Oak, Crescent City","Northern and Western Arizona: Flagstaff, Kingman, Prescott, Yuma":"äºå©æ¡é£å·è¥¿åé¨ï¼Flagstaff, Kingman, Prescott, Yuma","Northern and Western Colorado: Aspen, Durango, Grand Junction, Fort Collins":"ç§ç½æå¤å·è¥¿åé¨ï¼Aspen, Durango, Grand Junction, Fort Collins","Northerneastern California: Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee":" å å©ç¦å©äºå·ä¸åé¨ ï¼Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee","Northwest California":"å å©ç¦å°¼äºå·è¥¿åé¨","Northwest France":"æ³å½è¥¿åé¨","Northwest Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso":"å°ç¬¬å®çº³å·è¥¿åé¨ï¼Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso","Northwestern Arkansas: Fort Smith, Fayetteville":"é¿è¯è²å·è¥¿åé¨ï¼Fort Smith, Fayetteville","Northwestern California: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah":"å å©ç¦å°¼äºå·è¥¿åé¨ï¼Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah","Northwestern Florida: Pensacola, Tallahassee, Panama City, the Florida panhandle":"ä½ç½éè¾¾å·è¥¿åé¨ï¼Pensacola, Tallahassee, å·´æ¿é©¬å, ä½ç½éè¾¾ç­é¿å°å¸¦","Northwestern Michigan: Muskegon, Traverse City, Ludington, Petoskey":"å¯æ­æ ¹å·è¥¿åé¨ï¼Muskegon, Traverse City, Ludington, Petoskey","Northwestern New Jersey: Newark, Paterson":"æ°æ³½è¥¿å·è¥¿åé¨ï¼Newark, Paterson","Northwestern New Mexico: Albuquerque, Santa Fe, Farmington, Gallup":"æ°å¢¨è¥¿å¥å·è¥¿åé¨ï¼Albuquerque, Santa Fe, Farmington, Gallup","Northwestern Ohio: Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green":"ä¿äº¥ä¿å·è¥¿åé¨ï¼Toledo, Sylvania, Mansfield, Lima, Findlay, Bryan, Sandusky, Bowling Green","Northwestern Ontario, Canada: Thunder Bay, Kenora, Dryden, Greenstone":"å æ¿å¤§å®å¤§ç¥çè¥¿åé¨Thunder Bay, Kenora, Dryden, Greenstone","Northwestern Oregon: Portland, Salem, Hillsboro, Beaverton":"ä¿ååå·è¥¿åé¨ï¼Portland, Salem, Hillsboro, Beaverton","Northwestern Oregon: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria":"ä¿ååå·è¥¿åé¨ï¼æ³¢ç¹å°, Salem, Hillsboro, St. Helens, Tillamook, Astoria","Northwestern and Central Pennsylvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium":"å®¾å¤æ³å°¼äºå·è¥¿ååä¸­é¨ï¼Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium","Norway":"æªå¨","Norway, Svalbard and Jan Mayen":"æªå¨ï¼æ¯ç¦å°å·´ç¹åæ¬é©¬å»¶å²","Nottingham":"è¯ºä¸æ±","Nova Scotia and Prince Edward Island, Canada":"å æ¿å¤§æ°æ¯ç§èçåç±å¾·åçå­å²","Nova Scotia/PEI":"æ°æ¯ç§è/PEI","NÃ¼rnberg":"çº½ä¼¦å ¡","NÃ¼rnberg/FÃ¼rth":"çº½ä¼¦å ¡/è²å°ç¹","OCHA":"èåå½äººéåè°å","Ohio":"ä¿äº¥ä¿å·","Ohio: Cleveland":"ä¿äº¥ä¿ï¼åå©å¤«å°","Ohio: Columbus":"ä¿äº¥ä¿å·ï¼ Columbus","Oklahoma":"ä¿åæä½é©¬å·","Oman":"é¿æ¼","Ontario":"å®å¤§ç¥ç","Ontario, Canada":"å æ¿å¤§å®å¤§ç¥ç","Ontario: Toronto":"å®å¤§ç¥çï¼å¤ä¼¦å¤","Oregon":"ä¿ååå·","Oregon: Eugene, Medford, Bend, Pendleton, Corvallis, Ontario, Burns":"ä¿ååå·ï¼Eugene, Medford, Bend, Pendleton, Corvallis, Ontario, Burns","Pakistan":"å·´åºæ¯å¦","Palau":"å¸å³","Palestinian Authority":"å·´åæ¯å¦æ°ææåæºæ","Panama":"å·´æ¿é©¬","Panjin":"çé¦å¸","Panjin çé¦å¸":"çé¦å¸","Panzhihua":"ææè±å¸","Panzhihua ææè±å¸":"ææè±å¸","Papua New Guinea":"å·´å¸äºæ°å åäº","Paraguay":"å·´æå­","Paris":"å·´é»","Paris (Ile-de-France area)":"å·´é»ï¼å·´é»å¤§åºï¼","Pennsylvania":"å®¾å¤æ³å°¼äºå·","Pennsylvania: Philadelphia":"å®¾å¤æ³å°¼äºå·ï¼è´¹å","People's Republic of China":"ä¸­åäººæ°å±åå½","Personal Comm.":"ä¸ªäººéè®¯","Personal Comm. Services":"ä¸ªäººéè®¯æå¡","Personal Communications Services":"ä¸ªäººéè®¯æå¡","Peru":"ç§é²","Philippines":"è²å¾å®¾","PingAn":"å¹³å®å¿(æµ·ä¸å°åº)","PingAn å¹³å®å¿ (æµ·ä¸å°åº)":"å¹³å®å¿ (æµ·ä¸å°åº)","Pingdingshan":"å¹³é¡¶å±±å¸","Pingdingshan å¹³é¡¶å±±å¸":"å¹³é¡¶å±±å¸","Pingliang":"å¹³åå¸(å¹³åå°åº)","Pingliang å¹³åå¸ (å¹³åå°åº)":"å¹³åå¸ (å¹³åå°åº)","Pingxiang":"èä¹¡å¸","Pingxiang èä¹¡å¸":"èä¹¡å¸","Pitcairn":"ç®ç¹å¯æ©","Poland":"æ³¢å°","Portugal":"è¡èç","Premium Rate":"900åºå·","Premium-rate":"900åºå·","Premium-rate Telephone Service":"900åºå·çµè¯æå¡","Puerto Rico":"æ³¢å¤é»å","Pulan":"æ®å°å¿","Pulan æ®å°å¿":"æ®å°å¿","Putian":"èç°å¸","Putian èç°å¸":"èç°å¸","Puyang":"æ¿®é³å¸","Puyang æ¿®é³å¸":"æ¿®é³å¸","Qatar":"å¡å¡å°","Qingdao":"éå²å¸","Qingdao éå²å¸":"éå²å¸","Qingyuan":"æ¸è¿å¸","Qingyuan æ¸è¿å¸":"æ¸è¿å¸","Qinhuangdao":"ç§¦çå²å¸","Qinhuangdao ç§¦çå²å¸":"ç§¦çå²å¸","Qinzhou":"é¦å·å¸","Qinzhou é¦å·å¸":"é¦å·å¸","Qiqihar":"é½é½åå°å¸","Qiqihar é½é½åå°å¸":"é½é½åå°å¸","Qitaihe":"ä¸å°æ²³å¸","Qitaihe ä¸å°æ²³å¸":"ä¸å°æ²³å¸","Quanzhou":"æ³å·å¸","Quanzhou æ³å·å¸":"æ³å·å¸","Quebec":"é­åå","Quebec, Canada":"å æ¿å¤§é­åå","Quebec, Canada: Montreal, Ãle Perrot, Ãle Bizard":"å æ¿å¤§é­ååï¼èç¹å©å°, Ãle Perrot,  Ãle Bizard","Quebec, Canada: Quebec City, Saguenay, GaspÃ© Peninsula, CÃ´te-Nord, Chibougamau, St-Georges":"å æ¿å¤§é­ååï¼é­ååå, Saguenay, GaspÃ© Peninsula, CÃ´te-Nord, Chibougamau, St-Georges","Quebec, Canada: Sherbrooke, Trois-Rivieres, Abitibi-TÃ©miscamingue, Mauricie, Outaouais, Estrie":"å æ¿å¤§é­ååï¼Sherbrooke, Trois-Rivieres, Abitibi-TÃ©iscamingue, Mauricie, Outaouais, Estrie","Qujing":"æ²éå¸","Qujing æ²éå¸":"æ²éå¸","Quzhou":"è¡¢å·å¸","Quzhou è¡¢å·å¸":"è¡¢å·å¸","Reading":"éä¸","Republic of China":"å°æ¹¾","Republic of Congo":"åæå±åå½","Republic of Ireland":"ç±å°å°å±åå½","Rhode Island":"ç½å¾å²å·","Rikaze":"æ¥ååå¸(æ¥ååå°åº)","Rikaze æ¥ååå¸ (æ¥ååå°åº)":"æ¥ååå¸ (æ¥ååå°åº)","Rizhao":"æ¥ç§å¸","Rizhao æ¥ç§å¸":"æ¥ç§å¸","Romania":"ç½é©¬å°¼äº","Russia":"ä¿ç½æ¯","Russia, Kazakhstan":"ä¿ç½æ¯ï¼åè¨åæ¯å¦","Rwanda":"å¢æºè¾¾","RÃ©union":"çå°¼æ±ª","RÃ©union, Mayotte":"çå°¼æ±ªå²ï¼é©¬çº¦ç¹","S Alberta":"äºä¼¯è¾¾åé¨","S Arkansas":"é¿è¯è²å·åé¨","S California":"åå å©ç¦å©äºå·","S Florida":"ä½ç½éè¾¾å·åé¨","S Illinois":"ä¼å©è¯ºä¼å·åé¨","S Kansas":"å ªè¨æ¯å·åé¨","S Minnesota":"æå°¼èè¾¾å·åé¨","S Mississippi":"å¯è¥¿è¥¿æ¯å·åé¨","S Quebec":"é­åååé¨","S Texas":"å¾·åè¨æ¯å·åé¨","S Virginia":"å¼åå°¼äºåé¨","SE Alabama":"äºæå·´é©¬ä¸åé¨","SE Arizona":"äºå©æ¡é£å·ä¸åé¨","SE California":"å å©ç¦å©äºå·ä¸åé¨","SE Colorado":"ç§ç½æå¤ä¸åé¨","SE Georgia":"ä¹æ²»äºå·ä¸åé¨","SE Louisiana":"è·¯ææ¯å®é£å·ä¸åé¨","SE Massachusetts":"é©¬è¨è¯¸å¡å·ä¸åé¨","SE New Jersey":"æ°æ³½è¥¿å·ä¸åé¨","SE New York":"çº½çº¦å·ä¸åé¨","SE North Carolina":"åå¡ç½è±çº³å·ä¸åé¨","SE Ohio":"ä¿äº¥ä¿å·ä¸åé¨","SE Pennsylvania":"å®¾å¤æ³å°¼äºå·ä¸åé¨","SE Texas":"å¾·åè¨æ¯å·ä¸åé¨","SE Wisconsin":"å¨æ¯åº·æå·ä¸åé¨","SW Alabama":"äºæå·´é©¬å·è¥¿åé¨","SW Florida":"ä½ç½éè¾¾å·è¥¿åé¨","SW Georgia":"ä¹æ²»äºå·è¥¿åé¨","SW Louisiana":"è·¯ææ¯å®é£å·è¥¿åé¨","SW Michigan":"å¯æ­æ ¹å·è¥¿åé¨","SW Missouri":"å¯èéå·è¥¿åé¨","SW New Jersey":"æ°æ³½è¥¿å·è¥¿åé¨","SW Ohio":"ä¿äº¥ä¿å·è¥¿åé¨","SW Oklahoma":"ä¿åæè·é©¬å·è¥¿åé¨","SW Ontario":"å®å¤§ç¥çè¥¿åé¨","SW Pennsylvania":"å®¾å¤æ³å°¼äºå·è¥¿åé¨","SW Tennessee":"ç°çº³è¥¿å·è¥¿åé¨","SW Texas":"å¾·åè¨æ¯å·è¥¿åé¨","SW Virginia":"å¼åå°¼äºå·è¥¿åé¨","SW Wisconsin":"å¨æ¯åº·æå·è¥¿åé¨","Saint Helena":"å£æµ·ä¼¦å¨","Saint Helena, Tristan da Cunha":"å£èµ«åæ¿å²ï¼ç¹éæ¯å¦è¾¾åºå°¼äº","Saint Kitts and Nevis":"å£åºè¨åå°¼ç»´æ¯","Saint Lucia":"å£å¢è¥¿äº","Saint Pierre and Miquelon":"å£ç®åå°åå¯åéå²","Saint Pierre and Miquelon Islands":"å£ç®åå°åå¯åéå²","Saint Vincent and the Grenadines":"å£ææ£®ç¹åæ ¼æçº³ä¸æ¯","Salamanca":"è¨ææ¼å¡","Samoa":"è¨æ©äº","San Marino":"å£é©¬åè¯º","Sanmenxia":"ä¸é¨å³¡å¸","Sanmenxia ä¸é¨å³¡å¸":"ä¸é¨å³¡å¸","Sanming":"ä¸æå¸","Sanming ä¸æå¸":"ä¸æå¸","Santa Cruz de Tenerife":"å£åé²æ¯ç¹åéè´¹","Saskatchewan":"è¨æ¯åå½»æ¸©ç","Saskatchewan, Canada":"å æ¿å¤§è¨æ¯åå½»æ¸©ç","Saudi Arabia":"æ²ç¹é¿æä¼¯","Senegal":"å¡åå å°","Serbia":"å¡å°ç»´äº","Service Number":"æå¡å·ç ","Seville":"å¡ç»´å©äº","Seychelles":"å¡èå°","Shanghai":"ä¸æµ·","Shangqiu":"åä¸å¸","Shangqiu åä¸å¸":"åä¸å¸","Shangrao":"ä¸é¥¶å¸","Shangrao ä¸é¥¶å¸":"ä¸é¥¶å¸","Shangzhou":"åå·å¸(ååå°åº)","Shangzhou åå·å¸ (ååå°åº)":"åå·å¸ (ååå°åº)","Shanwei":"æ±å°¾å¸","Shanwei æ±å°¾å¸":"æ±å°¾å¸","Shaoguan":"é¶å³å¸","Shaoguan é¶å³å¸":"é¶å³å¸","Shaoxing":"ç»å´å¸","Shaoxing ç»å´å¸":"ç»å´å¸","Shaoyang":"éµé³å¸","Shaoyang éµé³å¸":"éµé³å¸","Shared Cost":"åæè´¹ç¨","Shared Cost Service":"åæè´¹ç¨æå¡","Sheffield":"è°¢è²å°å¾·","Shenyang":"æ²é³å¸","Shenyang æ²é³å¸":"æ²é³å¸","Shenzha":"ç³æå¿","Shenzha ç³æå¿":"ç³æå¿","Shenzhen":"æ·±å³å¸","Shenzhen æ·±å³å¸":"æ·±å³å¸","Shihezi":"ç³æ²³å­å¸","Shihezi ç³æ²³å­å¸":"ç³æ²³å­å¸","Shijiazhuang":"ç³å®¶åºå¸","Shijiazhuang ç³å®¶åºå¸":"ç³å®¶åºå¸","Shiyan":"åå °å¸","Shiyan åå °å¸":"åå °å¸","Shizuishan":"ç³å´å±±å¸","Shizuishan ç³å´å±±å¸":"ç³å´å±±å¸","Shuanghu":"åæ¹","Shuanghu åæ¹":"åæ¹","Shuangyashan":"åé¸­å±±å¸","Shuangyashan åé¸­å±±å¸":"åé¸­å±±å¸","Shuozhou":"æå·å¸","Shuozhou æå·å¸":"æå·å¸","Sierra Leone":"å¡æå©æ","Simao":"æèå¸(æèå°åº)","Simao æèå¸ (æèå°åº)":"æèå¸ (æèå°åº)","Singapore":"æ°å å¡","Siping":"åå¹³å¸","Siping åå¹³å¸":"åå¹³å¸","Slovakia":"æ¯æ´ä¼å","Slovenia":"æ¯æ´æå°¼äº","Solomon Islands":"æç½é¨ç¾¤å²","Somalia":"ç´¢é©¬é","Somalia, Somaliland":"ç´¢é©¬éï¼ç´¢é©¬éå°","Songyuan":"æ¾åå¸","Songyuan æ¾åå¸":"æ¾åå¸","South Africa":"åé","South Carolina":"åå¡ç½æ¥çº³å·","South Carolina: Greenville, Spartanburg, Anderson, Upstate South Carolina":"åå¡ç½æ¥çº³å·ï¼Greenville, Spartanburg, Anderson, åå¡ç½æ¥çº³ä¸å·","South Central California: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave":"å å©ç¦å©äºå·ä¸­åé¨ï¼Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave","South Central Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven":"ä½ç½éè¾¾å·ä¸­åé¨ï¼Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven","South Central Michigan: Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison":"å¯æ­æ ¹å·ä¸­åé¨ï¼Lansing, Jackson, Charlotte, Coldwater, Howell, Deerfield, Addison","South Central North Carolina: Charlotte, Gastonia, Concord, Salisbury":"åå¡ç½è±çº³å·ä¸­åé¨ï¼Charlotte, Gastonia, Concord, Salisbury","South Central Pennsylvania: Harrisburg, Gettysburg, Lancaster, York":"å®¾å¤æ³å°¼äºå·ä¸­åé¨ï¼Harrisburg, Gettysburg, Lancaster, York","South Dakota":"åè¾¾ç§ä»å·","South Korea":"é©å½","Southeast France":"æ³å½ä¸åé¨","Southeastern Alabama: Montgomery, Auburn, Opelika, Dothan, Selma":"äºæå·´é©¬ä¸åé¨ï¼Montgomery, Auburn, Opelika, Dothan, Selma","Southeastern Arizona: Tucson, Nogales":"äºå©æ¡é£å·ä¸åé¨ï¼Tucson, Nogales","Southeastern California: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County":"å å©ç¦å©äºå·ä¸åé¨ï¼Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County","Southeastern Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta":"ç§ç½æå¤ä¸åé¨ï¼Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta","Southeastern Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas":"ä¹æ²»äºå·ä¸åé¨ï¼Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas","Southeastern Louisiana: Houma, Slidell":"è·¯ææ¯å®é£å·ä¸åé¨ï¼Houma, Slidell","Southeastern Massachusetts: Worcester, New Bedford":"é©¬è¨è¯¸å¡å·ä¸åé¨ï¼Worcester, New Bedford","Southeastern New York: Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville":"çº½çº¦å·ä¸åé¨ï¼Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville","Southeastern North Carolina: Fayetteville, Wilmington, Jacksonville, Lumberton":"åå¡ç½è±çº³å·ä¸åé¨ï¼Fayetteville, Wilmington, Jacksonville, Lumberton","Southeastern Pennsylvania: Allentown, Reading, Norristown, Chester":"å®¾å¤æ³å°¼äºå·ä¸åé¨Allentown, Reading, Norristown, Chester","Southeastern Texas: Beaumont, Galveston, Port Arthur, Jasper":"å¾·åè¨æ¯å·ä¸åé¨ï¼Beaumont, Galveston, Port Arthur, Jasper","Southeastern Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange":"å¾·åè¨æ¯å·ä¸åé¨ï¼Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange","Southeastern Wisconsin: Racine, Kenosha, Menomonee Falls, Waukesha":"å¨æ¯åº·æå·ä¸åé¨ï¼Racine, Kenosha, Menomonee Falls, Waukesha","Southern Alberta, Canada: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks":"å æ¿å¤§äºä¼¯è¾¾åé¨Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks","Southern California: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County":"å å©ç¦å©äºå·åé¨ï¼Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County","Southern California: Central Los Angeles":"å å©ç¦å©äºå·åé¨ï¼æ´æç¶ä¸­å¤®å°åº","Southern California: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana":"å å©ç¦å©äºå·åé¨ï¼Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana","Southern California: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild":"å å©ç¦å©äºå·åé¨ï¼Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild","Southern California: Del Mar, La Jolla, San Diego":"å å©ç¦å©äºå·åé¨ï¼Del Mar, La Jolla, å£è¿­æ","Southern California: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar":"å å©ç¦å©äºå·åé¨ï¼Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar","Southern California: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower":"å å©ç¦å©äºå·åé¨ï¼Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower","Southern California: Los Angeles, West LA, San Fernando Valley, Florence, Montebello":"å å©ç¦å©äºå·åé¨ï¼æ´æç¶, West LA, San Fernando Valley, Florence, Montebello","Southern California: Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, eastern Los Angeles suburbs":"å å©ç¦å©äºå·åé¨ï¼Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, æ´æç¶ä¸é¨éåº","Southern California: San Diego":"å å©ç¦å©äºå·åé¨ï¼å£è¿­æ","Southern California: San Diego, Chula Vista":"å å©ç¦å©äºå·åé¨ï¼San Diego, Chula Vista","Southern California: San Fernando Valley":"å å©ç¦å©äºå·åé¨ï¼San Fernando Valley","Southern California: San Fernando Valley, including Glendale, San Fernando, Northridge, Burbank, Los Angeles suburbs":"å å©ç¦å©äºå·åé¨ï¼San Fernando Valley, åæ¬ Glendale, San Fernando, Northridge, Burbank, æ´æç¶éåº","Southern California: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, the Los Angeles Westside":"å å©ç¦å©äºå·åé¨ï¼Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, the Los Angeles Westside","Southern Florida: Fort Lauderdale, Hollywood, Coral Springs":"ä½ç½éè¾¾å·åé¨ï¼Fort Lauderdale, Hollywood, Coral Springs","Southern Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West":"ä½ç½éè¾¾å·åé¨ï¼Miami-Dade, Florida Keys, è¿é¿å¯, Homestead, Coral Gables, Key West","Southern Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon":"ä¼å©è¯ºä¼å·åé¨ï¼Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon","Southern Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal":"å ªè¨æ¯å·åé¨ï¼Dodge City, Emporia, Geat Bend, Parsons, Liberal","Southern Minnesota: Rochester, Mankato, Worthington, Marshall":"æå°¼èè¾¾å·åé¨ï¼Rochester, Mankato, Worthington, Marshall","Southern Mississippi: Gulfport, Biloxi, Pascagoula, Bay St Louis":"å¯è¥¿è¥¿æ¯å·åé¨ï¼Gulfport, Biloxi, Pascagoula, Bay St Louis","Southern Texas: Laredo, Brownsville, McAllen, Harlingen":"å¾·åè¨æ¯å·åé¨ï¼Laredo, Brownsville, McAllen, Harlingen","Southern Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill":"å¼åå°¼äºåé¨ï¼Charlottesville, Lynchburg, Danville, Farmville, South Hill","Southern and Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"é¿è¯è²å·ä¸åé¨ï¼Texarkana, Jonesboro, Pine Bluff","Southern and Western Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City":"ä¿åæè·é©¬å·è¥¿åé¨ï¼Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City","Southwest France":"æ³å½è¥¿åé¨","Southwestern Alabama: Mobile, Jackson, Brewton":"äºæå·´é©¬å·è¥¿åé¨ï¼Mobile, Jackson, Brewton","Southwestern Florida: Lee, Collier, and Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades":"ä½ç½éè¾¾å·è¥¿åé¨ï¼Lee, Collier, and Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades","Southwestern Florida: Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda":"ä½ç½éè¾¾å·è¥¿åé¨ï¼Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda","Southwestern Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald":"ä¹æ²»äºå·è¥¿åé¨ï¼Albany, Valdosta, Bainbridge, Americus, Fitzgerald","Southwestern Louisiana: Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder":"è·¯ææ¯å®é£å·è¥¿åé¨ï¼Lafayette, Lake Charles, Leesville, New Iberia, Opelousas, De Ridder","Southwestern Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, Detroit suburbs":"å¯æ­æ ¹å·è¥¿åé¨ï¼Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, Detroit éåº","Southwestern Michigan: Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph":"å¯æ­æ ¹è¥¿åé¨ï¼Battle Creek, Kalamazoo, Benton Harbor, Allegan, Hastings, St Joseph","Southwestern Michigan: Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia":"å¯æ­æ ¹å·è¥¿åé¨ï¼Grand Rapids, Holland, Greenville, Grand Haven, Zeeland, Ionia","Southwestern Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon":"å¯èéå·è¥¿åé¨ï¼Springfield, Joplin, Branson, West Plains, Lamar, Lebanon","Southwestern New Jersey: Vineland, Cherry Hill, Camden, Millville":"æ°æ³½è¥¿å·è¥¿åé¨ï¼Vineland, Cherry Hill, Camden, Millville","Southwestern Ohio":"ä¿äº¥ä¿å·è¥¿åé¨","Southwestern Ohio: Cincinnati, Middletown, Hamilton, Norwood, Lebanon":"ä¿äº¥ä¿å·è¥¿åé¨ï¼Cincinnati, Middletown, Hamilton, Norwood, Lebanon","Southwestern Ohio: Marysville, Springfield, Dayton, Hillsboro":"ä¿äº¥ä¿è¥¿åé¨ï¼Marysville, Springfield, Dayton, Hillsboro","Southwestern Ontario, Canada: London, Windsor, Kitchener-Waterloo, Cambridge":"å æ¿å¤§å®å¤§ç¥çè¥¿åé¨London, Windsor, Kitchener-Waterloo, Cambridge","Southwestern Ontario, Canada: Niagara Region, Hamilton, Toronto suburbs":"å æ¿å¤§å®å¤§ç¥çè¥¿åé¨Niagara Region, Hamilton, å¤ä¼¦å¤éåº","Southwestern Pennsylvania: New Castle, Washington, Indiana, Uniontown":"å®¾å¤æ³å°¼äºå·è¥¿åé¨ï¼New Castle, Washington, Indiana, Uniontown","Southwestern Tennessee: Memphis, Covington, Somerville":"ç°çº³è¥¿å·è¥¿åé¨ï¼å­è²æ¯, Covington, Somerville","Southwestern Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass":"å¾·åè¨æ¯å·è¥¿åé¨ï¼Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass","Southwestern Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield":"å¼åå°¼äºå·è¥¿åé¨ï¼Bristol, Abingdon, Wytheville, Martinsville, Bluefield","Southwestern Wisconsin: Madison, La Crosse, Platteville, Beloit":"å¨æ¯åº·æå·è¥¿åé¨ï¼Madison, La Crosse, Platteville, Beloit","Spain":"è¥¿ç­ç","Special Telecom.":"ç¹å«çµè®¯","Special Telecommunications Needs in Canada":"å æ¿å¤§å½åçç¹å«çµè®¯éæ±","Sri Lanka":"æ¯éå°å¡","St. Kitts/Nevis":"å£åºè¨/å°¼ç»´æ¯","St. Pierre and Miquelon":"å£ç®åå°åå¯åéå²","Strasburg":"æ¯ç¹ææ¯å ¡","StraÃberg":"æ¯ç¹ææ¯å ¡","Stuttgart":"æ¯å¾å ç¹","Stuttgart, Aichwald, Denkendorf, Esslingen am Neckar, Fellbach, Filderstadt-Bernhausen, Filderstadt-Bonlanden, Filderstadt-Plattenhardt, Korntal, Leinfelden-Echterdingen, Ostfildern-Kemnat, Ostfildern-Nellingen, Ostfildern-Ruit":"æ¯å¾å ç¹ï¼Aichwaldï¼ç»è¯å¤å¤«ï¼ç¾åå¡æ²³çåæ¯ææ ¹ï¼è´¹å°å·´èµ«ï¼è²å°å¾·æ½å¡ç¹-ä¼¯æ©è±ªæ£®ï¼è²å°å¾·æ½å¡ç¹-Bonlandenï¼è²å°å¾·æ½å¡ç¹-Plattenhardtï¼Korntalï¼è±æ©è´¹å°ç»- Echterdingenï¼Ostfildern-Kemnatï¼Ostfildern-Nellingenï¼Ostfildern-Ruit","Sudan":"èä¸¹","Suihua":"ç»¥åå¸","Suihua ç»¥åå¸":"ç»¥åå¸","Suining":"éå®å¸","Suining éå®å¸":"éå®å¸","Suizhou":"éå·å¸","Suizhou éå·å¸":"éå·å¸","Suoxian":"ç´¢å¿","Suoxian ç´¢å¿":"ç´¢å¿","Suqian":"å®¿è¿å¸","Suqian å®¿è¿å¸":"å®¿è¿å¸","Suriname":"èéå","Suzhou":"å®¿å·å¸","Suzhou å®¿å·å¸":"å®¿å·å¸","Suzhou èå·å¸":"èå·å¸","Swaziland":"æ¯å¨å£«å°","Sweden":"çå¸","Switzerland":"çå£«","Syria":"åå©äº","SÃ£o TomÃ© and PrÃ­ncipe":"å£å¤ç¾åæ®æè¥¿æ¯","Tacheng":"å¡åå¸","Tacheng å¡åå¸":"å¡åå¸","TaiAn":"æ³°å®å¸","TaiAn æ³°å®å¸":"æ³°å®å¸","Taiwan":"å°æ¹¾","Taiyuan":"å¤ªåå¸","Taiyuan å¤ªåå¸":"å¤ªåå¸","Taizhou":"æ³°å·å¸","Taizhou å°å·å¸":"å°å·å¸","Taizhou æ³°å·å¸":"æ³°å·å¸","Tajikistan":"å¡ååæ¯å¦","Tangshan":"åå±±å¸","Tangshan åå±±å¸":"åå±±å¸","Tanzania":"å¦æ¡å°¼äº","Tarragona":"å¡ææçº³","Tennessee":"ç°çº³è¥¿å·","Tennessee: Clarksville, Columbia, Manchester, Cookeville":"ç°çº³è¥¿å·Clarksville, Columbia, Manchester, Cookeville","Texas":"å¾·åè¨æ¯å·","Texas: Abilene, San Angelo, Sweetwater, Snyder":"å¾åè¨æ¯ï¼Abilene, San Angelo, Sweetwater, Snyder","Texas: Amarillo, Lubbock, Canadian, Perryton, Shamrock, Dalhart, Texas Panhandle":"å¾åè¨æ¯ï¼Amarillo, Lubbock, Canadian, Perryton, Shamrock, Dalhart, Texas Panhandle","Texas: Dallas area":"å¾åè¨æ¯ï¼è¾¾ææ¯å°åº","Texas: El Paso County, Hudspeth County":"å¾åè¨æ¯å·ï¼El PasoÃÃ, HudspethÃÃ","Texas: Fort Worth, Arlington, Grandview, Weatherford, Rhome":"å¾åè¨æ¯å·ï¼Fort Worth, Arlington, Grandview, Weatherford, Rhome","Texas: Houston":"å¾åè¨æ¯ï¼ä¼æ¯æ¦","Texas: San Antonio area":"å¾åè¨æ¯ï¼å£å®ä¸å°¼å¥¥å°åº","Texas: Waco, Killeen, Temple, Belton, and Stephenville":"å¾åè¨æ¯ï¼Waco, Killeen, Temple, BeltonåStephenville","Thailand":"æ³°å½","The Bahamas":"å·´åé©¬","The British Virgin Islands":"è±å±ç»´å°äº¬ç¾¤å²","The Cayman Islands":"å¼æ¼ç¾¤å²","The Dominican Republic":"å¤ç±³å°¼å å±åå½","The Gambia":"åæ¯äº","The U.S. Virgin Islands":"ç¾å±ç»´å°äº¬ç¾¤å²","Tianjin":"å¤©æ´¥å¸","Tianjin å¤©æ´¥å¸":"å¤©æ´¥å¸","Tianshui":"å¤©æ°´å¸","Tianshui å¤©æ°´å¸":"å¤©æ°´å¸","Tieling":"éå²­å¸","Tieling éå²­å¸":"éå²­å¸","Togo":"å¤å¥","Tokelau":"æåå³","Toledo":"æè±å¤","Toll-free":"åè´¹","Toll-free Telephone Service":"åè´¹çµè¯æå¡","Tonga":"æ±¤å ","Tongchuan":"éå·å¸","Tongchuan éå·å¸":"éå·å¸","Tonghua":"éåå¸","Tonghua éåå¸, Meihekou æ¢æ²³å£å¸":"éåå¸,æ¢æ²³å£å¸","Tongling":"ééµå¸","Tongling ééµå¸":"ééµå¸","Tongren":"éä»å¸(éä»å°åº)","Tongren åä»å¿(é»å èæèªæ²»å·)":"åä»å¿(é»å èæèªæ²»å·)","Tongren éä»å¸ (éä»å°åº)":"éä»å¸ (éä»å°åº)","Trinidad and Tobago":"ç¹ç«å°¼è¾¾åå¤å·´å¥","Trinidad/Tobago":"ç¹ç«å°¼è¾¾/å¤å·´å¥","Tulufan":"åé²çªå¸(åé²çªå°åº)","Tulufan åé²çªå¸ (åé²çªå°åº)":"åé²çªå¸ (åé²çªå°åº)","Tunisia":"çªå°¼æ¯","Turkey":"åè³å¶","Turkey, Turkish Republic of Northern Cyprus":"åè³å¶ï¼åå¡æµ¦è·¯æ¯åè³å¶å±åå½","Turkmenistan":"ååºæ¼æ¯å¦","Tuvalu":"å¾ç¦å¢","U.S. Government":"ç¾å½æ¿åº","U.S. Government Special Services":"ç¾å½æ¿åºç¹å«æå¡","U.S. Virgins":"ç¾å±ç»´å°äº¬ç¾¤å²","UAE":"é¿èé","Uganda":"ä¹å¹²è¾¾","Ukraine":"ä¹åå°","United Arab Emirates":"é¿æä¼¯èåéé¿å½","United Kingdom":"è±å½","United Kingdom, Guernsey, Isle of Man, Jersey":"è±å½ï¼æ ¼æ©è¥¿å²ï¼é©¬æ©å²ï¼æ³½è¥¿","Universal Personal":"éç¨ä¸ªäºº","Universal Personal Telecommunications":"éç¨ä¸ªäººéè®¯","Universal international freephone number":"éç¨å½éåè´¹çµè¯å·ç ","Unknown Country":"æªç¥å½å®¶","Unknown Location":"æªç¥å°ç¹","Uruguay":"ä¹æå­","Urumchi":"ä¹é²æ¨é½","Urumchi ä¹é²æ¨é½":"ä¹é²æ¨é½","Utah":"ç¹ä»å·","Utah: Cedar City, Logan, Moab, Park City, St. George, Moab":"ç¹ä»å·ï¼Cedar City, Logan, Moab, Park City, St. George, Moab","Utah: Wasatch Front":"ç¹ä»å·ï¼Wasatch Front","Uzbekistan":"ä¹å¹å«åæ¯å¦","Valencia":"ç¦ä¼¦è¥¿äº","Vanuatu":"ç¦åªé¿å¾","Vatican City":"æ¢µèåå","Venezuela":"å§åçæ","Vermont":"ä½èç¹å·","Vietnam":"è¶å","Virginia":"å¼åå°¼äºå·","Virginia: Hampton Roads, Eastern Shore":"å¼åå°¼äºå·ï¼Hampton Roads, Eastern Shore","Virginia: Richmond, Petersburg":"å¼åå°¼äºå·ï¼Richmond, Petersburg","Vizcaya":"æ¯æ¯å¡äº","Voice over IP":"VoIP","Voice over IP services":"VoIPæå¡","W Illinois":"ä¼å©è¯ºä¼å·è¥¿é¨","W Iowa":"ç±è·åå·è¥¿é¨","W Kentucky":"è¯å¡åºå·è¥¿é¨","W Maryland":"é©¬éå°å·è¥¿é¨","W Massachusetts":"é©¬è¨è¯¸å¡å·è¥¿é¨","W Nebraska":"åå¸ææ¯å å©ç¦å©äºå·è¥¿é¨","W New York":"çº½çº¦å·è¥¿é¨","W North Carolina":"åå¡ç½è±çº³å·è¥¿é¨","W Pennsylvania":"å®¾å¤æ³å°¼äºè¥¿é¨","W Tennessee":"ç°çº³è¥¿å·è¥¿é¨","W Texas":"ÂµÃÂ¿ÃÃÃ¸ÃÂ¹å·è¥¿é¨","W Washington":"åçé¡¿å·è¥¿é¨","Wallis and Futuna":"ç¦å©æ¯åå¯å¾çº³ç¾¤å²","Washington":"åçé¡¿å·","Washington D.C.":"åçé¡¿ç¹åº","Washington: Seattle":"åçé¡¿ï¼è¥¿éå¾","Washington: Seattle suburbs, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood and Mountlake Terrace":"åçé¡¿å·ï¼è¥¿éå¾éåº, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood åMountlake Terrace","Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway and south Seattle suburbs":"åçé¡¿ï¼Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanawayåè¥¿éå¾åé¨éåº","Washington: Western Washington":"åçé¡¿å·ï¼åçé¡¿å·è¥¿é¨ï¼","Weifang":"æ½åå¸","Weifang æ½åå¸":"æ½åå¸","Weihai":"å¨æµ·å¸","Weihai å¨æµ·å¸":"å¨æµ·å¸","Weinan":"æ¸­åå¸","Weinan æ¸­åå¸":"æ¸­åå¸","Wenshan":"æå±±å¿(æå±±å£®æèæèªæ²»å·)","Wenshan æå±±å¿ (æå±±å£®æ èæèªæ²»å·)":"æå±±å¿ (æå±±å£®æ èæèªæ²»å·)","Wenzhou":"æ¸©å·å¸","Wenzhou æ¸©å·å¸":"æ¸©å·å¸","West Central Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston":"ä¹æ²»äºå·ä¸­è¥¿é¨ï¼Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston","West Central Missouri: Kansas City, St Joseph, Independence, Harrisonville":"å¯èéå·ä¸­è¥¿é¨ï¼Kansas City, St Joseph, Independence, Harrisonville","West Central New Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield":"æ°æ³½è¥¿å·ä¸­è¥¿é¨ï¼Alpha, Washington, Elizabeth, Warren, Plainfield","West Texas: Midland, Odessa, Big Spring, Alpine":"å¾·åè¨æ¯å·è¥¿é¨ï¼Midland, Odessa, Big Spring, Alpine","West Virginia":"è¥¿å¼åå°¼äºå·","Western Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville":"ç±è·åå·è¥¿é¨ï¼Sioux City, Council Bluffs, Sheldon, Denison, Estherville","Western Kentucky: Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown":"è¯å¡åºå·è¥¿é¨ï¼Owensboro, Paducah, Bowling Green, Hopkinsville, Henderson, Elizabethtown","Western Maryland: Silver Spring, DC suburbs, Hagerstown, Frederick, Rockville, Cumberland":"é©¬éå°å·è¥¿é¨ï¼Silver Spring, DC éåº, Hagerstown, Frederick, Rockville, Cumberland","Western Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield":"é©¬è¨è¯¸å¡å·è¥¿é¨ï¼Springfield, Pittsfield, Holyoke, Greenfield","Western Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island":"åå¸ææ¯å å©ç¦å©äºå·è¥¿é¨ï¼North Platte, Scottsbluff, McCook, Kearney, Grand Island","Western New York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean":"çº½çº¦å·è¥¿é¨ï¼Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean","Western New York: Rochester, Wellsville, Batavia":"çº½çº¦å·è¥¿é¨ï¼Rochester, Wellsville, Batavia","Western North Carolina: Hickory, Asheville, Waynesville, Franklin, Murphy":"åå¡ç½æ¥çº³å·è¥¿é¨ï¼Hickory, Asheville, Waynesville, Franklin, Murphy","Western Pennsylvania: Pittsburgh area, McKeesport, Braddock, Duquesne":"å®¾å¤æ³å°¼äºè¥¿é¨ï¼å¹å¹å ¡å°åº, McKeesport, Braddock, Duquesne","Western Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar":"ç°çº³è¥¿å·è¥¿é¨ï¼Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar","Western Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen":"åçé¡¿å·è¥¿é¨ï¼Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen","Western and Southern Texas: Corpus Christi, Victoria, George":"å¾·åè¨æ¯å·è¥¿åé¨ï¼Corpus Christi, Victoria, George","Wisconsin":"å¨æ¯åº·æå·","Wisconsin: Milwaukee":"å¨æ¯åº·æå·ï¼Milwaukee","Wudu":"æ­¦é½å¿(éåå°åº)","Wudu æ­¦é½å¿ (éåå°åº)":"æ­¦é½å¿ (éåå°åº)","Wuhai":"ä¹æµ·å¸","Wuhai ä¹æµ·å¸":"ä¹æµ·å¸","Wuhan":"æ­¦æ±å¸","Wuhan æ­¦æ±å¸":"æ­¦æ±å¸","Wuhu":"èæ¹å¸","Wuhu èæ¹å¸":"èæ¹å¸","Wulanhaote":"ä¹å°æµ©ç¹å¸(å´å®ç)","Wulanhaote ä¹å°æµ©ç¹å¸ (å´å®ç)":"ä¹å°æµ©ç¹å¸ (å´å®ç)","Wuxi":"æ é¡å¸","Wuxi æ é¡å¸":"æ é¡å¸","Wuzhong":"å´å¿ å¸","Wuzhong å´å¿ å¸":"å´å¿ å¸","Wuzhou":"æ¢§å·å¸","Wuzhou æ¢§å·å¸":"æ¢§å·å¸","Wyoming":"æä¿æå·","XiAn":"è¥¿å®å¸","XiAn è¥¿å®å¸, Xianyang å¸é³å¸":"è¥¿å®å¸,å¸é³å¸","Xiamen":"å¦é¨å¸","Xiamen å¦é¨å¸":"å¦é¨å¸","Xiangfan":"è¥æ¨å¸","Xiangfan è¥æ¨å¸":"è¥æ¨å¸","Xianning":"å¸å®å¸","Xianning å¸å®å¸":"å¸å®å¸","Xiantao":"ä»æ¡å¸","Xiantao ä»æ¡å¸":"ä»æ¡å¸","Xiaogan":"å­æå¸","Xiaogan å­æå¸":"å­æå¸","Xichang":"è¥¿æå¸(åå±±å½æèªæ²»å·)","Xichang è¥¿æå¸(åå±± å½æèªæ²»å·)":"è¥¿æå¸(åå±± å½æèªæ²»å·)","Xifeng":"è¥¿å³°å¸(åºé³å°åº)","Xifeng è¥¿å³°å¸ (åºé³å°åº)":"è¥¿å³°å¸ (åºé³å°åº)","Xilinhaote":"é¡ææµ©ç¹å¸(é¡æé­åç)","Xilinhaote é¡ææµ©ç¹å¸ (é¡æé­åç)":"é¡ææµ©ç¹å¸ (é¡æé­åç)","Xingtai":"é¢å°å¸","Xingtai é¢å°å¸":"é¢å°å¸","Xingyi":"å´ä¹å¸(é»è¥¿åå¸ä¾æèæèªæ²»å·)","Xingyi å´ä¹å¸ (é»è¥¿åå¸ä¾æ èæèªæ²»å·)":"å´ä¹å¸ (é»è¥¿åå¸ä¾æ èæèªæ²»å·)","Xining":"è¥¿å®å¸","Xining è¥¿å®å¸":"è¥¿å®å¸","Xinxiang":"æ°ä¹¡å¸","Xinxiang æ°ä¹¡å¸":"æ°ä¹¡å¸","Xinyang":"ä¿¡é³å¸ãæ½¢å·å¿","Xinyang ä¿¡é³å¸ãæ½¢å·å¿":"ä¿¡é³å¸ãæ½¢å·å¿","Xinyu":"æ°ä½å¸","Xinyu æ°ä½å¸":"æ°ä½å¸","Xinzhou":"å¿»å·å¸(å¿»å·å°åº)","Xinzhou å¿»å·å¸ (å¿»å·å°åº)":"å¿»å·å¸ (å¿»å·å°åº)","Xuancheng":"å®£åå¸","Xuancheng å®£åå¸":"å®£åå¸","Xuchang":"è®¸æå¸","Xuchang è®¸æå¸":"è®¸æå¸","Xuzhou":"å¾å·å¸","Xuzhou å¾å·å¸":"å¾å·å¸","YaAn":"éå®å¸","YaAn éå®å¸":"éå®å¸","YanAn":"å»¶å®å¸","YanAn å»¶å®å¸":"å»¶å®å¸","Yancheng":"çåå¸","Yancheng çåå¸":"çåå¸","Yangjiang":"é³æ±å¸","Yangjiang é³æ±å¸":"é³æ±å¸","Yangquan":"é³æ³å¸","Yangquan é³æ³å¸":"é³æ³å¸","Yangzhou":"æ¬å·å¸","Yangzhou æ¬å·å¸":"æ¬å·å¸","Yantai":"çå°å¸","Yantai çå°å¸":"çå°å¸","Yemen":"ä¹é¨","Yibin":"å®å®¾å¸","Yibin å®å®¾å¸":"å®å®¾å¸","Yichang":"å®æå¸","Yichang å®æå¸":"å®æå¸","Yichun":"ä¼æ¥å¸","Yichun ä¼æ¥å¸":"ä¼æ¥å¸","Yichun å®æ¥å¸":"å®æ¥å¸","Yinchuan":"é¶å·å¸","Yinchuan é¶å·å¸":"é¶å·å¸","Yingkou":"è¥å£å¸","Yingkou è¥å£å¸":"è¥å£å¸","Yingtan":"é¹°æ½­å¸","Yingtan é¹°æ½­å¸":"é¹°æ½­å¸","Yining":"ä¼å®å¸(ä¼çåè¨åèªæ²»å·)","Yining ä¼å®å¸(ä¼ç åè¨åèªæ²»å·)":"ä¼å®å¸(ä¼ç åè¨åèªæ²»å·)","Yiyang":"çé³å¸","Yiyang çé³å¸":"çé³å¸","Yongzhou":"æ°¸å·å¸","Yongzhou æ°¸å·å¸":"æ°¸å·å¸","Yuci":"æ¦æ¬¡å¸(æä¸­å°åº)","Yuci æ¦æ¬¡å¸ (æä¸­å°åº)":"æ¦æ¬¡å¸ (æä¸­å°åº)","Yueyang":"å²³é³å¸","Yueyang å²³é³å¸":"å²³é³å¸","Yukon":"è²ç©º","Yukon, Northwest Territories, and Nunavut, Canada":"å æ¿å¤§è²ç©ºå°åºï¼è¥¿åå°åºååªçº³æ­¦ç¹å°åº","Yulin":"çæå¸","Yulin æ¦æå¸":"æ¦æå¸","Yulin çæå¸":"çæå¸","Yuncheng":"è¿åå¸(è¿åå°åº)","Yuncheng è¿åå¸ (è¿åå°åº)":"è¿åå¸ (è¿åå°åº)","Yunfu":"äºæµ®å¸","Yunfu äºæµ®å¸":"äºæµ®å¸","Yushu":"çæ å¿(çæ èæèªæ²»å·)","Yushu çæ å¿(çæ  èæèªæ²»å·)":"çæ å¿(çæ  èæèªæ²»å·)","Yuxi":"çæºªå¸","Yuxi çæºªå¸":"çæºªå¸","Zambia":"èµæ¯äº","Zaozhuang":"æ£åºå¸","Zaozhuang æ£åºå¸":"æ£åºå¸","Zaragoza":"è¨ææè¨","Zhada":"æè¾¾å¿","Zhada æè¾¾å¿":"æè¾¾å¿","Zhangjiajie":"å¼ å®¶çå¸","Zhangjiajie å¼ å®¶çå¸":"å¼ å®¶çå¸","Zhangjiakou":"å¼ å®¶å£å¸","Zhangjiakou å¼ å®¶å£å¸":"å¼ å®¶å£å¸","Zhangye":"å¼ æå¸(å¼ æå°åº)","Zhangye å¼ æå¸ (å¼ æå°åº)":"å¼ æå¸ (å¼ æå°åº)","Zhangzhou":"æ¼³å·å¸","Zhangzhou æ¼³å·å¸":"æ¼³å·å¸","Zhanjiang":"æ¹æ±å¸","Zhanjiang æ¹æ±å¸":"æ¹æ±å¸","Zhaoqing":"èåºå¸","Zhaoqing èåºå¸":"èåºå¸","Zhaotong":"æ­éå¸(æ­éå°åº)","Zhaotong æ­éå¸ (æ­éå°åº)":"æ­éå¸ (æ­éå°åº)","Zhengzhou":"éå·å¸","Zhengzhou éå·å¸":"éå·å¸","Zhenjiang":"éæ±å¸","Zhenjiang éæ±å¸":"éæ±å¸","Zhongba":"ä»²å·´å¿","Zhongba ä»²å·´å¿":"ä»²å·´å¿","Zhongdian":"ä¸­ç¸å¿(è¿ªåºèæèªæ²»å·)","Zhongdian ä¸­ç¸å¿(è¿ªåº èæèªæ²»å·)":"ä¸­ç¸å¿(è¿ªåº èæèªæ²»å·)","Zhongshan":"ä¸­å±±å¸","Zhongshan ä¸­å±±å¸":"ä¸­å±±å¸","Zhongwei":"ä¸­å«å¸ãä¸­å®å¿ãæµ·åå¿(ä¸­å«å°åº)","Zhongwei ä¸­å«å¸ãä¸­å®å¿ãæµ·åå¿ (ä¸­å«å°åº)":"ä¸­å«å¸ãä¸­å®å¿ãæµ·åå¿ (ä¸­å«å°åº)","Zhoukou":"å¨å£å¸","Zhoukou å¨å£å¸":"å¨å£å¸","Zhoushan":"èå±±å¸","Zhoushan èå±±å¸":"èå±±å¸","Zhuhai":"ç æµ·å¸","Zhuhai ç æµ·å¸":"ç æµ·å¸","Zhumadian":"é©»é©¬åºå¸","Zhumadian é©»é©¬åºå¸":"é©»é©¬åºå¸","Zibo":"æ·åå¸","Zibo æ·åå¸":"æ·åå¸","Zigong":"èªè´¡å¸","Zigong èªè´¡å¸":"èªè´¡å¸","Zimbabwe":"æ´¥å·´å¸é¦","Zunyi":"éµä¹å¸","Zunyi éµä¹å¸":"éµä¹å¸","Ãvila":"é¿ç»´æ"};
ilib.data.phoneres_zh_Hant = {"Aachen":"äºç","Aachen-KornelimÃ¼nster":"äºç-ç§å§å©ææ¯ç¹","Aberdeen":"é´¨å·´ç¸","Alabama":"äºæå·´é¦¬å·","Alabama: Birmingham; Tuscaloosa; western and central Alabama":"äºæå·´é¦¬å·ï¼ä¼¯æç¿°ï¼Tuscaloosaï¼äºæå·´é¦¬å·è¥¿é¨åä¸­é¨","Alabama: Huntsville":"äºæå·´é¦¬å·ï¼Huntsville","Albania":"é¿ç¾å·´å°¼äº","Alberta":"äºä¼¯é","Alberta, Canada":"å æ¿å¤§äºä¼¯é","Algeria":"é¿ç¾åå©äº","AlmerÃ­a":"é¿ç¾æ¢éäº","Amer. Samoa":"ç¾å±¬è©æ©äº","American Samoa":"ç¾å±¬è©æ©äº","Andorra":"å®éç¾","Antigua and Barbuda":"å®æçåå·´ä½é","Antigua/Barbuda":"å®æç/å·´ä½é","Arizona":"äºå©æ¡é£å·","Arizona: Glendale, Sun City, Buckeye, Peoria, western Phoenix suburbs":"äºå©æ¡é£å·ï¼Glendale, Sun City, Buckeye, Peoria, Phoenix è¥¿é¨éå","Arizona: Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, eastern Phoenix suburbs":"äºå©æ¡é£å·ï¼Mesa, Scottsdale, Chandler, Gilbert, Tempe, Queen Creek, é³³å°åæ±é¨éå","Arizona: Phoenix":"äºå©æ¡é£å·ï¼Ã¯Â»ÃÂ³ÃÂ·","Armenia":"äºç¾å°¼äº","Armenia, Nagorno-Karabakh":"é¿å¡æçï¼ç´æç¾è«¾ï¼å¡æå·´èµ«","Aruba":"é¿é­¯å·´","Ascension Island":"é¿æ£®æ¾å³¶","Australia":"æ¾³å¤§å©äº","Australia, Christmas Island, Cocos Islands":"æ¾³å¤§å©äºï¼åºéå·´æ¯ï¼ç§ç§æ¯ç¾¤å³¶","Austria":"å¥§å°å©","Azerbaijan, Nagorno-Karabakh":"é¿å¡æçï¼ç´æç¾è«¾ï¼å¡æå·´èµ«","BVIs":"è±å±¬ç¶­ç¾äº¬ç¾¤å³¶","Bahamas":"å·´åé¦¬","Bangalore":"ç­å ç¾ç¾","Bangalore, Bangalore":"ç­å ç¾ç¾ï¼ç­å ç¾ç¾","Bangladesh":"å­å æå","Barcelona":"å·´å¡ç¾é£","Bath":"å·´æ¯","Belarus":"ç½ä¿ç¾æ¯","Belgium":"æ¯å©æ","Belize":"ä¼¯å©è²","Benin":"è²å¯§","Bolivia":"ç»å©ç¶­äº","Bonn, Niederkassel-Mondorf":"æ³¢æ©ï¼ä¸å¡çç¾-èå¤å¤«","Bosnia and Herzegovina":"æ³¢æ¯å°¼äºåé»å¡å¥ç¶­é£","Botswana":"åè¨ç¦ç´","Bremen":"ä¸ä¾æ¢","Brighton":"å¸è³´é ","Bristol":"å¸éæ¯æ","British Columbia":"ä¸åé¡å¥å«æ¯äºç","British Columbia, Canada":"å æ¿å¤§ä¸åé¡å¥å«æ¯äºç","British Columbia: Vancouver, Abbotsford, Whistler, Chilliwack":"ä¸åé¡å¥å«æ¯äºçï¼æº«å¥è¯, Abbotsford, Whistler, Chilliwack","British Indian Ocean":"è±å±¬å°åº¦æ´","British Indian Ocean Territory":"è±å±¬å°åº¦æ´é å°","Brunei":"æ±¶è","Brunei Darussalam":"æ±¶èéé­¯è©è­å","Buckingham":"ç½éæ¼¢","Bulgaria":"ä¿å å©äº","Burkina Faso":"å¸åºç´æ³ç´¢","Burma":"ç·¬ç¸","California":"å å©ç¦å°¼äºå·","California: East Bay Area, Oakland, Berkeley, Alameda":"å å©ç¦å°¼äºå·ï¼East Bay Area, Oakland, Berkeley, Alameda","California: Stockton, Modesto, Merced, Tracy, San Andreas and central California":"å å©ç¦å°¼äºå·ï¼æ¯å¾·é å¸, è«å¾·æ¯æ, é»å¡å¾·, ç¹é·è¥¿, èå®å¾·çäºæ¯åå å©ç¦å°¼äºä¸­é¨","Cambridge":"åæ©","Cameroon":"åéº¥é","Cantabria":"åå¡å¸éäº","Carrier Access":"åè950","Caymans":"éæ¼","Central African Republic":"ä¸­éå±åå","Central California: Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin":"å å©ç¦å©äºå·ä¸­é¨ï¼Concord, Pleasant Hill, Walnut Creek, Martinez, Livermore, Pleasanton, Dublin","Central California: Fresno, Visalia, Madera, Hanford, Tulare":"å å©ç¦å©äºå·ä¸­é¨ï¼Fresno, Visalia, Madera, Hanford, Tulare","Central California: Oakland, Berkeley, Alameda":"å å©ç¦å©äºå·ä¸­é¨ï¼Oakland, Berkeley, Alameda","Central California: Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond":"å å©ç¦å©äºå·ä¸­é¨ï¼Oakland, Fremont, Hayward, Castro Valley, Alameda, Berkeley, Richmond","Central California: Sacramento, Davis, Roseville":"å å©ç¦å©äºå·ä¸­é¨ï¼Sacramento, Davis, Roseville","Central California: Salinas, Hollister, Monterey, Carmel, Santa Cruz":"å å©ç¦å©äºå·ä¸­é¨ï¼Salinas, Hollister, Monterey, Carmel, Santa Cruz","Central California: San Francisco":"å å©ç¦å©äºå·ä¸­é¨ï¼èéå±±","Central California: San Francisco, Marin County":"å å©ç¦å©äºå·ä¸­é¨ï¼èéå±±, Marin County","Central California: San Jose":"å å©ç¦å©äºå·ä¸­é¨ï¼ÃÂºÃÃÃ·","Central California: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy":"å å©ç¦å©äºå·ä¸­é¨ï¼San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy","Central California: San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, southern San Francisco suburbs":"å å©ç¦å©äºå·ä¸­é¨ï¼San Mateo, Palo Alto, Redwood City, Menlo Park, Mountain View, San Franciscoåé¨éå","Central Coastal California: Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley":"å å©ç¦å©äºå·ä¸­é¨æµ·å²¸ï¼Ventura, San Luis Obispo, Santa Barbara, Oxnard, Simi Valley","Central Colorado: Denver, Boulder, Longmont, Aurora":"ç§ç¾æå¤å·ä¸­é¨ï¼ä¸¹ä½,Boulder, Longmont, Aurora","Central Eastern Florida: Orlando, Cocoa Beach, St Cloud":"ä½ç¾ééå·æ±ä¸­é¨ï¼Orlando, Cocoa Beach, St Cloud","Central Eastern Florida: Orlando, Florida, St. Cloud":"ä½ç¾ééå·æ±ä¸­é¨ï¼å¥§è­å¤, ä½ç¾éé, St. Cloud","Central Eastern Florida: Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart":"ä½ç¾ééå·æ±ä¸­é¨ï¼Vero Beach, Port Saint Lucie, Fort Pierce, Sebastian, Stuart","Central Eastern Louisiana: Baton Rouge, Donaldsonville, New Roads, White Castle":"è·¯ææ¯å®é£å·æ±ä¸­é¨ï¼Baton Rouge, Donaldsonville, New Roads, White Castle","Central Eastern Tennessee: Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood":"ç°ç´è¥¿å·æ±ä¸­é¨ï¼Knoxville, Gatlinburg, Newport, Jefferson City, Oak Ridge, Rockwood","Central Florida: Gainesville, Ocala, Inverness, Dunnellon":"ä½ç¾ééå·ä¸­é¨ï¼Gainesville, Ocala, Inverness, Dunnellon","Central Florida: St Petersburg, Dunedin":"ä½ç¾ééå·ä¸­é¨ï¼St Petersburg, Dunedin","Central Florida: Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar":"ä½ç¾ééå·ä¸­é¨ï¼Tampa, Temple Terrace, Plant City, Pasco County, Oldsmar","Central Georgia: Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry":"å¬æ²»äºå·ä¸­é¨ï¼Macon, Warner Robins, Swainsboro, Wadley, Milledgeville, Perry","Central Illinois: Springfield, Champaign Decatur, Urbana, Lincoln":"ä¼å©è«¾ä¼å·ä¸­é¨ï¼Springfield, Champaign Decatur, Urbana, Lincoln","Central Indiana: Indianapolis, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove":"å°ç¬¬å®ç´å·ä¸­é¨ï¼å°ç¬¬å®ç´æ³¢å©æ¯, Carmel, Fishers, Noblesville, Greenwood, Mooresville, Beech Grove","Central Indiana: Lafayette, Marion, Muncie, Richmond":"å°ç¬¬å®ç´å·ä¸­é¨ï¼Lafayette, Marion, Muncie, Richmond","Central Iowa: Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield":"æè·è¯å·ä¸­é¨ï¼Mason City, Oskaloosa, Creston, Pella, Ottumwa, Britt, Clear Lake, Fairfield","Central Minnesota: St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton":"æå°¼èéå·ä¸­é¨ï¼St. Cloud, Alexandria, Morris, Hutchinson, Sandstone, Appleton","Central North Georgia: Marietta, Cedartown, Gainesville, Atlanta suburbs":"å¬æ²»äºå·ä¸­åé¨ï¼Marietta, Cedartown, Gainesville, äºç¹è­å¤§éå","Central Oklahoma: Oklahoma City, Stillwater, Edmond, Norman, Shawnee, Chickasha":"ä¿åæä½é¦¬å·ä¸­é¨ï¼ä¿åæä½é¦¬å, Stillwater, Edmond, Norman, Shawnee, Chickasha","Central South Carolina: Columbia, Rock Hill, Sumter, Aiken":"åå¡ç¾ä¾ç´å·ä¸­é¨ï¼Columbia, Rock Hill, Sumter, Aiken","Central Southern Quebec, Canada: Laval, Montreal suburbs":"å æ¿å¤§é­ååä¸­åé¨ï¼Laval, èç¹å©ç¾éå","Central Texas: Austin, San Marcos, Lampasas, Bastrop, Milam":"å¾·åè©æ¯å·ä¸­é¨ï¼Austin, San Marcos, Lampasas, Bastrop, Milam","Central Western Illinois: Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg":"ä¼å©è«¾ä¼å·ä¸­è¥¿é¨ï¼Peoria, Bloomington-Normal, Moline, Rock Island, Galesburg","Central and Southeastern New Jersey: Atlantic City, Trenton":"æ°æ¾¤è¥¿å·æ±åé¨Atlantic City, Trenton","Central and Southeastern Ohio: Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens":"ä¿äº¥ä¿å·æ±åé¨ï¼Columbus, Newark, Lancaster, Delaware, Mt. Vernon, Marion, Washington C.H., Marietta, Portsmouth, Cambridge, Zanesville, Coshocton, Stuebenville, Athens","Central and Southeastern Texas: Nacogdoches, Lufkin, Conroe, Huntsville":"å¾·åè©æ¯å·ä¸­é¨åæ±åé¨ï¼Nacogdoches, Lufkin, Conroe, Huntsville","Chennai":"éå¥","Chennai, Chennai":"éå¥ï¼éå¥","China":"ä¸­å","Ciudad Real":"é·é¿ç¾å","Colombia":"å¥å«æ¯äº","Colorado":"ç§ç¾æå¤å·","Commonwealth of Dominica":"å¤ç±³å°¼åå±åå","Comoros":"ç§æ©ç¾","Connecticut: Bridgeport, Danbury, New Haven, Waterbury, Southwestern Connecticut":"åº·æ¶çæ ¼å·ï¼å¸éå¥æ³¢ç¹, ä¸¹ä¼¯é, ç´åè¬å¸, æ²ç¹ä¼¯éï¼åº·æ¶çæ ¼å·è¥¿åé¨","Connecticut: Bristol, Hartford, Norwich and northern and eastern Connecticut":"åº·æ¶çæ ¼å·ï¼Bristol, Hartford, Norwichååº·æ¶çæ ¼å·æ±åé¨","Cook Islands":"åº«åç¾¤å³¶","Cordoba":"ç§ç¾å¤ç¦","Costa Rica":"å¥æ¯å¤§é»å ","Coventry":"é«é²å°å©","Croatia":"åç¾å°äº","Czech Republic":"æ·åå±åå","D.R.":"å¤ç±³å°¼å å±åå","DRC":"åææ°ä¸»å±åå","Delaware":"ç¹æè¯å·","Democratic Republic of the Congo":"åææ°ä¸»å±åå","Denmark":"ä¸¹éº¥","Dir. Assistance":"æ¥èå°","Directory Assistance Applications":"æ¥èå°æç¨ç¨åº","Dominican Republic":"å¤ç±³å°¼å å±åå","Dover":"å¤ä½ç¾","Dresden":"å¾·ç´¯æ¯é ","DÃ¼sseldorf":"æå¡ç¾å¤å¤«","E Arkansas":"é¿è¯è²æ±é¨","E Florida":"ä½ç¾ééå·æ±é¨ï¼","E Iowa":"æè·è¯å·æ±é¨","E Kansas":"å ªè©æ¯å·æ±é¨","E Kentucky":"è¯å¡åºå·æ±é¨","E Louisiana":"è·¯ææ¯å®é£å·æ±é¨","E Maryland":"é¦¬éè­å·æ±é¨","E Massachusetts":"é¦¬è©è«¸å¡å·æ±é¨","E Nebraska":"å§å¸ææ¯å æ±é¨","E Ontario":"å®å¤§ç¥æ±é¨","E South Carolina":"åå¡ç¾ä¾ç´å·æ±é¨","E Tennessee":"ç°ç´è¥¿å·æ±é¨","E Washington":"è¯çé å·æ±é¨","E Wisconsin":"å¨æ¯åº·æå·æ±é¨","East Central Minnesota: St Paul, Lindstrom, Red Wing, Hastings":"æå°¼èéå·ä¸­æ±é¨ï¼St Paul, Lindstrom, Red Wing, Hastings","East Central Missouri: St. Charles, Chesterfield, Union, De Soto, Troy":"å¯èéå·ä¸­æ±é¨ï¼St. Charles, Chesterfield, Union, De Soto, Troy","East Central New Jersey: New Brunswick, Neptune, Freehold, Lakewood":"æ°æ¾¤è¥¿å·æ±ä¸­é¨ï¼New Brunswick, Neptune, Freehold, Lakewood","East Timor":"æ±å¸æ±¶","Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"é¿è¯è²æ±é¨ï¼Texarkana, Jonesboro, Pine Bluff","Eastern Iowa: Cedar Rapids, Waterloo, Burlington, Iowa City":"æè·è¯å·æ±é¨ï¼Cedar Rapids, Waterloo, Burlington, Iowa City","Eastern Iowa: Davenport, Dubuque, Bettendorf, Decorah, Clinton":"æè·è¯å·æ±é¨ï¼Davenport, Dubuque, Bettendorf, Decorah, Clinton","Eastern Kansas: Kansas City, Overland Park, Paola, Leavenworth":"å ªè©æ¯å·æ±é¨ï¼å ªè©æ¯å·å, Overland Park, Paola, Leavenworth","Eastern Kentucky: Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville":"è¯å¡åºå·æ±é¨ï¼Ashland, Hazard, Somerset, London, Corbin, Pikeville, Maysville","Eastern Maryland: Baltimore, Annapolis, Salisbury":"é¦¬éè­æ±é¨ï¼Baltimore, Annapolis, Salisbury","Eastern Massachusetts: Boston, Cambridge":"é¦¬è©è«¸å¡å·æ±é¨ï¼æ³¢å£«é ï¼åæ©","Eastern Massachusetts: Saugus, Norwood, Waltham, Woburn, Boston suburbs":"é¦¬è©è«¸å¡å·æ±é¨ï¼Saugus, Norwood, Waltham, Woburn, æ³¢å£«é éå","Eastern Nebraska: Omaha, Lincoln, Norfolk, Superior":"å§å¸ææ¯å æ±é¨ï¼Omaha, Lincoln, Norfolk, Superior","Eastern Ontario, Canada: Ottawa":"å æ¿å¤§å®å¤§ç¥æ±é¨ï¼æ¸¥å¤ªè¯","Eastern Ontario, Canada: Ottawa, Kingston":"å æ¿å¤§å®å¤§ç¥æ±é¨ï¼Ottawa, Kingston","Eastern South Carolina: Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island":"åå¡ç¾ä¾ç´å·æ±é¨ï¼Florence, Myrtle Beach, Charleston, Isle of Palms, Hilton Head Island","Eastern Tennessee: Bristol, Johnson City, Kingsport; Chattanooga, Cleveland":"ç°ç´è¥¿å·æ±é¨ï¼Bristol, Johnson City, Kingsport; Chattanooga, Cleveland","Eastern Washington: Spokane, the Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg":"è¯çé å·æ±é¨ï¼Spokane, the Tri-Cities, Yakima, Wenatchee, Walla Walla, Pullman, Ellensburg","Eastern Wisconsin: Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac":"å¨æ¯åº·æå·æ±é¨ï¼Appleton, Sheboygan, Oshkosh, Green Bay, Manitowoc, Fond du Lac","Ecuador":"åçå¤ç¾","Edinburgh":"æä¸å ¡","El Salvador":"è©ç¾ç¦å¤","Equatorial Guinea":"èµ¤éå¹¾å§äº","Eritrea":"åç«ç¹éäº","Essen (Oldenburg)":"åæ£®ï¼å¥§ç¾ç»å ¡ï¼","Estonia":"ææ²å°¼äº","Ethiopia":"è¡£ç´¢æ¯äº","European Telephony":"æ­æ´²é»è©±","European Telephony Numbering Space":"æ­æ´²é»è©±èç¢¼ç©ºé","FYRoM":"é¦¬å¶é å±ååï¼ååæ¯æå¤«ï¼","Falkland Islands":"ç¦åè­ç¾¤å³¶","Falklands":"ç¦åè­ç¾¤å³¶","Faroe Islands":"æ³ç¾ç¾¤å³¶","Federated States of Micronesia":"å¯åç¾å°¼è¥¿äºè¯é¦","Fiji":"ææ¿","Finland":"è¬è­","Finland, Ãland Islands":"è¬è­ï¼å¥§è­ç¾¤å³¶","Florida":"ä½ç¾ééå·","Florida: Miami-Dade County, Florida Keys":"ä½ç¾ééå·ï¼Miami-Dade County, Florida Keys","Florida: Palm Beach, West Palm Beach, Boca Raton, Boynton Beach, Delray Beach, Belle Glade":"ä½ç¾ééå·ï¼Palm Beach, West Palm Beach, Boca Raton, Boynton Beach, Delray Beach, Belle Glade","Former Yugoslav Republic of Macedonia":"é¦¬å¶é å±ååï¼ååæ¯æå¤«ï¼","France":"æ³å","Frankfurt":"æ³è­åç¦","Frankfurt am Main, Offenbach am Main":"ç¾å æ²³çæ³è­åç¦ï¼ç¾å æ²³çå¥§è¬å·´èµ«","Freephone":"åè²»é»è©±","French Guiana":"æ³å±¬å­äºé£","French Polynesia":"æ³å±¬æ³¢å©å°¼è¥¿äº","Gambia":"å²¡æ¯äº","Georgia":"å¬æ²»äºå·","Georgia: Atlanta":"å¬æ²»äºå·ï¼äºç¹è­å¤§","Germany":"å¾·å","Ghana":"å ç´","Gibraltar":"ç´å¸ç¾é","Global Mobile Satellite System":"å¨çç§»åè¡æç³»çµ±","Global Satellite":"å¨çè¡æ","Granada":"æ ¼æç´é","Greece":"å¸è","Greenland":"æ ¼éµè­","Grenada":"æ ¼æç´é","Guadalajara":"çéæåæ","Guadaloupe Island":"å¥å¾·æ®æ´å³¶","Guadeloupe":"çå¾·ç¾æ®å³¶","Guadeloupe, Saint BarthÃ©lemy, Saint Martin":"çå¾·ç¾æ®å³¶ï¼èå·´æ³°åç±³ï¼èé¦¬ä¸","Guam":"éå³¶","Guatemala":"å±å°é¦¬æ","Guinea":"ç¿å§äº","Guinea-Bissau":"å¹¾å§äºæ¯ç´¹","Guyana":"å­äºé£","GÃ¶ttingen":"æ ¼ä¸æ ¹","Hamburg":"æ¼¢å ¡","Hamburg, Norderstedt, Neu Wulmstorf":"æ¼¢å ¡ï¼è«¾å¾·æ½æ³°ç¹ï¼ç´æ­¦ç¾å§æ¯æå¤«","Hannover":"æ¼¢è«¾å¨","Honduras":"å®é½ææ¯","Hyderabad East (Ghatkeswar), Hyderabad":"æ±æµ·å¾æå·´ï¼Ghatkeswarï¼ï¼æµ·å¾æå·´","Hyderabad West (Shamshabad), Hyderabad":"è¥¿æµ·å¾æå·´ï¼çèæ³¢çï¼ï¼æµ·å¾æå·´","ITPCS":"åéé»è¨åäººéè¨æåï¼ITPCSï¼","Iceland":"å°å³¶","Idaho":"æéè·å·","Illinois":"ä¼å©è«¾ä¼å·","Illinois: Aurora, Naperville, western Chicago":"ä¼å©è«¾ä¼ï¼Aurora, Naperville, èå å¥è¥¿é¨","Illinois: Aurora, Naperville, western Chicago suburbs":"ä¼å©è«¾ä¼å·ï¼Aurora, Naperville, èå å¥è¥¿é¨éå","Illinois: Chicago":"ä¼å©è«¾ä¼ï¼Chicago","Illinois: Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, western Chicago suburbs":"ä¼å©è«¾ä¼å·ï¼Chicago Heights, Evergreen Park, Tinley Park, Elmwood Park, Cicero, Oak Forest, Oak Park, Berwyn, èå å¥è¥¿é¨éå","Inbound Intl.":"æå¥çåéé»è©±ä¾é»","Inbound international calls for carrier-specific services":"ééç¹å®æä¾åæåæå¥çåéé»è©±","Indiana":"å°ç¬¬å®ç´å·","Indiana: Southern Indiana, including Bloomington, Evansville, Jeffersonville, New Albany, and Terre Haute).":"å°ç¬¬å®ç´å·ï¼Southern Indiana, including Bloomington, Evansville, Jeffersonville, New Albany, and Terre Haute).","Indonesia":"å°åº¦å°¼è¥¿äº","Inmarsat":"åéç§»åè¡æçµç¹","International National Rate Service":"åéåå§è²»çæå","International Networks":"åéç¶²è·¯","International Networks (country code)":"åéç¶²è·¯ï¼åå®¶ä»£ç¢¼ï¼","International Premium Rate Service":"åé900åèæå","Iowa":"æè·è¯å·","Ireland":"æç¾è­","Islands of RÃ©union and Mayotte":"çå°¼æ±ªåé¦¬ç´ç¹å³¶","Israel, Palestinian Authority":"ä»¥è²åï¼å·´åæ¯å¦æ¬åæ©æ§","Italy":"ç¾©å¤§å©","Italy, Vatican City":"ç¾©å¤§å©ï¼æ¢µèå²¡å","Jamaica":"çè²·å ","Jordan":"ç´æ¦","Kansas":"å ªè©æ¯å·","Kansas: Wichita, Augusta, El Dorado, Mulvane":"å ªè©æ¯å·ï¼Wichita, Augusta, El Dorado, Mulvane","Karlsruhe":"å¡ç¾æ¯é­¯å","Karlsruhe, Eggenstein-Leopoldshafen, Pfinztal-Berghausen (Baden), Rheinstetten, Stutensee,":"å¡ç¾æ¯é­¯åï¼Eggenstein-Leopoldshafenï¼æ®è¬è¨å¡ç¾-Berghausenï¼å·´ç»ï¼ï¼èèµæ½æ³°æ»ï¼æ½åæ»å¡ï¼","Kenya":"è¯å°¼äº","Kiel":"åºç¾","Kiribati":"åºè£å·´æ¯","Kolkata":"å ç¾åç­","Kolkata, Kolkata":"å ç¾åç­ï¼å ç¾åç­","Konstanz, Reichenau":"åº·æ¯å¦è¨ï¼è³´æ­ç","Kyrgyzstan":"åç¾åæ¯æ¯å¦","LD Carrier":"é·éé»è©±æä¾å","La Rioja":"æéå¥§å","Laos":"èæ¾","Las Palmas":"ææ¯å¸ç¾é¦¬æ¯","Latvia":"æè«ç¶­äº","Leeds":"å©è²","Leicester":"èæ¯ç¹","Leipzig":"èæ¯é«","Lesotho":"èç´¢æ","LeÃ³n":"èæ","Liberia":"å©æ¯éäº","Libya":"å©æ¯äº","Lichtenstein":"åæ¯æ¦æ¯ç»","Lichtenstein, Engstingen":"åæ¯æ¦æ¯ç»ï¼æ©æ¯å»·æ ¹","London":"å«æ¦","Long Distance Carrier Use":"ä¾é·éé»è©±æä¾åä½¿ç¨","Louisiana: New Orleans, Metairie, Kenner":"è·¯ææ¯å®é£å·ï¼æ°å¥§ç¾è¯, Metairie, Kenner","Luxembourg":"ç§æ£®å ¡","Macau":"æ¾³é","Madagascar":"é¦¬éå æ¯å ","Madrid":"é¦¬å¾·é","Maine":"ç·¬å å·","Malaga":"é¦¬æå ","Malawi":"é¦¬æç¶­","Malaysia":"é¦¬ä¾è¥¿äº","Maldives":"é¦¬ç¾å°å¤«","Mali":"é¦¬é","Malta":"é¦¬è³ä»","Manchester":"æ¼å¾¹æ¯ç¹","Manitoba":"é¦¬å°¼æå·´","Manitoba, Canada":"é¦¬å°¼æå·´ï¼å æ¿å¤§","Marshall Islands":"é¦¬ç´¹ç¾ç¾¤å³¶","Martinique":"é¦¬æå°¼å","Martinique Island":"é¦¬æå°¼åå³¶","Maryland":"é¦¬éè­å·","Massachusetts":"é¦¬è©è«¸å¡å·","Mauritania":"æ¯éå¡å°¼äº","Mexico City, Federal District":"å¢¨è¥¿å¥åè¯é¦å","Micronesia":"å¯åç¾å°¼è¥¿äº","Minnesota":"æå°¼èéå·","Minnesota: Bloomington, Minnetonka, Chaska, Minneapolis":"æå°¼èéå·ï¼Bloomington, Minnetonka, Chaska, Minneapolis","Minnesota: Maple Grove, Monticello, Elk River, Fridley, Blaine, northwest Minneapolis":"æå°¼èéå·ï¼Maple Grove, Monticello, Elk River, Fridley, Blaine, æå°¼é¿æ³¢å©æ¯è¥¿å","Minnesota: Minneapolis, Fort Snelling, St Anthony, Richfield":"æå°¼èéå·ï¼Minneapolis, Fort Snelling, St Anthony, Richfield","Missouri":"å¯èéå·","Missouri: Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark and eastern Missouri excluding St. Louis":"å¯èéå·ï¼Columbia, Jefferson City, Hannibal, Cape Girardeau, Poplar Bluff, Farmington, Park Hills, Lake Ozark åå¯èéå·æ±é¨ï¼ä¸å« St. Louis","Missouri: St. Louis, Florissant, Crestwood, Affton":"å¯èéå·ï¼St. Louis, Florissant, Crestwood, Affton","Moldova":"æ©ç¾å¤ç¦","Monaco":"æ©ç´å¥","Mumbai":"å­è²·","Mumbai, Mumbai":"å­è²·ï¼å­è²·","Murcia":"è«è¥¿äº","N Alberta":"äºä¼¯éåé¨","N California":"å å©ç¦å©äºå·åé¨","N Georgia":"å¬æ²»äºåé¨","N Illinois":"ä¼å©è«¾ä¼å·åé¨","N Kansas":"å ªè©æ¯å·åé¨","N Minnesota":"æå°¼èéå·åé¨","N Texas":"å¾·åè©æ¯å·åé¨","N Virginia":"å¼åå°¼äºå·åé¨","NE Alabama":"äºæå·´é¦¬å·æ±åé¨","NE California":"å å©ç¦å©äºå·æ±åé¨","NE Florida":"ä½ç¾ééå·æ±åé¨","NE Illinois":"ä¼å©è«¾ä¼å·æ±åé¨","NE Indiana":"å°å°å®é£å·æ±åé¨","NE Massachusetts":"é¦¬è©è«¸å¡å·æ±åé¨","NE New York":"ç´ç´å·æ±åé¨","NE North Carolina":"åå¡ç¾èç´å·æ±åé¨","NE Ohio":"ä¿äº¥ä¿æ±åé¨","NE Oklahoma":"ä¿åæè·é¦¬å·æ±åé¨","NE Pennsylvania":"è³å¤æ³å°¼äºå·æ±åé¨","NE Texas":"å¾·åè©æ¯å·æ±åé¨","NW Arizona":"äºå©æ¡é£å·è¥¿åé¨","NW California":"å å©ç¦å°¼äºå·è¥¿åé¨","NW Colorado":"ç§ç¾æå¤å·è¥¿åé¨","NW Florida":"ä½ç¾ééå·è¥¿åé¨","NW Indiana":"å°ç¬¬å®ç´å·è¥¿åé¨","NW New Jersey":"æ°æ¾¤è¥¿å·è¥¿åé¨","NW Oregon":"ä¿åå²¡å·è¥¿åé¨","NW Pennsylvania":"è³å¤æ³å°¼äºå·è¥¿åé¨","Namibia":"ç´ç±³æ¯äº","National Rate":"å¨åè²»ç","Nauru":"çé­¯","Navarra":"ç´ç¦æ","Nebraska":"å§å¸ææ¯å å©ç¦å©äºå·","Nepal":"å°¼æ³ç¾","Netherlands":"è·è­","Netherlands Antilles":"è·å±¬å®çåæ¯","Nevada":"å§è¯éå·","Nevada: Clark County, Las Vegas, Henderson, Boulder City":"å§è¯éå·ï¼Clark County, Las Vegas, Henderson, Boulder City","Nevada: Reno, Elko, Ely":"å§è¯éå·ï¼Reno, Elko, Ely","New Brunswick":"æ°ä¸å«çå","New Brunswick, Canada":"å æ¿å¤§æ°ä¸å«çå","New Caledonia":"æ°åè£å¤å°¼äº","New Hampshire":"æ°ç½å¸ä»ç¾å·","New Jersey":"æ°æ¾¤è¥¿å·","New Jersey: Hackensack, Jersey City, Hoboken, Bayonne, Ridgewood, Union City, Teaneck, New Milford, and northeast New Jersey":"æ°æ¾¤è¥¿å·ï¼èµ«è¯è², æ¾¤è¥¿å, éåè¯, å·´ç´ç´, éå¥ä¼å¾·, è¯åå¸, æå°¼å, æ°ç±³ç¾ç¦å¾·åæ°æ¾¤è¥¿å·æ±åé¨","New York":"ç´ç´å·","New York: Binghamton, Elmira, Bath, Norwich, Oneonta, Ithaca":"ç´ç´å·ï¼Binghamton, Elmira, Bath, Norwich, Oneonta, Ithaca","New York: Manhattan":"ç´ç´å·ï¼æ¼åé ","New York: Manhattan except for Marble Hill":"ç´ç´å·ï¼æ¼åé ï¼ä¸å«Marble Hill","New York: Nassau County, Hempstead, Elmont":"ç´ç´å·ï¼Nassau County, Hempstead, Elmont","New York: New York City":"ç´ç´å·ï¼ç´ç´å¸","New York: New York City, Marble Hill":"ç´ç´å·ï¼ç´ç´å¸ï¼Marble Hill","New York: Suffolk County":"ç´ç´å·ï¼Suffolk County","New York: Westchester County":"ç´ç´å·ï¼WestchesterÃÃ","New Zealand":"æ°è¥¿è­","Newfoundland":"ç´è¬è­","Newfoundland and Labrador, Canada: St. John's":"å æ¿å¤§ç´è¬è­èæå¸æå¤ç St. John's","Niger":"å°¼æ¥ç¾","Nigeria":"å°¼æ¥å©äº","Niue":"ç´å","Norfolk Island":"è«¾ç¦åå³¶","Norfolk Island, Australian Antarctic Territory":"è«¾ç¦åå³¶ï¼æ¾³å¤§å©äºåæ¥µé å°","North America and the Caribbean Islands":"åç¾åå åæ¯ç¾¤å³¶","North Carolina":"åå¡ç¾ä¾ç´å·","North Carolina: Greensboro, Winston-Salem, Wilkesboro, Roxboro, and northwest North Carolina":"åå¡ç¾ä¾ç´å·ï¼Greensboro, Winston-Salem, Wilkesboro, Roxboro, ååå¡ç¾ä¾ç´è¥¿åé¨","North Central Indiana: South Bend, Logansport, Elkhart, Warsaw, Nappanee":"å°ç¬¬å®ç´å·ä¸­åé¨ï¼South Bend, Logansport, Elkhart, Warsaw, Nappanee","North Central Iowa: Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola":"æè·è¯å·åä¸­é¨ï¼Des Moines, Ames, Fort Dodge, Jefferson, Algona, Indianola","North Central Missouri: Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany":"å¯èéå·ä¸­åé¨ï¼Sedalia, Kirksville, Macon, Marshall, Trenton, Maryville, Bethany","North Central New York: Syracuse, New York, Utica, Watertown":"ç´ç´å·ä¸­åé¨ï¼Syracuse, ç´ç´, Utica, Watertown","North Central North Carolina: Raleigh, Durham, Chapel Hill, Oxford, Goldsboro":"åå¡ç¾èç´å·ä¸­åé¨ï¼Raleigh, Durham, Chapel Hill, Oxford, Goldsboro","North Central Tennessee: Nashville, Murfreesboro, Springfield, Lebanon, Dickson":"ç°ç´è¥¿å·ä¸­åé¨ï¼Nashville, Murfreesboro, Springfield, Lebanon, Dickson","North Central Virginia: Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester":"å¼åå°¼äºå·åä¸­é¨ï¼Roanoke, Fredericksburg, Blacksburg, Harrisonburg, Winchester","North Dakota":"åéç§ä»å·","North Korea":"æé®®","Northeast France":"æ³åæ±åé¨","Northeastern Florida: Jacksonville, St. Augustine, Starke, Green Cove Springs":"ä½ç¾ééå·æ±åé¨ï¼Jacksonville, St. Augustine, Starke, Green Cove Springs","Northeastern Illinois: Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, Chicago suburbs":"ä¼å©è«¾ä¼å·æ±åé¨ï¼Arlington Heights, Buffalo Grove, Wauconda, Waukegan, Des Plaines, èå å¥éå","Northeastern Indiana: Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash":"å°ç¬¬å®ç´å·æ±åé¨ï¼Fort Wayne, New Haven, Decatur, Angola, Huntington, Wabash","Northeastern Massachusetts: Fitchburg, Peabody":"é¦¬è©è«¸å¡å·æ±åé¨ï¼Fitchburg, Peabody","Northeastern New York: Albany, Schenectady, Plattsburgh, Saranac Lake":"ç´ç´å·æ±åé¨ï¼Albany, Schenectady, Plattsburgh, Saranac Lake","Northeastern North Carolina: Greenville, Kitty Hawk, Rocky Mount":"åå¡ç¾èç´å·æ±åé¨ï¼Greenville, Kitty Hawk, Rocky Mount","Northeastern Ohio: Akron, Canton, Youngstown, Warren":"ä¿äº¥ä¿æ±åé¨ï¼Akron, Canton, Youngstown, Warren","Northeastern Oklahoma: Tulsa, Bartlesville, McAlester, Muskogee, Henryetta":"ä¿åæè·é¦¬å·æ±åé¨ï¼Tulsa, Bartlesville, McAlester, Muskogee, Henryetta","Northeastern Pennsylvania: Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg":"è³å¤æ³å°¼äºå·æ±åé¨ï¼Scranton, Williamsport, Wilkes-Barre, Nanticoke, Hazleton, Pottsville, Sunbury, Danville, Bloomsburg, Stroudsburg","Northeastern Texas: Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage":"å¾·åè©æ¯å·æ±åé¨ï¼Tyler, Sherman, Longview, Marshall, Palestine, Jacksonville, Carthage","Northern Alberta, Canada: Edmonton, Jasper, Grande Prairie, Peace River":"å æ¿å¤§äºä¼¯éåé¨ï¼Edmonton, Jasper, Grande Prairie, Peace River","Northern California coast":"å å©ç¦å©äºå·åé¨æµ·å²¸","Northern Illinois: Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake":"ä¼å©è«¾ä¼å·åé¨ï¼Rockford, La Salle, De Kalb, Freeport, Joliet, Plainfield, Crystal Lake","Northern Ireland":"åæç¾è­","Northern Kansas: Colby, Topeka, Salina, Manhattan, Lawrence":"å ªè©æ¯å·åé¨ï¼Colby, Topeka, Salina, Manhattan, Lawrence","Northern Mariana Islands":"åé¦¬éäºç´ç¾¤å³¶","Northern Minnesota: Duluth, Thief River Falls, Brainerd, International Falls":"æå°¼èéå·åé¨ï¼Duluth, Thief River Falls, Brainerd, International Falls","Northern Ohio: Cleveland suburbs, Elyria, Lorain, Oberlin, Ashtabula":"ä¿äº¥ä¿åé¨ï¼Cleveland éå, Elyria, Lorain, Oberlin, Ashtabula","Northern Texas: Vernon, Wichita Falls, Denton, Gainesville, Decatur":"å¾·åè©æ¯å·åé¨ï¼Vernon, Wichita Falls, Denton, Gainesville, Decatur","Northern Virginia: Alexandria, Arlington, Fairfax, Prince William, eastern Loudoun counties":"å¼åå°¼äºå·åé¨ï¼Alexandria, Arlington, Fairfax, Prince William, Loudoun æ±é¨ç¸£","Northern and Eastern Alabama: Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston":"äºæå·´é¦¬å·åé¨åæ±é¨Huntsville, Decatur, Cullman, Gadsden, Florence, Anniston","Northern and Eastern Florida: Daytona Beach, Lake City, Live Oak, Crescent City":"ä½ç¾ééå·æ±åé¨Daytona Beach, Lake City, Live Oak, Crescent City","Northern and Western Arizona: Flagstaff, Kingman, Prescott, Yuma":"äºå©æ¡é£å·è¥¿åé¨ï¼Flagstaff, Kingman, Prescott, Yuma","Northern and Western Colorado: Aspen, Durango, Grand Junction, Fort Collins":"ç§ç¾æå¤å·è¥¿åé¨ï¼Aspen, Durango, Grand Junction, Fort Collins","Northerneastern California: Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee":" å å©ç¦å©äºå·æ±åé¨ ï¼Redding, Chico, Davis, Placerville, Lake Tahoe, Susanville, Alturas, Truckee","Northwest California":"å å©ç¦å°¼äºå·è¥¿åé¨","Northwest France":"æ³åè¥¿åé¨","Northwest Indiana: Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso":"å°ç¬¬å®ç´å·è¥¿åé¨ï¼Gary, Chesterton, Crown Point, East Chicago, Hammond, Hobart, Merrillville, Michigan City, Portage, Valparaiso","Northwestern California: Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah":"å å©ç¦å°¼äºå·è¥¿åé¨ï¼Napa, Vallejo, Santa Rosa, Ukiah, Crescent City, Eureka, Ukiah","Northwestern Florida: Pensacola, Tallahassee, Panama City, the Florida panhandle":"ä½ç¾ééå·è¥¿åé¨ï¼Pensacola, Tallahassee, å·´æ¿é¦¬å, ä½ç¾ééç¹é·å°å¸¶","Northwestern New Jersey: Newark, Paterson":"æ°æ¾¤è¥¿å·è¥¿åé¨ï¼Newark, Paterson","Northwestern Oregon: Portland, Salem, Hillsboro, Beaverton":"ä¿åå²¡å·è¥¿åé¨ï¼Portland, Salem, Hillsboro, Beaverton","Northwestern Oregon: Portland, Salem, Hillsboro, St. Helens, Tillamook, Astoria":"ä¿åå²¡å·è¥¿åé¨ï¼æ³¢ç¹è­, Salem, Hillsboro, St. Helens, Tillamook, Astoria","Northwestern and Central Pennsylvania: Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium":"è³å¤æ³å°¼äºå·è¥¿ååä¸­é¨ï¼Erie, Warren, State College, Altoona, Johnstown, Meyersdale, Johnsonburg, St. Marys, Ridgway, DuBois, Emporium","Norway, Svalbard and Jan Mayen":"æªå¨ï¼æ¯ç¦ç¾å·´ç¹åæé¦¬å»¶å³¶","Nottingham":"è«¾ä¸æ¼¢","Nova Scotia and Prince Edward Island, Canada":"å æ¿å¤§æ°æ¯ç§èçåæå¾·è¯çå­å³¶","NÃ¼rnberg":"ç´å«å ¡","NÃ¼rnberg/FÃ¼rth":"ç´å«å ¡/è²ç¾ç¹","OCHA":"è¯ååäººéä¸»ç¾©äºååèª¿è¾¦å¬å®¤","Ohio: Cleveland":"ä¿äº¥ä¿ï¼åå©å¤«è­","Oklahoma":"ä¿åæä½é¦¬å·","Ontario: Toronto":"å®å¤§ç¥çï¼å¤å«å¤","Oregon":"ä¿åå²¡å·","Oregon: Eugene, Medford, Bend, Pendleton, Corvallis, Ontario, Burns":"ä¿åå²¡å·ï¼Eugene, Medford, Bend, Pendleton, Corvallis, Ontario, Burns","Palau":"å¸å","Palestinian Authority":"å·´åæ¯å¦æ°ææ¬åæ©æ§","Panama":"å·´æ¿é¦¬","Papua New Guinea":"å·´å¸äºæ°ç¿å§äº","Paris (Ile-de-France area)":"å·´é»ï¼å·´é»å¤§åï¼","Pennsylvania":"è³å¤æ³å°¼äºå·","Pennsylvania: Philadelphia":"è³å¤æ³å°¼äºå·ï¼è²»å","People's Republic of China":"ä¸­è¯äººæ°å±åå","Personal Comm.":"åäººéè¨","Personal Comm. Services":"åäººéè¨æå","Personal Communications Services":"åäººéè¨æå","Peru":"ç§é­¯","Philippines":"è²å¾è³","Pitcairn":"ç®ç¹è¯","Poland":"æ³¢è­","Premium Rate":"900åè","Premium-rate":"900åè","Premium-rate Telephone Service":"900åèé»è©±æå","Qatar":"å¡å¡ç¾","Quebec, Canada: Montreal, Ãle Perrot, Ãle Bizard":"å æ¿å¤§é­ååï¼èç¹å©ç¾, Ãle Perrot,  Ãle Bizard","Reading":"é·ä¸","Republic of China":"ä¸­è¯æ°å","Republic of Congo":"åæå±åå","Republic of Ireland":"æç¾è­å±åå","Rhode Island":"ç¾å¾å³¶å·","Romania":"ç¾é¦¬å°¼äº","Russia":"ä¿ç¾æ¯","Russia, Kazakhstan":"ä¿ç¾æ¯ï¼åè©åæ¯å¦","Rwanda":"ç§å®é","RÃ©union, Mayotte":"çå°¼æ±ªå³¶ï¼é¦¬ç´ç¹","S Alberta":"äºä¼¯éåé¨","S California":"åå å©ç¦å©äºå·","S Florida":"ä½ç¾ééå·åé¨","S Illinois":"ä¼å©è«¾ä¼å·åé¨","S Kansas":"å ªè©æ¯å·åé¨","S Minnesota":"æå°¼èéå·åé¨","S Texas":"å¾·åè©æ¯å·åé¨","S Virginia":"å¼åå°¼äºåé¨","SE Alabama":"äºæå·´é¦¬æ±åé¨","SE Arizona":"äºå©æ¡é£å·æ±åé¨","SE California":"å å©ç¦å©äºå·æ±åé¨","SE Colorado":"ç§ç¾æå¤æ±åé¨","SE Georgia":"å¬æ²»äºå·æ±åé¨","SE Louisiana":"è·¯ææ¯å®é£å·æ±åé¨","SE Massachusetts":"é¦¬è©è«¸å¡å·æ±åé¨","SE New Jersey":"æ°æ¾¤è¥¿å·æ±åé¨","SE New York":"ç´ç´å·æ±åé¨","SE North Carolina":"åå¡ç¾èç´å·æ±åé¨","SE Ohio":"ä¿äº¥ä¿å·æ±åé¨","SE Pennsylvania":"è³å¤æ³å°¼äºå·æ±åé¨","SE Texas":"å¾·åè©æ¯å·æ±åé¨","SE Wisconsin":"å¨æ¯åº·æå·æ±åé¨","SW Alabama":"äºæå·´é¦¬å·è¥¿åé¨","SW Florida":"ä½ç¾ééå·è¥¿åé¨","SW Georgia":"å¬æ²»äºå·è¥¿åé¨","SW Missouri":"å¯èéå·è¥¿åé¨","SW New Jersey":"æ°æ¾¤è¥¿å·è¥¿åé¨","SW Oklahoma":"ä¿åæè·é¦¬å·è¥¿åé¨","SW Pennsylvania":"è³å¤æ³å°¼äºå·è¥¿åé¨","SW Tennessee":"ç°ç´è¥¿å·è¥¿åé¨","SW Texas":"å¾·åè©æ¯å·è¥¿åé¨","SW Virginia":"å¼åå°¼äºå·è¥¿åé¨","Saint Helena":"èæµ·å«å¨","Saint Helena, Tristan da Cunha":"èèµ«åæ¿å³¶ï¼ç¹éæ¯å¦éåº«å°¼äºç¾¤å³¶","Saint Kitts and Nevis":"èåºè¨åå°¼ç¶­æ¯","Saint Lucia":"èç§è¥¿äº","Saint Pierre and Miquelon":"èç®åç¾åå¯åéå³¶","Saint Pierre and Miquelon Islands":"èç®åç¾åå¯åéå³¶","Saint Vincent and the Grenadines":"èææ£®ç¹åæ ¼æç´ä¸æ¯","Salamanca":"è©ææ¼å¡","Samoa":"è©æ©äº","San Marino":"èé¦¬åè«¾","Santa Cruz de Tenerife":"èåé­¯æ¯ç¹å§éè²»","Saskatchewan":"è©æ¯åå¾¹æº«ç","Saskatchewan, Canada":"å æ¿å¤§è©æ¯åå¾¹æº«ç","Saudi Arabia":"æ²çå°é¿æä¼¯","Senegal":"å¡å§å ç¾","Serbia":"å¡ç¾ç¶­äº","Seville":"å¡ç¶­å©äº","Seychelles":"å¡èç¾","Shared Cost":"åæ¤è²»ç¨","Shared Cost Service":"åæ¤è²»ç¨æå","Sheffield":"è¨­è²ç¾å¾·","Slovenia":"æ¯æ´æå°¼äº","Solomon Islands":"æç¾éç¾¤å³¶","Somalia":"ç´¢é¦¬å©äº","Somalia, Somaliland":"ç´¢é¦¬å©äºï¼ç´¢é¦¬å©äºè­","South Carolina":"åå¡ç¾ä¾ç´å·","South Carolina: Greenville, Spartanburg, Anderson, Upstate South Carolina":"åå¡ç¾ä¾ç´å·ï¼Greenville, Spartanburg, Anderson, åå¡ç¾ä¾ç´ä¸å·","South Central California: Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave":"å å©ç¦å©äºå·ä¸­åé¨ï¼Bakersfield, Lancaster, Santa Clarita, Palmdale, Mojave","South Central Florida: Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven":"ä½ç¾ééå·ä¸­åé¨ï¼Auburndale, Lakeland, Avon Park, Clewiston, Bartow, Sebring, Winter Haven","South Central North Carolina: Charlotte, Gastonia, Concord, Salisbury":"åå¡ç¾èç´å·ä¸­åé¨ï¼Charlotte, Gastonia, Concord, Salisbury","South Central Pennsylvania: Harrisburg, Gettysburg, Lancaster, York":"è³å¤æ³å°¼äºå·ä¸­åé¨ï¼Harrisburg, Gettysburg, Lancaster, York","South Dakota":"åéç§ä»å·","South Korea":"éå","Southeast France":"æ³åæ±åé¨","Southeastern Alabama: Montgomery, Auburn, Opelika, Dothan, Selma":"äºæå·´é¦¬æ±åé¨ï¼Montgomery, Auburn, Opelika, Dothan, Selma","Southeastern Arizona: Tucson, Nogales":"äºå©æ¡é£å·æ±åé¨ï¼Tucson, Nogales","Southeastern California: Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County":"å å©ç¦å©äºå·æ±åé¨ï¼Bishop, Ridgecrest, Barstow, Palm Springs, Indio, Imperial County","Southeastern Colorado: Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta":"ç§ç¾æå¤æ±åé¨ï¼Colorado Springs, Pueblo, Leadville, Trinidad, Rocky Ford, La Junta","Southeastern Georgia: Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas":"å¬æ²»äºå·æ±åé¨ï¼Savannah, Statesboro, Vidalia, Waycross, Brunswick, Douglas","Southeastern Louisiana: Houma, Slidell":"è·¯ææ¯å®é£å·æ±åé¨ï¼Houma, Slidell","Southeastern Massachusetts: Worcester, New Bedford":"é¦¬è©è«¸å¡å·æ±åé¨ï¼Worcester, New Bedford","Southeastern New York: Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville":"ç´ç´å·æ±åé¨ï¼Rockland, Poughkeepsie, Middletown, West Point, Newburgh, Catskills, Margaretville","Southeastern North Carolina: Fayetteville, Wilmington, Jacksonville, Lumberton":"åå¡ç¾èç´å·æ±åé¨ï¼Fayetteville, Wilmington, Jacksonville, Lumberton","Southeastern Pennsylvania: Allentown, Reading, Norristown, Chester":"è³å¤æ³å°¼äºå·æ±åé¨Allentown, Reading, Norristown, Chester","Southeastern Texas: Beaumont, Galveston, Port Arthur, Jasper":"å¾·åè©æ¯å·æ±åé¨ï¼Beaumont, Galveston, Port Arthur, Jasper","Southeastern Texas: Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange":"å¾·åè©æ¯å·æ±åé¨ï¼Wharton, Bryan, Bay City, College Station, Lake Jackson, La Grange","Southeastern Wisconsin: Racine, Kenosha, Menomonee Falls, Waukesha":"å¨æ¯åº·æå·æ±åé¨ï¼Racine, Kenosha, Menomonee Falls, Waukesha","Southern Alberta, Canada: Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks":"å æ¿å¤§äºä¼¯éåé¨Calgary, Banff, Red Deer, Medicine Hat, Lethbridge, Brooks","Southern California: Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County":"å å©ç¦å©äºå·åé¨ï¼Anaheim, Santa Ana, Huntington Beach, Orange, Garden Grove, Fullerton, Orange County","Southern California: Central Los Angeles":"å å©ç¦å©äºå·åé¨ï¼æ´æç£¯ä¸­å¤®å°å","Southern California: Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana":"å å©ç¦å©äºå·åé¨ï¼Colton, Grand Terrace, Ontario, Claremont, Pomona, Chino, Redlands, Fontana","Southern California: Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild":"å å©ç¦å©äºå·åé¨ï¼Corona, Riverside, Temescal Canyon, Lake Elsinore, Mira Loma, Moreno Valley, Perris, Sun City, Murrieta, Temecula, Hemet, Winchester, Lakeview, Nuevo, Beaumont, Banning, Idyllwild","Southern California: Del Mar, La Jolla, San Diego":"å å©ç¦å©äºå·åé¨ï¼Del Mar, La Jolla, èè¿­æ","Southern California: Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar":"å å©ç¦å©äºå·åé¨ï¼Laguna Niguel, Irvine, Lake Forest, Newport Beach, Corona Del Mar","Southern California: Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower":"å å©ç¦å©äºå·åé¨ï¼Long Beach, Whittier, Norwalk, La Habra Lakewood, Bellflower","Southern California: Los Angeles, West LA, San Fernando Valley, Florence, Montebello":"å å©ç¦å©äºå·åé¨ï¼æ´æç£¯, West LA, San Fernando Valley, Florence, Montebello","Southern California: Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, eastern Los Angeles suburbs":"å å©ç¦å©äºå·åé¨ï¼Pasadena, West Covina, El Monte, La Puente, Arcadia, San Gabriel Valley, æ´æç£¯æ±é¨éå","Southern California: San Diego":"å å©ç¦å©äºå·åé¨ï¼èè¿­æ","Southern California: San Diego, Chula Vista":"å å©ç¦å©äºå·åé¨ï¼San Diego, Chula Vista","Southern California: San Fernando Valley":"å å©ç¦å©äºå·åé¨ï¼San Fernando Valley","Southern California: San Fernando Valley, including Glendale, San Fernando, Northridge, Burbank, Los Angeles suburbs":"å å©ç¦å©äºå·åé¨ï¼San Fernando Valley, åæ¬ Glendale, San Fernando, Northridge, Burbank, æ´æç£¯éå","Southern California: Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, the Los Angeles Westside":"å å©ç¦å©äºå·åé¨ï¼Santa Monica, Malibu, Torrance, South Bay, Beverly Hills, Catalina Island, the Los Angeles Westside","Southern Florida: Fort Lauderdale, Hollywood, Coral Springs":"ä½ç¾ééå·åé¨ï¼Fort Lauderdale, Hollywood, Coral Springs","Southern Florida: Miami-Dade, Florida Keys, Miami, Homestead, Coral Gables, Key West":"ä½ç¾ééå·åé¨ï¼Miami-Dade, Florida Keys, éé¿å¯, Homestead, Coral Gables, Key West","Southern Illinois: Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon":"ä¼å©è«¾ä¼å·åé¨ï¼Alton, Belleville, Carbondale, Centralia, East Saint Louis, Mount Vernon","Southern Kansas: Dodge City, Emporia, Geat Bend, Parsons, Liberal":"å ªè©æ¯å·åé¨ï¼Dodge City, Emporia, Geat Bend, Parsons, Liberal","Southern Minnesota: Rochester, Mankato, Worthington, Marshall":"æå°¼èéå·åé¨ï¼Rochester, Mankato, Worthington, Marshall","Southern Texas: Laredo, Brownsville, McAllen, Harlingen":"å¾·åè©æ¯å·åé¨ï¼Laredo, Brownsville, McAllen, Harlingen","Southern Virginia: Charlottesville, Lynchburg, Danville, Farmville, South Hill":"å¼åå°¼äºåé¨ï¼Charlottesville, Lynchburg, Danville, Farmville, South Hill","Southern and Eastern Arkansas: Texarkana, Jonesboro, Pine Bluff":"é¿è¯è²å·æ±åé¨ï¼Texarkana, Jonesboro, Pine Bluff","Southern and Western Oklahoma: Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City":"ä¿åæè·é¦¬å·è¥¿åé¨ï¼Enid, Lawton, Ponca City, Guymon, Ardmore, Sayre, Elk City","Southwest France":"æ³åè¥¿åé¨","Southwestern Alabama: Mobile, Jackson, Brewton":"äºæå·´é¦¬å·è¥¿åé¨ï¼Mobile, Jackson, Brewton","Southwestern Florida: Lee, Collier, and Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades":"ä½ç¾ééå·è¥¿åé¨ï¼Lee, Collier, and Monroe Counties; Cape Coral, Fort Myers, Naples, Everglades","Southwestern Florida: Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda":"ä½ç¾ééå·è¥¿åé¨ï¼Tampa Bay,Manatee County, Sarasota County, Charlotte County; Bradenton, Port Charlotte, Sarasota, Punta Gorda","Southwestern Georgia: Albany, Valdosta, Bainbridge, Americus, Fitzgerald":"å¬æ²»äºå·è¥¿åé¨ï¼Albany, Valdosta, Bainbridge, Americus, Fitzgerald","Southwestern Michigan: Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, Detroit suburbs":"å¯æ­æ ¹å·è¥¿åé¨ï¼Ann Arbor, Canton, Plymouth, Monroe, Wayne, Ypsilanti, Romulus, Detroit éå","Southwestern Missouri: Springfield, Joplin, Branson, West Plains, Lamar, Lebanon":"å¯èéå·è¥¿åé¨ï¼Springfield, Joplin, Branson, West Plains, Lamar, Lebanon","Southwestern New Jersey: Vineland, Cherry Hill, Camden, Millville":"æ°æ¾¤è¥¿å·è¥¿åé¨ï¼Vineland, Cherry Hill, Camden, Millville","Southwestern Ontario, Canada: Niagara Region, Hamilton, Toronto suburbs":"å æ¿å¤§å®å¤§ç¥çè¥¿åé¨Niagara Region, Hamilton, å¤å«å¤éå","Southwestern Pennsylvania: New Castle, Washington, Indiana, Uniontown":"è³å¤æ³å°¼äºå·è¥¿åé¨ï¼New Castle, Washington, Indiana, Uniontown","Southwestern Tennessee: Memphis, Covington, Somerville":"ç°ç´è¥¿å·è¥¿åé¨ï¼å­è²æ¯, Covington, Somerville","Southwestern Texas: Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass":"å¾·åè©æ¯å·è¥¿åé¨ï¼Del Rio, Uvalde, New Braunfels, Kerrville, Eagle Pass","Southwestern Virginia: Bristol, Abingdon, Wytheville, Martinsville, Bluefield":"å¼åå°¼äºå·è¥¿åé¨ï¼Bristol, Abingdon, Wytheville, Martinsville, Bluefield","Special Telecom.":"ç¹å¥é»è¨","Special Telecommunications Needs in Canada":"å æ¿å¤§åå§çç¹å¥é»è¨éæ±","Sri Lanka":"æ¯éè­å¡","St. Kitts/Nevis":"èåºè¨/å°¼ç¶­æ¯","St. Pierre and Miquelon":"èç®åç¾åå¯åéå³¶","Stuttgart":"æ¯åå ç¹","Stuttgart, Aichwald, Denkendorf, Esslingen am Neckar, Fellbach, Filderstadt-Bernhausen, Filderstadt-Bonlanden, Filderstadt-Plattenhardt, Korntal, Leinfelden-Echterdingen, Ostfildern-Kemnat, Ostfildern-Nellingen, Ostfildern-Ruit":"æ¯åå ç¹ï¼Aichwaldï¼ç»è¯å¤å¤«ï¼ç¾å§å¡æ²³çåæ¯ææ ¹ï¼è²»ç¾å·´èµ«ï¼è²ç¾å¾·æ½å¡ç¹-ä¼¯æ©è±ªæ£®ï¼è²ç¾å¾·æ½å¡ç¹-Bonlandenï¼è²ç¾å¾·æ½å¡ç¹-Plattenhardtï¼Korntalï¼èæ©è²»ç¾ç»- Echterdingenï¼Ostfildern-Kemnatï¼Ostfildern-Nellingenï¼Ostfildern-Ruit","Sudan":"èä¸¹","Suriname":"èéå","Swaziland":"æ¯å¨å£«è­","Syria":"æå©äº","SÃ£o TomÃ© and PrÃ­ncipe":"èå¤ç¾åæ®æè¥¿æ¯","Taiwan":"èºç£","Tanzania":"å¦æ¡å°¼äº","Tarragona":"å¡ææç´","Tennessee":"ç°ç´è¥¿å·","Tennessee: Clarksville, Columbia, Manchester, Cookeville":"ç°ç´è¥¿å·Clarksville, Columbia, Manchester, Cookeville","Texas":"å¾·åè©æ¯å·","Texas: Abilene, San Angelo, Sweetwater, Snyder":"å¾åè©æ¯ï¼Abilene, San Angelo, Sweetwater, Snyder","Texas: Amarillo, Lubbock, Canadian, Perryton, Shamrock, Dalhart, Texas Panhandle":"å¾åè©æ¯ï¼Amarillo, Lubbock, Canadian, Perryton, Shamrock, Dalhart, Texas Panhandle","Texas: Dallas area":"å¾åè©æ¯ï¼éææ¯å°å","Texas: El Paso County, Hudspeth County":"å¾åè©æ¯å·ï¼El PasoÃÃ, HudspethÃÃ","Texas: Fort Worth, Arlington, Grandview, Weatherford, Rhome":"å¾åè©æ¯å·ï¼Fort Worth, Arlington, Grandview, Weatherford, Rhome","Texas: Houston":"å¾åè©æ¯ï¼ä¼æ¯æ¦","Texas: San Antonio area":"å¾åè©æ¯ï¼èå®æ±å°¼å¥§å°å","Texas: Waco, Killeen, Temple, Belton, and Stephenville":"å¾åè©æ¯ï¼Waco, Killeen, Temple, BeltonåStephenville","Thailand":"æ³°å","The Bahamas":"å·´åé¦¬","The British Virgin Islands":"è±å±¬ç¶­ç¾äº¬ç¾¤å³¶","The Cayman Islands":"éæ¼ç¾¤å³¶","The Dominican Republic":"å¤ç±³å°¼å å±åå","The Gambia":"å²¡æ¯äº","The U.S. Virgin Islands":"ç¾å±¬ç¶­ç¾äº¬ç¾¤å³¶","Tokelau":"æåå","Toledo":"æèå¤","Toll-free":"åè²»","Toll-free Telephone Service":"åè²»é»è©±æå","Tonga":"æ¹¯å ","Trinidad and Tobago":"ç¹ç«å°¼éåå¤å·´å¥","Trinidad/Tobago":"ç¹ç«å°¼é/å¤å·´å¥","Turkey, Turkish Republic of Northern Cyprus":"åè³å¶ï¼åå¡æµ¦è·¯æ¯åè³å¶å±åå","Turkmenistan":"ååº«æ¼æ¯å¦","Tuvalu":"åç¦ç§","U.S. Government":"ç¾åæ¿åº","U.S. Government Special Services":"ç¾åæ¿åºç¹å¥æå","U.S. Virgins":"ç¾å±¬ç¶­ç¾äº¬ç¾¤å³¶","UAE":"é¿è¯é","Uganda":"çå¹²é","Ukraine":"çåè­","United Arab Emirates":"é¿æä¼¯è¯åéé·å","United Kingdom":"è±å","United Kingdom, Guernsey, Isle of Man, Jersey":"è±åï¼æ ¼æ©è¥¿å³¶ï¼é¦¬æ©å³¶ï¼æ¾¤è¥¿","Universal Personal":"éç¨åäºº","Universal Personal Telecommunications":"éç¨åäººéè¨","Universal international freephone number":"éç¨åéåè²»é»è©±èç¢¼","Unknown Country":"æªç¥åå®¶","Unknown Location":"æªç¥å°é»","Uruguay":"çæå­","Utah":"ç¶ä»å·","Utah: Cedar City, Logan, Moab, Park City, St. George, Moab":"ç¶ä»å·ï¼Cedar City, Logan, Moab, Park City, St. George, Moab","Utah: Wasatch Front":"ç¶ä»å·ï¼Wasatch Front","Uzbekistan":"çè²å¥åæ¯å¦","Valencia":"ç¦å«è¥¿äº","Vanuatu":"ç¦åªé¿å","Vatican City":"æ¢µèå²¡å","Venezuela":"å§å§çæ","Virginia":"å¼åå°¼äºå·","Virginia: Hampton Roads, Eastern Shore":"å¼åå°¼äºå·ï¼Hampton Roads, Eastern Shore","Virginia: Richmond, Petersburg":"å¼åå°¼äºå·ï¼Richmond, Petersburg","Vizcaya":"æ¯æ¯å¡äº","Voice over IP services":"VoIPæå","W Illinois":"ä¼å©è«¾ä¼å·è¥¿é¨","W Iowa":"æè·è¯å·è¥¿é¨","W Maryland":"é¦¬éè­å·è¥¿é¨","W Massachusetts":"é¦¬è©è«¸å¡å·è¥¿é¨","W Nebraska":"å§å¸ææ¯å å©ç¦å©äºå·è¥¿é¨","W New York":"ç´ç´å·è¥¿é¨","W North Carolina":"åå¡ç¾èç´å·è¥¿é¨","W Pennsylvania":"è³å¤æ³å°¼äºè¥¿é¨","W Tennessee":"ç°ç´è¥¿å·è¥¿é¨","W Texas":"è¥¿å¾·åè©æ¯å·","W Washington":"è¯çé å·è¥¿é¨","Wallis and Futuna":"ç¦å©æ¯åå¯åç´ç¾¤å³¶","Washington":"è¯çé å·","Washington D.C.":"è¯çé ç¹å","Washington: Seattle":"è¯çé ï¼è¥¿éå","Washington: Seattle suburbs, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood and Mountlake Terrace":"è¯çé å·ï¼è¥¿éåéå, Bellevue, Everett, Redmond, Renton, Kirkland, Bothell, Sammamish, Issaquah, Edmonds, Lynnwood åMountlake Terrace","Washington: Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanaway and south Seattle suburbs":"è¯çé ï¼Tacoma, Lakewood, Auburn, Puyallup, Enumclaw, Spanawayåè¥¿éååé¨éå","Washington: Western Washington":"è¯çé å·ï¼è¯çé å·è¥¿é¨ï¼","West Central Georgia: Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston":"å¬æ²»äºå·ä¸­è¥¿é¨ï¼Augusta, Lincolnton, Columbus, LaGrange, Rome, Dalton, Thomaston","West Central Missouri: Kansas City, St Joseph, Independence, Harrisonville":"å¯èéå·ä¸­è¥¿é¨ï¼Kansas City, St Joseph, Independence, Harrisonville","West Central New Jersey: Alpha, Washington, Elizabeth, Warren, Plainfield":"æ°æ¾¤è¥¿å·ä¸­è¥¿é¨ï¼Alpha, Washington, Elizabeth, Warren, Plainfield","West Texas: Midland, Odessa, Big Spring, Alpine":"å¾·åè©æ¯å·è¥¿é¨ï¼Midland, Odessa, Big Spring, Alpine","West Virginia":"è¥¿å¼åå°¼äºå·","Western Iowa: Sioux City, Council Bluffs, Sheldon, Denison, Estherville":"æè·è¯å·è¥¿é¨ï¼Sioux City, Council Bluffs, Sheldon, Denison, Estherville","Western Maryland: Silver Spring, DC suburbs, Hagerstown, Frederick, Rockville, Cumberland":"é¦¬éè­å·è¥¿é¨ï¼Silver Spring, DC éå, Hagerstown, Frederick, Rockville, Cumberland","Western Massachusetts: Springfield, Pittsfield, Holyoke, Greenfield":"é¦¬è©è«¸å¡å·è¥¿é¨ï¼Springfield, Pittsfield, Holyoke, Greenfield","Western Nebraska: North Platte, Scottsbluff, McCook, Kearney, Grand Island":"å§å¸ææ¯å å©ç¦å©äºå·è¥¿é¨ï¼North Platte, Scottsbluff, McCook, Kearney, Grand Island","Western New York: Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean":"ç´ç´å·è¥¿é¨ï¼Buffalo, Jamestown, Niagara Falls, Tonawanda, Olean","Western New York: Rochester, Wellsville, Batavia":"ç´ç´å·è¥¿é¨ï¼Rochester, Wellsville, Batavia","Western North Carolina: Hickory, Asheville, Waynesville, Franklin, Murphy":"åå¡ç¾ä¾ç´å·è¥¿é¨ï¼Hickory, Asheville, Waynesville, Franklin, Murphy","Western Pennsylvania: Pittsburgh area, McKeesport, Braddock, Duquesne":"è³å¤æ³å°¼äºè¥¿é¨ï¼å¹è²å ¡å°å, McKeesport, Braddock, Duquesne","Western Tennessee: Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar":"ç°ç´è¥¿å·è¥¿é¨ï¼Union City, Jackson, Dyersburg, Martin, Brownsville, Paris, Bolivar","Western Washington: Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen":"è¯çé å·è¥¿é¨ï¼Olympia, Vancouver, Bellingham, Bremerton, Port Angeles, Aberdeen","Western and Southern Texas: Corpus Christi, Victoria, George":"å¾·åè©æ¯å·è¥¿åé¨ï¼Corpus Christi, Victoria, George","Wyoming":"æ·ä¿æå·","Yemen":"ä¹é","Yukon, Northwest Territories, and Nunavut, Canada":"å æ¿å¤§è²ç©ºå°åï¼è¥¿åå°åååªç´æ­¦ç¹å°å","Zambia":"è´æ¯äº","Zaragoza":"è©ææè©","Zimbabwe":"æ´¥å·´å¸é","Ãvila":"é¿ç¶­æ"};
/*
 * phonegeo.js - Represent a phone number geolocator object.
 * 
 * Copyright Â© 2014, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
!depends 
ilibglobal.js 
locale.js 
localeinfo.js
phone/numplan.js
phone/phoneloc.js
phone/phonenum.js
*/

// !data iddarea area extarea extstates phoneres

/**
 * @class
 * Create an instance that can geographically locate a phone number.<p>
 * 
 * The location of the number is calculated according to the following rules:
 * 
 * <ol>
 * <li>If the areaCode property is undefined or empty, or if the number specifies a 
 * country code for which we do not have information, then the area property may be 
 * missing from the returned object. In this case, only the country object will be returned.
 * 
 * <li>If there is no area code, but there is a mobile prefix, service code, or emergency 
 * code, then a fixed string indicating the type of number will be returned.
 * 
 * <li>The country object is filled out according to the countryCode property of the phone
 * number. 
 * 
 * <li>If the phone number does not have an explicit country code, the MCC will be used if
 * it is available. The country code can be gleaned directly from the MCC. If the MCC 
 * of the carrier to which the phone is currently connected is available, it should be 
 * passed in so that local phone numbers will look correct.
 * 
 * <li>If the country's dialling plan mandates a fixed length for phone numbers, and a 
 * particular number exceeds that length, then the area code will not be given on the
 * assumption that the number has problems in the first place and we cannot guess
 * correctly.
 * </ol>
 * 
 * The returned area property varies in specificity according
 * to the locale. In North America, the area is no finer than large parts of states
 * or provinces. In Germany and the UK, the area can be as fine as small towns.<p>
 * 
 * If the number passed in is invalid, no geolocation will be performed. If the location
 * information about the country where the phone number is located is not available,
 * then the area information will be missing and only the country will be available.<p>
 * 
 * The options parameter can contain any one of the following properties:
 * 
 * <ul>
 * <li><i>locale</i> The locale parameter is used to load translations of the names of regions and
 * areas if available. For example, if the locale property is given as "en-US" (English for USA), 
 * but the phone number being geolocated is in Germany, then this class would return the the names
 * of the country (Germany) and region inside of Germany in English instead of German. That is, a 
 * phone number in Munich and return the country "Germany" and the area code "Munich"
 * instead of "Deutschland" and "MÃ¼nchen". The default display locale is the current ilib locale. 
 * If translations are not available, the region and area names are given in English, which should 
 * always be available.
 * <li><i>mcc</i> The mcc of the current mobile carrier, if known.
 * 
 * <li><i>onLoad</i> - a callback function to call when the data for the
 * locale is fully loaded. When the onLoad option is given, this object 
 * will attempt to load any missing locale data using the ilib loader callback.
 * When the constructor is done (even if the data is already preassembled), the 
 * onLoad function is called with the current instance as a parameter, so this
 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 * 
 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 * asynchronously. If this option is given as "false", then the "onLoad"
 * callback must be given, as the instance returned from this constructor will
 * not be usable for a while. 
 *
 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 * loader callback function when locale data is missing. The parameters are not
 * interpretted or modified in any way. They are simply passed along. The object 
 * may contain any property/value pairs as long as the calling code is in
 * agreement with the loader callback function as to what those parameters mean.
 * </ul>
 * 
 * @constructor
 * @param {Object} options parameters controlling the geolocation of the phone number.
 */
ilib.GeoLocator = function(options) {
	var sync = true,
		loadParams = {},
		locale = ilib.getLocale();

	if (options) {
		if (options.locale) {
			locale = options.locale;
		}

		if (typeof(options.sync) === 'boolean') {
			sync = options.sync;
		}
		
		if (options.loadParams) {
			loadParams = options.loadParams;
		}
	}
	
	new ilib.Locale.PhoneLoc({
		locale: locale,
		mcc: options && options.mcc,
		countryCode: options && options.countryCode,
		sync: sync,
		loadParams: loadParams,
		onLoad: ilib.bind(this, function (loc) {
			this.locale = loc;
			new ilib.NumPlan({
				locale: this.locale,
				sync: sync,
				loadParams: loadParams,
				onLoad: ilib.bind(this, function (plan) {
					this.plan = plan;
					
					new ilib.ResBundle({
						locale: this.locale,
						name: "phoneres",
						sync: sync,
						loadParams: loadParams,
						onLoad: ilib.bind(this, function (rb) {
							this.rb = rb;
							
							ilib.loadData({
								name: "iddarea.json",
								object: ilib.GeoLocator,
								nonlocale: true,
								sync: sync,
								loadParams: loadParams,
								callback: ilib.bind(this, function (data) {
									this.regiondata = data;
									ilib.loadData({
										name: "area.json",
										object: ilib.GeoLocator,
										locale: this.locale,
										sync: sync,
										loadParams: ilib.merge(loadParams, {
											returnOne: true
										}),
										callback: ilib.bind(this, function (areadata) {
											this.areadata = areadata;
		
											if (options && typeof(options.onLoad) === 'function') {
												options.onLoad(this);
											}
										})
									});
								})
							});
						})
					});
				})
			});
		})
	});
};

ilib.GeoLocator.prototype = {
	/**
	 * @private
	 * 
	 * Used for locales where the area code is very general, and you need to add in
	 * the initial digits of the subscriber number in order to get the area
	 * 
	 * @param {string} number
	 * @param {Object} stateTable
	 */
	_parseAreaAndSubscriber: function (number, stateTable) {
		var ch,
			i,
			handlerMethod,
			state = 0,
			newState,
			prefix = "",
			dot = 14;	// special transition which matches all characters. See AreaCodeTableMaker.java

		i = 0;
		if (!number || !stateTable) {
			// can't parse anything
			return undefined;
		}

		//console.log("GeoLocator._parseAreaAndSubscriber: parsing number " + number);

		while (i < number.length) {
			ch = ilib.PhoneNumber._getCharacterCode(number.charAt(i));
			//console.info("parsing char " + number.charAt(i) + " code: " + ch);
			if (ch >= 0) {
				newState = stateTable.states[state][ch];

				if (newState === -1 && stateTable.states[state][dot] !== -1) {
					// check if this character can match the dot instead
					newState = stateTable.states[state][dot];
					//console.log("char " + ch + " doesn't have a transition. Using dot to transition to state " + newState);
					prefix += '.';
				} else {
					prefix += ch;
				}
				
				if (newState < 0) {
					// reached a final state. First convert the state to a positive array index
					// in order to look up the name of the handler function name in the array
					state = newState;
					newState = -newState - 1;
					handlerMethod = ilib.PhoneNumber._states[newState];
					//console.info("reached final state " + newState + " handler method is " + handlerMethod + " and i is " + i);

					return (handlerMethod === "area") ? prefix : undefined;
				} else {
					//console.info("recognized digit " + ch + " continuing...");
					// recognized digit, so continue parsing
					state = newState;
					i++;
				}
			} else if (ch === -1) {
				// non-transition character, continue parsing in the same state
				i++;
			} else {
				// should not happen
				// console.info("skipping character " + ch);
				// not a digit, plus, pound, or star, so this is probably a formatting char. Skip it.
				i++;
			}
		}
		return undefined;
	},
	_matchPrefix: function(prefix, table)  {
		var i, matchedDot, matchesWithDots = [];

		if (table[prefix]) {
			return table[prefix];
		}
		for (var entry in table) {
			if (entry && typeof(entry) === 'string') {
				i = 0;
				matchedDot = false;
				while (i < entry.length && (entry.charAt(i) === prefix.charAt(i) || entry.charAt(i) === '.')) {
					if (entry.charAt(i) === '.') {
						matchedDot = true;
					}
					i++;
				}
				if (i >= entry.length) {
					if (matchedDot) {
						matchesWithDots.push(entry);
					} else {
						return table[entry];
					}
				}
			}
		}

		// match entries with dots last, so sort the matches so that the entry with the 
		// most dots sorts last. The entry that ends up at the beginning of the list is
		// the best match because it has the fewest dots
		if (matchesWithDots.length > 0) {
			matchesWithDots.sort(function (left, right) {
				return (right < left) ? -1 : ((left < right) ? 1 : 0);
			});
			return table[matchesWithDots[0]];
		}
		
		return undefined;
	},
	_getAreaInfo: function(number, data, locale, plan, options) {
		var sync = true,
			ret = {}, 
			countryCode, 
			areaInfo, 
			temp, 
			areaCode, 
			geoTable, 
			tempNumber, 
			prefix;

		if (options && typeof(options.sync) === 'boolean') {
			sync = options.sync;
		}

		prefix = number.areaCode || number.serviceCode;
		geoTable = data;
		
		if (prefix !== undefined) {
			if (plan.getExtendedAreaCode()) {
				// for countries where the area code is very general and large, and you need a few initial
				// digits of the subscriber number in order find the actual area
				tempNumber = prefix + number.subscriberNumber;
				tempNumber = tempNumber.replace(/[wWpPtT\+#\*]/g, '');	// fix for NOV-108200
		
				ilib.loadData({
					name: "extarea.json",
					object: ilib.GeoLocator, 
					locale: locale,
					sync: sync,
					loadParams: ilib.merge((options && options.loadParams) || {}, {returnOne: true}),
					callback: ilib.bind(this, function (data) {
						this.extarea = data;
						ilib.loadData({
							name: "extstates.json",
							object: ilib.GeoLocator, 
							locale: locale,
							sync: sync,
							loadParams: ilib.merge((options && options.loadParams) || {}, {returnOne: true}),
							callback: ilib.bind(this, function (data) {
								this.extstates = data;
								geoTable = this.extarea;
								if (this.extarea && this.extstates) {
									prefix = this._parseAreaAndSubscriber(tempNumber, this.extstates);
								}
								
								if (!prefix) {
									// not a recognized prefix, so now try the general table
									geoTable = this.areadata;
									prefix = number.areaCode || number.serviceCode;					
								}

								if ((!plan.fieldLengths || 
								  plan.getFieldLength('maxLocalLength') === undefined ||
								  !number.subscriberNumber ||
								 	number.subscriberNumber.length <= plan.fieldLengths('maxLocalLength'))) {
								  	areaInfo = this._matchPrefix(prefix, geoTable);
									if (areaInfo && areaInfo.sn && areaInfo.ln) {
										//console.log("Found areaInfo " + JSON.stringify(areaInfo));
										ret.area = {
											sn: this.rb.getString(areaInfo.sn).toString(),
											ln: this.rb.getString(areaInfo.ln).toString()
										};
									}
								}		
							})
						});
					})
				});

			} else if (!plan || 
					plan.getFieldLength('maxLocalLength') === undefined || 
					!number.subscriberNumber ||
					number.subscriberNumber.length <= plan.getFieldLength('maxLocalLength')) {
				if (geoTable) {
					areaCode = prefix.replace(/[wWpPtT\+#\*]/g, '');
					areaInfo = this._matchPrefix(areaCode, geoTable);

					if (areaInfo && areaInfo.sn && areaInfo.ln) {
						ret.area = {
							sn: this.rb.getString(areaInfo.sn).toString(),
							ln: this.rb.getString(areaInfo.ln).toString()
						};
					} else if (number.serviceCode) {
						ret.area = {
							sn: this.rb.getString("Service Number").toString(),
							ln: this.rb.getString("Service Number").toString()
						};
					}
				} else {
					countryCode = number.locale._mapRegiontoCC(this.locale.getRegion());
					if (countryCode !== "0" && this.regiondata) {
						temp = this.regiondata[countryCode];
						if (temp && temp.sn) {
							ret.country = {
								sn: this.rb.getString(temp.sn).toString(),
								ln: this.rb.getString(temp.ln).toString(),
								code: this.locale.getRegion()
							};
						}
					}
				}
			} else {
				countryCode = number.locale._mapRegiontoCC(this.locale.getRegion());
				if (countryCode !== "0" && this.regiondata) {
					temp = this.regiondata[countryCode];
					if (temp && temp.sn) {
						ret.country = {
							sn: this.rb.getString(temp.sn).toString(),
							ln: this.rb.getString(temp.ln).toString(),
							code: this.locale.getRegion()
						};
					}
				}
			}

		} else if (number.mobilePrefix) {
			ret.area = {
				sn: this.rb.getString("Mobile Number").toString(),
				ln: this.rb.getString("Mobile Number").toString()
			};
		} else if (number.emergency) {
			ret.area = {
				sn: this.rb.getString("Emergency Services Number").toString(),
				ln: this.rb.getString("Emergency Services Number").toString()
			};
		}

		return ret;
	},
	/**
	 * Returns a the location of the given phone number, if known. 
	 * The returned object has 2 properties, each of which has an sn (short name) 
	 * and an ln (long name) string. Additionally, the country code, if given,
	 * includes the 2 letter ISO code for the recognized country.
	 *	 	{
	 *			"country": {
	 *	        	"sn": "North America",
	 *            	"ln": "North America and the Caribbean Islands",
	 *				"code": "us"
	 *         	 },
	 *         	 "area": {
	 *       	    "sn": "California",
	 *          	 "ln": "Central California: San Jose, Los Gatos, Milpitas, Sunnyvale, Cupertino, Gilroy"
	 *         	 }
	 *    	 }
	 * 
	 * The location name is subject to the following rules:
	 *
	 * If the areaCode property is undefined or empty, or if the number specifies a 
	 * country code for which we do not have information, then the area property may be 
	 * missing from the returned object. In this case, only the country object will be returned.
	 *
	 * If there is no area code, but there is a mobile prefix, service code, or emergency 
	 * code, then a fixed string indicating the type of number will be returned.
	 * 
	 * The country object is filled out according to the countryCode property of the phone
	 * number. 
	 * 
	 * If the phone number does not have an explicit country code, the MCC will be used if
	 * it is available. The country code can be gleaned directly from the MCC. If the MCC 
	 * of the carrier to which the phone is currently connected is available, it should be 
	 * passed in so that local phone numbers will look correct.
	 * 
	 * If the country's dialling plan mandates a fixed length for phone numbers, and a 
	 * particular number exceeds that length, then the area code will not be given on the
	 * assumption that the number has problems in the first place and we cannot guess
	 * correctly.
	 *
	 * The returned area property varies in specificity according
	 * to the locale. In North America, the area is no finer than large parts of states
	 * or provinces. In Germany and the UK, the area can be as fine as small towns.
	 *
	 * The strings returned from this function are already localized to the 
	 * given locale, and thus are ready for display to the user.
	 *
	 * If the number passed in is invalid, an empty object is returned. If the location
	 * information about the country where the phone number is located is not available,
	 * then the area information will be missing and only the country will be returned.
     *
	 * The options parameter can contain any one of the following properties:
 	 * 
 	 * <ul>
 	 * <li><i>locale</i> The locale parameter is used to load translations of the names of regions and
 	 * areas if available. For example, if the locale property is given as "en-US" (English for USA), 
 	 * but the phone number being geolocated is in Germany, then this class would return the the names
 	 * of the country (Germany) and region inside of Germany in English instead of German. That is, a 
 	 * phone number in Munich and return the country "Germany" and the area code "Munich"
 	 * instead of "Deutschland" and "MÃ¼nchen". The default display locale is the current ilib locale. 
 	 * If translations are not available, the region and area names are given in English, which should 
 	 * always be available.
 	 * <li><i>mcc</i> The mcc of the current mobile carrier, if known.
 	 * 
 	 * <li><i>onLoad</i> - a callback function to call when the data for the
 	 * locale is fully loaded. When the onLoad option is given, this object 
 	 * will attempt to load any missing locale data using the ilib loader callback.
 	 * When the constructor is done (even if the data is already preassembled), the 
 	 * onLoad function is called with the current instance as a parameter, so this
 	 * callback can be used with preassembled or dynamic loading or a mix of the two. 
 	 * 
 	 * <li><i>sync</i> - tell whether to load any missing locale data synchronously or 
 	 * asynchronously. If this option is given as "false", then the "onLoad"
 	 * callback must be given, as the instance returned from this constructor will
 	 * not be usable for a while. 
 	 *
 	 * <li><i>loadParams</i> - an object containing parameters to pass to the 
 	 * loader callback function when locale data is missing. The parameters are not
 	 * interpretted or modified in any way. They are simply passed along. The object 
 	 * may contain any property/value pairs as long as the calling code is in
 	 * agreement with the loader callback function as to what those parameters mean.
 	 * </ul>
	 * 
	 * @param {ilib.PhoneNumber} number phone number to locate
	 * @param {Object} options options governing the way this ares is loaded
	 * @return {Object} an object  
	 * that describes the country and the area in that country corresponding to this
	 * phone number. Each of the country and area contain a short name (sn) and long
	 * name (ln) that describes the location.
	 */
	locate: function(number, options) {
		var loadParams = {},
			ret = {}, 
			region, 
			countryCode, 
			temp, 
			plan,
			areaResult,
			phoneLoc = this.locale,
			sync = true;

		if (number === undefined || typeof(number) !== 'object' || !(number instanceof ilib.PhoneNumber)) {
			return ret;
		}

		if (options) {
			if (typeof(options.sync) !== 'undefined') {
				sync = (options.sync == true);
			}
		
			if (options.loadParams) {
				loadParams = options.loadParams;
			}
		}

		// console.log("GeoLocator.locate: looking for geo for number " + JSON.stringify(number));
		region = this.locale.getRegion();
		if (number.countryCode !== undefined && this.regiondata) {
			countryCode = number.countryCode.replace(/[wWpPtT\+#\*]/g, '');
			temp = this.regiondata[countryCode];
			phoneLoc = number.destinationLocale;
			plan = number.destinationPlan;
			ret.country = {
				sn: this.rb.getString(temp.sn).toString(),
				ln: this.rb.getString(temp.ln).toString(),
				code: phoneLoc.getRegion()
			};
		}
		
		if (!plan) {
			plan = this.plan;
		}
		
		ilib.loadData({
			name: "area.json",
			object: ilib.GeoLocator,
			locale: phoneLoc,
			sync: sync,
			loadParams: ilib.merge(loadParams, {
				returnOne: true
			}),
			callback: ilib.bind(this, function (areadata) {
				if (areadata) {
					this.areadata = areadata;	
				}
				areaResult = this._getAreaInfo(number, this.areadata, phoneLoc, plan, options);
				ret = ilib.merge(ret, areaResult);

				if (ret.country === undefined) {
					countryCode = number.locale._mapRegiontoCC(region);
					
					if (countryCode !== "0" && this.regiondata) {
						temp = this.regiondata[countryCode];
						if (temp && temp.sn) {
							ret.country = {
								sn: this.rb.getString(temp.sn).toString(),
								ln: this.rb.getString(temp.ln).toString(),
								code: this.locale.getRegion()
							};
						}
					}
				}
			})
		});
		
		return ret;
	},
	
	/**
	 * Returns a string that describes the ISO-3166-2 country code of the given phone
	 * number.<p> 
	 * 
	 * If the phone number is a local phone number and does not contain
	 * any country information, this routine will return the region for the current
	 * formatter instance.
     *
	 * @param {ilib.PhoneNumber} number An ilib.PhoneNumber instance
	 * @return {string}
	 */
	country: function(number) {
		var countryCode,
			region,
			phoneLoc;

		if (!number || !(number instanceof ilib.PhoneNumber)) {
			return "";
		}

		phoneLoc = number.locale;

		region = (number.countryCode && phoneLoc._mapCCtoRegion(number.countryCode)) ||
			(number.locale && number.locale.region) || 
			phoneLoc.locale.getRegion() ||
			this.locale.getRegion();

		countryCode = number.countryCode || phoneLoc._mapRegiontoCC(region);
		
		if (number.areaCode) {
			region = phoneLoc._mapAreatoRegion(countryCode, number.areaCode);
		} else if (countryCode === "33" && number.serviceCode) {
			// french departments are in the service code, not the area code
			region = phoneLoc._mapAreatoRegion(countryCode, number.serviceCode);
		}		
		return region;
	}
};
/**
 * @license
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * ilib-full-inc.js - metafile that includes all other js files
 */

/* !depends
ilibglobal.js
daterangefmt.js
date.js
calendar/hebrewdate.js
calendar/hebrew.js
calendar/islamic.js
calendar/islamicdate.js
calendar/julian.js
calendar/juliandate.js
calendar/gregorian.js
calendar/gregoriandate.js
calendar/thaisolar.js
calendar/thaisolardate.js
calendar/persian.js
calendar/persiandate.js
calendar/persianastro.js
calendar/persianastrodate.js
numprs.js
numfmt.js
julianday.js
datefmt.js
calendar.js
util/utils.js
locale.js
strings.js
durfmt.js
resources.js
ctype.js
localeinfo.js
daterangefmt.js
ctype.isalnum.js
ctype.isalpha.js
ctype.isascii.js
ctype.isblank.js
ctype.iscntrl.js
ctype.isdigit.js
ctype.isgraph.js
ctype.isideo.js
ctype.islower.js
ctype.isprint.js
ctype.ispunct.js
ctype.isspace.js
ctype.isupper.js
ctype.isxdigit.js
ctype.isscript.js
scriptinfo.js
nameprs.js
namefmt.js
addressprs.js
addressfmt.js
collate.js
nfkc/all.js
localematch.js
normstring.js
maps/casemapper.js
glyphstring.js
phone/phonefmt.js
phone/phonegeo.js
phone/phonenum.js
*/
