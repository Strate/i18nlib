/*
 * testdurfmt.js - test the duration formatter object
 * 
 * Copyright Â© 2012-2013, JEDLSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function testDurFmtConstructorEmpty() {
	var fmt = new ilib.DurFmt();
    
    assertNotNull(fmt);
};

function testDurFmtConstructorDefaultLocale() {
    var fmt = new ilib.DurFmt();
    
    assertNotNull(fmt);
    
    assertEquals("en-US", fmt.getLocale().toString());
};

function testDurFmtGetLength() {
    var fmt = new ilib.DurFmt({length: "full"});
    assertNotNull(fmt);
    
    assertEquals("full", fmt.getLength());
};

function testDurFmtGetLengthDefault() {
    var fmt = new ilib.DurFmt();
    assertNotNull(fmt);
    
    assertEquals("short", fmt.getLength());
};

function testDurFmtGetLengthBogus() {
    var fmt = new ilib.DurFmt({length: "asdf"});
    assertNotNull(fmt);
    
    assertEquals("short", fmt.getLength());
};

function testDurFmtGetLocale() {
    var fmt = new ilib.DurFmt({locale: "de-DE"});
    assertNotNull(fmt);
    
    assertEquals("de-DE", fmt.getLocale().toString());
};

function testDurFmtGetLocaleDefault() {
    var fmt = new ilib.DurFmt();
    assertNotNull(fmt);
    
    assertEquals("en-US", fmt.getLocale().toString());
};

function testDurFmtGetLocaleBogus() {
    var fmt = new ilib.DurFmt({locale: "zyy-XX"});
    assertNotNull(fmt);
    
    assertEquals("zyy-XX", fmt.getLocale().toString());
};

function testDurFmtGetStyleDefault() {
    var fmt = new ilib.DurFmt();
    assertNotNull(fmt);
    
    assertEquals("text", fmt.getStyle());
};

function testDurFmtGetStyleText() {
    var fmt = new ilib.DurFmt({style: "text"});
    assertNotNull(fmt);
    
    assertEquals("text", fmt.getStyle());
};

function testDurFmtGetStyleClock() {
    var fmt = new ilib.DurFmt({style: "clock"});
    assertNotNull(fmt);
    
    assertEquals("clock", fmt.getStyle());
};

function testDurFmtGetStyleBogus() {
    var fmt = new ilib.DurFmt({style: "asdf"});
    assertNotNull(fmt);
    
    assertEquals("text", fmt.getStyle());
};

function testDurFmtFormatShortText() {
    var fmt = new ilib.DurFmt({
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1y 1m 1w 1d 1h 1m 1s 1m", duration.toString());
};

function testDurFmtFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1y 1m 1w 1d 1:01:01", duration.toString());
};

function testDurFmtFormatShortExceedClockLimitsNoWrap() {
    var fmt = new ilib.DurFmt({
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 36,
    	minute: 65,
    	second: 66
    });
    assertEquals("1y 1m 1w 1d 36:65:66", duration.toString());
};

function testDurFmtFormatShortClockNoMinutesSeconds() {
    var fmt = new ilib.DurFmt({
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1
    });
    assertEquals("1y 1m 1w 1d 1:00", duration.toString());
};

function testDurFmtFormatShortTextNoMinutesSeconds() {
    var fmt = new ilib.DurFmt({
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1
    });
    assertEquals("1y 1m 1w 1d 1h", duration.toString());
};

function testDurFmtFormatMedium() {
    var fmt = new ilib.DurFmt({
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 yr 1 mo 1 wk 1 dy 1 hr 1 mi 1 se 1 ms", duration.toString());
};

function testDurFmtFormatLongSingle() {
    var fmt = new ilib.DurFmt({
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 yr, 1 mon, 1 wk, 1 day, 1 hr, 1 min, 1 sec, 1 ms", duration.toString());
};

function testDurFmtFormatFullSingle() {
    var fmt = new ilib.DurFmt({
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 year, 1 month, 1 week, 1 day, 1 hour, 1 minute, 1 second and 1 millisecond", duration.toString());
};

function testDurFmtFormatFullSingle_en_GB() {
    var fmt = new ilib.DurFmt({
    	length: "full",
    	locale: "en-GB"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 year, 1 month, 1 week, 1 day, 1 hour, 1 minute, 1 second, and 1 millisecond", duration.toString());
};

function testDurFmtFormatFullSingleNotAllFields() {
    var fmt = new ilib.DurFmt({
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	week: 1,
    	day: 1,
    	minute: 1
    });
    assertEquals("1 year, 1 week, 1 day and 1 minute", duration.toString());
};

function testDurFmtFormatFullSingleNotAllFields_en_GB() {
    var fmt = new ilib.DurFmt({
    	length: "full",
    	locale: "en-GB"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	week: 1,
    	day: 1,
    	minute: 1
    });
    assertEquals("1 year, 1 week, 1 day, and 1 minute", duration.toString());
};

function testDurFmtFormatFullSingle() {
    var fmt = new ilib.DurFmt({
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 year, 1 month, 1 week, 1 day, 1 hour, 1 minute, 1 second and 1 millisecond", duration.toString());
};

function testDurFmtFormatFullSingle_en_GB() {
    var fmt = new ilib.DurFmt({
    	length: "full",
    	locale: "en-GB"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 year, 1 month, 1 week, 1 day, 1 hour, 1 minute, 1 second, and 1 millisecond", duration.toString());
};

function testDurFmtFormatLongPlural() {
    var fmt = new ilib.DurFmt({
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 2,
    	month: 2,
    	week: 2,
    	day: 2,
    	hour: 2,
    	minute: 2,
    	second: 2,
    	millisecond: 2
    });
    assertEquals("2 yrs, 2 mons, 2 wks, 2 days, 2 hrs, 2 min, 2 sec, 2 ms", duration.toString());
};

function testDurFmtFormatFullPlural() {
    var fmt = new ilib.DurFmt({
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 2,
    	month: 2,
    	week: 2,
    	day: 2,
    	hour: 2,
    	minute: 2,
    	second: 2,
    	millisecond: 2
    });
    assertEquals("2 years, 2 months, 2 weeks, 2 days, 2 hours, 2 minutes, 2 seconds and 2 milliseconds", duration.toString());
};

function testDurFmtFormatFullPlural_en_GB() {
    var fmt = new ilib.DurFmt({
    	length: "full",
    	locale: "en-GB"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 2,
    	month: 2,
    	week: 2,
    	day: 2,
    	hour: 2,
    	minute: 2,
    	second: 2,
    	millisecond: 2
    });
    assertEquals("2 years, 2 months, 2 weeks, 2 days, 2 hours, 2 minutes, 2 seconds, and 2 milliseconds", duration.toString());
};

function testDurFmtFormatShortDEDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "de-DE",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1J 1Mo 1W 1T 1St 1M 1S 1Ms", duration.toString());
};

function testDurFmtFormatShortDEText() {
    var fmt = new ilib.DurFmt({
    	locale: "de-DE",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1J 1Mo 1W 1T 1St 1M 1S 1Ms", duration.toString());
};

function testDurFmtFormatShortDEClock() {
    var fmt = new ilib.DurFmt({
    	locale: "de-DE",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1J 1Mo 1W 1T 01:01:01", duration.toString());
};

function testDurFmtFormatMediumDE() {
    var fmt = new ilib.DurFmt({
    	locale: "de-DE",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 Ja. 1 Mo. 1 Wo. 1 Ta. 1 St. 1 Mi. 1 Se. 1 Ms.", duration.toString());
};

function testDurFmtFormatLongDESingle() {
    var fmt = new ilib.DurFmt({
    	locale: "de-DE",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 Jhr., 1 Mon., 1 Wch., 1 Tag, 1 Std., 1 Min., 1 Sek., 1 Ms.", duration.toString());
};

function testDurFmtFormatFullDESingle() {
    var fmt = new ilib.DurFmt({
    	locale: "de-DE",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 Jahr, 1 Monat, 1 Woche, 1 Tag, 1 Stunde, 1 Minute, 1 Sekunde und 1 Millisekunde", duration.toString());
};

function testDurFmtFormatLongDEPlural() {
    var fmt = new ilib.DurFmt({
    	locale: "de-DE",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 2,
    	month: 2,
    	week: 2,
    	day: 2,
    	hour: 2,
    	minute: 2,
    	second: 2,
    	millisecond: 2
    });
    assertEquals("2 Jhr., 2 Mon., 2 Wch., 2 Tage, 2 Std., 2 Min., 2 Sek., 2 Ms.", duration.toString());
};

function testDurFmtFormatFullDEPlural() {
    var fmt = new ilib.DurFmt({
    	locale: "de-DE",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 2,
    	month: 2,
    	week: 2,
    	day: 2,
    	hour: 2,
    	minute: 2,
    	second: 2,
    	millisecond: 2
    });
    assertEquals("2 Jahre, 2 Monate, 2 Wochen, 2 Tage, 2 Stunden, 2 Minuten, 2 Sekunden und 2 Millisekunden", duration.toString());
};

function testDurFmtFormatShortZHDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-CN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´1ä¸ªæ1å¨1å¤©1å°æ¶1åé1ç§1æ¯«ç§", duration.toString());
};

function testDurFmtFormatShortZHText() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-CN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´1ä¸ªæ1å¨1å¤©1å°æ¶1åé1ç§1æ¯«ç§", duration.toString());
};

function testDurFmtFormatShortZHClock() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-CN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´1ä¸ªæ1å¨1å¤©1:01:01", duration.toString());
};

function testDurFmtFormatMediumZH() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-CN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´1ä¸ªæ1å¨1å¤©1å°æ¶1åé1ç§1æ¯«ç§", duration.toString());
};

function testDurFmtFormatLongZH() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-CN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´ã1ä¸ªæã1å¨ã1å¤©ã1å°æ¶ã1åéã1ç§ã1æ¯«ç§", duration.toString());
};

function testDurFmtFormatFullZH() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-CN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´ã1ä¸ªæã1å¨ã1å¤©ã1å°æ¶ã1åéã1ç§å1æ¯«ç§", duration.toString());
};

function testDurFmtFormatShortFRDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-FR",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1a 1mo 1sm 1j 1h 1m 1s 1ms", duration.toString());
};

function testDurFmtFormatShortFRText() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-FR",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1a 1mo 1sm 1j 1h 1m 1s 1ms", duration.toString());
};

function testDurFmtFormatShortFRClock() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-FR",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1a 1mo 1sm 1j 01:01:01", duration.toString());
};

function testDurFmtFormatMediumFR() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-FR",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 an 1 mo 1 sm 1 jr 1 hr 1 mn 1 se 1 Ms", duration.toString());
};

function testDurFmtFormatLongFR() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-FR",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 an 1 mois 1 sem 1 jr 1 hr 1 min 1 sec 1 Ms", duration.toString());
};

function testDurFmtFormatFullFR() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-FR",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1 an, 1 mois, 1 semaine, 1 jour, 1 heure, 1 minute, 1 seconde et 1 milliseconde", duration.toString());
};


function testDurFmtAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	length: "full",
    	sync: false,
    	locale: "en-GB",
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2,
    	    	millisecond: 2
    	    });
    	    assertEquals("2 years, 2 months, 2 weeks, 2 days, 2 hours, 2 minutes, 2 seconds, and 2 milliseconds", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "fr-FR",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2,
    	    	millisecond: 2
    	    });
    	    assertEquals("2 ans, 2 mois, 2 semaines, 2 jours, 2 heures, 2 minutes, 2 secondes et 2 millisecondes", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "fr-FR",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1,
    	    	millisecond: 1
    	    });
    	    assertEquals("1a 1mo 1sm 1j 01:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for bg-BG

function testDurFmtBGFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "bg-BG",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð³ 1Ð¼ 1Ñ 1Ð´ 1Ñ 1Ð¼ 1Ñ", duration.toString());
};

function testDurFmtBGFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "bg-BG",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð³ 1Ð¼ 1Ñ 1Ð´ 1Ñ 1Ð¼ 1Ñ", duration.toString());
};

function testDurFmtBGFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "bg-BG",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð³ 1Ð¼ 1Ñ 1Ð´ 1:01:01", duration.toString());
};

function testDurFmtBGFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "bg-BG",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ð³Ð¾ 1 Ð¼Ðµ 1 ÑÐµ 1 Ð´Ð½. 1 ÑÐ°Ñ 1 Ð¼Ð¸Ð½ 1 ÑÐµÐº", duration.toString());
};

function testDurFmtBGFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "bg-BG",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ð³Ð¾Ð´ 1 Ð¼ÐµÑ 1 ÑÐµÐ´ 1 Ð´ÐµÐ½ 1 ÑÐ°Ñ 1 Ð¼Ð¸Ð½ 1 ÑÐµÐº", duration.toString());
};

function testDurFmtBGFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "bg-BG",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ð³Ð¾Ð´Ð¸Ð½Ð°, 1 Ð¼ÐµÑÐµÑ, 1 ÑÐµÐ´Ð¼Ð¸ÑÐ°, 1 Ð´ÐµÐ½, 1 ÑÐ°Ñ, 1 Ð¼Ð¸Ð½ÑÑÐ° Ð¸ 1 ÑÐµÐºÑÐ½Ð´Ð°", duration.toString());
};


function testDurFmtBGAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "bg-BG",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 Ð³Ð¾Ð´Ð¸Ð½Ð¸, 2 Ð¼ÐµÑÐµÑÐ°, 2 ÑÐµÐ´Ð¼Ð¸ÑÐ¸, 2 Ð´ÐµÐ½Ð°, 2 ÑÐ°ÑÐ°, 2 Ð¼Ð¸Ð½ÑÑÐ¸ Ð¸ 2 ÑÐµÐºÑÐ½Ð´Ð¸", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtBGAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "bg-BG",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 Ð³Ð¾Ð´Ð¸Ð½Ð¸, 2 Ð¼ÐµÑÐµÑÐ°, 2 ÑÐµÐ´Ð¼Ð¸ÑÐ¸, 2 Ð´ÐµÐ½Ð°, 2 ÑÐ°ÑÐ°, 2 Ð¼Ð¸Ð½ÑÑÐ¸ Ð¸ 2 ÑÐµÐºÑÐ½Ð´Ð¸", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

//test cases for bs-Latn-BA

function testDurFmtBSLatnFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "bs-Latn-BA",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1n 1d 1s 1m 1s", duration.toString());
};

function testDurFmtBSLatnFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "bs-Latn-BA",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1n 1d 1s 1m 1s", duration.toString());
};

function testDurFmtBSLatnFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "bs-Latn-BA",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1n 1d 1:01:01", duration.toString());
};

function testDurFmtBSLatnFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "bs-Latn-BA",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 god 1 mo 1 wk 1 dy 1 hr 1 mi 1 se", duration.toString());
};

function testDurFmtBSLatnFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "bs-Latn-BA",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 god 1 mes 1 ned 1 dan 1 sat 1 min 1 sek", duration.toString());
};

function testDurFmtBSLatnFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "bs-Latn-BA",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 godina, 1 mesec, 1 nedelja, 1 dan, 1 sat, 1 minut i 1 sekunda", duration.toString());
};


function testDurFmtBSLatnAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "bs-Latn-BA",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 godine, 2 meseca, 2 nedelje, 2 dana, 2 sata, 2 minute i 2 sekunde", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

//test cases for cs-CZ

function testDurFmtCSFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "cs-CZ",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1r 1m 1t 1d 1h 1m 1s", duration.toString());
};

function testDurFmtCSFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "cs-CZ",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1r 1m 1t 1d 1h 1m 1s", duration.toString());
};

function testDurFmtCSFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "cs-CZ",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1r 1m 1t 1d 1:01:01", duration.toString());
};

function testDurFmtCSFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "cs-CZ",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 rok 1 mÄ 1 tÃ½ 1 den 1 ho 1 mi 1 se", duration.toString());
};

function testDurFmtCSFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "cs-CZ",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 rok 1 mÄs 1 tÃ½d 1 den 1 hod 1 min 1 sek", duration.toString());
};

function testDurFmtCSFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "cs-CZ",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 rok, 1 mÄsÃ­c, 1 tÃ½den, 1 den, 1 hodina, 1 minuta a 1 sekunda", duration.toString());
};


function testDurFmtCSAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "cs-CZ",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 roky, 2 mÄsÃ­ce, 2 tÃ½dny, 2 dny, 2 hodiny, 2 minuty a 2 sekundy", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

//test cases for da-DK


function testDurFmtDAFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "da-DK",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã¥ 1mÃ¥ 1u 1d 1t 1m 1s", duration.toString());
};

function testDurFmtDAFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "da-DK",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã¥ 1mÃ¥ 1u 1d 1t 1m 1s", duration.toString());
};

function testDurFmtDAFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "da-DK",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã¥ 1mÃ¥ 1u 1d 1.01.01", duration.toString());
};

function testDurFmtDAFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "da-DK",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã¥r 1 md 1 ug 1 da 1 ti 1 mi 1 se", duration.toString());
};

function testDurFmtDAFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "da-DK",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã¥r 1 mdr. 1 uge 1 dag 1 time 1 min. 1 sek.", duration.toString());
};

function testDurFmtDAFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "da-DK",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã¥r, 1 mÃ¥ned, 1 uge, 1 dag, 1 time, 1 minut og 1 sekund", duration.toString());
};


function testDurFmtDAAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "da-DK",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 Ã¥r, 2 mÃ¥neder, 2 uger, 2 dage, 2 timer, 2 minutter og 2 sekunder", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};


//test cases for el-GR


function testDurFmtGRFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "el-GR",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Î­ 1Î¼ 1Îµ 1Î· 1Ï 1Î» 1Î´", duration.toString());
};

function testDurFmtGRFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "el-GR",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Î­ 1Î¼ 1Îµ 1Î· 1Ï 1Î» 1Î´", duration.toString());
};

function testDurFmtGRFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "el-GR",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Î­ 1Î¼ 1Îµ 1Î· 1:01:01", duration.toString());
};

function testDurFmtGRFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "el-GR",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Î­Ï 1 Î¼Î® 1 ÎµÎ² 1 Î·Î¼ 1 ÏÏÎ± 1 Î»Îµ 1 Î´Îµ", duration.toString());
};

function testDurFmtGRFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "el-GR",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Î­ÏÎ¿Ï 1 Î¼Î®Î½ 1 ÎµÎ²Î´ 1 Î·Î¼Î­ 1 ÏÏÎ± 1 Î»ÎµÏ 1 Î´ÎµÏ", duration.toString());
};

function testDurFmtGRFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "el-GR",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Î­ÏÎ¿Ï, 1 Î¼Î®Î½Î±Ï, 1 ÎµÎ²Î´Î¿Î¼Î¬Î´Î±, 1 Î·Î¼Î­ÏÎ±, 1 ÏÏÎ±, 1 Î»ÎµÏÏÏ ÎºÎ±Î¹ 1 Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ¿", duration.toString());
};


function testDurFmtGRAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "el-GR",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 Î­ÏÎ·, 2 Î¼Î®Î½ÎµÏ, 2 ÎµÎ²Î´Î¿Î¼Î¬Î´ÎµÏ, 2 Î·Î¼Î­ÏÎµÏ, 2 ÏÏÎµÏ, 2 Î»ÎµÏÏÎ¬ ÎºÎ±Î¹ 2 Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ±", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

//test cases for es-CO


function testDurFmtESFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "es-CO",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1sm 1d 1h 1m 1s", duration.toString());
};

function testDurFmtESFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "es-CO",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1sm 1d 1h 1m 1s", duration.toString());
};

function testDurFmtESFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "es-CO",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1sm 1d 01:01:01", duration.toString());
};

function testDurFmtESFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "es-CO",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 aÃ± 1 me 1 sm 1 dÃ­ 1 hr 1 mn 1 sg", duration.toString());
};

function testDurFmtESFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "es-CO",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 aÃ±o 1 mes 1 sem 1 dÃ­a 1 hor 1 min 1 seg", duration.toString());
};

function testDurFmtESFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "es-CO",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 aÃ±o, 1 mes, 1 semana, 1 dÃ­a, 1 hora, 1 minuto y 1 segundo", duration.toString());
};


function testDurFmtESAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "es-CO",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 aÃ±os, 2 meses, 2 semanas, 2 dÃ­as, 2 horas, 2 minutos y 2 segundos", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

//test cases for estonian

function testDurFmtETFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "et-EE",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1k 1n 1Ã¶ 1t 1m 1s", duration.toString());
};

function testDurFmtETFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "et-EE",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1k 1n 1Ã¶ 1t 1m 1s", duration.toString());
};

function testDurFmtETFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "et-EE",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1k 1n 1Ã¶ 1:01.01", duration.toString());
};

function testDurFmtETFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "et-EE",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 aa 1 ku 1 nÃ¤ 1 Ã¶Ã¶ 1 tu 1 min 1 se", duration.toString());
};

function testDurFmtETFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "et-EE",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 aas 1 kuu 1 nÃ¤d 1 Ã¶Ã¶p 1 tun 1 min 1 sek", duration.toString());
};

function testDurFmtETFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "et-EE",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 aasta, 1 kuu, 1 nÃ¤dal, 1 Ã¶Ã¶pÃ¤ev, 1 tundi, 1 minut ja 1 sekund", duration.toString());
};


function testDurFmtETAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "et-EE",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 aastat, 2 kuud, 2 nÃ¤dalat, 2 Ã¶Ã¶pÃ¤eva, 2 tundi, 2 minutit ja 2 sekundit", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};


//test cases for fa-IR


function testDurFmtFAFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "fa-IR",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û±Ø³ Û±Ù Û±Ù Û±Ø± Û±Ø³ Û±Ø¯ Û±Ø«", duration.toString());
};

function testDurFmtFAFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "fa-IR",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û±Ø³ Û±Ù Û±Ù Û±Ø± Û±Ø³ Û±Ø¯ Û±Ø«", duration.toString());
};

function testDurFmtFAFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "fa-IR",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û±Ø³ Û±Ù Û±Ù Û±Ø± âÛ±:Û°Û±:Û°Û±", duration.toString());
};

function testDurFmtFAFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "fa-IR",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û± Ø³Ø§Ù Û± ÙØ§Ù Û± ÙÙ Û± Ø±ÙØ² Û± Ø³Ø§ Û± Ø¯Ù Û± Ø«Ø§", duration.toString());
};

function testDurFmtFAFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "fa-IR",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û± Ø³Ø§Ù Û± ÙØ§Ù Û± ÙÙØªÙ Û± Ø±ÙØ² Û± Ø³Ø§Ø¹Øª Û± Ø¯ÙÛ Û± Ø«Ø§Ù", duration.toString());
};

function testDurFmtFAFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "fa-IR",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û± Ø³Ø§ÙØâ Û± ÙØ§ÙØâ Û± ÙÙØªÙØâ Û± Ø±ÙØ²Øâ Û± Ø³Ø§Ø¹ØªØâ Û± Ø¯ÙÛÙÙØ Ù Û± Ø«Ø§ÙÛÙ", duration.toString());
};


function testDurFmtFAAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "fa-IR",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("Û² Ø³Ø§ÙØâ Û² ÙØ§ÙØâ Û² ÙÙØªÙØâ Û² Ø±ÙØ²Øâ Û² Ø³Ø§Ø¹ØªØâ Û² Ø¯ÙÛÙÙØ Ù Û² Ø«Ø§ÙÛÙ", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};



//test cases for fi-FI


function testDurFmtFIFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "fi-FI",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1v 1k 1vk 1p 1t 1m 1s", duration.toString());
};

function testDurFmtFIFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "fi-FI",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1v 1k 1vk 1p 1t 1m 1s", duration.toString());
};

function testDurFmtFIFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "fi-FI",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1v 1k 1vk 1p 1.01.01", duration.toString());
};

function testDurFmtFIFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "fi-FI",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 vs 1 kk 1 vk 1 pv 1 tt 1 mn 1 sk", duration.toString());
};

function testDurFmtFIFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "fi-FI",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 vuo 1 kuu 1 vii 1 pÃ¤i 1 tun 1 min 1 sek", duration.toString());
};

function testDurFmtFIFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "fi-FI",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 vuosi, 1 kuukausi, 1 viikko, 1 pÃ¤ivÃ¤, 1 tunti, 1 minuutti ja 1 sekunti", duration.toString());
};


function testDurFmtFIAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "fi-FI",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 vuotta, 2 kuukautta, 2 viikkoa, 2 pÃ¤ivÃ¤Ã¤, 2 tuntia, 2 minuuttia ja 2 sekuntia", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};


//test cases for fr-CA

function testDurFmtFRCAFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-CA",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1mo 1sm 1j 1h 1m 1s", duration.toString());
};

function testDurFmtFRCAFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-CA",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1mo 1sm 1j 1h 1m 1s", duration.toString());
};

function testDurFmtFRCAFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-CA",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1mo 1sm 1j 01:01:01", duration.toString());
};

function testDurFmtFRCAFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-CA",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 an 1 mo 1 sm 1 jr 1 hr 1 mn 1 se", duration.toString());
};

function testDurFmtFRCAFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-CA",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 an 1 mois 1 sem 1 jr 1 hr 1 min 1 sec", duration.toString());
};

function testDurFmtFRCAFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "fr-CA",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 an, 1 mois, 1 semaine, 1 jour, 1 heure, 1 minute et 1 seconde", duration.toString());
};


function testDurFmtFRCAAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "fr-CA",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 ans, 2 mois, 2 semaines, 2 jours, 2 heures, 2 minutes et 2 secondes", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtFRCAAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "fr-CA",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 ans, 2 mois, 2 semaines, 2 jours, 2 heures, 2 minutes et 2 secondes", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtFRCAFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "fr-CA",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1a 1mo 1sm 1j 01:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for ga-IE

function testDurFmtGAFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "ga-IE",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1y 1m 1w 1d 1h 1m 1s", duration.toString());
};

function testDurFmtGAFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "ga-IE",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1y 1m 1w 1d 1h 1m 1s", duration.toString());
};

function testDurFmtGAFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "ga-IE",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1y 1m 1w 1d 1:01:01", duration.toString());
};

function testDurFmtGAFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "ga-IE",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 yr 1 mo 1 wk 1 dy 1 hr 1 mi 1 se", duration.toString());
};

function testDurFmtGAFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "ga-IE",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 y 1 m 1 w 1 d 1 h 1 min 1 s", duration.toString());
};

function testDurFmtGAFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "ga-IE",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 y, 1 m, 1 w, 1 d, 1 h, 1 min, 1 s", duration.toString());
};




function testDurFmtGAAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ga-IE",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 y, 2 m, 2 w, 2 d, 2 h, 2 min, 2 s", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtGAFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ga-IE",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1y 1m 1w 1d 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for hebrew

function testDurFmtHEFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "he-IL",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1×© 1× 1×© â1 ××× 1×© 1× 1×©", duration.toString());
};

function testDurFmtHEFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "he-IL",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1×© 1× 1×© â1 ××× 1×© 1× 1×©", duration.toString());
};

function testDurFmtHEFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "he-IL",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1×© 1× 1×© â1 ××× 01:01:01", duration.toString());
};

function testDurFmtHEFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "he-IL",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 ×©× × 1 ×× 1 ×©× 1 ××× 1 ×©×¢× 1 ××§×³ 1 ×©× ×³", duration.toString());
};

function testDurFmtHEFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "he-IL",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 ×©× × 1 ××××© 1 ×©×××¢ â1 ××× 1 ×©×¢× 1 ××§× 1 ×©× ××", duration.toString());
};

function testDurFmtHEFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "he-IL",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 ×©× ×, 1 ××××©, 1 ×©×××¢, â1 ×××, 1 ×©×¢×, 1 ××§× ×1 ×©× ××", duration.toString());
};




function testDurFmtHEAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "he-IL",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 ×©× ××, 2 ××××©××, 2 ×©×××¢××ª, 2 ××××, 2 ×©×¢××ª, 2 ××§××ª ×2 ×©× ×××ª", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtHEFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "he-IL",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1×© 1× 1×© â1 ××× 01:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for hi-IN

function testDurFmtHIFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "hi-IN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¤¸ 1à¤® 1à¤¸ 1à¤¦ 1à¤ 1à¤® 1à¤¸", duration.toString());
};

function testDurFmtHIFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "hi-IN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¤¸ 1à¤® 1à¤¸ 1à¤¦ 1à¤ 1à¤® 1à¤¸", duration.toString());
};

function testDurFmtHIFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "hi-IN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¤¸ 1à¤® 1à¤¸ 1à¤¦ 1:01:01", duration.toString());
};

function testDurFmtHIFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "hi-IN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¤¸à¤¾à¤² 1 à¤®à¤¹ 1 à¤¸à¤ª 1 à¤¦à¤¿. 1 à¤à¤. 1 à¤®à¤¿ 1 à¤¸à¥", duration.toString());
};

function testDurFmtHIFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "hi-IN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¤¸à¤¾à¤² 1 à¤®à¤¹à¥ 1 à¤¸à¤ªà¥ 1 à¤¦à¤¿à¤¨ 1 à¤à¤à¤à¤¾ 1 à¤®à¤¿à¤¨à¤ 1 à¤¸à¥à¤", duration.toString());
};

function testDurFmtHIFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "hi-IN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¤¸à¤¾à¤², 1 à¤®à¤¹à¥à¤¨à¤¾, 1 à¤¸à¤ªà¥à¤¤à¤¾à¤¹, 1 à¤¦à¤¿à¤¨, 1 à¤à¤à¤à¤¾, 1 à¤®à¤¿à¤¨à¤, à¤à¤° 1 à¤¸à¥à¤à¤à¤¡", duration.toString());
};


function testDurFmtHIAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "hi-IN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 à¤¸à¤¾à¤², 2 à¤®à¤¹à¥à¤¨à¥, 2 à¤¸à¤ªà¥à¤¤à¤¾à¤¹, 2 à¤¦à¤¿à¤¨, 2 à¤à¤à¤à¥, 2 à¤®à¤¿à¤¨à¤, à¤à¤° 2 à¤¸à¥à¤à¤à¤¡", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtHIFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "hi-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1à¤¸ 1à¤® 1à¤¸ 1à¤¦ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for marathi mr-IN

function testDurFmtMRFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "mr-IN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¤µ 1à¤® 1à¤ 1à¤¦ 1à¤¤ 1à¤® 1à¤¸", duration.toString());
};

function testDurFmtMRFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "mr-IN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¤µ 1à¤® 1à¤ 1à¤¦ 1à¤¤ 1à¤® 1à¤¸", duration.toString());
};

function testDurFmtMRFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "mr-IN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¤µ 1à¤® 1à¤ 1à¤¦ 1:01:01", duration.toString());
};

function testDurFmtMRFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "mr-IN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¤µà¤° 1 à¤®à¤¹ 1 à¤à¤  1 à¤¦à¤¿ 1 à¤¤à¤¾à¤¸ 1 à¤®à¤¿ 1 à¤¸à¥", duration.toString());
};

function testDurFmtMRFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "mr-IN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¤µà¤°à¥à¤· 1 à¤®à¤¹à¤¿ 1 à¤à¤ à¤µ 1 à¤¦à¤¿à¤µà¤¸ 1 à¤¤à¤¾à¤¸ 1 à¤®à¤¿à¤¨ 1 à¤¸à¥à¤", duration.toString());
};

function testDurFmtMRFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "mr-IN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¤µà¤°à¥à¤·, 1 à¤®à¤¹à¤¿à¤¨à¤¾, 1 à¤à¤ à¤µà¤¡à¤¾, 1 à¤¦à¤¿à¤µà¤¸, 1 à¤¤à¤¾à¤¸, 1 à¤®à¤¿à¤¨à¤¿à¤ à¤à¤£à¤¿ 1 à¤¸à¥à¤à¤à¤¦", duration.toString());
};


function testDurFmtMRAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "mr-IN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 à¤µà¤°à¥à¤·à¥, 2 à¤®à¤¹à¤¿à¤¨à¥, 2 à¤à¤ à¤µà¤¡à¥, 2 à¤¦à¤¿à¤µà¤¸, 2 à¤¤à¤¾à¤¸, 2 à¤®à¤¿à¤¨à¤¿à¤à¥ à¤à¤£à¤¿ 2 à¤¸à¥à¤à¤à¤¦", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};


function testDurFmtMRFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "mr-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1à¤µ 1à¤® 1à¤ 1à¤¦ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//testa cases for Telugu (te-IN)

function testDurFmtTEFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "te-IN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à°¸ 1à°¨ 1à°µ 1à°° 1à° 1à°¨ 1à°¸", duration.toString());
};

function testDurFmtTEFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "te-IN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à°¸ 1à°¨ 1à°µ 1à°° 1à° 1à°¨ 1à°¸", duration.toString());
};

function testDurFmtTEFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "te-IN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à°¸ 1à°¨ 1à°µ 1à°° 1:01:01", duration.toString());
};


function testDurFmtTEFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "te-IN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à°¸à° 1 à°¨à±à°² 1 à°µà°¾ 1 à°°à± 1 à°à°à° 1 à°¨à°¿ 1 à°¸à±", duration.toString());
};

function testDurFmtTEFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "te-IN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à°¸à°à°µ 1 à°¨à±à°² 1 à°µà°¾à°°à° 1 à°°à±à°à± 1 à°à°à° 1 à°¨à°¿à°® 1 à°¸à±à°", duration.toString());
};

function testDurFmtTEFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "te-IN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à°¸à°à°µà°¤à±à°¸à°°à°, 1 à°¨à±à°², 1 à°µà°¾à°°à°, 1 à°°à±à°à±, 1 à°à°à°, 1 à°¨à°¿à°®à°¿à°·à° à°®à°°à°¿à°¯à± 1 à°¸à±à°à°¨à±", duration.toString());
};


function testDurFmtTEAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "te-IN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 à°¸à°à°µà°¤à±à°¸à°°à°¾à°²à±, 2 à°¨à±à°²à°²à±, 2 à°µà°¾à°°à°¾à°²à±, 2 à°°à±à°à±à°²à±, 2 à°à°à°à°²à±, 2 à°¨à°¿à°®à°¿à°·à°¾à°²à± à°®à°°à°¿à°¯à± 2 à°¸à±à°à°¨à±à°²à±", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtTEFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "te-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1à°¸ 1à°¨ 1à°µ 1à°° 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for kannada(kn-IN)

function testDurFmtKNFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "kn-IN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à²µ 1à²¤ 1à²µ 1à²¦ 1à² 1à²¨ 1à²¸", duration.toString());
};

function testDurFmtKNFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "kn-IN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à²µ 1à²¤ 1à²µ 1à²¦ 1à² 1à²¨ 1à²¸", duration.toString());
};

function testDurFmtKNFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "kn-IN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à²µ 1à²¤ 1à²µ 1à²¦ 1:01:01", duration.toString());
};

function testDurFmtKNFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "kn-IN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à²µà²° 1 à²¤à²¿ 1 à²µà²¾ 1 à²¦à²¿à²¨ 1 à²à². 1 à²¨à²¿ 1 à²¸à³", duration.toString());
};

function testDurFmtKNFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "kn-IN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à²µà²°à³ 1 à²¤à²¿à² 1 à²µà²¾à²° 1 à²¦à²¿à²¨ 1 à²à²à² 1 à²¨à²¿à²® 1 à²¸à³à²", duration.toString());
};

function testDurFmtKNFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "kn-IN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à²µà²°à³à²·à²à²³à³, 1 à²¤à²¿à²à²à²³à³à²à²³à³, 1 à²µà²¾à²°à²à²³à³, 1 à²¦à²¿à²¨à²à²³à³, 1 à²à²à²à³à²à²³à³, 1 à²¨à²¿à²®à²¿à²·à²à²³à³, à²®à²¤à³à²¤à³ 1 à²¸à³à²à³à²à²¡à³à²à²³à³", duration.toString());
};


function testDurFmtKNAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "kn-IN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 à²µà²°à³à²·à²à²³à³, 2 à²¤à²¿à²à²à²³à³à²à²³à³, 2 à²µà²¾à²°à²à²³à³, 2 à²¦à²¿à²¨à²à²³à³, 2 à²à²à²à³à²à²³à³, 2 à²¨à²¿à²®à²¿à²·à²à²³à³, à²®à²¤à³à²¤à³ 2 à²¸à³à²à³à²à²¡à³à²à²³à³", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtKNFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "kn-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1à²µ 1à²¤ 1à²µ 1à²¦ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for tamil(ta-IN)

function testDurFmtTAFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "ta-IN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à®µ 1à®® 1à®µ 1à®¨ 1à®® 1à®¨ 1à®µ", duration.toString());
};

function testDurFmtTAFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "ta-IN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à®µ 1à®® 1à®µ 1à®¨ 1à®® 1à®¨ 1à®µ", duration.toString());
};

function testDurFmtTAFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "ta-IN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à®µ 1à®® 1à®µ 1à®¨ 1:01:01", duration.toString());
};

function testDurFmtTAFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "ta-IN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à®µà®° 1 à®®à®¾ 1 à®µà®¾ 1 à®¨à®¾ 1 à®®à®£ 1 à®¨à®¿ 1 à®µà®¿", duration.toString());
};

function testDurFmtTAFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "ta-IN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à®µà®°à¯ 1 à®®à®¾à®¤ 1 à®µà®¾à®° 1 à®¨à®¾à®³à¯ 1 à®®à®£à®¿ 1 à®¨à®¿à®® 1 à®µà®¿à®©", duration.toString());
};

function testDurFmtTAFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "ta-IN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à®µà®°à¯à®à®®à¯, 1 à®®à®¾à®¤à®®à¯, 1 à®µà®¾à®°à®®à¯, 1 à®¨à®¾à®³à¯, 1 à®®à®£à®¿à®¨à¯à®°à®®à¯, 1 à®¨à®¿à®®à®¿à®à®®à¯ à®®à®±à¯à®±à¯à®®à¯ 1 à®µà®¿à®©à®¾à®à®¿", duration.toString());
};


function testDurFmtTAAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ta-IN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 à®µà®°à¯à®à®à¯à®à®³à¯, 2 à®®à®¾à®¤à®à¯à®à®³à¯, 2 à®µà®¾à®°à®à¯à®à®³à¯, 2 à®¨à®¾à®à¯à®à®³à¯, 2 à®®à®£à®¿à®¨à¯à®°à®®à¯, 2 à®¨à®¿à®®à®¿à®à®à¯à®à®³à¯ à®®à®±à¯à®±à¯à®®à¯ 2 à®µà®¿à®©à®¾à®à®¿à®à®³à¯", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtTAFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ta-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1à®µ 1à®® 1à®µ 1à®¨ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for Malaylam(ml-IN)

function testDurFmtMLFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "ml-IN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à´µ 1à´® 1à´ 1à´¦ 1à´® 1à´® 1à´¸", duration.toString());
};

function testDurFmtMLFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "ml-IN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à´µ 1à´® 1à´ 1à´¦ 1à´® 1à´® 1à´¸", duration.toString());
};

function testDurFmtMLFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "ml-IN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à´µ 1à´® 1à´ 1à´¦ 1:01:01", duration.toString());
};

function testDurFmtMLFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "ml-IN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à´µàµ¼ 1 à´®à´¾ 1 à´à´´ 1 à´¦à´¿ 1 à´®à´£ 1 à´®à´¿ 1 à´¸àµ", duration.toString());
};

function testDurFmtMLFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "ml-IN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à´µàµ¼à´·à´ 1 à´®à´¾à´¸à´ 1 à´à´´àµà´ 1 à´¦à´¿à´µ 1 à´®à´£à´¿ 1 à´®à´¿à´¨ 1 à´¸àµà´", duration.toString());
};

function testDurFmtMLFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "ml-IN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à´µàµ¼à´·à´, 1 à´®à´¾à´¸à´, 1 à´à´´àµà´, 1 à´¦à´¿à´µà´¸à´, 1 à´®à´£à´¿à´àµà´àµàµ¼, 1 à´®à´¿à´¨à´¿à´àµà´àµ,  à´à´¨àµà´¨à´¿à´µ1 à´¸àµà´àµà´à´¨àµà´±àµ", duration.toString());
};


function testDurFmtMLAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ml-IN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 à´µàµ¼à´·à´, 2 à´®à´¾à´¸à´, 2 à´à´´àµà´, 2 à´¦à´¿à´µà´¸à´, 2 à´®à´£à´¿à´àµà´àµàµ¼, 2 à´®à´¿à´¨à´¿à´àµà´àµ,  à´à´¨àµà´¨à´¿à´µ2 à´¸àµà´àµà´à´¨àµà´±àµ", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtMLFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ml-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1à´µ 1à´® 1à´ 1à´¦ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for Gujrati(gu-IN)

function testDurFmtGUFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "gu-IN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1àªµ 1àª® 1àª 1àª¦ 1àª 1àª® 1àª¸", duration.toString());
};

function testDurFmtGUFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "gu-IN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1àªµ 1àª® 1àª 1àª¦ 1àª 1àª® 1àª¸", duration.toString());
};

function testDurFmtGUFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "gu-IN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1àªµ 1àª® 1àª 1àª¦ 1:01:01", duration.toString());
};

function testDurFmtGUFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "gu-IN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 àªµàª° 1 àª®àª¹ 1 àªàª . 1 àª¦àª¿ 1 àªàª² 1 àª®àª¿ 1 àª¸à«", duration.toString());
};

function testDurFmtGUFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "gu-IN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 àªµàª°à«àª· 1 àª®àª¹àª¿ 1 àªàª àªµ 1 àª¦àª¿àªµàª¸ 1 àªàª²àª¾àª 1 àª®àª¿àª¨ 1 àª¸à«àª", duration.toString());
};

function testDurFmtGUFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "gu-IN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 àªµàª°à«àª·, 1 àª®àª¹àª¿àª¨à«, 1 àªàª àªµàª¾àª¡àª¿àª¯à«àª, 1 àª¦àª¿àªµàª¸, 1 àªàª²àª¾àª, 1 àª®àª¿àª¨àª¿àª àªàª¨à« 1 àª¸à«àªàªàª¡", duration.toString());
};


function testDurFmtGUAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "gu-IN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 àªµàª°à«àª·, 2 àª®àª¹àª¿àª¨à«, 2 àªàª àªµàª¾àª¡àª¿àª¯àª¾, 2 àª¦àª¿àªµàª¸, 2 àªàª²àª¾àª, 2 àª®àª¿àª¨àª¿àª àªàª¨à« 2 àª¸à«àªàªàª¡", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtGUFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "gu-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1àªµ 1àª® 1àª 1àª¦ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for Bengali(bn-IN)

function testDurFmtBNFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("à§§à¦¬ à§§à¦® à§§à¦¸ à§§à¦¦ à§§à¦ à§§à¦® à§§à¦¸", duration.toString());
};

function testDurFmtBNFormatShortDefaultStyleNative() {
    var fmt = new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "short",
    	useNative: true
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("à§§à¦¬ à§§à¦® à§§à¦¸ à§§à¦¦ à§§à¦ à§§à¦® à§§à¦¸", duration.toString());
};

function testDurFmtBNFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("à§§à¦¬ à§§à¦® à§§à¦¸ à§§à¦¦ à§§à¦ à§§à¦® à§§à¦¸", duration.toString());
};

function testDurFmtBNFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("à§§à¦¬ à§§à¦® à§§à¦¸ à§§à¦¦ à§§:à§¦à§§:à§¦à§§", duration.toString());
};

function testDurFmtBNFormatShortClockNative() {
    var fmt = new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "short",
    	style: "clock",
    	useNative: true
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("à§§à¦¬ à§§à¦® à§§à¦¸ à§§à¦¦ à§§:à§¦à§§:à§¦à§§", duration.toString());
};

function testDurFmtBNFormatShortClockWestern() {
    var fmt = new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "short",
    	style: "clock",
    	useNative: false
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¦¬ 1à¦® 1à¦¸ 1à¦¦ 1:01:01", duration.toString());
};

function testDurFmtBNFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("à§§ à¦¬à¦à¦° à§§ à¦®à¦¾à¦¸ à§§ à¦¸à¦ª à§§ à¦¦à¦¿à¦¨ à§§ à¦à¦¨ à§§ à¦®à¦¿ à§§ à¦¸à§", duration.toString());
};

function testDurFmtBNFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("à§§ à¦¬à¦à¦° à§§ à¦®à¦¾à¦¸ à§§ à¦¸à¦ªà§ à§§ à¦¦à¦¿à¦¨ à§§ à¦à¦¨à§ à§§ à¦®à¦¿à¦¨ à§§ à¦¸à§à¦", duration.toString());
};

function testDurFmtBNFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("à§§ à¦¬à¦à¦°, à§§ à¦®à¦¾à¦¸, à§§ à¦¸à¦ªà§à¦¤à¦¾à¦¹, à§§ à¦¦à¦¿à¦¨, à§§ à¦à¦¨à§à¦à¦¾, à§§ à¦®à¦¿à¦¨à¦¿à¦, à¦à¦¬à¦ à§§ à¦¸à§à¦à§à¦¨à§à¦¡", duration.toString());
};


function testDurFmtBNAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("à§¨ à¦¬à¦à¦°, à§¨ à¦®à¦¾à¦¸, à§¨ à¦¸à¦ªà§à¦¤à¦¾à¦¹, à§¨ à¦¦à¦¿à¦¨, à§¨ à¦à¦¨à§à¦à¦¾, à§¨ à¦®à¦¿à¦¨à¦¿à¦, à¦à¦¬à¦ à§¨ à¦¸à§à¦à§à¦¨à§à¦¡", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtBNFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("à§§à¦¬ à§§à¦® à§§à¦¸ à§§à¦¦ à§§:à§¦à§§:à§¦à§§", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

function testDurFmtBNFormatShortClockAsyncWestern() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "bn-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	useNative: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1à¦¬ 1à¦® 1à¦¸ 1à¦¦ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for Assamese(as-IN)
/*
function testDurFmtASFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "as-IN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("y", duration.toString());
};

function testDurFmtASFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "as-IN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("y", duration.toString());
};

function testDurFmtASFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "as-IN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à®µ 1à®® 1à®µ 1à®¨ 1:01:01", duration.toString());
};

function testDurFmtASFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "as-IN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("y", duration.toString());
};

function testDurFmtASFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "as-IN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("y", duration.toString());
};

function testDurFmtASFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "as-IN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("y", duration.toString());
};


function testDurFmtASAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "as-IN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("y", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtASFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "as-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("y", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};
*/

//test cases for Punjabi(pa-IN)

function testDurFmtPAFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "pa-IN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¨¸ 1à¨® 1à¨¹ 1à¨¦à¨¿ 1à¨à©° 1à¨®à¨¿à©° 1à¨¸", duration.toString());
};

function testDurFmtPAFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "pa-IN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¨¸ 1à¨® 1à¨¹ 1à¨¦à¨¿ 1à¨à©° 1à¨®à¨¿à©° 1à¨¸", duration.toString());
};

function testDurFmtPAFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "pa-IN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¨¸ 1à¨® 1à¨¹ 1à¨¦à¨¿ 1:01:01", duration.toString());
};

function testDurFmtPAFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "pa-IN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¨¸à¨¾ 1 à¨® 1 à¨¹à¨«à¨¼ 1 à¨¦à¨¿ 1 à¨à©°à¨à© 1 à¨®à¨¿à©° 1 à¨¸à¨", duration.toString());
};

function testDurFmtPAFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "pa-IN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¨¸à¨¾à¨² 1 à¨®à¨¹à©à¨¨à© 1 à¨¹à¨«à¨¼à¨¤à© 1 à¨¦à¨¿à¨¨ 1 à¨à©°à¨à© 1 à¨®à¨¿à©°à¨ 1 à¨¸à¨à¨¿à©°à¨", duration.toString());
};

function testDurFmtPAFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "pa-IN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¨¸à¨¾à¨², 1 à¨®à¨¹à©à¨¨à©, 1 à¨¹à¨«à¨¼à¨¤à©, 1 à¨¦à¨¿à¨¨, 1 à¨à©°à¨à©, 1 à¨®à¨¿à©°à¨, 1 à¨¸à¨à¨¿à©°à¨", duration.toString());
};


function testDurFmtPAAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "pa-IN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 à¨¸à¨¾à¨², 2 à¨®à¨¹à©à¨¨à©, 2 à¨¹à¨«à¨¼à¨¤à©, 2 à¨¦à¨¿à¨¨, 2 à¨à©°à¨à©, 2 à¨®à¨¿à©°à¨, 2 à¨¸à¨à¨¿à©°à¨", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtPAFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "pa-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1à¨¸ 1à¨® 1à¨¹ 1à¨¦à¨¿ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for Urdu(ur-IN)

function testDurFmtURFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "ur-IN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û±Ø³ Û±Ù Û±Û Û±Ø¯ Û±Ú¯ Û±Ù Û±Ø³", duration.toString());
};

function testDurFmtURFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "ur-IN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û±Ø³ Û±Ù Û±Û Û±Ø¯ Û±Ú¯ Û±Ù Û±Ø³", duration.toString());
};

function testDurFmtURFormatShortTextWestern() {
    var fmt = new ilib.DurFmt({
    	locale: "ur-IN",
    	length: "short",
    	style: "text",
    	useNative: false
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ø³ 1Ù 1Û 1Ø¯ 1Ú¯ 1Ù 1Ø³", duration.toString());
};

function testDurFmtURFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "ur-IN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û±Ø³ Û±Ù Û±Û Û±Ø¯ Û±:Û°Û±:Û°Û±", duration.toString());
};

function testDurFmtURFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "ur-IN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û± Ø³Ø§Ù Û± ÙÛ Û± ÛÙ Û± Ø¯Ù Û± Ú¯Ú¾ Û± ÙÙÙ¹ Û± Ø³Û", duration.toString());
};

function testDurFmtURFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "ur-IN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û± Ø³Ø§Ù Û± ÙÛÛ Û± ÛÙØªÛ Û± Ø¯Ù Û± Ú¯Ú¾Ù Û± ÙÙÙ¹ Û± Ø³ÛÚ©", duration.toString());
};

function testDurFmtURFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "ur-IN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("Û± Ø³Ø§ÙØ Û± ÙÛÛÙÛØ Û± ÛÙØªÛØ Û± Ø¯ÙØ Û± Ú¯Ú¾ÙÙ¹ÛØ Û± ÙÙÙ¹Ø Ø§ÙØ± Û± Ø³ÛÚ©ÙÚ", duration.toString());
};

function testDurFmtURAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ur-IN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("Û² Ø³Ø§ÙØ Û² ÙÛÛÙÛØ Û² ÛÙØªÛØ Û² Ø¯ÙØ Û² Ú¯Ú¾ÙÙ¹ÛØ Û² ÙÙÙ¹Ø Ø§ÙØ± Û² Ø³ÛÚ©ÙÚ", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtURAsyncWithLocaleWestern() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ur-IN",
    	length: "full",
    	sync: false,
    	useNative: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 Ø³Ø§ÙØ 2 ÙÛÛÙÛØ 2 ÛÙØªÛØ 2 Ø¯ÙØ 2 Ú¯Ú¾ÙÙ¹ÛØ 2 ÙÙÙ¹Ø Ø§ÙØ± 2 Ø³ÛÚ©ÙÚ", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtURFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ur-IN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("Û±Ø³ Û±Ù Û±Û Û±Ø¯ Û±:Û°Û±:Û°Û±", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for croation

function testDurFmtHRFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "hr-HR",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1t 1d 1s 1m 1s", duration.toString());
};

function testDurFmtHRFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "hr-HR",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1t 1d 1s 1m 1s", duration.toString());
};

function testDurFmtHRFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "hr-HR",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1t 1d 1:01:01", duration.toString());
};

function testDurFmtHRFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "hr-HR",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 g. 1 mj. 1 tj. 1 dan 1 sat 1 min 1 se", duration.toString());
};

function testDurFmtHRFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "hr-HR",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 god 1 mje 1 tje 1 dan 1 sat 1 min 1 sek", duration.toString());
};

function testDurFmtHRFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "hr-HR",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 godina, 1 mjesec, 1 tjedan, 1 dan, 1 sat, 1 minuta i 1 sekunda", duration.toString());
};


function testDurFmtHRAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "hr-HR",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 godine, 2 mjeseca, 2 tjedna, 2 dana, 2 sata, 2 minute i 2 sekunde", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtHRFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "hr-HR",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1g 1m 1t 1d 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for hungarian


function testDurFmtHUFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "hu-HU",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã© 1h 1h 1n 1Ã³ 1p 1m", duration.toString());
};

function testDurFmtHUFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "hu-HU",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã© 1h 1h 1n 1Ã³ 1p 1m", duration.toString());
};

function testDurFmtHUFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "hu-HU",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã© 1h 1h 1n 1:01:01", duration.toString());
};

function testDurFmtHUFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "hu-HU",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã©v 1 hÃ³ 1 hÃ©t 1 nap 1 Ã³ra 1 pe 1 mp", duration.toString());
};

function testDurFmtHUFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "hu-HU",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã©v 1 hÃ³n 1 hÃ©t 1 nap 1 Ã³ra 1 perc 1 mÃ¡s", duration.toString());
};

function testDurFmtHUFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "hu-HU",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã©v, 1 hÃ³nap, 1 hÃ©t, 1 nap, 1 Ã³ra, 1 perc Ã©s 1 mÃ¡sodperc", duration.toString());
};


function testDurFmtHUAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "hu-HU",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 Ã©v, 2 hÃ³nap, 2 hÃ©t, 2 nap, 2 Ã³ra, 2 perc Ã©s 2 mÃ¡sodperc", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtHUFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "hu-HU",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1Ã© 1h 1h 1n 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for indonesia


function testDurFmtIDFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "id-ID",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1t 1b 1m 1h 1j 1m 1d", duration.toString());
};

function testDurFmtIDFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "id-ID",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1t 1b 1m 1h 1j 1m 1d", duration.toString());
};

function testDurFmtIDFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "id-ID",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1t 1b 1m 1h 1:01:01", duration.toString());
};

function testDurFmtIDFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "id-ID",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 th 1 bl 1 mg 1 hr 1 ja 1 mn 1 dt", duration.toString());
};

function testDurFmtIDFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "id-ID",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 thn 1 bln 1 mggu 1 hari 1 jam 1 mnt 1 dtk", duration.toString());
};

function testDurFmtIDFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "id-ID",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 tahun, 1 bulan, 1 minggu, 1 hari, 1 jam, 1 menit, dan 1 detik", duration.toString());
};


function testDurFmtIDAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "id-ID",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 tahun, 2 bulan, 2 minggu, 2 hari, 2 jam, 2 menit, dan 2 detik", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtIDFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "id-ID",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1t 1b 1m 1h 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for Italy


function testDurFmtITFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "it-IT",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1st 1g 1o 1m 1s", duration.toString());
};

function testDurFmtITFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "it-IT",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1st 1g 1o 1m 1s", duration.toString());
};

function testDurFmtITFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "it-IT",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1st 1g 01.01.01", duration.toString());
};

function testDurFmtITFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "it-IT",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 an 1 me 1 set 1 g 1 h 1 mn 1 se", duration.toString());
};

function testDurFmtITFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "it-IT",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 anno 1 mese 1 sett 1 g 1 h 1 min 1 sec", duration.toString());
};

function testDurFmtITFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "it-IT",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 anno, 1 mese, 1 settimana, 1 giorno, 1 ora, 1 minuto, e 1 secondo", duration.toString());
};


function testDurFmtITAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "it-IT",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 anni, 2 mesi, 2 settimane, 2 giorni, 2 ore, 2 minuti, e 2 secondi", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtITFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "it-IT",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1a 1me 1st 1g 01.01.01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for japanese

function testDurFmtJAFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "ja-JP",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´1ã¶æ1é±é1æ¥1æé1å1ç§1ããªç§", duration.toString());
};

function testDurFmtJAFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "ja-JP",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´1ã¶æ1é±é1æ¥1æé1å1ç§1ããªç§", duration.toString());
};

function testDurFmtJAFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "ja-JP",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´1ã¶æ1é±é1æ¥01:01:01", duration.toString());
};

function testDurFmtJAFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "ja-JP",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´1ã¶æ1é±é1æ¥1æé1å1ç§1ããªç§", duration.toString());
};

function testDurFmtJAFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "ja-JP",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´ã1ã¶æã1é±éã1æ¥ã1æéã1åã1ç§ã1ããªç§", duration.toString());
};

function testDurFmtJAFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "ja-JP",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1å¹´ã1ã¶æã1é±éã1æ¥ã1æéã1åã1ç§ã1ããªç§", duration.toString());
};


function testDurFmtJAAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ja-JP",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2,
    	millisecond: 2
    	    });
    	    assertEquals("2å¹´ã2ã¶æã2é±éã2æ¥ã2æéã2åã2ç§ã2ããªç§", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtJAFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ja-JP",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1,
    	millisecond: 1
    	    });
    	    assertEquals("1å¹´1ã¶æ1é±é1æ¥01:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for kk-Cyrl-KZ

function testDurFmtKKFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "kk-Cyrl-KZ",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð¶ 1Ð° 1Ð° 1Ñ 1Ñ 1Ð¼ 1Ñ", duration.toString());
};

function testDurFmtKKFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "kk-Cyrl-KZ",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð¶ 1Ð° 1Ð° 1Ñ 1Ñ 1Ð¼ 1Ñ", duration.toString());
};

function testDurFmtKKFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "kk-Cyrl-KZ",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð¶ 1Ð° 1Ð° 1Ñ 1:01:01", duration.toString());
};


function testDurFmtKKFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "kk-Cyrl-KZ",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ð¶ÑÐ» 1 Ð°Ð¹ 1 Ð°Ð¿ÑÐ° 1 ÑÓÑ 1 ÑÐ°Ò 1 Ð¼Ð¸Ð½ 1 ÑÐµÐº", duration.toString());
};

function testDurFmtKKFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "kk-Cyrl-KZ",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ð¶ÑÐ», 1 Ð°Ð¹, 1 Ð°Ð¿ÑÐ°, 1 ÑÓÑÐ»ÑÐº, 1 ÑÐ°ÒÐ°Ñ, 1 Ð¼Ð¸Ð½ÑÑ, 1 ÑÐµÐºÑÐ½Ð´", duration.toString());
};


function testDurFmtKKAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "kk-Cyrl-KZ",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 Ð¶ÑÐ», 2 Ð°Ð¹, 2 Ð°Ð¿ÑÐ°, 2 ÑÓÑÐ»ÑÐº, 2 ÑÐ°ÒÐ°Ñ, 2 Ð¼Ð¸Ð½ÑÑ, 2 ÑÐµÐºÑÐ½Ð´", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtKKFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "kk-Cyrl-KZ",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1Ð¶ 1Ð° 1Ð° 1Ñ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for ko-KR

function testDurFmtKOFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "ko-KR",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1ë 1ê° 1ì£¼ 1ì¼ 1ì 1ë¶ 1ì´ 1ë¦¬ì´", duration.toString());
};

function testDurFmtKOFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "ko-KR",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1ë 1ê° 1ì£¼ 1ì¼ 1ì 1ë¶ 1ì´ 1ë¦¬ì´", duration.toString());
};

function testDurFmtKOFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "ko-KR",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1ë 1ê° 1ì£¼ 1ì¼ 1:01:01", duration.toString());
};

function testDurFmtKOFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "ko-KR",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1ë 1ê°ì 1ì£¼ 1ì¼ 1ìê° 1ë¶ 1ì´ 1ë¦¬ì´", duration.toString());
};

function testDurFmtKOFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "ko-KR",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1ë, 1ê°ì, 1ì£¼, 1ì¼, 1ìê°, 1ë¶, 1ì´, 1ë¦¬ì´", duration.toString());
};

function testDurFmtKOFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "ko-KR",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1,
    	millisecond: 1
    });
    assertEquals("1ë, 1ê°ì, 1ì£¼, 1ì¼, 1ìê°, 1ë¶, 1ì´ ë° 1ë°ë¦¬ì´", duration.toString());
};


function testDurFmtKOAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ko-KR",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2,
    	millisecond: 1
    	    });
    	    assertEquals("2ë, 2ê°ì, 2ì£¼, 2ì¼, 2ìê°, 2ë¶, 2ì´ ë° 1ë°ë¦¬ì´", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtKOFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ko-KR",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1ë 1ê° 1ì£¼ 1ì¼ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

/*
function testDurFmtKUFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "ku-Arab-IQ",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtKUFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "ku-Arab-IQ",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtKUFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "ku-Arab-IQ",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtKUFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "ku-Arab-IQ",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtKUFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "ku-Arab-IQ",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtKUFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "ku-Arab-IQ",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ø³Ø§Úµ , 1 ÙØ§ÙÚ¯, 1 Ø­ÙÙØªÙ , 1 Ø±ÛÚ, 1 ÙØ§ÚÛØ±, 1 Ø®ÙÙÛÚ©, Ù 1 ÚØ±Ú©Ù", duration.toString());
};


function testDurFmtKUAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ku-Arab-IQ",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtKUFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ku-Arab-IQ",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};
*/

//test cases for lt-LT

function testDurFmtLTFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "lt-LT",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1m 1m 1s 1d 1v 1m 1s", duration.toString());
};

function testDurFmtLTFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "lt-LT",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1m 1m 1s 1d 1v 1m 1s", duration.toString());
};

function testDurFmtLTFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "lt-LT",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1m 1m 1s 1d 1:01:01", duration.toString());
};

function testDurFmtLTFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "lt-LT",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 m. 1 mÄ 1 sa 1 d. 1 va 1 mi 1 se", duration.toString());
};

function testDurFmtLTFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "lt-LT",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 met 1 mÄn 1 sav 1 die 1 val 1 min 1 sek", duration.toString());
};

function testDurFmtLTFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "lt-LT",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 metai, 1 mÄnuo, 1 savaitÄ, 1 diena, 1 valanda, 1 minutÄ ir 1 sekundÄ", duration.toString());
};


function testDurFmtLTAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "lt-LT",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 metai, 2 mÄnesiai, 2 savaitÄs, 2 dienos, 2 valandos, 2 minutÄs ir 2 sekundÄs", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtLTFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "lt-LT",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1m 1m 1s 1d 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for lv-LV

function testDurFmtLVFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "lv-LV",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1n 1d 1s 1m 1s", duration.toString());
};

function testDurFmtLVFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "lv-LV",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1n 1d 1s 1m 1s", duration.toString());
};

function testDurFmtLVFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "lv-LV",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1n 1d 1:01:01", duration.toString());
};

function testDurFmtLVFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "lv-LV",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 g. 1 mÄ 1 ne 1 di 1 st 1 min 1 se", duration.toString());
};

function testDurFmtLVFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "lv-LV",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 gads 1 mÄn 1 ned 1 die 1 stu 1 min 1 sek", duration.toString());
};

function testDurFmtLVFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "lv-LV",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 gads, 1 mÄnesis, 1 nedÄÄ¼a, 1 diennakts, 1 stunda, 1 minÅ«te un 1 sekunde", duration.toString());
};


function testDurFmtLVAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "lv-LV",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 gadi, 2 mÄneÅ¡i, 2 nedÄÄ¼as, 2 diennaktis, 2 stundas, 2 minÅ«tes un 2 sekundes", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtLVFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "lv-LV",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1g 1m 1n 1d 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for mk-MK

function testDurFmtMKFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "mk-MK",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð³ 1Ð¼ 1Ð½ 1Ð´ 1Ñ 1Ð¼ 1Ñ", duration.toString());
};

function testDurFmtMKFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "mk-MK",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð³ 1Ð¼ 1Ð½ 1Ð´ 1Ñ 1Ð¼ 1Ñ", duration.toString());
};

function testDurFmtMKFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "mk-MK",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð³ 1Ð¼ 1Ð½ 1Ð´ 1:01:01", duration.toString());
};

function testDurFmtMKFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "mk-MK",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ð³Ð¾Ð´ 1 Ð¼ÑÑ 1 Ð½ÐµÐ´ 1 Ð´ÐµÐ½ 1 ÑÐ°Ñ 1 Ð¼Ð¸Ð½ 1 ÑÐµÐº", duration.toString());
};

function testDurFmtMKFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "mk-MK",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ð³Ð¾Ð´ 1 Ð¼ÐµÑ 1 Ð½ÐµÐ´ 1 Ð´ÐµÐ½ 1 ÑÐ°Ñ 1 Ð¼Ð¸Ð½ 1 ÑÐµÐº", duration.toString());
};

function testDurFmtMKFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "mk-MK",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ð³Ð¾Ð´Ð¸Ð½Ð°, 1 Ð¼ÐµÑÐµÑ, 1 Ð½ÐµÐ´ÐµÐ»Ð°, 1 Ð´ÐµÐ½, 1 ÑÐ°Ñ, 1 Ð¼Ð¸Ð½ÑÑÐ°, 1 ÑÐµÐºÑÐ½Ð´Ð°", duration.toString());
};


function testDurFmtMKAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "mk-MK",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 Ð³Ð¾Ð´Ð¸Ð½Ð¸, 2 Ð¼ÐµÑÐµÑÐ¸, 2 Ð½ÐµÐ´ÐµÐ»Ð¸, 2 Ð´ÐµÐ½Ð¾Ð²Ð¸, 2 ÑÐ°ÑÐ¾Ð²Ð¸, 2 Ð¼Ð¸Ð½ÑÑÐ¸, 2 ÑÐµÐºÑÐ½Ð´Ð¸", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtMKFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "mk-MK",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1Ð³ 1Ð¼ 1Ð½ 1Ð´ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for mn-Cyrl-MN

/*
function testDurFmtMNFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "mn-Cyrl-MN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtMNFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "mn-Cyrl-MN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtMNFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "mn-Cyrl-MN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtMNFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "mn-Cyrl-MN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtMNFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "mn-Cyrl-MN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtMNFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "mn-Cyrl-MN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};


function testDurFmtMNAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "mn-Cyrl-MN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtMNFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "mn-Cyrl-MN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};*/

//test cases for ms-MY

function testDurFmtMSFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "ms-MY",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1t 1b 1m 1h 1j 1m 1s", duration.toString());
};

function testDurFmtMSFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "ms-MY",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1t 1b 1m 1h 1j 1m 1s", duration.toString());
};

function testDurFmtMSFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "ms-MY",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1t 1b 1m 1h 1:01:01", duration.toString());
};

function testDurFmtMSFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "ms-MY",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 thn 1 bu 1 mi 1 ha 1 jam 1 min 1 sa", duration.toString());
};

function testDurFmtMSFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "ms-MY",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 tah 1 bul 1 min 1 hari 1 jam 1 min 1 saat", duration.toString());
};

function testDurFmtMSFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "ms-MY",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 tahun, 1 bulan, 1 minggu, 1 hari, 1 jam, 1 minit, dan 1 saat", duration.toString());
};


function testDurFmtMSAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ms-MY",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 tahun, 2 bulan, 2 minggu, 2 hari, 2 jam, 2 minit, dan 2 saat", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtMSFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ms-MY",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1t 1b 1m 1h 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for nb-NO


function testDurFmtNBFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "nb-NO",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã¥ 1m 1u 1d 1t 1m 1s", duration.toString());
};

function testDurFmtNBFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "nb-NO",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã¥ 1m 1u 1d 1t 1m 1s", duration.toString());
};

function testDurFmtNBFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "nb-NO",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã¥ 1m 1u 1d 1:01:01", duration.toString());
};

function testDurFmtNBFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "nb-NO",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã¥r 1 md. 1 uke 1 dag 1 ti 1 min 1 sek", duration.toString());
};

function testDurFmtNBFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "nb-NO",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã¥r 1 mÃ¥n 1 uke 1 dag 1 time 1 min 1 sek", duration.toString());
};

function testDurFmtNBFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "nb-NO",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã¥r, 1 mÃ¥ned, 1 uke, 1 dag, 1 time, 1 minutt og 1 sekund", duration.toString());
};


function testDurFmtNBAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "nb-NO",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 Ã¥r, 2 mÃ¥neder, 2 uker, 2 dager, 2 timer, 2 minutter og 2 sekunder", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtNBFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "nb-NO",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1Ã¥ 1m 1u 1d 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for nl-NL


function testDurFmtNLFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "nl-NL",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1j 1m 1w 1d 1u 1m 1s", duration.toString());
};

function testDurFmtNLFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "nl-NL",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1j 1m 1w 1d 1u 1m 1s", duration.toString());
};

function testDurFmtNLFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "nl-NL",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1j 1m 1w 1d 01:01:01", duration.toString());
};

function testDurFmtNLFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "nl-NL",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 jr 1 mn 1 wk 1 da 1 u 1 mi 1 se", duration.toString());
};

function testDurFmtNLFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "nl-NL",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 jr 1 mnd 1 wk 1 dag 1 uur 1 min 1 sec", duration.toString());
};

function testDurFmtNLFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "nl-NL",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 jaar, 1 maand, 1 week, 1 dag, 1 uur, 1 minuut en 1 seconde", duration.toString());
};


function testDurFmtNLAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "nl-NL",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 jaar, 2 maanden, 2 weken, 2 dagen, 2 uur, 2 minuten en 2 seconden", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtNLFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "nl-NL",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1j 1m 1w 1d 01:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for pl-PL


function testDurFmtPLFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "pl-PL",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1r 1m 1t 1d 1g 1m 1s", duration.toString());
};

function testDurFmtPLFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "pl-PL",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1r 1m 1t 1d 1g 1m 1s", duration.toString());
};

function testDurFmtPLFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "pl-PL",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1r 1m 1t 1d 1:01:01", duration.toString());
};

function testDurFmtPLFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "pl-PL",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 rok 1 mi 1 ty 1 dz 1 go 1 mi 1 se", duration.toString());
};

function testDurFmtPLFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "pl-PL",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 rok 1 mie 1 tyd 1 dzi 1 god 1 min 1 sek", duration.toString());
};

function testDurFmtPLFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "pl-PL",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 rok, 1 miesiÄc, 1 tydzieÅ, 1 dzieÅ, 1 godzina, 1 minuta i 1 sekunda", duration.toString());
};




function testDurFmtPLFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "pl-PL",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1r 1m 1t 1d 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for pt-BR

function testDurFmtPTFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-BR",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1sm 1d 1h 1m 1s", duration.toString());
};

function testDurFmtPTFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-BR",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1sm 1d 1h 1m 1s", duration.toString());
};

function testDurFmtPTFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-BR",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1sm 1d 01H01min01s", duration.toString());
};

function testDurFmtPTFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-BR",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 an 1 mÃª 1 sm 1 di 1 hr 1 mn 1 sg", duration.toString());
};

function testDurFmtPTFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-BR",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 ano 1 mÃªs 1 sem 1 dia 1 hor 1 min 1 seg", duration.toString());
};

function testDurFmtPTFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-BR",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 ano, 1 mÃªs, 1 semana, 1 dia, 1 hora, 1 minuto e 1 segundo", duration.toString());
};


function testDurFmtPTAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "pt-BR",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 anos, 2 meses, 2 semanas, 2 dias, 2 horas, 2 minutos e 2 segundos", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtPTFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "pt-BR",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1a 1me 1sm 1d 01H01min01s", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for ro-RO

function testDurFmtROFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "ro-RO",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1l 1s 1z 1o 1m 1s", duration.toString());
};

function testDurFmtROFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "ro-RO",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1l 1s 1z 1o 1m 1s", duration.toString());
};

function testDurFmtROFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "ro-RO",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1l 1s 1z 1:01:01", duration.toString());
};

function testDurFmtROFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "ro-RO",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 an 1 lu 1 sÄ 1 zi 1 orÄ 1 mi 1 se", duration.toString());
};

function testDurFmtROFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "ro-RO",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 an 1 lunÄ 1 sÄp 1 zi 1 orÄ 1 min 1 sec", duration.toString());
};

function testDurFmtROFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "ro-RO",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 an, 1 lunÄ, 1 sÄptÄmÃ¢nÄ, 1 zi, 1 orÄ, 1 minut Åi 1 secundÄ", duration.toString());
};


function testDurFmtROAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ro-RO",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 ani, 2 luni, 2 sÄptÄmÃ¢ni, 2 zile, 2 ore, 2 minute Åi 2 secunde", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtROFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ro-RO",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1a 1l 1s 1z 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for ru-RU

function testDurFmtRUFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "ru-RU",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð³ 1Ð¼ 1Ð½ 1Ð´ 1Ñ 1Ð¼ 1Ñ", duration.toString());
};

function testDurFmtRUFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "ru-RU",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð³ 1Ð¼ 1Ð½ 1Ð´ 1Ñ 1Ð¼ 1Ñ", duration.toString());
};

function testDurFmtRUFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "ru-RU",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ð³ 1Ð¼ 1Ð½ 1Ð´ 1:01:01", duration.toString());
};

function testDurFmtRUFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "ru-RU",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ð³ 1 Ð¼Ðµ 1 Ð½Ðµ 1 Ð´Ð½ 1 Ñ 1 Ð¼Ð¸ 1 ÑÐµ", duration.toString());
};

function testDurFmtRUFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "ru-RU",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ð³Ð¾Ð´ 1 Ð¼ÐµÑ 1 Ð½ÐµÐ´ 1 Ð´ÐµÐ½Ñ 1 ÑÐ°Ñ 1 Ð¼Ð¸Ð½ 1 ÑÐµÐº", duration.toString());
};

function testDurFmtRUFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "ru-RU",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ð³Ð¾Ð´, 1 Ð¼ÐµÑÑÑ, 1 Ð½ÐµÐ´ÐµÐ»Ñ, 1 Ð´ÐµÐ½Ñ, 1 ÑÐ°Ñ, 1 Ð¼Ð¸Ð½ÑÑÐ° Ð¸ 1 ÑÐµÐºÑÐ½Ð´Ð°", duration.toString());
};


function testDurFmtRUAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ru-RU",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 Ð³Ð¾Ð´Ð°, 2 Ð¼ÐµÑÑÑÐ°, 2 Ð½ÐµÐ´ÐµÐ»Ð¸, 2 Ð´Ð½Ñ, 2 ÑÐ°ÑÐ°, 2 Ð¼Ð¸Ð½ÑÑÑ Ð¸ 2 ÑÐµÐºÑÐ½Ð´Ñ", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtRUFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "ru-RU",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1Ð³ 1Ð¼ 1Ð½ 1Ð´ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for sk-SK

function testDurFmtSKFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "sk-SK",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1r 1m 1t 1d 1h 1m 1s", duration.toString());
};

function testDurFmtSKFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "sk-SK",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1r 1m 1t 1d 1h 1m 1s", duration.toString());
};

function testDurFmtSKFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "sk-SK",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1r 1m 1t 1d 1:01:01", duration.toString());
};

function testDurFmtSKFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "sk-SK",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 r. 1 me 1 tÃ½ 1 d. 1 ho 1 min 1 se", duration.toString());
};

function testDurFmtSKFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "sk-SK",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 rok 1 mes 1 tÃ½Å¾ 1 deÅ 1 hod 1 min 1 sek", duration.toString());
};

function testDurFmtSKFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "sk-SK",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 rok, 1 mesiac, 1 tÃ½Å¾deÅ, 1 deÅ, 1 hodina, 1 minÃºta a 1 sekunda", duration.toString());
};


function testDurFmtSKAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "sk-SK",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 roky, 2 mesiace, 2 tÃ½Å¾dne, 2 dni, 2 hodiny, 2 minÃºty a 2 sekundy", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtSKFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "sk-SK",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1r 1m 1t 1d 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for sq-AL

function testDurFmtSQFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "sq-AL",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1v 1m 1j 1d 1o 1m 1s", duration.toString());
};

function testDurFmtSQFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "sq-AL",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1v 1m 1j 1d 1o 1m 1s", duration.toString());
};

function testDurFmtSQFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "sq-AL",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1v 1m 1j 1d 1.01.01.", duration.toString());
};

function testDurFmtSQFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "sq-AL",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 yr 1 mo 1 wk 1 dy 1 hr 1 mi 1 se", duration.toString());
};

function testDurFmtSQFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "sq-AL",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 vit 1 muaj 1 javÃ« 1 ditÃ« 1 orÃ« 1 min 1 sek", duration.toString());
};

function testDurFmtSQFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "sq-AL",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 vit, 1 muaj, 1 javÃ«, 1 ditÃ«, 1 orÃ«, 1 minutÃ«, 1 sekondÃ«", duration.toString());
};


function testDurFmtSQAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "sq-AL",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 vjet, 2 muaj, 2 javÃ«, 2 ditÃ«, 2 orÃ«, 2 minuta, 2 sekonda", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtSQFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "sq-AL",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1v 1m 1j 1d 1.01.01.", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for sr-Latn-RS

function testDurFmtSRFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "sr-Latn-RS",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1n 1d 1s 1m 1s", duration.toString());
};

function testDurFmtSRFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "sr-Latn-RS",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1n 1d 1s 1m 1s", duration.toString());
};

function testDurFmtSRFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "sr-Latn-RS",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1g 1m 1n 1d 01.01.01", duration.toString());
};


function testDurFmtSRFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "sr-Latn-RS",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 god 1 mes 1 ned 1 dan 1 sat 1 min 1 sek", duration.toString());
};

function testDurFmtSRFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "sr-Latn-RS",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 godina, 1 mesec, 1 nedelja, 1 dan, 1 sat, 1 minut i 1 sekunda", duration.toString());
};


function testDurFmtSRAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "sr-Latn-RS",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 godine, 2 meseca, 2 nedelje, 2 dana, 2 sata, 2 minute i 2 sekunde", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtSRFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "sr-Latn-RS",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1g 1m 1n 1d 01.01.01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for th-TH

function testDurFmtTHFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "th-TH",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¸ 1à¹ 1à¸ª 1à¸§ 1à¸ 1à¸ 1à¸§", duration.toString());
};

function testDurFmtTHFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "th-TH",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¸ 1à¹ 1à¸ª 1à¸§ 1à¸ 1à¸ 1à¸§", duration.toString());
};

function testDurFmtTHFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "th-TH",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1à¸ 1à¹ 1à¸ª 1à¸§ 1:01:01", duration.toString());
};

function testDurFmtTHFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "th-TH",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¸à¸µ 1 à¹à¸ 1 à¸ªà¸± 1 à¸§à¸±à¸ 1 à¸à¸± 1 à¸à¸² 1 à¸§à¸´", duration.toString());
};

function testDurFmtTHFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "th-TH",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¸à¸µ 1 à¹à¸à¸· 1 à¸ªà¸±à¸ 1 à¸§à¸±à¸ 1 à¸à¸±à¹ 1 à¸à¸²à¸à¸µ 1 à¸§à¸´à¸", duration.toString());
};

function testDurFmtTHFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "th-TH",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 à¸à¸µ 1 à¹à¸à¸·à¸­à¸ 1 à¸ªà¸±à¸à¸à¸²à¸«à¹ 1 à¸§à¸±à¸ 1 à¸à¸±à¹à¸§à¹à¸¡à¸ 1 à¸à¸²à¸à¸µ à¹à¸¥à¸°1 à¸§à¸´à¸à¸²à¸à¸µ", duration.toString());
};


function testDurFmtTHAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "th-TH",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 à¸à¸µ 2 à¹à¸à¸·à¸­à¸ 2 à¸ªà¸±à¸à¸à¸²à¸«à¹ 2 à¸§à¸±à¸ 2 à¸à¸±à¹à¸§à¹à¸¡à¸ 2 à¸à¸²à¸à¸µ à¹à¸¥à¸°2 à¸§à¸´à¸à¸²à¸à¸µ", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtTHFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "th-TH",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1à¸ 1à¹ 1à¸ª 1à¸§ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};



//test cases for uk-UA


function testDurFmtUKUAFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "uk-UA",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ñ 1Ð¼ 1Ñ 1Ð´ 1Ð³ 1Ñ 1Ñ", duration.toString());
};

function testDurFmtUKUAFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "uk-UA",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ñ 1Ð¼ 1Ñ 1Ð´ 1Ð³ 1Ñ 1Ñ", duration.toString());
};

function testDurFmtUKUAFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "uk-UA",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ñ 1Ð¼ 1Ñ 1Ð´ 1:01:01", duration.toString());
};

function testDurFmtUKUAFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "uk-UA",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ñ. 1 Ð¼Ñ 1 ÑÐ¸ 1 Ð´Ðµ 1 Ð³Ð¾ 1 ÑÐ². 1 ÑÐµ", duration.toString());
};

function testDurFmtUKUAFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "uk-UA",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 ÑÑÐº 1 Ð¼ÑÑ 1 ÑÐ¸Ð¶ 1 Ð´ÐµÐ½Ñ 1 Ð³Ð¾Ð´ 1 ÑÐ²Ð¸ 1 ÑÐµÐº", duration.toString());
};

function testDurFmtUKUAFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "uk-UA",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 ÑÑÐº, 1 Ð¼ÑÑÑÑÑ, 1 ÑÐ¸Ð¶Ð´ÐµÐ½Ñ, 1 Ð´ÐµÐ½Ñ, 1 Ð³Ð¾Ð´Ð¸Ð½Ð°, 1 ÑÐ²Ð¸Ð»Ð¸Ð½Ð° ÑÐ° 1 ÑÐµÐºÑÐ½Ð´Ð°", duration.toString());
};


function testDurFmtUKUAAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "uk-UA",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 ÑÐ¾ÐºÐ¸, 2 Ð¼ÑÑÑÑÑ, 2 ÑÐ¸Ð¶Ð½Ñ, 2 Ð´Ð½Ñ, 2 Ð³Ð¾Ð´Ð¸Ð½Ð¸, 2 ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸ ÑÐ° 2 ÑÐµÐºÑÐ½Ð´Ð¸", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtUKUAFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "uk-UA",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1Ñ 1Ð¼ 1Ñ 1Ð´ 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for uz-Cyrl-UZ
/*
function testDurFmtUZFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Cyrl-UZ",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtUZFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Cyrl-UZ",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtUZFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Cyrl-UZ",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1:01:01", duration.toString());
};

function testDurFmtUZFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Cyrl-UZ",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtUZFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Cyrl-UZ",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtUZFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Cyrl-UZ",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};


function testDurFmtUZAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "uz-Cyrl-UZ",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtUZFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "uz-Cyrl-UZ",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for uz-Latn-UZ


function testDurFmtUZLATNFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Latn-UZ",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtUZLATNFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Latn-UZ",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtUZLATNFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Latn-UZ",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtUZLATNFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Latn-UZ",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtUZLATNFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Latn-UZ",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};

function testDurFmtUZLATNFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "uz-Latn-UZ",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("", duration.toString());
};


function testDurFmtUZLATNAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "uz-Latn-UZ",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtUZLATNFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "uz-Latn-UZ",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};
*/

//test cases for vietnemese

function testDurFmtVIFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "vi-VN",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1n 1t 1t 1n 1g 1p 1g", duration.toString());
};

function testDurFmtVIFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "vi-VN",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1n 1t 1t 1n 1g 1p 1g", duration.toString());
};

function testDurFmtVIFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "vi-VN",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1n 1t 1t 1n 01H01:01", duration.toString());
};

function testDurFmtVIFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "vi-VN",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 nÄm 1 th 1 tu 1 ng 1 giá» 1 ph 1 gi", duration.toString());
};

function testDurFmtVIFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "vi-VN",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 nÄm, 1 thÃ¡, 1 tuáº§n, 1 ngÃ y, 1 giá», 1 phÃºt, 1 giÃ¢y", duration.toString());
};

function testDurFmtVIFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "vi-VN",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 nÄm, 1 thÃ¡ng, 1 tuáº§n, 1 ngÃ y, 1 giá», 1 phÃºt vÃ  1 giÃ¢y", duration.toString());
};


function testDurFmtVIAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "vi-VN",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 nÄm, 2 thÃ¡ng, 2 tuáº§n, 2 ngÃ y, 2 giá», 2 phÃºt vÃ  2 giÃ¢y", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtVIFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "vi-VN",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1n 1t 1t 1n 01H01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for zh-Hant-TW

function testDurFmtZHFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-TW",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´1åæ1é±1å¤©1å°æ1åé1ç§", duration.toString());
};

function testDurFmtZHFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-TW",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´1åæ1é±1å¤©1å°æ1åé1ç§", duration.toString());
};

function testDurFmtZHFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-TW",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´1åæ1é±1å¤©1:01:01", duration.toString());
};

function testDurFmtZHFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-TW",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´1åæ1å¨1å¤©1å°æ1åé1ç§", duration.toString());
};

function testDurFmtZHFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-TW",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´ã1åæã1é±ã1å¤©ã1å°æã1åéã1ç§", duration.toString());
};

function testDurFmtZHFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-TW",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´ã1åæã1é±ã1å¤©ã1å°æã1åéå1ç§", duration.toString());
};


function testDurFmtZHAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "zh-Hant-TW",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2å¹´ã2åæã2é±ã2å¤©ã2å°æã2åéå2ç§", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtZHFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "zh-Hant-TW",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1å¹´1åæ1é±1å¤©1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for zh-Hank-HK

function testDurFmtZHHKFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-HK",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´1åæ1é±1å¤©1å°æ1åé1ç§", duration.toString());
};


function testDurFmtZHHKFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-HK",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´1åæ1é±1å¤©1å°æ1åé1ç§", duration.toString());
};

function testDurFmtZHHKFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-HK",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´1åæ1é±1å¤©1:01:01", duration.toString());
};

function testDurFmtZHHKFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-HK",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´1åæ1å¨1å¤©1å°æ1åé1ç§", duration.toString());
};

function testDurFmtZHHKFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-HK",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´ã1åæã1é±ã1å¤©ã1å°æã1åéã1ç§", duration.toString());
};

function testDurFmtZHHKFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "zh-Hant-HK",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1å¹´ã1åæã1é±ã1å¤©ã1å°æã1åéå1ç§", duration.toString());
};


function testDurFmtZHHKAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "zh-Hant-HK",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2å¹´ã2åæã2é±ã2å¤©ã2å°æã2åéå2ç§", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtZHHKFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "zh-Hant-HK",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1å¹´1åæ1é±1å¤©1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for tr-TR

function testDurFmtTRFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "tr-TR",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1y 1a 1h 1g 1s 1d 1s", duration.toString());
};

function testDurFmtTRFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "tr-TR",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1y 1a 1h 1g 1s 1d 1s", duration.toString());
};

function testDurFmtTRFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "tr-TR",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1y 1a 1h 1g 01:01:01", duration.toString());
};

function testDurFmtTRFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "tr-TR",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 yÄ±l 1 ay 1 hf 1 gÃ¼n 1 sa 1 dk 1 sn", duration.toString());
};

function testDurFmtTRFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "tr-TR",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 yÄ±l 1 ay 1 haf 1 gÃ¼n 1 saat 1 dak 1 san", duration.toString());
};

function testDurFmtTRFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "tr-TR",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 yÄ±l, 1 ay, 1 hafta, 1 gÃ¼n, 1 saat, 1 dakika ve 1 saniye", duration.toString());
};


function testDurFmtTRAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "tr-TR",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 yÄ±l, 2 ay, 2 hafta, 2 gÃ¼n, 2 saat, 2 dakika ve 2 saniye", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtTRFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "tr-TR",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1y 1a 1h 1g 01:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for swedish

function testDurFmtSVFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "sv-SE",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã¥ 1mÃ¥ 1v 1d 1t 1m 1s", duration.toString());
};

function testDurFmtSVFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "sv-SE",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã¥ 1mÃ¥ 1v 1d 1t 1m 1s", duration.toString());
};

function testDurFmtSVFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "sv-SE",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1Ã¥ 1mÃ¥ 1v 1d 01:01:01", duration.toString());
};

function testDurFmtSVFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "sv-SE",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã¥r 1 mÃ¥ 1 ve 1 dy 1 ti 1 mi 1 se", duration.toString());
};

function testDurFmtSVFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "sv-SE",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã¥r, 1 mÃ¥n, 1 vec, 1 dygn, 1 tim, 1 min, 1 sek", duration.toString());
};

function testDurFmtSVFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "sv-SE",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 Ã¥r, 1 mÃ¥nad, 1 vecka, 1 dygn, 1 timme, 1 minut och 1 sekund", duration.toString());
};


function testDurFmtSVAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "sv-SE",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 Ã¥r, 2 mÃ¥nader, 2 veckor, 2 dygn, 2 timmar, 2 minuter och 2 sekunder", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtSVFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "sv-SE",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1Ã¥ 1mÃ¥ 1v 1d 01:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};


//test cases for sl-SI


function testDurFmtSLFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "sl-SI",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1l 1m 1t 1d 1u 1m 1s", duration.toString());
};

function testDurFmtSLFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "sl-SI",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1l 1m 1t 1d 1u 1m 1s", duration.toString());
};

function testDurFmtSLFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "sl-SI",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1l 1m 1t 1d 1:01:01", duration.toString());
};

function testDurFmtSLFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "sl-SI",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 le 1 me 1 te 1 dan 1 ura 1 min 1 se", duration.toString());
};

function testDurFmtSLFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "sl-SI",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 leto 1 mes 1 ted 1 dan 1 ura 1 min 1 sek", duration.toString());
};

function testDurFmtSLFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "sl-SI",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 leto, 1 mesec, 1 teden, 1 dan, 1 ura, 1 minuta in 1 sekunda", duration.toString());
};


function testDurFmtSLAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "sl-SI",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 leti, 2 meseca, 2 tedna, 2 dni, 2 uri, 2 minuti in 2 sekundi", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtSLFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "sl-SI",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1l 1m 1t 1d 1:01:01", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};

//test cases for portuguese pt-PU


function testDurFmtPTPTFormatShortDefaultStyle() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-PT",
    	length: "short"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1sm 1d 1h 1m 1s", duration.toString());
};

function testDurFmtPTPTFormatShortText() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-PT",
    	length: "short",
    	style: "text"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1sm 1d 1h 1m 1s", duration.toString());
};

function testDurFmtPTPTFormatShortClock() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-PT",
    	length: "short",
    	style: "clock"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1a 1me 1sm 1d 01H01min01s", duration.toString());
};

function testDurFmtPTPTFormatMedium() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-PT",
    	length: "medium"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 an 1 mÃª 1 sm 1 di 1 hr 1 mn 1 sg", duration.toString());
};

function testDurFmtPTPTFormatLong() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-PT",
    	length: "long"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 ano 1 mÃªs 1 sem 1 dia 1 hor 1 min 1 seg", duration.toString());
};

function testDurFmtPTPTFormatFull() {
    var fmt = new ilib.DurFmt({
    	locale: "pt-PT",
    	length: "full"
    });
    assertNotNull(fmt);
    
    var duration = fmt.format({
    	year: 1,
    	month: 1,
    	week: 1,
    	day: 1,
    	hour: 1,
    	minute: 1,
    	second: 1
    });
    assertEquals("1 ano, 1 mÃªs, 1 semana, 1 dia, 1 hora, 1 minuto e 1 segundo", duration.toString());
};


function testDurFmtPTPTAsyncWithLocale() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "pt-PT",
    	length: "full",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 2,
    	    	month: 2,
    	    	week: 2,
    	    	day: 2,
    	    	hour: 2,
    	    	minute: 2,
    	    	second: 2
    	    });
    	    assertEquals("2 anos, 2 meses, 2 semanas, 2 dias, 2 horas, 2 minutos e 2 segundos", duration.toString());
    	    callbackCalled = true;
    	}
    });
    
    assertTrue(callbackCalled);
};

function testDurFmtPTPTFormatShortClockAsync() {
	var callbackCalled = false;
    new ilib.DurFmt({
    	locale: "pt-PT",
    	length: "short",
    	style: "clock",
    	sync: false,
    	onLoad: function (fmt) {
    		assertNotNull(fmt);
    	    
    	    var duration = fmt.format({
    	    	year: 1,
    	    	month: 1,
    	    	week: 1,
    	    	day: 1,
    	    	hour: 1,
    	    	minute: 1,
    	    	second: 1
    	    });
    	    assertEquals("1a 1me 1sm 1d 01H01min01s", duration.toString());
    	    callbackCalled = true;
    	}
    });
    assertTrue(callbackCalled);
};
